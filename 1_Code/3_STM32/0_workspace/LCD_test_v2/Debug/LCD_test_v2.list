
LCD_test_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef98  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000773c  0800f238  0800f238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016974  08016974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801697c  0801697c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016980  08016980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  24000000  08016984  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000093c  24000268  08016bec  00018268  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ba4  08016bec  00018ba4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018268  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e1fb  00000000  00000000  00018296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d29  00000000  00000000  00036491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001918  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001343  00000000  00000000  0003bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cce9  00000000  00000000  0003ce1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021cc7  00000000  00000000  00079b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c539  00000000  00000000  0009b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00217d04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a30  00000000  00000000  00217d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0021f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000268 	.word	0x24000268
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f220 	.word	0x0800f220

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400026c 	.word	0x2400026c
 80002dc:	0800f220 	.word	0x0800f220

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <Check_Status>:
 *   @param  BNO_status_t structure that contains status information
 *           STresult, SYSError and SYSStatus
 *
 *   @retval None
 */
void Check_Status(BNO_Status_t *result){
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af04      	add	r7, sp, #16
 8000396:	6078      	str	r0, [r7, #4]
	     Bit 2 = Gyroscope self test
	     Bit 3 = MCU self test

	     0x0F = all good!
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, ST_RESULT_ADDR, 1, &value, 1, 100);
 8000398:	2364      	movs	r3, #100	@ 0x64
 800039a:	9302      	str	r3, [sp, #8]
 800039c:	2301      	movs	r3, #1
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	f107 030e 	add.w	r3, r7, #14
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	2301      	movs	r3, #1
 80003a8:	2236      	movs	r2, #54	@ 0x36
 80003aa:	2150      	movs	r1, #80	@ 0x50
 80003ac:	4827      	ldr	r0, [pc, #156]	@ (800044c <Check_Status+0xbc>)
 80003ae:	f006 f9c1 	bl	8006734 <HAL_I2C_Mem_Read>
 80003b2:	4603      	mov	r3, r0
 80003b4:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <Check_Status+0x32>
	    printf("I2C Read Error: ST_RESULT_ADDR\n");
 80003bc:	4824      	ldr	r0, [pc, #144]	@ (8000450 <Check_Status+0xc0>)
 80003be:	f00c fe63 	bl	800d088 <puts>
	}
	HAL_Delay(50);
 80003c2:	2032      	movs	r0, #50	@ 0x32
 80003c4:	f003 ff30 	bl	8004228 <HAL_Delay>
	result->STresult = value;
 80003c8:	7bba      	ldrb	r2, [r7, #14]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	701a      	strb	r2, [r3, #0]
	value=0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73bb      	strb	r3, [r7, #14]
	     3 = System Iniitalization
	     4 = Executing Self-Test
	     5 = Sensor fusio algorithm running
	     6 = System running without fusion algorithms
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_STATUS_ADDR, 1, &value, 1, 100);
 80003d2:	2364      	movs	r3, #100	@ 0x64
 80003d4:	9302      	str	r3, [sp, #8]
 80003d6:	2301      	movs	r3, #1
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	f107 030e 	add.w	r3, r7, #14
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2301      	movs	r3, #1
 80003e2:	2239      	movs	r2, #57	@ 0x39
 80003e4:	2150      	movs	r1, #80	@ 0x50
 80003e6:	4819      	ldr	r0, [pc, #100]	@ (800044c <Check_Status+0xbc>)
 80003e8:	f006 f9a4 	bl	8006734 <HAL_I2C_Mem_Read>
 80003ec:	4603      	mov	r3, r0
 80003ee:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <Check_Status+0x6c>
	    printf("I2C Read Error: SYS_STATUS_ADDR\n");
 80003f6:	4817      	ldr	r0, [pc, #92]	@ (8000454 <Check_Status+0xc4>)
 80003f8:	f00c fe46 	bl	800d088 <puts>
	}
	HAL_Delay(50);
 80003fc:	2032      	movs	r0, #50	@ 0x32
 80003fe:	f003 ff13 	bl	8004228 <HAL_Delay>
	result->SYSStatus = value;
 8000402:	7bba      	ldrb	r2, [r7, #14]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	709a      	strb	r2, [r3, #2]
	value=0;
 8000408:	2300      	movs	r3, #0
 800040a:	73bb      	strb	r3, [r7, #14]
	     7 = BNO low power mode not available for selected operation mode
	     8 = Accelerometer power mode not available
	     9 = Fusion algorithm configuration error
	     A = Sensor configuration error
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_ERR_ADDR, 1, &value, 1, 100);
 800040c:	2364      	movs	r3, #100	@ 0x64
 800040e:	9302      	str	r3, [sp, #8]
 8000410:	2301      	movs	r3, #1
 8000412:	9301      	str	r3, [sp, #4]
 8000414:	f107 030e 	add.w	r3, r7, #14
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2301      	movs	r3, #1
 800041c:	223a      	movs	r2, #58	@ 0x3a
 800041e:	2150      	movs	r1, #80	@ 0x50
 8000420:	480a      	ldr	r0, [pc, #40]	@ (800044c <Check_Status+0xbc>)
 8000422:	f006 f987 	bl	8006734 <HAL_I2C_Mem_Read>
 8000426:	4603      	mov	r3, r0
 8000428:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d002      	beq.n	8000436 <Check_Status+0xa6>
	    printf("I2C Read Error: SYS_ERR_ADDR\n");
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <Check_Status+0xc8>)
 8000432:	f00c fe29 	bl	800d088 <puts>
	}
	HAL_Delay(50);
 8000436:	2032      	movs	r0, #50	@ 0x32
 8000438:	f003 fef6 	bl	8004228 <HAL_Delay>
	result->SYSError = value;
 800043c:	7bba      	ldrb	r2, [r7, #14]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	705a      	strb	r2, [r3, #1]
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2400033c 	.word	0x2400033c
 8000450:	0800f238 	.word	0x0800f238
 8000454:	0800f258 	.word	0x0800f258
 8000458:	0800f278 	.word	0x0800f278

0800045c <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af04      	add	r7, sp, #16
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000466:	2364      	movs	r3, #100	@ 0x64
 8000468:	9302      	str	r3, [sp, #8]
 800046a:	2301      	movs	r3, #1
 800046c:	9301      	str	r3, [sp, #4]
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	2207      	movs	r2, #7
 8000476:	2150      	movs	r1, #80	@ 0x50
 8000478:	4807      	ldr	r0, [pc, #28]	@ (8000498 <SelectPage+0x3c>)
 800047a:	f006 f847 	bl	800650c <HAL_I2C_Mem_Write>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d002      	beq.n	800048a <SelectPage+0x2e>
		printf("Register page replacement could not be set\n");
 8000484:	4805      	ldr	r0, [pc, #20]	@ (800049c <SelectPage+0x40>)
 8000486:	f00c fdff 	bl	800d088 <puts>
	}
	HAL_Delay(50);
 800048a:	2032      	movs	r0, #50	@ 0x32
 800048c:	f003 fecc 	bl	8004228 <HAL_Delay>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2400033c 	.word	0x2400033c
 800049c:	0800f298 	.word	0x0800f298

080004a0 <ResetBNO055>:
  *
  * @param  None
  *
  * @retval None
  */
void ResetBNO055(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af04      	add	r7, sp, #16

	uint8_t reset = 0x20;
 80004a6:	2320      	movs	r3, #32
 80004a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 80004aa:	2364      	movs	r3, #100	@ 0x64
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	2301      	movs	r3, #1
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2301      	movs	r3, #1
 80004b8:	223f      	movs	r2, #63	@ 0x3f
 80004ba:	2150      	movs	r1, #80	@ 0x50
 80004bc:	4812      	ldr	r0, [pc, #72]	@ (8000508 <ResetBNO055+0x68>)
 80004be:	f006 f825 	bl	800650c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80004c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004c6:	f003 feaf 	bl	8004228 <HAL_Delay>

	//Checking for is reset process done
	uint8_t chip_id=0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 80004ce:	2364      	movs	r3, #100	@ 0x64
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	1dbb      	adds	r3, r7, #6
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	2200      	movs	r2, #0
 80004de:	2150      	movs	r1, #80	@ 0x50
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <ResetBNO055+0x68>)
 80004e2:	f006 f927 	bl	8006734 <HAL_I2C_Mem_Read>

	//If value of id register is not equal to BNO055 chip id which is 0xA0, wait until equal to each other
	while(chip_id != BNO055_ID) {
 80004e6:	e006      	b.n	80004f6 <ResetBNO055+0x56>
		printf("BNO055-> Undefined chip id\n");
 80004e8:	4808      	ldr	r0, [pc, #32]	@ (800050c <ResetBNO055+0x6c>)
 80004ea:	f00c fdcd 	bl	800d088 <puts>
		HAL_Delay(500);
 80004ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f2:	f003 fe99 	bl	8004228 <HAL_Delay>
	while(chip_id != BNO055_ID) {
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80004fa:	d1f5      	bne.n	80004e8 <ResetBNO055+0x48>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2400033c 	.word	0x2400033c
 800050c:	0800f2c4 	.word	0x0800f2c4

08000510 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af04      	add	r7, sp, #16
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]


	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	2b00      	cmp	r3, #0
 8000524:	d053      	beq.n	80005ce <ReadData+0xbe>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	2306      	movs	r3, #6
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	222e      	movs	r2, #46	@ 0x2e
 800053a:	2150      	movs	r1, #80	@ 0x50
 800053c:	48ba      	ldr	r0, [pc, #744]	@ (8000828 <ReadData+0x318>)
 800053e:	f006 f8f9 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8000542:	7a7b      	ldrb	r3, [r7, #9]
 8000544:	b21b      	sxth	r3, r3
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	b21a      	sxth	r2, r3
 800054a:	7a3b      	ldrb	r3, [r7, #8]
 800054c:	b21b      	sxth	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b21b      	sxth	r3, r3
 8000552:	ee07 3a90 	vmov	s15, r3
 8000556:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800055a:	ed9f 5bb1 	vldr	d5, [pc, #708]	@ 8000820 <ReadData+0x310>
 800055e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000562:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	b21b      	sxth	r3, r3
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	b21a      	sxth	r2, r3
 8000574:	7abb      	ldrb	r3, [r7, #10]
 8000576:	b21b      	sxth	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b21b      	sxth	r3, r3
 800057c:	ee07 3a90 	vmov	s15, r3
 8000580:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000584:	ed9f 5ba6 	vldr	d5, [pc, #664]	@ 8000820 <ReadData+0x310>
 8000588:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800058c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	b21b      	sxth	r3, r3
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	b21a      	sxth	r2, r3
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	ee07 3a90 	vmov	s15, r3
 80005aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005ae:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 8000820 <ReadData+0x310>
 80005b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2208      	movs	r2, #8
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f00c fe5f 	bl	800d28c <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d070      	beq.n	80006ba <ReadData+0x1aa>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2308      	movs	r3, #8
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	2220      	movs	r2, #32
 80005ec:	2150      	movs	r1, #80	@ 0x50
 80005ee:	488e      	ldr	r0, [pc, #568]	@ (8000828 <ReadData+0x318>)
 80005f0:	f006 f8a0 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	7a3b      	ldrb	r3, [r7, #8]
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b21b      	sxth	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	da03      	bge.n	8000610 <ReadData+0x100>
 8000608:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800060c:	441a      	add	r2, r3
 800060e:	4613      	mov	r3, r2
 8000610:	139b      	asrs	r3, r3, #14
 8000612:	b21b      	sxth	r3, r3
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 8000622:	7afb      	ldrb	r3, [r7, #11]
 8000624:	b21b      	sxth	r3, r3
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	b21a      	sxth	r2, r3
 800062a:	7abb      	ldrb	r3, [r7, #10]
 800062c:	b21b      	sxth	r3, r3
 800062e:	4313      	orrs	r3, r2
 8000630:	b21b      	sxth	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	da03      	bge.n	800063e <ReadData+0x12e>
 8000636:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 800063a:	441a      	add	r2, r3
 800063c:	4613      	mov	r3, r2
 800063e:	139b      	asrs	r3, r3, #14
 8000640:	b21b      	sxth	r3, r3
 8000642:	ee07 3a90 	vmov	s15, r3
 8000646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 8000650:	7b7b      	ldrb	r3, [r7, #13]
 8000652:	b21b      	sxth	r3, r3
 8000654:	021b      	lsls	r3, r3, #8
 8000656:	b21a      	sxth	r2, r3
 8000658:	7b3b      	ldrb	r3, [r7, #12]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21b      	sxth	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	da03      	bge.n	800066c <ReadData+0x15c>
 8000664:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000668:	441a      	add	r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	139b      	asrs	r3, r3, #14
 800066e:	b21b      	sxth	r3, r3
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b21b      	sxth	r3, r3
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	b21b      	sxth	r3, r3
 800068a:	4313      	orrs	r3, r2
 800068c:	b21b      	sxth	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	da03      	bge.n	800069a <ReadData+0x18a>
 8000692:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8000696:	441a      	add	r2, r3
 8000698:	4613      	mov	r3, r2
 800069a:	139b      	asrs	r3, r3, #14
 800069c:	b21b      	sxth	r3, r3
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2208      	movs	r2, #8
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00c fde9 	bl	800d28c <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d053      	beq.n	800076c <ReadData+0x25c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2306      	movs	r3, #6
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2301      	movs	r3, #1
 80006d6:	2228      	movs	r2, #40	@ 0x28
 80006d8:	2150      	movs	r1, #80	@ 0x50
 80006da:	4853      	ldr	r0, [pc, #332]	@ (8000828 <ReadData+0x318>)
 80006dc:	f006 f82a 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 80006e0:	7a7b      	ldrb	r3, [r7, #9]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	7a3b      	ldrb	r3, [r7, #8]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006f8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000820 <ReadData+0x310>
 80006fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000700:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	b21b      	sxth	r3, r3
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	7abb      	ldrb	r3, [r7, #10]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000722:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8000820 <ReadData+0x310>
 8000726:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800072a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8000734:	7b7b      	ldrb	r3, [r7, #13]
 8000736:	b21b      	sxth	r3, r3
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	7b3b      	ldrb	r3, [r7, #12]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800074c:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000820 <ReadData+0x310>
 8000750:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000754:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2208      	movs	r2, #8
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00c fd90 	bl	800d28c <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	2b00      	cmp	r3, #0
 8000774:	d05a      	beq.n	800082c <ReadData+0x31c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2306      	movs	r3, #6
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2214      	movs	r2, #20
 800078a:	2150      	movs	r1, #80	@ 0x50
 800078c:	4826      	ldr	r0, [pc, #152]	@ (8000828 <ReadData+0x318>)
 800078e:	f005 ffd1 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000792:	7a7b      	ldrb	r3, [r7, #9]
 8000794:	b21b      	sxth	r3, r3
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	7a3b      	ldrb	r3, [r7, #8]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007aa:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80007ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	edc3 7a03 	vstr	s15, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	7abb      	ldrb	r3, [r7, #10]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007d4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80007d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edc3 7a04 	vstr	s15, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80007e6:	7b7b      	ldrb	r3, [r7, #13]
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	7b3b      	ldrb	r3, [r7, #12]
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000802:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000806:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	edc3 7a05 	vstr	s15, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2208      	movs	r2, #8
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f00c fd37 	bl	800d28c <memset>
 800081e:	e005      	b.n	800082c <ReadData+0x31c>
 8000820:	00000000 	.word	0x00000000
 8000824:	40590000 	.word	0x40590000
 8000828:	2400033c 	.word	0x2400033c
	    }
	    if (sensors & SENSOR_ACCEL) {
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	2b00      	cmp	r3, #0
 8000834:	d053      	beq.n	80008de <ReadData+0x3ce>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2306      	movs	r3, #6
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	2208      	movs	r2, #8
 800084a:	2150      	movs	r1, #80	@ 0x50
 800084c:	4882      	ldr	r0, [pc, #520]	@ (8000a58 <ReadData+0x548>)
 800084e:	f005 ff71 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 8000852:	7a7b      	ldrb	r3, [r7, #9]
 8000854:	b21b      	sxth	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	7a3b      	ldrb	r3, [r7, #8]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21b      	sxth	r3, r3
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800086a:	ed9f 5b79 	vldr	d5, [pc, #484]	@ 8000a50 <ReadData+0x540>
 800086e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	edc3 7a00 	vstr	s15, [r3]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	b21b      	sxth	r3, r3
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21a      	sxth	r2, r3
 8000884:	7abb      	ldrb	r3, [r7, #10]
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b21b      	sxth	r3, r3
 800088c:	ee07 3a90 	vmov	s15, r3
 8000890:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000894:	ed9f 5b6e 	vldr	d5, [pc, #440]	@ 8000a50 <ReadData+0x540>
 8000898:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800089c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	edc3 7a01 	vstr	s15, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 80008a6:	7b7b      	ldrb	r3, [r7, #13]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008be:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8000a50 <ReadData+0x540>
 80008c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	edc3 7a02 	vstr	s15, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2208      	movs	r2, #8
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00c fcd7 	bl	800d28c <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d053      	beq.n	8000990 <ReadData+0x480>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	2306      	movs	r3, #6
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	220e      	movs	r2, #14
 80008fc:	2150      	movs	r1, #80	@ 0x50
 80008fe:	4856      	ldr	r0, [pc, #344]	@ (8000a58 <ReadData+0x548>)
 8000900:	f005 ff18 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000904:	7a7b      	ldrb	r3, [r7, #9]
 8000906:	b21b      	sxth	r3, r3
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7a3b      	ldrb	r3, [r7, #8]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21b      	sxth	r3, r3
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800091c:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000924:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	edc3 7a06 	vstr	s15, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800092e:	7afb      	ldrb	r3, [r7, #11]
 8000930:	b21b      	sxth	r3, r3
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7abb      	ldrb	r3, [r7, #10]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000946:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800094a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800094e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	edc3 7a07 	vstr	s15, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000958:	7b7b      	ldrb	r3, [r7, #13]
 800095a:	b21b      	sxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000970:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000974:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edc3 7a08 	vstr	s15, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2208      	movs	r2, #8
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00c fc7e 	bl	800d28c <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	2b00      	cmp	r3, #0
 8000998:	d053      	beq.n	8000a42 <ReadData+0x532>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2306      	movs	r3, #6
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	221a      	movs	r2, #26
 80009ae:	2150      	movs	r1, #80	@ 0x50
 80009b0:	4829      	ldr	r0, [pc, #164]	@ (8000a58 <ReadData+0x548>)
 80009b2:	f005 febf 	bl	8006734 <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80009b6:	7a7b      	ldrb	r3, [r7, #9]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	7a3b      	ldrb	r3, [r7, #8]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	ee07 3a90 	vmov	s15, r3
 80009ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009ce:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80009d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80009e0:	7afb      	ldrb	r3, [r7, #11]
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	7abb      	ldrb	r3, [r7, #10]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009f8:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80009fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000a0a:	7b7b      	ldrb	r3, [r7, #13]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	7b3b      	ldrb	r3, [r7, #12]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a22:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000a26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2208      	movs	r2, #8
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f00c fc25 	bl	800d28c <memset>
	    }
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w
 8000a50:	00000000 	.word	0x00000000
 8000a54:	40590000 	.word	0x40590000
 8000a58:	2400033c 	.word	0x2400033c

08000a5c <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fcf8 	bl	800045c <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 8000a6c:	2364      	movs	r3, #100	@ 0x64
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	223d      	movs	r2, #61	@ 0x3d
 8000a7c:	2150      	movs	r1, #80	@ 0x50
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <Set_Operation_Mode+0x58>)
 8000a80:	f005 fd44 	bl	800650c <HAL_I2C_Mem_Write>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <Set_Operation_Mode+0x36>
		printf("Operation mode could not be set!\n");
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <Set_Operation_Mode+0x5c>)
 8000a8c:	f00c fafc 	bl	800d088 <puts>
 8000a90:	e002      	b.n	8000a98 <Set_Operation_Mode+0x3c>
	}
	else printf("Operation mode switching succeeded.\n");
 8000a92:	480a      	ldr	r0, [pc, #40]	@ (8000abc <Set_Operation_Mode+0x60>)
 8000a94:	f00c faf8 	bl	800d088 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <Set_Operation_Mode+0x4a>
 8000a9e:	2013      	movs	r0, #19
 8000aa0:	f003 fbc2 	bl	8004228 <HAL_Delay>

	else HAL_Delay(9);

}
 8000aa4:	e002      	b.n	8000aac <Set_Operation_Mode+0x50>
	else HAL_Delay(9);
 8000aa6:	2009      	movs	r0, #9
 8000aa8:	f003 fbbe 	bl	8004228 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2400033c 	.word	0x2400033c
 8000ab8:	0800f2e0 	.word	0x0800f2e0
 8000abc:	0800f304 	.word	0x0800f304

08000ac0 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 8000aca:	2364      	movs	r3, #100	@ 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	223e      	movs	r2, #62	@ 0x3e
 8000ada:	2150      	movs	r1, #80	@ 0x50
 8000adc:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <SetPowerMODE+0x44>)
 8000ade:	f005 fd15 	bl	800650c <HAL_I2C_Mem_Write>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 8000ae8:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <SetPowerMODE+0x48>)
 8000aea:	f00c facd 	bl	800d088 <puts>
 8000aee:	e002      	b.n	8000af6 <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 8000af0:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <SetPowerMODE+0x4c>)
 8000af2:	f00c fac9 	bl	800d088 <puts>
	}
	HAL_Delay(50);
 8000af6:	2032      	movs	r0, #50	@ 0x32
 8000af8:	f003 fb96 	bl	8004228 <HAL_Delay>

}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2400033c 	.word	0x2400033c
 8000b08:	0800f328 	.word	0x0800f328
 8000b0c:	0800f348 	.word	0x0800f348

08000b10 <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af04      	add	r7, sp, #16
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8000b1a:	2364      	movs	r3, #100	@ 0x64
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	223f      	movs	r2, #63	@ 0x3f
 8000b2a:	2150      	movs	r1, #80	@ 0x50
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <Clock_Source+0x2c>)
 8000b2e:	f005 fced 	bl	800650c <HAL_I2C_Mem_Write>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2400033c 	.word	0x2400033c

08000b40 <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	9302      	str	r3, [sp, #8]
 8000b54:	2301      	movs	r3, #1
 8000b56:	9301      	str	r3, [sp, #4]
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2241      	movs	r2, #65	@ 0x41
 8000b60:	2150      	movs	r1, #80	@ 0x50
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <BNO055_Axis+0x54>)
 8000b64:	f005 fcd2 	bl	800650c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000b68:	2014      	movs	r0, #20
 8000b6a:	f003 fb5d 	bl	8004228 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 8000b6e:	2364      	movs	r3, #100	@ 0x64
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2301      	movs	r3, #1
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	1dbb      	adds	r3, r7, #6
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2242      	movs	r2, #66	@ 0x42
 8000b7e:	2150      	movs	r1, #80	@ 0x50
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <BNO055_Axis+0x54>)
 8000b82:	f005 fcc3 	bl	800650c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	@ 0x64
 8000b88:	f003 fb4e 	bl	8004228 <HAL_Delay>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400033c 	.word	0x2400033c

08000b98 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8000ba2:	2364      	movs	r3, #100	@ 0x64
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	2150      	movs	r1, #80	@ 0x50
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <SET_Accel_Range+0x30>)
 8000bb6:	f005 fca9 	bl	800650c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	@ 0x64
 8000bbc:	f003 fb34 	bl	8004228 <HAL_Delay>

}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400033c 	.word	0x2400033c

08000bcc <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(BNO055_Init_t Init){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	e883 0003 	stmia.w	r3, {r0, r1}

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff3f 	bl	8000a5c <Set_Operation_Mode>
	HAL_Delay(50);
 8000bde:	2032      	movs	r0, #50	@ 0x32
 8000be0:	f003 fb22 	bl	8004228 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fc39 	bl	800045c <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ffd3 	bl	8000b98 <SET_Accel_Range>
	HAL_Delay(50);
 8000bf2:	2032      	movs	r0, #50	@ 0x32
 8000bf4:	f003 fb18 	bl	8004228 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fc2f 	bl	800045c <SelectPage>
	HAL_Delay(50);
 8000bfe:	2032      	movs	r0, #50	@ 0x32
 8000c00:	f003 fb12 	bl	8004228 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 8000c04:	2364      	movs	r3, #100	@ 0x64
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	f107 030f 	add.w	r3, r7, #15
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	2238      	movs	r2, #56	@ 0x38
 8000c16:	2150      	movs	r1, #80	@ 0x50
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <BNO055_Init+0xc8>)
 8000c1a:	f005 fd8b 	bl	8006734 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8000c1e:	2032      	movs	r0, #50	@ 0x32
 8000c20:	f003 fb02 	bl	8004228 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <BNO055_Init+0x6c>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff6f 	bl	8000b10 <Clock_Source>
		HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f003 faf8 	bl	8004228 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8000c38:	787b      	ldrb	r3, [r7, #1]
 8000c3a:	78ba      	ldrb	r2, [r7, #2]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff7e 	bl	8000b40 <BNO055_Axis>
	HAL_Delay(100);
 8000c44:	2064      	movs	r0, #100	@ 0x64
 8000c46:	f003 faef 	bl	8004228 <HAL_Delay>

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 8000c4a:	2364      	movs	r3, #100	@ 0x64
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	463b      	mov	r3, r7
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	223b      	movs	r2, #59	@ 0x3b
 8000c5a:	2150      	movs	r1, #80	@ 0x50
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <BNO055_Init+0xc8>)
 8000c5e:	f005 fc55 	bl	800650c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f003 fae0 	bl	8004228 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff28 	bl	8000ac0 <SetPowerMODE>
	HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	@ 0x64
 8000c72:	f003 fad9 	bl	8004228 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 8000c76:	793b      	ldrb	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff feef 	bl	8000a5c <Set_Operation_Mode>
	HAL_Delay(100);
 8000c7e:	2064      	movs	r0, #100	@ 0x64
 8000c80:	f003 fad2 	bl	8004228 <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <BNO055_Init+0xcc>)
 8000c86:	f00c f9ff 	bl	800d088 <puts>
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2400033c 	.word	0x2400033c
 8000c98:	0800f368 	.word	0x0800f368

08000c9c <getCalibration>:
  * @param  None
  *
  * @retval Calib_status_t structure that contains
  *         the calibration status of accel, gyro, mag and system.
  */
void getCalibration(Calib_status_t *calib) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	6078      	str	r0, [r7, #4]
    uint8_t calData;

    // Read calibration status register using I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c2, P_BNO055, CALIB_STAT_ADDR, 1, &calData, 1, HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	f107 030e 	add.w	r3, r7, #14
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2235      	movs	r2, #53	@ 0x35
 8000cb8:	2150      	movs	r1, #80	@ 0x50
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <getCalibration+0x74>)
 8000cbc:	f005 fd3a 	bl	8006734 <HAL_I2C_Mem_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73fb      	strb	r3, [r7, #15]

    // Check if read was successful
    if (status == HAL_OK) {
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d11b      	bne.n	8000d02 <getCalibration+0x66>

        // Extract calibration status values

        	calib->System= (calData >> 6) & 0x03;
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	099b      	lsrs	r3, r3, #6
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	701a      	strb	r2, [r3, #0]


        	calib->Gyro = (calData >> 4) & 0x03;
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	705a      	strb	r2, [r3, #1]


        	calib->Acc = (calData >> 2) & 0x03;
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	709a      	strb	r2, [r3, #2]


        	calib->MAG = calData & 0x03;
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	70da      	strb	r2, [r3, #3]

    } else {
        printf("Failed to read calibration status register.\n");
    }
}
 8000d00:	e002      	b.n	8000d08 <getCalibration+0x6c>
        printf("Failed to read calibration status register.\n");
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <getCalibration+0x78>)
 8000d04:	f00c f9c0 	bl	800d088 <puts>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2400033c 	.word	0x2400033c
 8000d14:	0800f390 	.word	0x0800f390

08000d18 <getSensorOffsets>:
  * @param  22 byte long buffer to hold offset data
  *
  * @retval None
  *
  */
void getSensorOffsets(uint8_t *calibData) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]

        // Save the current mode
        uint8_t lastMode = getCurrentMode();
 8000d20:	f000 f8a2 	bl	8000e68 <getCurrentMode>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]

        // Switch to CONFIG mode
        Set_Operation_Mode(CONFIG_MODE);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fe97 	bl	8000a5c <Set_Operation_Mode>
        printf("Switched to CONFIG mode.\n");
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <getSensorOffsets+0x50>)
 8000d30:	f00c f9aa 	bl	800d088 <puts>

        // Read the offset registers
        HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, ACC_OFFSET_X_LSB_ADDR, 1, calibData, 22, 100);
 8000d34:	2364      	movs	r3, #100	@ 0x64
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2316      	movs	r3, #22
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	2255      	movs	r2, #85	@ 0x55
 8000d44:	2150      	movs	r1, #80	@ 0x50
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <getSensorOffsets+0x54>)
 8000d48:	f005 fcf4 	bl	8006734 <HAL_I2C_Mem_Read>
        printf("Calibration data obtained.\n");
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <getSensorOffsets+0x58>)
 8000d4e:	f00c f99b 	bl	800d088 <puts>

        // Restore the previous mode
        Set_Operation_Mode(lastMode);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe81 	bl	8000a5c <Set_Operation_Mode>
        printf("Restored to previous mode.\n");
 8000d5a:	4806      	ldr	r0, [pc, #24]	@ (8000d74 <getSensorOffsets+0x5c>)
 8000d5c:	f00c f994 	bl	800d088 <puts>
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	0800f3bc 	.word	0x0800f3bc
 8000d6c:	2400033c 	.word	0x2400033c
 8000d70:	0800f3d8 	.word	0x0800f3d8
 8000d74:	0800f3f4 	.word	0x0800f3f4

08000d78 <isFullyCalibrated>:
  * @param  None
  *
  * @retval True of False
  *
  */
bool isFullyCalibrated(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
//    Calib_status_t calib ={0};
    Calib_status_t calib ={0};
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
    getCalibration(&calib);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff89 	bl	8000c9c <getCalibration>


    switch (getCurrentMode()) {
 8000d8a:	f000 f86d 	bl	8000e68 <getCurrentMode>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	3b01      	subs	r3, #1
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d852      	bhi.n	8000e3c <isFullyCalibrated+0xc4>
 8000d96:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <isFullyCalibrated+0x24>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000dc5 	.word	0x08000dc5
 8000da0:	08000dd3 	.word	0x08000dd3
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000def 	.word	0x08000def
 8000dac:	08000e09 	.word	0x08000e09
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e3d 	.word	0x08000e3d
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000def 	.word	0x08000def
 8000dc0:	08000de1 	.word	0x08000de1
        case ACC_ONLY:
            return (calib.Acc == 3);
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	bf0c      	ite	eq
 8000dca:	2301      	moveq	r3, #1
 8000dcc:	2300      	movne	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	e046      	b.n	8000e60 <isFullyCalibrated+0xe8>
        case MAG_ONLY:
            return (calib.MAG == 3);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	e03f      	b.n	8000e60 <isFullyCalibrated+0xe8>
        case GYRO_ONLY:
        case M4G: /* No magnetometer calibration required. */
            return (calib.Gyro == 3);
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	e038      	b.n	8000e60 <isFullyCalibrated+0xe8>
        case ACC_MAG:
        case COMPASS:
            return (calib.Acc == 3 && calib.MAG == 3);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d104      	bne.n	8000dfe <isFullyCalibrated+0x86>
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d101      	bne.n	8000dfe <isFullyCalibrated+0x86>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <isFullyCalibrated+0x88>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	e02b      	b.n	8000e60 <isFullyCalibrated+0xe8>
        case ACC_GYRO:
        case IMU:
            return (calib.Acc == 3 && calib.Gyro == 3);
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d104      	bne.n	8000e18 <isFullyCalibrated+0xa0>
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d101      	bne.n	8000e18 <isFullyCalibrated+0xa0>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <isFullyCalibrated+0xa2>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	e01e      	b.n	8000e60 <isFullyCalibrated+0xe8>
        case MAG_GYRO:
            return (calib.MAG == 3 && calib.Gyro == 3);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d104      	bne.n	8000e32 <isFullyCalibrated+0xba>
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d101      	bne.n	8000e32 <isFullyCalibrated+0xba>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <isFullyCalibrated+0xbc>
 8000e32:	2300      	movs	r3, #0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e011      	b.n	8000e60 <isFullyCalibrated+0xe8>
        default:
            return (calib.System == 3 && calib.Gyro == 3 && calib.Acc == 3 && calib.MAG == 3);
 8000e3c:	793b      	ldrb	r3, [r7, #4]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d10a      	bne.n	8000e58 <isFullyCalibrated+0xe0>
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d107      	bne.n	8000e58 <isFullyCalibrated+0xe0>
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d104      	bne.n	8000e58 <isFullyCalibrated+0xe0>
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d101      	bne.n	8000e58 <isFullyCalibrated+0xe0>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <isFullyCalibrated+0xe2>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
    }
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <getCurrentMode>:
  * @param  None
  *
  * @retval Operating mode
  *
  */
Op_Modes_t getCurrentMode(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af04      	add	r7, sp, #16

	Op_Modes_t mode;

	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &mode, 1, 100);
 8000e6e:	2364      	movs	r3, #100	@ 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	223d      	movs	r2, #61	@ 0x3d
 8000e7e:	2150      	movs	r1, #80	@ 0x50
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <getCurrentMode+0x28>)
 8000e82:	f005 fc57 	bl	8006734 <HAL_I2C_Mem_Read>

    return mode;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2400033c 	.word	0x2400033c

08000e94 <Calibrate_BNO055>:
  * @param  None
  *
  * @retval None
  *
  */
bool Calibrate_BNO055(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af02      	add	r7, sp, #8

		Calib_status_t calib={0};
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
        printf("Calibrating BNO055 sensor...\n");
 8000e9e:	484e      	ldr	r0, [pc, #312]	@ (8000fd8 <Calibrate_BNO055+0x144>)
 8000ea0:	f00c f8f2 	bl	800d088 <puts>

        // Set operation mode to FUSION_MODE or appropriate mode for calibration
        Set_Operation_Mode(NDOF);
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f7ff fdd9 	bl	8000a5c <Set_Operation_Mode>
    	HAL_Delay(100);
 8000eaa:	2064      	movs	r0, #100	@ 0x64
 8000eac:	f003 f9bc 	bl	8004228 <HAL_Delay>
        // Gyroscope calibration
        printf("Calibrating gyroscope...\n");
 8000eb0:	484a      	ldr	r0, [pc, #296]	@ (8000fdc <Calibrate_BNO055+0x148>)
 8000eb2:	f00c f8e9 	bl	800d088 <puts>
        printf("Place the device in a single stable position\n");
 8000eb6:	484a      	ldr	r0, [pc, #296]	@ (8000fe0 <Calibrate_BNO055+0x14c>)
 8000eb8:	f00c f8e6 	bl	800d088 <puts>
        HAL_Delay(1000);  // Simulated gyroscope calibration time
 8000ebc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ec0:	f003 f9b2 	bl	8004228 <HAL_Delay>

        do {
            getCalibration(&calib);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fee8 	bl	8000c9c <getCalibration>
        	HAL_Delay(500);
 8000ecc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed0:	f003 f9aa 	bl	8004228 <HAL_Delay>
		} while (calib.Gyro !=3);
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d1f4      	bne.n	8000ec4 <Calibrate_BNO055+0x30>
        printf("Gyroscope calibration complete.\n");
 8000eda:	4842      	ldr	r0, [pc, #264]	@ (8000fe4 <Calibrate_BNO055+0x150>)
 8000edc:	f00c f8d4 	bl	800d088 <puts>

        // Accelerometer calibration
        printf("Calibrating accelerometer...\n");
 8000ee0:	4841      	ldr	r0, [pc, #260]	@ (8000fe8 <Calibrate_BNO055+0x154>)
 8000ee2:	f00c f8d1 	bl	800d088 <puts>
        printf("Place the device in 6 different stable positions\n");
 8000ee6:	4841      	ldr	r0, [pc, #260]	@ (8000fec <Calibrate_BNO055+0x158>)
 8000ee8:	f00c f8ce 	bl	800d088 <puts>
        for (int i = 0; i < 6; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	e00c      	b.n	8000f0c <Calibrate_BNO055+0x78>
            printf("Position %d\n", i + 1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	483d      	ldr	r0, [pc, #244]	@ (8000ff0 <Calibrate_BNO055+0x15c>)
 8000efa:	f00c f85d 	bl	800cfb8 <iprintf>
            HAL_Delay(1500);  // Simulated accelerometer calibration time
 8000efe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f02:	f003 f991 	bl	8004228 <HAL_Delay>
        for (int i = 0; i < 6; i++) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	ddef      	ble.n	8000ef2 <Calibrate_BNO055+0x5e>
        }

        do {
            getCalibration(&calib);
 8000f12:	463b      	mov	r3, r7
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fec1 	bl	8000c9c <getCalibration>
        	HAL_Delay(500);
 8000f1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f1e:	f003 f983 	bl	8004228 <HAL_Delay>
		} while (calib.Acc !=3);
 8000f22:	78bb      	ldrb	r3, [r7, #2]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d1f4      	bne.n	8000f12 <Calibrate_BNO055+0x7e>
        printf("Accelerometer calibration complete.\n");
 8000f28:	4832      	ldr	r0, [pc, #200]	@ (8000ff4 <Calibrate_BNO055+0x160>)
 8000f2a:	f00c f8ad 	bl	800d088 <puts>

        // Magnetometer calibration
        printf("Calibrating magnetometer...\n");
 8000f2e:	4832      	ldr	r0, [pc, #200]	@ (8000ff8 <Calibrate_BNO055+0x164>)
 8000f30:	f00c f8aa 	bl	800d088 <puts>
        printf("Make some random movements\n");
 8000f34:	4831      	ldr	r0, [pc, #196]	@ (8000ffc <Calibrate_BNO055+0x168>)
 8000f36:	f00c f8a7 	bl	800d088 <puts>
        HAL_Delay(1000);  // Simulated gyroscope calibration time
 8000f3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f3e:	f003 f973 	bl	8004228 <HAL_Delay>

        do {
            getCalibration(&calib);
 8000f42:	463b      	mov	r3, r7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fea9 	bl	8000c9c <getCalibration>
        	HAL_Delay(500);
 8000f4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f4e:	f003 f96b 	bl	8004228 <HAL_Delay>
		} while (calib.MAG !=3);
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d1f4      	bne.n	8000f42 <Calibrate_BNO055+0xae>
        printf("Magnetometer calibration complete.\n");
 8000f58:	4829      	ldr	r0, [pc, #164]	@ (8001000 <Calibrate_BNO055+0x16c>)
 8000f5a:	f00c f895 	bl	800d088 <puts>

        // System calibration
        printf("Calibrating system...\n");
 8000f5e:	4829      	ldr	r0, [pc, #164]	@ (8001004 <Calibrate_BNO055+0x170>)
 8000f60:	f00c f892 	bl	800d088 <puts>
        printf("Keep the device stationary until system calibration reaches level 3\n");
 8000f64:	4828      	ldr	r0, [pc, #160]	@ (8001008 <Calibrate_BNO055+0x174>)
 8000f66:	f00c f88f 	bl	800d088 <puts>
        do {
            getCalibration(&calib);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fe95 	bl	8000c9c <getCalibration>
        	HAL_Delay(500);
 8000f72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f76:	f003 f957 	bl	8004228 <HAL_Delay>
		} while (calib.System !=3);
 8000f7a:	783b      	ldrb	r3, [r7, #0]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d1f4      	bne.n	8000f6a <Calibrate_BNO055+0xd6>
        HAL_Delay(500);
 8000f80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f84:	f003 f950 	bl	8004228 <HAL_Delay>

        // Check calibration status
        while(!isFullyCalibrated()) HAL_Delay(500);
 8000f88:	e003      	b.n	8000f92 <Calibrate_BNO055+0xfe>
 8000f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f8e:	f003 f94b 	bl	8004228 <HAL_Delay>
 8000f92:	f7ff fef1 	bl	8000d78 <isFullyCalibrated>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f3      	bne.n	8000f8a <Calibrate_BNO055+0xf6>
        printf("Sensor is fully calibrated.\n");
 8000fa2:	481a      	ldr	r0, [pc, #104]	@ (800100c <Calibrate_BNO055+0x178>)
 8000fa4:	f00c f870 	bl	800d088 <puts>

        printf("System: %d      Gyro: %d       Accel: %d       MAG: %d\n",calib.System,calib.Gyro , calib.Acc, calib.MAG);
 8000fa8:	783b      	ldrb	r3, [r7, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	78bb      	ldrb	r3, [r7, #2]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4815      	ldr	r0, [pc, #84]	@ (8001010 <Calibrate_BNO055+0x17c>)
 8000fbc:	f00b fffc 	bl	800cfb8 <iprintf>
        if(isFullyCalibrated()) return true;
 8000fc0:	f7ff feda 	bl	8000d78 <isFullyCalibrated>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <Calibrate_BNO055+0x13a>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <Calibrate_BNO055+0x13c>
        else return false;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	0800f448 	.word	0x0800f448
 8000fdc:	0800f468 	.word	0x0800f468
 8000fe0:	0800f484 	.word	0x0800f484
 8000fe4:	0800f4b4 	.word	0x0800f4b4
 8000fe8:	0800f4d4 	.word	0x0800f4d4
 8000fec:	0800f4f4 	.word	0x0800f4f4
 8000ff0:	0800f528 	.word	0x0800f528
 8000ff4:	0800f538 	.word	0x0800f538
 8000ff8:	0800f55c 	.word	0x0800f55c
 8000ffc:	0800f578 	.word	0x0800f578
 8001000:	0800f594 	.word	0x0800f594
 8001004:	0800f5b8 	.word	0x0800f5b8
 8001008:	0800f5d0 	.word	0x0800f5d0
 800100c:	0800f614 	.word	0x0800f614
 8001010:	0800f630 	.word	0x0800f630

08001014 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800102c:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800102e:	4a2b      	ldr	r2, [pc, #172]	@ (80010dc <MX_ADC3_Init+0xc8>)
 8001030:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001040:	2204      	movs	r2, #4
 8001042:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800104a:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800104c:	2200      	movs	r2, #0
 800104e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001050:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001052:	2201      	movs	r2, #1
 8001054:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001058:	2201      	movs	r2, #1
 800105a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 1;
 800105c:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800105e:	2201      	movs	r2, #1
 8001060:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800107c:	2200      	movs	r2, #0
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 800108a:	2201      	movs	r2, #1
 800108c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800108e:	4812      	ldr	r0, [pc, #72]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 8001090:	f003 fb92 	bl	80047b8 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800109a:	f000 fc1d 	bl	80018d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_ADC3_Init+0xcc>)
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80010a6:	2306      	movs	r3, #6
 80010a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b0:	2304      	movs	r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_ADC3_Init+0xc4>)
 80010c2:	f003 ff1b 	bl	8004efc <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 80010cc:	f000 fc04 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24000284 	.word	0x24000284
 80010dc:	58026000 	.word	0x58026000
 80010e0:	cb840000 	.word	0xcb840000

080010e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0b4      	sub	sp, #208	@ 0xd0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22c0      	movs	r2, #192	@ 0xc0
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00c f8c9 	bl	800d28c <memset>
  if(adcHandle->Instance==ADC3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_ADC_MspInit+0x8c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d131      	bne.n	8001168 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001104:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8001110:	2306      	movs	r3, #6
 8001112:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8001114:	2328      	movs	r3, #40	@ 0x28
 8001116:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001128:	2320      	movs	r3, #32
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f007 f804 	bl	8008148 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001146:	f000 fbc7 	bl	80018d8 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_ADC_MspInit+0x90>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_ADC_MspInit+0x90>)
 8001152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_ADC_MspInit+0x90>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	37d0      	adds	r7, #208	@ 0xd0
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58026000 	.word	0x58026000
 8001174:	58024400 	.word	0x58024400

08001178 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118e:	4b3f      	ldr	r3, [pc, #252]	@ (800128c <MX_GPIO_Init+0x114>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001194:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <MX_GPIO_Init+0x114>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <MX_GPIO_Init+0x114>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b37      	ldr	r3, [pc, #220]	@ (800128c <MX_GPIO_Init+0x114>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <MX_GPIO_Init+0x114>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <MX_GPIO_Init+0x114>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <MX_GPIO_Init+0x114>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <MX_GPIO_Init+0x114>)
 80011d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011da:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <MX_GPIO_Init+0x114>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <MX_GPIO_Init+0x114>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ee:	4a27      	ldr	r2, [pc, #156]	@ (800128c <MX_GPIO_Init+0x114>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <MX_GPIO_Init+0x114>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_GPIO_Init+0x114>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <MX_GPIO_Init+0x114>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_GPIO_Init+0x114>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f642 0108 	movw	r1, #10248	@ 0x2808
 800122a:	4819      	ldr	r0, [pc, #100]	@ (8001290 <MX_GPIO_Init+0x118>)
 800122c:	f004 ffc2 	bl	80061b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 8001230:	2308      	movs	r3, #8
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_GPIO_Init+0x118>)
 8001248:	f004 fdec 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800124c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001256:	2302      	movs	r3, #2
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_GPIO_Init+0x11c>)
 8001262:	f004 fddf 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8001266:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_GPIO_Init+0x118>)
 8001280:	f004 fdd0 	bl	8005e24 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	@ 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024400 	.word	0x58024400
 8001290:	58021000 	.word	0x58021000
 8001294:	58020800 	.word	0x58020800

08001298 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_I2C1_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <MX_I2C1_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_I2C1_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	@ (800130c <MX_I2C1_Init+0x74>)
 80012d4:	f004 ff88 	bl	80061e8 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 fafb 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_I2C1_Init+0x74>)
 80012e6:	f005 fe8d 	bl	8007004 <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 faf2 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_I2C1_Init+0x74>)
 80012f8:	f005 fecf 	bl	800709a <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 fae9 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	240002e8 	.word	0x240002e8
 8001310:	40005400 	.word	0x40005400
 8001314:	307075b1 	.word	0x307075b1

08001318 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <MX_I2C2_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <MX_I2C2_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_I2C2_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	@ (8001394 <MX_I2C2_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_I2C2_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_I2C2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_I2C2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <MX_I2C2_Init+0x74>)
 8001354:	f004 ff48 	bl	80061e8 <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800135e:	f000 fabb 	bl	80018d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <MX_I2C2_Init+0x74>)
 8001366:	f005 fe4d 	bl	8007004 <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fab2 	bl	80018d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_I2C2_Init+0x74>)
 8001378:	f005 fe8f 	bl	800709a <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 faa9 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400033c 	.word	0x2400033c
 8001390:	40005800 	.word	0x40005800
 8001394:	307075b1 	.word	0x307075b1

08001398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0bc      	sub	sp, #240	@ 0xf0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	22c0      	movs	r2, #192	@ 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00b ff67 	bl	800d28c <memset>
  if(i2cHandle->Instance==I2C1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a4d      	ldr	r2, [pc, #308]	@ (80014f8 <HAL_I2C_MspInit+0x160>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d146      	bne.n	8001456 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c8:	f04f 0208 	mov.w	r2, #8
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 feb2 	bl	8008148 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013ea:	f000 fa75 	bl	80018d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	4a41      	ldr	r2, [pc, #260]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fe:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800140c:	23c0      	movs	r3, #192	@ 0xc0
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001412:	2312      	movs	r3, #18
 8001414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001424:	2304      	movs	r3, #4
 8001426:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800142e:	4619      	mov	r1, r3
 8001430:	4833      	ldr	r0, [pc, #204]	@ (8001500 <HAL_I2C_MspInit+0x168>)
 8001432:	f004 fcf7 	bl	8005e24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 8001438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143c:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 800143e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001442:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001454:	e04b      	b.n	80014ee <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a2a      	ldr	r2, [pc, #168]	@ (8001504 <HAL_I2C_MspInit+0x16c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d146      	bne.n	80014ee <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001460:	f04f 0208 	mov.w	r2, #8
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4618      	mov	r0, r3
 8001478:	f006 fe66 	bl	8008148 <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001482:	f000 fa29 	bl	80018d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014be:	2304      	movs	r3, #4
 80014c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <HAL_I2C_MspInit+0x168>)
 80014cc:	f004 fcaa 	bl	8005e24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 80014d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 80014d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_I2C_MspInit+0x164>)
 80014e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
}
 80014ee:	bf00      	nop
 80014f0:	37f0      	adds	r7, #240	@ 0xf0
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40005400 	.word	0x40005400
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020400 	.word	0x58020400
 8001504:	40005800 	.word	0x40005800

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b08e      	sub	sp, #56	@ 0x38
 800150c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800150e:	f000 f9b7 	bl	8001880 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f002 fdf7 	bl	8004104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f8e5 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f7ff fe2d 	bl	8001178 <MX_GPIO_Init>
  MX_TIM1_Init();
 800151e:	f000 fc91 	bl	8001e44 <MX_TIM1_Init>
  MX_SPI4_Init();
 8001522:	f000 f9f5 	bl	8001910 <MX_SPI4_Init>
  MX_ADC3_Init();
 8001526:	f7ff fd75 	bl	8001014 <MX_ADC3_Init>
  MX_I2C2_Init();
 800152a:	f7ff fef5 	bl	8001318 <MX_I2C2_Init>
  MX_I2C1_Init();
 800152e:	f7ff feb3 	bl	8001298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Test();
 8001532:	f000 fda1 	bl	8002078 <LCD_Test>
//  {
//    /* Calibration Error */
//    Error_Handler();
//  }

  IMU_Init();
 8001536:	f000 f94f 	bl	80017d8 <IMU_Init>

  HAL_Delay(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153e:	f002 fe73 	bl	8004228 <HAL_Delay>

  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001542:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001546:	2100      	movs	r1, #0
 8001548:	4858      	ldr	r0, [pc, #352]	@ (80016ac <main+0x1a4>)
 800154a:	f004 faab 	bl	8005aa4 <HAL_ADCEx_Calibration_Start>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <main+0x50>
  {
    /* Calibration Error */
    Error_Handler();
 8001554:	f000 f9c0 	bl	80018d8 <Error_Handler>
  }


  ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001558:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <main+0x1a8>)
 800155a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800155c:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <main+0x1ac>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <main+0x1ac>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2100      	movs	r1, #0
 8001566:	9101      	str	r1, [sp, #4]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	4851      	ldr	r0, [pc, #324]	@ (80016b8 <main+0x1b0>)
 8001572:	47a0      	blx	r4
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_ADC_Start(&hadc3);
 8001574:	484d      	ldr	r0, [pc, #308]	@ (80016ac <main+0x1a4>)
 8001576:	f003 fac1 	bl	8004afc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 100);
 800157a:	2164      	movs	r1, #100	@ 0x64
 800157c:	484b      	ldr	r0, [pc, #300]	@ (80016ac <main+0x1a4>)
 800157e:	f003 fbbb 	bl	8004cf8 <HAL_ADC_PollForConversion>
	  uhADCxConvertedValue = HAL_ADC_GetValue(&hadc3);
 8001582:	484a      	ldr	r0, [pc, #296]	@ (80016ac <main+0x1a4>)
 8001584:	f003 fcac 	bl	8004ee0 <HAL_ADC_GetValue>
 8001588:	4603      	mov	r3, r0
 800158a:	b29b      	uxth	r3, r3
 800158c:	817b      	strh	r3, [r7, #10]
	  uhADCxInputVoltage = ((uhADCxConvertedValue * 3300) / 0xFFFF);
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <main+0x1b4>)
 800159e:	fb82 1203 	smull	r1, r2, r2, r3
 80015a2:	441a      	add	r2, r3
 80015a4:	13d2      	asrs	r2, r2, #15
 80015a6:	17db      	asrs	r3, r3, #31
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	607b      	str	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc3);
 80015ac:	483f      	ldr	r0, [pc, #252]	@ (80016ac <main+0x1a4>)
 80015ae:	f003 fb6f 	bl	8004c90 <HAL_ADC_Stop>

	  tempsensor = ((int32_t)uhADCxInputVoltage - V30)/Avg_Slope + 30; // C
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da00      	bge.n	80015be <main+0xb6>
 80015bc:	3301      	adds	r3, #1
 80015be:	105b      	asrs	r3, r3, #1
 80015c0:	331e      	adds	r3, #30
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c



	  sprintf((char *)&text, "temp: %3lu 'C", tempsensor);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ca:	493d      	ldr	r1, [pc, #244]	@ (80016c0 <main+0x1b8>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00b fd63 	bl	800d098 <siprintf>
	  LCD_ShowString(0, 62, ST7735Ctx.Width,16,12,text);
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <main+0x1ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	230c      	movs	r3, #12
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2310      	movs	r3, #16
 80015e4:	213e      	movs	r1, #62	@ 0x3e
 80015e6:	2000      	movs	r0, #0
 80015e8:	f001 f906 	bl	80027f8 <LCD_ShowString>



	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2108      	movs	r1, #8
 80015f0:	4834      	ldr	r0, [pc, #208]	@ (80016c4 <main+0x1bc>)
 80015f2:	f004 fddf 	bl	80061b4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	@ 0x64
 80015f8:	f002 fe16 	bl	8004228 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2108      	movs	r1, #8
 8001600:	4830      	ldr	r0, [pc, #192]	@ (80016c4 <main+0x1bc>)
 8001602:	f004 fdd7 	bl	80061b4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001606:	2064      	movs	r0, #100	@ 0x64
 8001608:	f002 fe0e 	bl	8004228 <HAL_Delay>



	  ret = HAL_I2C_Master_Receive(&hi2c1, (0x20<<1) | 0x01, buffer, sizeof(buffer), 50);
 800160c:	2332      	movs	r3, #50	@ 0x32
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2314      	movs	r3, #20
 8001612:	4a2d      	ldr	r2, [pc, #180]	@ (80016c8 <main+0x1c0>)
 8001614:	2141      	movs	r1, #65	@ 0x41
 8001616:	482d      	ldr	r0, [pc, #180]	@ (80016cc <main+0x1c4>)
 8001618:	f004 fe82 	bl	8006320 <HAL_I2C_Master_Receive>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <main+0x1c8>)
 8001622:	701a      	strb	r2, [r3, #0]

	  if (ret == HAL_OK) {
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <main+0x1c8>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d107      	bne.n	800163c <main+0x134>
	          memcpy(Ground_Commands, buffer, sizeof(Ground_Commands));  // Convert bytes to float array
 800162c:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <main+0x1cc>)
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <main+0x1c0>)
 8001630:	4614      	mov	r4, r2
 8001632:	461d      	mov	r5, r3
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	6023      	str	r3, [r4, #0]

	  }


	  sprintf((char *)&text, "Activated = %d", (int)Ground_Commands[4]);
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <main+0x1cc>)
 800163e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	4922      	ldr	r1, [pc, #136]	@ (80016d8 <main+0x1d0>)
 8001650:	4618      	mov	r0, r3
 8001652:	f00b fd21 	bl	800d098 <siprintf>
	  LCD_ShowString(0, 20, ST7735Ctx.Width,16,12,text);
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <main+0x1ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	230c      	movs	r3, #12
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2310      	movs	r3, #16
 8001668:	2114      	movs	r1, #20
 800166a:	2000      	movs	r0, #0
 800166c:	f001 f8c4 	bl	80027f8 <LCD_ShowString>


	  ReadData(&BNO055, SENSOR_QUATERNION|SENSOR_ACCEL|SENSOR_GYRO);
 8001670:	211a      	movs	r1, #26
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <main+0x1d4>)
 8001674:	f7fe ff4c 	bl	8000510 <ReadData>


	  sprintf((char *)&text, "Ax = %.2f", BNO055.Accel.X);
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <main+0x1d4>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001682:	f107 000c 	add.w	r0, r7, #12
 8001686:	ec53 2b17 	vmov	r2, r3, d7
 800168a:	4915      	ldr	r1, [pc, #84]	@ (80016e0 <main+0x1d8>)
 800168c:	f00b fd04 	bl	800d098 <siprintf>
	  LCD_ShowString(0, 40, ST7735Ctx.Width,16,12,text);
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <main+0x1ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	230c      	movs	r3, #12
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2310      	movs	r3, #16
 80016a2:	2128      	movs	r1, #40	@ 0x28
 80016a4:	2000      	movs	r0, #0
 80016a6:	f001 f8a7 	bl	80027f8 <LCD_ShowString>
	  HAL_ADC_Start(&hadc3);
 80016aa:	e763      	b.n	8001574 <main+0x6c>
 80016ac:	24000284 	.word	0x24000284
 80016b0:	2400002c 	.word	0x2400002c
 80016b4:	24000544 	.word	0x24000544
 80016b8:	24000504 	.word	0x24000504
 80016bc:	80008001 	.word	0x80008001
 80016c0:	0800f668 	.word	0x0800f668
 80016c4:	58021000 	.word	0x58021000
 80016c8:	240003a8 	.word	0x240003a8
 80016cc:	240002e8 	.word	0x240002e8
 80016d0:	24000390 	.word	0x24000390
 80016d4:	24000394 	.word	0x24000394
 80016d8:	0800f678 	.word	0x0800f678
 80016dc:	240003bc 	.word	0x240003bc
 80016e0:	0800f688 	.word	0x0800f688

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b09c      	sub	sp, #112	@ 0x70
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ee:	224c      	movs	r2, #76	@ 0x4c
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b fdca 	bl	800d28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2220      	movs	r2, #32
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00b fdc4 	bl	800d28c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001704:	2002      	movs	r0, #2
 8001706:	f005 fd15 	bl	8007134 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <SystemClock_Config+0xec>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a2f      	ldr	r2, [pc, #188]	@ (80017d0 <SystemClock_Config+0xec>)
 8001714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001718:	6193      	str	r3, [r2, #24]
 800171a:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <SystemClock_Config+0xec>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <SystemClock_Config+0xf0>)
 8001726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001728:	4a2a      	ldr	r2, [pc, #168]	@ (80017d4 <SystemClock_Config+0xf0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <SystemClock_Config+0xf0>)
 8001732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800173c:	bf00      	nop
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <SystemClock_Config+0xec>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174a:	d1f8      	bne.n	800173e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	2302      	movs	r3, #2
 800175c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800175e:	2305      	movs	r3, #5
 8001760:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001762:	23c0      	movs	r3, #192	@ 0xc0
 8001764:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001766:	2302      	movs	r3, #2
 8001768:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800176a:	2302      	movs	r3, #2
 800176c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800176e:	2302      	movs	r3, #2
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001772:	2308      	movs	r3, #8
 8001774:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001776:	2300      	movs	r3, #0
 8001778:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001782:	4618      	mov	r0, r3
 8001784:	f005 fd10 	bl	80071a8 <HAL_RCC_OscConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800178e:	f000 f8a3 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	233f      	movs	r3, #63	@ 0x3f
 8001794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001796:	2303      	movs	r3, #3
 8001798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800179e:	2308      	movs	r3, #8
 80017a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017a2:	2340      	movs	r3, #64	@ 0x40
 80017a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017a6:	2340      	movs	r3, #64	@ 0x40
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017b0:	2340      	movs	r3, #64	@ 0x40
 80017b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2104      	movs	r1, #4
 80017b8:	4618      	mov	r0, r3
 80017ba:	f006 f94f 	bl	8007a5c <HAL_RCC_ClockConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80017c4:	f000 f888 	bl	80018d8 <Error_Handler>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3770      	adds	r7, #112	@ 0x70
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58024800 	.word	0x58024800
 80017d4:	58000400 	.word	0x58000400

080017d8 <IMU_Init>:

/* USER CODE BEGIN 4 */


void IMU_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	BNO_Status_t Status = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2100      	movs	r1, #0
 80017e4:	460a      	mov	r2, r1
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	460a      	mov	r2, r1
 80017ea:	709a      	strb	r2, [r3, #2]

	//Init structure definition section
	BNO055_Init_t BNO055_InitStruct = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f8c3 2003 	str.w	r2, [r3, #3]

	//Reset section
	ResetBNO055();
 80017f6:	f7fe fe53 	bl	80004a0 <ResetBNO055>

	/*============================ *BNO055 Initialization* ============================*/

	BNO055_InitStruct.ACC_Range = Range_16G;			//Range_X
 80017fa:	2303      	movs	r3, #3
 80017fc:	72bb      	strb	r3, [r7, #10]
	BNO055_InitStruct.Axis = DEFAULT_AXIS_REMAP;			//value will be entered by looking at the data sheet
 80017fe:	2324      	movs	r3, #36	@ 0x24
 8001800:	717b      	strb	r3, [r7, #5]
	BNO055_InitStruct.Axis_sign = DEFAULT_AXIS_SIGN;		//value will be entered by looking at the data sheet
 8001802:	2300      	movs	r3, #0
 8001804:	71bb      	strb	r3, [r7, #6]
	BNO055_InitStruct.Clock_Source = CLOCK_EXTERNAL;		//CLOCK_EXTERNAL or CLOCK_INTERNAL
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	727b      	strb	r3, [r7, #9]
	BNO055_InitStruct.Mode = BNO055_NORMAL_MODE;			//BNO055_X_MODE   X:NORMAL, LOWPOWER, SUSPEND
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]
	BNO055_InitStruct.OP_Modes = NDOF;
 800180e:	230c      	movs	r3, #12
 8001810:	723b      	strb	r3, [r7, #8]
	BNO055_InitStruct.Unit_Sel = (UNIT_ORI_ANDROID | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2);
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	713b      	strb	r3, [r7, #4]
									//(UNIT_ORI_X | UNIT_TEMP_X | UNIT_EUL_X | UNIT_GYRO_X | UNIT_ACC_X)
	BNO055_Init(BNO055_InitStruct);
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	e893 0003 	ldmia.w	r3, {r0, r1}
 800181c:	f7ff f9d6 	bl	8000bcc <BNO055_Init>
	 */
	//setSensorOffsets(OffsetDatas);

	/*-=-=-=-=-=-=Calibration Part-=-=-=-=-=-=*/

	if(Calibrate_BNO055())
 8001820:	f7ff fb38 	bl	8000e94 <Calibrate_BNO055>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <IMU_Init+0x5a>
	{
		getSensorOffsets(OffsetDatas);
 800182a:	4810      	ldr	r0, [pc, #64]	@ (800186c <IMU_Init+0x94>)
 800182c:	f7ff fa74 	bl	8000d18 <getSensorOffsets>
 8001830:	e004      	b.n	800183c <IMU_Init+0x64>
	}
	else
	{
		printf("Sensor calibration failed.\nFailed to retrieve offset data\n");
 8001832:	480f      	ldr	r0, [pc, #60]	@ (8001870 <IMU_Init+0x98>)
 8001834:	f00b fc28 	bl	800d088 <puts>
		Error_Handler();
 8001838:	f000 f84e 	bl	80018d8 <Error_Handler>
	}

	Check_Status(&Status);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fda5 	bl	8000390 <Check_Status>
	printf("Selftest Result: %d\t",Status.STresult);
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	4619      	mov	r1, r3
 800184a:	480a      	ldr	r0, [pc, #40]	@ (8001874 <IMU_Init+0x9c>)
 800184c:	f00b fbb4 	bl	800cfb8 <iprintf>
	printf("System Status: %d\t",Status.SYSStatus);
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	4619      	mov	r1, r3
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <IMU_Init+0xa0>)
 8001856:	f00b fbaf 	bl	800cfb8 <iprintf>
	printf("System Error: %d\n",Status.SYSError);
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	4619      	mov	r1, r3
 800185e:	4807      	ldr	r0, [pc, #28]	@ (800187c <IMU_Init+0xa4>)
 8001860:	f00b fbaa 	bl	800cfb8 <iprintf>

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	24000414 	.word	0x24000414
 8001870:	0800f694 	.word	0x0800f694
 8001874:	0800f6d0 	.word	0x0800f6d0
 8001878:	0800f6e8 	.word	0x0800f6e8
 800187c:	0800f6fc 	.word	0x0800f6fc

08001880 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001892:	f004 fa4f 	bl	8005d34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001896:	2301      	movs	r3, #1
 8001898:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800189a:	2300      	movs	r3, #0
 800189c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018a2:	231f      	movs	r3, #31
 80018a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018a6:	2387      	movs	r3, #135	@ 0x87
 80018a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018ae:	2300      	movs	r3, #0
 80018b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018c2:	463b      	mov	r3, r7
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fa6d 	bl	8005da4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018ca:	2004      	movs	r0, #4
 80018cc:	f004 fa4a 	bl	8005d64 <HAL_MPU_Enable>

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */


	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, MAGENTA);
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <Error_Handler+0x2c>)
 80018e0:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <Error_Handler+0x30>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <Error_Handler+0x30>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4613      	mov	r3, r2
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <Error_Handler+0x34>)
 80018fa:	47a0      	blx	r4


  /* USER CODE END Error_Handler_Debug */
}
 80018fc:	bf00      	nop
 80018fe:	3704      	adds	r7, #4
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	2400002c 	.word	0x2400002c
 8001908:	24000544 	.word	0x24000544
 800190c:	24000504 	.word	0x24000504

08001910 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001916:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <MX_SPI4_Init+0xac>)
 8001918:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800191c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001920:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001924:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001928:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800192c:	2207      	movs	r2, #7
 800192e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800193e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001942:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001946:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800194a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001960:	2200      	movs	r2, #0
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800196e:	2200      	movs	r2, #0
 8001970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800197a:	2200      	movs	r2, #0
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001980:	2200      	movs	r2, #0
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001986:	2200      	movs	r2, #0
 8001988:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001992:	2200      	movs	r2, #0
 8001994:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 8001998:	2200      	movs	r2, #0
 800199a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_SPI4_Init+0xa8>)
 80019a4:	f009 f8ce 	bl	800ab44 <HAL_SPI_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80019ae:	f7ff ff93 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2400042c 	.word	0x2400042c
 80019bc:	40013400 	.word	0x40013400

080019c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0ba      	sub	sp, #232	@ 0xe8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	22c0      	movs	r2, #192	@ 0xc0
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00b fc53 	bl	800d28c <memset>
  if(spiHandle->Instance==SPI4)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <HAL_SPI_MspInit+0xc4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d145      	bne.n	8001a7c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80019f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 fb9f 	bl	8008148 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a10:	f7ff ff62 	bl	80018d8 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a38:	4a13      	ldr	r2, [pc, #76]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_SPI_MspInit+0xc8>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001a50:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001a54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_SPI_MspInit+0xcc>)
 8001a78:	f004 f9d4 	bl	8005e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	37e8      	adds	r7, #232	@ 0xe8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013400 	.word	0x40013400
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	58021000 	.word	0x58021000

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <HAL_MspInit+0x54>)
 8001ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001ad2:	f002 fbfb 	bl	80042cc <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f002 fbe4 	bl	80042a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	58024400 	.word	0x58024400

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f002 fb53 	bl	80041e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_kill>:

int _kill(int pid, int sig)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b60:	f00b fbe6 	bl	800d330 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2216      	movs	r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_exit>:

void _exit (int status)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffe7 	bl	8001b56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <_exit+0x12>

08001b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
  }

  return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
  }
  return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f00b fb4a 	bl	800d330 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	24080000 	.word	0x24080000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	240004b4 	.word	0x240004b4
 8001cd0:	24000ba8 	.word	0x24000ba8

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b43      	ldr	r3, [pc, #268]	@ (8001de8 <SystemInit+0x114>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	4a42      	ldr	r2, [pc, #264]	@ (8001de8 <SystemInit+0x114>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce8:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <SystemInit+0x118>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d807      	bhi.n	8001d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dec <SystemInit+0x118>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 030f 	bic.w	r3, r3, #15
 8001cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dec <SystemInit+0x118>)
 8001cfe:	f043 0307 	orr.w	r3, r3, #7
 8001d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d04:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <SystemInit+0x11c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a39      	ldr	r2, [pc, #228]	@ (8001df0 <SystemInit+0x11c>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d10:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <SystemInit+0x11c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d16:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <SystemInit+0x11c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4935      	ldr	r1, [pc, #212]	@ (8001df0 <SystemInit+0x11c>)
 8001d1c:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <SystemInit+0x120>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d22:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <SystemInit+0x118>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <SystemInit+0x118>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 030f 	bic.w	r3, r3, #15
 8001d36:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <SystemInit+0x118>)
 8001d38:	f043 0307 	orr.w	r3, r3, #7
 8001d3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <SystemInit+0x11c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <SystemInit+0x11c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d4a:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <SystemInit+0x11c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <SystemInit+0x11c>)
 8001d52:	4a29      	ldr	r2, [pc, #164]	@ (8001df8 <SystemInit+0x124>)
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <SystemInit+0x11c>)
 8001d58:	4a28      	ldr	r2, [pc, #160]	@ (8001dfc <SystemInit+0x128>)
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <SystemInit+0x11c>)
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <SystemInit+0x12c>)
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <SystemInit+0x11c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <SystemInit+0x11c>)
 8001d6a:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <SystemInit+0x12c>)
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <SystemInit+0x11c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <SystemInit+0x11c>)
 8001d76:	4a22      	ldr	r2, [pc, #136]	@ (8001e00 <SystemInit+0x12c>)
 8001d78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <SystemInit+0x11c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <SystemInit+0x11c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <SystemInit+0x11c>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <SystemInit+0x11c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d92:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <SystemInit+0x130>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <SystemInit+0x134>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d9e:	d202      	bcs.n	8001da6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <SystemInit+0x138>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <SystemInit+0x11c>)
 8001da8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d113      	bne.n	8001ddc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <SystemInit+0x11c>)
 8001db6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dba:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <SystemInit+0x11c>)
 8001dbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <SystemInit+0x13c>)
 8001dc6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001dca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <SystemInit+0x11c>)
 8001dce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <SystemInit+0x11c>)
 8001dd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dd8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	52002000 	.word	0x52002000
 8001df0:	58024400 	.word	0x58024400
 8001df4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001df8:	02020200 	.word	0x02020200
 8001dfc:	01ff0000 	.word	0x01ff0000
 8001e00:	01010280 	.word	0x01010280
 8001e04:	5c001000 	.word	0x5c001000
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	51008108 	.word	0x51008108
 8001e10:	52004000 	.word	0x52004000

08001e14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <ExitRun0Mode+0x2c>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <ExitRun0Mode+0x2c>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001e24:	bf00      	nop
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <ExitRun0Mode+0x2c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f9      	beq.n	8001e26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	58024800 	.word	0x58024800

08001e44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	222c      	movs	r2, #44	@ 0x2c
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00b fa0b 	bl	800d28c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e76:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e78:	4a39      	ldr	r2, [pc, #228]	@ (8001f60 <MX_TIM1_Init+0x11c>)
 8001e7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8001e7c:	4b37      	ldr	r3, [pc, #220]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e7e:	220b      	movs	r2, #11
 8001e80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b36      	ldr	r3, [pc, #216]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001e88:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e8a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b32      	ldr	r3, [pc, #200]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ea2:	482e      	ldr	r0, [pc, #184]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001ea4:	f009 fcbb 	bl	800b81e <HAL_TIM_PWM_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001eae:	f7ff fd13 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ebe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4825      	ldr	r0, [pc, #148]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001ec6:	f00a fa4d 	bl	800c364 <HAL_TIMEx_MasterConfigSynchronization>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ed0:	f7ff fd02 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed4:	2360      	movs	r3, #96	@ 0x60
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4818      	ldr	r0, [pc, #96]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001efa:	f009 fce7 	bl	800b8cc <HAL_TIM_PWM_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f04:	f7ff fce8 	bl	80018d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001f3e:	f00a fa9f 	bl	800c480 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001f48:	f7ff fcc6 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <MX_TIM1_Init+0x118>)
 8001f4e:	f000 f82b 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001f52:	bf00      	nop
 8001f54:	3758      	adds	r7, #88	@ 0x58
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	240004b8 	.word	0x240004b8
 8001f60:	40010000 	.word	0x40010000

08001f64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7c:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	58024400 	.word	0x58024400

08001fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a13      	ldr	r2, [pc, #76]	@ (8002014 <HAL_TIM_MspPostInit+0x6c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d11f      	bne.n	800200a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <HAL_TIM_MspPostInit+0x70>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_TIM_MspPostInit+0x70>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fda:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <HAL_TIM_MspPostInit+0x70>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <HAL_TIM_MspPostInit+0x74>)
 8002006:	f003 ff0d 	bl	8005e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	58024400 	.word	0x58024400
 800201c:	58021000 	.word	0x58021000

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800205c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002024:	f7ff fef6 	bl	8001e14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002028:	f7ff fe54 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800202c:	480c      	ldr	r0, [pc, #48]	@ (8002060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202e:	490d      	ldr	r1, [pc, #52]	@ (8002064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0a      	ldr	r2, [pc, #40]	@ (800206c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002044:	4c0a      	ldr	r4, [pc, #40]	@ (8002070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002052:	f00b f973 	bl	800d33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002056:	f7ff fa57 	bl	8001508 <main>
  bx  lr
 800205a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800205c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002060:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002064:	24000268 	.word	0x24000268
  ldr r2, =_sidata
 8002068:	08016984 	.word	0x08016984
  ldr r2, =_sbss
 800206c:	24000268 	.word	0x24000268
  ldr r4, =_ebss
 8002070:	24000ba4 	.word	0x24000ba4

08002074 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC3_IRQHandler>
	...

08002078 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 800207e:	4b7d      	ldr	r3, [pc, #500]	@ (8002274 <LCD_Test+0x1fc>)
 8002080:	2203      	movs	r2, #3
 8002082:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8002084:	4b7b      	ldr	r3, [pc, #492]	@ (8002274 <LCD_Test+0x1fc>)
 8002086:	2200      	movs	r2, #0
 8002088:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 800208a:	4b7a      	ldr	r3, [pc, #488]	@ (8002274 <LCD_Test+0x1fc>)
 800208c:	2201      	movs	r2, #1
 800208e:	735a      	strb	r2, [r3, #13]

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8002090:	4979      	ldr	r1, [pc, #484]	@ (8002278 <LCD_Test+0x200>)
 8002092:	487a      	ldr	r0, [pc, #488]	@ (800227c <LCD_Test+0x204>)
 8002094:	f000 fcfe 	bl	8002a94 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8002098:	4b79      	ldr	r3, [pc, #484]	@ (8002280 <LCD_Test+0x208>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a75      	ldr	r2, [pc, #468]	@ (8002274 <LCD_Test+0x1fc>)
 800209e:	2105      	movs	r1, #5
 80020a0:	4876      	ldr	r0, [pc, #472]	@ (800227c <LCD_Test+0x204>)
 80020a2:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 80020a4:	4b76      	ldr	r3, [pc, #472]	@ (8002280 <LCD_Test+0x208>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4976      	ldr	r1, [pc, #472]	@ (8002284 <LCD_Test+0x20c>)
 80020aa:	4874      	ldr	r0, [pc, #464]	@ (800227c <LCD_Test+0x204>)
 80020ac:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f8fa 	bl	80022a8 <LCD_SetBrightness>
	

	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 80020b4:	4b72      	ldr	r3, [pc, #456]	@ (8002280 <LCD_Test+0x208>)
 80020b6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80020b8:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <LCD_Test+0x210>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	486f      	ldr	r0, [pc, #444]	@ (800227c <LCD_Test+0x204>)
 80020c0:	47a0      	blx	r4

	
  uint32_t tick = get_tick();
 80020c2:	f002 f8a5 	bl	8004210 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80020c8:	e06a      	b.n	80021a0 <LCD_Test+0x128>
	{
		delay_ms(10);
 80020ca:	200a      	movs	r0, #10
 80020cc:	f002 f8ac 	bl	8004228 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80020d0:	f002 f89e 	bl	8004210 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020de:	d80f      	bhi.n	8002100 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80020e0:	f002 f896 	bl	8004210 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2264      	movs	r2, #100	@ 0x64
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	4a66      	ldr	r2, [pc, #408]	@ (800228c <LCD_Test+0x214>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f8d5 	bl	80022a8 <LCD_SetBrightness>
 80020fe:	e04f      	b.n	80021a0 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8002100:	f002 f886 	bl	8004210 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800210e:	4293      	cmp	r3, r2
 8002110:	d83d      	bhi.n	800218e <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8002112:	f002 f87d 	bl	8004210 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002120:	4a5b      	ldr	r2, [pc, #364]	@ (8002290 <LCD_Test+0x218>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	463b      	mov	r3, r7
 800212a:	495a      	ldr	r1, [pc, #360]	@ (8002294 <LCD_Test+0x21c>)
 800212c:	4618      	mov	r0, r3
 800212e:	f00a ffb3 	bl	800d098 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8002132:	4b50      	ldr	r3, [pc, #320]	@ (8002274 <LCD_Test+0x1fc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b1e      	subs	r3, #30
 800213a:	b298      	uxth	r0, r3
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <LCD_Test+0x1fc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	463b      	mov	r3, r7
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2310      	movs	r3, #16
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2310      	movs	r3, #16
 800214c:	2101      	movs	r1, #1
 800214e:	f000 fb53 	bl	80027f8 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8002152:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <LCD_Test+0x208>)
 8002154:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <LCD_Test+0x1fc>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	1edd      	subs	r5, r3, #3
 800215c:	f002 f858 	bl	8004210 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800216a:	4a42      	ldr	r2, [pc, #264]	@ (8002274 <LCD_Test+0x1fc>)
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	4a46      	ldr	r2, [pc, #280]	@ (800228c <LCD_Test+0x214>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	09db      	lsrs	r3, r3, #7
 800217a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800217e:	9201      	str	r2, [sp, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	462a      	mov	r2, r5
 8002186:	2100      	movs	r1, #0
 8002188:	483c      	ldr	r0, [pc, #240]	@ (800227c <LCD_Test+0x204>)
 800218a:	47a0      	blx	r4
 800218c:	e008      	b.n	80021a0 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 800218e:	f002 f83f 	bl	8004210 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800219c:	4293      	cmp	r3, r2
 800219e:	d808      	bhi.n	80021b2 <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80021a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a4:	483c      	ldr	r0, [pc, #240]	@ (8002298 <LCD_Test+0x220>)
 80021a6:	f003 ffed 	bl	8006184 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d18c      	bne.n	80020ca <LCD_Test+0x52>
 80021b0:	e004      	b.n	80021bc <LCD_Test+0x144>
			break;
 80021b2:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80021b4:	e002      	b.n	80021bc <LCD_Test+0x144>
	{
		delay_ms(10);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f002 f836 	bl	8004228 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	4835      	ldr	r0, [pc, #212]	@ (8002298 <LCD_Test+0x220>)
 80021c2:	f003 ffdf 	bl	8006184 <HAL_GPIO_ReadPin>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d0f4      	beq.n	80021b6 <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 80021cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f885 	bl	80022e0 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80021d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <LCD_Test+0x208>)
 80021d8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80021da:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <LCD_Test+0x1fc>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <LCD_Test+0x1fc>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2100      	movs	r1, #0
 80021e4:	9101      	str	r1, [sp, #4]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	4823      	ldr	r0, [pc, #140]	@ (800227c <LCD_Test+0x204>)
 80021f0:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 80021f2:	463b      	mov	r3, r7
 80021f4:	4929      	ldr	r1, [pc, #164]	@ (800229c <LCD_Test+0x224>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00a ff4e 	bl	800d098 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <LCD_Test+0x1fc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b29a      	uxth	r2, r3
 8002202:	463b      	mov	r3, r7
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2310      	movs	r3, #16
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2310      	movs	r3, #16
 800220c:	2104      	movs	r1, #4
 800220e:	2004      	movs	r0, #4
 8002210:	f000 faf2 	bl	80027f8 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8002214:	f002 f838 	bl	8004288 <HAL_GetDEVID>
 8002218:	4602      	mov	r2, r0
 800221a:	463b      	mov	r3, r7
 800221c:	4920      	ldr	r1, [pc, #128]	@ (80022a0 <LCD_Test+0x228>)
 800221e:	4618      	mov	r0, r3
 8002220:	f00a ff3a 	bl	800d098 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8002224:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <LCD_Test+0x1fc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29a      	uxth	r2, r3
 800222a:	463b      	mov	r3, r7
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2310      	movs	r3, #16
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2310      	movs	r3, #16
 8002234:	2116      	movs	r1, #22
 8002236:	2004      	movs	r0, #4
 8002238:	f000 fade 	bl	80027f8 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <LCD_Test+0x20c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	463b      	mov	r3, r7
 8002242:	4918      	ldr	r1, [pc, #96]	@ (80022a4 <LCD_Test+0x22c>)
 8002244:	4618      	mov	r0, r3
 8002246:	f00a ff27 	bl	800d098 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <LCD_Test+0x1fc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29a      	uxth	r2, r3
 8002250:	463b      	mov	r3, r7
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2310      	movs	r3, #16
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2310      	movs	r3, #16
 800225a:	2128      	movs	r1, #40	@ 0x28
 800225c:	2004      	movs	r0, #4
 800225e:	f000 facb 	bl	80027f8 <LCD_ShowString>

	LCD_Light(100, 200);
 8002262:	21c8      	movs	r1, #200	@ 0xc8
 8002264:	2064      	movs	r0, #100	@ 0x64
 8002266:	f000 f83b 	bl	80022e0 <LCD_Light>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
 8002272:	bf00      	nop
 8002274:	24000544 	.word	0x24000544
 8002278:	24000008 	.word	0x24000008
 800227c:	24000504 	.word	0x24000504
 8002280:	2400002c 	.word	0x2400002c
 8002284:	2400053c 	.word	0x2400053c
 8002288:	080101b8 	.word	0x080101b8
 800228c:	10624dd3 	.word	0x10624dd3
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	0800f710 	.word	0x0800f710
 8002298:	58020800 	.word	0x58020800
 800229c:	0800f718 	.word	0x0800f718
 80022a0:	0800f728 	.word	0x0800f728
 80022a4:	0800f738 	.word	0x0800f738

080022a8 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <LCD_SetBrightness+0x1c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	240004b8 	.word	0x240004b8

080022c8 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <LCD_GetBrightness+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	240004b8 	.word	0x240004b8

080022e0 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80022ea:	f7ff ffed 	bl	80022c8 <LCD_GetBrightness>
 80022ee:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 80022f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d05e      	beq.n	80023ba <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	429a      	cmp	r2, r3
 8002302:	d05c      	beq.n	80023be <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230e:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002332:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002340:	ed97 7a06 	vldr	s14, [r7, #24]
 8002344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002348:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 800234c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002350:	ed97 7a06 	vldr	s14, [r7, #24]
 8002354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002358:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 800235c:	f001 ff58 	bl	8004210 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8002362:	2001      	movs	r0, #1
 8002364:	f001 ff60 	bl	8004228 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8002368:	f001 ff52 	bl	8004210 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237e:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8002382:	ed97 7a06 	vldr	s14, [r7, #24]
 8002386:	edd7 7a05 	vldr	s15, [r7, #20]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80023a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a8:	ee17 0a90 	vmov	r0, s15
 80023ac:	f7ff ff7c 	bl	80022a8 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d204      	bcs.n	80023c2 <LCD_Light+0xe2>
		delay_ms(1);
 80023b8:	e7d3      	b.n	8002362 <LCD_Light+0x82>
		return;
 80023ba:	bf00      	nop
 80023bc:	e002      	b.n	80023c4 <LCD_Light+0xe4>
		return;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <LCD_Light+0xe4>
		if(time_now >= time) break;
 80023c2:	bf00      	nop
		
	}
}
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	b097      	sub	sp, #92	@ 0x5c
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	461e      	mov	r6, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80023da:	460b      	mov	r3, r1
 80023dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80023de:	4613      	mov	r3, r2
 80023e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023e4:	4633      	mov	r3, r6
 80023e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80023ea:	466b      	mov	r3, sp
 80023ec:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80023ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80023f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0=x;
 80023f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp=POINT_COLOR; 
 80023fa:	4bb0      	ldr	r3, [pc, #704]	@ (80026bc <LCD_ShowChar+0x2f0>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8002402:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d101      	bne.n	800240e <LCD_ShowChar+0x42>
 800240a:	2106      	movs	r1, #6
 800240c:	e000      	b.n	8002410 <LCD_ShowChar+0x44>
 800240e:	2108      	movs	r1, #8
 8002410:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8002414:	1e4b      	subs	r3, r1, #1
 8002416:	643b      	str	r3, [r7, #64]	@ 0x40
 8002418:	460a      	mov	r2, r1
 800241a:	2300      	movs	r3, #0
 800241c:	4692      	mov	sl, r2
 800241e:	469b      	mov	fp, r3
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800242c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8002430:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8002434:	460b      	mov	r3, r1
 8002436:	005e      	lsls	r6, r3, #1
 8002438:	4603      	mov	r3, r0
 800243a:	3b01      	subs	r3, #1
 800243c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800243e:	460a      	mov	r2, r1
 8002440:	2300      	movs	r3, #0
 8002442:	61ba      	str	r2, [r7, #24]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	b2c3      	uxtb	r3, r0
 8002448:	2200      	movs	r2, #0
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	627a      	str	r2, [r7, #36]	@ 0x24
 800244e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002452:	465b      	mov	r3, fp
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	fb02 fc03 	mul.w	ip, r2, r3
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	4652      	mov	r2, sl
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	449c      	add	ip, r3
 8002464:	4652      	mov	r2, sl
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	fba2 8903 	umull	r8, r9, r2, r3
 800246c:	eb0c 0309 	add.w	r3, ip, r9
 8002470:	4699      	mov	r9, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800247e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8002482:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8002486:	460a      	mov	r2, r1
 8002488:	2300      	movs	r3, #0
 800248a:	613a      	str	r2, [r7, #16]
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	b2c3      	uxtb	r3, r0
 8002490:	2200      	movs	r2, #0
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	60fa      	str	r2, [r7, #12]
 8002496:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800249a:	464b      	mov	r3, r9
 800249c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024a0:	4652      	mov	r2, sl
 80024a2:	fb02 fc03 	mul.w	ip, r2, r3
 80024a6:	465b      	mov	r3, fp
 80024a8:	4642      	mov	r2, r8
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	449c      	add	ip, r3
 80024b0:	4642      	mov	r2, r8
 80024b2:	4653      	mov	r3, sl
 80024b4:	fba2 4503 	umull	r4, r5, r2, r3
 80024b8:	eb0c 0305 	add.w	r3, ip, r5
 80024bc:	461d      	mov	r5, r3
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	012b      	lsls	r3, r5, #4
 80024c8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80024cc:	0122      	lsls	r2, r4, #4
 80024ce:	460b      	mov	r3, r1
 80024d0:	4602      	mov	r2, r0
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	3307      	adds	r3, #7
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	ebad 0d03 	sub.w	sp, sp, r3
 80024e2:	ab02      	add	r3, sp, #8
 80024e4:	3301      	adds	r3, #1
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 80024ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024f0:	4619      	mov	r1, r3
 80024f2:	4873      	ldr	r0, [pc, #460]	@ (80026c0 <LCD_ShowChar+0x2f4>)
 80024f4:	f001 fc2a 	bl	8003d4c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 80024f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024fc:	4619      	mov	r1, r3
 80024fe:	4870      	ldr	r0, [pc, #448]	@ (80026c0 <LCD_ShowChar+0x2f4>)
 8002500:	f001 fc36 	bl	8003d70 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8002504:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002508:	3b20      	subs	r3, #32
 800250a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8002514:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 80a8 	bne.w	800266e <LCD_ShowChar+0x2a2>
	{
		for(t=0;t<size;t++)
 800251e:	2300      	movs	r3, #0
 8002520:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002524:	e09b      	b.n	800265e <LCD_ShowChar+0x292>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002526:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d10e      	bne.n	800254c <LCD_ShowChar+0x180>
 800252e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002532:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8002536:	4863      	ldr	r0, [pc, #396]	@ (80026c4 <LCD_ShowChar+0x2f8>)
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4403      	add	r3, r0
 8002542:	440b      	add	r3, r1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800254a:	e00a      	b.n	8002562 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 800254c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002550:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002554:	495c      	ldr	r1, [pc, #368]	@ (80026c8 <LCD_ShowChar+0x2fc>)
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	440a      	add	r2, r1
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			
			for(t1=0;t1<8;t1++)
 8002562:	2300      	movs	r3, #0
 8002564:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002568:	e06e      	b.n	8002648 <LCD_ShowChar+0x27c>
			{			    
				if(temp&0x80)
 800256a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800256e:	2b00      	cmp	r3, #0
 8002570:	da0e      	bge.n	8002590 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8002572:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b21a      	sxth	r2, r3
 800257a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b29b      	uxth	r3, r3
 8002582:	b21b      	sxth	r3, r3
 8002584:	4313      	orrs	r3, r2
 8002586:	b21b      	sxth	r3, r3
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <LCD_ShowChar+0x2f0>)
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e00e      	b.n	80025ae <LCD_ShowChar+0x1e2>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8002590:	4b4e      	ldr	r3, [pc, #312]	@ (80026cc <LCD_ShowChar+0x300>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b21b      	sxth	r3, r3
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21a      	sxth	r2, r3
 800259a:	4b4c      	ldr	r3, [pc, #304]	@ (80026cc <LCD_ShowChar+0x300>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b44      	ldr	r3, [pc, #272]	@ (80026bc <LCD_ShowChar+0x2f0>)
 80025ac:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80025ae:	0872      	lsrs	r2, r6, #1
 80025b0:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80025b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461c      	mov	r4, r3
 80025be:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <LCD_ShowChar+0x2f0>)
 80025c0:	8818      	ldrh	r0, [r3, #0]
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	fb01 f202 	mul.w	r2, r1, r2
 80025c8:	4422      	add	r2, r4
 80025ca:	4601      	mov	r1, r0
 80025cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80025d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 80025da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <LCD_ShowChar+0x222>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 80025ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 80025f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80025fa:	3301      	adds	r3, #1
 80025fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80025fe:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	429a      	cmp	r2, r3
 8002604:	d304      	bcc.n	8002610 <LCD_ShowChar+0x244>
 8002606:	4a2d      	ldr	r2, [pc, #180]	@ (80026bc <LCD_ShowChar+0x2f0>)
 8002608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800260c:	8013      	strh	r3, [r2, #0]
 800260e:	e0e8      	b.n	80027e2 <LCD_ShowChar+0x416>
				if((y-y0)==size)
 8002610:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002612:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800261c:	429a      	cmp	r2, r3
 800261e:	d10e      	bne.n	800263e <LCD_ShowChar+0x272>
				{
					y=y0;
 8002620:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002624:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8002626:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002628:	3301      	adds	r3, #1
 800262a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800262c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800262e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002630:	429a      	cmp	r2, r3
 8002632:	d30e      	bcc.n	8002652 <LCD_ShowChar+0x286>
 8002634:	4a21      	ldr	r2, [pc, #132]	@ (80026bc <LCD_ShowChar+0x2f0>)
 8002636:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800263a:	8013      	strh	r3, [r2, #0]
 800263c:	e0d1      	b.n	80027e2 <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 800263e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002642:	3301      	adds	r3, #1
 8002644:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002648:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800264c:	2b07      	cmp	r3, #7
 800264e:	d98c      	bls.n	800256a <LCD_ShowChar+0x19e>
 8002650:	e000      	b.n	8002654 <LCD_ShowChar+0x288>
					break;
 8002652:	bf00      	nop
		for(t=0;t<size;t++)
 8002654:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002658:	3301      	adds	r3, #1
 800265a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800265e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002662:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002666:	429a      	cmp	r2, r3
 8002668:	f4ff af5d 	bcc.w	8002526 <LCD_ShowChar+0x15a>
 800266c:	e09e      	b.n	80027ac <LCD_ShowChar+0x3e0>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 800266e:	2300      	movs	r3, #0
 8002670:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002674:	e093      	b.n	800279e <LCD_ShowChar+0x3d2>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8002676:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d10e      	bne.n	800269c <LCD_ShowChar+0x2d0>
 800267e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002682:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8002686:	480f      	ldr	r0, [pc, #60]	@ (80026c4 <LCD_ShowChar+0x2f8>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	440b      	add	r3, r1
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800269a:	e00a      	b.n	80026b2 <LCD_ShowChar+0x2e6>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 800269c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80026a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026a4:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <LCD_ShowChar+0x2fc>)
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	440a      	add	r2, r1
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for(t1=0;t1<8;t1++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80026b8:	e066      	b.n	8002788 <LCD_ShowChar+0x3bc>
 80026ba:	bf00      	nop
 80026bc:	24000028 	.word	0x24000028
 80026c0:	24000504 	.word	0x24000504
 80026c4:	0800f754 	.word	0x0800f754
 80026c8:	0800fbc8 	.word	0x0800fbc8
 80026cc:	24000540 	.word	0x24000540
			{			    
				if(temp&0x80)
 80026d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da1b      	bge.n	8002710 <LCD_ShowChar+0x344>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80026d8:	4b45      	ldr	r3, [pc, #276]	@ (80027f0 <LCD_ShowChar+0x424>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <LCD_ShowChar+0x424>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	b218      	sxth	r0, r3
 80026f0:	0872      	lsrs	r2, r6, #1
 80026f2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80026f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461c      	mov	r4, r3
 8002700:	b280      	uxth	r0, r0
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	fb01 f202 	mul.w	r2, r1, r2
 8002708:	4422      	add	r2, r4
 800270a:	4601      	mov	r1, r0
 800270c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8002710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002714:	3301      	adds	r3, #1
 8002716:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 800271a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8002724:	429a      	cmp	r2, r3
 8002726:	d302      	bcc.n	800272e <LCD_ShowChar+0x362>
 8002728:	2300      	movs	r3, #0
 800272a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 800272e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8002738:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800273a:	3301      	adds	r3, #1
 800273c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800273e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	429a      	cmp	r2, r3
 8002744:	d304      	bcc.n	8002750 <LCD_ShowChar+0x384>
 8002746:	4a2a      	ldr	r2, [pc, #168]	@ (80027f0 <LCD_ShowChar+0x424>)
 8002748:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800274c:	8013      	strh	r3, [r2, #0]
 800274e:	e048      	b.n	80027e2 <LCD_ShowChar+0x416>
				if((y-y0)==size)
 8002750:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002752:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002756:	1ad2      	subs	r2, r2, r3
 8002758:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800275c:	429a      	cmp	r2, r3
 800275e:	d10e      	bne.n	800277e <LCD_ShowChar+0x3b2>
				{
					y=y0;
 8002760:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002764:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8002766:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002768:	3301      	adds	r3, #1
 800276a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800276c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	429a      	cmp	r2, r3
 8002772:	d30e      	bcc.n	8002792 <LCD_ShowChar+0x3c6>
 8002774:	4a1e      	ldr	r2, [pc, #120]	@ (80027f0 <LCD_ShowChar+0x424>)
 8002776:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800277a:	8013      	strh	r3, [r2, #0]
 800277c:	e031      	b.n	80027e2 <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 800277e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002782:	3301      	adds	r3, #1
 8002784:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002788:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800278c:	2b07      	cmp	r3, #7
 800278e:	d99f      	bls.n	80026d0 <LCD_ShowChar+0x304>
 8002790:	e000      	b.n	8002794 <LCD_ShowChar+0x3c8>
					break;
 8002792:	bf00      	nop
		for(t=0;t<size;t++)
 8002794:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002798:	3301      	adds	r3, #1
 800279a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800279e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80027a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80027a6:	429a      	cmp	r2, r3
 80027a8:	f4ff af65 	bcc.w	8002676 <LCD_ShowChar+0x2aa>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80027ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80027b0:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80027b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d101      	bne.n	80027c0 <LCD_ShowChar+0x3f4>
 80027bc:	2306      	movs	r3, #6
 80027be:	e000      	b.n	80027c2 <LCD_ShowChar+0x3f6>
 80027c0:	2308      	movs	r3, #8
 80027c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80027c6:	9201      	str	r2, [sp, #4]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027cc:	4602      	mov	r2, r0
 80027ce:	4809      	ldr	r0, [pc, #36]	@ (80027f4 <LCD_ShowChar+0x428>)
 80027d0:	f001 f90e 	bl	80039f0 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 80027d4:	4a06      	ldr	r2, [pc, #24]	@ (80027f0 <LCD_ShowChar+0x424>)
 80027d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80027da:	8013      	strh	r3, [r2, #0]
 80027dc:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80027e0:	e001      	b.n	80027e6 <LCD_ShowChar+0x41a>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80027e2:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 80027e6:	3754      	adds	r7, #84	@ 0x54
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	24000028 	.word	0x24000028
 80027f4:	24000504 	.word	0x24000504

080027f8 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	4604      	mov	r4, r0
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4623      	mov	r3, r4
 8002808:	80fb      	strh	r3, [r7, #6]
 800280a:	4603      	mov	r3, r0
 800280c:	80bb      	strh	r3, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	807b      	strh	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	4413      	add	r3, r2
 8002820:	807b      	strh	r3, [r7, #2]
	height+=y;
 8002822:	883a      	ldrh	r2, [r7, #0]
 8002824:	88bb      	ldrh	r3, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800282a:	e024      	b.n	8002876 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	429a      	cmp	r2, r3
 8002832:	d307      	bcc.n	8002844 <LCD_ShowString+0x4c>
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	80fb      	strh	r3, [r7, #6]
 8002838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800283c:	b29a      	uxth	r2, r3
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8002844:	88ba      	ldrh	r2, [r7, #4]
 8002846:	883b      	ldrh	r3, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d21d      	bcs.n	8002888 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002854:	88b9      	ldrh	r1, [r7, #4]
 8002856:	88f8      	ldrh	r0, [r7, #6]
 8002858:	2400      	movs	r4, #0
 800285a:	9400      	str	r4, [sp, #0]
 800285c:	f7ff fdb6 	bl	80023cc <LCD_ShowChar>
        x+=size/2;
 8002860:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4413      	add	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
        p++;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	3301      	adds	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b7e      	cmp	r3, #126	@ 0x7e
 800287c:	d805      	bhi.n	800288a <LCD_ShowString+0x92>
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b1f      	cmp	r3, #31
 8002884:	d8d2      	bhi.n	800282c <LCD_ShowString+0x34>
    }  
}
 8002886:	e000      	b.n	800288a <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8002888:	bf00      	nop
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
	...

08002894 <lcd_init>:

static int32_t lcd_init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800289e:	2104      	movs	r1, #4
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <lcd_init+0x1c>)
 80028a2:	f009 fc9d 	bl	800c1e0 <HAL_TIMEx_PWMN_Start>
	return result;
 80028a6:	687b      	ldr	r3, [r7, #4]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	240004b8 	.word	0x240004b8

080028b4 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80028b8:	f001 fcaa 	bl	8004210 <HAL_GetTick>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80028d2:	2200      	movs	r2, #0
 80028d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028d8:	481d      	ldr	r0, [pc, #116]	@ (8002950 <lcd_writereg+0x8c>)
 80028da:	f003 fc6b 	bl	80061b4 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <lcd_writereg+0x8c>)
 80028e6:	f003 fc65 	bl	80061b4 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80028ea:	f107 010f 	add.w	r1, r7, #15
 80028ee:	2364      	movs	r3, #100	@ 0x64
 80028f0:	2201      	movs	r2, #1
 80028f2:	4818      	ldr	r0, [pc, #96]	@ (8002954 <lcd_writereg+0x90>)
 80028f4:	f008 fa4a 	bl	800ad8c <HAL_SPI_Transmit>
 80028f8:	4603      	mov	r3, r0
 80028fa:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80028fc:	2201      	movs	r2, #1
 80028fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002902:	4813      	ldr	r0, [pc, #76]	@ (8002950 <lcd_writereg+0x8c>)
 8002904:	f003 fc56 	bl	80061b4 <HAL_GPIO_WritePin>
	if(length > 0)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00c      	beq.n	8002928 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	b29a      	uxth	r2, r3
 8002912:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	480e      	ldr	r0, [pc, #56]	@ (8002954 <lcd_writereg+0x90>)
 800291a:	f008 fa37 	bl	800ad8c <HAL_SPI_Transmit>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800292e:	4808      	ldr	r0, [pc, #32]	@ (8002950 <lcd_writereg+0x8c>)
 8002930:	f003 fc40 	bl	80061b4 <HAL_GPIO_WritePin>
	if(result>0){
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	dd03      	ble.n	8002942 <lcd_writereg+0x7e>
		result = -1;}
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e001      	b.n	8002946 <lcd_writereg+0x82>
	else{
		result = 0;}
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
	return result;
 8002946:	697b      	ldr	r3, [r7, #20]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58021000 	.word	0x58021000
 8002954:	2400042c 	.word	0x2400042c

08002958 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800296a:	481b      	ldr	r0, [pc, #108]	@ (80029d8 <lcd_readreg+0x80>)
 800296c:	f003 fc22 	bl	80061b4 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8002970:	2200      	movs	r2, #0
 8002972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002976:	4818      	ldr	r0, [pc, #96]	@ (80029d8 <lcd_readreg+0x80>)
 8002978:	f003 fc1c 	bl	80061b4 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800297c:	1df9      	adds	r1, r7, #7
 800297e:	2364      	movs	r3, #100	@ 0x64
 8002980:	2201      	movs	r2, #1
 8002982:	4816      	ldr	r0, [pc, #88]	@ (80029dc <lcd_readreg+0x84>)
 8002984:	f008 fa02 	bl	800ad8c <HAL_SPI_Transmit>
 8002988:	4603      	mov	r3, r0
 800298a:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 800298c:	2201      	movs	r2, #1
 800298e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002992:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <lcd_readreg+0x80>)
 8002994:	f003 fc0e 	bl	80061b4 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8002998:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800299c:	2201      	movs	r2, #1
 800299e:	6839      	ldr	r1, [r7, #0]
 80029a0:	480e      	ldr	r0, [pc, #56]	@ (80029dc <lcd_readreg+0x84>)
 80029a2:	f008 fbe1 	bl	800b168 <HAL_SPI_Receive>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029b6:	4808      	ldr	r0, [pc, #32]	@ (80029d8 <lcd_readreg+0x80>)
 80029b8:	f003 fbfc 	bl	80061b4 <HAL_GPIO_WritePin>
	if(result>0){
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	dd03      	ble.n	80029ca <lcd_readreg+0x72>
		result = -1;}
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e001      	b.n	80029ce <lcd_readreg+0x76>
	else{
		result = 0;}
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
	return result;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58021000 	.word	0x58021000
 80029dc:	2400042c 	.word	0x2400042c

080029e0 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029f0:	480f      	ldr	r0, [pc, #60]	@ (8002a30 <lcd_senddata+0x50>)
 80029f2:	f003 fbdf 	bl	80061b4 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	2364      	movs	r3, #100	@ 0x64
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	480d      	ldr	r0, [pc, #52]	@ (8002a34 <lcd_senddata+0x54>)
 8002a00:	f008 f9c4 	bl	800ad8c <HAL_SPI_Transmit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a0e:	4808      	ldr	r0, [pc, #32]	@ (8002a30 <lcd_senddata+0x50>)
 8002a10:	f003 fbd0 	bl	80061b4 <HAL_GPIO_WritePin>
	if(result>0){
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dd03      	ble.n	8002a22 <lcd_senddata+0x42>
		result = -1;}
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e001      	b.n	8002a26 <lcd_senddata+0x46>
	else{
		result = 0;}
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
	return result;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	58021000 	.word	0x58021000
 8002a34:	2400042c 	.word	0x2400042c

08002a38 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a48:	4810      	ldr	r0, [pc, #64]	@ (8002a8c <lcd_recvdata+0x54>)
 8002a4a:	f003 fbb3 	bl	80061b4 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	480d      	ldr	r0, [pc, #52]	@ (8002a90 <lcd_recvdata+0x58>)
 8002a5a:	f008 fb85 	bl	800b168 <HAL_SPI_Receive>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a68:	4808      	ldr	r0, [pc, #32]	@ (8002a8c <lcd_recvdata+0x54>)
 8002a6a:	f003 fba3 	bl	80061b4 <HAL_GPIO_WritePin>
	if(result>0){
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dd03      	ble.n	8002a7c <lcd_recvdata+0x44>
		result = -1;}
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	e001      	b.n	8002a80 <lcd_recvdata+0x48>
	else{
		result = 0;}
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
	return result;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	58021000 	.word	0x58021000
 8002a90:	2400042c 	.word	0x2400042c

08002a94 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d103      	bne.n	8002aac <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e03a      	b.n	8002b22 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	891a      	ldrh	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0f      	ldr	r2, [pc, #60]	@ (8002b2c <ST7735_RegisterBusIO+0x98>)
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b30 <ST7735_RegisterBusIO+0x9c>)
 8002af6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <ST7735_RegisterBusIO+0xa0>)
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <ST7735_RegisterBusIO+0xa4>)
 8002b02:	62da      	str	r2, [r3, #44]	@ 0x2c
    pObj->Ctx.handle    = pObj;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	631a      	str	r2, [r3, #48]	@ 0x30

    if(pObj->IO.Init != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4798      	blx	r3
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	e002      	b.n	8002b22 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08003f9d 	.word	0x08003f9d
 8002b30:	08003fc5 	.word	0x08003fc5
 8002b34:	08003fef 	.word	0x08003fef
 8002b38:	08004013 	.word	0x08004013

08002b3c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e3a6      	b.n	80032a4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f103 0020 	add.w	r0, r3, #32
 8002b60:	f107 0213 	add.w	r2, r7, #19
 8002b64:	2300      	movs	r3, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	f001 fa92 	bl	8004090 <st7735_write_reg>
 8002b6c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8002b6e:	2178      	movs	r1, #120	@ 0x78
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f001 fa60 	bl	8004036 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f103 0020 	add.w	r0, r3, #32
 8002b80:	f107 0213 	add.w	r2, r7, #19
 8002b84:	2300      	movs	r3, #0
 8002b86:	2101      	movs	r1, #1
 8002b88:	f001 fa82 	bl	8004090 <st7735_write_reg>
 8002b8c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8002b8e:	2178      	movs	r1, #120	@ 0x78
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f001 fa50 	bl	8004036 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f103 0020 	add.w	r0, r3, #32
 8002ba0:	f107 0213 	add.w	r2, r7, #19
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	2111      	movs	r1, #17
 8002ba8:	f001 fa72 	bl	8004090 <st7735_write_reg>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f103 0020 	add.w	r0, r3, #32
 8002bba:	f107 0213 	add.w	r2, r7, #19
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	21b1      	movs	r1, #177	@ 0xb1
 8002bc2:	f001 fa65 	bl	8004090 <st7735_write_reg>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	f107 0113 	add.w	r1, r7, #19
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fa6c 	bl	80040ba <st7735_send_data>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4413      	add	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002bea:	232c      	movs	r3, #44	@ 0x2c
 8002bec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	f107 0113 	add.w	r1, r7, #19
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fa5e 	bl	80040ba <st7735_send_data>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002c06:	232d      	movs	r3, #45	@ 0x2d
 8002c08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	f107 0113 	add.w	r1, r7, #19
 8002c12:	2201      	movs	r2, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fa50 	bl	80040ba <st7735_send_data>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8002c22:	2301      	movs	r3, #1
 8002c24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f103 0020 	add.w	r0, r3, #32
 8002c2c:	f107 0213 	add.w	r2, r7, #19
 8002c30:	2301      	movs	r3, #1
 8002c32:	21b2      	movs	r1, #178	@ 0xb2
 8002c34:	f001 fa2c 	bl	8004090 <st7735_write_reg>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002c40:	232c      	movs	r3, #44	@ 0x2c
 8002c42:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3320      	adds	r3, #32
 8002c48:	f107 0113 	add.w	r1, r7, #19
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fa33 	bl	80040ba <st7735_send_data>
 8002c54:	4602      	mov	r2, r0
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002c5c:	232d      	movs	r3, #45	@ 0x2d
 8002c5e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3320      	adds	r3, #32
 8002c64:	f107 0113 	add.w	r1, r7, #19
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 fa25 	bl	80040ba <st7735_send_data>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4413      	add	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f103 0020 	add.w	r0, r3, #32
 8002c82:	f107 0213 	add.w	r2, r7, #19
 8002c86:	2301      	movs	r3, #1
 8002c88:	21b3      	movs	r1, #179	@ 0xb3
 8002c8a:	f001 fa01 	bl	8004090 <st7735_write_reg>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002c96:	232c      	movs	r3, #44	@ 0x2c
 8002c98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3320      	adds	r3, #32
 8002c9e:	f107 0113 	add.w	r1, r7, #19
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 fa08 	bl	80040ba <st7735_send_data>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002cb2:	232d      	movs	r3, #45	@ 0x2d
 8002cb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	f107 0113 	add.w	r1, r7, #19
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 f9fa 	bl	80040ba <st7735_send_data>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	4413      	add	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3320      	adds	r3, #32
 8002cd6:	f107 0113 	add.w	r1, r7, #19
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 f9ec 	bl	80040ba <st7735_send_data>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002cea:	232c      	movs	r3, #44	@ 0x2c
 8002cec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3320      	adds	r3, #32
 8002cf2:	f107 0113 	add.w	r1, r7, #19
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f9de 	bl	80040ba <st7735_send_data>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002d06:	232d      	movs	r3, #45	@ 0x2d
 8002d08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	f107 0113 	add.w	r1, r7, #19
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f9d0 	bl	80040ba <st7735_send_data>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8002d22:	2307      	movs	r3, #7
 8002d24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f103 0020 	add.w	r0, r3, #32
 8002d2c:	f107 0213 	add.w	r2, r7, #19
 8002d30:	2301      	movs	r3, #1
 8002d32:	21b4      	movs	r1, #180	@ 0xb4
 8002d34:	f001 f9ac 	bl	8004090 <st7735_write_reg>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8002d40:	23a2      	movs	r3, #162	@ 0xa2
 8002d42:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f103 0020 	add.w	r0, r3, #32
 8002d4a:	f107 0213 	add.w	r2, r7, #19
 8002d4e:	2301      	movs	r3, #1
 8002d50:	21c0      	movs	r1, #192	@ 0xc0
 8002d52:	f001 f99d 	bl	8004090 <st7735_write_reg>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3320      	adds	r3, #32
 8002d66:	f107 0113 	add.w	r1, r7, #19
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f9a4 	bl	80040ba <st7735_send_data>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8002d7a:	2384      	movs	r3, #132	@ 0x84
 8002d7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3320      	adds	r3, #32
 8002d82:	f107 0113 	add.w	r1, r7, #19
 8002d86:	2201      	movs	r2, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f996 	bl	80040ba <st7735_send_data>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8002d96:	23c5      	movs	r3, #197	@ 0xc5
 8002d98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f103 0020 	add.w	r0, r3, #32
 8002da0:	f107 0213 	add.w	r2, r7, #19
 8002da4:	2301      	movs	r3, #1
 8002da6:	21c1      	movs	r1, #193	@ 0xc1
 8002da8:	f001 f972 	bl	8004090 <st7735_write_reg>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4413      	add	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8002db4:	230a      	movs	r3, #10
 8002db6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f103 0020 	add.w	r0, r3, #32
 8002dbe:	f107 0213 	add.w	r2, r7, #19
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	21c2      	movs	r1, #194	@ 0xc2
 8002dc6:	f001 f963 	bl	8004090 <st7735_write_reg>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4413      	add	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3320      	adds	r3, #32
 8002dda:	f107 0113 	add.w	r1, r7, #19
 8002dde:	2201      	movs	r2, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 f96a 	bl	80040ba <st7735_send_data>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8002dee:	238a      	movs	r3, #138	@ 0x8a
 8002df0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f103 0020 	add.w	r0, r3, #32
 8002df8:	f107 0213 	add.w	r2, r7, #19
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	21c3      	movs	r1, #195	@ 0xc3
 8002e00:	f001 f946 	bl	8004090 <st7735_write_reg>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8002e0c:	232a      	movs	r3, #42	@ 0x2a
 8002e0e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3320      	adds	r3, #32
 8002e14:	f107 0113 	add.w	r1, r7, #19
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f94d 	bl	80040ba <st7735_send_data>
 8002e20:	4602      	mov	r2, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4413      	add	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8002e28:	238a      	movs	r3, #138	@ 0x8a
 8002e2a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f103 0020 	add.w	r0, r3, #32
 8002e32:	f107 0213 	add.w	r2, r7, #19
 8002e36:	2301      	movs	r3, #1
 8002e38:	21c4      	movs	r1, #196	@ 0xc4
 8002e3a:	f001 f929 	bl	8004090 <st7735_write_reg>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8002e46:	23ee      	movs	r3, #238	@ 0xee
 8002e48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	f107 0113 	add.w	r1, r7, #19
 8002e52:	2201      	movs	r2, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f930 	bl	80040ba <st7735_send_data>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8002e62:	230e      	movs	r3, #14
 8002e64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0020 	add.w	r0, r3, #32
 8002e6c:	f107 0213 	add.w	r2, r7, #19
 8002e70:	2301      	movs	r3, #1
 8002e72:	21c5      	movs	r1, #197	@ 0xc5
 8002e74:	f001 f90c 	bl	8004090 <st7735_write_reg>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f103 0020 	add.w	r0, r3, #32
 8002e8e:	f107 0213 	add.w	r2, r7, #19
 8002e92:	2300      	movs	r3, #0
 8002e94:	2121      	movs	r1, #33	@ 0x21
 8002e96:	f001 f8fb 	bl	8004090 <st7735_write_reg>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e00c      	b.n	8002ebe <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f103 0020 	add.w	r0, r3, #32
 8002eaa:	f107 0213 	add.w	r2, r7, #19
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	f001 f8ed 	bl	8004090 <st7735_write_reg>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	4413      	add	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f103 0020 	add.w	r0, r3, #32
 8002ec4:	f107 0208 	add.w	r2, r7, #8
 8002ec8:	2301      	movs	r3, #1
 8002eca:	213a      	movs	r1, #58	@ 0x3a
 8002ecc:	f001 f8e0 	bl	8004090 <st7735_write_reg>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f103 0020 	add.w	r0, r3, #32
 8002ee2:	f107 0213 	add.w	r2, r7, #19
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	21e0      	movs	r1, #224	@ 0xe0
 8002eea:	f001 f8d1 	bl	8004090 <st7735_write_reg>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8002ef6:	231c      	movs	r3, #28
 8002ef8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3320      	adds	r3, #32
 8002efe:	f107 0113 	add.w	r1, r7, #19
 8002f02:	2201      	movs	r2, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f8d8 	bl	80040ba <st7735_send_data>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002f12:	2307      	movs	r3, #7
 8002f14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3320      	adds	r3, #32
 8002f1a:	f107 0113 	add.w	r1, r7, #19
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 f8ca 	bl	80040ba <st7735_send_data>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8002f2e:	2312      	movs	r3, #18
 8002f30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3320      	adds	r3, #32
 8002f36:	f107 0113 	add.w	r1, r7, #19
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 f8bc 	bl	80040ba <st7735_send_data>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002f4a:	2337      	movs	r3, #55	@ 0x37
 8002f4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3320      	adds	r3, #32
 8002f52:	f107 0113 	add.w	r1, r7, #19
 8002f56:	2201      	movs	r2, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f8ae 	bl	80040ba <st7735_send_data>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4413      	add	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8002f66:	2332      	movs	r3, #50	@ 0x32
 8002f68:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	f107 0113 	add.w	r1, r7, #19
 8002f72:	2201      	movs	r2, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 f8a0 	bl	80040ba <st7735_send_data>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002f82:	2329      	movs	r3, #41	@ 0x29
 8002f84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3320      	adds	r3, #32
 8002f8a:	f107 0113 	add.w	r1, r7, #19
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f892 	bl	80040ba <st7735_send_data>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8002f9e:	232d      	movs	r3, #45	@ 0x2d
 8002fa0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3320      	adds	r3, #32
 8002fa6:	f107 0113 	add.w	r1, r7, #19
 8002faa:	2201      	movs	r2, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 f884 	bl	80040ba <st7735_send_data>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002fba:	2329      	movs	r3, #41	@ 0x29
 8002fbc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	f107 0113 	add.w	r1, r7, #19
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f876 	bl	80040ba <st7735_send_data>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002fd6:	2325      	movs	r3, #37	@ 0x25
 8002fd8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3320      	adds	r3, #32
 8002fde:	f107 0113 	add.w	r1, r7, #19
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f868 	bl	80040ba <st7735_send_data>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4413      	add	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8002ff2:	232b      	movs	r3, #43	@ 0x2b
 8002ff4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3320      	adds	r3, #32
 8002ffa:	f107 0113 	add.w	r1, r7, #19
 8002ffe:	2201      	movs	r2, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f85a 	bl	80040ba <st7735_send_data>
 8003006:	4602      	mov	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 800300e:	2339      	movs	r3, #57	@ 0x39
 8003010:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3320      	adds	r3, #32
 8003016:	f107 0113 	add.w	r1, r7, #19
 800301a:	2201      	movs	r2, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f001 f84c 	bl	80040ba <st7735_send_data>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	4413      	add	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3320      	adds	r3, #32
 8003032:	f107 0113 	add.w	r1, r7, #19
 8003036:	2201      	movs	r2, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f83e 	bl	80040ba <st7735_send_data>
 800303e:	4602      	mov	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003046:	2301      	movs	r3, #1
 8003048:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3320      	adds	r3, #32
 800304e:	f107 0113 	add.w	r1, r7, #19
 8003052:	2201      	movs	r2, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f001 f830 	bl	80040ba <st7735_send_data>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4413      	add	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8003062:	2303      	movs	r3, #3
 8003064:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3320      	adds	r3, #32
 800306a:	f107 0113 	add.w	r1, r7, #19
 800306e:	2201      	movs	r2, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f822 	bl	80040ba <st7735_send_data>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4413      	add	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 800307e:	2310      	movs	r3, #16
 8003080:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3320      	adds	r3, #32
 8003086:	f107 0113 	add.w	r1, r7, #19
 800308a:	2201      	movs	r2, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f814 	bl	80040ba <st7735_send_data>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 800309a:	2303      	movs	r3, #3
 800309c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f103 0020 	add.w	r0, r3, #32
 80030a4:	f107 0213 	add.w	r2, r7, #19
 80030a8:	2301      	movs	r3, #1
 80030aa:	21e1      	movs	r1, #225	@ 0xe1
 80030ac:	f000 fff0 	bl	8004090 <st7735_write_reg>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 80030b8:	231d      	movs	r3, #29
 80030ba:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3320      	adds	r3, #32
 80030c0:	f107 0113 	add.w	r1, r7, #19
 80030c4:	2201      	movs	r2, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fff7 	bl	80040ba <st7735_send_data>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4413      	add	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 80030d4:	2307      	movs	r3, #7
 80030d6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3320      	adds	r3, #32
 80030dc:	f107 0113 	add.w	r1, r7, #19
 80030e0:	2201      	movs	r2, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 ffe9 	bl	80040ba <st7735_send_data>
 80030e8:	4602      	mov	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 80030f0:	2306      	movs	r3, #6
 80030f2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3320      	adds	r3, #32
 80030f8:	f107 0113 	add.w	r1, r7, #19
 80030fc:	2201      	movs	r2, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 ffdb 	bl	80040ba <st7735_send_data>
 8003104:	4602      	mov	r2, r0
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	4413      	add	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 800310c:	232e      	movs	r3, #46	@ 0x2e
 800310e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3320      	adds	r3, #32
 8003114:	f107 0113 	add.w	r1, r7, #19
 8003118:	2201      	movs	r2, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f000 ffcd 	bl	80040ba <st7735_send_data>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003128:	232c      	movs	r3, #44	@ 0x2c
 800312a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3320      	adds	r3, #32
 8003130:	f107 0113 	add.w	r1, r7, #19
 8003134:	2201      	movs	r2, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ffbf 	bl	80040ba <st7735_send_data>
 800313c:	4602      	mov	r2, r0
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4413      	add	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003144:	2329      	movs	r3, #41	@ 0x29
 8003146:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3320      	adds	r3, #32
 800314c:	f107 0113 	add.w	r1, r7, #19
 8003150:	2201      	movs	r2, #1
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffb1 	bl	80040ba <st7735_send_data>
 8003158:	4602      	mov	r2, r0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4413      	add	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003160:	232d      	movs	r3, #45	@ 0x2d
 8003162:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3320      	adds	r3, #32
 8003168:	f107 0113 	add.w	r1, r7, #19
 800316c:	2201      	movs	r2, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ffa3 	bl	80040ba <st7735_send_data>
 8003174:	4602      	mov	r2, r0
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 800317c:	232e      	movs	r3, #46	@ 0x2e
 800317e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3320      	adds	r3, #32
 8003184:	f107 0113 	add.w	r1, r7, #19
 8003188:	2201      	movs	r2, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ff95 	bl	80040ba <st7735_send_data>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003198:	232e      	movs	r3, #46	@ 0x2e
 800319a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3320      	adds	r3, #32
 80031a0:	f107 0113 	add.w	r1, r7, #19
 80031a4:	2201      	movs	r2, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff87 	bl	80040ba <st7735_send_data>
 80031ac:	4602      	mov	r2, r0
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80031b4:	2337      	movs	r3, #55	@ 0x37
 80031b6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3320      	adds	r3, #32
 80031bc:	f107 0113 	add.w	r1, r7, #19
 80031c0:	2201      	movs	r2, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ff79 	bl	80040ba <st7735_send_data>
 80031c8:	4602      	mov	r2, r0
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4413      	add	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 80031d0:	233f      	movs	r3, #63	@ 0x3f
 80031d2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3320      	adds	r3, #32
 80031d8:	f107 0113 	add.w	r1, r7, #19
 80031dc:	2201      	movs	r2, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 ff6b 	bl	80040ba <st7735_send_data>
 80031e4:	4602      	mov	r2, r0
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3320      	adds	r3, #32
 80031f4:	f107 0113 	add.w	r1, r7, #19
 80031f8:	2201      	movs	r2, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 ff5d 	bl	80040ba <st7735_send_data>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003208:	2300      	movs	r3, #0
 800320a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3320      	adds	r3, #32
 8003210:	f107 0113 	add.w	r1, r7, #19
 8003214:	2201      	movs	r2, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff4f 	bl	80040ba <st7735_send_data>
 800321c:	4602      	mov	r2, r0
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8003224:	2302      	movs	r3, #2
 8003226:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3320      	adds	r3, #32
 800322c:	f107 0113 	add.w	r1, r7, #19
 8003230:	2201      	movs	r2, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff41 	bl	80040ba <st7735_send_data>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4413      	add	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003240:	2310      	movs	r3, #16
 8003242:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3320      	adds	r3, #32
 8003248:	f107 0113 	add.w	r1, r7, #19
 800324c:	2201      	movs	r2, #1
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ff33 	bl	80040ba <st7735_send_data>
 8003254:	4602      	mov	r2, r0
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4413      	add	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f103 0020 	add.w	r0, r3, #32
 8003266:	f107 0213 	add.w	r2, r7, #19
 800326a:	2301      	movs	r3, #1
 800326c:	2113      	movs	r1, #19
 800326e:	f000 ff0f 	bl	8004090 <st7735_write_reg>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4413      	add	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f103 0020 	add.w	r0, r3, #32
 8003280:	f107 0213 	add.w	r2, r7, #19
 8003284:	2301      	movs	r3, #1
 8003286:	2129      	movs	r1, #41	@ 0x29
 8003288:	f000 ff02 	bl	8004090 <st7735_write_reg>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f944 	bl	8003524 <ST7735_SetOrientation>
 800329c:	4602      	mov	r2, r0
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	4413      	add	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80032b0:	697b      	ldr	r3, [r7, #20]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3320      	adds	r3, #32
 80032de:	f107 0208 	add.w	r2, r7, #8
 80032e2:	21da      	movs	r1, #218	@ 0xda
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fec0 	bl	800406a <st7735_read_reg>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e02d      	b.n	8003354 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f103 0020 	add.w	r0, r3, #32
 80032fe:	f107 0308 	add.w	r3, r7, #8
 8003302:	3301      	adds	r3, #1
 8003304:	461a      	mov	r2, r3
 8003306:	21db      	movs	r1, #219	@ 0xdb
 8003308:	f000 feaf 	bl	800406a <st7735_read_reg>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e01c      	b.n	8003354 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f103 0020 	add.w	r0, r3, #32
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	3302      	adds	r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	21dc      	movs	r1, #220	@ 0xdc
 800332a:	f000 fe9e 	bl	800406a <st7735_read_reg>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e00b      	b.n	8003354 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 800333c:	7abb      	ldrb	r3, [r7, #10]
 800333e:	461a      	mov	r2, r3
 8003340:	7a7b      	ldrb	r3, [r7, #9]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	431a      	orrs	r2, r3
 8003346:	7a3b      	ldrb	r3, [r7, #8]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003354:	68fb      	ldr	r3, [r7, #12]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f103 0020 	add.w	r0, r3, #32
 8003372:	f107 020b 	add.w	r2, r7, #11
 8003376:	2300      	movs	r3, #0
 8003378:	2113      	movs	r1, #19
 800337a:	f000 fe89 	bl	8004090 <st7735_write_reg>
 800337e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003380:	210a      	movs	r1, #10
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fe57 	bl	8004036 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f103 0020 	add.w	r0, r3, #32
 800338e:	f107 020b 	add.w	r2, r7, #11
 8003392:	2300      	movs	r3, #0
 8003394:	2129      	movs	r1, #41	@ 0x29
 8003396:	f000 fe7b 	bl	8004090 <st7735_write_reg>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80033a2:	210a      	movs	r1, #10
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fe46 	bl	8004036 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 0020 	add.w	r0, r3, #32
 80033b0:	f107 020b 	add.w	r2, r7, #11
 80033b4:	2300      	movs	r3, #0
 80033b6:	2136      	movs	r1, #54	@ 0x36
 80033b8:	f000 fe6a 	bl	8004090 <st7735_write_reg>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80033c4:	4b16      	ldr	r3, [pc, #88]	@ (8003420 <ST7735_DisplayOn+0xc0>)
 80033c6:	7b1b      	ldrb	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <ST7735_DisplayOn+0xc0>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <ST7735_DisplayOn+0xc4>)
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80033da:	f043 0308 	orr.w	r3, r3, #8
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	e006      	b.n	80033f0 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80033e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <ST7735_DisplayOn+0xc0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <ST7735_DisplayOn+0xc4>)
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3320      	adds	r3, #32
 80033f6:	f107 010b 	add.w	r1, r7, #11
 80033fa:	2201      	movs	r2, #1
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe5c 	bl	80040ba <st7735_send_data>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	24000544 	.word	0x24000544
 8003424:	24000078 	.word	0x24000078

08003428 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0020 	add.w	r0, r3, #32
 800343a:	f107 020b 	add.w	r2, r7, #11
 800343e:	2300      	movs	r3, #0
 8003440:	2113      	movs	r1, #19
 8003442:	f000 fe25 	bl	8004090 <st7735_write_reg>
 8003446:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003448:	210a      	movs	r1, #10
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fdf3 	bl	8004036 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0020 	add.w	r0, r3, #32
 8003456:	f107 020b 	add.w	r2, r7, #11
 800345a:	2300      	movs	r3, #0
 800345c:	2128      	movs	r1, #40	@ 0x28
 800345e:	f000 fe17 	bl	8004090 <st7735_write_reg>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800346a:	210a      	movs	r1, #10
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fde2 	bl	8004036 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f103 0020 	add.w	r0, r3, #32
 8003478:	f107 020b 	add.w	r2, r7, #11
 800347c:	2300      	movs	r3, #0
 800347e:	2136      	movs	r1, #54	@ 0x36
 8003480:	f000 fe06 	bl	8004090 <st7735_write_reg>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800348c:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <ST7735_DisplayOff+0xc0>)
 800348e:	7b1b      	ldrb	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003494:	4b14      	ldr	r3, [pc, #80]	@ (80034e8 <ST7735_DisplayOff+0xc0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <ST7735_DisplayOff+0xc4>)
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80034a2:	f043 0308 	orr.w	r3, r3, #8
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e006      	b.n	80034b8 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80034aa:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <ST7735_DisplayOff+0xc0>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <ST7735_DisplayOff+0xc4>)
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3320      	adds	r3, #32
 80034be:	f107 010b 	add.w	r1, r7, #11
 80034c2:	2201      	movs	r2, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fdf8 	bl	80040ba <st7735_send_data>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	24000544 	.word	0x24000544
 80034ec:	24000078 	.word	0x24000078

080034f0 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <ST7735_SetOrientation+0x1a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d119      	bne.n	8003572 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7b5b      	ldrb	r3, [r3, #13]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8003546:	4b3c      	ldr	r3, [pc, #240]	@ (8003638 <ST7735_SetOrientation+0x114>)
 8003548:	2250      	movs	r2, #80	@ 0x50
 800354a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800354c:	4b3a      	ldr	r3, [pc, #232]	@ (8003638 <ST7735_SetOrientation+0x114>)
 800354e:	22a0      	movs	r2, #160	@ 0xa0
 8003550:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003552:	e028      	b.n	80035a6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	7b5b      	ldrb	r3, [r3, #13]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <ST7735_SetOrientation+0x40>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	7b5b      	ldrb	r3, [r3, #13]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d120      	bne.n	80035a6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <ST7735_SetOrientation+0x114>)
 8003566:	2280      	movs	r2, #128	@ 0x80
 8003568:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800356a:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <ST7735_SetOrientation+0x114>)
 800356c:	22a0      	movs	r2, #160	@ 0xa0
 800356e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003570:	e019      	b.n	80035a6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7b5b      	ldrb	r3, [r3, #13]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d106      	bne.n	8003588 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 800357a:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <ST7735_SetOrientation+0x114>)
 800357c:	22a0      	movs	r2, #160	@ 0xa0
 800357e:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8003580:	4b2d      	ldr	r3, [pc, #180]	@ (8003638 <ST7735_SetOrientation+0x114>)
 8003582:	2250      	movs	r2, #80	@ 0x50
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e00f      	b.n	80035a8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7b5b      	ldrb	r3, [r3, #13]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <ST7735_SetOrientation+0x74>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	7b5b      	ldrb	r3, [r3, #13]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d107      	bne.n	80035a8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <ST7735_SetOrientation+0x114>)
 800359a:	22a0      	movs	r2, #160	@ 0xa0
 800359c:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800359e:	4b26      	ldr	r3, [pc, #152]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	e000      	b.n	80035a8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80035a6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a22      	ldr	r2, [pc, #136]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035ae:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	7b1a      	ldrb	r2, [r3, #12]
 80035b4:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035b6:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	7b5a      	ldrb	r2, [r3, #13]
 80035bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035be:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fbdf 	bl	8003d94 <ST7735_SetDisplayWindow>
 80035d6:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035da:	7b1b      	ldrb	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80035e0:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a15      	ldr	r2, [pc, #84]	@ (800363c <ST7735_SetOrientation+0x118>)
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80035ee:	f043 0308 	orr.w	r3, r3, #8
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e006      	b.n	8003604 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <ST7735_SetOrientation+0x114>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a10      	ldr	r2, [pc, #64]	@ (800363c <ST7735_SetOrientation+0x118>)
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003602:	b2db      	uxtb	r3, r3
 8003604:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f103 0020 	add.w	r0, r3, #32
 800360c:	f107 020b 	add.w	r2, r7, #11
 8003610:	2301      	movs	r3, #1
 8003612:	2136      	movs	r1, #54	@ 0x36
 8003614:	f000 fd3c 	bl	8004090 <st7735_write_reg>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	24000544 	.word	0x24000544
 800363c:	24000078 	.word	0x24000078

08003640 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <ST7735_GetOrientation+0x20>)
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	24000544 	.word	0x24000544

08003664 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8003670:	4b59      	ldr	r3, [pc, #356]	@ (80037d8 <ST7735_SetCursor+0x174>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d821      	bhi.n	80036bc <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003678:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <ST7735_SetCursor+0x174>)
 800367a:	7b5b      	ldrb	r3, [r3, #13]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10e      	bne.n	800369e <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8003680:	4b55      	ldr	r3, [pc, #340]	@ (80037d8 <ST7735_SetCursor+0x174>)
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	331a      	adds	r3, #26
 800368c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3301      	adds	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e033      	b.n	80036fe <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3318      	adds	r3, #24
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	e02f      	b.n	80036fe <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800369e:	4b4e      	ldr	r3, [pc, #312]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036a0:	7b5b      	ldrb	r3, [r3, #13]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d12b      	bne.n	80036fe <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80036a6:	4b4c      	ldr	r3, [pc, #304]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036a8:	7b1b      	ldrb	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d127      	bne.n	80036fe <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3302      	adds	r3, #2
 80036b2:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3301      	adds	r3, #1
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	e020      	b.n	80036fe <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80036bc:	4b46      	ldr	r3, [pc, #280]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036be:	7b5b      	ldrb	r3, [r3, #13]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10e      	bne.n	80036e2 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80036c4:	4b44      	ldr	r3, [pc, #272]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036c6:	7b1b      	ldrb	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <ST7735_SetCursor+0x76>
				Xpos += 1;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	331a      	adds	r3, #26
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	e011      	b.n	80036fe <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3318      	adds	r3, #24
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e00d      	b.n	80036fe <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80036e2:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036e4:	7b5b      	ldrb	r3, [r3, #13]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d109      	bne.n	80036fe <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80036ea:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <ST7735_SetCursor+0x174>)
 80036ec:	7b1b      	ldrb	r3, [r3, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3301      	adds	r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3302      	adds	r3, #2
 80036fc:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f103 0020 	add.w	r0, r3, #32
 8003704:	f107 0213 	add.w	r2, r7, #19
 8003708:	2300      	movs	r3, #0
 800370a:	212a      	movs	r1, #42	@ 0x2a
 800370c:	f000 fcc0 	bl	8004090 <st7735_write_reg>
 8003710:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	b2db      	uxtb	r3, r3
 8003718:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3320      	adds	r3, #32
 800371e:	f107 0113 	add.w	r1, r7, #19
 8003722:	2201      	movs	r2, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fcc8 	bl	80040ba <st7735_send_data>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4413      	add	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3320      	adds	r3, #32
 800373c:	f107 0113 	add.w	r1, r7, #19
 8003740:	2201      	movs	r2, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fcb9 	bl	80040ba <st7735_send_data>
 8003748:	4602      	mov	r2, r0
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4413      	add	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f103 0020 	add.w	r0, r3, #32
 8003756:	f107 0213 	add.w	r2, r7, #19
 800375a:	2300      	movs	r3, #0
 800375c:	212b      	movs	r1, #43	@ 0x2b
 800375e:	f000 fc97 	bl	8004090 <st7735_write_reg>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4413      	add	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	b2db      	uxtb	r3, r3
 8003770:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3320      	adds	r3, #32
 8003776:	f107 0113 	add.w	r1, r7, #19
 800377a:	2201      	movs	r2, #1
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fc9c 	bl	80040ba <st7735_send_data>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4413      	add	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3320      	adds	r3, #32
 8003794:	f107 0113 	add.w	r1, r7, #19
 8003798:	2201      	movs	r2, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc8d 	bl	80040ba <st7735_send_data>
 80037a0:	4602      	mov	r2, r0
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f103 0020 	add.w	r0, r3, #32
 80037ae:	f107 0213 	add.w	r2, r7, #19
 80037b2:	2300      	movs	r3, #0
 80037b4:	212c      	movs	r1, #44	@ 0x2c
 80037b6:	f000 fc6b 	bl	8004090 <st7735_write_reg>
 80037ba:	4602      	mov	r2, r0
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80037ce:	697b      	ldr	r3, [r7, #20]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	24000544 	.word	0x24000544

080037dc <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b090      	sub	sp, #64	@ 0x40
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	330a      	adds	r3, #10
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	330b      	adds	r3, #11
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	441a      	add	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	441a      	add	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	330d      	adds	r3, #13
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	4413      	add	r3, r2
 8003818:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	3312      	adds	r3, #18
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	3313      	adds	r3, #19
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	441a      	add	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	441a      	add	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3315      	adds	r3, #21
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4413      	add	r3, r2
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3316      	adds	r3, #22
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3317      	adds	r3, #23
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	441a      	add	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3318      	adds	r3, #24
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	441a      	add	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3319      	adds	r3, #25
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	4413      	add	r3, r2
 8003868:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	3302      	adds	r3, #2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	3303      	adds	r3, #3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	441a      	add	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	3304      	adds	r3, #4
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	441a      	add	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3305      	adds	r3, #5
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	4413      	add	r3, r2
 8003890:	61fb      	str	r3, [r7, #28]
  size = size - index;
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	4413      	add	r3, r2
 80038a0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80038a2:	4b51      	ldr	r3, [pc, #324]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1ad2      	subs	r2, r2, r3
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa6a 	bl	8003d94 <ST7735_SetDisplayWindow>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80038cc:	e087      	b.n	80039de <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80038ce:	4b46      	ldr	r3, [pc, #280]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80038d6:	4b44      	ldr	r3, [pc, #272]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4a44      	ldr	r2, [pc, #272]	@ (80039ec <ST7735_DrawBitmap+0x210>)
 80038dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038e0:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80038e2:	f043 0308 	orr.w	r3, r3, #8
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e005      	b.n	80038f6 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80038ea:	4b3f      	ldr	r3, [pc, #252]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	@ (80039ec <ST7735_DrawBitmap+0x210>)
 80038f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f103 0020 	add.w	r0, r3, #32
 80038fe:	f107 0213 	add.w	r2, r7, #19
 8003902:	2301      	movs	r3, #1
 8003904:	2136      	movs	r1, #54	@ 0x36
 8003906:	f000 fbc3 	bl	8004090 <st7735_write_reg>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
 8003916:	e062      	b.n	80039de <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fea1 	bl	8003664 <ST7735_SetCursor>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
 800392e:	e056      	b.n	80039de <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3320      	adds	r3, #32
 8003940:	f107 0114 	add.w	r1, r7, #20
 8003944:	2202      	movs	r2, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fbb7 	bl	80040ba <st7735_send_data>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8003958:	e009      	b.n	800396e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800395a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395c:	3302      	adds	r3, #2
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pbmp += 2;
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	3302      	adds	r3, #2
 8003964:	633b      	str	r3, [r7, #48]	@ 0x30
      }while(counter < size);
 8003966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3e0      	bcc.n	8003930 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 8003970:	7b1b      	ldrb	r3, [r3, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003976:	4b1c      	ldr	r3, [pc, #112]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ec <ST7735_DrawBitmap+0x210>)
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e006      	b.n	800399a <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a16      	ldr	r2, [pc, #88]	@ (80039ec <ST7735_DrawBitmap+0x210>)
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003998:	b2db      	uxtb	r3, r3
 800399a:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f103 0020 	add.w	r0, r3, #32
 80039a2:	f107 0213 	add.w	r2, r7, #19
 80039a6:	2301      	movs	r3, #1
 80039a8:	2136      	movs	r1, #54	@ 0x36
 80039aa:	f000 fb71 	bl	8004090 <st7735_write_reg>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ba:	e010      	b.n	80039de <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80039bc:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <ST7735_DrawBitmap+0x20c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f9e1 	bl	8003d94 <ST7735_SetDisplayWindow>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
  }

  return ret;
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3738      	adds	r7, #56	@ 0x38
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	24000544 	.word	0x24000544
 80039ec:	24000078 	.word	0x24000078

080039f0 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	441a      	add	r2, r3
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <ST7735_FillRGBRect+0xcc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d806      	bhi.n	8003a22 <ST7735_FillRGBRect+0x32>
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a18:	441a      	add	r2, r3
 8003a1a:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <ST7735_FillRGBRect+0xcc>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d903      	bls.n	8003a2a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e042      	b.n	8003ab0 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e03b      	b.n	8003aa8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	461a      	mov	r2, r3
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fe12 	bl	8003664 <ST7735_SetCursor>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e029      	b.n	8003aa2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e013      	b.n	8003a7c <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	7811      	ldrb	r1, [r2, #0]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <ST7735_FillRGBRect+0xd0>)
 8003a5e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	3301      	adds	r3, #1
 8003a6a:	7811      	ldrb	r1, [r2, #0]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <ST7735_FillRGBRect+0xd0>)
 8003a6e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3302      	adds	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3e7      	bcc.n	8003a54 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f103 0020 	add.w	r0, r3, #32
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	461a      	mov	r2, r3
 8003a90:	490b      	ldr	r1, [pc, #44]	@ (8003ac0 <ST7735_FillRGBRect+0xd0>)
 8003a92:	f000 fb12 	bl	80040ba <st7735_send_data>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3bf      	bcc.n	8003a30 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	24000544 	.word	0x24000544
 8003ac0:	24000554 	.word	0x24000554

08003ac4 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	441a      	add	r2, r3
 8003adc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b5c <ST7735_DrawHLine+0x98>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d903      	bls.n	8003aec <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e032      	b.n	8003b52 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fdb7 	bl	8003664 <ST7735_SetCursor>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e026      	b.n	8003b52 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e010      	b.n	8003b2c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	0a1a      	lsrs	r2, r3, #8
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	b2d1      	uxtb	r1, r2
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <ST7735_DrawHLine+0x9c>)
 8003b16:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	b2d1      	uxtb	r1, r2
 8003b22:	4a0f      	ldr	r2, [pc, #60]	@ (8003b60 <ST7735_DrawHLine+0x9c>)
 8003b24:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ea      	bcc.n	8003b0a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f103 0020 	add.w	r0, r3, #32
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4907      	ldr	r1, [pc, #28]	@ (8003b60 <ST7735_DrawHLine+0x9c>)
 8003b42:	f000 faba 	bl	80040ba <st7735_send_data>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003b52:	697b      	ldr	r3, [r7, #20]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	24000544 	.word	0x24000544
 8003b60:	240007d4 	.word	0x240007d4

08003b64 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <ST7735_DrawVLine+0x64>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d903      	bls.n	8003b8c <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e018      	b.n	8003bbe <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e011      	b.n	8003bb6 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	441a      	add	r2, r3
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f841 	bl	8003c24 <ST7735_SetPixel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	617b      	str	r3, [r7, #20]
        break;
 8003bae:	e006      	b.n	8003bbe <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3e9      	bcc.n	8003b92 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8003bbe:	697b      	ldr	r3, [r7, #20]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	24000544 	.word	0x24000544

08003bcc <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e014      	b.n	8003c12 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8003be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff ff66 	bl	8003ac4 <ST7735_DrawHLine>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	61fb      	str	r3, [r7, #28]
      break;
 8003c04:	e009      	b.n	8003c1a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3e6      	bcc.n	8003be8 <ST7735_FillRect+0x1c>
  }

  return ret;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	8a7b      	ldrh	r3, [r7, #18]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8003c4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ca8 <ST7735_SetPixel+0x84>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d204      	bcs.n	8003c62 <ST7735_SetPixel+0x3e>
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <ST7735_SetPixel+0x84>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d303      	bcc.n	8003c6a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e019      	b.n	8003c9e <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff fcf8 	bl	8003664 <ST7735_SetCursor>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00d      	b.n	8003c9e <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3320      	adds	r3, #32
 8003c86:	f107 0112 	add.w	r1, r7, #18
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa14 	bl	80040ba <st7735_send_data>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003c9e:	697b      	ldr	r3, [r7, #20]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	24000544 	.word	0x24000544

08003cac <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fcd0 	bl	8003664 <ST7735_SetCursor>
 8003cc4:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3320      	adds	r3, #32
 8003cca:	f107 0211 	add.w	r2, r7, #17
 8003cce:	212e      	movs	r1, #46	@ 0x2e
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f9ca 	bl	800406a <st7735_read_reg>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	f107 0111 	add.w	r1, r7, #17
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f9f8 	bl	80040de <st7735_recv_data>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	f107 0113 	add.w	r1, r7, #19
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f9ec 	bl	80040de <st7735_recv_data>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3320      	adds	r3, #32
 8003d12:	f107 0112 	add.w	r1, r7, #18
 8003d16:	2201      	movs	r2, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f9e0 	bl	80040de <st7735_recv_data>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	7cbb      	ldrb	r3, [r7, #18]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	441a      	add	r2, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003d40:	697b      	ldr	r3, [r7, #20]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8003d56:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <ST7735_GetXSize+0x20>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	24000544 	.word	0x24000544

08003d70 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <ST7735_GetYSize+0x20>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	24000544 	.word	0x24000544

08003d94 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8003da2:	4b7d      	ldr	r3, [pc, #500]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d821      	bhi.n	8003dee <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8003daa:	4b7b      	ldr	r3, [pc, #492]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003dac:	7b5b      	ldrb	r3, [r3, #13]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10e      	bne.n	8003dd0 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8003db2:	4b79      	ldr	r3, [pc, #484]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003db4:	7b1b      	ldrb	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	331a      	adds	r3, #26
 8003dbe:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e036      	b.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	e032      	b.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003dd0:	4b71      	ldr	r3, [pc, #452]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003dd2:	7b5b      	ldrb	r3, [r3, #13]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d12e      	bne.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003dda:	7b1b      	ldrb	r3, [r3, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d12a      	bne.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3302      	adds	r3, #2
 8003de4:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3301      	adds	r3, #1
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	e023      	b.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8003dee:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003df0:	7b5b      	ldrb	r3, [r3, #13]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d111      	bne.n	8003e1a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8003df6:	4b68      	ldr	r3, [pc, #416]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003df8:	7b1b      	ldrb	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	331a      	adds	r3, #26
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	e014      	b.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3318      	adds	r3, #24
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	e00d      	b.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003e1c:	7b5b      	ldrb	r3, [r3, #13]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d109      	bne.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8003e22:	4b5d      	ldr	r3, [pc, #372]	@ (8003f98 <ST7735_SetDisplayWindow+0x204>)
 8003e24:	7b1b      	ldrb	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3302      	adds	r3, #2
 8003e34:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f103 0020 	add.w	r0, r3, #32
 8003e3c:	f107 0213 	add.w	r2, r7, #19
 8003e40:	2300      	movs	r3, #0
 8003e42:	212a      	movs	r1, #42	@ 0x2a
 8003e44:	f000 f924 	bl	8004090 <st7735_write_reg>
 8003e48:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3320      	adds	r3, #32
 8003e56:	f107 0113 	add.w	r1, r7, #19
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f92c 	bl	80040ba <st7735_send_data>
 8003e62:	4602      	mov	r2, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3320      	adds	r3, #32
 8003e74:	f107 0113 	add.w	r1, r7, #19
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f91d 	bl	80040ba <st7735_send_data>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3320      	adds	r3, #32
 8003e9a:	f107 0113 	add.w	r1, r7, #19
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f90a 	bl	80040ba <st7735_send_data>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	f107 0113 	add.w	r1, r7, #19
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f8f5 	bl	80040ba <st7735_send_data>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f103 0020 	add.w	r0, r3, #32
 8003ede:	f107 0213 	add.w	r2, r7, #19
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	212b      	movs	r1, #43	@ 0x2b
 8003ee6:	f000 f8d3 	bl	8004090 <st7735_write_reg>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4413      	add	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3320      	adds	r3, #32
 8003efe:	f107 0113 	add.w	r1, r7, #19
 8003f02:	2201      	movs	r2, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f8d8 	bl	80040ba <st7735_send_data>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	f107 0113 	add.w	r1, r7, #19
 8003f20:	2201      	movs	r2, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8c9 	bl	80040ba <st7735_send_data>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	4413      	add	r3, r2
 8003f36:	3b01      	subs	r3, #1
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3320      	adds	r3, #32
 8003f42:	f107 0113 	add.w	r1, r7, #19
 8003f46:	2201      	movs	r2, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f8b6 	bl	80040ba <st7735_send_data>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4413      	add	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3320      	adds	r3, #32
 8003f6c:	f107 0113 	add.w	r1, r7, #19
 8003f70:	2201      	movs	r2, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f8a1 	bl	80040ba <st7735_send_data>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	24000544 	.word	0x24000544

08003f9c <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	7afa      	ldrb	r2, [r7, #11]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4798      	blx	r3
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	7af8      	ldrb	r0, [r7, #11]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68b8      	ldr	r0, [r7, #8]
 8004006:	4798      	blx	r3
 8004008:	4603      	mov	r3, r0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	68b8      	ldr	r0, [r7, #8]
 800402a:	4798      	blx	r3
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	4798      	blx	r3
 8004046:	4603      	mov	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800404a:	bf00      	nop
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4798      	blx	r3
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d8f5      	bhi.n	800404c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	460b      	mov	r3, r1
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6910      	ldr	r0, [r2, #16]
 8004080:	7af9      	ldrb	r1, [r7, #11]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4798      	blx	r3
 8004086:	4603      	mov	r3, r0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681c      	ldr	r4, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6918      	ldr	r0, [r3, #16]
 80040a8:	7af9      	ldrb	r1, [r7, #11]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	47a0      	blx	r4
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd90      	pop	{r4, r7, pc}

080040ba <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6910      	ldr	r0, [r2, #16]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	4798      	blx	r3
 80040d4:	4603      	mov	r3, r0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6910      	ldr	r0, [r2, #16]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4798      	blx	r3
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800410a:	2003      	movs	r0, #3
 800410c:	f001 fde0 	bl	8005cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004110:	f003 fe5a 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <HAL_Init+0x68>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	4913      	ldr	r1, [pc, #76]	@ (8004170 <HAL_Init+0x6c>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800412e:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <HAL_Init+0x68>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a0e      	ldr	r2, [pc, #56]	@ (8004170 <HAL_Init+0x6c>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	4a0b      	ldr	r2, [pc, #44]	@ (8004174 <HAL_Init+0x70>)
 8004146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004148:	4a0b      	ldr	r2, [pc, #44]	@ (8004178 <HAL_Init+0x74>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800414e:	200f      	movs	r0, #15
 8004150:	f000 f814 	bl	800417c <HAL_InitTick>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e002      	b.n	8004164 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800415e:	f7fd fc97 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58024400 	.word	0x58024400
 8004170:	0800f744 	.word	0x0800f744
 8004174:	24000004 	.word	0x24000004
 8004178:	24000000 	.word	0x24000000

0800417c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_InitTick+0x60>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e021      	b.n	80041d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004190:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <HAL_InitTick+0x64>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_InitTick+0x60>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800419e:	fbb3 f3f1 	udiv	r3, r3, r1
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fdb7 	bl	8005d1a <HAL_SYSTICK_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00e      	b.n	80041d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b0f      	cmp	r3, #15
 80041ba:	d80a      	bhi.n	80041d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041bc:	2200      	movs	r2, #0
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	f001 fd8f 	bl	8005ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041c8:	4a06      	ldr	r2, [pc, #24]	@ (80041e4 <HAL_InitTick+0x68>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	2400009c 	.word	0x2400009c
 80041e0:	24000000 	.word	0x24000000
 80041e4:	24000098 	.word	0x24000098

080041e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_IncTick+0x20>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <HAL_IncTick+0x24>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	4a04      	ldr	r2, [pc, #16]	@ (800420c <HAL_IncTick+0x24>)
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	2400009c 	.word	0x2400009c
 800420c:	24000a54 	.word	0x24000a54

08004210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return uwTick;
 8004214:	4b03      	ldr	r3, [pc, #12]	@ (8004224 <HAL_GetTick+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	24000a54 	.word	0x24000a54

08004228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7ff ffee 	bl	8004210 <HAL_GetTick>
 8004234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d005      	beq.n	800424e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <HAL_Delay+0x44>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800424e:	bf00      	nop
 8004250:	f7ff ffde 	bl	8004210 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	429a      	cmp	r2, r3
 800425e:	d8f7      	bhi.n	8004250 <HAL_Delay+0x28>
  {
  }
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2400009c 	.word	0x2400009c

08004270 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_GetREVID+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0c1b      	lsrs	r3, r3, #16
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	5c001000 	.word	0x5c001000

08004288 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <HAL_GetDEVID+0x18>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	5c001000 	.word	0x5c001000

080042a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0202 	bic.w	r2, r3, #2
 80042b4:	4904      	ldr	r1, [pc, #16]	@ (80042c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	58003c00 	.word	0x58003c00

080042cc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a04      	ldr	r2, [pc, #16]	@ (80042e8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	58003c00 	.word	0x58003c00

080042ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <LL_ADC_SetChannelPreselection+0x24>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2201      	movs	r2, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	e015      	b.n	80043a4 <LL_ADC_SetChannelPreselection+0x50>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800438e:	2320      	movs	r3, #32
 8004390:	e003      	b.n	800439a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2201      	movs	r2, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	69d2      	ldr	r2, [r2, #28]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b087      	sub	sp, #28
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3360      	adds	r3, #96	@ 0x60
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	430b      	orrs	r3, r1
 80043e8:	431a      	orrs	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	611a      	str	r2, [r3, #16]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3360      	adds	r3, #96	@ 0x60
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	431a      	orrs	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	601a      	str	r2, [r3, #0]
  }
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3330      	adds	r3, #48	@ 0x30
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	4413      	add	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	211f      	movs	r1, #31
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0e9b      	lsrs	r3, r3, #26
 80044c0:	f003 011f 	and.w	r1, r3, #31
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	431a      	orrs	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3314      	adds	r3, #20
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	0e5b      	lsrs	r3, r3, #25
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	4413      	add	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	0d1b      	lsrs	r3, r3, #20
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2107      	movs	r1, #7
 800450e:	fa01 f303 	lsl.w	r3, r1, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	401a      	ands	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0d1b      	lsrs	r3, r3, #20
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0318 	and.w	r3, r3, #24
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <LL_ADC_SetChannelSingleDiff+0x44>)
 800455c:	40d9      	lsrs	r1, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	400b      	ands	r3, r1
 8004562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	000fffff 	.word	0x000fffff

08004580 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 031f 	and.w	r3, r3, #31
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6093      	str	r3, [r2, #8]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	5fffffc0 	.word	0x5fffffc0

080045dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f0:	d101      	bne.n	80045f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <LL_ADC_EnableInternalRegulator+0x24>)
 8004612:	4013      	ands	r3, r2
 8004614:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	6fffffc0 	.word	0x6fffffc0

0800462c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004640:	d101      	bne.n	8004646 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <LL_ADC_Enable+0x24>)
 8004662:	4013      	ands	r3, r2
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	7fffffc0 	.word	0x7fffffc0

0800467c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <LL_ADC_Disable+0x24>)
 800468a:	4013      	ands	r3, r2
 800468c:	f043 0202 	orr.w	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	7fffffc0 	.word	0x7fffffc0

080046a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <LL_ADC_IsEnabled+0x18>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <LL_ADC_IsEnabled+0x1a>
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d101      	bne.n	80046e2 <LL_ADC_IsDisableOngoing+0x18>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <LL_ADC_IsDisableOngoing+0x1a>
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <LL_ADC_REG_StartConversion+0x24>)
 80046fe:	4013      	ands	r3, r2
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	7fffffc0 	.word	0x7fffffc0

08004718 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <LL_ADC_REG_StopConversion+0x24>)
 8004726:	4013      	ands	r3, r2
 8004728:	f043 0210 	orr.w	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	7fffffc0 	.word	0x7fffffc0

08004740 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d101      	bne.n	8004758 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <LL_ADC_INJ_StopConversion+0x24>)
 8004776:	4013      	ands	r3, r2
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	7fffffc0 	.word	0x7fffffc0

08004790 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d101      	bne.n	80047a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b089      	sub	sp, #36	@ 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e18f      	b.n	8004af2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc fc7f 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff feef 	bl	80045dc <LL_ADC_IsDeepPowerDownEnabled>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fed5 	bl	80045b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff0a 	bl	800462c <LL_ADC_IsInternalRegulatorEnabled>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d114      	bne.n	8004848 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff feee 	bl	8004604 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004828:	4b87      	ldr	r3, [pc, #540]	@ (8004a48 <HAL_ADC_Init+0x290>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	4a87      	ldr	r2, [pc, #540]	@ (8004a4c <HAL_ADC_Init+0x294>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	3301      	adds	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800483a:	e002      	b.n	8004842 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f9      	bne.n	800483c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff feed 	bl	800462c <LL_ADC_IsInternalRegulatorEnabled>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10d      	bne.n	8004874 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff61 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 800487e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8129 	bne.w	8004ae0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8125 	bne.w	8004ae0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fefa 	bl	80046a4 <LL_ADC_IsEnabled>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d136      	bne.n	8004924 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_ADC_Init+0x298>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_ADC_Init+0x112>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_ADC_Init+0x29c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10e      	bne.n	80048e8 <HAL_ADC_Init+0x130>
 80048ca:	4861      	ldr	r0, [pc, #388]	@ (8004a50 <HAL_ADC_Init+0x298>)
 80048cc:	f7ff feea 	bl	80046a4 <LL_ADC_IsEnabled>
 80048d0:	4604      	mov	r4, r0
 80048d2:	4860      	ldr	r0, [pc, #384]	@ (8004a54 <HAL_ADC_Init+0x29c>)
 80048d4:	f7ff fee6 	bl	80046a4 <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	4323      	orrs	r3, r4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e008      	b.n	80048fa <HAL_ADC_Init+0x142>
 80048e8:	485b      	ldr	r0, [pc, #364]	@ (8004a58 <HAL_ADC_Init+0x2a0>)
 80048ea:	f7ff fedb 	bl	80046a4 <LL_ADC_IsEnabled>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a53      	ldr	r2, [pc, #332]	@ (8004a50 <HAL_ADC_Init+0x298>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_ADC_Init+0x15a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a51      	ldr	r2, [pc, #324]	@ (8004a54 <HAL_ADC_Init+0x29c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_ADC_Init+0x15e>
 8004912:	4a52      	ldr	r2, [pc, #328]	@ (8004a5c <HAL_ADC_Init+0x2a4>)
 8004914:	e000      	b.n	8004918 <HAL_ADC_Init+0x160>
 8004916:	4a52      	ldr	r2, [pc, #328]	@ (8004a60 <HAL_ADC_Init+0x2a8>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7ff fce4 	bl	80042ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004924:	f7ff fca4 	bl	8004270 <HAL_GetREVID>
 8004928:	4603      	mov	r3, r0
 800492a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800492e:	4293      	cmp	r3, r2
 8004930:	d914      	bls.n	800495c <HAL_ADC_Init+0x1a4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b10      	cmp	r3, #16
 8004938:	d110      	bne.n	800495c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	7d5b      	ldrb	r3, [r3, #21]
 800493e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004944:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800494a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7f1b      	ldrb	r3, [r3, #28]
 8004950:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004952:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004954:	f043 030c 	orr.w	r3, r3, #12
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e00d      	b.n	8004978 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7d5b      	ldrb	r3, [r3, #21]
 8004960:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004966:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800496c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7f1b      	ldrb	r3, [r3, #28]
 8004972:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7f1b      	ldrb	r3, [r3, #28]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	3b01      	subs	r3, #1
 8004986:	045b      	lsls	r3, r3, #17
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <HAL_ADC_Init+0x2ac>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff febc 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 80049c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fede 	bl	8004790 <LL_ADC_INJ_IsConversionOngoing>
 80049d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d15f      	bne.n	8004a9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d15c      	bne.n	8004a9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7d1b      	ldrb	r3, [r3, #20]
 80049e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <HAL_ADC_Init+0x2b0>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	69b9      	ldr	r1, [r7, #24]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d130      	bne.n	8004a70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	4b14      	ldr	r3, [pc, #80]	@ (8004a6c <HAL_ADC_Init+0x2b4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0411      	lsls	r1, r2, #16
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a36:	430a      	orrs	r2, r1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	611a      	str	r2, [r3, #16]
 8004a44:	e01c      	b.n	8004a80 <HAL_ADC_Init+0x2c8>
 8004a46:	bf00      	nop
 8004a48:	24000000 	.word	0x24000000
 8004a4c:	053e2d63 	.word	0x053e2d63
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40022100 	.word	0x40022100
 8004a58:	58026000 	.word	0x58026000
 8004a5c:	40022300 	.word	0x40022300
 8004a60:	58026300 	.word	0x58026300
 8004a64:	fff0c003 	.word	0xfff0c003
 8004a68:	ffffbffc 	.word	0xffffbffc
 8004a6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fec6 	bl	8005828 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10c      	bne.n	8004abe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f023 010f 	bic.w	r1, r3, #15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8004abc:	e007      	b.n	8004ace <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 020f 	bic.w	r2, r2, #15
 8004acc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ade:	e007      	b.n	8004af0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd90      	pop	{r4, r7, pc}
 8004afa:	bf00      	nop

08004afc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5c      	ldr	r2, [pc, #368]	@ (8004c7c <HAL_ADC_Start+0x180>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_ADC_Start+0x1c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5b      	ldr	r2, [pc, #364]	@ (8004c80 <HAL_ADC_Start+0x184>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_ADC_Start+0x20>
 8004b18:	4b5a      	ldr	r3, [pc, #360]	@ (8004c84 <HAL_ADC_Start+0x188>)
 8004b1a:	e000      	b.n	8004b1e <HAL_ADC_Start+0x22>
 8004b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c88 <HAL_ADC_Start+0x18c>)
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fd2e 	bl	8004580 <LL_ADC_GetMultimode>
 8004b24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fe08 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 809a 	bne.w	8004c6c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_Start+0x4a>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e095      	b.n	8004c72 <HAL_ADC_Start+0x176>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fd80 	bl	8005654 <ADC_Enable>
 8004b54:	4603      	mov	r3, r0
 8004b56:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8081 	bne.w	8004c62 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b64:	4b49      	ldr	r3, [pc, #292]	@ (8004c8c <HAL_ADC_Start+0x190>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a42      	ldr	r2, [pc, #264]	@ (8004c80 <HAL_ADC_Start+0x184>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d002      	beq.n	8004b80 <HAL_ADC_Start+0x84>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	e000      	b.n	8004b82 <HAL_ADC_Start+0x86>
 8004b80:	4b3e      	ldr	r3, [pc, #248]	@ (8004c7c <HAL_ADC_Start+0x180>)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d002      	beq.n	8004b90 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d106      	bne.n	8004bb8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	f023 0206 	bic.w	r2, r3, #6
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bb6:	e002      	b.n	8004bbe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	221c      	movs	r2, #28
 8004bc4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c80 <HAL_ADC_Start+0x184>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d002      	beq.n	8004bde <HAL_ADC_Start+0xe2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	e000      	b.n	8004be0 <HAL_ADC_Start+0xe4>
 8004bde:	4b27      	ldr	r3, [pc, #156]	@ (8004c7c <HAL_ADC_Start+0x180>)
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d008      	beq.n	8004bfa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d002      	beq.n	8004bfa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d114      	bne.n	8004c24 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c10:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fd67 	bl	80046f0 <LL_ADC_REG_StartConversion>
 8004c22:	e025      	b.n	8004c70 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <HAL_ADC_Start+0x184>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d002      	beq.n	8004c40 <HAL_ADC_Start+0x144>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	e000      	b.n	8004c42 <HAL_ADC_Start+0x146>
 8004c40:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <HAL_ADC_Start+0x180>)
 8004c42:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00f      	beq.n	8004c70 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c60:	e006      	b.n	8004c70 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004c6a:	e001      	b.n	8004c70 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40022100 	.word	0x40022100
 8004c84:	40022300 	.word	0x40022300
 8004c88:	58026300 	.word	0x58026300
 8004c8c:	fffff0fe 	.word	0xfffff0fe

08004c90 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_Stop+0x16>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e021      	b.n	8004cea <HAL_ADC_Stop+0x5a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004cae:	2103      	movs	r1, #3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fc13 	bl	80054dc <ADC_ConversionStop>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fd51 	bl	8005768 <ADC_Disable>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cd4:	4b07      	ldr	r3, [pc, #28]	@ (8004cf4 <HAL_ADC_Stop+0x64>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	f043 0201 	orr.w	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	ffffeefe 	.word	0xffffeefe

08004cf8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a72      	ldr	r2, [pc, #456]	@ (8004ed0 <HAL_ADC_PollForConversion+0x1d8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_ADC_PollForConversion+0x1e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a70      	ldr	r2, [pc, #448]	@ (8004ed4 <HAL_ADC_PollForConversion+0x1dc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_ADC_PollForConversion+0x22>
 8004d16:	4b70      	ldr	r3, [pc, #448]	@ (8004ed8 <HAL_ADC_PollForConversion+0x1e0>)
 8004d18:	e000      	b.n	8004d1c <HAL_ADC_PollForConversion+0x24>
 8004d1a:	4b70      	ldr	r3, [pc, #448]	@ (8004edc <HAL_ADC_PollForConversion+0x1e4>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fc2f 	bl	8004580 <LL_ADC_GetMultimode>
 8004d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d102      	bne.n	8004d32 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e037      	b.n	8004da2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d002      	beq.n	8004d44 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b09      	cmp	r3, #9
 8004d42:	d111      	bne.n	8004d68 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0b1      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d62:	2304      	movs	r3, #4
 8004d64:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004d66:	e01c      	b.n	8004da2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	@ (8004ed0 <HAL_ADC_PollForConversion+0x1d8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_ADC_PollForConversion+0x84>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a57      	ldr	r2, [pc, #348]	@ (8004ed4 <HAL_ADC_PollForConversion+0x1dc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <HAL_ADC_PollForConversion+0x88>
 8004d7c:	4b56      	ldr	r3, [pc, #344]	@ (8004ed8 <HAL_ADC_PollForConversion+0x1e0>)
 8004d7e:	e000      	b.n	8004d82 <HAL_ADC_PollForConversion+0x8a>
 8004d80:	4b56      	ldr	r3, [pc, #344]	@ (8004edc <HAL_ADC_PollForConversion+0x1e4>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fc0a 	bl	800459c <LL_ADC_GetMultiDMATransfer>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e093      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d9e:	2304      	movs	r3, #4
 8004da0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004da2:	f7ff fa35 	bl	8004210 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004da8:	e021      	b.n	8004dee <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d01d      	beq.n	8004dee <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004db2:	f7ff fa2d 	bl	8004210 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <HAL_ADC_PollForConversion+0xd0>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d112      	bne.n	8004dee <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e06b      	b.n	8004ec6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0d6      	beq.n	8004daa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fb28 	bl	8004462 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01c      	beq.n	8004e52 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7d5b      	ldrb	r3, [r3, #21]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d118      	bne.n	8004e52 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d111      	bne.n	8004e52 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_ADC_PollForConversion+0x1dc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d002      	beq.n	8004e62 <HAL_ADC_PollForConversion+0x16a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	e000      	b.n	8004e64 <HAL_ADC_PollForConversion+0x16c>
 8004e62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_ADC_PollForConversion+0x1d8>)
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d008      	beq.n	8004e7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d002      	beq.n	8004e7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b09      	cmp	r3, #9
 8004e7c:	d104      	bne.n	8004e88 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e00c      	b.n	8004ea2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_ADC_PollForConversion+0x1dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d002      	beq.n	8004e98 <HAL_ADC_PollForConversion+0x1a0>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	e000      	b.n	8004e9a <HAL_ADC_PollForConversion+0x1a2>
 8004e98:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <HAL_ADC_PollForConversion+0x1d8>)
 8004e9a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d104      	bne.n	8004eb2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2208      	movs	r2, #8
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e008      	b.n	8004ec4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	220c      	movs	r2, #12
 8004ec2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40022000 	.word	0x40022000
 8004ed4:	40022100 	.word	0x40022100
 8004ed8:	40022300 	.word	0x40022300
 8004edc:	58026300 	.word	0x58026300

08004ee0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b08d      	sub	sp, #52	@ 0x34
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a65      	ldr	r2, [pc, #404]	@ (80050ac <HAL_ADC_ConfigChannel+0x1b0>)
 8004f16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x2a>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e2c7      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x5ba>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fc04 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 82ac 	bne.w	8005498 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db2c      	blt.n	8004fa2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x6a>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	0e9b      	lsrs	r3, r3, #26
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2201      	movs	r2, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	e016      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x98>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	fa93 f3a3 	rbit	r3, r3
 8004f72:	613b      	str	r3, [r7, #16]
  return result;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8004f7e:	2320      	movs	r3, #32
 8004f80:	e003      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	fab3 f383 	clz	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2201      	movs	r2, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	69d1      	ldr	r1, [r2, #28]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7ff fa6a 	bl	8004488 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fbc1 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 8004fbe:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fbe3 	bl	8004790 <LL_ADC_INJ_IsConversionOngoing>
 8004fca:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 80b8 	bne.w	8005144 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 80b4 	bne.w	8005144 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f7ff fa79 	bl	80044e0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004fee:	4b30      	ldr	r3, [pc, #192]	@ (80050b0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ffa:	d10b      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x118>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	e01d      	b.n	8005050 <HAL_ADC_ConfigChannel+0x154>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <HAL_ADC_ConfigChannel+0x13e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	089b      	lsrs	r3, r3, #2
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	e00a      	b.n	8005050 <HAL_ADC_ConfigChannel+0x154>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d02c      	beq.n	80050b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f7ff f9a7 	bl	80043ba <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6919      	ldr	r1, [r3, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	7e5b      	ldrb	r3, [r3, #25]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d102      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x186>
 800507c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005080:	e000      	b.n	8005084 <HAL_ADC_ConfigChannel+0x188>
 8005082:	2300      	movs	r3, #0
 8005084:	461a      	mov	r2, r3
 8005086:	f7ff f9d1 	bl	800442c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6919      	ldr	r1, [r3, #16]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	7e1b      	ldrb	r3, [r3, #24]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d102      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x1a4>
 800509a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800509e:	e000      	b.n	80050a2 <HAL_ADC_ConfigChannel+0x1a6>
 80050a0:	2300      	movs	r3, #0
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7ff f9a9 	bl	80043fa <LL_ADC_SetDataRightShift>
 80050a8:	e04c      	b.n	8005144 <HAL_ADC_ConfigChannel+0x248>
 80050aa:	bf00      	nop
 80050ac:	47ff0000 	.word	0x47ff0000
 80050b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	069b      	lsls	r3, r3, #26
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d107      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	069b      	lsls	r3, r3, #26
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d107      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	069b      	lsls	r3, r3, #26
 800510c:	429a      	cmp	r2, r3
 800510e:	d107      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800511e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	069b      	lsls	r3, r3, #26
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005142:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff faab 	bl	80046a4 <LL_ADC_IsEnabled>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 81aa 	bne.w	80054aa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6819      	ldr	r1, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	461a      	mov	r2, r3
 8005164:	f7ff f9e8 	bl	8004538 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a87      	ldr	r2, [pc, #540]	@ (800538c <HAL_ADC_ConfigChannel+0x490>)
 800516e:	4293      	cmp	r3, r2
 8005170:	f040 809a 	bne.w	80052a8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4984      	ldr	r1, [pc, #528]	@ (8005390 <HAL_ADC_ConfigChannel+0x494>)
 800517e:	428b      	cmp	r3, r1
 8005180:	d147      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x316>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4983      	ldr	r1, [pc, #524]	@ (8005394 <HAL_ADC_ConfigChannel+0x498>)
 8005188:	428b      	cmp	r3, r1
 800518a:	d040      	beq.n	800520e <HAL_ADC_ConfigChannel+0x312>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4981      	ldr	r1, [pc, #516]	@ (8005398 <HAL_ADC_ConfigChannel+0x49c>)
 8005192:	428b      	cmp	r3, r1
 8005194:	d039      	beq.n	800520a <HAL_ADC_ConfigChannel+0x30e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4980      	ldr	r1, [pc, #512]	@ (800539c <HAL_ADC_ConfigChannel+0x4a0>)
 800519c:	428b      	cmp	r3, r1
 800519e:	d032      	beq.n	8005206 <HAL_ADC_ConfigChannel+0x30a>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	497e      	ldr	r1, [pc, #504]	@ (80053a0 <HAL_ADC_ConfigChannel+0x4a4>)
 80051a6:	428b      	cmp	r3, r1
 80051a8:	d02b      	beq.n	8005202 <HAL_ADC_ConfigChannel+0x306>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	497d      	ldr	r1, [pc, #500]	@ (80053a4 <HAL_ADC_ConfigChannel+0x4a8>)
 80051b0:	428b      	cmp	r3, r1
 80051b2:	d024      	beq.n	80051fe <HAL_ADC_ConfigChannel+0x302>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	497b      	ldr	r1, [pc, #492]	@ (80053a8 <HAL_ADC_ConfigChannel+0x4ac>)
 80051ba:	428b      	cmp	r3, r1
 80051bc:	d01d      	beq.n	80051fa <HAL_ADC_ConfigChannel+0x2fe>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	497a      	ldr	r1, [pc, #488]	@ (80053ac <HAL_ADC_ConfigChannel+0x4b0>)
 80051c4:	428b      	cmp	r3, r1
 80051c6:	d016      	beq.n	80051f6 <HAL_ADC_ConfigChannel+0x2fa>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4978      	ldr	r1, [pc, #480]	@ (80053b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80051ce:	428b      	cmp	r3, r1
 80051d0:	d00f      	beq.n	80051f2 <HAL_ADC_ConfigChannel+0x2f6>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4977      	ldr	r1, [pc, #476]	@ (80053b4 <HAL_ADC_ConfigChannel+0x4b8>)
 80051d8:	428b      	cmp	r3, r1
 80051da:	d008      	beq.n	80051ee <HAL_ADC_ConfigChannel+0x2f2>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4975      	ldr	r1, [pc, #468]	@ (80053b8 <HAL_ADC_ConfigChannel+0x4bc>)
 80051e2:	428b      	cmp	r3, r1
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x2ee>
 80051e6:	4b75      	ldr	r3, [pc, #468]	@ (80053bc <HAL_ADC_ConfigChannel+0x4c0>)
 80051e8:	e05a      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051ea:	2300      	movs	r3, #0
 80051ec:	e058      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051ee:	4b74      	ldr	r3, [pc, #464]	@ (80053c0 <HAL_ADC_ConfigChannel+0x4c4>)
 80051f0:	e056      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051f2:	4b74      	ldr	r3, [pc, #464]	@ (80053c4 <HAL_ADC_ConfigChannel+0x4c8>)
 80051f4:	e054      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051f6:	4b6e      	ldr	r3, [pc, #440]	@ (80053b0 <HAL_ADC_ConfigChannel+0x4b4>)
 80051f8:	e052      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051fa:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_ADC_ConfigChannel+0x4b0>)
 80051fc:	e050      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 80051fe:	4b72      	ldr	r3, [pc, #456]	@ (80053c8 <HAL_ADC_ConfigChannel+0x4cc>)
 8005200:	e04e      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005202:	4b72      	ldr	r3, [pc, #456]	@ (80053cc <HAL_ADC_ConfigChannel+0x4d0>)
 8005204:	e04c      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005206:	4b72      	ldr	r3, [pc, #456]	@ (80053d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8005208:	e04a      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800520a:	4b72      	ldr	r3, [pc, #456]	@ (80053d4 <HAL_ADC_ConfigChannel+0x4d8>)
 800520c:	e048      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800520e:	2301      	movs	r3, #1
 8005210:	e046      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4970      	ldr	r1, [pc, #448]	@ (80053d8 <HAL_ADC_ConfigChannel+0x4dc>)
 8005218:	428b      	cmp	r3, r1
 800521a:	d140      	bne.n	800529e <HAL_ADC_ConfigChannel+0x3a2>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	495c      	ldr	r1, [pc, #368]	@ (8005394 <HAL_ADC_ConfigChannel+0x498>)
 8005222:	428b      	cmp	r3, r1
 8005224:	d039      	beq.n	800529a <HAL_ADC_ConfigChannel+0x39e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	495b      	ldr	r1, [pc, #364]	@ (8005398 <HAL_ADC_ConfigChannel+0x49c>)
 800522c:	428b      	cmp	r3, r1
 800522e:	d032      	beq.n	8005296 <HAL_ADC_ConfigChannel+0x39a>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4959      	ldr	r1, [pc, #356]	@ (800539c <HAL_ADC_ConfigChannel+0x4a0>)
 8005236:	428b      	cmp	r3, r1
 8005238:	d02b      	beq.n	8005292 <HAL_ADC_ConfigChannel+0x396>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4958      	ldr	r1, [pc, #352]	@ (80053a0 <HAL_ADC_ConfigChannel+0x4a4>)
 8005240:	428b      	cmp	r3, r1
 8005242:	d024      	beq.n	800528e <HAL_ADC_ConfigChannel+0x392>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4956      	ldr	r1, [pc, #344]	@ (80053a4 <HAL_ADC_ConfigChannel+0x4a8>)
 800524a:	428b      	cmp	r3, r1
 800524c:	d01d      	beq.n	800528a <HAL_ADC_ConfigChannel+0x38e>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4955      	ldr	r1, [pc, #340]	@ (80053a8 <HAL_ADC_ConfigChannel+0x4ac>)
 8005254:	428b      	cmp	r3, r1
 8005256:	d016      	beq.n	8005286 <HAL_ADC_ConfigChannel+0x38a>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4953      	ldr	r1, [pc, #332]	@ (80053ac <HAL_ADC_ConfigChannel+0x4b0>)
 800525e:	428b      	cmp	r3, r1
 8005260:	d00f      	beq.n	8005282 <HAL_ADC_ConfigChannel+0x386>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4952      	ldr	r1, [pc, #328]	@ (80053b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d008      	beq.n	800527e <HAL_ADC_ConfigChannel+0x382>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4951      	ldr	r1, [pc, #324]	@ (80053b8 <HAL_ADC_ConfigChannel+0x4bc>)
 8005272:	428b      	cmp	r3, r1
 8005274:	d101      	bne.n	800527a <HAL_ADC_ConfigChannel+0x37e>
 8005276:	4b51      	ldr	r3, [pc, #324]	@ (80053bc <HAL_ADC_ConfigChannel+0x4c0>)
 8005278:	e012      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800527a:	2300      	movs	r3, #0
 800527c:	e010      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800527e:	4b51      	ldr	r3, [pc, #324]	@ (80053c4 <HAL_ADC_ConfigChannel+0x4c8>)
 8005280:	e00e      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005282:	4b4b      	ldr	r3, [pc, #300]	@ (80053b0 <HAL_ADC_ConfigChannel+0x4b4>)
 8005284:	e00c      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005286:	4b49      	ldr	r3, [pc, #292]	@ (80053ac <HAL_ADC_ConfigChannel+0x4b0>)
 8005288:	e00a      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <HAL_ADC_ConfigChannel+0x4cc>)
 800528c:	e008      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800528e:	4b4f      	ldr	r3, [pc, #316]	@ (80053cc <HAL_ADC_ConfigChannel+0x4d0>)
 8005290:	e006      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005292:	4b4f      	ldr	r3, [pc, #316]	@ (80053d0 <HAL_ADC_ConfigChannel+0x4d4>)
 8005294:	e004      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 8005296:	4b4f      	ldr	r3, [pc, #316]	@ (80053d4 <HAL_ADC_ConfigChannel+0x4d8>)
 8005298:	e002      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x3a4>
 800529e:	2300      	movs	r3, #0
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7ff f856 	bl	8004354 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f280 80fc 	bge.w	80054aa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a36      	ldr	r2, [pc, #216]	@ (8005390 <HAL_ADC_ConfigChannel+0x494>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_ADC_ConfigChannel+0x3ca>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a45      	ldr	r2, [pc, #276]	@ (80053d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x3ce>
 80052c6:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <HAL_ADC_ConfigChannel+0x4e0>)
 80052c8:	e000      	b.n	80052cc <HAL_ADC_ConfigChannel+0x3d0>
 80052ca:	4b45      	ldr	r3, [pc, #276]	@ (80053e0 <HAL_ADC_ConfigChannel+0x4e4>)
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff f833 	bl	8004338 <LL_ADC_GetCommonPathInternalCh>
 80052d2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005390 <HAL_ADC_ConfigChannel+0x494>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x3ec>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a3d      	ldr	r2, [pc, #244]	@ (80053d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10e      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x40a>
 80052e8:	4829      	ldr	r0, [pc, #164]	@ (8005390 <HAL_ADC_ConfigChannel+0x494>)
 80052ea:	f7ff f9db 	bl	80046a4 <LL_ADC_IsEnabled>
 80052ee:	4604      	mov	r4, r0
 80052f0:	4839      	ldr	r0, [pc, #228]	@ (80053d8 <HAL_ADC_ConfigChannel+0x4dc>)
 80052f2:	f7ff f9d7 	bl	80046a4 <LL_ADC_IsEnabled>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4323      	orrs	r3, r4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	e008      	b.n	8005318 <HAL_ADC_ConfigChannel+0x41c>
 8005306:	4837      	ldr	r0, [pc, #220]	@ (80053e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8005308:	f7ff f9cc 	bl	80046a4 <LL_ADC_IsEnabled>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80b3 	beq.w	8005484 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a31      	ldr	r2, [pc, #196]	@ (80053e8 <HAL_ADC_ConfigChannel+0x4ec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d165      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x4f8>
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d160      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2b      	ldr	r2, [pc, #172]	@ (80053e4 <HAL_ADC_ConfigChannel+0x4e8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	f040 80b6 	bne.w	80054aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <HAL_ADC_ConfigChannel+0x494>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_ADC_ConfigChannel+0x456>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	@ (80053d8 <HAL_ADC_ConfigChannel+0x4dc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x45a>
 8005352:	4a22      	ldr	r2, [pc, #136]	@ (80053dc <HAL_ADC_ConfigChannel+0x4e0>)
 8005354:	e000      	b.n	8005358 <HAL_ADC_ConfigChannel+0x45c>
 8005356:	4a22      	ldr	r2, [pc, #136]	@ (80053e0 <HAL_ADC_ConfigChannel+0x4e4>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7fe ffd6 	bl	8004312 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005366:	4b21      	ldr	r3, [pc, #132]	@ (80053ec <HAL_ADC_ConfigChannel+0x4f0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <HAL_ADC_ConfigChannel+0x4f4>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	3301      	adds	r3, #1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800537a:	e002      	b.n	8005382 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f9      	bne.n	800537c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005388:	e08f      	b.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
 800538a:	bf00      	nop
 800538c:	47ff0000 	.word	0x47ff0000
 8005390:	40022000 	.word	0x40022000
 8005394:	04300002 	.word	0x04300002
 8005398:	08600004 	.word	0x08600004
 800539c:	0c900008 	.word	0x0c900008
 80053a0:	10c00010 	.word	0x10c00010
 80053a4:	14f00020 	.word	0x14f00020
 80053a8:	2a000400 	.word	0x2a000400
 80053ac:	2e300800 	.word	0x2e300800
 80053b0:	32601000 	.word	0x32601000
 80053b4:	43210000 	.word	0x43210000
 80053b8:	4b840000 	.word	0x4b840000
 80053bc:	4fb80000 	.word	0x4fb80000
 80053c0:	47520000 	.word	0x47520000
 80053c4:	36902000 	.word	0x36902000
 80053c8:	25b00200 	.word	0x25b00200
 80053cc:	21800100 	.word	0x21800100
 80053d0:	1d500080 	.word	0x1d500080
 80053d4:	19200040 	.word	0x19200040
 80053d8:	40022100 	.word	0x40022100
 80053dc:	40022300 	.word	0x40022300
 80053e0:	58026300 	.word	0x58026300
 80053e4:	58026000 	.word	0x58026000
 80053e8:	cb840000 	.word	0xcb840000
 80053ec:	24000000 	.word	0x24000000
 80053f0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a31      	ldr	r2, [pc, #196]	@ (80054c0 <HAL_ADC_ConfigChannel+0x5c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d11e      	bne.n	800543c <HAL_ADC_ConfigChannel+0x540>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d119      	bne.n	800543c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2d      	ldr	r2, [pc, #180]	@ (80054c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d14b      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2c      	ldr	r2, [pc, #176]	@ (80054c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_ADC_ConfigChannel+0x52a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <HAL_ADC_ConfigChannel+0x5d0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x52e>
 8005426:	4a2a      	ldr	r2, [pc, #168]	@ (80054d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8005428:	e000      	b.n	800542c <HAL_ADC_ConfigChannel+0x530>
 800542a:	4a2a      	ldr	r2, [pc, #168]	@ (80054d4 <HAL_ADC_ConfigChannel+0x5d8>)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7fe ff6c 	bl	8004312 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800543a:	e036      	b.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a25      	ldr	r2, [pc, #148]	@ (80054d8 <HAL_ADC_ConfigChannel+0x5dc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d131      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d12c      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <HAL_ADC_ConfigChannel+0x5c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d127      	bne.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_ADC_ConfigChannel+0x5cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_ADC_ConfigChannel+0x572>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <HAL_ADC_ConfigChannel+0x5d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x576>
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <HAL_ADC_ConfigChannel+0x5d4>)
 8005470:	e000      	b.n	8005474 <HAL_ADC_ConfigChannel+0x578>
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_ADC_ConfigChannel+0x5d8>)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7fe ff48 	bl	8004312 <LL_ADC_SetCommonPathInternalCh>
 8005482:	e012      	b.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005496:	e008      	b.n	80054aa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80054b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3734      	adds	r7, #52	@ 0x34
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd90      	pop	{r4, r7, pc}
 80054be:	bf00      	nop
 80054c0:	c7520000 	.word	0xc7520000
 80054c4:	58026000 	.word	0x58026000
 80054c8:	40022000 	.word	0x40022000
 80054cc:	40022100 	.word	0x40022100
 80054d0:	40022300 	.word	0x40022300
 80054d4:	58026300 	.word	0x58026300
 80054d8:	cfb80000 	.word	0xcfb80000

080054dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff f924 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 80054f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff f946 	bl	8004790 <LL_ADC_INJ_IsConversionOngoing>
 8005504:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8098 	beq.w	8005644 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02a      	beq.n	8005578 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	7d5b      	ldrb	r3, [r3, #21]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d126      	bne.n	8005578 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7d1b      	ldrb	r3, [r3, #20]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d122      	bne.n	8005578 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005532:	2301      	movs	r3, #1
 8005534:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005536:	e014      	b.n	8005562 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4a45      	ldr	r2, [pc, #276]	@ (8005650 <ADC_ConversionStop+0x174>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d90d      	bls.n	800555c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005544:	f043 0210 	orr.w	r2, r3, #16
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e074      	b.n	8005646 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d1e3      	bne.n	8005538 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2240      	movs	r2, #64	@ 0x40
 8005576:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d014      	beq.n	80055a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f8dc 	bl	8004740 <LL_ADC_REG_IsConversionOngoing>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f899 	bl	80046ca <LL_ADC_IsDisableOngoing>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f8b8 	bl	8004718 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d014      	beq.n	80055d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f8ec 	bl	8004790 <LL_ADC_INJ_IsConversionOngoing>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f881 	bl	80046ca <LL_ADC_IsDisableOngoing>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff f8c8 	bl	8004768 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d005      	beq.n	80055ea <ADC_ConversionStop+0x10e>
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d105      	bne.n	80055f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80055e4:	230c      	movs	r3, #12
 80055e6:	617b      	str	r3, [r7, #20]
        break;
 80055e8:	e005      	b.n	80055f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80055ea:	2308      	movs	r3, #8
 80055ec:	617b      	str	r3, [r7, #20]
        break;
 80055ee:	e002      	b.n	80055f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80055f0:	2304      	movs	r3, #4
 80055f2:	617b      	str	r3, [r7, #20]
        break;
 80055f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80055f6:	f7fe fe0b 	bl	8004210 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80055fc:	e01b      	b.n	8005636 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80055fe:	f7fe fe07 	bl	8004210 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b05      	cmp	r3, #5
 800560a:	d914      	bls.n	8005636 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	f043 0210 	orr.w	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	f043 0201 	orr.w	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e007      	b.n	8005646 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1dc      	bne.n	80055fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	000cdbff 	.word	0x000cdbff

08005654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff f81f 	bl	80046a4 <LL_ADC_IsEnabled>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d16e      	bne.n	800574a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	4b38      	ldr	r3, [pc, #224]	@ (8005754 <ADC_Enable+0x100>)
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567e:	f043 0210 	orr.w	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f043 0201 	orr.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e05a      	b.n	800574c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe ffda 	bl	8004654 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056a0:	f7fe fdb6 	bl	8004210 <HAL_GetTick>
 80056a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <ADC_Enable+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <ADC_Enable+0x66>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a29      	ldr	r2, [pc, #164]	@ (800575c <ADC_Enable+0x108>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <ADC_Enable+0x6a>
 80056ba:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <ADC_Enable+0x10c>)
 80056bc:	e000      	b.n	80056c0 <ADC_Enable+0x6c>
 80056be:	4b29      	ldr	r3, [pc, #164]	@ (8005764 <ADC_Enable+0x110>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe ff5d 	bl	8004580 <LL_ADC_GetMultimode>
 80056c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a23      	ldr	r2, [pc, #140]	@ (800575c <ADC_Enable+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d002      	beq.n	80056d8 <ADC_Enable+0x84>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	e000      	b.n	80056da <ADC_Enable+0x86>
 80056d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005758 <ADC_Enable+0x104>)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02c      	beq.n	800573c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d130      	bne.n	800574a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056e8:	e028      	b.n	800573c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe ffd8 	bl	80046a4 <LL_ADC_IsEnabled>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe ffa8 	bl	8004654 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005704:	f7fe fd84 	bl	8004210 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d914      	bls.n	800573c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d00d      	beq.n	800573c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005724:	f043 0210 	orr.w	r2, r3, #16
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e007      	b.n	800574c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d1cf      	bne.n	80056ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	8000003f 	.word	0x8000003f
 8005758:	40022000 	.word	0x40022000
 800575c:	40022100 	.word	0x40022100
 8005760:	40022300 	.word	0x40022300
 8005764:	58026300 	.word	0x58026300

08005768 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe ffa8 	bl	80046ca <LL_ADC_IsDisableOngoing>
 800577a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe ff8f 	bl	80046a4 <LL_ADC_IsEnabled>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d047      	beq.n	800581c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d144      	bne.n	800581c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 030d 	and.w	r3, r3, #13
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10c      	bne.n	80057ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe ff69 	bl	800467c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2203      	movs	r2, #3
 80057b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057b2:	f7fe fd2d 	bl	8004210 <HAL_GetTick>
 80057b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057b8:	e029      	b.n	800580e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e023      	b.n	800581e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057d6:	f7fe fd1b 	bl	8004210 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d914      	bls.n	800580e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f043 0210 	orr.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005802:	f043 0201 	orr.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e007      	b.n	800581e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1dc      	bne.n	80057d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a7a      	ldr	r2, [pc, #488]	@ (8005a20 <ADC_ConfigureBoostMode+0x1f8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <ADC_ConfigureBoostMode+0x1c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a79      	ldr	r2, [pc, #484]	@ (8005a24 <ADC_ConfigureBoostMode+0x1fc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d109      	bne.n	8005858 <ADC_ConfigureBoostMode+0x30>
 8005844:	4b78      	ldr	r3, [pc, #480]	@ (8005a28 <ADC_ConfigureBoostMode+0x200>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e008      	b.n	800586a <ADC_ConfigureBoostMode+0x42>
 8005858:	4b74      	ldr	r3, [pc, #464]	@ (8005a2c <ADC_ConfigureBoostMode+0x204>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01c      	beq.n	80058a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800586e:	f002 fc25 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 8005872:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800587c:	d010      	beq.n	80058a0 <ADC_ConfigureBoostMode+0x78>
 800587e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005882:	d873      	bhi.n	800596c <ADC_ConfigureBoostMode+0x144>
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005888:	d002      	beq.n	8005890 <ADC_ConfigureBoostMode+0x68>
 800588a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800588e:	d16d      	bne.n	800596c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	60fb      	str	r3, [r7, #12]
        break;
 800589e:	e068      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	60fb      	str	r3, [r7, #12]
        break;
 80058a6:	e064      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80058a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	f003 fe54 	bl	800955c <HAL_RCCEx_GetPeriphCLKFreq>
 80058b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80058be:	d051      	beq.n	8005964 <ADC_ConfigureBoostMode+0x13c>
 80058c0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80058c4:	d854      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 80058c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80058ca:	d047      	beq.n	800595c <ADC_ConfigureBoostMode+0x134>
 80058cc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80058d0:	d84e      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 80058d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80058d6:	d03d      	beq.n	8005954 <ADC_ConfigureBoostMode+0x12c>
 80058d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80058dc:	d848      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 80058de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058e2:	d033      	beq.n	800594c <ADC_ConfigureBoostMode+0x124>
 80058e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058e8:	d842      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 80058ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80058ee:	d029      	beq.n	8005944 <ADC_ConfigureBoostMode+0x11c>
 80058f0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80058f4:	d83c      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 80058f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80058fa:	d01a      	beq.n	8005932 <ADC_ConfigureBoostMode+0x10a>
 80058fc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005900:	d836      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 8005902:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005906:	d014      	beq.n	8005932 <ADC_ConfigureBoostMode+0x10a>
 8005908:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800590c:	d830      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005912:	d00e      	beq.n	8005932 <ADC_ConfigureBoostMode+0x10a>
 8005914:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005918:	d82a      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 800591a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800591e:	d008      	beq.n	8005932 <ADC_ConfigureBoostMode+0x10a>
 8005920:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005924:	d824      	bhi.n	8005970 <ADC_ConfigureBoostMode+0x148>
 8005926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800592a:	d002      	beq.n	8005932 <ADC_ConfigureBoostMode+0x10a>
 800592c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005930:	d11e      	bne.n	8005970 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	0c9b      	lsrs	r3, r3, #18
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	60fb      	str	r3, [r7, #12]
        break;
 8005942:	e016      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	60fb      	str	r3, [r7, #12]
        break;
 800594a:	e012      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	60fb      	str	r3, [r7, #12]
        break;
 8005952:	e00e      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	60fb      	str	r3, [r7, #12]
        break;
 800595a:	e00a      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	09db      	lsrs	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]
        break;
 8005962:	e006      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	60fb      	str	r3, [r7, #12]
        break;
 800596a:	e002      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
        break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005970:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005972:	f7fe fc7d 	bl	8004270 <HAL_GetREVID>
 8005976:	4603      	mov	r3, r0
 8005978:	f241 0203 	movw	r2, #4099	@ 0x1003
 800597c:	4293      	cmp	r3, r2
 800597e:	d815      	bhi.n	80059ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a2b      	ldr	r2, [pc, #172]	@ (8005a30 <ADC_ConfigureBoostMode+0x208>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d908      	bls.n	800599a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005996:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005998:	e03e      	b.n	8005a18 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059a8:	609a      	str	r2, [r3, #8]
}
 80059aa:	e035      	b.n	8005a18 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a34 <ADC_ConfigureBoostMode+0x20c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d808      	bhi.n	80059cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	e025      	b.n	8005a18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <ADC_ConfigureBoostMode+0x210>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d80a      	bhi.n	80059ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	e016      	b.n	8005a18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <ADC_ConfigureBoostMode+0x214>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d80a      	bhi.n	8005a08 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a04:	609a      	str	r2, [r3, #8]
}
 8005a06:	e007      	b.n	8005a18 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a16:	609a      	str	r2, [r3, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40022000 	.word	0x40022000
 8005a24:	40022100 	.word	0x40022100
 8005a28:	40022300 	.word	0x40022300
 8005a2c:	58026300 	.word	0x58026300
 8005a30:	01312d00 	.word	0x01312d00
 8005a34:	005f5e10 	.word	0x005f5e10
 8005a38:	00bebc20 	.word	0x00bebc20
 8005a3c:	017d7840 	.word	0x017d7840

08005a40 <LL_ADC_StartCalibration>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <LL_ADC_StartCalibration+0x38>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005a60:	430a      	orrs	r2, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	3ffeffc0 	.word	0x3ffeffc0

08005a7c <LL_ADC_IsCalibrationOnGoing>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a90:	d101      	bne.n	8005a96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_ADCEx_Calibration_Start+0x1e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e04c      	b.n	8005b5c <HAL_ADCEx_Calibration_Start+0xb8>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fe4c 	bl	8005768 <ADC_Disable>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d135      	bne.n	8005b46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ade:	4b21      	ldr	r3, [pc, #132]	@ (8005b64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	f043 0202 	orr.w	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffa4 	bl	8005a40 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005af8:	e014      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3301      	adds	r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d30d      	bcc.n	8005b24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	f023 0312 	bic.w	r3, r3, #18
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e01b      	b.n	8005b5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ffa7 	bl	8005a7c <LL_ADC_IsCalibrationOnGoing>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e2      	bne.n	8005afa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b44:	e005      	b.n	8005b52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f043 0210 	orr.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	ffffeefd 	.word	0xffffeefd
 8005b68:	25c3f800 	.word	0x25c3f800

08005b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <__NVIC_SetPriorityGrouping+0x40>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b94:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b9a:	4a04      	ldr	r2, [pc, #16]	@ (8005bac <__NVIC_SetPriorityGrouping+0x40>)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	60d3      	str	r3, [r2, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	e000ed00 	.word	0xe000ed00
 8005bb0:	05fa0000 	.word	0x05fa0000

08005bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bb8:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <__NVIC_GetPriorityGrouping+0x18>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0307 	and.w	r3, r3, #7
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	db0a      	blt.n	8005bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	490c      	ldr	r1, [pc, #48]	@ (8005c1c <__NVIC_SetPriority+0x4c>)
 8005bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bee:	0112      	lsls	r2, r2, #4
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bf8:	e00a      	b.n	8005c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4908      	ldr	r1, [pc, #32]	@ (8005c20 <__NVIC_SetPriority+0x50>)
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	3b04      	subs	r3, #4
 8005c08:	0112      	lsls	r2, r2, #4
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	761a      	strb	r2, [r3, #24]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	e000e100 	.word	0xe000e100
 8005c20:	e000ed00 	.word	0xe000ed00

08005c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	@ 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f1c3 0307 	rsb	r3, r3, #7
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	bf28      	it	cs
 8005c42:	2304      	movcs	r3, #4
 8005c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	2b06      	cmp	r3, #6
 8005c4c:	d902      	bls.n	8005c54 <NVIC_EncodePriority+0x30>
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3b03      	subs	r3, #3
 8005c52:	e000      	b.n	8005c56 <NVIC_EncodePriority+0x32>
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43da      	mvns	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	401a      	ands	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	fa01 f303 	lsl.w	r3, r1, r3
 8005c76:	43d9      	mvns	r1, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c7c:	4313      	orrs	r3, r2
         );
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3724      	adds	r7, #36	@ 0x24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c9c:	d301      	bcc.n	8005ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e00f      	b.n	8005cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8005ccc <SysTick_Config+0x40>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005caa:	210f      	movs	r1, #15
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	f7ff ff8e 	bl	8005bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <SysTick_Config+0x40>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cba:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <SysTick_Config+0x40>)
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000e010 	.word	0xe000e010

08005cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff ff47 	bl	8005b6c <__NVIC_SetPriorityGrouping>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4603      	mov	r3, r0
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cf4:	f7ff ff5e 	bl	8005bb4 <__NVIC_GetPriorityGrouping>
 8005cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	6978      	ldr	r0, [r7, #20]
 8005d00:	f7ff ff90 	bl	8005c24 <NVIC_EncodePriority>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ff5f 	bl	8005bd0 <__NVIC_SetPriority>
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff ffb2 	bl	8005c8c <SysTick_Config>
 8005d28:	4603      	mov	r3, r0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005d38:	f3bf 8f5f 	dmb	sy
}
 8005d3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <HAL_MPU_Disable+0x28>)
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	4a06      	ldr	r2, [pc, #24]	@ (8005d5c <HAL_MPU_Disable+0x28>)
 8005d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d48:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005d4a:	4b05      	ldr	r3, [pc, #20]	@ (8005d60 <HAL_MPU_Disable+0x2c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
}
 8005d50:	bf00      	nop
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	e000ed00 	.word	0xe000ed00
 8005d60:	e000ed90 	.word	0xe000ed90

08005d64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d9c <HAL_MPU_Enable+0x38>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <HAL_MPU_Enable+0x3c>)
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <HAL_MPU_Enable+0x3c>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d80:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005d82:	f3bf 8f4f 	dsb	sy
}
 8005d86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d88:	f3bf 8f6f 	isb	sy
}
 8005d8c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	e000ed90 	.word	0xe000ed90
 8005da0:	e000ed00 	.word	0xe000ed00

08005da4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	785a      	ldrb	r2, [r3, #1]
 8005db0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <HAL_MPU_ConfigRegion+0x7c>)
 8005db2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005db4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <HAL_MPU_ConfigRegion+0x7c>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <HAL_MPU_ConfigRegion+0x7c>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005dc0:	4a17      	ldr	r2, [pc, #92]	@ (8005e20 <HAL_MPU_ConfigRegion+0x7c>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7b1b      	ldrb	r3, [r3, #12]
 8005dcc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7adb      	ldrb	r3, [r3, #11]
 8005dd2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7a9b      	ldrb	r3, [r3, #10]
 8005dda:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7b5b      	ldrb	r3, [r3, #13]
 8005de2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7b9b      	ldrb	r3, [r3, #14]
 8005dea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005dec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7bdb      	ldrb	r3, [r3, #15]
 8005df2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005df4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7a5b      	ldrb	r3, [r3, #9]
 8005dfa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005dfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7a1b      	ldrb	r3, [r3, #8]
 8005e02:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e04:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e0c:	4a04      	ldr	r2, [pc, #16]	@ (8005e20 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e0e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e10:	6113      	str	r3, [r2, #16]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000ed90 	.word	0xe000ed90

08005e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	@ 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e32:	4b89      	ldr	r3, [pc, #548]	@ (8006058 <HAL_GPIO_Init+0x234>)
 8005e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e36:	e194      	b.n	8006162 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	4013      	ands	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8186 	beq.w	800615c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d005      	beq.n	8005e68 <HAL_GPIO_Init+0x44>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d130      	bne.n	8005eca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2203      	movs	r2, #3
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 0201 	and.w	r2, r3, #1
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d017      	beq.n	8005f06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d123      	bne.n	8005f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	08da      	lsrs	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3208      	adds	r2, #8
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	220f      	movs	r2, #15
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	08da      	lsrs	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3208      	adds	r2, #8
 8005f54:	69b9      	ldr	r1, [r7, #24]
 8005f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	2203      	movs	r2, #3
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f003 0203 	and.w	r2, r3, #3
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80e0 	beq.w	800615c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800605c <HAL_GPIO_Init+0x238>)
 8005f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800605c <HAL_GPIO_Init+0x238>)
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005fac:	4b2b      	ldr	r3, [pc, #172]	@ (800605c <HAL_GPIO_Init+0x238>)
 8005fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fba:	4a29      	ldr	r2, [pc, #164]	@ (8006060 <HAL_GPIO_Init+0x23c>)
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	220f      	movs	r2, #15
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <HAL_GPIO_Init+0x240>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d052      	beq.n	800608c <HAL_GPIO_Init+0x268>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8006068 <HAL_GPIO_Init+0x244>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_GPIO_Init+0x22e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800606c <HAL_GPIO_Init+0x248>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <HAL_GPIO_Init+0x22a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <HAL_GPIO_Init+0x24c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d025      	beq.n	800604a <HAL_GPIO_Init+0x226>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <HAL_GPIO_Init+0x250>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01f      	beq.n	8006046 <HAL_GPIO_Init+0x222>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <HAL_GPIO_Init+0x254>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d019      	beq.n	8006042 <HAL_GPIO_Init+0x21e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1a      	ldr	r2, [pc, #104]	@ (800607c <HAL_GPIO_Init+0x258>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_GPIO_Init+0x21a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a19      	ldr	r2, [pc, #100]	@ (8006080 <HAL_GPIO_Init+0x25c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00d      	beq.n	800603a <HAL_GPIO_Init+0x216>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a18      	ldr	r2, [pc, #96]	@ (8006084 <HAL_GPIO_Init+0x260>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <HAL_GPIO_Init+0x212>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a17      	ldr	r2, [pc, #92]	@ (8006088 <HAL_GPIO_Init+0x264>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <HAL_GPIO_Init+0x20e>
 800602e:	2309      	movs	r3, #9
 8006030:	e02d      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006032:	230a      	movs	r3, #10
 8006034:	e02b      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006036:	2308      	movs	r3, #8
 8006038:	e029      	b.n	800608e <HAL_GPIO_Init+0x26a>
 800603a:	2307      	movs	r3, #7
 800603c:	e027      	b.n	800608e <HAL_GPIO_Init+0x26a>
 800603e:	2306      	movs	r3, #6
 8006040:	e025      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006042:	2305      	movs	r3, #5
 8006044:	e023      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006046:	2304      	movs	r3, #4
 8006048:	e021      	b.n	800608e <HAL_GPIO_Init+0x26a>
 800604a:	2303      	movs	r3, #3
 800604c:	e01f      	b.n	800608e <HAL_GPIO_Init+0x26a>
 800604e:	2302      	movs	r3, #2
 8006050:	e01d      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006052:	2301      	movs	r3, #1
 8006054:	e01b      	b.n	800608e <HAL_GPIO_Init+0x26a>
 8006056:	bf00      	nop
 8006058:	58000080 	.word	0x58000080
 800605c:	58024400 	.word	0x58024400
 8006060:	58000400 	.word	0x58000400
 8006064:	58020000 	.word	0x58020000
 8006068:	58020400 	.word	0x58020400
 800606c:	58020800 	.word	0x58020800
 8006070:	58020c00 	.word	0x58020c00
 8006074:	58021000 	.word	0x58021000
 8006078:	58021400 	.word	0x58021400
 800607c:	58021800 	.word	0x58021800
 8006080:	58021c00 	.word	0x58021c00
 8006084:	58022000 	.word	0x58022000
 8006088:	58022400 	.word	0x58022400
 800608c:	2300      	movs	r3, #0
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	f002 0203 	and.w	r2, r2, #3
 8006094:	0092      	lsls	r2, r2, #2
 8006096:	4093      	lsls	r3, r2
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800609e:	4938      	ldr	r1, [pc, #224]	@ (8006180 <HAL_GPIO_Init+0x35c>)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	3302      	adds	r3, #2
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	43db      	mvns	r3, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	3301      	adds	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f ae63 	bne.w	8005e38 <HAL_GPIO_Init+0x14>
  }
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	3724      	adds	r7, #36	@ 0x24
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	58000400 	.word	0x58000400

08006184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	4013      	ands	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	e001      	b.n	80061a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	460b      	mov	r3, r1
 80061be:	807b      	strh	r3, [r7, #2]
 80061c0:	4613      	mov	r3, r2
 80061c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061c4:	787b      	ldrb	r3, [r7, #1]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ca:	887a      	ldrh	r2, [r7, #2]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061d0:	e003      	b.n	80061da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061d2:	887b      	ldrh	r3, [r7, #2]
 80061d4:	041a      	lsls	r2, r3, #16
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	619a      	str	r2, [r3, #24]
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e08b      	b.n	8006312 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb f8c2 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	@ 0x24
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d107      	bne.n	8006262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	e006      	b.n	8006270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800626e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d108      	bne.n	800628a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	e007      	b.n	800629a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b1d      	ldr	r3, [pc, #116]	@ (800631c <HAL_I2C_Init+0x134>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69d9      	ldr	r1, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	02008000 	.word	0x02008000

08006320 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	460b      	mov	r3, r1
 800632e:	817b      	strh	r3, [r7, #10]
 8006330:	4613      	mov	r3, r2
 8006332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 80db 	bne.w	80064f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_I2C_Master_Receive+0x30>
 800634c:	2302      	movs	r3, #2
 800634e:	e0d4      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006358:	f7fd ff5a 	bl	8004210 <HAL_GetTick>
 800635c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2319      	movs	r3, #25
 8006364:	2201      	movs	r2, #1
 8006366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fbc8 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0bf      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2222      	movs	r2, #34	@ 0x22
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2210      	movs	r2, #16
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	893a      	ldrh	r2, [r7, #8]
 800639a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2bff      	cmp	r3, #255	@ 0xff
 80063aa:	d90e      	bls.n	80063ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	8979      	ldrh	r1, [r7, #10]
 80063ba:	4b52      	ldr	r3, [pc, #328]	@ (8006504 <HAL_I2C_Master_Receive+0x1e4>)
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fdec 	bl	8006fa0 <I2C_TransferConfig>
 80063c8:	e06d      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	8979      	ldrh	r1, [r7, #10]
 80063dc:	4b49      	ldr	r3, [pc, #292]	@ (8006504 <HAL_I2C_Master_Receive+0x1e4>)
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fddb 	bl	8006fa0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063ea:	e05c      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	6a39      	ldr	r1, [r7, #32]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fc69 	bl	8006cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e07c      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d034      	beq.n	80064a6 <HAL_I2C_Master_Receive+0x186>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d130      	bne.n	80064a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	@ 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fb56 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04d      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	2bff      	cmp	r3, #255	@ 0xff
 8006466:	d90e      	bls.n	8006486 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	22ff      	movs	r2, #255	@ 0xff
 800646c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006472:	b2da      	uxtb	r2, r3
 8006474:	8979      	ldrh	r1, [r7, #10]
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fd8e 	bl	8006fa0 <I2C_TransferConfig>
 8006484:	e00f      	b.n	80064a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	2300      	movs	r3, #0
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fd7d 	bl	8006fa0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d19d      	bne.n	80063ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	6a39      	ldr	r1, [r7, #32]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fbc3 	bl	8006c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01a      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2220      	movs	r2, #32
 80064ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <HAL_I2C_Master_Receive+0x1e8>)
 80064d8:	400b      	ands	r3, r1
 80064da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	80002400 	.word	0x80002400
 8006508:	fe00e800 	.word	0xfe00e800

0800650c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b20      	cmp	r3, #32
 8006530:	f040 80f9 	bne.w	8006726 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_I2C_Mem_Write+0x34>
 800653a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006546:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0ed      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_I2C_Mem_Write+0x4e>
 8006556:	2302      	movs	r3, #2
 8006558:	e0e6      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006562:	f7fd fe55 	bl	8004210 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	2319      	movs	r3, #25
 800656e:	2201      	movs	r2, #1
 8006570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fac3 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0d1      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2221      	movs	r2, #33	@ 0x21
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2240      	movs	r2, #64	@ 0x40
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80065a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ac:	88f8      	ldrh	r0, [r7, #6]
 80065ae:	893a      	ldrh	r2, [r7, #8]
 80065b0:	8979      	ldrh	r1, [r7, #10]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4603      	mov	r3, r0
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f9d3 	bl	8006968 <I2C_RequestMemoryWrite>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0a9      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2bff      	cmp	r3, #255	@ 0xff
 80065dc:	d90e      	bls.n	80065fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	22ff      	movs	r2, #255	@ 0xff
 80065e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fcd3 	bl	8006fa0 <I2C_TransferConfig>
 80065fa:	e00f      	b.n	800661c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660a:	b2da      	uxtb	r2, r3
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fcc2 	bl	8006fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fac6 	bl	8006bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e07b      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d034      	beq.n	80066d4 <HAL_I2C_Mem_Write+0x1c8>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d130      	bne.n	80066d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	@ 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fa3f 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e04d      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2bff      	cmp	r3, #255	@ 0xff
 8006694:	d90e      	bls.n	80066b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	8979      	ldrh	r1, [r7, #10]
 80066a4:	2300      	movs	r3, #0
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fc77 	bl	8006fa0 <I2C_TransferConfig>
 80066b2:	e00f      	b.n	80066d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	8979      	ldrh	r1, [r7, #10]
 80066c6:	2300      	movs	r3, #0
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fc66 	bl	8006fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d19e      	bne.n	800661c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 faac 	bl	8006c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e01a      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2220      	movs	r2, #32
 80066f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6859      	ldr	r1, [r3, #4]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b0a      	ldr	r3, [pc, #40]	@ (8006730 <HAL_I2C_Mem_Write+0x224>)
 8006706:	400b      	ands	r3, r1
 8006708:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	fe00e800 	.word	0xfe00e800

08006734 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	817b      	strh	r3, [r7, #10]
 8006746:	460b      	mov	r3, r1
 8006748:	813b      	strh	r3, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b20      	cmp	r3, #32
 8006758:	f040 80fd 	bne.w	8006956 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_I2C_Mem_Read+0x34>
 8006762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0f1      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_I2C_Mem_Read+0x4e>
 800677e:	2302      	movs	r3, #2
 8006780:	e0ea      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800678a:	f7fd fd41 	bl	8004210 <HAL_GetTick>
 800678e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2319      	movs	r3, #25
 8006796:	2201      	movs	r2, #1
 8006798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f9af 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0d5      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2222      	movs	r2, #34	@ 0x22
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2240      	movs	r2, #64	@ 0x40
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067d4:	88f8      	ldrh	r0, [r7, #6]
 80067d6:	893a      	ldrh	r2, [r7, #8]
 80067d8:	8979      	ldrh	r1, [r7, #10]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4603      	mov	r3, r0
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f913 	bl	8006a10 <I2C_RequestMemoryRead>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0ad      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	2bff      	cmp	r3, #255	@ 0xff
 8006804:	d90e      	bls.n	8006824 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	22ff      	movs	r2, #255	@ 0xff
 800680a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006810:	b2da      	uxtb	r2, r3
 8006812:	8979      	ldrh	r1, [r7, #10]
 8006814:	4b52      	ldr	r3, [pc, #328]	@ (8006960 <HAL_I2C_Mem_Read+0x22c>)
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fbbf 	bl	8006fa0 <I2C_TransferConfig>
 8006822:	e00f      	b.n	8006844 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006832:	b2da      	uxtb	r2, r3
 8006834:	8979      	ldrh	r1, [r7, #10]
 8006836:	4b4a      	ldr	r3, [pc, #296]	@ (8006960 <HAL_I2C_Mem_Read+0x22c>)
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fbae 	bl	8006fa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	2200      	movs	r2, #0
 800684c:	2104      	movs	r1, #4
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f956 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e07c      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d034      	beq.n	8006904 <HAL_I2C_Mem_Read+0x1d0>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d130      	bne.n	8006904 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a8:	2200      	movs	r2, #0
 80068aa:	2180      	movs	r1, #128	@ 0x80
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f927 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e04d      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2bff      	cmp	r3, #255	@ 0xff
 80068c4:	d90e      	bls.n	80068e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	22ff      	movs	r2, #255	@ 0xff
 80068ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fb5f 	bl	8006fa0 <I2C_TransferConfig>
 80068e2:	e00f      	b.n	8006904 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	8979      	ldrh	r1, [r7, #10]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fb4e 	bl	8006fa0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d19a      	bne.n	8006844 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f994 	bl	8006c40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e01a      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2220      	movs	r2, #32
 8006928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <HAL_I2C_Mem_Read+0x230>)
 8006936:	400b      	ands	r3, r1
 8006938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	80002400 	.word	0x80002400
 8006964:	fe00e800 	.word	0xfe00e800

08006968 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4603      	mov	r3, r0
 8006978:	817b      	strh	r3, [r7, #10]
 800697a:	460b      	mov	r3, r1
 800697c:	813b      	strh	r3, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	8979      	ldrh	r1, [r7, #10]
 8006988:	4b20      	ldr	r3, [pc, #128]	@ (8006a0c <I2C_RequestMemoryWrite+0xa4>)
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fb05 	bl	8006fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f909 	bl	8006bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e02c      	b.n	8006a04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d105      	bne.n	80069bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069b0:	893b      	ldrh	r3, [r7, #8]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80069ba:	e015      	b.n	80069e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069bc:	893b      	ldrh	r3, [r7, #8]
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f8ef 	bl	8006bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e012      	b.n	8006a04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069de:	893b      	ldrh	r3, [r7, #8]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2180      	movs	r1, #128	@ 0x80
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f884 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	80002000 	.word	0x80002000

08006a10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	817b      	strh	r3, [r7, #10]
 8006a22:	460b      	mov	r3, r1
 8006a24:	813b      	strh	r3, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	8979      	ldrh	r1, [r7, #10]
 8006a30:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <I2C_RequestMemoryRead+0xa4>)
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fab2 	bl	8006fa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	69b9      	ldr	r1, [r7, #24]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f8b6 	bl	8006bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e02c      	b.n	8006aaa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d105      	bne.n	8006a62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a60:	e015      	b.n	8006a8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a62:	893b      	ldrh	r3, [r7, #8]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	69b9      	ldr	r1, [r7, #24]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f89c 	bl	8006bb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e012      	b.n	8006aaa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a84:	893b      	ldrh	r3, [r7, #8]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2140      	movs	r1, #64	@ 0x40
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f831 	bl	8006b00 <I2C_WaitOnFlagUntilTimeout>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	80002000 	.word	0x80002000

08006ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d103      	bne.n	8006ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d007      	beq.n	8006af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	619a      	str	r2, [r3, #24]
  }
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b10:	e03b      	b.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f962 	bl	8006de0 <I2C_IsErrorOccurred>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e041      	b.n	8006baa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d02d      	beq.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2e:	f7fd fb6f 	bl	8004210 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d122      	bne.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d113      	bne.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b66:	f043 0220 	orr.w	r2, r3, #32
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e00f      	b.n	8006baa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d0b4      	beq.n	8006b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bbe:	e033      	b.n	8006c28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f90b 	bl	8006de0 <I2C_IsErrorOccurred>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e031      	b.n	8006c38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d025      	beq.n	8006c28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fd fb18 	bl	8004210 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11a      	bne.n	8006c28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d013      	beq.n	8006c28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c04:	f043 0220 	orr.w	r2, r3, #32
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e007      	b.n	8006c38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d1c4      	bne.n	8006bc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c4c:	e02f      	b.n	8006cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f8c4 	bl	8006de0 <I2C_IsErrorOccurred>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e02d      	b.n	8006cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fd fad5 	bl	8004210 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11a      	bne.n	8006cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d013      	beq.n	8006cae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e007      	b.n	8006cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d1c8      	bne.n	8006c4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006cd8:	e071      	b.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f87e 	bl	8006de0 <I2C_IsErrorOccurred>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d13b      	bne.n	8006d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d138      	bne.n	8006d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d105      	bne.n	8006d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d121      	bne.n	8006d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2204      	movs	r2, #4
 8006d36:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6859      	ldr	r1, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b24      	ldr	r3, [pc, #144]	@ (8006ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006d4c:	400b      	ands	r3, r1
 8006d4e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
 8006d6c:	e002      	b.n	8006d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006d74:	f7fd fa4c 	bl	8004210 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d116      	bne.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d00f      	beq.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d002      	beq.n	8006dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d083      	beq.n	8006cda <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	fe00e800 	.word	0xfe00e800

08006de0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	@ 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d068      	beq.n	8006ede <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2210      	movs	r2, #16
 8006e12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e14:	e049      	b.n	8006eaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d045      	beq.n	8006eaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e1e:	f7fd f9f7 	bl	8004210 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d302      	bcc.n	8006e34 <I2C_IsErrorOccurred+0x54>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d13a      	bne.n	8006eaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e56:	d121      	bne.n	8006e9c <I2C_IsErrorOccurred+0xbc>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e5e:	d01d      	beq.n	8006e9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d01a      	beq.n	8006e9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e76:	f7fd f9cb 	bl	8004210 <HAL_GetTick>
 8006e7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e7c:	e00e      	b.n	8006e9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e7e:	f7fd f9c7 	bl	8004210 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b19      	cmp	r3, #25
 8006e8a:	d907      	bls.n	8006e9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	f043 0320 	orr.w	r3, r3, #32
 8006e92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006e9a:	e006      	b.n	8006eaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d1e9      	bne.n	8006e7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d003      	beq.n	8006ec0 <I2C_IsErrorOccurred+0xe0>
 8006eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0aa      	beq.n	8006e16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f043 0304 	orr.w	r3, r3, #4
 8006ed6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f043 0302 	orr.w	r3, r3, #2
 8006f3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01c      	beq.n	8006f8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7ff fdaf 	bl	8006ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <I2C_IsErrorOccurred+0x1bc>)
 8006f66:	400b      	ands	r3, r1
 8006f68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	431a      	orrs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3728      	adds	r7, #40	@ 0x28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	fe00e800 	.word	0xfe00e800

08006fa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	817b      	strh	r3, [r7, #10]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fb2:	897b      	ldrh	r3, [r7, #10]
 8006fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fb8:	7a7b      	ldrb	r3, [r7, #9]
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fc0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fce:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	0d5b      	lsrs	r3, r3, #21
 8006fda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006fde:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <I2C_TransferConfig+0x60>)
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	ea02 0103 	and.w	r1, r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	03ff63ff 	.word	0x03ff63ff

08007004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b20      	cmp	r3, #32
 8007018:	d138      	bne.n	800708c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007024:	2302      	movs	r3, #2
 8007026:	e032      	b.n	800708e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	@ 0x24
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800708c:	2302      	movs	r3, #2
  }
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d139      	bne.n	8007124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e033      	b.n	8007126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2224      	movs	r2, #36	@ 0x24
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0201 	bic.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	e000      	b.n	8007126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007124:	2302      	movs	r3, #2
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800713c:	4b19      	ldr	r3, [pc, #100]	@ (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b04      	cmp	r3, #4
 8007146:	d00a      	beq.n	800715e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007148:	4b16      	ldr	r3, [pc, #88]	@ (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d001      	beq.n	800715a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e01f      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	e01d      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800715e:	4b11      	ldr	r3, [pc, #68]	@ (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f023 0207 	bic.w	r2, r3, #7
 8007166:	490f      	ldr	r1, [pc, #60]	@ (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4313      	orrs	r3, r2
 800716c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800716e:	f7fd f84f 	bl	8004210 <HAL_GetTick>
 8007172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007174:	e009      	b.n	800718a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007176:	f7fd f84b 	bl	8004210 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007184:	d901      	bls.n	800718a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e007      	b.n	800719a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800718a:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <HAL_PWREx_ConfigSupply+0x70>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007196:	d1ee      	bne.n	8007176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	58024800 	.word	0x58024800

080071a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	@ 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f000 bc48 	b.w	8007a4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8088 	beq.w	80072da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ca:	4b99      	ldr	r3, [pc, #612]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071d4:	4b96      	ldr	r3, [pc, #600]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d007      	beq.n	80071f0 <HAL_RCC_OscConfig+0x48>
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	2b18      	cmp	r3, #24
 80071e4:	d111      	bne.n	800720a <HAL_RCC_OscConfig+0x62>
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d10c      	bne.n	800720a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d06d      	beq.n	80072d8 <HAL_RCC_OscConfig+0x130>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d169      	bne.n	80072d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f000 bc21 	b.w	8007a4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007212:	d106      	bne.n	8007222 <HAL_RCC_OscConfig+0x7a>
 8007214:	4b86      	ldr	r3, [pc, #536]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a85      	ldr	r2, [pc, #532]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800721a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e02e      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x9c>
 800722a:	4b81      	ldr	r3, [pc, #516]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a80      	ldr	r2, [pc, #512]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b7e      	ldr	r3, [pc, #504]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7d      	ldr	r2, [pc, #500]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800723c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e01d      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0xc0>
 800724e:	4b78      	ldr	r3, [pc, #480]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a77      	ldr	r2, [pc, #476]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b75      	ldr	r3, [pc, #468]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a74      	ldr	r2, [pc, #464]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0xd8>
 8007268:	4b71      	ldr	r3, [pc, #452]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a70      	ldr	r2, [pc, #448]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800726e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b6e      	ldr	r3, [pc, #440]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6d      	ldr	r2, [pc, #436]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800727a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800727e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fc ffc2 	bl	8004210 <HAL_GetTick>
 800728c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007290:	f7fc ffbe 	bl	8004210 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b64      	cmp	r3, #100	@ 0x64
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e3d4      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072a2:	4b63      	ldr	r3, [pc, #396]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0xe8>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fc ffae 	bl	8004210 <HAL_GetTick>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fc ffaa 	bl	8004210 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	@ 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e3c0      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072ca:	4b59      	ldr	r3, [pc, #356]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0x110>
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80ca 	beq.w	800747c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e8:	4b51      	ldr	r3, [pc, #324]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_RCC_OscConfig+0x166>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2b18      	cmp	r3, #24
 8007302:	d156      	bne.n	80073b2 <HAL_RCC_OscConfig+0x20a>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d151      	bne.n	80073b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800730e:	4b48      	ldr	r3, [pc, #288]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_RCC_OscConfig+0x17e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e392      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007326:	4b42      	ldr	r3, [pc, #264]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 0219 	bic.w	r2, r3, #25
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	493f      	ldr	r1, [pc, #252]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007334:	4313      	orrs	r3, r2
 8007336:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fc ff6a 	bl	8004210 <HAL_GetTick>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007340:	f7fc ff66 	bl	8004210 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e37c      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007352:	4b37      	ldr	r3, [pc, #220]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0f0      	beq.n	8007340 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735e:	f7fc ff87 	bl	8004270 <HAL_GetREVID>
 8007362:	4603      	mov	r3, r0
 8007364:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007368:	4293      	cmp	r3, r2
 800736a:	d817      	bhi.n	800739c <HAL_RCC_OscConfig+0x1f4>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d108      	bne.n	8007386 <HAL_RCC_OscConfig+0x1de>
 8007374:	4b2e      	ldr	r3, [pc, #184]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800737c:	4a2c      	ldr	r2, [pc, #176]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800737e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007382:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007384:	e07a      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4b2a      	ldr	r3, [pc, #168]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	4926      	ldr	r1, [pc, #152]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007396:	4313      	orrs	r3, r2
 8007398:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800739a:	e06f      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739c:	4b24      	ldr	r3, [pc, #144]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	061b      	lsls	r3, r3, #24
 80073aa:	4921      	ldr	r1, [pc, #132]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073b0:	e064      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d047      	beq.n	800744a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 0219 	bic.w	r2, r3, #25
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	491a      	ldr	r1, [pc, #104]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fc ff20 	bl	8004210 <HAL_GetTick>
 80073d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d4:	f7fc ff1c 	bl	8004210 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e332      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073e6:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f0      	beq.n	80073d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	f7fc ff3d 	bl	8004270 <HAL_GetREVID>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d819      	bhi.n	8007434 <HAL_RCC_OscConfig+0x28c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b40      	cmp	r3, #64	@ 0x40
 8007406:	d108      	bne.n	800741a <HAL_RCC_OscConfig+0x272>
 8007408:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007410:	4a07      	ldr	r2, [pc, #28]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007416:	6053      	str	r3, [r2, #4]
 8007418:	e030      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
 800741a:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	031b      	lsls	r3, r3, #12
 8007428:	4901      	ldr	r1, [pc, #4]	@ (8007430 <HAL_RCC_OscConfig+0x288>)
 800742a:	4313      	orrs	r3, r2
 800742c:	604b      	str	r3, [r1, #4]
 800742e:	e025      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
 8007430:	58024400 	.word	0x58024400
 8007434:	4b9a      	ldr	r3, [pc, #616]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	061b      	lsls	r3, r3, #24
 8007442:	4997      	ldr	r1, [pc, #604]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007444:	4313      	orrs	r3, r2
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	e018      	b.n	800747c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800744a:	4b95      	ldr	r3, [pc, #596]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a94      	ldr	r2, [pc, #592]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007456:	f7fc fedb 	bl	8004210 <HAL_GetTick>
 800745a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745e:	f7fc fed7 	bl	8004210 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e2ed      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007470:	4b8b      	ldr	r3, [pc, #556]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f0      	bne.n	800745e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80a9 	beq.w	80075dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800748a:	4b85      	ldr	r3, [pc, #532]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007492:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007494:	4b82      	ldr	r3, [pc, #520]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d007      	beq.n	80074b0 <HAL_RCC_OscConfig+0x308>
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b18      	cmp	r3, #24
 80074a4:	d13a      	bne.n	800751c <HAL_RCC_OscConfig+0x374>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d135      	bne.n	800751c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074b0:	4b7b      	ldr	r3, [pc, #492]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <HAL_RCC_OscConfig+0x320>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	2b80      	cmp	r3, #128	@ 0x80
 80074c2:	d001      	beq.n	80074c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e2c1      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074c8:	f7fc fed2 	bl	8004270 <HAL_GetREVID>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d817      	bhi.n	8007506 <HAL_RCC_OscConfig+0x35e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d108      	bne.n	80074f0 <HAL_RCC_OscConfig+0x348>
 80074de:	4b70      	ldr	r3, [pc, #448]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80074e6:	4a6e      	ldr	r2, [pc, #440]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80074e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ee:	e075      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074f0:	4b6b      	ldr	r3, [pc, #428]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	069b      	lsls	r3, r3, #26
 80074fe:	4968      	ldr	r1, [pc, #416]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007504:	e06a      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007506:	4b66      	ldr	r3, [pc, #408]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	4962      	ldr	r1, [pc, #392]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007516:	4313      	orrs	r3, r2
 8007518:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800751a:	e05f      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d042      	beq.n	80075aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007524:	4b5e      	ldr	r3, [pc, #376]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5d      	ldr	r2, [pc, #372]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800752a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800752e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fc fe6e 	bl	8004210 <HAL_GetTick>
 8007534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007538:	f7fc fe6a 	bl	8004210 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e280      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800754a:	4b55      	ldr	r3, [pc, #340]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007556:	f7fc fe8b 	bl	8004270 <HAL_GetREVID>
 800755a:	4603      	mov	r3, r0
 800755c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007560:	4293      	cmp	r3, r2
 8007562:	d817      	bhi.n	8007594 <HAL_RCC_OscConfig+0x3ec>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	2b20      	cmp	r3, #32
 800756a:	d108      	bne.n	800757e <HAL_RCC_OscConfig+0x3d6>
 800756c:	4b4c      	ldr	r3, [pc, #304]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007574:	4a4a      	ldr	r2, [pc, #296]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007576:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800757a:	6053      	str	r3, [r2, #4]
 800757c:	e02e      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
 800757e:	4b48      	ldr	r3, [pc, #288]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	069b      	lsls	r3, r3, #26
 800758c:	4944      	ldr	r1, [pc, #272]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800758e:	4313      	orrs	r3, r2
 8007590:	604b      	str	r3, [r1, #4]
 8007592:	e023      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
 8007594:	4b42      	ldr	r3, [pc, #264]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	493f      	ldr	r1, [pc, #252]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60cb      	str	r3, [r1, #12]
 80075a8:	e018      	b.n	80075dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075aa:	4b3d      	ldr	r3, [pc, #244]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3c      	ldr	r2, [pc, #240]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7fc fe2b 	bl	8004210 <HAL_GetTick>
 80075ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075be:	f7fc fe27 	bl	8004210 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e23d      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075d0:	4b33      	ldr	r3, [pc, #204]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f0      	bne.n	80075be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d036      	beq.n	8007656 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d019      	beq.n	8007624 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075f0:	4b2b      	ldr	r3, [pc, #172]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075f4:	4a2a      	ldr	r2, [pc, #168]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fc:	f7fc fe08 	bl	8004210 <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007604:	f7fc fe04 	bl	8004210 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e21a      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007616:	4b22      	ldr	r3, [pc, #136]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0x45c>
 8007622:	e018      	b.n	8007656 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007624:	4b1e      	ldr	r3, [pc, #120]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007628:	4a1d      	ldr	r2, [pc, #116]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007630:	f7fc fdee 	bl	8004210 <HAL_GetTick>
 8007634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007638:	f7fc fdea 	bl	8004210 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e200      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800764c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f0      	bne.n	8007638 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d039      	beq.n	80076d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01c      	beq.n	80076a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a0c      	ldr	r2, [pc, #48]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007670:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007674:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007676:	f7fc fdcb 	bl	8004210 <HAL_GetTick>
 800767a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800767e:	f7fc fdc7 	bl	8004210 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e1dd      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007690:	4b03      	ldr	r3, [pc, #12]	@ (80076a0 <HAL_RCC_OscConfig+0x4f8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0f0      	beq.n	800767e <HAL_RCC_OscConfig+0x4d6>
 800769c:	e01b      	b.n	80076d6 <HAL_RCC_OscConfig+0x52e>
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076a4:	4b9b      	ldr	r3, [pc, #620]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a9a      	ldr	r2, [pc, #616]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80076aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076b0:	f7fc fdae 	bl	8004210 <HAL_GetTick>
 80076b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076b8:	f7fc fdaa 	bl	8004210 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1c0      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076ca:	4b92      	ldr	r3, [pc, #584]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f0      	bne.n	80076b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8081 	beq.w	80077e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076e4:	4b8c      	ldr	r3, [pc, #560]	@ (8007918 <HAL_RCC_OscConfig+0x770>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a8b      	ldr	r2, [pc, #556]	@ (8007918 <HAL_RCC_OscConfig+0x770>)
 80076ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076f0:	f7fc fd8e 	bl	8004210 <HAL_GetTick>
 80076f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076f8:	f7fc fd8a 	bl	8004210 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b64      	cmp	r3, #100	@ 0x64
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e1a0      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800770a:	4b83      	ldr	r3, [pc, #524]	@ (8007918 <HAL_RCC_OscConfig+0x770>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f0      	beq.n	80076f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d106      	bne.n	800772c <HAL_RCC_OscConfig+0x584>
 800771e:	4b7d      	ldr	r3, [pc, #500]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007722:	4a7c      	ldr	r2, [pc, #496]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6713      	str	r3, [r2, #112]	@ 0x70
 800772a:	e02d      	b.n	8007788 <HAL_RCC_OscConfig+0x5e0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <HAL_RCC_OscConfig+0x5a6>
 8007734:	4b77      	ldr	r3, [pc, #476]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007738:	4a76      	ldr	r2, [pc, #472]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007740:	4b74      	ldr	r3, [pc, #464]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007744:	4a73      	ldr	r2, [pc, #460]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007746:	f023 0304 	bic.w	r3, r3, #4
 800774a:	6713      	str	r3, [r2, #112]	@ 0x70
 800774c:	e01c      	b.n	8007788 <HAL_RCC_OscConfig+0x5e0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d10c      	bne.n	8007770 <HAL_RCC_OscConfig+0x5c8>
 8007756:	4b6f      	ldr	r3, [pc, #444]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775a:	4a6e      	ldr	r2, [pc, #440]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	6713      	str	r3, [r2, #112]	@ 0x70
 8007762:	4b6c      	ldr	r3, [pc, #432]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007766:	4a6b      	ldr	r2, [pc, #428]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	6713      	str	r3, [r2, #112]	@ 0x70
 800776e:	e00b      	b.n	8007788 <HAL_RCC_OscConfig+0x5e0>
 8007770:	4b68      	ldr	r3, [pc, #416]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007774:	4a67      	ldr	r2, [pc, #412]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	6713      	str	r3, [r2, #112]	@ 0x70
 800777c:	4b65      	ldr	r3, [pc, #404]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007780:	4a64      	ldr	r2, [pc, #400]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007782:	f023 0304 	bic.w	r3, r3, #4
 8007786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007790:	f7fc fd3e 	bl	8004210 <HAL_GetTick>
 8007794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007796:	e00a      	b.n	80077ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007798:	f7fc fd3a 	bl	8004210 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e14e      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ae:	4b59      	ldr	r3, [pc, #356]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0ee      	beq.n	8007798 <HAL_RCC_OscConfig+0x5f0>
 80077ba:	e014      	b.n	80077e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077bc:	f7fc fd28 	bl	8004210 <HAL_GetTick>
 80077c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077c2:	e00a      	b.n	80077da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c4:	f7fc fd24 	bl	8004210 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e138      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077da:	4b4e      	ldr	r3, [pc, #312]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1ee      	bne.n	80077c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 812d 	beq.w	8007a4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077f0:	4b48      	ldr	r3, [pc, #288]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077f8:	2b18      	cmp	r3, #24
 80077fa:	f000 80bd 	beq.w	8007978 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	2b02      	cmp	r3, #2
 8007804:	f040 809e 	bne.w	8007944 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007808:	4b42      	ldr	r3, [pc, #264]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a41      	ldr	r2, [pc, #260]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800780e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fc fcfc 	bl	8004210 <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800781c:	f7fc fcf8 	bl	8004210 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e10e      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800782e:	4b39      	ldr	r3, [pc, #228]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800783a:	4b36      	ldr	r3, [pc, #216]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800783c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800783e:	4b37      	ldr	r3, [pc, #220]	@ (800791c <HAL_RCC_OscConfig+0x774>)
 8007840:	4013      	ands	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800784a:	0112      	lsls	r2, r2, #4
 800784c:	430a      	orrs	r2, r1
 800784e:	4931      	ldr	r1, [pc, #196]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	628b      	str	r3, [r1, #40]	@ 0x28
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	3b01      	subs	r3, #1
 800785a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007862:	3b01      	subs	r3, #1
 8007864:	025b      	lsls	r3, r3, #9
 8007866:	b29b      	uxth	r3, r3
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786e:	3b01      	subs	r3, #1
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787c:	3b01      	subs	r3, #1
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007884:	4923      	ldr	r1, [pc, #140]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800788a:	4b22      	ldr	r3, [pc, #136]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788e:	4a21      	ldr	r2, [pc, #132]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007896:	4b1f      	ldr	r3, [pc, #124]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800789a:	4b21      	ldr	r3, [pc, #132]	@ (8007920 <HAL_RCC_OscConfig+0x778>)
 800789c:	4013      	ands	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80078a2:	00d2      	lsls	r2, r2, #3
 80078a4:	491b      	ldr	r1, [pc, #108]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ae:	f023 020c 	bic.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	4917      	ldr	r1, [pc, #92]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078bc:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	f023 0202 	bic.w	r2, r3, #2
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c8:	4912      	ldr	r1, [pc, #72]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ce:	4b11      	ldr	r3, [pc, #68]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	4a10      	ldr	r2, [pc, #64]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078da:	4b0e      	ldr	r3, [pc, #56]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	4a0d      	ldr	r2, [pc, #52]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078f2:	4b08      	ldr	r3, [pc, #32]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	4a07      	ldr	r2, [pc, #28]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a04      	ldr	r2, [pc, #16]	@ (8007914 <HAL_RCC_OscConfig+0x76c>)
 8007904:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7fc fc81 	bl	8004210 <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007910:	e011      	b.n	8007936 <HAL_RCC_OscConfig+0x78e>
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	58024800 	.word	0x58024800
 800791c:	fffffc0c 	.word	0xfffffc0c
 8007920:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fc fc74 	bl	8004210 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e08a      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007936:	4b47      	ldr	r3, [pc, #284]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0x77c>
 8007942:	e082      	b.n	8007a4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007944:	4b43      	ldr	r3, [pc, #268]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a42      	ldr	r2, [pc, #264]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 800794a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800794e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fc fc5e 	bl	8004210 <HAL_GetTick>
 8007954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007958:	f7fc fc5a 	bl	8004210 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e070      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800796a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f0      	bne.n	8007958 <HAL_RCC_OscConfig+0x7b0>
 8007976:	e068      	b.n	8007a4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007978:	4b36      	ldr	r3, [pc, #216]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800797e:	4b35      	ldr	r3, [pc, #212]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	2b01      	cmp	r3, #1
 800798a:	d031      	beq.n	80079f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f003 0203 	and.w	r2, r3, #3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007996:	429a      	cmp	r2, r3
 8007998:	d12a      	bne.n	80079f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d122      	bne.n	80079f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d11a      	bne.n	80079f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	0a5b      	lsrs	r3, r3, #9
 80079be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d111      	bne.n	80079f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079da:	429a      	cmp	r2, r3
 80079dc:	d108      	bne.n	80079f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	0e1b      	lsrs	r3, r3, #24
 80079e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e02b      	b.n	8007a4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079f4:	4b17      	ldr	r3, [pc, #92]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 80079f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d01f      	beq.n	8007a4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a0a:	4b12      	ldr	r3, [pc, #72]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0e:	4a11      	ldr	r2, [pc, #68]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a16:	f7fc fbfb 	bl	8004210 <HAL_GetTick>
 8007a1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a1c:	bf00      	nop
 8007a1e:	f7fc fbf7 	bl	8004210 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d0f9      	beq.n	8007a1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <HAL_RCC_OscConfig+0x8b0>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a36:	00d2      	lsls	r2, r2, #3
 8007a38:	4906      	ldr	r1, [pc, #24]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a3e:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	4a04      	ldr	r2, [pc, #16]	@ (8007a54 <HAL_RCC_OscConfig+0x8ac>)
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3730      	adds	r7, #48	@ 0x30
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	58024400 	.word	0x58024400
 8007a58:	ffff0007 	.word	0xffff0007

08007a5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e19c      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a70:	4b8a      	ldr	r3, [pc, #552]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d910      	bls.n	8007aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7e:	4b87      	ldr	r3, [pc, #540]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f023 020f 	bic.w	r2, r3, #15
 8007a86:	4985      	ldr	r1, [pc, #532]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b83      	ldr	r3, [pc, #524]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e184      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d010      	beq.n	8007ace <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d908      	bls.n	8007ace <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007abc:	4b78      	ldr	r3, [pc, #480]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	4975      	ldr	r1, [pc, #468]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d010      	beq.n	8007afc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	4b70      	ldr	r3, [pc, #448]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d908      	bls.n	8007afc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aea:	4b6d      	ldr	r3, [pc, #436]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	496a      	ldr	r1, [pc, #424]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d010      	beq.n	8007b2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	4b64      	ldr	r3, [pc, #400]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d908      	bls.n	8007b2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b18:	4b61      	ldr	r3, [pc, #388]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	495e      	ldr	r1, [pc, #376]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d010      	beq.n	8007b58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69da      	ldr	r2, [r3, #28]
 8007b3a:	4b59      	ldr	r3, [pc, #356]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d908      	bls.n	8007b58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b46:	4b56      	ldr	r3, [pc, #344]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4953      	ldr	r1, [pc, #332]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d908      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b74:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f023 020f 	bic.w	r2, r3, #15
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	4947      	ldr	r1, [pc, #284]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d055      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b92:	4b43      	ldr	r3, [pc, #268]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	4940      	ldr	r1, [pc, #256]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d107      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bac:	4b3c      	ldr	r3, [pc, #240]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d121      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0f6      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d107      	bne.n	8007bd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bc4:	4b36      	ldr	r3, [pc, #216]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d115      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0ea      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d107      	bne.n	8007bec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bdc:	4b30      	ldr	r3, [pc, #192]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e0de      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bec:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0d6      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bfc:	4b28      	ldr	r3, [pc, #160]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f023 0207 	bic.w	r2, r3, #7
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4925      	ldr	r1, [pc, #148]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0e:	f7fc faff 	bl	8004210 <HAL_GetTick>
 8007c12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c14:	e00a      	b.n	8007c2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c16:	f7fc fafb 	bl	8004210 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e0be      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d1eb      	bne.n	8007c16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	4b14      	ldr	r3, [pc, #80]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d208      	bcs.n	8007c6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f023 020f 	bic.w	r2, r3, #15
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	490e      	ldr	r1, [pc, #56]	@ (8007ca0 <HAL_RCC_ClockConfig+0x244>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d214      	bcs.n	8007ca4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7a:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f023 020f 	bic.w	r2, r3, #15
 8007c82:	4906      	ldr	r1, [pc, #24]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	4b04      	ldr	r3, [pc, #16]	@ (8007c9c <HAL_RCC_ClockConfig+0x240>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d005      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e086      	b.n	8007daa <HAL_RCC_ClockConfig+0x34e>
 8007c9c:	52002000 	.word	0x52002000
 8007ca0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d010      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d208      	bcs.n	8007cd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	4939      	ldr	r1, [pc, #228]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d010      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	4b34      	ldr	r3, [pc, #208]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d208      	bcs.n	8007d00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cee:	4b31      	ldr	r3, [pc, #196]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	492e      	ldr	r1, [pc, #184]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d010      	beq.n	8007d2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	4b28      	ldr	r3, [pc, #160]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d208      	bcs.n	8007d2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d1c:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	4922      	ldr	r1, [pc, #136]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
 8007d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d208      	bcs.n	8007d5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	4917      	ldr	r1, [pc, #92]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d5c:	f000 f834 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 8007d60:	4602      	mov	r2, r0
 8007d62:	4b14      	ldr	r3, [pc, #80]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	4912      	ldr	r1, [pc, #72]	@ (8007db8 <HAL_RCC_ClockConfig+0x35c>)
 8007d6e:	5ccb      	ldrb	r3, [r1, r3]
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
 8007d78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <HAL_RCC_ClockConfig+0x358>)
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	4a0d      	ldr	r2, [pc, #52]	@ (8007db8 <HAL_RCC_ClockConfig+0x35c>)
 8007d84:	5cd3      	ldrb	r3, [r2, r3]
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d90:	4a0a      	ldr	r2, [pc, #40]	@ (8007dbc <HAL_RCC_ClockConfig+0x360>)
 8007d92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d94:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc0 <HAL_RCC_ClockConfig+0x364>)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <HAL_RCC_ClockConfig+0x368>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fc f9ec 	bl	800417c <HAL_InitTick>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
 8007db8:	0800f744 	.word	0x0800f744
 8007dbc:	24000004 	.word	0x24000004
 8007dc0:	24000000 	.word	0x24000000
 8007dc4:	24000098 	.word	0x24000098

08007dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	@ 0x24
 8007dcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dce:	4bb3      	ldr	r3, [pc, #716]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dd6:	2b18      	cmp	r3, #24
 8007dd8:	f200 8155 	bhi.w	8008086 <HAL_RCC_GetSysClockFreq+0x2be>
 8007ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007e49 	.word	0x08007e49
 8007de8:	08008087 	.word	0x08008087
 8007dec:	08008087 	.word	0x08008087
 8007df0:	08008087 	.word	0x08008087
 8007df4:	08008087 	.word	0x08008087
 8007df8:	08008087 	.word	0x08008087
 8007dfc:	08008087 	.word	0x08008087
 8007e00:	08008087 	.word	0x08008087
 8007e04:	08007e6f 	.word	0x08007e6f
 8007e08:	08008087 	.word	0x08008087
 8007e0c:	08008087 	.word	0x08008087
 8007e10:	08008087 	.word	0x08008087
 8007e14:	08008087 	.word	0x08008087
 8007e18:	08008087 	.word	0x08008087
 8007e1c:	08008087 	.word	0x08008087
 8007e20:	08008087 	.word	0x08008087
 8007e24:	08007e75 	.word	0x08007e75
 8007e28:	08008087 	.word	0x08008087
 8007e2c:	08008087 	.word	0x08008087
 8007e30:	08008087 	.word	0x08008087
 8007e34:	08008087 	.word	0x08008087
 8007e38:	08008087 	.word	0x08008087
 8007e3c:	08008087 	.word	0x08008087
 8007e40:	08008087 	.word	0x08008087
 8007e44:	08007e7b 	.word	0x08007e7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e48:	4b94      	ldr	r3, [pc, #592]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e54:	4b91      	ldr	r3, [pc, #580]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	08db      	lsrs	r3, r3, #3
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	4a90      	ldr	r2, [pc, #576]	@ (80080a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e60:	fa22 f303 	lsr.w	r3, r2, r3
 8007e64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e66:	e111      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e68:	4b8d      	ldr	r3, [pc, #564]	@ (80080a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e6a:	61bb      	str	r3, [r7, #24]
      break;
 8007e6c:	e10e      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80080a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e70:	61bb      	str	r3, [r7, #24]
      break;
 8007e72:	e10b      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e74:	4b8c      	ldr	r3, [pc, #560]	@ (80080a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e76:	61bb      	str	r3, [r7, #24]
      break;
 8007e78:	e108      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e7a:	4b88      	ldr	r3, [pc, #544]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007e84:	4b85      	ldr	r3, [pc, #532]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e88:	091b      	lsrs	r3, r3, #4
 8007e8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e90:	4b82      	ldr	r3, [pc, #520]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e9a:	4b80      	ldr	r3, [pc, #512]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9e:	08db      	lsrs	r3, r3, #3
 8007ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80e1 	beq.w	8008080 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f000 8083 	beq.w	8007fcc <HAL_RCC_GetSysClockFreq+0x204>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	f200 80a1 	bhi.w	8008010 <HAL_RCC_GetSysClockFreq+0x248>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0x114>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d056      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007eda:	e099      	b.n	8008010 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007edc:	4b6f      	ldr	r3, [pc, #444]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d02d      	beq.n	8007f44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80080a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f12:	4b62      	ldr	r3, [pc, #392]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80080ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f42:	e087      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80080b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f56:	4b51      	ldr	r3, [pc, #324]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5e:	ee07 3a90 	vmov	s15, r3
 8007f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80080ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f86:	e065      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80080b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b40      	ldr	r3, [pc, #256]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80080ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fca:	e043      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80080b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b2f      	ldr	r3, [pc, #188]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ff2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80080ac <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800800e:	e021      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80080b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b1e      	ldr	r3, [pc, #120]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a02 	vldr	s12, [r7, #8]
 8008036:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80080ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008052:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008054:	4b11      	ldr	r3, [pc, #68]	@ (800809c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008058:	0a5b      	lsrs	r3, r3, #9
 800805a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805e:	3301      	adds	r3, #1
 8008060:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	ee07 3a90 	vmov	s15, r3
 8008068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800806c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008078:	ee17 3a90 	vmov	r3, s15
 800807c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800807e:	e005      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	61bb      	str	r3, [r7, #24]
      break;
 8008084:	e002      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008086:	4b07      	ldr	r3, [pc, #28]	@ (80080a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008088:	61bb      	str	r3, [r7, #24]
      break;
 800808a:	bf00      	nop
  }

  return sysclockfreq;
 800808c:	69bb      	ldr	r3, [r7, #24]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3724      	adds	r7, #36	@ 0x24
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	58024400 	.word	0x58024400
 80080a0:	03d09000 	.word	0x03d09000
 80080a4:	003d0900 	.word	0x003d0900
 80080a8:	017d7840 	.word	0x017d7840
 80080ac:	46000000 	.word	0x46000000
 80080b0:	4c742400 	.word	0x4c742400
 80080b4:	4a742400 	.word	0x4a742400
 80080b8:	4bbebc20 	.word	0x4bbebc20

080080bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80080c2:	f7ff fe81 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 80080c6:	4602      	mov	r2, r0
 80080c8:	4b10      	ldr	r3, [pc, #64]	@ (800810c <HAL_RCC_GetHCLKFreq+0x50>)
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	490f      	ldr	r1, [pc, #60]	@ (8008110 <HAL_RCC_GetHCLKFreq+0x54>)
 80080d4:	5ccb      	ldrb	r3, [r1, r3]
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	fa22 f303 	lsr.w	r3, r2, r3
 80080de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080e0:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <HAL_RCC_GetHCLKFreq+0x50>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	4a09      	ldr	r2, [pc, #36]	@ (8008110 <HAL_RCC_GetHCLKFreq+0x54>)
 80080ea:	5cd3      	ldrb	r3, [r2, r3]
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	fa22 f303 	lsr.w	r3, r2, r3
 80080f6:	4a07      	ldr	r2, [pc, #28]	@ (8008114 <HAL_RCC_GetHCLKFreq+0x58>)
 80080f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080fa:	4a07      	ldr	r2, [pc, #28]	@ (8008118 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008100:	4b04      	ldr	r3, [pc, #16]	@ (8008114 <HAL_RCC_GetHCLKFreq+0x58>)
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	58024400 	.word	0x58024400
 8008110:	0800f744 	.word	0x0800f744
 8008114:	24000004 	.word	0x24000004
 8008118:	24000000 	.word	0x24000000

0800811c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008120:	f7ff ffcc 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 8008124:	4602      	mov	r2, r0
 8008126:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	091b      	lsrs	r3, r3, #4
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	4904      	ldr	r1, [pc, #16]	@ (8008144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008132:	5ccb      	ldrb	r3, [r1, r3]
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800813c:	4618      	mov	r0, r3
 800813e:	bd80      	pop	{r7, pc}
 8008140:	58024400 	.word	0x58024400
 8008144:	0800f744 	.word	0x0800f744

08008148 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800814c:	b0ca      	sub	sp, #296	@ 0x128
 800814e:	af00      	add	r7, sp, #0
 8008150:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008154:	2300      	movs	r3, #0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800815a:	2300      	movs	r3, #0
 800815c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800816c:	2500      	movs	r5, #0
 800816e:	ea54 0305 	orrs.w	r3, r4, r5
 8008172:	d049      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800817a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800817e:	d02f      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008180:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008184:	d828      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800818a:	d01a      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800818c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008190:	d822      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800819a:	d007      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800819c:	e01c      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819e:	4bb8      	ldr	r3, [pc, #736]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a2:	4ab7      	ldr	r2, [pc, #732]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081aa:	e01a      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	3308      	adds	r3, #8
 80081b2:	2102      	movs	r1, #2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f002 fb61 	bl	800a87c <RCCEx_PLL2_Config>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081c0:	e00f      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c6:	3328      	adds	r3, #40	@ 0x28
 80081c8:	2102      	movs	r1, #2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 fc08 	bl	800a9e0 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081d6:	e004      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081ea:	4ba5      	ldr	r3, [pc, #660]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081f8:	4aa1      	ldr	r2, [pc, #644]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081fa:	430b      	orrs	r3, r1
 80081fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80081fe:	e003      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008214:	f04f 0900 	mov.w	r9, #0
 8008218:	ea58 0309 	orrs.w	r3, r8, r9
 800821c:	d047      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008224:	2b04      	cmp	r3, #4
 8008226:	d82a      	bhi.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008228:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008245 	.word	0x08008245
 8008234:	08008253 	.word	0x08008253
 8008238:	08008269 	.word	0x08008269
 800823c:	08008287 	.word	0x08008287
 8008240:	08008287 	.word	0x08008287
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008244:	4b8e      	ldr	r3, [pc, #568]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	4a8d      	ldr	r2, [pc, #564]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800824a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800824e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008250:	e01a      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	3308      	adds	r3, #8
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f002 fb0e 	bl	800a87c <RCCEx_PLL2_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008266:	e00f      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	3328      	adds	r3, #40	@ 0x28
 800826e:	2100      	movs	r1, #0
 8008270:	4618      	mov	r0, r3
 8008272:	f002 fbb5 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800827c:	e004      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008290:	4b7b      	ldr	r3, [pc, #492]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008294:	f023 0107 	bic.w	r1, r3, #7
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829e:	4a78      	ldr	r2, [pc, #480]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80082ba:	f04f 0b00 	mov.w	fp, #0
 80082be:	ea5a 030b 	orrs.w	r3, sl, fp
 80082c2:	d04c      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ce:	d030      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d4:	d829      	bhi.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082d8:	d02d      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082da:	2bc0      	cmp	r3, #192	@ 0xc0
 80082dc:	d825      	bhi.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082de:	2b80      	cmp	r3, #128	@ 0x80
 80082e0:	d018      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082e2:	2b80      	cmp	r3, #128	@ 0x80
 80082e4:	d821      	bhi.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082ea:	2b40      	cmp	r3, #64	@ 0x40
 80082ec:	d007      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082ee:	e01c      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f0:	4b63      	ldr	r3, [pc, #396]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4a62      	ldr	r2, [pc, #392]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082fc:	e01c      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	3308      	adds	r3, #8
 8008304:	2100      	movs	r1, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f002 fab8 	bl	800a87c <RCCEx_PLL2_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008312:	e011      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008318:	3328      	adds	r3, #40	@ 0x28
 800831a:	2100      	movs	r1, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f002 fb5f 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008328:	e006      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008330:	e002      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008332:	bf00      	nop
 8008334:	e000      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008340:	4b4f      	ldr	r3, [pc, #316]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008344:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800834e:	4a4c      	ldr	r2, [pc, #304]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008350:	430b      	orrs	r3, r1
 8008352:	6513      	str	r3, [r2, #80]	@ 0x50
 8008354:	e003      	b.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800835a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800836a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800836e:	2300      	movs	r3, #0
 8008370:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008374:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008378:	460b      	mov	r3, r1
 800837a:	4313      	orrs	r3, r2
 800837c:	d053      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800838a:	d035      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800838c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008390:	d82e      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008392:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008396:	d031      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008398:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800839c:	d828      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800839e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083a2:	d01a      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80083a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083a8:	d822      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80083ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083b2:	d007      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083b4:	e01c      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b6:	4b32      	ldr	r3, [pc, #200]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a31      	ldr	r2, [pc, #196]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083c2:	e01c      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	3308      	adds	r3, #8
 80083ca:	2100      	movs	r1, #0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 fa55 	bl	800a87c <RCCEx_PLL2_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083d8:	e011      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	3328      	adds	r3, #40	@ 0x28
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f002 fafc 	bl	800a9e0 <RCCEx_PLL3_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ee:	e006      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083f6:	e002      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083f8:	bf00      	nop
 80083fa:	e000      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008406:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008412:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008416:	4a1a      	ldr	r2, [pc, #104]	@ (8008480 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008418:	430b      	orrs	r3, r1
 800841a:	6593      	str	r3, [r2, #88]	@ 0x58
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008432:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008436:	2300      	movs	r3, #0
 8008438:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800843c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008440:	460b      	mov	r3, r1
 8008442:	4313      	orrs	r3, r2
 8008444:	d056      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800844e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008452:	d038      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008458:	d831      	bhi.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800845a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800845e:	d034      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008460:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008464:	d82b      	bhi.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846a:	d01d      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800846c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008470:	d825      	bhi.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800847a:	d00a      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800847c:	e01f      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800847e:	bf00      	nop
 8008480:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008484:	4ba2      	ldr	r3, [pc, #648]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	4aa1      	ldr	r2, [pc, #644]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800848a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800848e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008490:	e01c      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	3308      	adds	r3, #8
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f002 f9ee 	bl	800a87c <RCCEx_PLL2_Config>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084a6:	e011      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ac:	3328      	adds	r3, #40	@ 0x28
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f002 fa95 	bl	800a9e0 <RCCEx_PLL3_Config>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084bc:	e006      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c4:	e002      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084d4:	4b8e      	ldr	r3, [pc, #568]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084e4:	4a8a      	ldr	r2, [pc, #552]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80084ea:	e003      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008504:	2300      	movs	r3, #0
 8008506:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800850a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800850e:	460b      	mov	r3, r1
 8008510:	4313      	orrs	r3, r2
 8008512:	d03a      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851a:	2b30      	cmp	r3, #48	@ 0x30
 800851c:	d01f      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800851e:	2b30      	cmp	r3, #48	@ 0x30
 8008520:	d819      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008522:	2b20      	cmp	r3, #32
 8008524:	d00c      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008526:	2b20      	cmp	r3, #32
 8008528:	d815      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d019      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800852e:	2b10      	cmp	r3, #16
 8008530:	d111      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008532:	4b77      	ldr	r3, [pc, #476]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	4a76      	ldr	r2, [pc, #472]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800853c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800853e:	e011      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008544:	3308      	adds	r3, #8
 8008546:	2102      	movs	r1, #2
 8008548:	4618      	mov	r0, r3
 800854a:	f002 f997 	bl	800a87c <RCCEx_PLL2_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855c:	e002      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800856c:	4b68      	ldr	r3, [pc, #416]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800856e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008570:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	4a65      	ldr	r2, [pc, #404]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800857c:	430b      	orrs	r3, r1
 800857e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008580:	e003      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008596:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800859a:	2300      	movs	r3, #0
 800859c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4313      	orrs	r3, r2
 80085a8:	d051      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085b4:	d035      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ba:	d82e      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085c0:	d031      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085c6:	d828      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085cc:	d01a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085d2:	d822      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085dc:	d007      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085de:	e01c      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e0:	4b4b      	ldr	r3, [pc, #300]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e4:	4a4a      	ldr	r2, [pc, #296]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085ec:	e01c      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f2:	3308      	adds	r3, #8
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f002 f940 	bl	800a87c <RCCEx_PLL2_Config>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008602:	e011      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008608:	3328      	adds	r3, #40	@ 0x28
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f002 f9e7 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008618:	e006      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008620:	e002      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008622:	bf00      	nop
 8008624:	e000      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008630:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008634:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800863e:	4a34      	ldr	r2, [pc, #208]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008640:	430b      	orrs	r3, r1
 8008642:	6513      	str	r3, [r2, #80]	@ 0x50
 8008644:	e003      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800864a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800865a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800865e:	2300      	movs	r3, #0
 8008660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008664:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008668:	460b      	mov	r3, r1
 800866a:	4313      	orrs	r3, r2
 800866c:	d056      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008678:	d033      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800867a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800867e:	d82c      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008684:	d02f      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008686:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800868a:	d826      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800868c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008690:	d02b      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008692:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008696:	d820      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800869c:	d012      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800869e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086a2:	d81a      	bhi.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d022      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ac:	d115      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	3308      	adds	r3, #8
 80086b4:	2101      	movs	r1, #1
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 f8e0 	bl	800a87c <RCCEx_PLL2_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086c2:	e015      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	3328      	adds	r3, #40	@ 0x28
 80086ca:	2101      	movs	r1, #1
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 f987 	bl	800a9e0 <RCCEx_PLL3_Config>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086d8:	e00a      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086e0:	e006      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e2:	bf00      	nop
 80086e4:	e004      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10d      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086f8:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008706:	4a02      	ldr	r2, [pc, #8]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008708:	430b      	orrs	r3, r1
 800870a:	6513      	str	r3, [r2, #80]	@ 0x50
 800870c:	e006      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800870e:	bf00      	nop
 8008710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800872c:	2300      	movs	r3, #0
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008732:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008736:	460b      	mov	r3, r1
 8008738:	4313      	orrs	r3, r2
 800873a:	d055      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008748:	d033      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800874a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800874e:	d82c      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008754:	d02f      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875a:	d826      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800875c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008760:	d02b      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008766:	d820      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800876c:	d012      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800876e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008772:	d81a      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d022      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800877c:	d115      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	3308      	adds	r3, #8
 8008784:	2101      	movs	r1, #1
 8008786:	4618      	mov	r0, r3
 8008788:	f002 f878 	bl	800a87c <RCCEx_PLL2_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008792:	e015      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	3328      	adds	r3, #40	@ 0x28
 800879a:	2101      	movs	r1, #1
 800879c:	4618      	mov	r0, r3
 800879e:	f002 f91f 	bl	800a9e0 <RCCEx_PLL3_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087a8:	e00a      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087b0:	e006      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b2:	bf00      	nop
 80087b4:	e004      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b6:	bf00      	nop
 80087b8:	e002      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ba:	bf00      	nop
 80087bc:	e000      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087c8:	4ba3      	ldr	r3, [pc, #652]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087d8:	4a9f      	ldr	r2, [pc, #636]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087da:	430b      	orrs	r3, r1
 80087dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80087de:	e003      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008802:	460b      	mov	r3, r1
 8008804:	4313      	orrs	r3, r2
 8008806:	d037      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800880e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008812:	d00e      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008818:	d816      	bhi.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d018      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800881e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008822:	d111      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008824:	4b8c      	ldr	r3, [pc, #560]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008828:	4a8b      	ldr	r2, [pc, #556]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800882a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800882e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008830:	e00f      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008836:	3308      	adds	r3, #8
 8008838:	2101      	movs	r1, #1
 800883a:	4618      	mov	r0, r3
 800883c:	f002 f81e 	bl	800a87c <RCCEx_PLL2_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008846:	e004      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800884e:	e000      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800885a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800885c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800885e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008868:	4a7b      	ldr	r2, [pc, #492]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800886a:	430b      	orrs	r3, r1
 800886c:	6513      	str	r3, [r2, #80]	@ 0x50
 800886e:	e003      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008888:	2300      	movs	r3, #0
 800888a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800888e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008892:	460b      	mov	r3, r1
 8008894:	4313      	orrs	r3, r2
 8008896:	d039      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d81c      	bhi.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80088a2:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088e5 	.word	0x080088e5
 80088ac:	080088b9 	.word	0x080088b9
 80088b0:	080088c7 	.word	0x080088c7
 80088b4:	080088e5 	.word	0x080088e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b8:	4b67      	ldr	r3, [pc, #412]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	4a66      	ldr	r2, [pc, #408]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088c4:	e00f      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ca:	3308      	adds	r3, #8
 80088cc:	2102      	movs	r1, #2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 ffd4 	bl	800a87c <RCCEx_PLL2_Config>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088da:	e004      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088e2:	e000      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ee:	4b5a      	ldr	r3, [pc, #360]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088f2:	f023 0103 	bic.w	r1, r3, #3
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088fc:	4a56      	ldr	r2, [pc, #344]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088fe:	430b      	orrs	r3, r1
 8008900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008902:	e003      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008918:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800891c:	2300      	movs	r3, #0
 800891e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008922:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008926:	460b      	mov	r3, r1
 8008928:	4313      	orrs	r3, r2
 800892a:	f000 809f 	beq.w	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a4a      	ldr	r2, [pc, #296]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800893a:	f7fb fc69 	bl	8004210 <HAL_GetTick>
 800893e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008942:	e00b      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008944:	f7fb fc64 	bl	8004210 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b64      	cmp	r3, #100	@ 0x64
 8008952:	d903      	bls.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800895a:	e005      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0ed      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800896c:	2b00      	cmp	r3, #0
 800896e:	d179      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008970:	4b39      	ldr	r3, [pc, #228]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008972:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800897c:	4053      	eors	r3, r2
 800897e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008982:	2b00      	cmp	r3, #0
 8008984:	d015      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008986:	4b34      	ldr	r3, [pc, #208]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008992:	4b31      	ldr	r3, [pc, #196]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	4a30      	ldr	r2, [pc, #192]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800899c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800899e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a2:	4a2d      	ldr	r2, [pc, #180]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80089b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089be:	d118      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c0:	f7fb fc26 	bl	8004210 <HAL_GetTick>
 80089c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c8:	e00d      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ca:	f7fb fc21 	bl	8004210 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089d4:	1ad2      	subs	r2, r2, r3
 80089d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089da:	429a      	cmp	r2, r3
 80089dc:	d903      	bls.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089e4:	e005      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0eb      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d129      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a0a:	d10e      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008a0c:	4b12      	ldr	r3, [pc, #72]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a1c:	091a      	lsrs	r2, r3, #4
 8008a1e:	4b10      	ldr	r3, [pc, #64]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	4a0d      	ldr	r2, [pc, #52]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6113      	str	r3, [r2, #16]
 8008a28:	e005      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a34:	6113      	str	r3, [r2, #16]
 8008a36:	4b08      	ldr	r3, [pc, #32]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a46:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a4c:	e00e      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a56:	e009      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	58024800 	.word	0x58024800
 8008a60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f002 0301 	and.w	r3, r2, #1
 8008a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f000 8089 	beq.w	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a94:	2b28      	cmp	r3, #40	@ 0x28
 8008a96:	d86b      	bhi.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008b79 	.word	0x08008b79
 8008aa4:	08008b71 	.word	0x08008b71
 8008aa8:	08008b71 	.word	0x08008b71
 8008aac:	08008b71 	.word	0x08008b71
 8008ab0:	08008b71 	.word	0x08008b71
 8008ab4:	08008b71 	.word	0x08008b71
 8008ab8:	08008b71 	.word	0x08008b71
 8008abc:	08008b71 	.word	0x08008b71
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008b71 	.word	0x08008b71
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008b71 	.word	0x08008b71
 8008ad0:	08008b71 	.word	0x08008b71
 8008ad4:	08008b71 	.word	0x08008b71
 8008ad8:	08008b71 	.word	0x08008b71
 8008adc:	08008b71 	.word	0x08008b71
 8008ae0:	08008b5b 	.word	0x08008b5b
 8008ae4:	08008b71 	.word	0x08008b71
 8008ae8:	08008b71 	.word	0x08008b71
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008b71 	.word	0x08008b71
 8008af4:	08008b71 	.word	0x08008b71
 8008af8:	08008b71 	.word	0x08008b71
 8008afc:	08008b71 	.word	0x08008b71
 8008b00:	08008b79 	.word	0x08008b79
 8008b04:	08008b71 	.word	0x08008b71
 8008b08:	08008b71 	.word	0x08008b71
 8008b0c:	08008b71 	.word	0x08008b71
 8008b10:	08008b71 	.word	0x08008b71
 8008b14:	08008b71 	.word	0x08008b71
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b71 	.word	0x08008b71
 8008b20:	08008b79 	.word	0x08008b79
 8008b24:	08008b71 	.word	0x08008b71
 8008b28:	08008b71 	.word	0x08008b71
 8008b2c:	08008b71 	.word	0x08008b71
 8008b30:	08008b71 	.word	0x08008b71
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b71 	.word	0x08008b71
 8008b3c:	08008b71 	.word	0x08008b71
 8008b40:	08008b79 	.word	0x08008b79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b48:	3308      	adds	r3, #8
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 fe95 	bl	800a87c <RCCEx_PLL2_Config>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b58:	e00f      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b5e:	3328      	adds	r3, #40	@ 0x28
 8008b60:	2101      	movs	r1, #1
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 ff3c 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b6e:	e004      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b76:	e000      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b82:	4bbf      	ldr	r3, [pc, #764]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b90:	4abb      	ldr	r2, [pc, #748]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b92:	430b      	orrs	r3, r1
 8008b94:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b96:	e003      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f002 0302 	and.w	r3, r2, #2
 8008bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008bb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	d041      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d824      	bhi.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008bca:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008c1d 	.word	0x08008c1d
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bff 	.word	0x08008bff
 8008bdc:	08008c1d 	.word	0x08008c1d
 8008be0:	08008c1d 	.word	0x08008c1d
 8008be4:	08008c1d 	.word	0x08008c1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bec:	3308      	adds	r3, #8
 8008bee:	2101      	movs	r1, #1
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f001 fe43 	bl	800a87c <RCCEx_PLL2_Config>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bfc:	e00f      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c02:	3328      	adds	r3, #40	@ 0x28
 8008c04:	2101      	movs	r1, #1
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 feea 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c12:	e004      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c1a:	e000      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c26:	4b96      	ldr	r3, [pc, #600]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c2a:	f023 0107 	bic.w	r1, r3, #7
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c34:	4a92      	ldr	r2, [pc, #584]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c36:	430b      	orrs	r3, r1
 8008c38:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c3a:	e003      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f002 0304 	and.w	r3, r2, #4
 8008c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4313      	orrs	r3, r2
 8008c62:	d044      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c6c:	2b05      	cmp	r3, #5
 8008c6e:	d825      	bhi.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c70:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008cc5 	.word	0x08008cc5
 8008c7c:	08008c91 	.word	0x08008c91
 8008c80:	08008ca7 	.word	0x08008ca7
 8008c84:	08008cc5 	.word	0x08008cc5
 8008c88:	08008cc5 	.word	0x08008cc5
 8008c8c:	08008cc5 	.word	0x08008cc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c94:	3308      	adds	r3, #8
 8008c96:	2101      	movs	r1, #1
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 fdef 	bl	800a87c <RCCEx_PLL2_Config>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ca4:	e00f      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008caa:	3328      	adds	r3, #40	@ 0x28
 8008cac:	2101      	movs	r1, #1
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 fe96 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cba:	e004      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cce:	4b6c      	ldr	r3, [pc, #432]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd2:	f023 0107 	bic.w	r1, r3, #7
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cde:	4a68      	ldr	r2, [pc, #416]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ce4:	e003      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f002 0320 	and.w	r3, r2, #32
 8008cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	d055      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d1a:	d033      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d20:	d82c      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d26:	d02f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2c:	d826      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d32:	d02b      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d38:	d820      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3e:	d012      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d44:	d81a      	bhi.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d022      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d4e:	d115      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d54:	3308      	adds	r3, #8
 8008d56:	2100      	movs	r1, #0
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 fd8f 	bl	800a87c <RCCEx_PLL2_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d64:	e015      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6a:	3328      	adds	r3, #40	@ 0x28
 8008d6c:	2102      	movs	r1, #2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fe36 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d7a:	e00a      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d82:	e006      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d84:	bf00      	nop
 8008d86:	e004      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d88:	bf00      	nop
 8008d8a:	e002      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d8c:	bf00      	nop
 8008d8e:	e000      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d9a:	4b39      	ldr	r3, [pc, #228]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008daa:	4a35      	ldr	r2, [pc, #212]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6553      	str	r3, [r2, #84]	@ 0x54
 8008db0:	e003      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	d058      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008de2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008de6:	d033      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008de8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dec:	d82c      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df2:	d02f      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df8:	d826      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dfe:	d02b      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008e00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e04:	d820      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0a:	d012      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e10:	d81a      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d022      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1a:	d115      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e20:	3308      	adds	r3, #8
 8008e22:	2100      	movs	r1, #0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f001 fd29 	bl	800a87c <RCCEx_PLL2_Config>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e30:	e015      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e36:	3328      	adds	r3, #40	@ 0x28
 8008e38:	2102      	movs	r1, #2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 fdd0 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e46:	e00a      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e4e:	e006      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e50:	bf00      	nop
 8008e52:	e004      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e54:	bf00      	nop
 8008e56:	e002      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e58:	bf00      	nop
 8008e5a:	e000      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10e      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e66:	4b06      	ldr	r3, [pc, #24]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e76:	4a02      	ldr	r2, [pc, #8]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e7c:	e006      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e7e:	bf00      	nop
 8008e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ea2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	d055      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008eb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008eb8:	d033      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008eba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ebe:	d82c      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec4:	d02f      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eca:	d826      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ecc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ed0:	d02b      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ed2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ed6:	d820      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008edc:	d012      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ee2:	d81a      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d022      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eec:	d115      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f001 fcc0 	bl	800a87c <RCCEx_PLL2_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f02:	e015      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f08:	3328      	adds	r3, #40	@ 0x28
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f001 fd67 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f18:	e00a      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f20:	e006      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f22:	bf00      	nop
 8008f24:	e004      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f26:	bf00      	nop
 8008f28:	e002      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f2a:	bf00      	nop
 8008f2c:	e000      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f38:	4ba1      	ldr	r3, [pc, #644]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f48:	4a9d      	ldr	r2, [pc, #628]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f4e:	e003      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f002 0308 	and.w	r3, r2, #8
 8008f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d01e      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f84:	d10c      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8a:	3328      	adds	r3, #40	@ 0x28
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 fd26 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fa0:	4b87      	ldr	r3, [pc, #540]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fb0:	4a83      	ldr	r2, [pc, #524]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f002 0310 	and.w	r3, r2, #16
 8008fc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fcc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	d01e      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe2:	d10c      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe8:	3328      	adds	r3, #40	@ 0x28
 8008fea:	2102      	movs	r1, #2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 fcf7 	bl	800a9e0 <RCCEx_PLL3_Config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ffe:	4b70      	ldr	r3, [pc, #448]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009002:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800900e:	4a6c      	ldr	r2, [pc, #432]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009010:	430b      	orrs	r3, r1
 8009012:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009024:	2300      	movs	r3, #0
 8009026:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800902a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800902e:	460b      	mov	r3, r1
 8009030:	4313      	orrs	r3, r2
 8009032:	d03e      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800903c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009040:	d022      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009046:	d81b      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009050:	d00b      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009052:	e015      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	3308      	adds	r3, #8
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f001 fc0d 	bl	800a87c <RCCEx_PLL2_Config>
 8009062:	4603      	mov	r3, r0
 8009064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009068:	e00f      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	3328      	adds	r3, #40	@ 0x28
 8009070:	2102      	movs	r1, #2
 8009072:	4618      	mov	r0, r3
 8009074:	f001 fcb4 	bl	800a9e0 <RCCEx_PLL3_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800907e:	e004      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009086:	e000      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009092:	4b4b      	ldr	r3, [pc, #300]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009096:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090a2:	4a47      	ldr	r2, [pc, #284]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80090be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090c0:	2300      	movs	r3, #0
 80090c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090c8:	460b      	mov	r3, r1
 80090ca:	4313      	orrs	r3, r2
 80090cc:	d03b      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090da:	d01f      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090e0:	d818      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090e6:	d003      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090ec:	d007      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090ee:	e011      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090f0:	4b33      	ldr	r3, [pc, #204]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f4:	4a32      	ldr	r2, [pc, #200]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090fc:	e00f      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009102:	3328      	adds	r3, #40	@ 0x28
 8009104:	2101      	movs	r1, #1
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fc6a 	bl	800a9e0 <RCCEx_PLL3_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009112:	e004      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800911a:	e000      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800911c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10b      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009126:	4b26      	ldr	r3, [pc, #152]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009136:	4a22      	ldr	r2, [pc, #136]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009138:	430b      	orrs	r3, r1
 800913a:	6553      	str	r3, [r2, #84]	@ 0x54
 800913c:	e003      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009152:	673b      	str	r3, [r7, #112]	@ 0x70
 8009154:	2300      	movs	r3, #0
 8009156:	677b      	str	r3, [r7, #116]	@ 0x74
 8009158:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800915c:	460b      	mov	r3, r1
 800915e:	4313      	orrs	r3, r2
 8009160:	d034      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800916c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009170:	d007      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009172:	e011      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009174:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	4a11      	ldr	r2, [pc, #68]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800917a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800917e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009180:	e00e      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009186:	3308      	adds	r3, #8
 8009188:	2102      	movs	r1, #2
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fb76 	bl	800a87c <RCCEx_PLL2_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009196:	e003      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800919e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10d      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091a8:	4b05      	ldr	r3, [pc, #20]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b6:	4a02      	ldr	r2, [pc, #8]	@ (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b8:	430b      	orrs	r3, r1
 80091ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091bc:	e006      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091da:	2300      	movs	r3, #0
 80091dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091e2:	460b      	mov	r3, r1
 80091e4:	4313      	orrs	r3, r2
 80091e6:	d00c      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ec:	3328      	adds	r3, #40	@ 0x28
 80091ee:	2102      	movs	r1, #2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fbf5 	bl	800a9e0 <RCCEx_PLL3_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800920e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009210:	2300      	movs	r3, #0
 8009212:	667b      	str	r3, [r7, #100]	@ 0x64
 8009214:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009218:	460b      	mov	r3, r1
 800921a:	4313      	orrs	r3, r2
 800921c:	d038      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800922a:	d018      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800922c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009230:	d811      	bhi.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009236:	d014      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800923c:	d80b      	bhi.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800923e:	2b00      	cmp	r3, #0
 8009240:	d011      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009246:	d106      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009248:	4bc3      	ldr	r3, [pc, #780]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924c:	4ac2      	ldr	r2, [pc, #776]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009254:	e008      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800925c:	e004      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800925e:	bf00      	nop
 8009260:	e002      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009262:	bf00      	nop
 8009264:	e000      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009270:	4bb9      	ldr	r3, [pc, #740]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009274:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009280:	4ab5      	ldr	r2, [pc, #724]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009282:	430b      	orrs	r3, r1
 8009284:	6553      	str	r3, [r2, #84]	@ 0x54
 8009286:	e003      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800929c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800929e:	2300      	movs	r3, #0
 80092a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80092a6:	460b      	mov	r3, r1
 80092a8:	4313      	orrs	r3, r2
 80092aa:	d009      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092ac:	4baa      	ldr	r3, [pc, #680]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ba:	4aa7      	ldr	r2, [pc, #668]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092bc:	430b      	orrs	r3, r1
 80092be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ce:	2300      	movs	r3, #0
 80092d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80092d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092d6:	460b      	mov	r3, r1
 80092d8:	4313      	orrs	r3, r2
 80092da:	d00a      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092dc:	4b9e      	ldr	r3, [pc, #632]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80092ec:	4a9a      	ldr	r2, [pc, #616]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ee:	430b      	orrs	r3, r1
 80092f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009300:	2300      	movs	r3, #0
 8009302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009304:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009308:	460b      	mov	r3, r1
 800930a:	4313      	orrs	r3, r2
 800930c:	d009      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800930e:	4b92      	ldr	r3, [pc, #584]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009312:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800931c:	4a8e      	ldr	r2, [pc, #568]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800931e:	430b      	orrs	r3, r1
 8009320:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800932e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009330:	2300      	movs	r3, #0
 8009332:	647b      	str	r3, [r7, #68]	@ 0x44
 8009334:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009338:	460b      	mov	r3, r1
 800933a:	4313      	orrs	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800933e:	4b86      	ldr	r3, [pc, #536]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	4a85      	ldr	r2, [pc, #532]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009344:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009348:	6113      	str	r3, [r2, #16]
 800934a:	4b83      	ldr	r3, [pc, #524]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800934c:	6919      	ldr	r1, [r3, #16]
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009352:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009356:	4a80      	ldr	r2, [pc, #512]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009358:	430b      	orrs	r3, r1
 800935a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800935c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800936a:	2300      	movs	r3, #0
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d009      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009378:	4b77      	ldr	r3, [pc, #476]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800937a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800937c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009386:	4a74      	ldr	r2, [pc, #464]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009388:	430b      	orrs	r3, r1
 800938a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009398:	633b      	str	r3, [r7, #48]	@ 0x30
 800939a:	2300      	movs	r3, #0
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
 800939e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80093a2:	460b      	mov	r3, r1
 80093a4:	4313      	orrs	r3, r2
 80093a6:	d00a      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a8:	4b6b      	ldr	r3, [pc, #428]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093b8:	4a67      	ldr	r2, [pc, #412]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	2100      	movs	r1, #0
 80093c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d011      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	3308      	adds	r3, #8
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fa4a 	bl	800a87c <RCCEx_PLL2_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	2100      	movs	r1, #0
 8009408:	6239      	str	r1, [r7, #32]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009410:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009414:	460b      	mov	r3, r1
 8009416:	4313      	orrs	r3, r2
 8009418:	d011      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941e:	3308      	adds	r3, #8
 8009420:	2101      	movs	r1, #1
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fa2a 	bl	800a87c <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800943a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	2100      	movs	r1, #0
 8009448:	61b9      	str	r1, [r7, #24]
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009454:	460b      	mov	r3, r1
 8009456:	4313      	orrs	r3, r2
 8009458:	d011      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800945a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945e:	3308      	adds	r3, #8
 8009460:	2102      	movs	r1, #2
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fa0a 	bl	800a87c <RCCEx_PLL2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800946e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	2100      	movs	r1, #0
 8009488:	6139      	str	r1, [r7, #16]
 800948a:	f003 0308 	and.w	r3, r3, #8
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009494:	460b      	mov	r3, r1
 8009496:	4313      	orrs	r3, r2
 8009498:	d011      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949e:	3328      	adds	r3, #40	@ 0x28
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 fa9c 	bl	800a9e0 <RCCEx_PLL3_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80094ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	2100      	movs	r1, #0
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094d4:	460b      	mov	r3, r1
 80094d6:	4313      	orrs	r3, r2
 80094d8:	d011      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	3328      	adds	r3, #40	@ 0x28
 80094e0:	2101      	movs	r1, #1
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 fa7c 	bl	800a9e0 <RCCEx_PLL3_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80094ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	2100      	movs	r1, #0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009514:	460b      	mov	r3, r1
 8009516:	4313      	orrs	r3, r2
 8009518:	d011      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	3328      	adds	r3, #40	@ 0x28
 8009520:	2102      	movs	r1, #2
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fa5c 	bl	800a9e0 <RCCEx_PLL3_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800952e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800953a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800953e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
}
 800954c:	4618      	mov	r0, r3
 800954e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009552:	46bd      	mov	sp, r7
 8009554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009558:	58024400 	.word	0x58024400

0800955c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b090      	sub	sp, #64	@ 0x40
 8009560:	af00      	add	r7, sp, #0
 8009562:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800956e:	430b      	orrs	r3, r1
 8009570:	f040 8094 	bne.w	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009574:	4b9e      	ldr	r3, [pc, #632]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009578:	f003 0307 	and.w	r3, r3, #7
 800957c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	2b04      	cmp	r3, #4
 8009582:	f200 8087 	bhi.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009586:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095a1 	.word	0x080095a1
 8009590:	080095c9 	.word	0x080095c9
 8009594:	080095f1 	.word	0x080095f1
 8009598:	0800968d 	.word	0x0800968d
 800959c:	08009619 	.word	0x08009619
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095a0:	4b93      	ldr	r3, [pc, #588]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ac:	d108      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 f810 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095bc:	f000 bd45 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095c4:	f000 bd41 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c8:	4b89      	ldr	r3, [pc, #548]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095d4:	d108      	bne.n	80095e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095d6:	f107 0318 	add.w	r3, r7, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fd54 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095e4:	f000 bd31 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ec:	f000 bd2d 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095f0:	4b7f      	ldr	r3, [pc, #508]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095fc:	d108      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095fe:	f107 030c 	add.w	r3, r7, #12
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fe94 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800960c:	f000 bd1d 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009614:	f000 bd19 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009618:	4b75      	ldr	r3, [pc, #468]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800961a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800961c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009620:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009622:	4b73      	ldr	r3, [pc, #460]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b04      	cmp	r3, #4
 800962c:	d10c      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800962e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009634:	4b6e      	ldr	r3, [pc, #440]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	4a6d      	ldr	r2, [pc, #436]	@ (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009646:	e01f      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009648:	4b69      	ldr	r3, [pc, #420]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009654:	d106      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800965c:	d102      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800965e:	4b66      	ldr	r3, [pc, #408]	@ (80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009662:	e011      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009664:	4b62      	ldr	r3, [pc, #392]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009670:	d106      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009678:	d102      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800967a:	4b60      	ldr	r3, [pc, #384]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800967e:	e003      	b.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009684:	f000 bce1 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009688:	f000 bcdf 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800968c:	4b5c      	ldr	r3, [pc, #368]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009690:	f000 bcdb 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009698:	f000 bcd7 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800969c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80096a4:	430b      	orrs	r3, r1
 80096a6:	f040 80ad 	bne.w	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80096aa:	4b51      	ldr	r3, [pc, #324]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80096b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096ba:	d056      	beq.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c2:	f200 8090 	bhi.w	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ca:	f000 8088 	beq.w	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80096d2:	f200 8088 	bhi.w	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	2b80      	cmp	r3, #128	@ 0x80
 80096da:	d032      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	2b80      	cmp	r3, #128	@ 0x80
 80096e0:	f200 8081 	bhi.w	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80096ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ec:	2b40      	cmp	r3, #64	@ 0x40
 80096ee:	d014      	beq.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80096f0:	e079      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096f2:	4b3f      	ldr	r3, [pc, #252]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096fe:	d108      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009704:	4618      	mov	r0, r3
 8009706:	f000 ff67 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800970e:	f000 bc9c 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009716:	f000 bc98 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800971a:	4b35      	ldr	r3, [pc, #212]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009726:	d108      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009728:	f107 0318 	add.w	r3, r7, #24
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fcab 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009736:	f000 bc88 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973e:	f000 bc84 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009742:	4b2b      	ldr	r3, [pc, #172]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800974a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800974e:	d108      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fdeb 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975e:	f000 bc74 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009766:	f000 bc70 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800976a:	4b21      	ldr	r3, [pc, #132]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800976c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800976e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009774:	4b1e      	ldr	r3, [pc, #120]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b04      	cmp	r3, #4
 800977e:	d10c      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009786:	4b1a      	ldr	r3, [pc, #104]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	08db      	lsrs	r3, r3, #3
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	4a18      	ldr	r2, [pc, #96]	@ (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009792:	fa22 f303 	lsr.w	r3, r2, r3
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009798:	e01f      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a6:	d106      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80097a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ae:	d102      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097b0:	4b11      	ldr	r3, [pc, #68]	@ (80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b4:	e011      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097b6:	4b0e      	ldr	r3, [pc, #56]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c2:	d106      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ca:	d102      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097cc:	4b0b      	ldr	r3, [pc, #44]	@ (80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d0:	e003      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097d6:	f000 bc38 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097da:	f000 bc36 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097de:	4b08      	ldr	r3, [pc, #32]	@ (8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e2:	f000 bc32 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ea:	f000 bc2e 	b.w	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ee:	bf00      	nop
 80097f0:	58024400 	.word	0x58024400
 80097f4:	03d09000 	.word	0x03d09000
 80097f8:	003d0900 	.word	0x003d0900
 80097fc:	017d7840 	.word	0x017d7840
 8009800:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009808:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800980c:	430b      	orrs	r3, r1
 800980e:	f040 809c 	bne.w	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009812:	4b9e      	ldr	r3, [pc, #632]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009816:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800981a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009822:	d054      	beq.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800982a:	f200 808b 	bhi.w	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009834:	f000 8083 	beq.w	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800983e:	f200 8081 	bhi.w	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009848:	d02f      	beq.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009850:	d878      	bhi.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800985e:	d012      	beq.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009860:	e070      	b.n	8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009862:	4b8a      	ldr	r3, [pc, #552]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800986a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800986e:	d107      	bne.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009874:	4618      	mov	r0, r3
 8009876:	f000 feaf 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987e:	e3e4      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009884:	e3e1      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009886:	4b81      	ldr	r3, [pc, #516]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800988e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009892:	d107      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009894:	f107 0318 	add.w	r3, r7, #24
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fbf5 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a2:	e3d2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a8:	e3cf      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098aa:	4b78      	ldr	r3, [pc, #480]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b6:	d107      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b8:	f107 030c 	add.w	r3, r7, #12
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fd37 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098c6:	e3c0      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098cc:	e3bd      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ce:	4b6f      	ldr	r3, [pc, #444]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098d8:	4b6c      	ldr	r3, [pc, #432]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d10c      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ea:	4b68      	ldr	r3, [pc, #416]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	08db      	lsrs	r3, r3, #3
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	4a66      	ldr	r2, [pc, #408]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098f6:	fa22 f303 	lsr.w	r3, r2, r3
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098fc:	e01e      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098fe:	4b63      	ldr	r3, [pc, #396]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800990a:	d106      	bne.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009912:	d102      	bne.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009914:	4b5f      	ldr	r3, [pc, #380]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009918:	e010      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800991a:	4b5c      	ldr	r3, [pc, #368]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009926:	d106      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992e:	d102      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009930:	4b59      	ldr	r3, [pc, #356]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009934:	e002      	b.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800993a:	e386      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800993c:	e385      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800993e:	4b57      	ldr	r3, [pc, #348]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e382      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009948:	e37f      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800994a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800994e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009952:	430b      	orrs	r3, r1
 8009954:	f040 80a7 	bne.w	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009958:	4b4c      	ldr	r3, [pc, #304]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800995a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800995c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009960:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009968:	d055      	beq.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009970:	f200 8096 	bhi.w	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800997a:	f000 8084 	beq.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009984:	f200 808c 	bhi.w	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800998e:	d030      	beq.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009996:	f200 8083 	bhi.w	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80099a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099a6:	d012      	beq.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80099a8:	e07a      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099aa:	4b38      	ldr	r3, [pc, #224]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099b6:	d107      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fe0b 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c6:	e340      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099cc:	e33d      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ce:	4b2f      	ldr	r3, [pc, #188]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099da:	d107      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099dc:	f107 0318 	add.w	r3, r7, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fb51 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ea:	e32e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f0:	e32b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fe:	d107      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fc93 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0e:	e31c      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a14:	e319      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a16:	4b1d      	ldr	r3, [pc, #116]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a20:	4b1a      	ldr	r3, [pc, #104]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d10c      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a32:	4b16      	ldr	r3, [pc, #88]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	08db      	lsrs	r3, r3, #3
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	4a14      	ldr	r2, [pc, #80]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a44:	e01e      	b.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a46:	4b11      	ldr	r3, [pc, #68]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a52:	d106      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a60:	e010      	b.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a62:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a6e:	d106      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a76:	d102      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a78:	4b07      	ldr	r3, [pc, #28]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a7c:	e002      	b.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a82:	e2e2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a84:	e2e1      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a86:	4b05      	ldr	r3, [pc, #20]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a8a:	e2de      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a8c:	58024400 	.word	0x58024400
 8009a90:	03d09000 	.word	0x03d09000
 8009a94:	003d0900 	.word	0x003d0900
 8009a98:	017d7840 	.word	0x017d7840
 8009a9c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa4:	e2d1      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aaa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	f040 809c 	bne.w	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009ab4:	4b93      	ldr	r3, [pc, #588]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009abc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac4:	d054      	beq.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009acc:	f200 808b 	bhi.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ad6:	f000 8083 	beq.w	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009adc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ae0:	f200 8081 	bhi.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009aea:	d02f      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009af2:	d878      	bhi.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b00:	d012      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009b02:	e070      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b04:	4b7f      	ldr	r3, [pc, #508]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b10:	d107      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b16:	4618      	mov	r0, r3
 8009b18:	f000 fd5e 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b20:	e293      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b26:	e290      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b28:	4b76      	ldr	r3, [pc, #472]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b34:	d107      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b36:	f107 0318 	add.w	r3, r7, #24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 faa4 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b44:	e281      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4a:	e27e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b58:	d107      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5a:	f107 030c 	add.w	r3, r7, #12
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fbe6 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b68:	e26f      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b6e:	e26c      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b70:	4b64      	ldr	r3, [pc, #400]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b7a:	4b62      	ldr	r3, [pc, #392]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d10c      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d109      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	08db      	lsrs	r3, r3, #3
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	4a5c      	ldr	r2, [pc, #368]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b98:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9e:	e01e      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba0:	4b58      	ldr	r3, [pc, #352]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bac:	d106      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bb4:	d102      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bb6:	4b55      	ldr	r3, [pc, #340]	@ (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bba:	e010      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bbc:	4b51      	ldr	r3, [pc, #324]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc8:	d106      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd0:	d102      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd6:	e002      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bdc:	e235      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bde:	e234      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009be0:	4b4c      	ldr	r3, [pc, #304]	@ (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be4:	e231      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bea:	e22e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	f040 808f 	bne.w	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009bfa:	4b42      	ldr	r3, [pc, #264]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009c02:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c0a:	d06b      	beq.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c12:	d874      	bhi.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c1a:	d056      	beq.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c22:	d86c      	bhi.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c2a:	d03b      	beq.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c32:	d864      	bhi.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c3a:	d021      	beq.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c42:	d85c      	bhi.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c50:	d004      	beq.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c52:	e054      	b.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c54:	f7fe fa62 	bl	800811c <HAL_RCC_GetPCLK1Freq>
 8009c58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c5a:	e1f6      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c5c:	4b29      	ldr	r3, [pc, #164]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c68:	d107      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6a:	f107 0318 	add.w	r3, r7, #24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fa0a 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c78:	e1e7      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7e:	e1e4      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c80:	4b20      	ldr	r3, [pc, #128]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c8c:	d107      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c8e:	f107 030c 	add.w	r3, r7, #12
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 fb4c 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c9c:	e1d5      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca2:	e1d2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ca4:	4b17      	ldr	r3, [pc, #92]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d109      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cb0:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	08db      	lsrs	r3, r3, #3
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	4a13      	ldr	r2, [pc, #76]	@ (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc2:	e1c2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc8:	e1bf      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009cca:	4b0e      	ldr	r3, [pc, #56]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cd6:	d102      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cdc:	e1b5      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce2:	e1b2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ce4:	4b07      	ldr	r3, [pc, #28]	@ (8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf0:	d102      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009cf2:	4b07      	ldr	r3, [pc, #28]	@ (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf6:	e1a8      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cfc:	e1a5      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d02:	e1a2      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d04:	58024400 	.word	0x58024400
 8009d08:	03d09000 	.word	0x03d09000
 8009d0c:	003d0900 	.word	0x003d0900
 8009d10:	017d7840 	.word	0x017d7840
 8009d14:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d1c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d20:	430b      	orrs	r3, r1
 8009d22:	d173      	bne.n	8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d24:	4b9c      	ldr	r3, [pc, #624]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d34:	d02f      	beq.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d3c:	d863      	bhi.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4a:	d012      	beq.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d4c:	e05b      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d4e:	4b92      	ldr	r3, [pc, #584]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d5a:	d107      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d5c:	f107 0318 	add.w	r3, r7, #24
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f991 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d6a:	e16e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d70:	e16b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d72:	4b89      	ldr	r3, [pc, #548]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d7e:	d107      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d80:	f107 030c 	add.w	r3, r7, #12
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fad3 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d8e:	e15c      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d94:	e159      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d96:	4b80      	ldr	r3, [pc, #512]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009da0:	4b7d      	ldr	r3, [pc, #500]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d10c      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db2:	4b79      	ldr	r3, [pc, #484]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	08db      	lsrs	r3, r3, #3
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	4a77      	ldr	r2, [pc, #476]	@ (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dc4:	e01e      	b.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dc6:	4b74      	ldr	r3, [pc, #464]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dd2:	d106      	bne.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dda:	d102      	bne.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ddc:	4b70      	ldr	r3, [pc, #448]	@ (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009de0:	e010      	b.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009de2:	4b6d      	ldr	r3, [pc, #436]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dee:	d106      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df6:	d102      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009df8:	4b6a      	ldr	r3, [pc, #424]	@ (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dfc:	e002      	b.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e02:	e122      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e04:	e121      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0a:	e11e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e10:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009e14:	430b      	orrs	r3, r1
 8009e16:	d133      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009e18:	4b5f      	ldr	r3, [pc, #380]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e2e:	d012      	beq.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e30:	e023      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e32:	4b59      	ldr	r3, [pc, #356]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e3e:	d107      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fbc7 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e4e:	e0fc      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e54:	e0f9      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e56:	4b50      	ldr	r3, [pc, #320]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e62:	d107      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e64:	f107 0318 	add.w	r3, r7, #24
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f90d 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e72:	e0ea      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e78:	e0e7      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7e:	e0e4      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e84:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	f040 808d 	bne.w	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009e8e:	4b42      	ldr	r3, [pc, #264]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009e96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e9e:	d06b      	beq.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ea6:	d874      	bhi.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eae:	d056      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb6:	d86c      	bhi.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ebe:	d03b      	beq.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ec6:	d864      	bhi.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ece:	d021      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed6:	d85c      	bhi.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ee4:	d004      	beq.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009ee6:	e054      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ee8:	f000 f8b8 	bl	800a05c <HAL_RCCEx_GetD3PCLK1Freq>
 8009eec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009eee:	e0ac      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ef0:	4b29      	ldr	r3, [pc, #164]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009efc:	d107      	bne.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efe:	f107 0318 	add.w	r3, r7, #24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f8c0 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f0c:	e09d      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f12:	e09a      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f14:	4b20      	ldr	r3, [pc, #128]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f20:	d107      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f22:	f107 030c 	add.w	r3, r7, #12
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fa02 	bl	800a330 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f30:	e08b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f36:	e088      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f38:	4b17      	ldr	r3, [pc, #92]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d109      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f44:	4b14      	ldr	r3, [pc, #80]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	08db      	lsrs	r3, r3, #3
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	4a13      	ldr	r2, [pc, #76]	@ (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f50:	fa22 f303 	lsr.w	r3, r2, r3
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f56:	e078      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5c:	e075      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f6a:	d102      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f70:	e06b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f76:	e068      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f78:	4b07      	ldr	r3, [pc, #28]	@ (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f84:	d102      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009f86:	4b07      	ldr	r3, [pc, #28]	@ (8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8a:	e05e      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	e05b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f96:	e058      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f98:	58024400 	.word	0x58024400
 8009f9c:	03d09000 	.word	0x03d09000
 8009fa0:	003d0900 	.word	0x003d0900
 8009fa4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	d148      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009fb4:	4b27      	ldr	r3, [pc, #156]	@ (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fc4:	d02a      	beq.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fcc:	d838      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fda:	d00d      	beq.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009fdc:	e030      	b.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fde:	4b1d      	ldr	r3, [pc, #116]	@ (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fea:	d102      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009fec:	4b1a      	ldr	r3, [pc, #104]	@ (800a058 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff0:	e02b      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff6:	e028      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ff8:	4b16      	ldr	r3, [pc, #88]	@ (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a000:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a004:	d107      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fae4 	bl	800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a014:	e019      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a01a:	e016      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a01c:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a024:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a028:	d107      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a02a:	f107 0318 	add.w	r3, r7, #24
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f82a 	bl	800a088 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a038:	e007      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a03e:	e004      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a044:	e001      	b.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3740      	adds	r7, #64	@ 0x40
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400
 800a058:	017d7840 	.word	0x017d7840

0800a05c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a060:	f7fe f82c 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 800a064:	4602      	mov	r2, r0
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	091b      	lsrs	r3, r3, #4
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	4904      	ldr	r1, [pc, #16]	@ (800a084 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a072:	5ccb      	ldrb	r3, [r1, r3]
 800a074:	f003 031f 	and.w	r3, r3, #31
 800a078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	58024400 	.word	0x58024400
 800a084:	0800f744 	.word	0x0800f744

0800a088 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a088:	b480      	push	{r7}
 800a08a:	b089      	sub	sp, #36	@ 0x24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a090:	4ba1      	ldr	r3, [pc, #644]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a09a:	4b9f      	ldr	r3, [pc, #636]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09e:	0b1b      	lsrs	r3, r3, #12
 800a0a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a0a6:	4b9c      	ldr	r3, [pc, #624]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0aa:	091b      	lsrs	r3, r3, #4
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a0b2:	4b99      	ldr	r3, [pc, #612]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8111 	beq.w	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	f000 8083 	beq.w	800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	f200 80a1 	bhi.w	800a228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d056      	beq.n	800a1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0f2:	e099      	b.n	800a228 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0f4:	4b88      	ldr	r3, [pc, #544]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d02d      	beq.n	800a15c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a100:	4b85      	ldr	r3, [pc, #532]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	08db      	lsrs	r3, r3, #3
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	4a84      	ldr	r2, [pc, #528]	@ (800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
 800a110:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	ee07 3a90 	vmov	s15, r3
 800a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12a:	4b7b      	ldr	r3, [pc, #492]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a13e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a156:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a15a:	e087      	b.n	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a166:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a324 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16e:	4b6a      	ldr	r3, [pc, #424]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a182:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a19e:	e065      	b.n	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b2:	4b59      	ldr	r3, [pc, #356]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1e2:	e043      	b.n	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a32c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f6:	4b48      	ldr	r3, [pc, #288]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a206:	ed97 6a03 	vldr	s12, [r7, #12]
 800a20a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a226:	e021      	b.n	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a232:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23a:	4b37      	ldr	r3, [pc, #220]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a24e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a26a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a26c:	4b2a      	ldr	r3, [pc, #168]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a270:	0a5b      	lsrs	r3, r3, #9
 800a272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a282:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a286:	edd7 6a07 	vldr	s13, [r7, #28]
 800a28a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a292:	ee17 2a90 	vmov	r2, s15
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a29a:	4b1f      	ldr	r3, [pc, #124]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2c0:	ee17 2a90 	vmov	r2, s15
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a2c8:	4b13      	ldr	r3, [pc, #76]	@ (800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2cc:	0e1b      	lsrs	r3, r3, #24
 800a2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ee:	ee17 2a90 	vmov	r2, s15
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2f6:	e008      	b.n	800a30a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	609a      	str	r2, [r3, #8]
}
 800a30a:	bf00      	nop
 800a30c:	3724      	adds	r7, #36	@ 0x24
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	58024400 	.word	0x58024400
 800a31c:	03d09000 	.word	0x03d09000
 800a320:	46000000 	.word	0x46000000
 800a324:	4c742400 	.word	0x4c742400
 800a328:	4a742400 	.word	0x4a742400
 800a32c:	4bbebc20 	.word	0x4bbebc20

0800a330 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a330:	b480      	push	{r7}
 800a332:	b089      	sub	sp, #36	@ 0x24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a338:	4ba1      	ldr	r3, [pc, #644]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a342:	4b9f      	ldr	r3, [pc, #636]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a346:	0d1b      	lsrs	r3, r3, #20
 800a348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a34c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a34e:	4b9c      	ldr	r3, [pc, #624]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	f003 0301 	and.w	r3, r3, #1
 800a358:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a35a:	4b99      	ldr	r3, [pc, #612]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35e:	08db      	lsrs	r3, r3, #3
 800a360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8111 	beq.w	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b02      	cmp	r3, #2
 800a382:	f000 8083 	beq.w	800a48c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	f200 80a1 	bhi.w	800a4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d056      	beq.n	800a448 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a39a:	e099      	b.n	800a4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a39c:	4b88      	ldr	r3, [pc, #544]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0320 	and.w	r3, r3, #32
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02d      	beq.n	800a404 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3a8:	4b85      	ldr	r3, [pc, #532]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	08db      	lsrs	r3, r3, #3
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	4a84      	ldr	r2, [pc, #528]	@ (800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a402:	e087      	b.n	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	ee07 3a90 	vmov	s15, r3
 800a40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a5cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a416:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a426:	ed97 6a03 	vldr	s12, [r7, #12]
 800a42a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a446:	e065      	b.n	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a452:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45a:	4b59      	ldr	r3, [pc, #356]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a46e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a48a:	e043      	b.n	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	ee07 3a90 	vmov	s15, r3
 800a492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a496:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a49e:	4b48      	ldr	r3, [pc, #288]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ce:	e021      	b.n	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e2:	4b37      	ldr	r3, [pc, #220]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a512:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a514:	4b2a      	ldr	r3, [pc, #168]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a518:	0a5b      	lsrs	r3, r3, #9
 800a51a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a52a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a52e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a53a:	ee17 2a90 	vmov	r2, s15
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a542:	4b1f      	ldr	r3, [pc, #124]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a55c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a568:	ee17 2a90 	vmov	r2, s15
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a570:	4b13      	ldr	r3, [pc, #76]	@ (800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a574:	0e1b      	lsrs	r3, r3, #24
 800a576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a586:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a58a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a58e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a596:	ee17 2a90 	vmov	r2, s15
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a59e:	e008      	b.n	800a5b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	609a      	str	r2, [r3, #8]
}
 800a5b2:	bf00      	nop
 800a5b4:	3724      	adds	r7, #36	@ 0x24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	58024400 	.word	0x58024400
 800a5c4:	03d09000 	.word	0x03d09000
 800a5c8:	46000000 	.word	0x46000000
 800a5cc:	4c742400 	.word	0x4c742400
 800a5d0:	4a742400 	.word	0x4a742400
 800a5d4:	4bbebc20 	.word	0x4bbebc20

0800a5d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b089      	sub	sp, #36	@ 0x24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5e0:	4ba0      	ldr	r3, [pc, #640]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a5ea:	4b9e      	ldr	r3, [pc, #632]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ee:	091b      	lsrs	r3, r3, #4
 800a5f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5f6:	4b9b      	ldr	r3, [pc, #620]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a600:	4b98      	ldr	r3, [pc, #608]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a604:	08db      	lsrs	r3, r3, #3
 800a606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	fb02 f303 	mul.w	r3, r2, r3
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a618:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 8111 	beq.w	800a846 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	2b02      	cmp	r3, #2
 800a628:	f000 8083 	beq.w	800a732 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	f200 80a1 	bhi.w	800a776 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d056      	beq.n	800a6ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a640:	e099      	b.n	800a776 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a642:	4b88      	ldr	r3, [pc, #544]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d02d      	beq.n	800a6aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64e:	4b85      	ldr	r3, [pc, #532]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	08db      	lsrs	r3, r3, #3
 800a654:	f003 0303 	and.w	r3, r3, #3
 800a658:	4a83      	ldr	r2, [pc, #524]	@ (800a868 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a65a:	fa22 f303 	lsr.w	r3, r2, r3
 800a65e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a678:	4b7a      	ldr	r3, [pc, #488]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a688:	ed97 6a03 	vldr	s12, [r7, #12]
 800a68c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a69c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6a8:	e087      	b.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	ee07 3a90 	vmov	s15, r3
 800a6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6bc:	4b69      	ldr	r3, [pc, #420]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c4:	ee07 3a90 	vmov	s15, r3
 800a6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6ec:	e065      	b.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	ee07 3a90 	vmov	s15, r3
 800a6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a874 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a6fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a700:	4b58      	ldr	r3, [pc, #352]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a710:	ed97 6a03 	vldr	s12, [r7, #12]
 800a714:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a730:	e043      	b.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	ee07 3a90 	vmov	s15, r3
 800a738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a878 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a744:	4b47      	ldr	r3, [pc, #284]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a754:	ed97 6a03 	vldr	s12, [r7, #12]
 800a758:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a75c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a76c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a774:	e021      	b.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a780:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a788:	4b36      	ldr	r3, [pc, #216]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a798:	ed97 6a03 	vldr	s12, [r7, #12]
 800a79c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a86c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a7ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7be:	0a5b      	lsrs	r3, r3, #9
 800a7c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e0:	ee17 2a90 	vmov	r2, s15
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a7e8:	4b1e      	ldr	r3, [pc, #120]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a802:	edd7 6a07 	vldr	s13, [r7, #28]
 800a806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a80a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a80e:	ee17 2a90 	vmov	r2, s15
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a816:	4b13      	ldr	r3, [pc, #76]	@ (800a864 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a81a:	0e1b      	lsrs	r3, r3, #24
 800a81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a820:	ee07 3a90 	vmov	s15, r3
 800a824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a82c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a830:	edd7 6a07 	vldr	s13, [r7, #28]
 800a834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83c:	ee17 2a90 	vmov	r2, s15
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a844:	e008      	b.n	800a858 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	609a      	str	r2, [r3, #8]
}
 800a858:	bf00      	nop
 800a85a:	3724      	adds	r7, #36	@ 0x24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	58024400 	.word	0x58024400
 800a868:	03d09000 	.word	0x03d09000
 800a86c:	46000000 	.word	0x46000000
 800a870:	4c742400 	.word	0x4c742400
 800a874:	4a742400 	.word	0x4a742400
 800a878:	4bbebc20 	.word	0x4bbebc20

0800a87c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a88a:	4b53      	ldr	r3, [pc, #332]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b03      	cmp	r3, #3
 800a894:	d101      	bne.n	800a89a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e099      	b.n	800a9ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a89a:	4b4f      	ldr	r3, [pc, #316]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a4e      	ldr	r2, [pc, #312]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a8a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8a6:	f7f9 fcb3 	bl	8004210 <HAL_GetTick>
 800a8aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8ac:	e008      	b.n	800a8c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8ae:	f7f9 fcaf 	bl	8004210 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d901      	bls.n	800a8c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e086      	b.n	800a9ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8c0:	4b45      	ldr	r3, [pc, #276]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1f0      	bne.n	800a8ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8cc:	4b42      	ldr	r3, [pc, #264]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	031b      	lsls	r3, r3, #12
 800a8da:	493f      	ldr	r1, [pc, #252]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	025b      	lsls	r3, r3, #9
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	041b      	lsls	r3, r3, #16
 800a8fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	3b01      	subs	r3, #1
 800a90a:	061b      	lsls	r3, r3, #24
 800a90c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a910:	4931      	ldr	r1, [pc, #196]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a912:	4313      	orrs	r3, r2
 800a914:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a916:	4b30      	ldr	r3, [pc, #192]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a91a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	492d      	ldr	r1, [pc, #180]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a924:	4313      	orrs	r3, r2
 800a926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a928:	4b2b      	ldr	r3, [pc, #172]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a92c:	f023 0220 	bic.w	r2, r3, #32
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	4928      	ldr	r1, [pc, #160]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a936:	4313      	orrs	r3, r2
 800a938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a93a:	4b27      	ldr	r3, [pc, #156]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93e:	4a26      	ldr	r2, [pc, #152]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a940:	f023 0310 	bic.w	r3, r3, #16
 800a944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a946:	4b24      	ldr	r3, [pc, #144]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a94a:	4b24      	ldr	r3, [pc, #144]	@ (800a9dc <RCCEx_PLL2_Config+0x160>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	69d2      	ldr	r2, [r2, #28]
 800a952:	00d2      	lsls	r2, r2, #3
 800a954:	4920      	ldr	r1, [pc, #128]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a956:	4313      	orrs	r3, r2
 800a958:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a95a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a960:	f043 0310 	orr.w	r3, r3, #16
 800a964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a96c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a970:	4a19      	ldr	r2, [pc, #100]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a978:	e00f      	b.n	800a99a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d106      	bne.n	800a98e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a980:	4b15      	ldr	r3, [pc, #84]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a984:	4a14      	ldr	r2, [pc, #80]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a98a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a98c:	e005      	b.n	800a99a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a98e:	4b12      	ldr	r3, [pc, #72]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	4a11      	ldr	r2, [pc, #68]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a99a:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a0e      	ldr	r2, [pc, #56]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a9a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9a6:	f7f9 fc33 	bl	8004210 <HAL_GetTick>
 800a9aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9ac:	e008      	b.n	800a9c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9ae:	f7f9 fc2f 	bl	8004210 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d901      	bls.n	800a9c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e006      	b.n	800a9ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9c0:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <RCCEx_PLL2_Config+0x15c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0f0      	beq.n	800a9ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	ffff0007 	.word	0xffff0007

0800a9e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9ee:	4b53      	ldr	r3, [pc, #332]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d101      	bne.n	800a9fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e099      	b.n	800ab32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a9fe:	4b4f      	ldr	r3, [pc, #316]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a4e      	ldr	r2, [pc, #312]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa0a:	f7f9 fc01 	bl	8004210 <HAL_GetTick>
 800aa0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa10:	e008      	b.n	800aa24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa12:	f7f9 fbfd 	bl	8004210 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e086      	b.n	800ab32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa24:	4b45      	ldr	r3, [pc, #276]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1f0      	bne.n	800aa12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa30:	4b42      	ldr	r3, [pc, #264]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	493f      	ldr	r1, [pc, #252]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	025b      	lsls	r3, r3, #9
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa66:	431a      	orrs	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	061b      	lsls	r3, r3, #24
 800aa70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa74:	4931      	ldr	r1, [pc, #196]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa7a:	4b30      	ldr	r3, [pc, #192]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	492d      	ldr	r1, [pc, #180]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	4928      	ldr	r1, [pc, #160]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa9e:	4b27      	ldr	r3, [pc, #156]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa2:	4a26      	ldr	r2, [pc, #152]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aaaa:	4b24      	ldr	r3, [pc, #144]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aaae:	4b24      	ldr	r3, [pc, #144]	@ (800ab40 <RCCEx_PLL3_Config+0x160>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	69d2      	ldr	r2, [r2, #28]
 800aab6:	00d2      	lsls	r2, r2, #3
 800aab8:	4920      	ldr	r1, [pc, #128]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aabe:	4b1f      	ldr	r3, [pc, #124]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aad0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad4:	4a19      	ldr	r2, [pc, #100]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aad6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aada:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aadc:	e00f      	b.n	800aafe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d106      	bne.n	800aaf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aae4:	4b15      	ldr	r3, [pc, #84]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae8:	4a14      	ldr	r2, [pc, #80]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aaee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aaf0:	e005      	b.n	800aafe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aaf2:	4b12      	ldr	r3, [pc, #72]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf6:	4a11      	ldr	r2, [pc, #68]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800aaf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aafc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aafe:	4b0f      	ldr	r3, [pc, #60]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a0e      	ldr	r2, [pc, #56]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800ab04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab0a:	f7f9 fb81 	bl	8004210 <HAL_GetTick>
 800ab0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab10:	e008      	b.n	800ab24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab12:	f7f9 fb7d 	bl	8004210 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d901      	bls.n	800ab24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e006      	b.n	800ab32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab24:	4b05      	ldr	r3, [pc, #20]	@ (800ab3c <RCCEx_PLL3_Config+0x15c>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	58024400 	.word	0x58024400
 800ab40:	ffff0007 	.word	0xffff0007

0800ab44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e10f      	b.n	800ad76 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a87      	ldr	r2, [pc, #540]	@ (800ad80 <HAL_SPI_Init+0x23c>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00f      	beq.n	800ab86 <HAL_SPI_Init+0x42>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a86      	ldr	r2, [pc, #536]	@ (800ad84 <HAL_SPI_Init+0x240>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00a      	beq.n	800ab86 <HAL_SPI_Init+0x42>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a84      	ldr	r2, [pc, #528]	@ (800ad88 <HAL_SPI_Init+0x244>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d005      	beq.n	800ab86 <HAL_SPI_Init+0x42>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	2b0f      	cmp	r3, #15
 800ab80:	d901      	bls.n	800ab86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e0f7      	b.n	800ad76 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fe2e 	bl	800b7e8 <SPI_GetPacketSize>
 800ab8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a7b      	ldr	r2, [pc, #492]	@ (800ad80 <HAL_SPI_Init+0x23c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d00c      	beq.n	800abb2 <HAL_SPI_Init+0x6e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a79      	ldr	r2, [pc, #484]	@ (800ad84 <HAL_SPI_Init+0x240>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d007      	beq.n	800abb2 <HAL_SPI_Init+0x6e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a78      	ldr	r2, [pc, #480]	@ (800ad88 <HAL_SPI_Init+0x244>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d002      	beq.n	800abb2 <HAL_SPI_Init+0x6e>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d811      	bhi.n	800abd6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800abb6:	4a72      	ldr	r2, [pc, #456]	@ (800ad80 <HAL_SPI_Init+0x23c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d009      	beq.n	800abd0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a70      	ldr	r2, [pc, #448]	@ (800ad84 <HAL_SPI_Init+0x240>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d004      	beq.n	800abd0 <HAL_SPI_Init+0x8c>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a6f      	ldr	r2, [pc, #444]	@ (800ad88 <HAL_SPI_Init+0x244>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d104      	bne.n	800abda <HAL_SPI_Init+0x96>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b10      	cmp	r3, #16
 800abd4:	d901      	bls.n	800abda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e0cd      	b.n	800ad76 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d106      	bne.n	800abf4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7f6 fee6 	bl	80019c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0201 	bic.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ac16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac20:	d119      	bne.n	800ac56 <HAL_SPI_Init+0x112>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac2a:	d103      	bne.n	800ac34 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10c      	bne.n	800ac56 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac44:	d107      	bne.n	800ac56 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00f      	beq.n	800ac82 <HAL_SPI_Init+0x13e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	2b06      	cmp	r3, #6
 800ac68:	d90b      	bls.n	800ac82 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	e007      	b.n	800ac92 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	431a      	orrs	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca4:	ea42 0103 	orr.w	r1, r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	431a      	orrs	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ace6:	431a      	orrs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acf2:	ea42 0103 	orr.w	r1, r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d113      	bne.n	800ad32 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0201 	bic.w	r2, r2, #1
 800ad40:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	40013000 	.word	0x40013000
 800ad84:	40003800 	.word	0x40003800
 800ad88:	40003c00 	.word	0x40003c00

0800ad8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3320      	adds	r3, #32
 800ada2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ada4:	f7f9 fa34 	bl	8004210 <HAL_GetTick>
 800ada8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d001      	beq.n	800adba <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800adb6:	2302      	movs	r3, #2
 800adb8:	e1d1      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <HAL_SPI_Transmit+0x3a>
 800adc0:	88fb      	ldrh	r3, [r7, #6]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e1c9      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_SPI_Transmit+0x4c>
 800add4:	2302      	movs	r3, #2
 800add6:	e1c2      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2203      	movs	r2, #3
 800ade4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	88fa      	ldrh	r2, [r7, #6]
 800adfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	88fa      	ldrh	r2, [r7, #6]
 800ae02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ae30:	d108      	bne.n	800ae44 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	e009      	b.n	800ae58 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ae56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	4b96      	ldr	r3, [pc, #600]	@ (800b0b8 <HAL_SPI_Transmit+0x32c>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	88f9      	ldrh	r1, [r7, #6]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae84:	d107      	bne.n	800ae96 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	2b0f      	cmp	r3, #15
 800ae9c:	d947      	bls.n	800af2e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ae9e:	e03f      	b.n	800af20 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d114      	bne.n	800aed8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6812      	ldr	r2, [r2, #0]
 800aeb8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aebe:	1d1a      	adds	r2, r3, #4
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aed6:	e023      	b.n	800af20 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aed8:	f7f9 f99a 	bl	8004210 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d803      	bhi.n	800aef0 <HAL_SPI_Transmit+0x164>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeee:	d102      	bne.n	800aef6 <HAL_SPI_Transmit+0x16a>
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d114      	bne.n	800af20 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 fba8 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e11e      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af26:	b29b      	uxth	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1b9      	bne.n	800aea0 <HAL_SPI_Transmit+0x114>
 800af2c:	e0f1      	b.n	800b112 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	2b07      	cmp	r3, #7
 800af34:	f240 80e6 	bls.w	800b104 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800af38:	e05d      	b.n	800aff6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b02      	cmp	r3, #2
 800af46:	d132      	bne.n	800afae <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af4e:	b29b      	uxth	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	d918      	bls.n	800af86 <HAL_SPI_Transmit+0x1fa>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d014      	beq.n	800af86 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6812      	ldr	r2, [r2, #0]
 800af66:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af78:	b29b      	uxth	r3, r3
 800af7a:	3b02      	subs	r3, #2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800af84:	e037      	b.n	800aff6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af8a:	881a      	ldrh	r2, [r3, #0]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af94:	1c9a      	adds	r2, r3, #2
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800afac:	e023      	b.n	800aff6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afae:	f7f9 f92f 	bl	8004210 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d803      	bhi.n	800afc6 <HAL_SPI_Transmit+0x23a>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc4:	d102      	bne.n	800afcc <HAL_SPI_Transmit+0x240>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d114      	bne.n	800aff6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f000 fb3d 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e0b3      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800affc:	b29b      	uxth	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d19b      	bne.n	800af3a <HAL_SPI_Transmit+0x1ae>
 800b002:	e086      	b.n	800b112 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d154      	bne.n	800b0bc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b018:	b29b      	uxth	r3, r3
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d918      	bls.n	800b050 <HAL_SPI_Transmit+0x2c4>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b022:	2b40      	cmp	r3, #64	@ 0x40
 800b024:	d914      	bls.n	800b050 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6812      	ldr	r2, [r2, #0]
 800b030:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b042:	b29b      	uxth	r3, r3
 800b044:	3b04      	subs	r3, #4
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b04e:	e059      	b.n	800b104 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d917      	bls.n	800b08c <HAL_SPI_Transmit+0x300>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d013      	beq.n	800b08c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b068:	881a      	ldrh	r2, [r3, #0]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b072:	1c9a      	adds	r2, r3, #2
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3b02      	subs	r3, #2
 800b082:	b29a      	uxth	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b08a:	e03b      	b.n	800b104 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3320      	adds	r3, #32
 800b096:	7812      	ldrb	r2, [r2, #0]
 800b098:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b0b6:	e025      	b.n	800b104 <HAL_SPI_Transmit+0x378>
 800b0b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0bc:	f7f9 f8a8 	bl	8004210 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d803      	bhi.n	800b0d4 <HAL_SPI_Transmit+0x348>
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d2:	d102      	bne.n	800b0da <HAL_SPI_Transmit+0x34e>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d114      	bne.n	800b104 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 fab6 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e02c      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f47f af79 	bne.w	800b004 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	2108      	movs	r1, #8
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fb35 	bl	800b78c <SPI_WaitOnFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b12e:	f043 0220 	orr.w	r2, r3, #32
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fa87 	bl	800b64c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b15c:	2300      	movs	r3, #0
  }
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop

0800b168 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b17c:	095b      	lsrs	r3, r3, #5
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3301      	adds	r3, #1
 800b182:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3330      	adds	r3, #48	@ 0x30
 800b18a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b18c:	f7f9 f840 	bl	8004210 <HAL_GetTick>
 800b190:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d001      	beq.n	800b1a2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e250      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <HAL_SPI_Receive+0x46>
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e248      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d101      	bne.n	800b1c0 <HAL_SPI_Receive+0x58>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	e241      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	88fa      	ldrh	r2, [r7, #6]
 800b1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b218:	d108      	bne.n	800b22c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	e009      	b.n	800b240 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b23e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	4b95      	ldr	r3, [pc, #596]	@ (800b49c <HAL_SPI_Receive+0x334>)
 800b248:	4013      	ands	r3, r2
 800b24a:	88f9      	ldrh	r1, [r7, #6]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	430b      	orrs	r3, r1
 800b252:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b26c:	d107      	bne.n	800b27e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b27c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	2b0f      	cmp	r3, #15
 800b284:	d96c      	bls.n	800b360 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b286:	e064      	b.n	800b352 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d114      	bne.n	800b2c8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b2a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b2c6:	e044      	b.n	800b352 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	8bfa      	ldrh	r2, [r7, #30]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d919      	bls.n	800b30a <HAL_SPI_Receive+0x1a2>
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d014      	beq.n	800b30a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b2ea:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2f0:	1d1a      	adds	r2, r3, #4
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b308:	e023      	b.n	800b352 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b30a:	f7f8 ff81 	bl	8004210 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d803      	bhi.n	800b322 <HAL_SPI_Receive+0x1ba>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d102      	bne.n	800b328 <HAL_SPI_Receive+0x1c0>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 f98f 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b334:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e178      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b358:	b29b      	uxth	r3, r3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d194      	bne.n	800b288 <HAL_SPI_Receive+0x120>
 800b35e:	e15e      	b.n	800b61e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	2b07      	cmp	r3, #7
 800b366:	f240 8153 	bls.w	800b610 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b36a:	e08f      	b.n	800b48c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d114      	bne.n	800b3ac <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	8812      	ldrh	r2, [r2, #0]
 800b38a:	b292      	uxth	r2, r2
 800b38c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b392:	1c9a      	adds	r2, r3, #2
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b3aa:	e06f      	b.n	800b48c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	8bfa      	ldrh	r2, [r7, #30]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d924      	bls.n	800b404 <HAL_SPI_Receive+0x29c>
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01f      	beq.n	800b404 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3c8:	69ba      	ldr	r2, [r7, #24]
 800b3ca:	8812      	ldrh	r2, [r2, #0]
 800b3cc:	b292      	uxth	r2, r2
 800b3ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3d4:	1c9a      	adds	r2, r3, #2
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	8812      	ldrh	r2, [r2, #0]
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3ea:	1c9a      	adds	r2, r3, #2
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	3b02      	subs	r3, #2
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b402:	e043      	b.n	800b48c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d119      	bne.n	800b444 <HAL_SPI_Receive+0x2dc>
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d014      	beq.n	800b444 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	8812      	ldrh	r2, [r2, #0]
 800b422:	b292      	uxth	r2, r2
 800b424:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b42a:	1c9a      	adds	r2, r3, #2
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b442:	e023      	b.n	800b48c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b444:	f7f8 fee4 	bl	8004210 <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d803      	bhi.n	800b45c <HAL_SPI_Receive+0x2f4>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d102      	bne.n	800b462 <HAL_SPI_Receive+0x2fa>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d114      	bne.n	800b48c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f8f2 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b46e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e0db      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	f47f af69 	bne.w	800b36c <HAL_SPI_Receive+0x204>
 800b49a:	e0c0      	b.n	800b61e <HAL_SPI_Receive+0x4b6>
 800b49c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d117      	bne.n	800b4e6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4c2:	7812      	ldrb	r2, [r2, #0]
 800b4c4:	b2d2      	uxtb	r2, r2
 800b4c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b4e4:	e094      	b.n	800b610 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	8bfa      	ldrh	r2, [r7, #30]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d946      	bls.n	800b582 <HAL_SPI_Receive+0x41a>
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d041      	beq.n	800b582 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b50a:	7812      	ldrb	r2, [r2, #0]
 800b50c:	b2d2      	uxtb	r2, r2
 800b50e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b526:	7812      	ldrb	r2, [r2, #0]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b55e:	7812      	ldrb	r2, [r2, #0]
 800b560:	b2d2      	uxtb	r2, r2
 800b562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b574:	b29b      	uxth	r3, r3
 800b576:	3b04      	subs	r3, #4
 800b578:	b29a      	uxth	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b580:	e046      	b.n	800b610 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b588:	b29b      	uxth	r3, r3
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d81c      	bhi.n	800b5c8 <HAL_SPI_Receive+0x460>
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d017      	beq.n	800b5c8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5a4:	7812      	ldrb	r2, [r2, #0]
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b5c6:	e023      	b.n	800b610 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5c8:	f7f8 fe22 	bl	8004210 <HAL_GetTick>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d803      	bhi.n	800b5e0 <HAL_SPI_Receive+0x478>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5de:	d102      	bne.n	800b5e6 <HAL_SPI_Receive+0x47e>
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d114      	bne.n	800b610 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 f830 	bl	800b64c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e019      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b616:	b29b      	uxth	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f47f af41 	bne.w	800b4a0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f814 	bl	800b64c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b642:	2300      	movs	r3, #0
  }
}
 800b644:	4618      	mov	r0, r3
 800b646:	3720      	adds	r7, #32
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699a      	ldr	r2, [r3, #24]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0208 	orr.w	r2, r2, #8
 800b66a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	699a      	ldr	r2, [r3, #24]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0210 	orr.w	r2, r2, #16
 800b67a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f022 0201 	bic.w	r2, r2, #1
 800b68a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6919      	ldr	r1, [r3, #16]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b3c      	ldr	r3, [pc, #240]	@ (800b788 <SPI_CloseTransfer+0x13c>)
 800b698:	400b      	ands	r3, r1
 800b69a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b6aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	d014      	beq.n	800b6e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0220 	orr.w	r2, r2, #32
 800b6e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d014      	beq.n	800b718 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00f      	beq.n	800b718 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6fe:	f043 0204 	orr.w	r2, r3, #4
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	699a      	ldr	r2, [r3, #24]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b716:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b728:	f043 0201 	orr.w	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	699a      	ldr	r2, [r3, #24]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b740:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00f      	beq.n	800b76c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b752:	f043 0208 	orr.w	r2, r3, #8
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	699a      	ldr	r2, [r3, #24]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b76a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b77c:	bf00      	nop
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	fffffc90 	.word	0xfffffc90

0800b78c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	4613      	mov	r3, r2
 800b79a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b79c:	e010      	b.n	800b7c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b79e:	f7f8 fd37 	bl	8004210 <HAL_GetTick>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d803      	bhi.n	800b7b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b4:	d102      	bne.n	800b7bc <SPI_WaitOnFlagUntilTimeout+0x30>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e00f      	b.n	800b7e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	695a      	ldr	r2, [r3, #20]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2301      	moveq	r3, #1
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d0df      	beq.n	800b79e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f4:	095b      	lsrs	r3, r3, #5
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	3307      	adds	r3, #7
 800b806:	08db      	lsrs	r3, r3, #3
 800b808:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e049      	b.n	800b8c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7f6 fb8d 	bl	8001f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2202      	movs	r2, #2
 800b84e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	4610      	mov	r0, r2
 800b85e:	f000 f949 	bl	800baf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d101      	bne.n	800b8ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	e0ff      	b.n	800baea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b14      	cmp	r3, #20
 800b8f6:	f200 80f0 	bhi.w	800bada <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b900 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b955 	.word	0x0800b955
 800b904:	0800badb 	.word	0x0800badb
 800b908:	0800badb 	.word	0x0800badb
 800b90c:	0800badb 	.word	0x0800badb
 800b910:	0800b995 	.word	0x0800b995
 800b914:	0800badb 	.word	0x0800badb
 800b918:	0800badb 	.word	0x0800badb
 800b91c:	0800badb 	.word	0x0800badb
 800b920:	0800b9d7 	.word	0x0800b9d7
 800b924:	0800badb 	.word	0x0800badb
 800b928:	0800badb 	.word	0x0800badb
 800b92c:	0800badb 	.word	0x0800badb
 800b930:	0800ba17 	.word	0x0800ba17
 800b934:	0800badb 	.word	0x0800badb
 800b938:	0800badb 	.word	0x0800badb
 800b93c:	0800badb 	.word	0x0800badb
 800b940:	0800ba59 	.word	0x0800ba59
 800b944:	0800badb 	.word	0x0800badb
 800b948:	0800badb 	.word	0x0800badb
 800b94c:	0800badb 	.word	0x0800badb
 800b950:	0800ba99 	.word	0x0800ba99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f96a 	bl	800bc34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699a      	ldr	r2, [r3, #24]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f042 0208 	orr.w	r2, r2, #8
 800b96e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 0204 	bic.w	r2, r2, #4
 800b97e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6999      	ldr	r1, [r3, #24]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	691a      	ldr	r2, [r3, #16]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	619a      	str	r2, [r3, #24]
      break;
 800b992:	e0a5      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f9da 	bl	800bd54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	699a      	ldr	r2, [r3, #24]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699a      	ldr	r2, [r3, #24]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6999      	ldr	r1, [r3, #24]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	021a      	lsls	r2, r3, #8
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	619a      	str	r2, [r3, #24]
      break;
 800b9d4:	e084      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 fa43 	bl	800be68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69da      	ldr	r2, [r3, #28]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0208 	orr.w	r2, r2, #8
 800b9f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	69da      	ldr	r2, [r3, #28]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0204 	bic.w	r2, r2, #4
 800ba00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69d9      	ldr	r1, [r3, #28]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	61da      	str	r2, [r3, #28]
      break;
 800ba14:	e064      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68b9      	ldr	r1, [r7, #8]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 faab 	bl	800bf78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69da      	ldr	r2, [r3, #28]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69da      	ldr	r2, [r3, #28]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69d9      	ldr	r1, [r3, #28]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	021a      	lsls	r2, r3, #8
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	61da      	str	r2, [r3, #28]
      break;
 800ba56:	e043      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68b9      	ldr	r1, [r7, #8]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 faf4 	bl	800c04c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f042 0208 	orr.w	r2, r2, #8
 800ba72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f022 0204 	bic.w	r2, r2, #4
 800ba82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	691a      	ldr	r2, [r3, #16]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ba96:	e023      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68b9      	ldr	r1, [r7, #8]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 fb38 	bl	800c114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bab2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bac2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	021a      	lsls	r2, r3, #8
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bad8:	e002      	b.n	800bae0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	75fb      	strb	r3, [r7, #23]
      break;
 800bade:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop

0800baf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a43      	ldr	r2, [pc, #268]	@ (800bc14 <TIM_Base_SetConfig+0x120>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d013      	beq.n	800bb34 <TIM_Base_SetConfig+0x40>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb12:	d00f      	beq.n	800bb34 <TIM_Base_SetConfig+0x40>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a40      	ldr	r2, [pc, #256]	@ (800bc18 <TIM_Base_SetConfig+0x124>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d00b      	beq.n	800bb34 <TIM_Base_SetConfig+0x40>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a3f      	ldr	r2, [pc, #252]	@ (800bc1c <TIM_Base_SetConfig+0x128>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d007      	beq.n	800bb34 <TIM_Base_SetConfig+0x40>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a3e      	ldr	r2, [pc, #248]	@ (800bc20 <TIM_Base_SetConfig+0x12c>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d003      	beq.n	800bb34 <TIM_Base_SetConfig+0x40>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	4a3d      	ldr	r2, [pc, #244]	@ (800bc24 <TIM_Base_SetConfig+0x130>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d108      	bne.n	800bb46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a32      	ldr	r2, [pc, #200]	@ (800bc14 <TIM_Base_SetConfig+0x120>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d01f      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb54:	d01b      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a2f      	ldr	r2, [pc, #188]	@ (800bc18 <TIM_Base_SetConfig+0x124>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d017      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a2e      	ldr	r2, [pc, #184]	@ (800bc1c <TIM_Base_SetConfig+0x128>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d013      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a2d      	ldr	r2, [pc, #180]	@ (800bc20 <TIM_Base_SetConfig+0x12c>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d00f      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a2c      	ldr	r2, [pc, #176]	@ (800bc24 <TIM_Base_SetConfig+0x130>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d00b      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a2b      	ldr	r2, [pc, #172]	@ (800bc28 <TIM_Base_SetConfig+0x134>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d007      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a2a      	ldr	r2, [pc, #168]	@ (800bc2c <TIM_Base_SetConfig+0x138>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d003      	beq.n	800bb8e <TIM_Base_SetConfig+0x9a>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a29      	ldr	r2, [pc, #164]	@ (800bc30 <TIM_Base_SetConfig+0x13c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d108      	bne.n	800bba0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a14      	ldr	r2, [pc, #80]	@ (800bc14 <TIM_Base_SetConfig+0x120>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d00f      	beq.n	800bbe6 <TIM_Base_SetConfig+0xf2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a16      	ldr	r2, [pc, #88]	@ (800bc24 <TIM_Base_SetConfig+0x130>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d00b      	beq.n	800bbe6 <TIM_Base_SetConfig+0xf2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a15      	ldr	r2, [pc, #84]	@ (800bc28 <TIM_Base_SetConfig+0x134>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d007      	beq.n	800bbe6 <TIM_Base_SetConfig+0xf2>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a14      	ldr	r2, [pc, #80]	@ (800bc2c <TIM_Base_SetConfig+0x138>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d003      	beq.n	800bbe6 <TIM_Base_SetConfig+0xf2>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a13      	ldr	r2, [pc, #76]	@ (800bc30 <TIM_Base_SetConfig+0x13c>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d103      	bne.n	800bbee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f043 0204 	orr.w	r2, r3, #4
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	40010000 	.word	0x40010000
 800bc18:	40000400 	.word	0x40000400
 800bc1c:	40000800 	.word	0x40000800
 800bc20:	40000c00 	.word	0x40000c00
 800bc24:	40010400 	.word	0x40010400
 800bc28:	40014000 	.word	0x40014000
 800bc2c:	40014400 	.word	0x40014400
 800bc30:	40014800 	.word	0x40014800

0800bc34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	f023 0201 	bic.w	r2, r3, #1
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4b37      	ldr	r3, [pc, #220]	@ (800bd3c <TIM_OC1_SetConfig+0x108>)
 800bc60:	4013      	ands	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f023 0302 	bic.w	r3, r3, #2
 800bc7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a2d      	ldr	r2, [pc, #180]	@ (800bd40 <TIM_OC1_SetConfig+0x10c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00f      	beq.n	800bcb0 <TIM_OC1_SetConfig+0x7c>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a2c      	ldr	r2, [pc, #176]	@ (800bd44 <TIM_OC1_SetConfig+0x110>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00b      	beq.n	800bcb0 <TIM_OC1_SetConfig+0x7c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a2b      	ldr	r2, [pc, #172]	@ (800bd48 <TIM_OC1_SetConfig+0x114>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d007      	beq.n	800bcb0 <TIM_OC1_SetConfig+0x7c>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd4c <TIM_OC1_SetConfig+0x118>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_OC1_SetConfig+0x7c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a29      	ldr	r2, [pc, #164]	@ (800bd50 <TIM_OC1_SetConfig+0x11c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d10c      	bne.n	800bcca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f023 0308 	bic.w	r3, r3, #8
 800bcb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f023 0304 	bic.w	r3, r3, #4
 800bcc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a1c      	ldr	r2, [pc, #112]	@ (800bd40 <TIM_OC1_SetConfig+0x10c>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d00f      	beq.n	800bcf2 <TIM_OC1_SetConfig+0xbe>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a1b      	ldr	r2, [pc, #108]	@ (800bd44 <TIM_OC1_SetConfig+0x110>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d00b      	beq.n	800bcf2 <TIM_OC1_SetConfig+0xbe>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a1a      	ldr	r2, [pc, #104]	@ (800bd48 <TIM_OC1_SetConfig+0x114>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d007      	beq.n	800bcf2 <TIM_OC1_SetConfig+0xbe>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a19      	ldr	r2, [pc, #100]	@ (800bd4c <TIM_OC1_SetConfig+0x118>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d003      	beq.n	800bcf2 <TIM_OC1_SetConfig+0xbe>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a18      	ldr	r2, [pc, #96]	@ (800bd50 <TIM_OC1_SetConfig+0x11c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d111      	bne.n	800bd16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	697a      	ldr	r2, [r7, #20]
 800bd2e:	621a      	str	r2, [r3, #32]
}
 800bd30:	bf00      	nop
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	fffeff8f 	.word	0xfffeff8f
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40010400 	.word	0x40010400
 800bd48:	40014000 	.word	0x40014000
 800bd4c:	40014400 	.word	0x40014400
 800bd50:	40014800 	.word	0x40014800

0800bd54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	f023 0210 	bic.w	r2, r3, #16
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4b34      	ldr	r3, [pc, #208]	@ (800be50 <TIM_OC2_SetConfig+0xfc>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f023 0320 	bic.w	r3, r3, #32
 800bd9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	011b      	lsls	r3, r3, #4
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a29      	ldr	r2, [pc, #164]	@ (800be54 <TIM_OC2_SetConfig+0x100>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d003      	beq.n	800bdbc <TIM_OC2_SetConfig+0x68>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a28      	ldr	r2, [pc, #160]	@ (800be58 <TIM_OC2_SetConfig+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d10d      	bne.n	800bdd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a1e      	ldr	r2, [pc, #120]	@ (800be54 <TIM_OC2_SetConfig+0x100>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d00f      	beq.n	800be00 <TIM_OC2_SetConfig+0xac>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a1d      	ldr	r2, [pc, #116]	@ (800be58 <TIM_OC2_SetConfig+0x104>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00b      	beq.n	800be00 <TIM_OC2_SetConfig+0xac>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a1c      	ldr	r2, [pc, #112]	@ (800be5c <TIM_OC2_SetConfig+0x108>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d007      	beq.n	800be00 <TIM_OC2_SetConfig+0xac>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a1b      	ldr	r2, [pc, #108]	@ (800be60 <TIM_OC2_SetConfig+0x10c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d003      	beq.n	800be00 <TIM_OC2_SetConfig+0xac>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a1a      	ldr	r2, [pc, #104]	@ (800be64 <TIM_OC2_SetConfig+0x110>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d113      	bne.n	800be28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	4313      	orrs	r3, r2
 800be26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	621a      	str	r2, [r3, #32]
}
 800be42:	bf00      	nop
 800be44:	371c      	adds	r7, #28
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	feff8fff 	.word	0xfeff8fff
 800be54:	40010000 	.word	0x40010000
 800be58:	40010400 	.word	0x40010400
 800be5c:	40014000 	.word	0x40014000
 800be60:	40014400 	.word	0x40014400
 800be64:	40014800 	.word	0x40014800

0800be68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be68:	b480      	push	{r7}
 800be6a:	b087      	sub	sp, #28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	4b33      	ldr	r3, [pc, #204]	@ (800bf60 <TIM_OC3_SetConfig+0xf8>)
 800be94:	4013      	ands	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800beb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	021b      	lsls	r3, r3, #8
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a28      	ldr	r2, [pc, #160]	@ (800bf64 <TIM_OC3_SetConfig+0xfc>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d003      	beq.n	800bece <TIM_OC3_SetConfig+0x66>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a27      	ldr	r2, [pc, #156]	@ (800bf68 <TIM_OC3_SetConfig+0x100>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d10d      	bne.n	800beea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	4313      	orrs	r3, r2
 800bee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a1d      	ldr	r2, [pc, #116]	@ (800bf64 <TIM_OC3_SetConfig+0xfc>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00f      	beq.n	800bf12 <TIM_OC3_SetConfig+0xaa>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf68 <TIM_OC3_SetConfig+0x100>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d00b      	beq.n	800bf12 <TIM_OC3_SetConfig+0xaa>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a1b      	ldr	r2, [pc, #108]	@ (800bf6c <TIM_OC3_SetConfig+0x104>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d007      	beq.n	800bf12 <TIM_OC3_SetConfig+0xaa>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a1a      	ldr	r2, [pc, #104]	@ (800bf70 <TIM_OC3_SetConfig+0x108>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d003      	beq.n	800bf12 <TIM_OC3_SetConfig+0xaa>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a19      	ldr	r2, [pc, #100]	@ (800bf74 <TIM_OC3_SetConfig+0x10c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d113      	bne.n	800bf3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	685a      	ldr	r2, [r3, #4]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	621a      	str	r2, [r3, #32]
}
 800bf54:	bf00      	nop
 800bf56:	371c      	adds	r7, #28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	fffeff8f 	.word	0xfffeff8f
 800bf64:	40010000 	.word	0x40010000
 800bf68:	40010400 	.word	0x40010400
 800bf6c:	40014000 	.word	0x40014000
 800bf70:	40014400 	.word	0x40014400
 800bf74:	40014800 	.word	0x40014800

0800bf78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4b24      	ldr	r3, [pc, #144]	@ (800c034 <TIM_OC4_SetConfig+0xbc>)
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bfc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	031b      	lsls	r3, r3, #12
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a19      	ldr	r2, [pc, #100]	@ (800c038 <TIM_OC4_SetConfig+0xc0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d00f      	beq.n	800bff8 <TIM_OC4_SetConfig+0x80>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a18      	ldr	r2, [pc, #96]	@ (800c03c <TIM_OC4_SetConfig+0xc4>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d00b      	beq.n	800bff8 <TIM_OC4_SetConfig+0x80>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a17      	ldr	r2, [pc, #92]	@ (800c040 <TIM_OC4_SetConfig+0xc8>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d007      	beq.n	800bff8 <TIM_OC4_SetConfig+0x80>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a16      	ldr	r2, [pc, #88]	@ (800c044 <TIM_OC4_SetConfig+0xcc>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d003      	beq.n	800bff8 <TIM_OC4_SetConfig+0x80>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a15      	ldr	r2, [pc, #84]	@ (800c048 <TIM_OC4_SetConfig+0xd0>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d109      	bne.n	800c00c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	019b      	lsls	r3, r3, #6
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	4313      	orrs	r3, r2
 800c00a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	621a      	str	r2, [r3, #32]
}
 800c026:	bf00      	nop
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	feff8fff 	.word	0xfeff8fff
 800c038:	40010000 	.word	0x40010000
 800c03c:	40010400 	.word	0x40010400
 800c040:	40014000 	.word	0x40014000
 800c044:	40014400 	.word	0x40014400
 800c048:	40014800 	.word	0x40014800

0800c04c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4b21      	ldr	r3, [pc, #132]	@ (800c0fc <TIM_OC5_SetConfig+0xb0>)
 800c078:	4013      	ands	r3, r2
 800c07a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4313      	orrs	r3, r2
 800c084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c08c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	041b      	lsls	r3, r3, #16
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4313      	orrs	r3, r2
 800c098:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a18      	ldr	r2, [pc, #96]	@ (800c100 <TIM_OC5_SetConfig+0xb4>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d00f      	beq.n	800c0c2 <TIM_OC5_SetConfig+0x76>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a17      	ldr	r2, [pc, #92]	@ (800c104 <TIM_OC5_SetConfig+0xb8>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d00b      	beq.n	800c0c2 <TIM_OC5_SetConfig+0x76>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a16      	ldr	r2, [pc, #88]	@ (800c108 <TIM_OC5_SetConfig+0xbc>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d007      	beq.n	800c0c2 <TIM_OC5_SetConfig+0x76>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a15      	ldr	r2, [pc, #84]	@ (800c10c <TIM_OC5_SetConfig+0xc0>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d003      	beq.n	800c0c2 <TIM_OC5_SetConfig+0x76>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a14      	ldr	r2, [pc, #80]	@ (800c110 <TIM_OC5_SetConfig+0xc4>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d109      	bne.n	800c0d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	621a      	str	r2, [r3, #32]
}
 800c0f0:	bf00      	nop
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	fffeff8f 	.word	0xfffeff8f
 800c100:	40010000 	.word	0x40010000
 800c104:	40010400 	.word	0x40010400
 800c108:	40014000 	.word	0x40014000
 800c10c:	40014400 	.word	0x40014400
 800c110:	40014800 	.word	0x40014800

0800c114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4b22      	ldr	r3, [pc, #136]	@ (800c1c8 <TIM_OC6_SetConfig+0xb4>)
 800c140:	4013      	ands	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	021b      	lsls	r3, r3, #8
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	051b      	lsls	r3, r3, #20
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4313      	orrs	r3, r2
 800c162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a19      	ldr	r2, [pc, #100]	@ (800c1cc <TIM_OC6_SetConfig+0xb8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d00f      	beq.n	800c18c <TIM_OC6_SetConfig+0x78>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a18      	ldr	r2, [pc, #96]	@ (800c1d0 <TIM_OC6_SetConfig+0xbc>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d00b      	beq.n	800c18c <TIM_OC6_SetConfig+0x78>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a17      	ldr	r2, [pc, #92]	@ (800c1d4 <TIM_OC6_SetConfig+0xc0>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d007      	beq.n	800c18c <TIM_OC6_SetConfig+0x78>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a16      	ldr	r2, [pc, #88]	@ (800c1d8 <TIM_OC6_SetConfig+0xc4>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d003      	beq.n	800c18c <TIM_OC6_SetConfig+0x78>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a15      	ldr	r2, [pc, #84]	@ (800c1dc <TIM_OC6_SetConfig+0xc8>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d109      	bne.n	800c1a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	695b      	ldr	r3, [r3, #20]
 800c198:	029b      	lsls	r3, r3, #10
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	621a      	str	r2, [r3, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	feff8fff 	.word	0xfeff8fff
 800c1cc:	40010000 	.word	0x40010000
 800c1d0:	40010400 	.word	0x40010400
 800c1d4:	40014000 	.word	0x40014000
 800c1d8:	40014400 	.word	0x40014400
 800c1dc:	40014800 	.word	0x40014800

0800c1e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d109      	bne.n	800c204 <HAL_TIMEx_PWMN_Start+0x24>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	bf14      	ite	ne
 800c1fc:	2301      	movne	r3, #1
 800c1fe:	2300      	moveq	r3, #0
 800c200:	b2db      	uxtb	r3, r3
 800c202:	e022      	b.n	800c24a <HAL_TIMEx_PWMN_Start+0x6a>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b04      	cmp	r3, #4
 800c208:	d109      	bne.n	800c21e <HAL_TIMEx_PWMN_Start+0x3e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b01      	cmp	r3, #1
 800c214:	bf14      	ite	ne
 800c216:	2301      	movne	r3, #1
 800c218:	2300      	moveq	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	e015      	b.n	800c24a <HAL_TIMEx_PWMN_Start+0x6a>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b08      	cmp	r3, #8
 800c222:	d109      	bne.n	800c238 <HAL_TIMEx_PWMN_Start+0x58>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	bf14      	ite	ne
 800c230:	2301      	movne	r3, #1
 800c232:	2300      	moveq	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	e008      	b.n	800c24a <HAL_TIMEx_PWMN_Start+0x6a>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b01      	cmp	r3, #1
 800c242:	bf14      	ite	ne
 800c244:	2301      	movne	r3, #1
 800c246:	2300      	moveq	r3, #0
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e073      	b.n	800c33a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d104      	bne.n	800c262 <HAL_TIMEx_PWMN_Start+0x82>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c260:	e013      	b.n	800c28a <HAL_TIMEx_PWMN_Start+0xaa>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b04      	cmp	r3, #4
 800c266:	d104      	bne.n	800c272 <HAL_TIMEx_PWMN_Start+0x92>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2202      	movs	r2, #2
 800c26c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c270:	e00b      	b.n	800c28a <HAL_TIMEx_PWMN_Start+0xaa>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b08      	cmp	r3, #8
 800c276:	d104      	bne.n	800c282 <HAL_TIMEx_PWMN_Start+0xa2>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c280:	e003      	b.n	800c28a <HAL_TIMEx_PWMN_Start+0xaa>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2202      	movs	r2, #2
 800c286:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2204      	movs	r2, #4
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f972 	bl	800c57c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c2a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a25      	ldr	r2, [pc, #148]	@ (800c344 <HAL_TIMEx_PWMN_Start+0x164>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d022      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2ba:	d01d      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a21      	ldr	r2, [pc, #132]	@ (800c348 <HAL_TIMEx_PWMN_Start+0x168>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d018      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a20      	ldr	r2, [pc, #128]	@ (800c34c <HAL_TIMEx_PWMN_Start+0x16c>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d013      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a1e      	ldr	r2, [pc, #120]	@ (800c350 <HAL_TIMEx_PWMN_Start+0x170>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d00e      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a1d      	ldr	r2, [pc, #116]	@ (800c354 <HAL_TIMEx_PWMN_Start+0x174>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d009      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c358 <HAL_TIMEx_PWMN_Start+0x178>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d004      	beq.n	800c2f8 <HAL_TIMEx_PWMN_Start+0x118>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c35c <HAL_TIMEx_PWMN_Start+0x17c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d115      	bne.n	800c324 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	4b18      	ldr	r3, [pc, #96]	@ (800c360 <HAL_TIMEx_PWMN_Start+0x180>)
 800c300:	4013      	ands	r3, r2
 800c302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b06      	cmp	r3, #6
 800c308:	d015      	beq.n	800c336 <HAL_TIMEx_PWMN_Start+0x156>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c310:	d011      	beq.n	800c336 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f042 0201 	orr.w	r2, r2, #1
 800c320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c322:	e008      	b.n	800c336 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f042 0201 	orr.w	r2, r2, #1
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	e000      	b.n	800c338 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	40010000 	.word	0x40010000
 800c348:	40000400 	.word	0x40000400
 800c34c:	40000800 	.word	0x40000800
 800c350:	40000c00 	.word	0x40000c00
 800c354:	40010400 	.word	0x40010400
 800c358:	40001800 	.word	0x40001800
 800c35c:	40014000 	.word	0x40014000
 800c360:	00010007 	.word	0x00010007

0800c364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c378:	2302      	movs	r3, #2
 800c37a:	e06d      	b.n	800c458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2202      	movs	r2, #2
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a30      	ldr	r2, [pc, #192]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d004      	beq.n	800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a2f      	ldr	r2, [pc, #188]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d108      	bne.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c3b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a20      	ldr	r2, [pc, #128]	@ (800c464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d022      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ee:	d01d      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c46c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d018      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a1c      	ldr	r2, [pc, #112]	@ (800c470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d013      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a1a      	ldr	r2, [pc, #104]	@ (800c474 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d00e      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a15      	ldr	r2, [pc, #84]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d009      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a16      	ldr	r2, [pc, #88]	@ (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d004      	beq.n	800c42c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a15      	ldr	r2, [pc, #84]	@ (800c47c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d10c      	bne.n	800c446 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	40010000 	.word	0x40010000
 800c468:	40010400 	.word	0x40010400
 800c46c:	40000400 	.word	0x40000400
 800c470:	40000800 	.word	0x40000800
 800c474:	40000c00 	.word	0x40000c00
 800c478:	40001800 	.word	0x40001800
 800c47c:	40014000 	.word	0x40014000

0800c480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c494:	2b01      	cmp	r3, #1
 800c496:	d101      	bne.n	800c49c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c498:	2302      	movs	r3, #2
 800c49a:	e065      	b.n	800c568 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	695b      	ldr	r3, [r3, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c502:	4313      	orrs	r3, r2
 800c504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	041b      	lsls	r3, r3, #16
 800c512:	4313      	orrs	r3, r2
 800c514:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a16      	ldr	r2, [pc, #88]	@ (800c574 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d004      	beq.n	800c52a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a14      	ldr	r2, [pc, #80]	@ (800c578 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d115      	bne.n	800c556 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c534:	051b      	lsls	r3, r3, #20
 800c536:	4313      	orrs	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	69db      	ldr	r3, [r3, #28]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	40010000 	.word	0x40010000
 800c578:	40010400 	.word	0x40010400

0800c57c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b087      	sub	sp, #28
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	2204      	movs	r2, #4
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1a      	ldr	r2, [r3, #32]
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	43db      	mvns	r3, r3
 800c59e:	401a      	ands	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6a1a      	ldr	r2, [r3, #32]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f003 030f 	and.w	r3, r3, #15
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b4:	431a      	orrs	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	621a      	str	r2, [r3, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <__cvt>:
 800c5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c8:	ed2d 8b02 	vpush	{d8}
 800c5cc:	eeb0 8b40 	vmov.f64	d8, d0
 800c5d0:	b085      	sub	sp, #20
 800c5d2:	4617      	mov	r7, r2
 800c5d4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c5d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5d8:	ee18 2a90 	vmov	r2, s17
 800c5dc:	f025 0520 	bic.w	r5, r5, #32
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	bfb6      	itet	lt
 800c5e4:	222d      	movlt	r2, #45	@ 0x2d
 800c5e6:	2200      	movge	r2, #0
 800c5e8:	eeb1 8b40 	vneglt.f64	d8, d0
 800c5ec:	2d46      	cmp	r5, #70	@ 0x46
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	d004      	beq.n	800c5fe <__cvt+0x38>
 800c5f4:	2d45      	cmp	r5, #69	@ 0x45
 800c5f6:	d100      	bne.n	800c5fa <__cvt+0x34>
 800c5f8:	3401      	adds	r4, #1
 800c5fa:	2102      	movs	r1, #2
 800c5fc:	e000      	b.n	800c600 <__cvt+0x3a>
 800c5fe:	2103      	movs	r1, #3
 800c600:	ab03      	add	r3, sp, #12
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	ab02      	add	r3, sp, #8
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	4622      	mov	r2, r4
 800c60a:	4633      	mov	r3, r6
 800c60c:	eeb0 0b48 	vmov.f64	d0, d8
 800c610:	f000 ff46 	bl	800d4a0 <_dtoa_r>
 800c614:	2d47      	cmp	r5, #71	@ 0x47
 800c616:	d114      	bne.n	800c642 <__cvt+0x7c>
 800c618:	07fb      	lsls	r3, r7, #31
 800c61a:	d50a      	bpl.n	800c632 <__cvt+0x6c>
 800c61c:	1902      	adds	r2, r0, r4
 800c61e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c626:	bf08      	it	eq
 800c628:	9203      	streq	r2, [sp, #12]
 800c62a:	2130      	movs	r1, #48	@ 0x30
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	4293      	cmp	r3, r2
 800c630:	d319      	bcc.n	800c666 <__cvt+0xa0>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c636:	1a1b      	subs	r3, r3, r0
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	b005      	add	sp, #20
 800c63c:	ecbd 8b02 	vpop	{d8}
 800c640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c642:	2d46      	cmp	r5, #70	@ 0x46
 800c644:	eb00 0204 	add.w	r2, r0, r4
 800c648:	d1e9      	bne.n	800c61e <__cvt+0x58>
 800c64a:	7803      	ldrb	r3, [r0, #0]
 800c64c:	2b30      	cmp	r3, #48	@ 0x30
 800c64e:	d107      	bne.n	800c660 <__cvt+0x9a>
 800c650:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	bf1c      	itt	ne
 800c65a:	f1c4 0401 	rsbne	r4, r4, #1
 800c65e:	6034      	strne	r4, [r6, #0]
 800c660:	6833      	ldr	r3, [r6, #0]
 800c662:	441a      	add	r2, r3
 800c664:	e7db      	b.n	800c61e <__cvt+0x58>
 800c666:	1c5c      	adds	r4, r3, #1
 800c668:	9403      	str	r4, [sp, #12]
 800c66a:	7019      	strb	r1, [r3, #0]
 800c66c:	e7de      	b.n	800c62c <__cvt+0x66>

0800c66e <__exponent>:
 800c66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c670:	2900      	cmp	r1, #0
 800c672:	bfba      	itte	lt
 800c674:	4249      	neglt	r1, r1
 800c676:	232d      	movlt	r3, #45	@ 0x2d
 800c678:	232b      	movge	r3, #43	@ 0x2b
 800c67a:	2909      	cmp	r1, #9
 800c67c:	7002      	strb	r2, [r0, #0]
 800c67e:	7043      	strb	r3, [r0, #1]
 800c680:	dd29      	ble.n	800c6d6 <__exponent+0x68>
 800c682:	f10d 0307 	add.w	r3, sp, #7
 800c686:	461d      	mov	r5, r3
 800c688:	270a      	movs	r7, #10
 800c68a:	461a      	mov	r2, r3
 800c68c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c690:	fb07 1416 	mls	r4, r7, r6, r1
 800c694:	3430      	adds	r4, #48	@ 0x30
 800c696:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c69a:	460c      	mov	r4, r1
 800c69c:	2c63      	cmp	r4, #99	@ 0x63
 800c69e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	dcf1      	bgt.n	800c68a <__exponent+0x1c>
 800c6a6:	3130      	adds	r1, #48	@ 0x30
 800c6a8:	1e94      	subs	r4, r2, #2
 800c6aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6ae:	1c41      	adds	r1, r0, #1
 800c6b0:	4623      	mov	r3, r4
 800c6b2:	42ab      	cmp	r3, r5
 800c6b4:	d30a      	bcc.n	800c6cc <__exponent+0x5e>
 800c6b6:	f10d 0309 	add.w	r3, sp, #9
 800c6ba:	1a9b      	subs	r3, r3, r2
 800c6bc:	42ac      	cmp	r4, r5
 800c6be:	bf88      	it	hi
 800c6c0:	2300      	movhi	r3, #0
 800c6c2:	3302      	adds	r3, #2
 800c6c4:	4403      	add	r3, r0
 800c6c6:	1a18      	subs	r0, r3, r0
 800c6c8:	b003      	add	sp, #12
 800c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6d4:	e7ed      	b.n	800c6b2 <__exponent+0x44>
 800c6d6:	2330      	movs	r3, #48	@ 0x30
 800c6d8:	3130      	adds	r1, #48	@ 0x30
 800c6da:	7083      	strb	r3, [r0, #2]
 800c6dc:	70c1      	strb	r1, [r0, #3]
 800c6de:	1d03      	adds	r3, r0, #4
 800c6e0:	e7f1      	b.n	800c6c6 <__exponent+0x58>
 800c6e2:	0000      	movs	r0, r0
 800c6e4:	0000      	movs	r0, r0
	...

0800c6e8 <_printf_float>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	b08d      	sub	sp, #52	@ 0x34
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	461f      	mov	r7, r3
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	f000 fdcf 	bl	800d29c <_localeconv_r>
 800c6fe:	f8d0 b000 	ldr.w	fp, [r0]
 800c702:	4658      	mov	r0, fp
 800c704:	f7f3 fe3c 	bl	8000380 <strlen>
 800c708:	2300      	movs	r3, #0
 800c70a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c70c:	f8d8 3000 	ldr.w	r3, [r8]
 800c710:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c714:	6822      	ldr	r2, [r4, #0]
 800c716:	9005      	str	r0, [sp, #20]
 800c718:	3307      	adds	r3, #7
 800c71a:	f023 0307 	bic.w	r3, r3, #7
 800c71e:	f103 0108 	add.w	r1, r3, #8
 800c722:	f8c8 1000 	str.w	r1, [r8]
 800c726:	ed93 0b00 	vldr	d0, [r3]
 800c72a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c988 <_printf_float+0x2a0>
 800c72e:	eeb0 7bc0 	vabs.f64	d7, d0
 800c732:	eeb4 7b46 	vcmp.f64	d7, d6
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c73e:	dd24      	ble.n	800c78a <_printf_float+0xa2>
 800c740:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c748:	d502      	bpl.n	800c750 <_printf_float+0x68>
 800c74a:	232d      	movs	r3, #45	@ 0x2d
 800c74c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c750:	498f      	ldr	r1, [pc, #572]	@ (800c990 <_printf_float+0x2a8>)
 800c752:	4b90      	ldr	r3, [pc, #576]	@ (800c994 <_printf_float+0x2ac>)
 800c754:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c758:	bf8c      	ite	hi
 800c75a:	4688      	movhi	r8, r1
 800c75c:	4698      	movls	r8, r3
 800c75e:	f022 0204 	bic.w	r2, r2, #4
 800c762:	2303      	movs	r3, #3
 800c764:	6123      	str	r3, [r4, #16]
 800c766:	6022      	str	r2, [r4, #0]
 800c768:	f04f 0a00 	mov.w	sl, #0
 800c76c:	9700      	str	r7, [sp, #0]
 800c76e:	4633      	mov	r3, r6
 800c770:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c772:	4621      	mov	r1, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 f9d1 	bl	800cb1c <_printf_common>
 800c77a:	3001      	adds	r0, #1
 800c77c:	f040 8089 	bne.w	800c892 <_printf_float+0x1aa>
 800c780:	f04f 30ff 	mov.w	r0, #4294967295
 800c784:	b00d      	add	sp, #52	@ 0x34
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c792:	d709      	bvc.n	800c7a8 <_printf_float+0xc0>
 800c794:	ee10 3a90 	vmov	r3, s1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	bfbc      	itt	lt
 800c79c:	232d      	movlt	r3, #45	@ 0x2d
 800c79e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7a2:	497d      	ldr	r1, [pc, #500]	@ (800c998 <_printf_float+0x2b0>)
 800c7a4:	4b7d      	ldr	r3, [pc, #500]	@ (800c99c <_printf_float+0x2b4>)
 800c7a6:	e7d5      	b.n	800c754 <_printf_float+0x6c>
 800c7a8:	6863      	ldr	r3, [r4, #4]
 800c7aa:	1c59      	adds	r1, r3, #1
 800c7ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c7b0:	d139      	bne.n	800c826 <_printf_float+0x13e>
 800c7b2:	2306      	movs	r3, #6
 800c7b4:	6063      	str	r3, [r4, #4]
 800c7b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	6022      	str	r2, [r4, #0]
 800c7be:	9303      	str	r3, [sp, #12]
 800c7c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c7c6:	ab09      	add	r3, sp, #36	@ 0x24
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	6861      	ldr	r1, [r4, #4]
 800c7cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	f7ff fef8 	bl	800c5c6 <__cvt>
 800c7d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7dc:	4680      	mov	r8, r0
 800c7de:	d129      	bne.n	800c834 <_printf_float+0x14c>
 800c7e0:	1cc8      	adds	r0, r1, #3
 800c7e2:	db02      	blt.n	800c7ea <_printf_float+0x102>
 800c7e4:	6863      	ldr	r3, [r4, #4]
 800c7e6:	4299      	cmp	r1, r3
 800c7e8:	dd41      	ble.n	800c86e <_printf_float+0x186>
 800c7ea:	f1a9 0902 	sub.w	r9, r9, #2
 800c7ee:	fa5f f989 	uxtb.w	r9, r9
 800c7f2:	3901      	subs	r1, #1
 800c7f4:	464a      	mov	r2, r9
 800c7f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7fc:	f7ff ff37 	bl	800c66e <__exponent>
 800c800:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c802:	1813      	adds	r3, r2, r0
 800c804:	2a01      	cmp	r2, #1
 800c806:	4682      	mov	sl, r0
 800c808:	6123      	str	r3, [r4, #16]
 800c80a:	dc02      	bgt.n	800c812 <_printf_float+0x12a>
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	07d2      	lsls	r2, r2, #31
 800c810:	d501      	bpl.n	800c816 <_printf_float+0x12e>
 800c812:	3301      	adds	r3, #1
 800c814:	6123      	str	r3, [r4, #16]
 800c816:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0a6      	beq.n	800c76c <_printf_float+0x84>
 800c81e:	232d      	movs	r3, #45	@ 0x2d
 800c820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c824:	e7a2      	b.n	800c76c <_printf_float+0x84>
 800c826:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c82a:	d1c4      	bne.n	800c7b6 <_printf_float+0xce>
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1c2      	bne.n	800c7b6 <_printf_float+0xce>
 800c830:	2301      	movs	r3, #1
 800c832:	e7bf      	b.n	800c7b4 <_printf_float+0xcc>
 800c834:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c838:	d9db      	bls.n	800c7f2 <_printf_float+0x10a>
 800c83a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c83e:	d118      	bne.n	800c872 <_printf_float+0x18a>
 800c840:	2900      	cmp	r1, #0
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	dd0b      	ble.n	800c85e <_printf_float+0x176>
 800c846:	6121      	str	r1, [r4, #16]
 800c848:	b913      	cbnz	r3, 800c850 <_printf_float+0x168>
 800c84a:	6822      	ldr	r2, [r4, #0]
 800c84c:	07d0      	lsls	r0, r2, #31
 800c84e:	d502      	bpl.n	800c856 <_printf_float+0x16e>
 800c850:	3301      	adds	r3, #1
 800c852:	440b      	add	r3, r1
 800c854:	6123      	str	r3, [r4, #16]
 800c856:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c858:	f04f 0a00 	mov.w	sl, #0
 800c85c:	e7db      	b.n	800c816 <_printf_float+0x12e>
 800c85e:	b913      	cbnz	r3, 800c866 <_printf_float+0x17e>
 800c860:	6822      	ldr	r2, [r4, #0]
 800c862:	07d2      	lsls	r2, r2, #31
 800c864:	d501      	bpl.n	800c86a <_printf_float+0x182>
 800c866:	3302      	adds	r3, #2
 800c868:	e7f4      	b.n	800c854 <_printf_float+0x16c>
 800c86a:	2301      	movs	r3, #1
 800c86c:	e7f2      	b.n	800c854 <_printf_float+0x16c>
 800c86e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c874:	4299      	cmp	r1, r3
 800c876:	db05      	blt.n	800c884 <_printf_float+0x19c>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	6121      	str	r1, [r4, #16]
 800c87c:	07d8      	lsls	r0, r3, #31
 800c87e:	d5ea      	bpl.n	800c856 <_printf_float+0x16e>
 800c880:	1c4b      	adds	r3, r1, #1
 800c882:	e7e7      	b.n	800c854 <_printf_float+0x16c>
 800c884:	2900      	cmp	r1, #0
 800c886:	bfd4      	ite	le
 800c888:	f1c1 0202 	rsble	r2, r1, #2
 800c88c:	2201      	movgt	r2, #1
 800c88e:	4413      	add	r3, r2
 800c890:	e7e0      	b.n	800c854 <_printf_float+0x16c>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	055a      	lsls	r2, r3, #21
 800c896:	d407      	bmi.n	800c8a8 <_printf_float+0x1c0>
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	4642      	mov	r2, r8
 800c89c:	4631      	mov	r1, r6
 800c89e:	4628      	mov	r0, r5
 800c8a0:	47b8      	blx	r7
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	d12a      	bne.n	800c8fc <_printf_float+0x214>
 800c8a6:	e76b      	b.n	800c780 <_printf_float+0x98>
 800c8a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c8ac:	f240 80e0 	bls.w	800ca70 <_printf_float+0x388>
 800c8b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c8b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8bc:	d133      	bne.n	800c926 <_printf_float+0x23e>
 800c8be:	4a38      	ldr	r2, [pc, #224]	@ (800c9a0 <_printf_float+0x2b8>)
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b8      	blx	r7
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f43f af59 	beq.w	800c780 <_printf_float+0x98>
 800c8ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8d2:	4543      	cmp	r3, r8
 800c8d4:	db02      	blt.n	800c8dc <_printf_float+0x1f4>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	07d8      	lsls	r0, r3, #31
 800c8da:	d50f      	bpl.n	800c8fc <_printf_float+0x214>
 800c8dc:	9b05      	ldr	r3, [sp, #20]
 800c8de:	465a      	mov	r2, fp
 800c8e0:	4631      	mov	r1, r6
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	47b8      	blx	r7
 800c8e6:	3001      	adds	r0, #1
 800c8e8:	f43f af4a 	beq.w	800c780 <_printf_float+0x98>
 800c8ec:	f04f 0900 	mov.w	r9, #0
 800c8f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8f4:	f104 0a1a 	add.w	sl, r4, #26
 800c8f8:	45c8      	cmp	r8, r9
 800c8fa:	dc09      	bgt.n	800c910 <_printf_float+0x228>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	079b      	lsls	r3, r3, #30
 800c900:	f100 8107 	bmi.w	800cb12 <_printf_float+0x42a>
 800c904:	68e0      	ldr	r0, [r4, #12]
 800c906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c908:	4298      	cmp	r0, r3
 800c90a:	bfb8      	it	lt
 800c90c:	4618      	movlt	r0, r3
 800c90e:	e739      	b.n	800c784 <_printf_float+0x9c>
 800c910:	2301      	movs	r3, #1
 800c912:	4652      	mov	r2, sl
 800c914:	4631      	mov	r1, r6
 800c916:	4628      	mov	r0, r5
 800c918:	47b8      	blx	r7
 800c91a:	3001      	adds	r0, #1
 800c91c:	f43f af30 	beq.w	800c780 <_printf_float+0x98>
 800c920:	f109 0901 	add.w	r9, r9, #1
 800c924:	e7e8      	b.n	800c8f8 <_printf_float+0x210>
 800c926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c928:	2b00      	cmp	r3, #0
 800c92a:	dc3b      	bgt.n	800c9a4 <_printf_float+0x2bc>
 800c92c:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a0 <_printf_float+0x2b8>)
 800c92e:	2301      	movs	r3, #1
 800c930:	4631      	mov	r1, r6
 800c932:	4628      	mov	r0, r5
 800c934:	47b8      	blx	r7
 800c936:	3001      	adds	r0, #1
 800c938:	f43f af22 	beq.w	800c780 <_printf_float+0x98>
 800c93c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c940:	ea59 0303 	orrs.w	r3, r9, r3
 800c944:	d102      	bne.n	800c94c <_printf_float+0x264>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	07d9      	lsls	r1, r3, #31
 800c94a:	d5d7      	bpl.n	800c8fc <_printf_float+0x214>
 800c94c:	9b05      	ldr	r3, [sp, #20]
 800c94e:	465a      	mov	r2, fp
 800c950:	4631      	mov	r1, r6
 800c952:	4628      	mov	r0, r5
 800c954:	47b8      	blx	r7
 800c956:	3001      	adds	r0, #1
 800c958:	f43f af12 	beq.w	800c780 <_printf_float+0x98>
 800c95c:	f04f 0a00 	mov.w	sl, #0
 800c960:	f104 0b1a 	add.w	fp, r4, #26
 800c964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c966:	425b      	negs	r3, r3
 800c968:	4553      	cmp	r3, sl
 800c96a:	dc01      	bgt.n	800c970 <_printf_float+0x288>
 800c96c:	464b      	mov	r3, r9
 800c96e:	e794      	b.n	800c89a <_printf_float+0x1b2>
 800c970:	2301      	movs	r3, #1
 800c972:	465a      	mov	r2, fp
 800c974:	4631      	mov	r1, r6
 800c976:	4628      	mov	r0, r5
 800c978:	47b8      	blx	r7
 800c97a:	3001      	adds	r0, #1
 800c97c:	f43f af00 	beq.w	800c780 <_printf_float+0x98>
 800c980:	f10a 0a01 	add.w	sl, sl, #1
 800c984:	e7ee      	b.n	800c964 <_printf_float+0x27c>
 800c986:	bf00      	nop
 800c988:	ffffffff 	.word	0xffffffff
 800c98c:	7fefffff 	.word	0x7fefffff
 800c990:	08016605 	.word	0x08016605
 800c994:	08016601 	.word	0x08016601
 800c998:	0801660d 	.word	0x0801660d
 800c99c:	08016609 	.word	0x08016609
 800c9a0:	08016611 	.word	0x08016611
 800c9a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9aa:	4553      	cmp	r3, sl
 800c9ac:	bfa8      	it	ge
 800c9ae:	4653      	movge	r3, sl
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	4699      	mov	r9, r3
 800c9b4:	dc37      	bgt.n	800ca26 <_printf_float+0x33e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	9307      	str	r3, [sp, #28]
 800c9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9be:	f104 021a 	add.w	r2, r4, #26
 800c9c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9c4:	9907      	ldr	r1, [sp, #28]
 800c9c6:	9306      	str	r3, [sp, #24]
 800c9c8:	eba3 0309 	sub.w	r3, r3, r9
 800c9cc:	428b      	cmp	r3, r1
 800c9ce:	dc31      	bgt.n	800ca34 <_printf_float+0x34c>
 800c9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d2:	459a      	cmp	sl, r3
 800c9d4:	dc3b      	bgt.n	800ca4e <_printf_float+0x366>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	07da      	lsls	r2, r3, #31
 800c9da:	d438      	bmi.n	800ca4e <_printf_float+0x366>
 800c9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9de:	ebaa 0903 	sub.w	r9, sl, r3
 800c9e2:	9b06      	ldr	r3, [sp, #24]
 800c9e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c9e8:	4599      	cmp	r9, r3
 800c9ea:	bfa8      	it	ge
 800c9ec:	4699      	movge	r9, r3
 800c9ee:	f1b9 0f00 	cmp.w	r9, #0
 800c9f2:	dc34      	bgt.n	800ca5e <_printf_float+0x376>
 800c9f4:	f04f 0800 	mov.w	r8, #0
 800c9f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9fc:	f104 0b1a 	add.w	fp, r4, #26
 800ca00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca02:	ebaa 0303 	sub.w	r3, sl, r3
 800ca06:	eba3 0309 	sub.w	r3, r3, r9
 800ca0a:	4543      	cmp	r3, r8
 800ca0c:	f77f af76 	ble.w	800c8fc <_printf_float+0x214>
 800ca10:	2301      	movs	r3, #1
 800ca12:	465a      	mov	r2, fp
 800ca14:	4631      	mov	r1, r6
 800ca16:	4628      	mov	r0, r5
 800ca18:	47b8      	blx	r7
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	f43f aeb0 	beq.w	800c780 <_printf_float+0x98>
 800ca20:	f108 0801 	add.w	r8, r8, #1
 800ca24:	e7ec      	b.n	800ca00 <_printf_float+0x318>
 800ca26:	4642      	mov	r2, r8
 800ca28:	4631      	mov	r1, r6
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	47b8      	blx	r7
 800ca2e:	3001      	adds	r0, #1
 800ca30:	d1c1      	bne.n	800c9b6 <_printf_float+0x2ce>
 800ca32:	e6a5      	b.n	800c780 <_printf_float+0x98>
 800ca34:	2301      	movs	r3, #1
 800ca36:	4631      	mov	r1, r6
 800ca38:	4628      	mov	r0, r5
 800ca3a:	9206      	str	r2, [sp, #24]
 800ca3c:	47b8      	blx	r7
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f43f ae9e 	beq.w	800c780 <_printf_float+0x98>
 800ca44:	9b07      	ldr	r3, [sp, #28]
 800ca46:	9a06      	ldr	r2, [sp, #24]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	9307      	str	r3, [sp, #28]
 800ca4c:	e7b9      	b.n	800c9c2 <_printf_float+0x2da>
 800ca4e:	9b05      	ldr	r3, [sp, #20]
 800ca50:	465a      	mov	r2, fp
 800ca52:	4631      	mov	r1, r6
 800ca54:	4628      	mov	r0, r5
 800ca56:	47b8      	blx	r7
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d1bf      	bne.n	800c9dc <_printf_float+0x2f4>
 800ca5c:	e690      	b.n	800c780 <_printf_float+0x98>
 800ca5e:	9a06      	ldr	r2, [sp, #24]
 800ca60:	464b      	mov	r3, r9
 800ca62:	4442      	add	r2, r8
 800ca64:	4631      	mov	r1, r6
 800ca66:	4628      	mov	r0, r5
 800ca68:	47b8      	blx	r7
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d1c2      	bne.n	800c9f4 <_printf_float+0x30c>
 800ca6e:	e687      	b.n	800c780 <_printf_float+0x98>
 800ca70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ca74:	f1b9 0f01 	cmp.w	r9, #1
 800ca78:	dc01      	bgt.n	800ca7e <_printf_float+0x396>
 800ca7a:	07db      	lsls	r3, r3, #31
 800ca7c:	d536      	bpl.n	800caec <_printf_float+0x404>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4642      	mov	r2, r8
 800ca82:	4631      	mov	r1, r6
 800ca84:	4628      	mov	r0, r5
 800ca86:	47b8      	blx	r7
 800ca88:	3001      	adds	r0, #1
 800ca8a:	f43f ae79 	beq.w	800c780 <_printf_float+0x98>
 800ca8e:	9b05      	ldr	r3, [sp, #20]
 800ca90:	465a      	mov	r2, fp
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae71 	beq.w	800c780 <_printf_float+0x98>
 800ca9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800caa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caaa:	f109 39ff 	add.w	r9, r9, #4294967295
 800caae:	d018      	beq.n	800cae2 <_printf_float+0x3fa>
 800cab0:	464b      	mov	r3, r9
 800cab2:	f108 0201 	add.w	r2, r8, #1
 800cab6:	4631      	mov	r1, r6
 800cab8:	4628      	mov	r0, r5
 800caba:	47b8      	blx	r7
 800cabc:	3001      	adds	r0, #1
 800cabe:	d10c      	bne.n	800cada <_printf_float+0x3f2>
 800cac0:	e65e      	b.n	800c780 <_printf_float+0x98>
 800cac2:	2301      	movs	r3, #1
 800cac4:	465a      	mov	r2, fp
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	f43f ae57 	beq.w	800c780 <_printf_float+0x98>
 800cad2:	f108 0801 	add.w	r8, r8, #1
 800cad6:	45c8      	cmp	r8, r9
 800cad8:	dbf3      	blt.n	800cac2 <_printf_float+0x3da>
 800cada:	4653      	mov	r3, sl
 800cadc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cae0:	e6dc      	b.n	800c89c <_printf_float+0x1b4>
 800cae2:	f04f 0800 	mov.w	r8, #0
 800cae6:	f104 0b1a 	add.w	fp, r4, #26
 800caea:	e7f4      	b.n	800cad6 <_printf_float+0x3ee>
 800caec:	2301      	movs	r3, #1
 800caee:	4642      	mov	r2, r8
 800caf0:	e7e1      	b.n	800cab6 <_printf_float+0x3ce>
 800caf2:	2301      	movs	r3, #1
 800caf4:	464a      	mov	r2, r9
 800caf6:	4631      	mov	r1, r6
 800caf8:	4628      	mov	r0, r5
 800cafa:	47b8      	blx	r7
 800cafc:	3001      	adds	r0, #1
 800cafe:	f43f ae3f 	beq.w	800c780 <_printf_float+0x98>
 800cb02:	f108 0801 	add.w	r8, r8, #1
 800cb06:	68e3      	ldr	r3, [r4, #12]
 800cb08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb0a:	1a5b      	subs	r3, r3, r1
 800cb0c:	4543      	cmp	r3, r8
 800cb0e:	dcf0      	bgt.n	800caf2 <_printf_float+0x40a>
 800cb10:	e6f8      	b.n	800c904 <_printf_float+0x21c>
 800cb12:	f04f 0800 	mov.w	r8, #0
 800cb16:	f104 0919 	add.w	r9, r4, #25
 800cb1a:	e7f4      	b.n	800cb06 <_printf_float+0x41e>

0800cb1c <_printf_common>:
 800cb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb20:	4616      	mov	r6, r2
 800cb22:	4698      	mov	r8, r3
 800cb24:	688a      	ldr	r2, [r1, #8]
 800cb26:	690b      	ldr	r3, [r1, #16]
 800cb28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	bfb8      	it	lt
 800cb30:	4613      	movlt	r3, r2
 800cb32:	6033      	str	r3, [r6, #0]
 800cb34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb38:	4607      	mov	r7, r0
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	b10a      	cbz	r2, 800cb42 <_printf_common+0x26>
 800cb3e:	3301      	adds	r3, #1
 800cb40:	6033      	str	r3, [r6, #0]
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	0699      	lsls	r1, r3, #26
 800cb46:	bf42      	ittt	mi
 800cb48:	6833      	ldrmi	r3, [r6, #0]
 800cb4a:	3302      	addmi	r3, #2
 800cb4c:	6033      	strmi	r3, [r6, #0]
 800cb4e:	6825      	ldr	r5, [r4, #0]
 800cb50:	f015 0506 	ands.w	r5, r5, #6
 800cb54:	d106      	bne.n	800cb64 <_printf_common+0x48>
 800cb56:	f104 0a19 	add.w	sl, r4, #25
 800cb5a:	68e3      	ldr	r3, [r4, #12]
 800cb5c:	6832      	ldr	r2, [r6, #0]
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	dc26      	bgt.n	800cbb2 <_printf_common+0x96>
 800cb64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb68:	6822      	ldr	r2, [r4, #0]
 800cb6a:	3b00      	subs	r3, #0
 800cb6c:	bf18      	it	ne
 800cb6e:	2301      	movne	r3, #1
 800cb70:	0692      	lsls	r2, r2, #26
 800cb72:	d42b      	bmi.n	800cbcc <_printf_common+0xb0>
 800cb74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb78:	4641      	mov	r1, r8
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	47c8      	blx	r9
 800cb7e:	3001      	adds	r0, #1
 800cb80:	d01e      	beq.n	800cbc0 <_printf_common+0xa4>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	6922      	ldr	r2, [r4, #16]
 800cb86:	f003 0306 	and.w	r3, r3, #6
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	bf02      	ittt	eq
 800cb8e:	68e5      	ldreq	r5, [r4, #12]
 800cb90:	6833      	ldreq	r3, [r6, #0]
 800cb92:	1aed      	subeq	r5, r5, r3
 800cb94:	68a3      	ldr	r3, [r4, #8]
 800cb96:	bf0c      	ite	eq
 800cb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb9c:	2500      	movne	r5, #0
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	bfc4      	itt	gt
 800cba2:	1a9b      	subgt	r3, r3, r2
 800cba4:	18ed      	addgt	r5, r5, r3
 800cba6:	2600      	movs	r6, #0
 800cba8:	341a      	adds	r4, #26
 800cbaa:	42b5      	cmp	r5, r6
 800cbac:	d11a      	bne.n	800cbe4 <_printf_common+0xc8>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	e008      	b.n	800cbc4 <_printf_common+0xa8>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4652      	mov	r2, sl
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	4638      	mov	r0, r7
 800cbba:	47c8      	blx	r9
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d103      	bne.n	800cbc8 <_printf_common+0xac>
 800cbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc8:	3501      	adds	r5, #1
 800cbca:	e7c6      	b.n	800cb5a <_printf_common+0x3e>
 800cbcc:	18e1      	adds	r1, r4, r3
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	2030      	movs	r0, #48	@ 0x30
 800cbd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbd6:	4422      	add	r2, r4
 800cbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbe0:	3302      	adds	r3, #2
 800cbe2:	e7c7      	b.n	800cb74 <_printf_common+0x58>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	4641      	mov	r1, r8
 800cbea:	4638      	mov	r0, r7
 800cbec:	47c8      	blx	r9
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d0e6      	beq.n	800cbc0 <_printf_common+0xa4>
 800cbf2:	3601      	adds	r6, #1
 800cbf4:	e7d9      	b.n	800cbaa <_printf_common+0x8e>
	...

0800cbf8 <_printf_i>:
 800cbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbfc:	7e0f      	ldrb	r7, [r1, #24]
 800cbfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc00:	2f78      	cmp	r7, #120	@ 0x78
 800cc02:	4691      	mov	r9, r2
 800cc04:	4680      	mov	r8, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	469a      	mov	sl, r3
 800cc0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc0e:	d807      	bhi.n	800cc20 <_printf_i+0x28>
 800cc10:	2f62      	cmp	r7, #98	@ 0x62
 800cc12:	d80a      	bhi.n	800cc2a <_printf_i+0x32>
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	f000 80d1 	beq.w	800cdbc <_printf_i+0x1c4>
 800cc1a:	2f58      	cmp	r7, #88	@ 0x58
 800cc1c:	f000 80b8 	beq.w	800cd90 <_printf_i+0x198>
 800cc20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc28:	e03a      	b.n	800cca0 <_printf_i+0xa8>
 800cc2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc2e:	2b15      	cmp	r3, #21
 800cc30:	d8f6      	bhi.n	800cc20 <_printf_i+0x28>
 800cc32:	a101      	add	r1, pc, #4	@ (adr r1, 800cc38 <_printf_i+0x40>)
 800cc34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc38:	0800cc91 	.word	0x0800cc91
 800cc3c:	0800cca5 	.word	0x0800cca5
 800cc40:	0800cc21 	.word	0x0800cc21
 800cc44:	0800cc21 	.word	0x0800cc21
 800cc48:	0800cc21 	.word	0x0800cc21
 800cc4c:	0800cc21 	.word	0x0800cc21
 800cc50:	0800cca5 	.word	0x0800cca5
 800cc54:	0800cc21 	.word	0x0800cc21
 800cc58:	0800cc21 	.word	0x0800cc21
 800cc5c:	0800cc21 	.word	0x0800cc21
 800cc60:	0800cc21 	.word	0x0800cc21
 800cc64:	0800cda3 	.word	0x0800cda3
 800cc68:	0800cccf 	.word	0x0800cccf
 800cc6c:	0800cd5d 	.word	0x0800cd5d
 800cc70:	0800cc21 	.word	0x0800cc21
 800cc74:	0800cc21 	.word	0x0800cc21
 800cc78:	0800cdc5 	.word	0x0800cdc5
 800cc7c:	0800cc21 	.word	0x0800cc21
 800cc80:	0800cccf 	.word	0x0800cccf
 800cc84:	0800cc21 	.word	0x0800cc21
 800cc88:	0800cc21 	.word	0x0800cc21
 800cc8c:	0800cd65 	.word	0x0800cd65
 800cc90:	6833      	ldr	r3, [r6, #0]
 800cc92:	1d1a      	adds	r2, r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6032      	str	r2, [r6, #0]
 800cc98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cca0:	2301      	movs	r3, #1
 800cca2:	e09c      	b.n	800cdde <_printf_i+0x1e6>
 800cca4:	6833      	ldr	r3, [r6, #0]
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	1d19      	adds	r1, r3, #4
 800ccaa:	6031      	str	r1, [r6, #0]
 800ccac:	0606      	lsls	r6, r0, #24
 800ccae:	d501      	bpl.n	800ccb4 <_printf_i+0xbc>
 800ccb0:	681d      	ldr	r5, [r3, #0]
 800ccb2:	e003      	b.n	800ccbc <_printf_i+0xc4>
 800ccb4:	0645      	lsls	r5, r0, #25
 800ccb6:	d5fb      	bpl.n	800ccb0 <_printf_i+0xb8>
 800ccb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccbc:	2d00      	cmp	r5, #0
 800ccbe:	da03      	bge.n	800ccc8 <_printf_i+0xd0>
 800ccc0:	232d      	movs	r3, #45	@ 0x2d
 800ccc2:	426d      	negs	r5, r5
 800ccc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccc8:	4858      	ldr	r0, [pc, #352]	@ (800ce2c <_printf_i+0x234>)
 800ccca:	230a      	movs	r3, #10
 800cccc:	e011      	b.n	800ccf2 <_printf_i+0xfa>
 800ccce:	6821      	ldr	r1, [r4, #0]
 800ccd0:	6833      	ldr	r3, [r6, #0]
 800ccd2:	0608      	lsls	r0, r1, #24
 800ccd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccd8:	d402      	bmi.n	800cce0 <_printf_i+0xe8>
 800ccda:	0649      	lsls	r1, r1, #25
 800ccdc:	bf48      	it	mi
 800ccde:	b2ad      	uxthmi	r5, r5
 800cce0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cce2:	4852      	ldr	r0, [pc, #328]	@ (800ce2c <_printf_i+0x234>)
 800cce4:	6033      	str	r3, [r6, #0]
 800cce6:	bf14      	ite	ne
 800cce8:	230a      	movne	r3, #10
 800ccea:	2308      	moveq	r3, #8
 800ccec:	2100      	movs	r1, #0
 800ccee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccf2:	6866      	ldr	r6, [r4, #4]
 800ccf4:	60a6      	str	r6, [r4, #8]
 800ccf6:	2e00      	cmp	r6, #0
 800ccf8:	db05      	blt.n	800cd06 <_printf_i+0x10e>
 800ccfa:	6821      	ldr	r1, [r4, #0]
 800ccfc:	432e      	orrs	r6, r5
 800ccfe:	f021 0104 	bic.w	r1, r1, #4
 800cd02:	6021      	str	r1, [r4, #0]
 800cd04:	d04b      	beq.n	800cd9e <_printf_i+0x1a6>
 800cd06:	4616      	mov	r6, r2
 800cd08:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd0c:	fb03 5711 	mls	r7, r3, r1, r5
 800cd10:	5dc7      	ldrb	r7, [r0, r7]
 800cd12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd16:	462f      	mov	r7, r5
 800cd18:	42bb      	cmp	r3, r7
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	d9f4      	bls.n	800cd08 <_printf_i+0x110>
 800cd1e:	2b08      	cmp	r3, #8
 800cd20:	d10b      	bne.n	800cd3a <_printf_i+0x142>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	07df      	lsls	r7, r3, #31
 800cd26:	d508      	bpl.n	800cd3a <_printf_i+0x142>
 800cd28:	6923      	ldr	r3, [r4, #16]
 800cd2a:	6861      	ldr	r1, [r4, #4]
 800cd2c:	4299      	cmp	r1, r3
 800cd2e:	bfde      	ittt	le
 800cd30:	2330      	movle	r3, #48	@ 0x30
 800cd32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd3a:	1b92      	subs	r2, r2, r6
 800cd3c:	6122      	str	r2, [r4, #16]
 800cd3e:	f8cd a000 	str.w	sl, [sp]
 800cd42:	464b      	mov	r3, r9
 800cd44:	aa03      	add	r2, sp, #12
 800cd46:	4621      	mov	r1, r4
 800cd48:	4640      	mov	r0, r8
 800cd4a:	f7ff fee7 	bl	800cb1c <_printf_common>
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d14a      	bne.n	800cde8 <_printf_i+0x1f0>
 800cd52:	f04f 30ff 	mov.w	r0, #4294967295
 800cd56:	b004      	add	sp, #16
 800cd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	f043 0320 	orr.w	r3, r3, #32
 800cd62:	6023      	str	r3, [r4, #0]
 800cd64:	4832      	ldr	r0, [pc, #200]	@ (800ce30 <_printf_i+0x238>)
 800cd66:	2778      	movs	r7, #120	@ 0x78
 800cd68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	6831      	ldr	r1, [r6, #0]
 800cd70:	061f      	lsls	r7, r3, #24
 800cd72:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd76:	d402      	bmi.n	800cd7e <_printf_i+0x186>
 800cd78:	065f      	lsls	r7, r3, #25
 800cd7a:	bf48      	it	mi
 800cd7c:	b2ad      	uxthmi	r5, r5
 800cd7e:	6031      	str	r1, [r6, #0]
 800cd80:	07d9      	lsls	r1, r3, #31
 800cd82:	bf44      	itt	mi
 800cd84:	f043 0320 	orrmi.w	r3, r3, #32
 800cd88:	6023      	strmi	r3, [r4, #0]
 800cd8a:	b11d      	cbz	r5, 800cd94 <_printf_i+0x19c>
 800cd8c:	2310      	movs	r3, #16
 800cd8e:	e7ad      	b.n	800ccec <_printf_i+0xf4>
 800cd90:	4826      	ldr	r0, [pc, #152]	@ (800ce2c <_printf_i+0x234>)
 800cd92:	e7e9      	b.n	800cd68 <_printf_i+0x170>
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	f023 0320 	bic.w	r3, r3, #32
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	e7f6      	b.n	800cd8c <_printf_i+0x194>
 800cd9e:	4616      	mov	r6, r2
 800cda0:	e7bd      	b.n	800cd1e <_printf_i+0x126>
 800cda2:	6833      	ldr	r3, [r6, #0]
 800cda4:	6825      	ldr	r5, [r4, #0]
 800cda6:	6961      	ldr	r1, [r4, #20]
 800cda8:	1d18      	adds	r0, r3, #4
 800cdaa:	6030      	str	r0, [r6, #0]
 800cdac:	062e      	lsls	r6, r5, #24
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	d501      	bpl.n	800cdb6 <_printf_i+0x1be>
 800cdb2:	6019      	str	r1, [r3, #0]
 800cdb4:	e002      	b.n	800cdbc <_printf_i+0x1c4>
 800cdb6:	0668      	lsls	r0, r5, #25
 800cdb8:	d5fb      	bpl.n	800cdb2 <_printf_i+0x1ba>
 800cdba:	8019      	strh	r1, [r3, #0]
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	6123      	str	r3, [r4, #16]
 800cdc0:	4616      	mov	r6, r2
 800cdc2:	e7bc      	b.n	800cd3e <_printf_i+0x146>
 800cdc4:	6833      	ldr	r3, [r6, #0]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	6032      	str	r2, [r6, #0]
 800cdca:	681e      	ldr	r6, [r3, #0]
 800cdcc:	6862      	ldr	r2, [r4, #4]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7f3 fa85 	bl	80002e0 <memchr>
 800cdd6:	b108      	cbz	r0, 800cddc <_printf_i+0x1e4>
 800cdd8:	1b80      	subs	r0, r0, r6
 800cdda:	6060      	str	r0, [r4, #4]
 800cddc:	6863      	ldr	r3, [r4, #4]
 800cdde:	6123      	str	r3, [r4, #16]
 800cde0:	2300      	movs	r3, #0
 800cde2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cde6:	e7aa      	b.n	800cd3e <_printf_i+0x146>
 800cde8:	6923      	ldr	r3, [r4, #16]
 800cdea:	4632      	mov	r2, r6
 800cdec:	4649      	mov	r1, r9
 800cdee:	4640      	mov	r0, r8
 800cdf0:	47d0      	blx	sl
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	d0ad      	beq.n	800cd52 <_printf_i+0x15a>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	079b      	lsls	r3, r3, #30
 800cdfa:	d413      	bmi.n	800ce24 <_printf_i+0x22c>
 800cdfc:	68e0      	ldr	r0, [r4, #12]
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	4298      	cmp	r0, r3
 800ce02:	bfb8      	it	lt
 800ce04:	4618      	movlt	r0, r3
 800ce06:	e7a6      	b.n	800cd56 <_printf_i+0x15e>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	4640      	mov	r0, r8
 800ce10:	47d0      	blx	sl
 800ce12:	3001      	adds	r0, #1
 800ce14:	d09d      	beq.n	800cd52 <_printf_i+0x15a>
 800ce16:	3501      	adds	r5, #1
 800ce18:	68e3      	ldr	r3, [r4, #12]
 800ce1a:	9903      	ldr	r1, [sp, #12]
 800ce1c:	1a5b      	subs	r3, r3, r1
 800ce1e:	42ab      	cmp	r3, r5
 800ce20:	dcf2      	bgt.n	800ce08 <_printf_i+0x210>
 800ce22:	e7eb      	b.n	800cdfc <_printf_i+0x204>
 800ce24:	2500      	movs	r5, #0
 800ce26:	f104 0619 	add.w	r6, r4, #25
 800ce2a:	e7f5      	b.n	800ce18 <_printf_i+0x220>
 800ce2c:	08016613 	.word	0x08016613
 800ce30:	08016624 	.word	0x08016624

0800ce34 <std>:
 800ce34:	2300      	movs	r3, #0
 800ce36:	b510      	push	{r4, lr}
 800ce38:	4604      	mov	r4, r0
 800ce3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce42:	6083      	str	r3, [r0, #8]
 800ce44:	8181      	strh	r1, [r0, #12]
 800ce46:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce48:	81c2      	strh	r2, [r0, #14]
 800ce4a:	6183      	str	r3, [r0, #24]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	2208      	movs	r2, #8
 800ce50:	305c      	adds	r0, #92	@ 0x5c
 800ce52:	f000 fa1b 	bl	800d28c <memset>
 800ce56:	4b0d      	ldr	r3, [pc, #52]	@ (800ce8c <std+0x58>)
 800ce58:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <std+0x5c>)
 800ce5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <std+0x60>)
 800ce60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <std+0x64>)
 800ce64:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce66:	4b0d      	ldr	r3, [pc, #52]	@ (800ce9c <std+0x68>)
 800ce68:	6224      	str	r4, [r4, #32]
 800ce6a:	429c      	cmp	r4, r3
 800ce6c:	d006      	beq.n	800ce7c <std+0x48>
 800ce6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce72:	4294      	cmp	r4, r2
 800ce74:	d002      	beq.n	800ce7c <std+0x48>
 800ce76:	33d0      	adds	r3, #208	@ 0xd0
 800ce78:	429c      	cmp	r4, r3
 800ce7a:	d105      	bne.n	800ce88 <std+0x54>
 800ce7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce84:	f000 ba7e 	b.w	800d384 <__retarget_lock_init_recursive>
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	bf00      	nop
 800ce8c:	0800d0dd 	.word	0x0800d0dd
 800ce90:	0800d0ff 	.word	0x0800d0ff
 800ce94:	0800d137 	.word	0x0800d137
 800ce98:	0800d15b 	.word	0x0800d15b
 800ce9c:	24000a58 	.word	0x24000a58

0800cea0 <stdio_exit_handler>:
 800cea0:	4a02      	ldr	r2, [pc, #8]	@ (800ceac <stdio_exit_handler+0xc>)
 800cea2:	4903      	ldr	r1, [pc, #12]	@ (800ceb0 <stdio_exit_handler+0x10>)
 800cea4:	4803      	ldr	r0, [pc, #12]	@ (800ceb4 <stdio_exit_handler+0x14>)
 800cea6:	f000 b869 	b.w	800cf7c <_fwalk_sglue>
 800ceaa:	bf00      	nop
 800ceac:	240000a0 	.word	0x240000a0
 800ceb0:	0800ee8d 	.word	0x0800ee8d
 800ceb4:	240000b0 	.word	0x240000b0

0800ceb8 <cleanup_stdio>:
 800ceb8:	6841      	ldr	r1, [r0, #4]
 800ceba:	4b0c      	ldr	r3, [pc, #48]	@ (800ceec <cleanup_stdio+0x34>)
 800cebc:	4299      	cmp	r1, r3
 800cebe:	b510      	push	{r4, lr}
 800cec0:	4604      	mov	r4, r0
 800cec2:	d001      	beq.n	800cec8 <cleanup_stdio+0x10>
 800cec4:	f001 ffe2 	bl	800ee8c <_fflush_r>
 800cec8:	68a1      	ldr	r1, [r4, #8]
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <cleanup_stdio+0x38>)
 800cecc:	4299      	cmp	r1, r3
 800cece:	d002      	beq.n	800ced6 <cleanup_stdio+0x1e>
 800ced0:	4620      	mov	r0, r4
 800ced2:	f001 ffdb 	bl	800ee8c <_fflush_r>
 800ced6:	68e1      	ldr	r1, [r4, #12]
 800ced8:	4b06      	ldr	r3, [pc, #24]	@ (800cef4 <cleanup_stdio+0x3c>)
 800ceda:	4299      	cmp	r1, r3
 800cedc:	d004      	beq.n	800cee8 <cleanup_stdio+0x30>
 800cede:	4620      	mov	r0, r4
 800cee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee4:	f001 bfd2 	b.w	800ee8c <_fflush_r>
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	bf00      	nop
 800ceec:	24000a58 	.word	0x24000a58
 800cef0:	24000ac0 	.word	0x24000ac0
 800cef4:	24000b28 	.word	0x24000b28

0800cef8 <global_stdio_init.part.0>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	4b0b      	ldr	r3, [pc, #44]	@ (800cf28 <global_stdio_init.part.0+0x30>)
 800cefc:	4c0b      	ldr	r4, [pc, #44]	@ (800cf2c <global_stdio_init.part.0+0x34>)
 800cefe:	4a0c      	ldr	r2, [pc, #48]	@ (800cf30 <global_stdio_init.part.0+0x38>)
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	4620      	mov	r0, r4
 800cf04:	2200      	movs	r2, #0
 800cf06:	2104      	movs	r1, #4
 800cf08:	f7ff ff94 	bl	800ce34 <std>
 800cf0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf10:	2201      	movs	r2, #1
 800cf12:	2109      	movs	r1, #9
 800cf14:	f7ff ff8e 	bl	800ce34 <std>
 800cf18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf22:	2112      	movs	r1, #18
 800cf24:	f7ff bf86 	b.w	800ce34 <std>
 800cf28:	24000b90 	.word	0x24000b90
 800cf2c:	24000a58 	.word	0x24000a58
 800cf30:	0800cea1 	.word	0x0800cea1

0800cf34 <__sfp_lock_acquire>:
 800cf34:	4801      	ldr	r0, [pc, #4]	@ (800cf3c <__sfp_lock_acquire+0x8>)
 800cf36:	f000 ba26 	b.w	800d386 <__retarget_lock_acquire_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	24000b99 	.word	0x24000b99

0800cf40 <__sfp_lock_release>:
 800cf40:	4801      	ldr	r0, [pc, #4]	@ (800cf48 <__sfp_lock_release+0x8>)
 800cf42:	f000 ba21 	b.w	800d388 <__retarget_lock_release_recursive>
 800cf46:	bf00      	nop
 800cf48:	24000b99 	.word	0x24000b99

0800cf4c <__sinit>:
 800cf4c:	b510      	push	{r4, lr}
 800cf4e:	4604      	mov	r4, r0
 800cf50:	f7ff fff0 	bl	800cf34 <__sfp_lock_acquire>
 800cf54:	6a23      	ldr	r3, [r4, #32]
 800cf56:	b11b      	cbz	r3, 800cf60 <__sinit+0x14>
 800cf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf5c:	f7ff bff0 	b.w	800cf40 <__sfp_lock_release>
 800cf60:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <__sinit+0x28>)
 800cf62:	6223      	str	r3, [r4, #32]
 800cf64:	4b04      	ldr	r3, [pc, #16]	@ (800cf78 <__sinit+0x2c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f5      	bne.n	800cf58 <__sinit+0xc>
 800cf6c:	f7ff ffc4 	bl	800cef8 <global_stdio_init.part.0>
 800cf70:	e7f2      	b.n	800cf58 <__sinit+0xc>
 800cf72:	bf00      	nop
 800cf74:	0800ceb9 	.word	0x0800ceb9
 800cf78:	24000b90 	.word	0x24000b90

0800cf7c <_fwalk_sglue>:
 800cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf80:	4607      	mov	r7, r0
 800cf82:	4688      	mov	r8, r1
 800cf84:	4614      	mov	r4, r2
 800cf86:	2600      	movs	r6, #0
 800cf88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf8c:	f1b9 0901 	subs.w	r9, r9, #1
 800cf90:	d505      	bpl.n	800cf9e <_fwalk_sglue+0x22>
 800cf92:	6824      	ldr	r4, [r4, #0]
 800cf94:	2c00      	cmp	r4, #0
 800cf96:	d1f7      	bne.n	800cf88 <_fwalk_sglue+0xc>
 800cf98:	4630      	mov	r0, r6
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d907      	bls.n	800cfb4 <_fwalk_sglue+0x38>
 800cfa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	d003      	beq.n	800cfb4 <_fwalk_sglue+0x38>
 800cfac:	4629      	mov	r1, r5
 800cfae:	4638      	mov	r0, r7
 800cfb0:	47c0      	blx	r8
 800cfb2:	4306      	orrs	r6, r0
 800cfb4:	3568      	adds	r5, #104	@ 0x68
 800cfb6:	e7e9      	b.n	800cf8c <_fwalk_sglue+0x10>

0800cfb8 <iprintf>:
 800cfb8:	b40f      	push	{r0, r1, r2, r3}
 800cfba:	b507      	push	{r0, r1, r2, lr}
 800cfbc:	4906      	ldr	r1, [pc, #24]	@ (800cfd8 <iprintf+0x20>)
 800cfbe:	ab04      	add	r3, sp, #16
 800cfc0:	6808      	ldr	r0, [r1, #0]
 800cfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc6:	6881      	ldr	r1, [r0, #8]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f001 fdc3 	bl	800eb54 <_vfiprintf_r>
 800cfce:	b003      	add	sp, #12
 800cfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd4:	b004      	add	sp, #16
 800cfd6:	4770      	bx	lr
 800cfd8:	240000ac 	.word	0x240000ac

0800cfdc <_puts_r>:
 800cfdc:	6a03      	ldr	r3, [r0, #32]
 800cfde:	b570      	push	{r4, r5, r6, lr}
 800cfe0:	6884      	ldr	r4, [r0, #8]
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	460e      	mov	r6, r1
 800cfe6:	b90b      	cbnz	r3, 800cfec <_puts_r+0x10>
 800cfe8:	f7ff ffb0 	bl	800cf4c <__sinit>
 800cfec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfee:	07db      	lsls	r3, r3, #31
 800cff0:	d405      	bmi.n	800cffe <_puts_r+0x22>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	0598      	lsls	r0, r3, #22
 800cff6:	d402      	bmi.n	800cffe <_puts_r+0x22>
 800cff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cffa:	f000 f9c4 	bl	800d386 <__retarget_lock_acquire_recursive>
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	0719      	lsls	r1, r3, #28
 800d002:	d502      	bpl.n	800d00a <_puts_r+0x2e>
 800d004:	6923      	ldr	r3, [r4, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d135      	bne.n	800d076 <_puts_r+0x9a>
 800d00a:	4621      	mov	r1, r4
 800d00c:	4628      	mov	r0, r5
 800d00e:	f000 f8e7 	bl	800d1e0 <__swsetup_r>
 800d012:	b380      	cbz	r0, 800d076 <_puts_r+0x9a>
 800d014:	f04f 35ff 	mov.w	r5, #4294967295
 800d018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d01a:	07da      	lsls	r2, r3, #31
 800d01c:	d405      	bmi.n	800d02a <_puts_r+0x4e>
 800d01e:	89a3      	ldrh	r3, [r4, #12]
 800d020:	059b      	lsls	r3, r3, #22
 800d022:	d402      	bmi.n	800d02a <_puts_r+0x4e>
 800d024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d026:	f000 f9af 	bl	800d388 <__retarget_lock_release_recursive>
 800d02a:	4628      	mov	r0, r5
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
 800d02e:	2b00      	cmp	r3, #0
 800d030:	da04      	bge.n	800d03c <_puts_r+0x60>
 800d032:	69a2      	ldr	r2, [r4, #24]
 800d034:	429a      	cmp	r2, r3
 800d036:	dc17      	bgt.n	800d068 <_puts_r+0x8c>
 800d038:	290a      	cmp	r1, #10
 800d03a:	d015      	beq.n	800d068 <_puts_r+0x8c>
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	6022      	str	r2, [r4, #0]
 800d042:	7019      	strb	r1, [r3, #0]
 800d044:	68a3      	ldr	r3, [r4, #8]
 800d046:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d04a:	3b01      	subs	r3, #1
 800d04c:	60a3      	str	r3, [r4, #8]
 800d04e:	2900      	cmp	r1, #0
 800d050:	d1ed      	bne.n	800d02e <_puts_r+0x52>
 800d052:	2b00      	cmp	r3, #0
 800d054:	da11      	bge.n	800d07a <_puts_r+0x9e>
 800d056:	4622      	mov	r2, r4
 800d058:	210a      	movs	r1, #10
 800d05a:	4628      	mov	r0, r5
 800d05c:	f000 f881 	bl	800d162 <__swbuf_r>
 800d060:	3001      	adds	r0, #1
 800d062:	d0d7      	beq.n	800d014 <_puts_r+0x38>
 800d064:	250a      	movs	r5, #10
 800d066:	e7d7      	b.n	800d018 <_puts_r+0x3c>
 800d068:	4622      	mov	r2, r4
 800d06a:	4628      	mov	r0, r5
 800d06c:	f000 f879 	bl	800d162 <__swbuf_r>
 800d070:	3001      	adds	r0, #1
 800d072:	d1e7      	bne.n	800d044 <_puts_r+0x68>
 800d074:	e7ce      	b.n	800d014 <_puts_r+0x38>
 800d076:	3e01      	subs	r6, #1
 800d078:	e7e4      	b.n	800d044 <_puts_r+0x68>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	6022      	str	r2, [r4, #0]
 800d080:	220a      	movs	r2, #10
 800d082:	701a      	strb	r2, [r3, #0]
 800d084:	e7ee      	b.n	800d064 <_puts_r+0x88>
	...

0800d088 <puts>:
 800d088:	4b02      	ldr	r3, [pc, #8]	@ (800d094 <puts+0xc>)
 800d08a:	4601      	mov	r1, r0
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	f7ff bfa5 	b.w	800cfdc <_puts_r>
 800d092:	bf00      	nop
 800d094:	240000ac 	.word	0x240000ac

0800d098 <siprintf>:
 800d098:	b40e      	push	{r1, r2, r3}
 800d09a:	b510      	push	{r4, lr}
 800d09c:	b09d      	sub	sp, #116	@ 0x74
 800d09e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d0a0:	9002      	str	r0, [sp, #8]
 800d0a2:	9006      	str	r0, [sp, #24]
 800d0a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0a8:	480a      	ldr	r0, [pc, #40]	@ (800d0d4 <siprintf+0x3c>)
 800d0aa:	9107      	str	r1, [sp, #28]
 800d0ac:	9104      	str	r1, [sp, #16]
 800d0ae:	490a      	ldr	r1, [pc, #40]	@ (800d0d8 <siprintf+0x40>)
 800d0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b4:	9105      	str	r1, [sp, #20]
 800d0b6:	2400      	movs	r4, #0
 800d0b8:	a902      	add	r1, sp, #8
 800d0ba:	6800      	ldr	r0, [r0, #0]
 800d0bc:	9301      	str	r3, [sp, #4]
 800d0be:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d0c0:	f001 fc22 	bl	800e908 <_svfiprintf_r>
 800d0c4:	9b02      	ldr	r3, [sp, #8]
 800d0c6:	701c      	strb	r4, [r3, #0]
 800d0c8:	b01d      	add	sp, #116	@ 0x74
 800d0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ce:	b003      	add	sp, #12
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	240000ac 	.word	0x240000ac
 800d0d8:	ffff0208 	.word	0xffff0208

0800d0dc <__sread>:
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	460c      	mov	r4, r1
 800d0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e4:	f000 f900 	bl	800d2e8 <_read_r>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	bfab      	itete	ge
 800d0ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d0f0:	181b      	addge	r3, r3, r0
 800d0f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0f6:	bfac      	ite	ge
 800d0f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0fa:	81a3      	strhlt	r3, [r4, #12]
 800d0fc:	bd10      	pop	{r4, pc}

0800d0fe <__swrite>:
 800d0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d102:	461f      	mov	r7, r3
 800d104:	898b      	ldrh	r3, [r1, #12]
 800d106:	05db      	lsls	r3, r3, #23
 800d108:	4605      	mov	r5, r0
 800d10a:	460c      	mov	r4, r1
 800d10c:	4616      	mov	r6, r2
 800d10e:	d505      	bpl.n	800d11c <__swrite+0x1e>
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	2302      	movs	r3, #2
 800d116:	2200      	movs	r2, #0
 800d118:	f000 f8d4 	bl	800d2c4 <_lseek_r>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	4632      	mov	r2, r6
 800d12a:	463b      	mov	r3, r7
 800d12c:	4628      	mov	r0, r5
 800d12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	f000 b8eb 	b.w	800d30c <_write_r>

0800d136 <__sseek>:
 800d136:	b510      	push	{r4, lr}
 800d138:	460c      	mov	r4, r1
 800d13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13e:	f000 f8c1 	bl	800d2c4 <_lseek_r>
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	bf15      	itete	ne
 800d148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d14a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d14e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d152:	81a3      	strheq	r3, [r4, #12]
 800d154:	bf18      	it	ne
 800d156:	81a3      	strhne	r3, [r4, #12]
 800d158:	bd10      	pop	{r4, pc}

0800d15a <__sclose>:
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f000 b8a1 	b.w	800d2a4 <_close_r>

0800d162 <__swbuf_r>:
 800d162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d164:	460e      	mov	r6, r1
 800d166:	4614      	mov	r4, r2
 800d168:	4605      	mov	r5, r0
 800d16a:	b118      	cbz	r0, 800d174 <__swbuf_r+0x12>
 800d16c:	6a03      	ldr	r3, [r0, #32]
 800d16e:	b90b      	cbnz	r3, 800d174 <__swbuf_r+0x12>
 800d170:	f7ff feec 	bl	800cf4c <__sinit>
 800d174:	69a3      	ldr	r3, [r4, #24]
 800d176:	60a3      	str	r3, [r4, #8]
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	071a      	lsls	r2, r3, #28
 800d17c:	d501      	bpl.n	800d182 <__swbuf_r+0x20>
 800d17e:	6923      	ldr	r3, [r4, #16]
 800d180:	b943      	cbnz	r3, 800d194 <__swbuf_r+0x32>
 800d182:	4621      	mov	r1, r4
 800d184:	4628      	mov	r0, r5
 800d186:	f000 f82b 	bl	800d1e0 <__swsetup_r>
 800d18a:	b118      	cbz	r0, 800d194 <__swbuf_r+0x32>
 800d18c:	f04f 37ff 	mov.w	r7, #4294967295
 800d190:	4638      	mov	r0, r7
 800d192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	6922      	ldr	r2, [r4, #16]
 800d198:	1a98      	subs	r0, r3, r2
 800d19a:	6963      	ldr	r3, [r4, #20]
 800d19c:	b2f6      	uxtb	r6, r6
 800d19e:	4283      	cmp	r3, r0
 800d1a0:	4637      	mov	r7, r6
 800d1a2:	dc05      	bgt.n	800d1b0 <__swbuf_r+0x4e>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f001 fe70 	bl	800ee8c <_fflush_r>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d1ed      	bne.n	800d18c <__swbuf_r+0x2a>
 800d1b0:	68a3      	ldr	r3, [r4, #8]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	60a3      	str	r3, [r4, #8]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	6022      	str	r2, [r4, #0]
 800d1bc:	701e      	strb	r6, [r3, #0]
 800d1be:	6962      	ldr	r2, [r4, #20]
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d004      	beq.n	800d1d0 <__swbuf_r+0x6e>
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	07db      	lsls	r3, r3, #31
 800d1ca:	d5e1      	bpl.n	800d190 <__swbuf_r+0x2e>
 800d1cc:	2e0a      	cmp	r6, #10
 800d1ce:	d1df      	bne.n	800d190 <__swbuf_r+0x2e>
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f001 fe5a 	bl	800ee8c <_fflush_r>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d0d9      	beq.n	800d190 <__swbuf_r+0x2e>
 800d1dc:	e7d6      	b.n	800d18c <__swbuf_r+0x2a>
	...

0800d1e0 <__swsetup_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4b29      	ldr	r3, [pc, #164]	@ (800d288 <__swsetup_r+0xa8>)
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	6818      	ldr	r0, [r3, #0]
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	b118      	cbz	r0, 800d1f4 <__swsetup_r+0x14>
 800d1ec:	6a03      	ldr	r3, [r0, #32]
 800d1ee:	b90b      	cbnz	r3, 800d1f4 <__swsetup_r+0x14>
 800d1f0:	f7ff feac 	bl	800cf4c <__sinit>
 800d1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f8:	0719      	lsls	r1, r3, #28
 800d1fa:	d422      	bmi.n	800d242 <__swsetup_r+0x62>
 800d1fc:	06da      	lsls	r2, r3, #27
 800d1fe:	d407      	bmi.n	800d210 <__swsetup_r+0x30>
 800d200:	2209      	movs	r2, #9
 800d202:	602a      	str	r2, [r5, #0]
 800d204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	f04f 30ff 	mov.w	r0, #4294967295
 800d20e:	e033      	b.n	800d278 <__swsetup_r+0x98>
 800d210:	0758      	lsls	r0, r3, #29
 800d212:	d512      	bpl.n	800d23a <__swsetup_r+0x5a>
 800d214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d216:	b141      	cbz	r1, 800d22a <__swsetup_r+0x4a>
 800d218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d21c:	4299      	cmp	r1, r3
 800d21e:	d002      	beq.n	800d226 <__swsetup_r+0x46>
 800d220:	4628      	mov	r0, r5
 800d222:	f000 fe9b 	bl	800df5c <_free_r>
 800d226:	2300      	movs	r3, #0
 800d228:	6363      	str	r3, [r4, #52]	@ 0x34
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	2300      	movs	r3, #0
 800d234:	6063      	str	r3, [r4, #4]
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f043 0308 	orr.w	r3, r3, #8
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	b94b      	cbnz	r3, 800d25a <__swsetup_r+0x7a>
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d24c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d250:	d003      	beq.n	800d25a <__swsetup_r+0x7a>
 800d252:	4621      	mov	r1, r4
 800d254:	4628      	mov	r0, r5
 800d256:	f001 fe67 	bl	800ef28 <__smakebuf_r>
 800d25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d25e:	f013 0201 	ands.w	r2, r3, #1
 800d262:	d00a      	beq.n	800d27a <__swsetup_r+0x9a>
 800d264:	2200      	movs	r2, #0
 800d266:	60a2      	str	r2, [r4, #8]
 800d268:	6962      	ldr	r2, [r4, #20]
 800d26a:	4252      	negs	r2, r2
 800d26c:	61a2      	str	r2, [r4, #24]
 800d26e:	6922      	ldr	r2, [r4, #16]
 800d270:	b942      	cbnz	r2, 800d284 <__swsetup_r+0xa4>
 800d272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d276:	d1c5      	bne.n	800d204 <__swsetup_r+0x24>
 800d278:	bd38      	pop	{r3, r4, r5, pc}
 800d27a:	0799      	lsls	r1, r3, #30
 800d27c:	bf58      	it	pl
 800d27e:	6962      	ldrpl	r2, [r4, #20]
 800d280:	60a2      	str	r2, [r4, #8]
 800d282:	e7f4      	b.n	800d26e <__swsetup_r+0x8e>
 800d284:	2000      	movs	r0, #0
 800d286:	e7f7      	b.n	800d278 <__swsetup_r+0x98>
 800d288:	240000ac 	.word	0x240000ac

0800d28c <memset>:
 800d28c:	4402      	add	r2, r0
 800d28e:	4603      	mov	r3, r0
 800d290:	4293      	cmp	r3, r2
 800d292:	d100      	bne.n	800d296 <memset+0xa>
 800d294:	4770      	bx	lr
 800d296:	f803 1b01 	strb.w	r1, [r3], #1
 800d29a:	e7f9      	b.n	800d290 <memset+0x4>

0800d29c <_localeconv_r>:
 800d29c:	4800      	ldr	r0, [pc, #0]	@ (800d2a0 <_localeconv_r+0x4>)
 800d29e:	4770      	bx	lr
 800d2a0:	240001ec 	.word	0x240001ec

0800d2a4 <_close_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d06      	ldr	r5, [pc, #24]	@ (800d2c0 <_close_r+0x1c>)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	4608      	mov	r0, r1
 800d2ae:	602b      	str	r3, [r5, #0]
 800d2b0:	f7f4 fca5 	bl	8001bfe <_close>
 800d2b4:	1c43      	adds	r3, r0, #1
 800d2b6:	d102      	bne.n	800d2be <_close_r+0x1a>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	b103      	cbz	r3, 800d2be <_close_r+0x1a>
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	24000b94 	.word	0x24000b94

0800d2c4 <_lseek_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4d07      	ldr	r5, [pc, #28]	@ (800d2e4 <_lseek_r+0x20>)
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	602a      	str	r2, [r5, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f7f4 fcba 	bl	8001c4c <_lseek>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_lseek_r+0x1e>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_lseek_r+0x1e>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	24000b94 	.word	0x24000b94

0800d2e8 <_read_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d07      	ldr	r5, [pc, #28]	@ (800d308 <_read_r+0x20>)
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	602a      	str	r2, [r5, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f7f4 fc48 	bl	8001b8c <_read>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_read_r+0x1e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_read_r+0x1e>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	24000b94 	.word	0x24000b94

0800d30c <_write_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	@ (800d32c <_write_r+0x20>)
 800d310:	4604      	mov	r4, r0
 800d312:	4608      	mov	r0, r1
 800d314:	4611      	mov	r1, r2
 800d316:	2200      	movs	r2, #0
 800d318:	602a      	str	r2, [r5, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	f7f4 fc53 	bl	8001bc6 <_write>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_write_r+0x1e>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_write_r+0x1e>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	24000b94 	.word	0x24000b94

0800d330 <__errno>:
 800d330:	4b01      	ldr	r3, [pc, #4]	@ (800d338 <__errno+0x8>)
 800d332:	6818      	ldr	r0, [r3, #0]
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	240000ac 	.word	0x240000ac

0800d33c <__libc_init_array>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	4d0d      	ldr	r5, [pc, #52]	@ (800d374 <__libc_init_array+0x38>)
 800d340:	4c0d      	ldr	r4, [pc, #52]	@ (800d378 <__libc_init_array+0x3c>)
 800d342:	1b64      	subs	r4, r4, r5
 800d344:	10a4      	asrs	r4, r4, #2
 800d346:	2600      	movs	r6, #0
 800d348:	42a6      	cmp	r6, r4
 800d34a:	d109      	bne.n	800d360 <__libc_init_array+0x24>
 800d34c:	4d0b      	ldr	r5, [pc, #44]	@ (800d37c <__libc_init_array+0x40>)
 800d34e:	4c0c      	ldr	r4, [pc, #48]	@ (800d380 <__libc_init_array+0x44>)
 800d350:	f001 ff66 	bl	800f220 <_init>
 800d354:	1b64      	subs	r4, r4, r5
 800d356:	10a4      	asrs	r4, r4, #2
 800d358:	2600      	movs	r6, #0
 800d35a:	42a6      	cmp	r6, r4
 800d35c:	d105      	bne.n	800d36a <__libc_init_array+0x2e>
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	f855 3b04 	ldr.w	r3, [r5], #4
 800d364:	4798      	blx	r3
 800d366:	3601      	adds	r6, #1
 800d368:	e7ee      	b.n	800d348 <__libc_init_array+0xc>
 800d36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36e:	4798      	blx	r3
 800d370:	3601      	adds	r6, #1
 800d372:	e7f2      	b.n	800d35a <__libc_init_array+0x1e>
 800d374:	0801697c 	.word	0x0801697c
 800d378:	0801697c 	.word	0x0801697c
 800d37c:	0801697c 	.word	0x0801697c
 800d380:	08016980 	.word	0x08016980

0800d384 <__retarget_lock_init_recursive>:
 800d384:	4770      	bx	lr

0800d386 <__retarget_lock_acquire_recursive>:
 800d386:	4770      	bx	lr

0800d388 <__retarget_lock_release_recursive>:
 800d388:	4770      	bx	lr

0800d38a <quorem>:
 800d38a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38e:	6903      	ldr	r3, [r0, #16]
 800d390:	690c      	ldr	r4, [r1, #16]
 800d392:	42a3      	cmp	r3, r4
 800d394:	4607      	mov	r7, r0
 800d396:	db7e      	blt.n	800d496 <quorem+0x10c>
 800d398:	3c01      	subs	r4, #1
 800d39a:	f101 0814 	add.w	r8, r1, #20
 800d39e:	00a3      	lsls	r3, r4, #2
 800d3a0:	f100 0514 	add.w	r5, r0, #20
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3c0:	d32e      	bcc.n	800d420 <quorem+0x96>
 800d3c2:	f04f 0a00 	mov.w	sl, #0
 800d3c6:	46c4      	mov	ip, r8
 800d3c8:	46ae      	mov	lr, r5
 800d3ca:	46d3      	mov	fp, sl
 800d3cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3d0:	b298      	uxth	r0, r3
 800d3d2:	fb06 a000 	mla	r0, r6, r0, sl
 800d3d6:	0c02      	lsrs	r2, r0, #16
 800d3d8:	0c1b      	lsrs	r3, r3, #16
 800d3da:	fb06 2303 	mla	r3, r6, r3, r2
 800d3de:	f8de 2000 	ldr.w	r2, [lr]
 800d3e2:	b280      	uxth	r0, r0
 800d3e4:	b292      	uxth	r2, r2
 800d3e6:	1a12      	subs	r2, r2, r0
 800d3e8:	445a      	add	r2, fp
 800d3ea:	f8de 0000 	ldr.w	r0, [lr]
 800d3ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3fc:	b292      	uxth	r2, r2
 800d3fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d402:	45e1      	cmp	r9, ip
 800d404:	f84e 2b04 	str.w	r2, [lr], #4
 800d408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d40c:	d2de      	bcs.n	800d3cc <quorem+0x42>
 800d40e:	9b00      	ldr	r3, [sp, #0]
 800d410:	58eb      	ldr	r3, [r5, r3]
 800d412:	b92b      	cbnz	r3, 800d420 <quorem+0x96>
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	3b04      	subs	r3, #4
 800d418:	429d      	cmp	r5, r3
 800d41a:	461a      	mov	r2, r3
 800d41c:	d32f      	bcc.n	800d47e <quorem+0xf4>
 800d41e:	613c      	str	r4, [r7, #16]
 800d420:	4638      	mov	r0, r7
 800d422:	f001 f90d 	bl	800e640 <__mcmp>
 800d426:	2800      	cmp	r0, #0
 800d428:	db25      	blt.n	800d476 <quorem+0xec>
 800d42a:	4629      	mov	r1, r5
 800d42c:	2000      	movs	r0, #0
 800d42e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d432:	f8d1 c000 	ldr.w	ip, [r1]
 800d436:	fa1f fe82 	uxth.w	lr, r2
 800d43a:	fa1f f38c 	uxth.w	r3, ip
 800d43e:	eba3 030e 	sub.w	r3, r3, lr
 800d442:	4403      	add	r3, r0
 800d444:	0c12      	lsrs	r2, r2, #16
 800d446:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d44a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d44e:	b29b      	uxth	r3, r3
 800d450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d454:	45c1      	cmp	r9, r8
 800d456:	f841 3b04 	str.w	r3, [r1], #4
 800d45a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d45e:	d2e6      	bcs.n	800d42e <quorem+0xa4>
 800d460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d468:	b922      	cbnz	r2, 800d474 <quorem+0xea>
 800d46a:	3b04      	subs	r3, #4
 800d46c:	429d      	cmp	r5, r3
 800d46e:	461a      	mov	r2, r3
 800d470:	d30b      	bcc.n	800d48a <quorem+0x100>
 800d472:	613c      	str	r4, [r7, #16]
 800d474:	3601      	adds	r6, #1
 800d476:	4630      	mov	r0, r6
 800d478:	b003      	add	sp, #12
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	6812      	ldr	r2, [r2, #0]
 800d480:	3b04      	subs	r3, #4
 800d482:	2a00      	cmp	r2, #0
 800d484:	d1cb      	bne.n	800d41e <quorem+0x94>
 800d486:	3c01      	subs	r4, #1
 800d488:	e7c6      	b.n	800d418 <quorem+0x8e>
 800d48a:	6812      	ldr	r2, [r2, #0]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	2a00      	cmp	r2, #0
 800d490:	d1ef      	bne.n	800d472 <quorem+0xe8>
 800d492:	3c01      	subs	r4, #1
 800d494:	e7ea      	b.n	800d46c <quorem+0xe2>
 800d496:	2000      	movs	r0, #0
 800d498:	e7ee      	b.n	800d478 <quorem+0xee>
 800d49a:	0000      	movs	r0, r0
 800d49c:	0000      	movs	r0, r0
	...

0800d4a0 <_dtoa_r>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	ed2d 8b02 	vpush	{d8}
 800d4a8:	69c7      	ldr	r7, [r0, #28]
 800d4aa:	b091      	sub	sp, #68	@ 0x44
 800d4ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4b0:	ec55 4b10 	vmov	r4, r5, d0
 800d4b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d4b6:	9107      	str	r1, [sp, #28]
 800d4b8:	4681      	mov	r9, r0
 800d4ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4bc:	930d      	str	r3, [sp, #52]	@ 0x34
 800d4be:	b97f      	cbnz	r7, 800d4e0 <_dtoa_r+0x40>
 800d4c0:	2010      	movs	r0, #16
 800d4c2:	f000 fd95 	bl	800dff0 <malloc>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	f8c9 001c 	str.w	r0, [r9, #28]
 800d4cc:	b920      	cbnz	r0, 800d4d8 <_dtoa_r+0x38>
 800d4ce:	4ba0      	ldr	r3, [pc, #640]	@ (800d750 <_dtoa_r+0x2b0>)
 800d4d0:	21ef      	movs	r1, #239	@ 0xef
 800d4d2:	48a0      	ldr	r0, [pc, #640]	@ (800d754 <_dtoa_r+0x2b4>)
 800d4d4:	f001 fdbe 	bl	800f054 <__assert_func>
 800d4d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4dc:	6007      	str	r7, [r0, #0]
 800d4de:	60c7      	str	r7, [r0, #12]
 800d4e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b159      	cbz	r1, 800d500 <_dtoa_r+0x60>
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	604a      	str	r2, [r1, #4]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4093      	lsls	r3, r2
 800d4f0:	608b      	str	r3, [r1, #8]
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	f000 fe72 	bl	800e1dc <_Bfree>
 800d4f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	1e2b      	subs	r3, r5, #0
 800d502:	bfbb      	ittet	lt
 800d504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d508:	9303      	strlt	r3, [sp, #12]
 800d50a:	2300      	movge	r3, #0
 800d50c:	2201      	movlt	r2, #1
 800d50e:	bfac      	ite	ge
 800d510:	6033      	strge	r3, [r6, #0]
 800d512:	6032      	strlt	r2, [r6, #0]
 800d514:	4b90      	ldr	r3, [pc, #576]	@ (800d758 <_dtoa_r+0x2b8>)
 800d516:	9e03      	ldr	r6, [sp, #12]
 800d518:	43b3      	bics	r3, r6
 800d51a:	d110      	bne.n	800d53e <_dtoa_r+0x9e>
 800d51c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d51e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d528:	4323      	orrs	r3, r4
 800d52a:	f000 84e6 	beq.w	800defa <_dtoa_r+0xa5a>
 800d52e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d530:	4f8a      	ldr	r7, [pc, #552]	@ (800d75c <_dtoa_r+0x2bc>)
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 84e8 	beq.w	800df08 <_dtoa_r+0xa68>
 800d538:	1cfb      	adds	r3, r7, #3
 800d53a:	f000 bce3 	b.w	800df04 <_dtoa_r+0xa64>
 800d53e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d542:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54a:	d10a      	bne.n	800d562 <_dtoa_r+0xc2>
 800d54c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d54e:	2301      	movs	r3, #1
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d554:	b113      	cbz	r3, 800d55c <_dtoa_r+0xbc>
 800d556:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d558:	4b81      	ldr	r3, [pc, #516]	@ (800d760 <_dtoa_r+0x2c0>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	4f81      	ldr	r7, [pc, #516]	@ (800d764 <_dtoa_r+0x2c4>)
 800d55e:	f000 bcd3 	b.w	800df08 <_dtoa_r+0xa68>
 800d562:	aa0e      	add	r2, sp, #56	@ 0x38
 800d564:	a90f      	add	r1, sp, #60	@ 0x3c
 800d566:	4648      	mov	r0, r9
 800d568:	eeb0 0b48 	vmov.f64	d0, d8
 800d56c:	f001 f918 	bl	800e7a0 <__d2b>
 800d570:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d576:	9001      	str	r0, [sp, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d045      	beq.n	800d608 <_dtoa_r+0x168>
 800d57c:	eeb0 7b48 	vmov.f64	d7, d8
 800d580:	ee18 1a90 	vmov	r1, s17
 800d584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d588:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d58c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d590:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d594:	2500      	movs	r5, #0
 800d596:	ee07 1a90 	vmov	s15, r1
 800d59a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d59e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d738 <_dtoa_r+0x298>
 800d5a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d5a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d740 <_dtoa_r+0x2a0>
 800d5aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d5ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d748 <_dtoa_r+0x2a8>
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d5ba:	eeb0 7b46 	vmov.f64	d7, d6
 800d5be:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d5c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d5c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ce:	ee16 8a90 	vmov	r8, s13
 800d5d2:	d508      	bpl.n	800d5e6 <_dtoa_r+0x146>
 800d5d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d5d8:	eeb4 6b47 	vcmp.f64	d6, d7
 800d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e0:	bf18      	it	ne
 800d5e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d5e6:	f1b8 0f16 	cmp.w	r8, #22
 800d5ea:	d82b      	bhi.n	800d644 <_dtoa_r+0x1a4>
 800d5ec:	495e      	ldr	r1, [pc, #376]	@ (800d768 <_dtoa_r+0x2c8>)
 800d5ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d5f2:	ed91 7b00 	vldr	d7, [r1]
 800d5f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fe:	d501      	bpl.n	800d604 <_dtoa_r+0x164>
 800d600:	f108 38ff 	add.w	r8, r8, #4294967295
 800d604:	2100      	movs	r1, #0
 800d606:	e01e      	b.n	800d646 <_dtoa_r+0x1a6>
 800d608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d60a:	4413      	add	r3, r2
 800d60c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d610:	2920      	cmp	r1, #32
 800d612:	bfc1      	itttt	gt
 800d614:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d618:	408e      	lslgt	r6, r1
 800d61a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d61e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d622:	bfd6      	itet	le
 800d624:	f1c1 0120 	rsble	r1, r1, #32
 800d628:	4331      	orrgt	r1, r6
 800d62a:	fa04 f101 	lslle.w	r1, r4, r1
 800d62e:	ee07 1a90 	vmov	s15, r1
 800d632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d636:	3b01      	subs	r3, #1
 800d638:	ee17 1a90 	vmov	r1, s15
 800d63c:	2501      	movs	r5, #1
 800d63e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d642:	e7a8      	b.n	800d596 <_dtoa_r+0xf6>
 800d644:	2101      	movs	r1, #1
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	1e53      	subs	r3, r2, #1
 800d64a:	9306      	str	r3, [sp, #24]
 800d64c:	bf45      	ittet	mi
 800d64e:	f1c2 0301 	rsbmi	r3, r2, #1
 800d652:	9304      	strmi	r3, [sp, #16]
 800d654:	2300      	movpl	r3, #0
 800d656:	2300      	movmi	r3, #0
 800d658:	bf4c      	ite	mi
 800d65a:	9306      	strmi	r3, [sp, #24]
 800d65c:	9304      	strpl	r3, [sp, #16]
 800d65e:	f1b8 0f00 	cmp.w	r8, #0
 800d662:	910c      	str	r1, [sp, #48]	@ 0x30
 800d664:	db18      	blt.n	800d698 <_dtoa_r+0x1f8>
 800d666:	9b06      	ldr	r3, [sp, #24]
 800d668:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d66c:	4443      	add	r3, r8
 800d66e:	9306      	str	r3, [sp, #24]
 800d670:	2300      	movs	r3, #0
 800d672:	9a07      	ldr	r2, [sp, #28]
 800d674:	2a09      	cmp	r2, #9
 800d676:	d845      	bhi.n	800d704 <_dtoa_r+0x264>
 800d678:	2a05      	cmp	r2, #5
 800d67a:	bfc4      	itt	gt
 800d67c:	3a04      	subgt	r2, #4
 800d67e:	9207      	strgt	r2, [sp, #28]
 800d680:	9a07      	ldr	r2, [sp, #28]
 800d682:	f1a2 0202 	sub.w	r2, r2, #2
 800d686:	bfcc      	ite	gt
 800d688:	2400      	movgt	r4, #0
 800d68a:	2401      	movle	r4, #1
 800d68c:	2a03      	cmp	r2, #3
 800d68e:	d844      	bhi.n	800d71a <_dtoa_r+0x27a>
 800d690:	e8df f002 	tbb	[pc, r2]
 800d694:	0b173634 	.word	0x0b173634
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	2200      	movs	r2, #0
 800d69c:	eba3 0308 	sub.w	r3, r3, r8
 800d6a0:	9304      	str	r3, [sp, #16]
 800d6a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d6a4:	f1c8 0300 	rsb	r3, r8, #0
 800d6a8:	e7e3      	b.n	800d672 <_dtoa_r+0x1d2>
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	9208      	str	r2, [sp, #32]
 800d6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6b0:	eb08 0b02 	add.w	fp, r8, r2
 800d6b4:	f10b 0a01 	add.w	sl, fp, #1
 800d6b8:	4652      	mov	r2, sl
 800d6ba:	2a01      	cmp	r2, #1
 800d6bc:	bfb8      	it	lt
 800d6be:	2201      	movlt	r2, #1
 800d6c0:	e006      	b.n	800d6d0 <_dtoa_r+0x230>
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	9208      	str	r2, [sp, #32]
 800d6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6c8:	2a00      	cmp	r2, #0
 800d6ca:	dd29      	ble.n	800d720 <_dtoa_r+0x280>
 800d6cc:	4693      	mov	fp, r2
 800d6ce:	4692      	mov	sl, r2
 800d6d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	2004      	movs	r0, #4
 800d6d8:	f100 0614 	add.w	r6, r0, #20
 800d6dc:	4296      	cmp	r6, r2
 800d6de:	d926      	bls.n	800d72e <_dtoa_r+0x28e>
 800d6e0:	6079      	str	r1, [r7, #4]
 800d6e2:	4648      	mov	r0, r9
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	f000 fd39 	bl	800e15c <_Balloc>
 800d6ea:	9b05      	ldr	r3, [sp, #20]
 800d6ec:	4607      	mov	r7, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d13e      	bne.n	800d770 <_dtoa_r+0x2d0>
 800d6f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d76c <_dtoa_r+0x2cc>)
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6fa:	e6ea      	b.n	800d4d2 <_dtoa_r+0x32>
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	e7e1      	b.n	800d6c4 <_dtoa_r+0x224>
 800d700:	2200      	movs	r2, #0
 800d702:	e7d3      	b.n	800d6ac <_dtoa_r+0x20c>
 800d704:	2401      	movs	r4, #1
 800d706:	2200      	movs	r2, #0
 800d708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d70c:	f04f 3bff 	mov.w	fp, #4294967295
 800d710:	2100      	movs	r1, #0
 800d712:	46da      	mov	sl, fp
 800d714:	2212      	movs	r2, #18
 800d716:	9109      	str	r1, [sp, #36]	@ 0x24
 800d718:	e7da      	b.n	800d6d0 <_dtoa_r+0x230>
 800d71a:	2201      	movs	r2, #1
 800d71c:	9208      	str	r2, [sp, #32]
 800d71e:	e7f5      	b.n	800d70c <_dtoa_r+0x26c>
 800d720:	f04f 0b01 	mov.w	fp, #1
 800d724:	46da      	mov	sl, fp
 800d726:	465a      	mov	r2, fp
 800d728:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d72c:	e7d0      	b.n	800d6d0 <_dtoa_r+0x230>
 800d72e:	3101      	adds	r1, #1
 800d730:	0040      	lsls	r0, r0, #1
 800d732:	e7d1      	b.n	800d6d8 <_dtoa_r+0x238>
 800d734:	f3af 8000 	nop.w
 800d738:	636f4361 	.word	0x636f4361
 800d73c:	3fd287a7 	.word	0x3fd287a7
 800d740:	8b60c8b3 	.word	0x8b60c8b3
 800d744:	3fc68a28 	.word	0x3fc68a28
 800d748:	509f79fb 	.word	0x509f79fb
 800d74c:	3fd34413 	.word	0x3fd34413
 800d750:	08016642 	.word	0x08016642
 800d754:	08016659 	.word	0x08016659
 800d758:	7ff00000 	.word	0x7ff00000
 800d75c:	0801663e 	.word	0x0801663e
 800d760:	08016612 	.word	0x08016612
 800d764:	08016611 	.word	0x08016611
 800d768:	080167a8 	.word	0x080167a8
 800d76c:	080166b1 	.word	0x080166b1
 800d770:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d774:	f1ba 0f0e 	cmp.w	sl, #14
 800d778:	6010      	str	r0, [r2, #0]
 800d77a:	d86e      	bhi.n	800d85a <_dtoa_r+0x3ba>
 800d77c:	2c00      	cmp	r4, #0
 800d77e:	d06c      	beq.n	800d85a <_dtoa_r+0x3ba>
 800d780:	f1b8 0f00 	cmp.w	r8, #0
 800d784:	f340 80b4 	ble.w	800d8f0 <_dtoa_r+0x450>
 800d788:	4ac8      	ldr	r2, [pc, #800]	@ (800daac <_dtoa_r+0x60c>)
 800d78a:	f008 010f 	and.w	r1, r8, #15
 800d78e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d792:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d796:	ed92 7b00 	vldr	d7, [r2]
 800d79a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d79e:	f000 809b 	beq.w	800d8d8 <_dtoa_r+0x438>
 800d7a2:	4ac3      	ldr	r2, [pc, #780]	@ (800dab0 <_dtoa_r+0x610>)
 800d7a4:	ed92 6b08 	vldr	d6, [r2, #32]
 800d7a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d7ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d7b0:	f001 010f 	and.w	r1, r1, #15
 800d7b4:	2203      	movs	r2, #3
 800d7b6:	48be      	ldr	r0, [pc, #760]	@ (800dab0 <_dtoa_r+0x610>)
 800d7b8:	2900      	cmp	r1, #0
 800d7ba:	f040 808f 	bne.w	800d8dc <_dtoa_r+0x43c>
 800d7be:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d7cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7d0:	2900      	cmp	r1, #0
 800d7d2:	f000 80b3 	beq.w	800d93c <_dtoa_r+0x49c>
 800d7d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d7da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e2:	f140 80ab 	bpl.w	800d93c <_dtoa_r+0x49c>
 800d7e6:	f1ba 0f00 	cmp.w	sl, #0
 800d7ea:	f000 80a7 	beq.w	800d93c <_dtoa_r+0x49c>
 800d7ee:	f1bb 0f00 	cmp.w	fp, #0
 800d7f2:	dd30      	ble.n	800d856 <_dtoa_r+0x3b6>
 800d7f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d7f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d800:	f108 31ff 	add.w	r1, r8, #4294967295
 800d804:	9105      	str	r1, [sp, #20]
 800d806:	3201      	adds	r2, #1
 800d808:	465c      	mov	r4, fp
 800d80a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d80e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d812:	ee07 2a90 	vmov	s15, r2
 800d816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d81a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d81e:	ee15 2a90 	vmov	r2, s11
 800d822:	ec51 0b15 	vmov	r0, r1, d5
 800d826:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d82a:	2c00      	cmp	r4, #0
 800d82c:	f040 808a 	bne.w	800d944 <_dtoa_r+0x4a4>
 800d830:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d834:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d838:	ec41 0b17 	vmov	d7, r0, r1
 800d83c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d844:	f300 826a 	bgt.w	800dd1c <_dtoa_r+0x87c>
 800d848:	eeb1 7b47 	vneg.f64	d7, d7
 800d84c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d854:	d423      	bmi.n	800d89e <_dtoa_r+0x3fe>
 800d856:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d85a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d85c:	2a00      	cmp	r2, #0
 800d85e:	f2c0 8129 	blt.w	800dab4 <_dtoa_r+0x614>
 800d862:	f1b8 0f0e 	cmp.w	r8, #14
 800d866:	f300 8125 	bgt.w	800dab4 <_dtoa_r+0x614>
 800d86a:	4b90      	ldr	r3, [pc, #576]	@ (800daac <_dtoa_r+0x60c>)
 800d86c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d870:	ed93 6b00 	vldr	d6, [r3]
 800d874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d876:	2b00      	cmp	r3, #0
 800d878:	f280 80c8 	bge.w	800da0c <_dtoa_r+0x56c>
 800d87c:	f1ba 0f00 	cmp.w	sl, #0
 800d880:	f300 80c4 	bgt.w	800da0c <_dtoa_r+0x56c>
 800d884:	d10b      	bne.n	800d89e <_dtoa_r+0x3fe>
 800d886:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d88a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d88e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	f2c0 823c 	blt.w	800dd16 <_dtoa_r+0x876>
 800d89e:	2400      	movs	r4, #0
 800d8a0:	4625      	mov	r5, r4
 800d8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a4:	43db      	mvns	r3, r3
 800d8a6:	9305      	str	r3, [sp, #20]
 800d8a8:	463e      	mov	r6, r7
 800d8aa:	f04f 0800 	mov.w	r8, #0
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	4648      	mov	r0, r9
 800d8b2:	f000 fc93 	bl	800e1dc <_Bfree>
 800d8b6:	2d00      	cmp	r5, #0
 800d8b8:	f000 80a2 	beq.w	800da00 <_dtoa_r+0x560>
 800d8bc:	f1b8 0f00 	cmp.w	r8, #0
 800d8c0:	d005      	beq.n	800d8ce <_dtoa_r+0x42e>
 800d8c2:	45a8      	cmp	r8, r5
 800d8c4:	d003      	beq.n	800d8ce <_dtoa_r+0x42e>
 800d8c6:	4641      	mov	r1, r8
 800d8c8:	4648      	mov	r0, r9
 800d8ca:	f000 fc87 	bl	800e1dc <_Bfree>
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	4648      	mov	r0, r9
 800d8d2:	f000 fc83 	bl	800e1dc <_Bfree>
 800d8d6:	e093      	b.n	800da00 <_dtoa_r+0x560>
 800d8d8:	2202      	movs	r2, #2
 800d8da:	e76c      	b.n	800d7b6 <_dtoa_r+0x316>
 800d8dc:	07cc      	lsls	r4, r1, #31
 800d8de:	d504      	bpl.n	800d8ea <_dtoa_r+0x44a>
 800d8e0:	ed90 6b00 	vldr	d6, [r0]
 800d8e4:	3201      	adds	r2, #1
 800d8e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8ea:	1049      	asrs	r1, r1, #1
 800d8ec:	3008      	adds	r0, #8
 800d8ee:	e763      	b.n	800d7b8 <_dtoa_r+0x318>
 800d8f0:	d022      	beq.n	800d938 <_dtoa_r+0x498>
 800d8f2:	f1c8 0100 	rsb	r1, r8, #0
 800d8f6:	4a6d      	ldr	r2, [pc, #436]	@ (800daac <_dtoa_r+0x60c>)
 800d8f8:	f001 000f 	and.w	r0, r1, #15
 800d8fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d900:	ed92 7b00 	vldr	d7, [r2]
 800d904:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d90c:	4868      	ldr	r0, [pc, #416]	@ (800dab0 <_dtoa_r+0x610>)
 800d90e:	1109      	asrs	r1, r1, #4
 800d910:	2400      	movs	r4, #0
 800d912:	2202      	movs	r2, #2
 800d914:	b929      	cbnz	r1, 800d922 <_dtoa_r+0x482>
 800d916:	2c00      	cmp	r4, #0
 800d918:	f43f af57 	beq.w	800d7ca <_dtoa_r+0x32a>
 800d91c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d920:	e753      	b.n	800d7ca <_dtoa_r+0x32a>
 800d922:	07ce      	lsls	r6, r1, #31
 800d924:	d505      	bpl.n	800d932 <_dtoa_r+0x492>
 800d926:	ed90 6b00 	vldr	d6, [r0]
 800d92a:	3201      	adds	r2, #1
 800d92c:	2401      	movs	r4, #1
 800d92e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d932:	1049      	asrs	r1, r1, #1
 800d934:	3008      	adds	r0, #8
 800d936:	e7ed      	b.n	800d914 <_dtoa_r+0x474>
 800d938:	2202      	movs	r2, #2
 800d93a:	e746      	b.n	800d7ca <_dtoa_r+0x32a>
 800d93c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d940:	4654      	mov	r4, sl
 800d942:	e762      	b.n	800d80a <_dtoa_r+0x36a>
 800d944:	4a59      	ldr	r2, [pc, #356]	@ (800daac <_dtoa_r+0x60c>)
 800d946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d94a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d94e:	9a08      	ldr	r2, [sp, #32]
 800d950:	ec41 0b17 	vmov	d7, r0, r1
 800d954:	443c      	add	r4, r7
 800d956:	b34a      	cbz	r2, 800d9ac <_dtoa_r+0x50c>
 800d958:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d95c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d960:	463e      	mov	r6, r7
 800d962:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d966:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d96a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d96e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d972:	ee14 2a90 	vmov	r2, s9
 800d976:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d97a:	3230      	adds	r2, #48	@ 0x30
 800d97c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d980:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d988:	f806 2b01 	strb.w	r2, [r6], #1
 800d98c:	d438      	bmi.n	800da00 <_dtoa_r+0x560>
 800d98e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d992:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99a:	d46e      	bmi.n	800da7a <_dtoa_r+0x5da>
 800d99c:	42a6      	cmp	r6, r4
 800d99e:	f43f af5a 	beq.w	800d856 <_dtoa_r+0x3b6>
 800d9a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d9a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9aa:	e7e0      	b.n	800d96e <_dtoa_r+0x4ce>
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	463e      	mov	r6, r7
 800d9b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9b4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d9b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9bc:	ee14 2a90 	vmov	r2, s9
 800d9c0:	3230      	adds	r2, #48	@ 0x30
 800d9c2:	f806 2b01 	strb.w	r2, [r6], #1
 800d9c6:	42a6      	cmp	r6, r4
 800d9c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9d0:	d119      	bne.n	800da06 <_dtoa_r+0x566>
 800d9d2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d9d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d9da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e2:	dc4a      	bgt.n	800da7a <_dtoa_r+0x5da>
 800d9e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d9e8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f0:	f57f af31 	bpl.w	800d856 <_dtoa_r+0x3b6>
 800d9f4:	460e      	mov	r6, r1
 800d9f6:	3901      	subs	r1, #1
 800d9f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9fc:	2b30      	cmp	r3, #48	@ 0x30
 800d9fe:	d0f9      	beq.n	800d9f4 <_dtoa_r+0x554>
 800da00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800da04:	e027      	b.n	800da56 <_dtoa_r+0x5b6>
 800da06:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da0a:	e7d5      	b.n	800d9b8 <_dtoa_r+0x518>
 800da0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800da14:	463e      	mov	r6, r7
 800da16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da1e:	ee15 3a10 	vmov	r3, s10
 800da22:	3330      	adds	r3, #48	@ 0x30
 800da24:	f806 3b01 	strb.w	r3, [r6], #1
 800da28:	1bf3      	subs	r3, r6, r7
 800da2a:	459a      	cmp	sl, r3
 800da2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da30:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da34:	d132      	bne.n	800da9c <_dtoa_r+0x5fc>
 800da36:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da42:	dc18      	bgt.n	800da76 <_dtoa_r+0x5d6>
 800da44:	eeb4 7b46 	vcmp.f64	d7, d6
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	d103      	bne.n	800da56 <_dtoa_r+0x5b6>
 800da4e:	ee15 3a10 	vmov	r3, s10
 800da52:	07db      	lsls	r3, r3, #31
 800da54:	d40f      	bmi.n	800da76 <_dtoa_r+0x5d6>
 800da56:	9901      	ldr	r1, [sp, #4]
 800da58:	4648      	mov	r0, r9
 800da5a:	f000 fbbf 	bl	800e1dc <_Bfree>
 800da5e:	2300      	movs	r3, #0
 800da60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da62:	7033      	strb	r3, [r6, #0]
 800da64:	f108 0301 	add.w	r3, r8, #1
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 824b 	beq.w	800df08 <_dtoa_r+0xa68>
 800da72:	601e      	str	r6, [r3, #0]
 800da74:	e248      	b.n	800df08 <_dtoa_r+0xa68>
 800da76:	f8cd 8014 	str.w	r8, [sp, #20]
 800da7a:	4633      	mov	r3, r6
 800da7c:	461e      	mov	r6, r3
 800da7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da82:	2a39      	cmp	r2, #57	@ 0x39
 800da84:	d106      	bne.n	800da94 <_dtoa_r+0x5f4>
 800da86:	429f      	cmp	r7, r3
 800da88:	d1f8      	bne.n	800da7c <_dtoa_r+0x5dc>
 800da8a:	9a05      	ldr	r2, [sp, #20]
 800da8c:	3201      	adds	r2, #1
 800da8e:	9205      	str	r2, [sp, #20]
 800da90:	2230      	movs	r2, #48	@ 0x30
 800da92:	703a      	strb	r2, [r7, #0]
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	3201      	adds	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	e7b1      	b.n	800da00 <_dtoa_r+0x560>
 800da9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800daa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa8:	d1b5      	bne.n	800da16 <_dtoa_r+0x576>
 800daaa:	e7d4      	b.n	800da56 <_dtoa_r+0x5b6>
 800daac:	080167a8 	.word	0x080167a8
 800dab0:	08016780 	.word	0x08016780
 800dab4:	9908      	ldr	r1, [sp, #32]
 800dab6:	2900      	cmp	r1, #0
 800dab8:	f000 80e9 	beq.w	800dc8e <_dtoa_r+0x7ee>
 800dabc:	9907      	ldr	r1, [sp, #28]
 800dabe:	2901      	cmp	r1, #1
 800dac0:	f300 80cb 	bgt.w	800dc5a <_dtoa_r+0x7ba>
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	f000 80c4 	beq.w	800dc52 <_dtoa_r+0x7b2>
 800daca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dace:	9e04      	ldr	r6, [sp, #16]
 800dad0:	461c      	mov	r4, r3
 800dad2:	9305      	str	r3, [sp, #20]
 800dad4:	9b04      	ldr	r3, [sp, #16]
 800dad6:	4413      	add	r3, r2
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	9b06      	ldr	r3, [sp, #24]
 800dadc:	2101      	movs	r1, #1
 800dade:	4413      	add	r3, r2
 800dae0:	4648      	mov	r0, r9
 800dae2:	9306      	str	r3, [sp, #24]
 800dae4:	f000 fc2e 	bl	800e344 <__i2b>
 800dae8:	9b05      	ldr	r3, [sp, #20]
 800daea:	4605      	mov	r5, r0
 800daec:	b166      	cbz	r6, 800db08 <_dtoa_r+0x668>
 800daee:	9a06      	ldr	r2, [sp, #24]
 800daf0:	2a00      	cmp	r2, #0
 800daf2:	dd09      	ble.n	800db08 <_dtoa_r+0x668>
 800daf4:	42b2      	cmp	r2, r6
 800daf6:	9904      	ldr	r1, [sp, #16]
 800daf8:	bfa8      	it	ge
 800dafa:	4632      	movge	r2, r6
 800dafc:	1a89      	subs	r1, r1, r2
 800dafe:	9104      	str	r1, [sp, #16]
 800db00:	9906      	ldr	r1, [sp, #24]
 800db02:	1ab6      	subs	r6, r6, r2
 800db04:	1a8a      	subs	r2, r1, r2
 800db06:	9206      	str	r2, [sp, #24]
 800db08:	b30b      	cbz	r3, 800db4e <_dtoa_r+0x6ae>
 800db0a:	9a08      	ldr	r2, [sp, #32]
 800db0c:	2a00      	cmp	r2, #0
 800db0e:	f000 80c5 	beq.w	800dc9c <_dtoa_r+0x7fc>
 800db12:	2c00      	cmp	r4, #0
 800db14:	f000 80bf 	beq.w	800dc96 <_dtoa_r+0x7f6>
 800db18:	4629      	mov	r1, r5
 800db1a:	4622      	mov	r2, r4
 800db1c:	4648      	mov	r0, r9
 800db1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db20:	f000 fcc8 	bl	800e4b4 <__pow5mult>
 800db24:	9a01      	ldr	r2, [sp, #4]
 800db26:	4601      	mov	r1, r0
 800db28:	4605      	mov	r5, r0
 800db2a:	4648      	mov	r0, r9
 800db2c:	f000 fc20 	bl	800e370 <__multiply>
 800db30:	9901      	ldr	r1, [sp, #4]
 800db32:	9005      	str	r0, [sp, #20]
 800db34:	4648      	mov	r0, r9
 800db36:	f000 fb51 	bl	800e1dc <_Bfree>
 800db3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db3c:	1b1b      	subs	r3, r3, r4
 800db3e:	f000 80b0 	beq.w	800dca2 <_dtoa_r+0x802>
 800db42:	9905      	ldr	r1, [sp, #20]
 800db44:	461a      	mov	r2, r3
 800db46:	4648      	mov	r0, r9
 800db48:	f000 fcb4 	bl	800e4b4 <__pow5mult>
 800db4c:	9001      	str	r0, [sp, #4]
 800db4e:	2101      	movs	r1, #1
 800db50:	4648      	mov	r0, r9
 800db52:	f000 fbf7 	bl	800e344 <__i2b>
 800db56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db58:	4604      	mov	r4, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 81da 	beq.w	800df14 <_dtoa_r+0xa74>
 800db60:	461a      	mov	r2, r3
 800db62:	4601      	mov	r1, r0
 800db64:	4648      	mov	r0, r9
 800db66:	f000 fca5 	bl	800e4b4 <__pow5mult>
 800db6a:	9b07      	ldr	r3, [sp, #28]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	4604      	mov	r4, r0
 800db70:	f300 80a0 	bgt.w	800dcb4 <_dtoa_r+0x814>
 800db74:	9b02      	ldr	r3, [sp, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f040 8096 	bne.w	800dca8 <_dtoa_r+0x808>
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db82:	2a00      	cmp	r2, #0
 800db84:	f040 8092 	bne.w	800dcac <_dtoa_r+0x80c>
 800db88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800db8c:	0d12      	lsrs	r2, r2, #20
 800db8e:	0512      	lsls	r2, r2, #20
 800db90:	2a00      	cmp	r2, #0
 800db92:	f000 808d 	beq.w	800dcb0 <_dtoa_r+0x810>
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	9b06      	ldr	r3, [sp, #24]
 800db9e:	3301      	adds	r3, #1
 800dba0:	9306      	str	r3, [sp, #24]
 800dba2:	2301      	movs	r3, #1
 800dba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 81b9 	beq.w	800df20 <_dtoa_r+0xa80>
 800dbae:	6922      	ldr	r2, [r4, #16]
 800dbb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dbb4:	6910      	ldr	r0, [r2, #16]
 800dbb6:	f000 fb79 	bl	800e2ac <__hi0bits>
 800dbba:	f1c0 0020 	rsb	r0, r0, #32
 800dbbe:	9b06      	ldr	r3, [sp, #24]
 800dbc0:	4418      	add	r0, r3
 800dbc2:	f010 001f 	ands.w	r0, r0, #31
 800dbc6:	f000 8081 	beq.w	800dccc <_dtoa_r+0x82c>
 800dbca:	f1c0 0220 	rsb	r2, r0, #32
 800dbce:	2a04      	cmp	r2, #4
 800dbd0:	dd73      	ble.n	800dcba <_dtoa_r+0x81a>
 800dbd2:	9b04      	ldr	r3, [sp, #16]
 800dbd4:	f1c0 001c 	rsb	r0, r0, #28
 800dbd8:	4403      	add	r3, r0
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	9b06      	ldr	r3, [sp, #24]
 800dbde:	4406      	add	r6, r0
 800dbe0:	4403      	add	r3, r0
 800dbe2:	9306      	str	r3, [sp, #24]
 800dbe4:	9b04      	ldr	r3, [sp, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dd05      	ble.n	800dbf6 <_dtoa_r+0x756>
 800dbea:	9901      	ldr	r1, [sp, #4]
 800dbec:	461a      	mov	r2, r3
 800dbee:	4648      	mov	r0, r9
 800dbf0:	f000 fcba 	bl	800e568 <__lshift>
 800dbf4:	9001      	str	r0, [sp, #4]
 800dbf6:	9b06      	ldr	r3, [sp, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	dd05      	ble.n	800dc08 <_dtoa_r+0x768>
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4648      	mov	r0, r9
 800dc02:	f000 fcb1 	bl	800e568 <__lshift>
 800dc06:	4604      	mov	r4, r0
 800dc08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d060      	beq.n	800dcd0 <_dtoa_r+0x830>
 800dc0e:	9801      	ldr	r0, [sp, #4]
 800dc10:	4621      	mov	r1, r4
 800dc12:	f000 fd15 	bl	800e640 <__mcmp>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	da5a      	bge.n	800dcd0 <_dtoa_r+0x830>
 800dc1a:	f108 33ff 	add.w	r3, r8, #4294967295
 800dc1e:	9305      	str	r3, [sp, #20]
 800dc20:	9901      	ldr	r1, [sp, #4]
 800dc22:	2300      	movs	r3, #0
 800dc24:	220a      	movs	r2, #10
 800dc26:	4648      	mov	r0, r9
 800dc28:	f000 fafa 	bl	800e220 <__multadd>
 800dc2c:	9b08      	ldr	r3, [sp, #32]
 800dc2e:	9001      	str	r0, [sp, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f000 8177 	beq.w	800df24 <_dtoa_r+0xa84>
 800dc36:	4629      	mov	r1, r5
 800dc38:	2300      	movs	r3, #0
 800dc3a:	220a      	movs	r2, #10
 800dc3c:	4648      	mov	r0, r9
 800dc3e:	f000 faef 	bl	800e220 <__multadd>
 800dc42:	f1bb 0f00 	cmp.w	fp, #0
 800dc46:	4605      	mov	r5, r0
 800dc48:	dc6e      	bgt.n	800dd28 <_dtoa_r+0x888>
 800dc4a:	9b07      	ldr	r3, [sp, #28]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	dc48      	bgt.n	800dce2 <_dtoa_r+0x842>
 800dc50:	e06a      	b.n	800dd28 <_dtoa_r+0x888>
 800dc52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc58:	e739      	b.n	800dace <_dtoa_r+0x62e>
 800dc5a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	db07      	blt.n	800dc72 <_dtoa_r+0x7d2>
 800dc62:	f1ba 0f00 	cmp.w	sl, #0
 800dc66:	eba3 0404 	sub.w	r4, r3, r4
 800dc6a:	db0b      	blt.n	800dc84 <_dtoa_r+0x7e4>
 800dc6c:	9e04      	ldr	r6, [sp, #16]
 800dc6e:	4652      	mov	r2, sl
 800dc70:	e72f      	b.n	800dad2 <_dtoa_r+0x632>
 800dc72:	1ae2      	subs	r2, r4, r3
 800dc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc76:	9e04      	ldr	r6, [sp, #16]
 800dc78:	4413      	add	r3, r2
 800dc7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc7c:	4652      	mov	r2, sl
 800dc7e:	4623      	mov	r3, r4
 800dc80:	2400      	movs	r4, #0
 800dc82:	e726      	b.n	800dad2 <_dtoa_r+0x632>
 800dc84:	9a04      	ldr	r2, [sp, #16]
 800dc86:	eba2 060a 	sub.w	r6, r2, sl
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	e721      	b.n	800dad2 <_dtoa_r+0x632>
 800dc8e:	9e04      	ldr	r6, [sp, #16]
 800dc90:	9d08      	ldr	r5, [sp, #32]
 800dc92:	461c      	mov	r4, r3
 800dc94:	e72a      	b.n	800daec <_dtoa_r+0x64c>
 800dc96:	9a01      	ldr	r2, [sp, #4]
 800dc98:	9205      	str	r2, [sp, #20]
 800dc9a:	e752      	b.n	800db42 <_dtoa_r+0x6a2>
 800dc9c:	9901      	ldr	r1, [sp, #4]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	e751      	b.n	800db46 <_dtoa_r+0x6a6>
 800dca2:	9b05      	ldr	r3, [sp, #20]
 800dca4:	9301      	str	r3, [sp, #4]
 800dca6:	e752      	b.n	800db4e <_dtoa_r+0x6ae>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	e77b      	b.n	800dba4 <_dtoa_r+0x704>
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	e779      	b.n	800dba4 <_dtoa_r+0x704>
 800dcb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dcb2:	e778      	b.n	800dba6 <_dtoa_r+0x706>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcb8:	e779      	b.n	800dbae <_dtoa_r+0x70e>
 800dcba:	d093      	beq.n	800dbe4 <_dtoa_r+0x744>
 800dcbc:	9b04      	ldr	r3, [sp, #16]
 800dcbe:	321c      	adds	r2, #28
 800dcc0:	4413      	add	r3, r2
 800dcc2:	9304      	str	r3, [sp, #16]
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	4416      	add	r6, r2
 800dcc8:	4413      	add	r3, r2
 800dcca:	e78a      	b.n	800dbe2 <_dtoa_r+0x742>
 800dccc:	4602      	mov	r2, r0
 800dcce:	e7f5      	b.n	800dcbc <_dtoa_r+0x81c>
 800dcd0:	f1ba 0f00 	cmp.w	sl, #0
 800dcd4:	f8cd 8014 	str.w	r8, [sp, #20]
 800dcd8:	46d3      	mov	fp, sl
 800dcda:	dc21      	bgt.n	800dd20 <_dtoa_r+0x880>
 800dcdc:	9b07      	ldr	r3, [sp, #28]
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	dd1e      	ble.n	800dd20 <_dtoa_r+0x880>
 800dce2:	f1bb 0f00 	cmp.w	fp, #0
 800dce6:	f47f addc 	bne.w	800d8a2 <_dtoa_r+0x402>
 800dcea:	4621      	mov	r1, r4
 800dcec:	465b      	mov	r3, fp
 800dcee:	2205      	movs	r2, #5
 800dcf0:	4648      	mov	r0, r9
 800dcf2:	f000 fa95 	bl	800e220 <__multadd>
 800dcf6:	4601      	mov	r1, r0
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	9801      	ldr	r0, [sp, #4]
 800dcfc:	f000 fca0 	bl	800e640 <__mcmp>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	f77f adce 	ble.w	800d8a2 <_dtoa_r+0x402>
 800dd06:	463e      	mov	r6, r7
 800dd08:	2331      	movs	r3, #49	@ 0x31
 800dd0a:	f806 3b01 	strb.w	r3, [r6], #1
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	3301      	adds	r3, #1
 800dd12:	9305      	str	r3, [sp, #20]
 800dd14:	e5c9      	b.n	800d8aa <_dtoa_r+0x40a>
 800dd16:	f8cd 8014 	str.w	r8, [sp, #20]
 800dd1a:	4654      	mov	r4, sl
 800dd1c:	4625      	mov	r5, r4
 800dd1e:	e7f2      	b.n	800dd06 <_dtoa_r+0x866>
 800dd20:	9b08      	ldr	r3, [sp, #32]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 8102 	beq.w	800df2c <_dtoa_r+0xa8c>
 800dd28:	2e00      	cmp	r6, #0
 800dd2a:	dd05      	ble.n	800dd38 <_dtoa_r+0x898>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4632      	mov	r2, r6
 800dd30:	4648      	mov	r0, r9
 800dd32:	f000 fc19 	bl	800e568 <__lshift>
 800dd36:	4605      	mov	r5, r0
 800dd38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d058      	beq.n	800ddf0 <_dtoa_r+0x950>
 800dd3e:	6869      	ldr	r1, [r5, #4]
 800dd40:	4648      	mov	r0, r9
 800dd42:	f000 fa0b 	bl	800e15c <_Balloc>
 800dd46:	4606      	mov	r6, r0
 800dd48:	b928      	cbnz	r0, 800dd56 <_dtoa_r+0x8b6>
 800dd4a:	4b82      	ldr	r3, [pc, #520]	@ (800df54 <_dtoa_r+0xab4>)
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd52:	f7ff bbbe 	b.w	800d4d2 <_dtoa_r+0x32>
 800dd56:	692a      	ldr	r2, [r5, #16]
 800dd58:	3202      	adds	r2, #2
 800dd5a:	0092      	lsls	r2, r2, #2
 800dd5c:	f105 010c 	add.w	r1, r5, #12
 800dd60:	300c      	adds	r0, #12
 800dd62:	f001 f969 	bl	800f038 <memcpy>
 800dd66:	2201      	movs	r2, #1
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	f000 fbfc 	bl	800e568 <__lshift>
 800dd70:	1c7b      	adds	r3, r7, #1
 800dd72:	9304      	str	r3, [sp, #16]
 800dd74:	eb07 030b 	add.w	r3, r7, fp
 800dd78:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd7a:	9b02      	ldr	r3, [sp, #8]
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	46a8      	mov	r8, r5
 800dd82:	9308      	str	r3, [sp, #32]
 800dd84:	4605      	mov	r5, r0
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	9801      	ldr	r0, [sp, #4]
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd90:	f7ff fafb 	bl	800d38a <quorem>
 800dd94:	4641      	mov	r1, r8
 800dd96:	9002      	str	r0, [sp, #8]
 800dd98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dd9c:	9801      	ldr	r0, [sp, #4]
 800dd9e:	f000 fc4f 	bl	800e640 <__mcmp>
 800dda2:	462a      	mov	r2, r5
 800dda4:	9006      	str	r0, [sp, #24]
 800dda6:	4621      	mov	r1, r4
 800dda8:	4648      	mov	r0, r9
 800ddaa:	f000 fc65 	bl	800e678 <__mdiff>
 800ddae:	68c2      	ldr	r2, [r0, #12]
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	b9fa      	cbnz	r2, 800ddf4 <_dtoa_r+0x954>
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	9801      	ldr	r0, [sp, #4]
 800ddb8:	f000 fc42 	bl	800e640 <__mcmp>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4648      	mov	r0, r9
 800ddc2:	920a      	str	r2, [sp, #40]	@ 0x28
 800ddc4:	f000 fa0a 	bl	800e1dc <_Bfree>
 800ddc8:	9b07      	ldr	r3, [sp, #28]
 800ddca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ddcc:	9e04      	ldr	r6, [sp, #16]
 800ddce:	ea42 0103 	orr.w	r1, r2, r3
 800ddd2:	9b08      	ldr	r3, [sp, #32]
 800ddd4:	4319      	orrs	r1, r3
 800ddd6:	d10f      	bne.n	800ddf8 <_dtoa_r+0x958>
 800ddd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dddc:	d028      	beq.n	800de30 <_dtoa_r+0x990>
 800ddde:	9b06      	ldr	r3, [sp, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dd02      	ble.n	800ddea <_dtoa_r+0x94a>
 800dde4:	9b02      	ldr	r3, [sp, #8]
 800dde6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ddea:	f88b a000 	strb.w	sl, [fp]
 800ddee:	e55e      	b.n	800d8ae <_dtoa_r+0x40e>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	e7bd      	b.n	800dd70 <_dtoa_r+0x8d0>
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	e7e2      	b.n	800ddbe <_dtoa_r+0x91e>
 800ddf8:	9b06      	ldr	r3, [sp, #24]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	db04      	blt.n	800de08 <_dtoa_r+0x968>
 800ddfe:	9907      	ldr	r1, [sp, #28]
 800de00:	430b      	orrs	r3, r1
 800de02:	9908      	ldr	r1, [sp, #32]
 800de04:	430b      	orrs	r3, r1
 800de06:	d120      	bne.n	800de4a <_dtoa_r+0x9aa>
 800de08:	2a00      	cmp	r2, #0
 800de0a:	ddee      	ble.n	800ddea <_dtoa_r+0x94a>
 800de0c:	9901      	ldr	r1, [sp, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	4648      	mov	r0, r9
 800de12:	f000 fba9 	bl	800e568 <__lshift>
 800de16:	4621      	mov	r1, r4
 800de18:	9001      	str	r0, [sp, #4]
 800de1a:	f000 fc11 	bl	800e640 <__mcmp>
 800de1e:	2800      	cmp	r0, #0
 800de20:	dc03      	bgt.n	800de2a <_dtoa_r+0x98a>
 800de22:	d1e2      	bne.n	800ddea <_dtoa_r+0x94a>
 800de24:	f01a 0f01 	tst.w	sl, #1
 800de28:	d0df      	beq.n	800ddea <_dtoa_r+0x94a>
 800de2a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800de2e:	d1d9      	bne.n	800dde4 <_dtoa_r+0x944>
 800de30:	2339      	movs	r3, #57	@ 0x39
 800de32:	f88b 3000 	strb.w	r3, [fp]
 800de36:	4633      	mov	r3, r6
 800de38:	461e      	mov	r6, r3
 800de3a:	3b01      	subs	r3, #1
 800de3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de40:	2a39      	cmp	r2, #57	@ 0x39
 800de42:	d052      	beq.n	800deea <_dtoa_r+0xa4a>
 800de44:	3201      	adds	r2, #1
 800de46:	701a      	strb	r2, [r3, #0]
 800de48:	e531      	b.n	800d8ae <_dtoa_r+0x40e>
 800de4a:	2a00      	cmp	r2, #0
 800de4c:	dd07      	ble.n	800de5e <_dtoa_r+0x9be>
 800de4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800de52:	d0ed      	beq.n	800de30 <_dtoa_r+0x990>
 800de54:	f10a 0301 	add.w	r3, sl, #1
 800de58:	f88b 3000 	strb.w	r3, [fp]
 800de5c:	e527      	b.n	800d8ae <_dtoa_r+0x40e>
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de62:	f803 ac01 	strb.w	sl, [r3, #-1]
 800de66:	4293      	cmp	r3, r2
 800de68:	d029      	beq.n	800debe <_dtoa_r+0xa1e>
 800de6a:	9901      	ldr	r1, [sp, #4]
 800de6c:	2300      	movs	r3, #0
 800de6e:	220a      	movs	r2, #10
 800de70:	4648      	mov	r0, r9
 800de72:	f000 f9d5 	bl	800e220 <__multadd>
 800de76:	45a8      	cmp	r8, r5
 800de78:	9001      	str	r0, [sp, #4]
 800de7a:	f04f 0300 	mov.w	r3, #0
 800de7e:	f04f 020a 	mov.w	r2, #10
 800de82:	4641      	mov	r1, r8
 800de84:	4648      	mov	r0, r9
 800de86:	d107      	bne.n	800de98 <_dtoa_r+0x9f8>
 800de88:	f000 f9ca 	bl	800e220 <__multadd>
 800de8c:	4680      	mov	r8, r0
 800de8e:	4605      	mov	r5, r0
 800de90:	9b04      	ldr	r3, [sp, #16]
 800de92:	3301      	adds	r3, #1
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	e776      	b.n	800dd86 <_dtoa_r+0x8e6>
 800de98:	f000 f9c2 	bl	800e220 <__multadd>
 800de9c:	4629      	mov	r1, r5
 800de9e:	4680      	mov	r8, r0
 800dea0:	2300      	movs	r3, #0
 800dea2:	220a      	movs	r2, #10
 800dea4:	4648      	mov	r0, r9
 800dea6:	f000 f9bb 	bl	800e220 <__multadd>
 800deaa:	4605      	mov	r5, r0
 800deac:	e7f0      	b.n	800de90 <_dtoa_r+0x9f0>
 800deae:	f1bb 0f00 	cmp.w	fp, #0
 800deb2:	bfcc      	ite	gt
 800deb4:	465e      	movgt	r6, fp
 800deb6:	2601      	movle	r6, #1
 800deb8:	443e      	add	r6, r7
 800deba:	f04f 0800 	mov.w	r8, #0
 800debe:	9901      	ldr	r1, [sp, #4]
 800dec0:	2201      	movs	r2, #1
 800dec2:	4648      	mov	r0, r9
 800dec4:	f000 fb50 	bl	800e568 <__lshift>
 800dec8:	4621      	mov	r1, r4
 800deca:	9001      	str	r0, [sp, #4]
 800decc:	f000 fbb8 	bl	800e640 <__mcmp>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	dcb0      	bgt.n	800de36 <_dtoa_r+0x996>
 800ded4:	d102      	bne.n	800dedc <_dtoa_r+0xa3c>
 800ded6:	f01a 0f01 	tst.w	sl, #1
 800deda:	d1ac      	bne.n	800de36 <_dtoa_r+0x996>
 800dedc:	4633      	mov	r3, r6
 800dede:	461e      	mov	r6, r3
 800dee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dee4:	2a30      	cmp	r2, #48	@ 0x30
 800dee6:	d0fa      	beq.n	800dede <_dtoa_r+0xa3e>
 800dee8:	e4e1      	b.n	800d8ae <_dtoa_r+0x40e>
 800deea:	429f      	cmp	r7, r3
 800deec:	d1a4      	bne.n	800de38 <_dtoa_r+0x998>
 800deee:	9b05      	ldr	r3, [sp, #20]
 800def0:	3301      	adds	r3, #1
 800def2:	9305      	str	r3, [sp, #20]
 800def4:	2331      	movs	r3, #49	@ 0x31
 800def6:	703b      	strb	r3, [r7, #0]
 800def8:	e4d9      	b.n	800d8ae <_dtoa_r+0x40e>
 800defa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800defc:	4f16      	ldr	r7, [pc, #88]	@ (800df58 <_dtoa_r+0xab8>)
 800defe:	b11b      	cbz	r3, 800df08 <_dtoa_r+0xa68>
 800df00:	f107 0308 	add.w	r3, r7, #8
 800df04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	4638      	mov	r0, r7
 800df0a:	b011      	add	sp, #68	@ 0x44
 800df0c:	ecbd 8b02 	vpop	{d8}
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	2b01      	cmp	r3, #1
 800df18:	f77f ae2c 	ble.w	800db74 <_dtoa_r+0x6d4>
 800df1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df20:	2001      	movs	r0, #1
 800df22:	e64c      	b.n	800dbbe <_dtoa_r+0x71e>
 800df24:	f1bb 0f00 	cmp.w	fp, #0
 800df28:	f77f aed8 	ble.w	800dcdc <_dtoa_r+0x83c>
 800df2c:	463e      	mov	r6, r7
 800df2e:	9801      	ldr	r0, [sp, #4]
 800df30:	4621      	mov	r1, r4
 800df32:	f7ff fa2a 	bl	800d38a <quorem>
 800df36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800df3a:	f806 ab01 	strb.w	sl, [r6], #1
 800df3e:	1bf2      	subs	r2, r6, r7
 800df40:	4593      	cmp	fp, r2
 800df42:	ddb4      	ble.n	800deae <_dtoa_r+0xa0e>
 800df44:	9901      	ldr	r1, [sp, #4]
 800df46:	2300      	movs	r3, #0
 800df48:	220a      	movs	r2, #10
 800df4a:	4648      	mov	r0, r9
 800df4c:	f000 f968 	bl	800e220 <__multadd>
 800df50:	9001      	str	r0, [sp, #4]
 800df52:	e7ec      	b.n	800df2e <_dtoa_r+0xa8e>
 800df54:	080166b1 	.word	0x080166b1
 800df58:	08016635 	.word	0x08016635

0800df5c <_free_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4605      	mov	r5, r0
 800df60:	2900      	cmp	r1, #0
 800df62:	d041      	beq.n	800dfe8 <_free_r+0x8c>
 800df64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df68:	1f0c      	subs	r4, r1, #4
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfb8      	it	lt
 800df6e:	18e4      	addlt	r4, r4, r3
 800df70:	f000 f8e8 	bl	800e144 <__malloc_lock>
 800df74:	4a1d      	ldr	r2, [pc, #116]	@ (800dfec <_free_r+0x90>)
 800df76:	6813      	ldr	r3, [r2, #0]
 800df78:	b933      	cbnz	r3, 800df88 <_free_r+0x2c>
 800df7a:	6063      	str	r3, [r4, #4]
 800df7c:	6014      	str	r4, [r2, #0]
 800df7e:	4628      	mov	r0, r5
 800df80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df84:	f000 b8e4 	b.w	800e150 <__malloc_unlock>
 800df88:	42a3      	cmp	r3, r4
 800df8a:	d908      	bls.n	800df9e <_free_r+0x42>
 800df8c:	6820      	ldr	r0, [r4, #0]
 800df8e:	1821      	adds	r1, r4, r0
 800df90:	428b      	cmp	r3, r1
 800df92:	bf01      	itttt	eq
 800df94:	6819      	ldreq	r1, [r3, #0]
 800df96:	685b      	ldreq	r3, [r3, #4]
 800df98:	1809      	addeq	r1, r1, r0
 800df9a:	6021      	streq	r1, [r4, #0]
 800df9c:	e7ed      	b.n	800df7a <_free_r+0x1e>
 800df9e:	461a      	mov	r2, r3
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	b10b      	cbz	r3, 800dfa8 <_free_r+0x4c>
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	d9fa      	bls.n	800df9e <_free_r+0x42>
 800dfa8:	6811      	ldr	r1, [r2, #0]
 800dfaa:	1850      	adds	r0, r2, r1
 800dfac:	42a0      	cmp	r0, r4
 800dfae:	d10b      	bne.n	800dfc8 <_free_r+0x6c>
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	4401      	add	r1, r0
 800dfb4:	1850      	adds	r0, r2, r1
 800dfb6:	4283      	cmp	r3, r0
 800dfb8:	6011      	str	r1, [r2, #0]
 800dfba:	d1e0      	bne.n	800df7e <_free_r+0x22>
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	6053      	str	r3, [r2, #4]
 800dfc2:	4408      	add	r0, r1
 800dfc4:	6010      	str	r0, [r2, #0]
 800dfc6:	e7da      	b.n	800df7e <_free_r+0x22>
 800dfc8:	d902      	bls.n	800dfd0 <_free_r+0x74>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	602b      	str	r3, [r5, #0]
 800dfce:	e7d6      	b.n	800df7e <_free_r+0x22>
 800dfd0:	6820      	ldr	r0, [r4, #0]
 800dfd2:	1821      	adds	r1, r4, r0
 800dfd4:	428b      	cmp	r3, r1
 800dfd6:	bf04      	itt	eq
 800dfd8:	6819      	ldreq	r1, [r3, #0]
 800dfda:	685b      	ldreq	r3, [r3, #4]
 800dfdc:	6063      	str	r3, [r4, #4]
 800dfde:	bf04      	itt	eq
 800dfe0:	1809      	addeq	r1, r1, r0
 800dfe2:	6021      	streq	r1, [r4, #0]
 800dfe4:	6054      	str	r4, [r2, #4]
 800dfe6:	e7ca      	b.n	800df7e <_free_r+0x22>
 800dfe8:	bd38      	pop	{r3, r4, r5, pc}
 800dfea:	bf00      	nop
 800dfec:	24000ba0 	.word	0x24000ba0

0800dff0 <malloc>:
 800dff0:	4b02      	ldr	r3, [pc, #8]	@ (800dffc <malloc+0xc>)
 800dff2:	4601      	mov	r1, r0
 800dff4:	6818      	ldr	r0, [r3, #0]
 800dff6:	f000 b825 	b.w	800e044 <_malloc_r>
 800dffa:	bf00      	nop
 800dffc:	240000ac 	.word	0x240000ac

0800e000 <sbrk_aligned>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	4e0f      	ldr	r6, [pc, #60]	@ (800e040 <sbrk_aligned+0x40>)
 800e004:	460c      	mov	r4, r1
 800e006:	6831      	ldr	r1, [r6, #0]
 800e008:	4605      	mov	r5, r0
 800e00a:	b911      	cbnz	r1, 800e012 <sbrk_aligned+0x12>
 800e00c:	f001 f804 	bl	800f018 <_sbrk_r>
 800e010:	6030      	str	r0, [r6, #0]
 800e012:	4621      	mov	r1, r4
 800e014:	4628      	mov	r0, r5
 800e016:	f000 ffff 	bl	800f018 <_sbrk_r>
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	d103      	bne.n	800e026 <sbrk_aligned+0x26>
 800e01e:	f04f 34ff 	mov.w	r4, #4294967295
 800e022:	4620      	mov	r0, r4
 800e024:	bd70      	pop	{r4, r5, r6, pc}
 800e026:	1cc4      	adds	r4, r0, #3
 800e028:	f024 0403 	bic.w	r4, r4, #3
 800e02c:	42a0      	cmp	r0, r4
 800e02e:	d0f8      	beq.n	800e022 <sbrk_aligned+0x22>
 800e030:	1a21      	subs	r1, r4, r0
 800e032:	4628      	mov	r0, r5
 800e034:	f000 fff0 	bl	800f018 <_sbrk_r>
 800e038:	3001      	adds	r0, #1
 800e03a:	d1f2      	bne.n	800e022 <sbrk_aligned+0x22>
 800e03c:	e7ef      	b.n	800e01e <sbrk_aligned+0x1e>
 800e03e:	bf00      	nop
 800e040:	24000b9c 	.word	0x24000b9c

0800e044 <_malloc_r>:
 800e044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e048:	1ccd      	adds	r5, r1, #3
 800e04a:	f025 0503 	bic.w	r5, r5, #3
 800e04e:	3508      	adds	r5, #8
 800e050:	2d0c      	cmp	r5, #12
 800e052:	bf38      	it	cc
 800e054:	250c      	movcc	r5, #12
 800e056:	2d00      	cmp	r5, #0
 800e058:	4606      	mov	r6, r0
 800e05a:	db01      	blt.n	800e060 <_malloc_r+0x1c>
 800e05c:	42a9      	cmp	r1, r5
 800e05e:	d904      	bls.n	800e06a <_malloc_r+0x26>
 800e060:	230c      	movs	r3, #12
 800e062:	6033      	str	r3, [r6, #0]
 800e064:	2000      	movs	r0, #0
 800e066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e140 <_malloc_r+0xfc>
 800e06e:	f000 f869 	bl	800e144 <__malloc_lock>
 800e072:	f8d8 3000 	ldr.w	r3, [r8]
 800e076:	461c      	mov	r4, r3
 800e078:	bb44      	cbnz	r4, 800e0cc <_malloc_r+0x88>
 800e07a:	4629      	mov	r1, r5
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7ff ffbf 	bl	800e000 <sbrk_aligned>
 800e082:	1c43      	adds	r3, r0, #1
 800e084:	4604      	mov	r4, r0
 800e086:	d158      	bne.n	800e13a <_malloc_r+0xf6>
 800e088:	f8d8 4000 	ldr.w	r4, [r8]
 800e08c:	4627      	mov	r7, r4
 800e08e:	2f00      	cmp	r7, #0
 800e090:	d143      	bne.n	800e11a <_malloc_r+0xd6>
 800e092:	2c00      	cmp	r4, #0
 800e094:	d04b      	beq.n	800e12e <_malloc_r+0xea>
 800e096:	6823      	ldr	r3, [r4, #0]
 800e098:	4639      	mov	r1, r7
 800e09a:	4630      	mov	r0, r6
 800e09c:	eb04 0903 	add.w	r9, r4, r3
 800e0a0:	f000 ffba 	bl	800f018 <_sbrk_r>
 800e0a4:	4581      	cmp	r9, r0
 800e0a6:	d142      	bne.n	800e12e <_malloc_r+0xea>
 800e0a8:	6821      	ldr	r1, [r4, #0]
 800e0aa:	1a6d      	subs	r5, r5, r1
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f7ff ffa6 	bl	800e000 <sbrk_aligned>
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d03a      	beq.n	800e12e <_malloc_r+0xea>
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	442b      	add	r3, r5
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	bb62      	cbnz	r2, 800e120 <_malloc_r+0xdc>
 800e0c6:	f8c8 7000 	str.w	r7, [r8]
 800e0ca:	e00f      	b.n	800e0ec <_malloc_r+0xa8>
 800e0cc:	6822      	ldr	r2, [r4, #0]
 800e0ce:	1b52      	subs	r2, r2, r5
 800e0d0:	d420      	bmi.n	800e114 <_malloc_r+0xd0>
 800e0d2:	2a0b      	cmp	r2, #11
 800e0d4:	d917      	bls.n	800e106 <_malloc_r+0xc2>
 800e0d6:	1961      	adds	r1, r4, r5
 800e0d8:	42a3      	cmp	r3, r4
 800e0da:	6025      	str	r5, [r4, #0]
 800e0dc:	bf18      	it	ne
 800e0de:	6059      	strne	r1, [r3, #4]
 800e0e0:	6863      	ldr	r3, [r4, #4]
 800e0e2:	bf08      	it	eq
 800e0e4:	f8c8 1000 	streq.w	r1, [r8]
 800e0e8:	5162      	str	r2, [r4, r5]
 800e0ea:	604b      	str	r3, [r1, #4]
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f000 f82f 	bl	800e150 <__malloc_unlock>
 800e0f2:	f104 000b 	add.w	r0, r4, #11
 800e0f6:	1d23      	adds	r3, r4, #4
 800e0f8:	f020 0007 	bic.w	r0, r0, #7
 800e0fc:	1ac2      	subs	r2, r0, r3
 800e0fe:	bf1c      	itt	ne
 800e100:	1a1b      	subne	r3, r3, r0
 800e102:	50a3      	strne	r3, [r4, r2]
 800e104:	e7af      	b.n	800e066 <_malloc_r+0x22>
 800e106:	6862      	ldr	r2, [r4, #4]
 800e108:	42a3      	cmp	r3, r4
 800e10a:	bf0c      	ite	eq
 800e10c:	f8c8 2000 	streq.w	r2, [r8]
 800e110:	605a      	strne	r2, [r3, #4]
 800e112:	e7eb      	b.n	800e0ec <_malloc_r+0xa8>
 800e114:	4623      	mov	r3, r4
 800e116:	6864      	ldr	r4, [r4, #4]
 800e118:	e7ae      	b.n	800e078 <_malloc_r+0x34>
 800e11a:	463c      	mov	r4, r7
 800e11c:	687f      	ldr	r7, [r7, #4]
 800e11e:	e7b6      	b.n	800e08e <_malloc_r+0x4a>
 800e120:	461a      	mov	r2, r3
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	42a3      	cmp	r3, r4
 800e126:	d1fb      	bne.n	800e120 <_malloc_r+0xdc>
 800e128:	2300      	movs	r3, #0
 800e12a:	6053      	str	r3, [r2, #4]
 800e12c:	e7de      	b.n	800e0ec <_malloc_r+0xa8>
 800e12e:	230c      	movs	r3, #12
 800e130:	6033      	str	r3, [r6, #0]
 800e132:	4630      	mov	r0, r6
 800e134:	f000 f80c 	bl	800e150 <__malloc_unlock>
 800e138:	e794      	b.n	800e064 <_malloc_r+0x20>
 800e13a:	6005      	str	r5, [r0, #0]
 800e13c:	e7d6      	b.n	800e0ec <_malloc_r+0xa8>
 800e13e:	bf00      	nop
 800e140:	24000ba0 	.word	0x24000ba0

0800e144 <__malloc_lock>:
 800e144:	4801      	ldr	r0, [pc, #4]	@ (800e14c <__malloc_lock+0x8>)
 800e146:	f7ff b91e 	b.w	800d386 <__retarget_lock_acquire_recursive>
 800e14a:	bf00      	nop
 800e14c:	24000b98 	.word	0x24000b98

0800e150 <__malloc_unlock>:
 800e150:	4801      	ldr	r0, [pc, #4]	@ (800e158 <__malloc_unlock+0x8>)
 800e152:	f7ff b919 	b.w	800d388 <__retarget_lock_release_recursive>
 800e156:	bf00      	nop
 800e158:	24000b98 	.word	0x24000b98

0800e15c <_Balloc>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	69c6      	ldr	r6, [r0, #28]
 800e160:	4604      	mov	r4, r0
 800e162:	460d      	mov	r5, r1
 800e164:	b976      	cbnz	r6, 800e184 <_Balloc+0x28>
 800e166:	2010      	movs	r0, #16
 800e168:	f7ff ff42 	bl	800dff0 <malloc>
 800e16c:	4602      	mov	r2, r0
 800e16e:	61e0      	str	r0, [r4, #28]
 800e170:	b920      	cbnz	r0, 800e17c <_Balloc+0x20>
 800e172:	4b18      	ldr	r3, [pc, #96]	@ (800e1d4 <_Balloc+0x78>)
 800e174:	4818      	ldr	r0, [pc, #96]	@ (800e1d8 <_Balloc+0x7c>)
 800e176:	216b      	movs	r1, #107	@ 0x6b
 800e178:	f000 ff6c 	bl	800f054 <__assert_func>
 800e17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e180:	6006      	str	r6, [r0, #0]
 800e182:	60c6      	str	r6, [r0, #12]
 800e184:	69e6      	ldr	r6, [r4, #28]
 800e186:	68f3      	ldr	r3, [r6, #12]
 800e188:	b183      	cbz	r3, 800e1ac <_Balloc+0x50>
 800e18a:	69e3      	ldr	r3, [r4, #28]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e192:	b9b8      	cbnz	r0, 800e1c4 <_Balloc+0x68>
 800e194:	2101      	movs	r1, #1
 800e196:	fa01 f605 	lsl.w	r6, r1, r5
 800e19a:	1d72      	adds	r2, r6, #5
 800e19c:	0092      	lsls	r2, r2, #2
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 ff76 	bl	800f090 <_calloc_r>
 800e1a4:	b160      	cbz	r0, 800e1c0 <_Balloc+0x64>
 800e1a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1aa:	e00e      	b.n	800e1ca <_Balloc+0x6e>
 800e1ac:	2221      	movs	r2, #33	@ 0x21
 800e1ae:	2104      	movs	r1, #4
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 ff6d 	bl	800f090 <_calloc_r>
 800e1b6:	69e3      	ldr	r3, [r4, #28]
 800e1b8:	60f0      	str	r0, [r6, #12]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1e4      	bne.n	800e18a <_Balloc+0x2e>
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	bd70      	pop	{r4, r5, r6, pc}
 800e1c4:	6802      	ldr	r2, [r0, #0]
 800e1c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1d0:	e7f7      	b.n	800e1c2 <_Balloc+0x66>
 800e1d2:	bf00      	nop
 800e1d4:	08016642 	.word	0x08016642
 800e1d8:	080166c2 	.word	0x080166c2

0800e1dc <_Bfree>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	69c6      	ldr	r6, [r0, #28]
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	b976      	cbnz	r6, 800e204 <_Bfree+0x28>
 800e1e6:	2010      	movs	r0, #16
 800e1e8:	f7ff ff02 	bl	800dff0 <malloc>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	61e8      	str	r0, [r5, #28]
 800e1f0:	b920      	cbnz	r0, 800e1fc <_Bfree+0x20>
 800e1f2:	4b09      	ldr	r3, [pc, #36]	@ (800e218 <_Bfree+0x3c>)
 800e1f4:	4809      	ldr	r0, [pc, #36]	@ (800e21c <_Bfree+0x40>)
 800e1f6:	218f      	movs	r1, #143	@ 0x8f
 800e1f8:	f000 ff2c 	bl	800f054 <__assert_func>
 800e1fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e200:	6006      	str	r6, [r0, #0]
 800e202:	60c6      	str	r6, [r0, #12]
 800e204:	b13c      	cbz	r4, 800e216 <_Bfree+0x3a>
 800e206:	69eb      	ldr	r3, [r5, #28]
 800e208:	6862      	ldr	r2, [r4, #4]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e210:	6021      	str	r1, [r4, #0]
 800e212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	08016642 	.word	0x08016642
 800e21c:	080166c2 	.word	0x080166c2

0800e220 <__multadd>:
 800e220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e224:	690d      	ldr	r5, [r1, #16]
 800e226:	4607      	mov	r7, r0
 800e228:	460c      	mov	r4, r1
 800e22a:	461e      	mov	r6, r3
 800e22c:	f101 0c14 	add.w	ip, r1, #20
 800e230:	2000      	movs	r0, #0
 800e232:	f8dc 3000 	ldr.w	r3, [ip]
 800e236:	b299      	uxth	r1, r3
 800e238:	fb02 6101 	mla	r1, r2, r1, r6
 800e23c:	0c1e      	lsrs	r6, r3, #16
 800e23e:	0c0b      	lsrs	r3, r1, #16
 800e240:	fb02 3306 	mla	r3, r2, r6, r3
 800e244:	b289      	uxth	r1, r1
 800e246:	3001      	adds	r0, #1
 800e248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e24c:	4285      	cmp	r5, r0
 800e24e:	f84c 1b04 	str.w	r1, [ip], #4
 800e252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e256:	dcec      	bgt.n	800e232 <__multadd+0x12>
 800e258:	b30e      	cbz	r6, 800e29e <__multadd+0x7e>
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	42ab      	cmp	r3, r5
 800e25e:	dc19      	bgt.n	800e294 <__multadd+0x74>
 800e260:	6861      	ldr	r1, [r4, #4]
 800e262:	4638      	mov	r0, r7
 800e264:	3101      	adds	r1, #1
 800e266:	f7ff ff79 	bl	800e15c <_Balloc>
 800e26a:	4680      	mov	r8, r0
 800e26c:	b928      	cbnz	r0, 800e27a <__multadd+0x5a>
 800e26e:	4602      	mov	r2, r0
 800e270:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a4 <__multadd+0x84>)
 800e272:	480d      	ldr	r0, [pc, #52]	@ (800e2a8 <__multadd+0x88>)
 800e274:	21ba      	movs	r1, #186	@ 0xba
 800e276:	f000 feed 	bl	800f054 <__assert_func>
 800e27a:	6922      	ldr	r2, [r4, #16]
 800e27c:	3202      	adds	r2, #2
 800e27e:	f104 010c 	add.w	r1, r4, #12
 800e282:	0092      	lsls	r2, r2, #2
 800e284:	300c      	adds	r0, #12
 800e286:	f000 fed7 	bl	800f038 <memcpy>
 800e28a:	4621      	mov	r1, r4
 800e28c:	4638      	mov	r0, r7
 800e28e:	f7ff ffa5 	bl	800e1dc <_Bfree>
 800e292:	4644      	mov	r4, r8
 800e294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e298:	3501      	adds	r5, #1
 800e29a:	615e      	str	r6, [r3, #20]
 800e29c:	6125      	str	r5, [r4, #16]
 800e29e:	4620      	mov	r0, r4
 800e2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a4:	080166b1 	.word	0x080166b1
 800e2a8:	080166c2 	.word	0x080166c2

0800e2ac <__hi0bits>:
 800e2ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	bf36      	itet	cc
 800e2b4:	0403      	lslcc	r3, r0, #16
 800e2b6:	2000      	movcs	r0, #0
 800e2b8:	2010      	movcc	r0, #16
 800e2ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2be:	bf3c      	itt	cc
 800e2c0:	021b      	lslcc	r3, r3, #8
 800e2c2:	3008      	addcc	r0, #8
 800e2c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2c8:	bf3c      	itt	cc
 800e2ca:	011b      	lslcc	r3, r3, #4
 800e2cc:	3004      	addcc	r0, #4
 800e2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2d2:	bf3c      	itt	cc
 800e2d4:	009b      	lslcc	r3, r3, #2
 800e2d6:	3002      	addcc	r0, #2
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	db05      	blt.n	800e2e8 <__hi0bits+0x3c>
 800e2dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e2e0:	f100 0001 	add.w	r0, r0, #1
 800e2e4:	bf08      	it	eq
 800e2e6:	2020      	moveq	r0, #32
 800e2e8:	4770      	bx	lr

0800e2ea <__lo0bits>:
 800e2ea:	6803      	ldr	r3, [r0, #0]
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	f013 0007 	ands.w	r0, r3, #7
 800e2f2:	d00b      	beq.n	800e30c <__lo0bits+0x22>
 800e2f4:	07d9      	lsls	r1, r3, #31
 800e2f6:	d421      	bmi.n	800e33c <__lo0bits+0x52>
 800e2f8:	0798      	lsls	r0, r3, #30
 800e2fa:	bf49      	itett	mi
 800e2fc:	085b      	lsrmi	r3, r3, #1
 800e2fe:	089b      	lsrpl	r3, r3, #2
 800e300:	2001      	movmi	r0, #1
 800e302:	6013      	strmi	r3, [r2, #0]
 800e304:	bf5c      	itt	pl
 800e306:	6013      	strpl	r3, [r2, #0]
 800e308:	2002      	movpl	r0, #2
 800e30a:	4770      	bx	lr
 800e30c:	b299      	uxth	r1, r3
 800e30e:	b909      	cbnz	r1, 800e314 <__lo0bits+0x2a>
 800e310:	0c1b      	lsrs	r3, r3, #16
 800e312:	2010      	movs	r0, #16
 800e314:	b2d9      	uxtb	r1, r3
 800e316:	b909      	cbnz	r1, 800e31c <__lo0bits+0x32>
 800e318:	3008      	adds	r0, #8
 800e31a:	0a1b      	lsrs	r3, r3, #8
 800e31c:	0719      	lsls	r1, r3, #28
 800e31e:	bf04      	itt	eq
 800e320:	091b      	lsreq	r3, r3, #4
 800e322:	3004      	addeq	r0, #4
 800e324:	0799      	lsls	r1, r3, #30
 800e326:	bf04      	itt	eq
 800e328:	089b      	lsreq	r3, r3, #2
 800e32a:	3002      	addeq	r0, #2
 800e32c:	07d9      	lsls	r1, r3, #31
 800e32e:	d403      	bmi.n	800e338 <__lo0bits+0x4e>
 800e330:	085b      	lsrs	r3, r3, #1
 800e332:	f100 0001 	add.w	r0, r0, #1
 800e336:	d003      	beq.n	800e340 <__lo0bits+0x56>
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	4770      	bx	lr
 800e33c:	2000      	movs	r0, #0
 800e33e:	4770      	bx	lr
 800e340:	2020      	movs	r0, #32
 800e342:	4770      	bx	lr

0800e344 <__i2b>:
 800e344:	b510      	push	{r4, lr}
 800e346:	460c      	mov	r4, r1
 800e348:	2101      	movs	r1, #1
 800e34a:	f7ff ff07 	bl	800e15c <_Balloc>
 800e34e:	4602      	mov	r2, r0
 800e350:	b928      	cbnz	r0, 800e35e <__i2b+0x1a>
 800e352:	4b05      	ldr	r3, [pc, #20]	@ (800e368 <__i2b+0x24>)
 800e354:	4805      	ldr	r0, [pc, #20]	@ (800e36c <__i2b+0x28>)
 800e356:	f240 1145 	movw	r1, #325	@ 0x145
 800e35a:	f000 fe7b 	bl	800f054 <__assert_func>
 800e35e:	2301      	movs	r3, #1
 800e360:	6144      	str	r4, [r0, #20]
 800e362:	6103      	str	r3, [r0, #16]
 800e364:	bd10      	pop	{r4, pc}
 800e366:	bf00      	nop
 800e368:	080166b1 	.word	0x080166b1
 800e36c:	080166c2 	.word	0x080166c2

0800e370 <__multiply>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	4617      	mov	r7, r2
 800e376:	690a      	ldr	r2, [r1, #16]
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	bfa8      	it	ge
 800e37e:	463b      	movge	r3, r7
 800e380:	4689      	mov	r9, r1
 800e382:	bfa4      	itt	ge
 800e384:	460f      	movge	r7, r1
 800e386:	4699      	movge	r9, r3
 800e388:	693d      	ldr	r5, [r7, #16]
 800e38a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	6879      	ldr	r1, [r7, #4]
 800e392:	eb05 060a 	add.w	r6, r5, sl
 800e396:	42b3      	cmp	r3, r6
 800e398:	b085      	sub	sp, #20
 800e39a:	bfb8      	it	lt
 800e39c:	3101      	addlt	r1, #1
 800e39e:	f7ff fedd 	bl	800e15c <_Balloc>
 800e3a2:	b930      	cbnz	r0, 800e3b2 <__multiply+0x42>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4b41      	ldr	r3, [pc, #260]	@ (800e4ac <__multiply+0x13c>)
 800e3a8:	4841      	ldr	r0, [pc, #260]	@ (800e4b0 <__multiply+0x140>)
 800e3aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3ae:	f000 fe51 	bl	800f054 <__assert_func>
 800e3b2:	f100 0414 	add.w	r4, r0, #20
 800e3b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e3ba:	4623      	mov	r3, r4
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4573      	cmp	r3, lr
 800e3c0:	d320      	bcc.n	800e404 <__multiply+0x94>
 800e3c2:	f107 0814 	add.w	r8, r7, #20
 800e3c6:	f109 0114 	add.w	r1, r9, #20
 800e3ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e3ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e3d2:	9302      	str	r3, [sp, #8]
 800e3d4:	1beb      	subs	r3, r5, r7
 800e3d6:	3b15      	subs	r3, #21
 800e3d8:	f023 0303 	bic.w	r3, r3, #3
 800e3dc:	3304      	adds	r3, #4
 800e3de:	3715      	adds	r7, #21
 800e3e0:	42bd      	cmp	r5, r7
 800e3e2:	bf38      	it	cc
 800e3e4:	2304      	movcc	r3, #4
 800e3e6:	9301      	str	r3, [sp, #4]
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	9103      	str	r1, [sp, #12]
 800e3ec:	428b      	cmp	r3, r1
 800e3ee:	d80c      	bhi.n	800e40a <__multiply+0x9a>
 800e3f0:	2e00      	cmp	r6, #0
 800e3f2:	dd03      	ble.n	800e3fc <__multiply+0x8c>
 800e3f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d055      	beq.n	800e4a8 <__multiply+0x138>
 800e3fc:	6106      	str	r6, [r0, #16]
 800e3fe:	b005      	add	sp, #20
 800e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e404:	f843 2b04 	str.w	r2, [r3], #4
 800e408:	e7d9      	b.n	800e3be <__multiply+0x4e>
 800e40a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e40e:	f1ba 0f00 	cmp.w	sl, #0
 800e412:	d01f      	beq.n	800e454 <__multiply+0xe4>
 800e414:	46c4      	mov	ip, r8
 800e416:	46a1      	mov	r9, r4
 800e418:	2700      	movs	r7, #0
 800e41a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e41e:	f8d9 3000 	ldr.w	r3, [r9]
 800e422:	fa1f fb82 	uxth.w	fp, r2
 800e426:	b29b      	uxth	r3, r3
 800e428:	fb0a 330b 	mla	r3, sl, fp, r3
 800e42c:	443b      	add	r3, r7
 800e42e:	f8d9 7000 	ldr.w	r7, [r9]
 800e432:	0c12      	lsrs	r2, r2, #16
 800e434:	0c3f      	lsrs	r7, r7, #16
 800e436:	fb0a 7202 	mla	r2, sl, r2, r7
 800e43a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e43e:	b29b      	uxth	r3, r3
 800e440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e444:	4565      	cmp	r5, ip
 800e446:	f849 3b04 	str.w	r3, [r9], #4
 800e44a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e44e:	d8e4      	bhi.n	800e41a <__multiply+0xaa>
 800e450:	9b01      	ldr	r3, [sp, #4]
 800e452:	50e7      	str	r7, [r4, r3]
 800e454:	9b03      	ldr	r3, [sp, #12]
 800e456:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e45a:	3104      	adds	r1, #4
 800e45c:	f1b9 0f00 	cmp.w	r9, #0
 800e460:	d020      	beq.n	800e4a4 <__multiply+0x134>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	4647      	mov	r7, r8
 800e466:	46a4      	mov	ip, r4
 800e468:	f04f 0a00 	mov.w	sl, #0
 800e46c:	f8b7 b000 	ldrh.w	fp, [r7]
 800e470:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e474:	fb09 220b 	mla	r2, r9, fp, r2
 800e478:	4452      	add	r2, sl
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e480:	f84c 3b04 	str.w	r3, [ip], #4
 800e484:	f857 3b04 	ldr.w	r3, [r7], #4
 800e488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e48c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e490:	fb09 330a 	mla	r3, r9, sl, r3
 800e494:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e498:	42bd      	cmp	r5, r7
 800e49a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e49e:	d8e5      	bhi.n	800e46c <__multiply+0xfc>
 800e4a0:	9a01      	ldr	r2, [sp, #4]
 800e4a2:	50a3      	str	r3, [r4, r2]
 800e4a4:	3404      	adds	r4, #4
 800e4a6:	e79f      	b.n	800e3e8 <__multiply+0x78>
 800e4a8:	3e01      	subs	r6, #1
 800e4aa:	e7a1      	b.n	800e3f0 <__multiply+0x80>
 800e4ac:	080166b1 	.word	0x080166b1
 800e4b0:	080166c2 	.word	0x080166c2

0800e4b4 <__pow5mult>:
 800e4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	f012 0203 	ands.w	r2, r2, #3
 800e4be:	4607      	mov	r7, r0
 800e4c0:	460e      	mov	r6, r1
 800e4c2:	d007      	beq.n	800e4d4 <__pow5mult+0x20>
 800e4c4:	4c25      	ldr	r4, [pc, #148]	@ (800e55c <__pow5mult+0xa8>)
 800e4c6:	3a01      	subs	r2, #1
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4ce:	f7ff fea7 	bl	800e220 <__multadd>
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	10ad      	asrs	r5, r5, #2
 800e4d6:	d03d      	beq.n	800e554 <__pow5mult+0xa0>
 800e4d8:	69fc      	ldr	r4, [r7, #28]
 800e4da:	b97c      	cbnz	r4, 800e4fc <__pow5mult+0x48>
 800e4dc:	2010      	movs	r0, #16
 800e4de:	f7ff fd87 	bl	800dff0 <malloc>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	61f8      	str	r0, [r7, #28]
 800e4e6:	b928      	cbnz	r0, 800e4f4 <__pow5mult+0x40>
 800e4e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e560 <__pow5mult+0xac>)
 800e4ea:	481e      	ldr	r0, [pc, #120]	@ (800e564 <__pow5mult+0xb0>)
 800e4ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e4f0:	f000 fdb0 	bl	800f054 <__assert_func>
 800e4f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4f8:	6004      	str	r4, [r0, #0]
 800e4fa:	60c4      	str	r4, [r0, #12]
 800e4fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e504:	b94c      	cbnz	r4, 800e51a <__pow5mult+0x66>
 800e506:	f240 2171 	movw	r1, #625	@ 0x271
 800e50a:	4638      	mov	r0, r7
 800e50c:	f7ff ff1a 	bl	800e344 <__i2b>
 800e510:	2300      	movs	r3, #0
 800e512:	f8c8 0008 	str.w	r0, [r8, #8]
 800e516:	4604      	mov	r4, r0
 800e518:	6003      	str	r3, [r0, #0]
 800e51a:	f04f 0900 	mov.w	r9, #0
 800e51e:	07eb      	lsls	r3, r5, #31
 800e520:	d50a      	bpl.n	800e538 <__pow5mult+0x84>
 800e522:	4631      	mov	r1, r6
 800e524:	4622      	mov	r2, r4
 800e526:	4638      	mov	r0, r7
 800e528:	f7ff ff22 	bl	800e370 <__multiply>
 800e52c:	4631      	mov	r1, r6
 800e52e:	4680      	mov	r8, r0
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff fe53 	bl	800e1dc <_Bfree>
 800e536:	4646      	mov	r6, r8
 800e538:	106d      	asrs	r5, r5, #1
 800e53a:	d00b      	beq.n	800e554 <__pow5mult+0xa0>
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	b938      	cbnz	r0, 800e550 <__pow5mult+0x9c>
 800e540:	4622      	mov	r2, r4
 800e542:	4621      	mov	r1, r4
 800e544:	4638      	mov	r0, r7
 800e546:	f7ff ff13 	bl	800e370 <__multiply>
 800e54a:	6020      	str	r0, [r4, #0]
 800e54c:	f8c0 9000 	str.w	r9, [r0]
 800e550:	4604      	mov	r4, r0
 800e552:	e7e4      	b.n	800e51e <__pow5mult+0x6a>
 800e554:	4630      	mov	r0, r6
 800e556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e55a:	bf00      	nop
 800e55c:	08016774 	.word	0x08016774
 800e560:	08016642 	.word	0x08016642
 800e564:	080166c2 	.word	0x080166c2

0800e568 <__lshift>:
 800e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	460c      	mov	r4, r1
 800e56e:	6849      	ldr	r1, [r1, #4]
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e576:	68a3      	ldr	r3, [r4, #8]
 800e578:	4607      	mov	r7, r0
 800e57a:	4691      	mov	r9, r2
 800e57c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e580:	f108 0601 	add.w	r6, r8, #1
 800e584:	42b3      	cmp	r3, r6
 800e586:	db0b      	blt.n	800e5a0 <__lshift+0x38>
 800e588:	4638      	mov	r0, r7
 800e58a:	f7ff fde7 	bl	800e15c <_Balloc>
 800e58e:	4605      	mov	r5, r0
 800e590:	b948      	cbnz	r0, 800e5a6 <__lshift+0x3e>
 800e592:	4602      	mov	r2, r0
 800e594:	4b28      	ldr	r3, [pc, #160]	@ (800e638 <__lshift+0xd0>)
 800e596:	4829      	ldr	r0, [pc, #164]	@ (800e63c <__lshift+0xd4>)
 800e598:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e59c:	f000 fd5a 	bl	800f054 <__assert_func>
 800e5a0:	3101      	adds	r1, #1
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	e7ee      	b.n	800e584 <__lshift+0x1c>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f100 0114 	add.w	r1, r0, #20
 800e5ac:	f100 0210 	add.w	r2, r0, #16
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	4553      	cmp	r3, sl
 800e5b4:	db33      	blt.n	800e61e <__lshift+0xb6>
 800e5b6:	6920      	ldr	r0, [r4, #16]
 800e5b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5bc:	f104 0314 	add.w	r3, r4, #20
 800e5c0:	f019 091f 	ands.w	r9, r9, #31
 800e5c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e5cc:	d02b      	beq.n	800e626 <__lshift+0xbe>
 800e5ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e5d2:	468a      	mov	sl, r1
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	fa00 f009 	lsl.w	r0, r0, r9
 800e5dc:	4310      	orrs	r0, r2
 800e5de:	f84a 0b04 	str.w	r0, [sl], #4
 800e5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e6:	459c      	cmp	ip, r3
 800e5e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e5ec:	d8f3      	bhi.n	800e5d6 <__lshift+0x6e>
 800e5ee:	ebac 0304 	sub.w	r3, ip, r4
 800e5f2:	3b15      	subs	r3, #21
 800e5f4:	f023 0303 	bic.w	r3, r3, #3
 800e5f8:	3304      	adds	r3, #4
 800e5fa:	f104 0015 	add.w	r0, r4, #21
 800e5fe:	4560      	cmp	r0, ip
 800e600:	bf88      	it	hi
 800e602:	2304      	movhi	r3, #4
 800e604:	50ca      	str	r2, [r1, r3]
 800e606:	b10a      	cbz	r2, 800e60c <__lshift+0xa4>
 800e608:	f108 0602 	add.w	r6, r8, #2
 800e60c:	3e01      	subs	r6, #1
 800e60e:	4638      	mov	r0, r7
 800e610:	612e      	str	r6, [r5, #16]
 800e612:	4621      	mov	r1, r4
 800e614:	f7ff fde2 	bl	800e1dc <_Bfree>
 800e618:	4628      	mov	r0, r5
 800e61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e61e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e622:	3301      	adds	r3, #1
 800e624:	e7c5      	b.n	800e5b2 <__lshift+0x4a>
 800e626:	3904      	subs	r1, #4
 800e628:	f853 2b04 	ldr.w	r2, [r3], #4
 800e62c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e630:	459c      	cmp	ip, r3
 800e632:	d8f9      	bhi.n	800e628 <__lshift+0xc0>
 800e634:	e7ea      	b.n	800e60c <__lshift+0xa4>
 800e636:	bf00      	nop
 800e638:	080166b1 	.word	0x080166b1
 800e63c:	080166c2 	.word	0x080166c2

0800e640 <__mcmp>:
 800e640:	690a      	ldr	r2, [r1, #16]
 800e642:	4603      	mov	r3, r0
 800e644:	6900      	ldr	r0, [r0, #16]
 800e646:	1a80      	subs	r0, r0, r2
 800e648:	b530      	push	{r4, r5, lr}
 800e64a:	d10e      	bne.n	800e66a <__mcmp+0x2a>
 800e64c:	3314      	adds	r3, #20
 800e64e:	3114      	adds	r1, #20
 800e650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e65c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e660:	4295      	cmp	r5, r2
 800e662:	d003      	beq.n	800e66c <__mcmp+0x2c>
 800e664:	d205      	bcs.n	800e672 <__mcmp+0x32>
 800e666:	f04f 30ff 	mov.w	r0, #4294967295
 800e66a:	bd30      	pop	{r4, r5, pc}
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	d3f3      	bcc.n	800e658 <__mcmp+0x18>
 800e670:	e7fb      	b.n	800e66a <__mcmp+0x2a>
 800e672:	2001      	movs	r0, #1
 800e674:	e7f9      	b.n	800e66a <__mcmp+0x2a>
	...

0800e678 <__mdiff>:
 800e678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67c:	4689      	mov	r9, r1
 800e67e:	4606      	mov	r6, r0
 800e680:	4611      	mov	r1, r2
 800e682:	4648      	mov	r0, r9
 800e684:	4614      	mov	r4, r2
 800e686:	f7ff ffdb 	bl	800e640 <__mcmp>
 800e68a:	1e05      	subs	r5, r0, #0
 800e68c:	d112      	bne.n	800e6b4 <__mdiff+0x3c>
 800e68e:	4629      	mov	r1, r5
 800e690:	4630      	mov	r0, r6
 800e692:	f7ff fd63 	bl	800e15c <_Balloc>
 800e696:	4602      	mov	r2, r0
 800e698:	b928      	cbnz	r0, 800e6a6 <__mdiff+0x2e>
 800e69a:	4b3f      	ldr	r3, [pc, #252]	@ (800e798 <__mdiff+0x120>)
 800e69c:	f240 2137 	movw	r1, #567	@ 0x237
 800e6a0:	483e      	ldr	r0, [pc, #248]	@ (800e79c <__mdiff+0x124>)
 800e6a2:	f000 fcd7 	bl	800f054 <__assert_func>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	b003      	add	sp, #12
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	bfbc      	itt	lt
 800e6b6:	464b      	movlt	r3, r9
 800e6b8:	46a1      	movlt	r9, r4
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6c0:	bfba      	itte	lt
 800e6c2:	461c      	movlt	r4, r3
 800e6c4:	2501      	movlt	r5, #1
 800e6c6:	2500      	movge	r5, #0
 800e6c8:	f7ff fd48 	bl	800e15c <_Balloc>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	b918      	cbnz	r0, 800e6d8 <__mdiff+0x60>
 800e6d0:	4b31      	ldr	r3, [pc, #196]	@ (800e798 <__mdiff+0x120>)
 800e6d2:	f240 2145 	movw	r1, #581	@ 0x245
 800e6d6:	e7e3      	b.n	800e6a0 <__mdiff+0x28>
 800e6d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e6dc:	6926      	ldr	r6, [r4, #16]
 800e6de:	60c5      	str	r5, [r0, #12]
 800e6e0:	f109 0310 	add.w	r3, r9, #16
 800e6e4:	f109 0514 	add.w	r5, r9, #20
 800e6e8:	f104 0e14 	add.w	lr, r4, #20
 800e6ec:	f100 0b14 	add.w	fp, r0, #20
 800e6f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e6f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	46d9      	mov	r9, fp
 800e6fc:	f04f 0c00 	mov.w	ip, #0
 800e700:	9b01      	ldr	r3, [sp, #4]
 800e702:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e706:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	fa1f f38a 	uxth.w	r3, sl
 800e710:	4619      	mov	r1, r3
 800e712:	b283      	uxth	r3, r0
 800e714:	1acb      	subs	r3, r1, r3
 800e716:	0c00      	lsrs	r0, r0, #16
 800e718:	4463      	add	r3, ip
 800e71a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e71e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e722:	b29b      	uxth	r3, r3
 800e724:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e728:	4576      	cmp	r6, lr
 800e72a:	f849 3b04 	str.w	r3, [r9], #4
 800e72e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e732:	d8e5      	bhi.n	800e700 <__mdiff+0x88>
 800e734:	1b33      	subs	r3, r6, r4
 800e736:	3b15      	subs	r3, #21
 800e738:	f023 0303 	bic.w	r3, r3, #3
 800e73c:	3415      	adds	r4, #21
 800e73e:	3304      	adds	r3, #4
 800e740:	42a6      	cmp	r6, r4
 800e742:	bf38      	it	cc
 800e744:	2304      	movcc	r3, #4
 800e746:	441d      	add	r5, r3
 800e748:	445b      	add	r3, fp
 800e74a:	461e      	mov	r6, r3
 800e74c:	462c      	mov	r4, r5
 800e74e:	4544      	cmp	r4, r8
 800e750:	d30e      	bcc.n	800e770 <__mdiff+0xf8>
 800e752:	f108 0103 	add.w	r1, r8, #3
 800e756:	1b49      	subs	r1, r1, r5
 800e758:	f021 0103 	bic.w	r1, r1, #3
 800e75c:	3d03      	subs	r5, #3
 800e75e:	45a8      	cmp	r8, r5
 800e760:	bf38      	it	cc
 800e762:	2100      	movcc	r1, #0
 800e764:	440b      	add	r3, r1
 800e766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e76a:	b191      	cbz	r1, 800e792 <__mdiff+0x11a>
 800e76c:	6117      	str	r7, [r2, #16]
 800e76e:	e79d      	b.n	800e6ac <__mdiff+0x34>
 800e770:	f854 1b04 	ldr.w	r1, [r4], #4
 800e774:	46e6      	mov	lr, ip
 800e776:	0c08      	lsrs	r0, r1, #16
 800e778:	fa1c fc81 	uxtah	ip, ip, r1
 800e77c:	4471      	add	r1, lr
 800e77e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e782:	b289      	uxth	r1, r1
 800e784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e788:	f846 1b04 	str.w	r1, [r6], #4
 800e78c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e790:	e7dd      	b.n	800e74e <__mdiff+0xd6>
 800e792:	3f01      	subs	r7, #1
 800e794:	e7e7      	b.n	800e766 <__mdiff+0xee>
 800e796:	bf00      	nop
 800e798:	080166b1 	.word	0x080166b1
 800e79c:	080166c2 	.word	0x080166c2

0800e7a0 <__d2b>:
 800e7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	ec59 8b10 	vmov	r8, r9, d0
 800e7ac:	4616      	mov	r6, r2
 800e7ae:	f7ff fcd5 	bl	800e15c <_Balloc>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	b930      	cbnz	r0, 800e7c4 <__d2b+0x24>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	4b23      	ldr	r3, [pc, #140]	@ (800e848 <__d2b+0xa8>)
 800e7ba:	4824      	ldr	r0, [pc, #144]	@ (800e84c <__d2b+0xac>)
 800e7bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e7c0:	f000 fc48 	bl	800f054 <__assert_func>
 800e7c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7cc:	b10d      	cbz	r5, 800e7d2 <__d2b+0x32>
 800e7ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	f1b8 0300 	subs.w	r3, r8, #0
 800e7d8:	d023      	beq.n	800e822 <__d2b+0x82>
 800e7da:	4668      	mov	r0, sp
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	f7ff fd84 	bl	800e2ea <__lo0bits>
 800e7e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7e6:	b1d0      	cbz	r0, 800e81e <__d2b+0x7e>
 800e7e8:	f1c0 0320 	rsb	r3, r0, #32
 800e7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e7f0:	430b      	orrs	r3, r1
 800e7f2:	40c2      	lsrs	r2, r0
 800e7f4:	6163      	str	r3, [r4, #20]
 800e7f6:	9201      	str	r2, [sp, #4]
 800e7f8:	9b01      	ldr	r3, [sp, #4]
 800e7fa:	61a3      	str	r3, [r4, #24]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bf0c      	ite	eq
 800e800:	2201      	moveq	r2, #1
 800e802:	2202      	movne	r2, #2
 800e804:	6122      	str	r2, [r4, #16]
 800e806:	b1a5      	cbz	r5, 800e832 <__d2b+0x92>
 800e808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e80c:	4405      	add	r5, r0
 800e80e:	603d      	str	r5, [r7, #0]
 800e810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e814:	6030      	str	r0, [r6, #0]
 800e816:	4620      	mov	r0, r4
 800e818:	b003      	add	sp, #12
 800e81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e81e:	6161      	str	r1, [r4, #20]
 800e820:	e7ea      	b.n	800e7f8 <__d2b+0x58>
 800e822:	a801      	add	r0, sp, #4
 800e824:	f7ff fd61 	bl	800e2ea <__lo0bits>
 800e828:	9b01      	ldr	r3, [sp, #4]
 800e82a:	6163      	str	r3, [r4, #20]
 800e82c:	3020      	adds	r0, #32
 800e82e:	2201      	movs	r2, #1
 800e830:	e7e8      	b.n	800e804 <__d2b+0x64>
 800e832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e83a:	6038      	str	r0, [r7, #0]
 800e83c:	6918      	ldr	r0, [r3, #16]
 800e83e:	f7ff fd35 	bl	800e2ac <__hi0bits>
 800e842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e846:	e7e5      	b.n	800e814 <__d2b+0x74>
 800e848:	080166b1 	.word	0x080166b1
 800e84c:	080166c2 	.word	0x080166c2

0800e850 <__ssputs_r>:
 800e850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e854:	688e      	ldr	r6, [r1, #8]
 800e856:	461f      	mov	r7, r3
 800e858:	42be      	cmp	r6, r7
 800e85a:	680b      	ldr	r3, [r1, #0]
 800e85c:	4682      	mov	sl, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	4690      	mov	r8, r2
 800e862:	d82d      	bhi.n	800e8c0 <__ssputs_r+0x70>
 800e864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e868:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e86c:	d026      	beq.n	800e8bc <__ssputs_r+0x6c>
 800e86e:	6965      	ldr	r5, [r4, #20]
 800e870:	6909      	ldr	r1, [r1, #16]
 800e872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e876:	eba3 0901 	sub.w	r9, r3, r1
 800e87a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e87e:	1c7b      	adds	r3, r7, #1
 800e880:	444b      	add	r3, r9
 800e882:	106d      	asrs	r5, r5, #1
 800e884:	429d      	cmp	r5, r3
 800e886:	bf38      	it	cc
 800e888:	461d      	movcc	r5, r3
 800e88a:	0553      	lsls	r3, r2, #21
 800e88c:	d527      	bpl.n	800e8de <__ssputs_r+0x8e>
 800e88e:	4629      	mov	r1, r5
 800e890:	f7ff fbd8 	bl	800e044 <_malloc_r>
 800e894:	4606      	mov	r6, r0
 800e896:	b360      	cbz	r0, 800e8f2 <__ssputs_r+0xa2>
 800e898:	6921      	ldr	r1, [r4, #16]
 800e89a:	464a      	mov	r2, r9
 800e89c:	f000 fbcc 	bl	800f038 <memcpy>
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8aa:	81a3      	strh	r3, [r4, #12]
 800e8ac:	6126      	str	r6, [r4, #16]
 800e8ae:	6165      	str	r5, [r4, #20]
 800e8b0:	444e      	add	r6, r9
 800e8b2:	eba5 0509 	sub.w	r5, r5, r9
 800e8b6:	6026      	str	r6, [r4, #0]
 800e8b8:	60a5      	str	r5, [r4, #8]
 800e8ba:	463e      	mov	r6, r7
 800e8bc:	42be      	cmp	r6, r7
 800e8be:	d900      	bls.n	800e8c2 <__ssputs_r+0x72>
 800e8c0:	463e      	mov	r6, r7
 800e8c2:	6820      	ldr	r0, [r4, #0]
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	4641      	mov	r1, r8
 800e8c8:	f000 fb6a 	bl	800efa0 <memmove>
 800e8cc:	68a3      	ldr	r3, [r4, #8]
 800e8ce:	1b9b      	subs	r3, r3, r6
 800e8d0:	60a3      	str	r3, [r4, #8]
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	4433      	add	r3, r6
 800e8d6:	6023      	str	r3, [r4, #0]
 800e8d8:	2000      	movs	r0, #0
 800e8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8de:	462a      	mov	r2, r5
 800e8e0:	f000 fbfc 	bl	800f0dc <_realloc_r>
 800e8e4:	4606      	mov	r6, r0
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d1e0      	bne.n	800e8ac <__ssputs_r+0x5c>
 800e8ea:	6921      	ldr	r1, [r4, #16]
 800e8ec:	4650      	mov	r0, sl
 800e8ee:	f7ff fb35 	bl	800df5c <_free_r>
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	f8ca 3000 	str.w	r3, [sl]
 800e8f8:	89a3      	ldrh	r3, [r4, #12]
 800e8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8fe:	81a3      	strh	r3, [r4, #12]
 800e900:	f04f 30ff 	mov.w	r0, #4294967295
 800e904:	e7e9      	b.n	800e8da <__ssputs_r+0x8a>
	...

0800e908 <_svfiprintf_r>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	4698      	mov	r8, r3
 800e90e:	898b      	ldrh	r3, [r1, #12]
 800e910:	061b      	lsls	r3, r3, #24
 800e912:	b09d      	sub	sp, #116	@ 0x74
 800e914:	4607      	mov	r7, r0
 800e916:	460d      	mov	r5, r1
 800e918:	4614      	mov	r4, r2
 800e91a:	d510      	bpl.n	800e93e <_svfiprintf_r+0x36>
 800e91c:	690b      	ldr	r3, [r1, #16]
 800e91e:	b973      	cbnz	r3, 800e93e <_svfiprintf_r+0x36>
 800e920:	2140      	movs	r1, #64	@ 0x40
 800e922:	f7ff fb8f 	bl	800e044 <_malloc_r>
 800e926:	6028      	str	r0, [r5, #0]
 800e928:	6128      	str	r0, [r5, #16]
 800e92a:	b930      	cbnz	r0, 800e93a <_svfiprintf_r+0x32>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	f04f 30ff 	mov.w	r0, #4294967295
 800e934:	b01d      	add	sp, #116	@ 0x74
 800e936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93a:	2340      	movs	r3, #64	@ 0x40
 800e93c:	616b      	str	r3, [r5, #20]
 800e93e:	2300      	movs	r3, #0
 800e940:	9309      	str	r3, [sp, #36]	@ 0x24
 800e942:	2320      	movs	r3, #32
 800e944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e948:	f8cd 800c 	str.w	r8, [sp, #12]
 800e94c:	2330      	movs	r3, #48	@ 0x30
 800e94e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eaec <_svfiprintf_r+0x1e4>
 800e952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e956:	f04f 0901 	mov.w	r9, #1
 800e95a:	4623      	mov	r3, r4
 800e95c:	469a      	mov	sl, r3
 800e95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e962:	b10a      	cbz	r2, 800e968 <_svfiprintf_r+0x60>
 800e964:	2a25      	cmp	r2, #37	@ 0x25
 800e966:	d1f9      	bne.n	800e95c <_svfiprintf_r+0x54>
 800e968:	ebba 0b04 	subs.w	fp, sl, r4
 800e96c:	d00b      	beq.n	800e986 <_svfiprintf_r+0x7e>
 800e96e:	465b      	mov	r3, fp
 800e970:	4622      	mov	r2, r4
 800e972:	4629      	mov	r1, r5
 800e974:	4638      	mov	r0, r7
 800e976:	f7ff ff6b 	bl	800e850 <__ssputs_r>
 800e97a:	3001      	adds	r0, #1
 800e97c:	f000 80a7 	beq.w	800eace <_svfiprintf_r+0x1c6>
 800e980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e982:	445a      	add	r2, fp
 800e984:	9209      	str	r2, [sp, #36]	@ 0x24
 800e986:	f89a 3000 	ldrb.w	r3, [sl]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 809f 	beq.w	800eace <_svfiprintf_r+0x1c6>
 800e990:	2300      	movs	r3, #0
 800e992:	f04f 32ff 	mov.w	r2, #4294967295
 800e996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e99a:	f10a 0a01 	add.w	sl, sl, #1
 800e99e:	9304      	str	r3, [sp, #16]
 800e9a0:	9307      	str	r3, [sp, #28]
 800e9a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9a8:	4654      	mov	r4, sl
 800e9aa:	2205      	movs	r2, #5
 800e9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b0:	484e      	ldr	r0, [pc, #312]	@ (800eaec <_svfiprintf_r+0x1e4>)
 800e9b2:	f7f1 fc95 	bl	80002e0 <memchr>
 800e9b6:	9a04      	ldr	r2, [sp, #16]
 800e9b8:	b9d8      	cbnz	r0, 800e9f2 <_svfiprintf_r+0xea>
 800e9ba:	06d0      	lsls	r0, r2, #27
 800e9bc:	bf44      	itt	mi
 800e9be:	2320      	movmi	r3, #32
 800e9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9c4:	0711      	lsls	r1, r2, #28
 800e9c6:	bf44      	itt	mi
 800e9c8:	232b      	movmi	r3, #43	@ 0x2b
 800e9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9d4:	d015      	beq.n	800ea02 <_svfiprintf_r+0xfa>
 800e9d6:	9a07      	ldr	r2, [sp, #28]
 800e9d8:	4654      	mov	r4, sl
 800e9da:	2000      	movs	r0, #0
 800e9dc:	f04f 0c0a 	mov.w	ip, #10
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e6:	3b30      	subs	r3, #48	@ 0x30
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	d94b      	bls.n	800ea84 <_svfiprintf_r+0x17c>
 800e9ec:	b1b0      	cbz	r0, 800ea1c <_svfiprintf_r+0x114>
 800e9ee:	9207      	str	r2, [sp, #28]
 800e9f0:	e014      	b.n	800ea1c <_svfiprintf_r+0x114>
 800e9f2:	eba0 0308 	sub.w	r3, r0, r8
 800e9f6:	fa09 f303 	lsl.w	r3, r9, r3
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	9304      	str	r3, [sp, #16]
 800e9fe:	46a2      	mov	sl, r4
 800ea00:	e7d2      	b.n	800e9a8 <_svfiprintf_r+0xa0>
 800ea02:	9b03      	ldr	r3, [sp, #12]
 800ea04:	1d19      	adds	r1, r3, #4
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	9103      	str	r1, [sp, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bfbb      	ittet	lt
 800ea0e:	425b      	neglt	r3, r3
 800ea10:	f042 0202 	orrlt.w	r2, r2, #2
 800ea14:	9307      	strge	r3, [sp, #28]
 800ea16:	9307      	strlt	r3, [sp, #28]
 800ea18:	bfb8      	it	lt
 800ea1a:	9204      	strlt	r2, [sp, #16]
 800ea1c:	7823      	ldrb	r3, [r4, #0]
 800ea1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea20:	d10a      	bne.n	800ea38 <_svfiprintf_r+0x130>
 800ea22:	7863      	ldrb	r3, [r4, #1]
 800ea24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea26:	d132      	bne.n	800ea8e <_svfiprintf_r+0x186>
 800ea28:	9b03      	ldr	r3, [sp, #12]
 800ea2a:	1d1a      	adds	r2, r3, #4
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	9203      	str	r2, [sp, #12]
 800ea30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea34:	3402      	adds	r4, #2
 800ea36:	9305      	str	r3, [sp, #20]
 800ea38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eafc <_svfiprintf_r+0x1f4>
 800ea3c:	7821      	ldrb	r1, [r4, #0]
 800ea3e:	2203      	movs	r2, #3
 800ea40:	4650      	mov	r0, sl
 800ea42:	f7f1 fc4d 	bl	80002e0 <memchr>
 800ea46:	b138      	cbz	r0, 800ea58 <_svfiprintf_r+0x150>
 800ea48:	9b04      	ldr	r3, [sp, #16]
 800ea4a:	eba0 000a 	sub.w	r0, r0, sl
 800ea4e:	2240      	movs	r2, #64	@ 0x40
 800ea50:	4082      	lsls	r2, r0
 800ea52:	4313      	orrs	r3, r2
 800ea54:	3401      	adds	r4, #1
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea5c:	4824      	ldr	r0, [pc, #144]	@ (800eaf0 <_svfiprintf_r+0x1e8>)
 800ea5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea62:	2206      	movs	r2, #6
 800ea64:	f7f1 fc3c 	bl	80002e0 <memchr>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d036      	beq.n	800eada <_svfiprintf_r+0x1d2>
 800ea6c:	4b21      	ldr	r3, [pc, #132]	@ (800eaf4 <_svfiprintf_r+0x1ec>)
 800ea6e:	bb1b      	cbnz	r3, 800eab8 <_svfiprintf_r+0x1b0>
 800ea70:	9b03      	ldr	r3, [sp, #12]
 800ea72:	3307      	adds	r3, #7
 800ea74:	f023 0307 	bic.w	r3, r3, #7
 800ea78:	3308      	adds	r3, #8
 800ea7a:	9303      	str	r3, [sp, #12]
 800ea7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea7e:	4433      	add	r3, r6
 800ea80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea82:	e76a      	b.n	800e95a <_svfiprintf_r+0x52>
 800ea84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea88:	460c      	mov	r4, r1
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	e7a8      	b.n	800e9e0 <_svfiprintf_r+0xd8>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	3401      	adds	r4, #1
 800ea92:	9305      	str	r3, [sp, #20]
 800ea94:	4619      	mov	r1, r3
 800ea96:	f04f 0c0a 	mov.w	ip, #10
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaa0:	3a30      	subs	r2, #48	@ 0x30
 800eaa2:	2a09      	cmp	r2, #9
 800eaa4:	d903      	bls.n	800eaae <_svfiprintf_r+0x1a6>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d0c6      	beq.n	800ea38 <_svfiprintf_r+0x130>
 800eaaa:	9105      	str	r1, [sp, #20]
 800eaac:	e7c4      	b.n	800ea38 <_svfiprintf_r+0x130>
 800eaae:	fb0c 2101 	mla	r1, ip, r1, r2
 800eab2:	4604      	mov	r4, r0
 800eab4:	2301      	movs	r3, #1
 800eab6:	e7f0      	b.n	800ea9a <_svfiprintf_r+0x192>
 800eab8:	ab03      	add	r3, sp, #12
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	462a      	mov	r2, r5
 800eabe:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf8 <_svfiprintf_r+0x1f0>)
 800eac0:	a904      	add	r1, sp, #16
 800eac2:	4638      	mov	r0, r7
 800eac4:	f7fd fe10 	bl	800c6e8 <_printf_float>
 800eac8:	1c42      	adds	r2, r0, #1
 800eaca:	4606      	mov	r6, r0
 800eacc:	d1d6      	bne.n	800ea7c <_svfiprintf_r+0x174>
 800eace:	89ab      	ldrh	r3, [r5, #12]
 800ead0:	065b      	lsls	r3, r3, #25
 800ead2:	f53f af2d 	bmi.w	800e930 <_svfiprintf_r+0x28>
 800ead6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ead8:	e72c      	b.n	800e934 <_svfiprintf_r+0x2c>
 800eada:	ab03      	add	r3, sp, #12
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	462a      	mov	r2, r5
 800eae0:	4b05      	ldr	r3, [pc, #20]	@ (800eaf8 <_svfiprintf_r+0x1f0>)
 800eae2:	a904      	add	r1, sp, #16
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7fe f887 	bl	800cbf8 <_printf_i>
 800eaea:	e7ed      	b.n	800eac8 <_svfiprintf_r+0x1c0>
 800eaec:	0801671b 	.word	0x0801671b
 800eaf0:	08016725 	.word	0x08016725
 800eaf4:	0800c6e9 	.word	0x0800c6e9
 800eaf8:	0800e851 	.word	0x0800e851
 800eafc:	08016721 	.word	0x08016721

0800eb00 <__sfputc_r>:
 800eb00:	6893      	ldr	r3, [r2, #8]
 800eb02:	3b01      	subs	r3, #1
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	b410      	push	{r4}
 800eb08:	6093      	str	r3, [r2, #8]
 800eb0a:	da08      	bge.n	800eb1e <__sfputc_r+0x1e>
 800eb0c:	6994      	ldr	r4, [r2, #24]
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	db01      	blt.n	800eb16 <__sfputc_r+0x16>
 800eb12:	290a      	cmp	r1, #10
 800eb14:	d103      	bne.n	800eb1e <__sfputc_r+0x1e>
 800eb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb1a:	f7fe bb22 	b.w	800d162 <__swbuf_r>
 800eb1e:	6813      	ldr	r3, [r2, #0]
 800eb20:	1c58      	adds	r0, r3, #1
 800eb22:	6010      	str	r0, [r2, #0]
 800eb24:	7019      	strb	r1, [r3, #0]
 800eb26:	4608      	mov	r0, r1
 800eb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <__sfputs_r>:
 800eb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb30:	4606      	mov	r6, r0
 800eb32:	460f      	mov	r7, r1
 800eb34:	4614      	mov	r4, r2
 800eb36:	18d5      	adds	r5, r2, r3
 800eb38:	42ac      	cmp	r4, r5
 800eb3a:	d101      	bne.n	800eb40 <__sfputs_r+0x12>
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e007      	b.n	800eb50 <__sfputs_r+0x22>
 800eb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb44:	463a      	mov	r2, r7
 800eb46:	4630      	mov	r0, r6
 800eb48:	f7ff ffda 	bl	800eb00 <__sfputc_r>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d1f3      	bne.n	800eb38 <__sfputs_r+0xa>
 800eb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb54 <_vfiprintf_r>:
 800eb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb58:	460d      	mov	r5, r1
 800eb5a:	b09d      	sub	sp, #116	@ 0x74
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	4698      	mov	r8, r3
 800eb60:	4606      	mov	r6, r0
 800eb62:	b118      	cbz	r0, 800eb6c <_vfiprintf_r+0x18>
 800eb64:	6a03      	ldr	r3, [r0, #32]
 800eb66:	b90b      	cbnz	r3, 800eb6c <_vfiprintf_r+0x18>
 800eb68:	f7fe f9f0 	bl	800cf4c <__sinit>
 800eb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb6e:	07d9      	lsls	r1, r3, #31
 800eb70:	d405      	bmi.n	800eb7e <_vfiprintf_r+0x2a>
 800eb72:	89ab      	ldrh	r3, [r5, #12]
 800eb74:	059a      	lsls	r2, r3, #22
 800eb76:	d402      	bmi.n	800eb7e <_vfiprintf_r+0x2a>
 800eb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb7a:	f7fe fc04 	bl	800d386 <__retarget_lock_acquire_recursive>
 800eb7e:	89ab      	ldrh	r3, [r5, #12]
 800eb80:	071b      	lsls	r3, r3, #28
 800eb82:	d501      	bpl.n	800eb88 <_vfiprintf_r+0x34>
 800eb84:	692b      	ldr	r3, [r5, #16]
 800eb86:	b99b      	cbnz	r3, 800ebb0 <_vfiprintf_r+0x5c>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f7fe fb28 	bl	800d1e0 <__swsetup_r>
 800eb90:	b170      	cbz	r0, 800ebb0 <_vfiprintf_r+0x5c>
 800eb92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb94:	07dc      	lsls	r4, r3, #31
 800eb96:	d504      	bpl.n	800eba2 <_vfiprintf_r+0x4e>
 800eb98:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9c:	b01d      	add	sp, #116	@ 0x74
 800eb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba2:	89ab      	ldrh	r3, [r5, #12]
 800eba4:	0598      	lsls	r0, r3, #22
 800eba6:	d4f7      	bmi.n	800eb98 <_vfiprintf_r+0x44>
 800eba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebaa:	f7fe fbed 	bl	800d388 <__retarget_lock_release_recursive>
 800ebae:	e7f3      	b.n	800eb98 <_vfiprintf_r+0x44>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebb4:	2320      	movs	r3, #32
 800ebb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebba:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebbe:	2330      	movs	r3, #48	@ 0x30
 800ebc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ed70 <_vfiprintf_r+0x21c>
 800ebc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebc8:	f04f 0901 	mov.w	r9, #1
 800ebcc:	4623      	mov	r3, r4
 800ebce:	469a      	mov	sl, r3
 800ebd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebd4:	b10a      	cbz	r2, 800ebda <_vfiprintf_r+0x86>
 800ebd6:	2a25      	cmp	r2, #37	@ 0x25
 800ebd8:	d1f9      	bne.n	800ebce <_vfiprintf_r+0x7a>
 800ebda:	ebba 0b04 	subs.w	fp, sl, r4
 800ebde:	d00b      	beq.n	800ebf8 <_vfiprintf_r+0xa4>
 800ebe0:	465b      	mov	r3, fp
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7ff ffa1 	bl	800eb2e <__sfputs_r>
 800ebec:	3001      	adds	r0, #1
 800ebee:	f000 80a7 	beq.w	800ed40 <_vfiprintf_r+0x1ec>
 800ebf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebf4:	445a      	add	r2, fp
 800ebf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f000 809f 	beq.w	800ed40 <_vfiprintf_r+0x1ec>
 800ec02:	2300      	movs	r3, #0
 800ec04:	f04f 32ff 	mov.w	r2, #4294967295
 800ec08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec0c:	f10a 0a01 	add.w	sl, sl, #1
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	9307      	str	r3, [sp, #28]
 800ec14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec18:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec1a:	4654      	mov	r4, sl
 800ec1c:	2205      	movs	r2, #5
 800ec1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec22:	4853      	ldr	r0, [pc, #332]	@ (800ed70 <_vfiprintf_r+0x21c>)
 800ec24:	f7f1 fb5c 	bl	80002e0 <memchr>
 800ec28:	9a04      	ldr	r2, [sp, #16]
 800ec2a:	b9d8      	cbnz	r0, 800ec64 <_vfiprintf_r+0x110>
 800ec2c:	06d1      	lsls	r1, r2, #27
 800ec2e:	bf44      	itt	mi
 800ec30:	2320      	movmi	r3, #32
 800ec32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec36:	0713      	lsls	r3, r2, #28
 800ec38:	bf44      	itt	mi
 800ec3a:	232b      	movmi	r3, #43	@ 0x2b
 800ec3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec40:	f89a 3000 	ldrb.w	r3, [sl]
 800ec44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec46:	d015      	beq.n	800ec74 <_vfiprintf_r+0x120>
 800ec48:	9a07      	ldr	r2, [sp, #28]
 800ec4a:	4654      	mov	r4, sl
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	f04f 0c0a 	mov.w	ip, #10
 800ec52:	4621      	mov	r1, r4
 800ec54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec58:	3b30      	subs	r3, #48	@ 0x30
 800ec5a:	2b09      	cmp	r3, #9
 800ec5c:	d94b      	bls.n	800ecf6 <_vfiprintf_r+0x1a2>
 800ec5e:	b1b0      	cbz	r0, 800ec8e <_vfiprintf_r+0x13a>
 800ec60:	9207      	str	r2, [sp, #28]
 800ec62:	e014      	b.n	800ec8e <_vfiprintf_r+0x13a>
 800ec64:	eba0 0308 	sub.w	r3, r0, r8
 800ec68:	fa09 f303 	lsl.w	r3, r9, r3
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	9304      	str	r3, [sp, #16]
 800ec70:	46a2      	mov	sl, r4
 800ec72:	e7d2      	b.n	800ec1a <_vfiprintf_r+0xc6>
 800ec74:	9b03      	ldr	r3, [sp, #12]
 800ec76:	1d19      	adds	r1, r3, #4
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	9103      	str	r1, [sp, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	bfbb      	ittet	lt
 800ec80:	425b      	neglt	r3, r3
 800ec82:	f042 0202 	orrlt.w	r2, r2, #2
 800ec86:	9307      	strge	r3, [sp, #28]
 800ec88:	9307      	strlt	r3, [sp, #28]
 800ec8a:	bfb8      	it	lt
 800ec8c:	9204      	strlt	r2, [sp, #16]
 800ec8e:	7823      	ldrb	r3, [r4, #0]
 800ec90:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec92:	d10a      	bne.n	800ecaa <_vfiprintf_r+0x156>
 800ec94:	7863      	ldrb	r3, [r4, #1]
 800ec96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec98:	d132      	bne.n	800ed00 <_vfiprintf_r+0x1ac>
 800ec9a:	9b03      	ldr	r3, [sp, #12]
 800ec9c:	1d1a      	adds	r2, r3, #4
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	9203      	str	r2, [sp, #12]
 800eca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eca6:	3402      	adds	r4, #2
 800eca8:	9305      	str	r3, [sp, #20]
 800ecaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ed80 <_vfiprintf_r+0x22c>
 800ecae:	7821      	ldrb	r1, [r4, #0]
 800ecb0:	2203      	movs	r2, #3
 800ecb2:	4650      	mov	r0, sl
 800ecb4:	f7f1 fb14 	bl	80002e0 <memchr>
 800ecb8:	b138      	cbz	r0, 800ecca <_vfiprintf_r+0x176>
 800ecba:	9b04      	ldr	r3, [sp, #16]
 800ecbc:	eba0 000a 	sub.w	r0, r0, sl
 800ecc0:	2240      	movs	r2, #64	@ 0x40
 800ecc2:	4082      	lsls	r2, r0
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	3401      	adds	r4, #1
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecce:	4829      	ldr	r0, [pc, #164]	@ (800ed74 <_vfiprintf_r+0x220>)
 800ecd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecd4:	2206      	movs	r2, #6
 800ecd6:	f7f1 fb03 	bl	80002e0 <memchr>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d03f      	beq.n	800ed5e <_vfiprintf_r+0x20a>
 800ecde:	4b26      	ldr	r3, [pc, #152]	@ (800ed78 <_vfiprintf_r+0x224>)
 800ece0:	bb1b      	cbnz	r3, 800ed2a <_vfiprintf_r+0x1d6>
 800ece2:	9b03      	ldr	r3, [sp, #12]
 800ece4:	3307      	adds	r3, #7
 800ece6:	f023 0307 	bic.w	r3, r3, #7
 800ecea:	3308      	adds	r3, #8
 800ecec:	9303      	str	r3, [sp, #12]
 800ecee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf0:	443b      	add	r3, r7
 800ecf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecf4:	e76a      	b.n	800ebcc <_vfiprintf_r+0x78>
 800ecf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	e7a8      	b.n	800ec52 <_vfiprintf_r+0xfe>
 800ed00:	2300      	movs	r3, #0
 800ed02:	3401      	adds	r4, #1
 800ed04:	9305      	str	r3, [sp, #20]
 800ed06:	4619      	mov	r1, r3
 800ed08:	f04f 0c0a 	mov.w	ip, #10
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed12:	3a30      	subs	r2, #48	@ 0x30
 800ed14:	2a09      	cmp	r2, #9
 800ed16:	d903      	bls.n	800ed20 <_vfiprintf_r+0x1cc>
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d0c6      	beq.n	800ecaa <_vfiprintf_r+0x156>
 800ed1c:	9105      	str	r1, [sp, #20]
 800ed1e:	e7c4      	b.n	800ecaa <_vfiprintf_r+0x156>
 800ed20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed24:	4604      	mov	r4, r0
 800ed26:	2301      	movs	r3, #1
 800ed28:	e7f0      	b.n	800ed0c <_vfiprintf_r+0x1b8>
 800ed2a:	ab03      	add	r3, sp, #12
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	462a      	mov	r2, r5
 800ed30:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <_vfiprintf_r+0x228>)
 800ed32:	a904      	add	r1, sp, #16
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7fd fcd7 	bl	800c6e8 <_printf_float>
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	1c78      	adds	r0, r7, #1
 800ed3e:	d1d6      	bne.n	800ecee <_vfiprintf_r+0x19a>
 800ed40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed42:	07d9      	lsls	r1, r3, #31
 800ed44:	d405      	bmi.n	800ed52 <_vfiprintf_r+0x1fe>
 800ed46:	89ab      	ldrh	r3, [r5, #12]
 800ed48:	059a      	lsls	r2, r3, #22
 800ed4a:	d402      	bmi.n	800ed52 <_vfiprintf_r+0x1fe>
 800ed4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed4e:	f7fe fb1b 	bl	800d388 <__retarget_lock_release_recursive>
 800ed52:	89ab      	ldrh	r3, [r5, #12]
 800ed54:	065b      	lsls	r3, r3, #25
 800ed56:	f53f af1f 	bmi.w	800eb98 <_vfiprintf_r+0x44>
 800ed5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed5c:	e71e      	b.n	800eb9c <_vfiprintf_r+0x48>
 800ed5e:	ab03      	add	r3, sp, #12
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	462a      	mov	r2, r5
 800ed64:	4b05      	ldr	r3, [pc, #20]	@ (800ed7c <_vfiprintf_r+0x228>)
 800ed66:	a904      	add	r1, sp, #16
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7fd ff45 	bl	800cbf8 <_printf_i>
 800ed6e:	e7e4      	b.n	800ed3a <_vfiprintf_r+0x1e6>
 800ed70:	0801671b 	.word	0x0801671b
 800ed74:	08016725 	.word	0x08016725
 800ed78:	0800c6e9 	.word	0x0800c6e9
 800ed7c:	0800eb2f 	.word	0x0800eb2f
 800ed80:	08016721 	.word	0x08016721

0800ed84 <__sflush_r>:
 800ed84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8c:	0716      	lsls	r6, r2, #28
 800ed8e:	4605      	mov	r5, r0
 800ed90:	460c      	mov	r4, r1
 800ed92:	d454      	bmi.n	800ee3e <__sflush_r+0xba>
 800ed94:	684b      	ldr	r3, [r1, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	dc02      	bgt.n	800eda0 <__sflush_r+0x1c>
 800ed9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	dd48      	ble.n	800ee32 <__sflush_r+0xae>
 800eda0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eda2:	2e00      	cmp	r6, #0
 800eda4:	d045      	beq.n	800ee32 <__sflush_r+0xae>
 800eda6:	2300      	movs	r3, #0
 800eda8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800edac:	682f      	ldr	r7, [r5, #0]
 800edae:	6a21      	ldr	r1, [r4, #32]
 800edb0:	602b      	str	r3, [r5, #0]
 800edb2:	d030      	beq.n	800ee16 <__sflush_r+0x92>
 800edb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	0759      	lsls	r1, r3, #29
 800edba:	d505      	bpl.n	800edc8 <__sflush_r+0x44>
 800edbc:	6863      	ldr	r3, [r4, #4]
 800edbe:	1ad2      	subs	r2, r2, r3
 800edc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800edc2:	b10b      	cbz	r3, 800edc8 <__sflush_r+0x44>
 800edc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edc6:	1ad2      	subs	r2, r2, r3
 800edc8:	2300      	movs	r3, #0
 800edca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edcc:	6a21      	ldr	r1, [r4, #32]
 800edce:	4628      	mov	r0, r5
 800edd0:	47b0      	blx	r6
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	89a3      	ldrh	r3, [r4, #12]
 800edd6:	d106      	bne.n	800ede6 <__sflush_r+0x62>
 800edd8:	6829      	ldr	r1, [r5, #0]
 800edda:	291d      	cmp	r1, #29
 800eddc:	d82b      	bhi.n	800ee36 <__sflush_r+0xb2>
 800edde:	4a2a      	ldr	r2, [pc, #168]	@ (800ee88 <__sflush_r+0x104>)
 800ede0:	40ca      	lsrs	r2, r1
 800ede2:	07d6      	lsls	r6, r2, #31
 800ede4:	d527      	bpl.n	800ee36 <__sflush_r+0xb2>
 800ede6:	2200      	movs	r2, #0
 800ede8:	6062      	str	r2, [r4, #4]
 800edea:	04d9      	lsls	r1, r3, #19
 800edec:	6922      	ldr	r2, [r4, #16]
 800edee:	6022      	str	r2, [r4, #0]
 800edf0:	d504      	bpl.n	800edfc <__sflush_r+0x78>
 800edf2:	1c42      	adds	r2, r0, #1
 800edf4:	d101      	bne.n	800edfa <__sflush_r+0x76>
 800edf6:	682b      	ldr	r3, [r5, #0]
 800edf8:	b903      	cbnz	r3, 800edfc <__sflush_r+0x78>
 800edfa:	6560      	str	r0, [r4, #84]	@ 0x54
 800edfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edfe:	602f      	str	r7, [r5, #0]
 800ee00:	b1b9      	cbz	r1, 800ee32 <__sflush_r+0xae>
 800ee02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee06:	4299      	cmp	r1, r3
 800ee08:	d002      	beq.n	800ee10 <__sflush_r+0x8c>
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	f7ff f8a6 	bl	800df5c <_free_r>
 800ee10:	2300      	movs	r3, #0
 800ee12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee14:	e00d      	b.n	800ee32 <__sflush_r+0xae>
 800ee16:	2301      	movs	r3, #1
 800ee18:	4628      	mov	r0, r5
 800ee1a:	47b0      	blx	r6
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	1c50      	adds	r0, r2, #1
 800ee20:	d1c9      	bne.n	800edb6 <__sflush_r+0x32>
 800ee22:	682b      	ldr	r3, [r5, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d0c6      	beq.n	800edb6 <__sflush_r+0x32>
 800ee28:	2b1d      	cmp	r3, #29
 800ee2a:	d001      	beq.n	800ee30 <__sflush_r+0xac>
 800ee2c:	2b16      	cmp	r3, #22
 800ee2e:	d11e      	bne.n	800ee6e <__sflush_r+0xea>
 800ee30:	602f      	str	r7, [r5, #0]
 800ee32:	2000      	movs	r0, #0
 800ee34:	e022      	b.n	800ee7c <__sflush_r+0xf8>
 800ee36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee3a:	b21b      	sxth	r3, r3
 800ee3c:	e01b      	b.n	800ee76 <__sflush_r+0xf2>
 800ee3e:	690f      	ldr	r7, [r1, #16]
 800ee40:	2f00      	cmp	r7, #0
 800ee42:	d0f6      	beq.n	800ee32 <__sflush_r+0xae>
 800ee44:	0793      	lsls	r3, r2, #30
 800ee46:	680e      	ldr	r6, [r1, #0]
 800ee48:	bf08      	it	eq
 800ee4a:	694b      	ldreq	r3, [r1, #20]
 800ee4c:	600f      	str	r7, [r1, #0]
 800ee4e:	bf18      	it	ne
 800ee50:	2300      	movne	r3, #0
 800ee52:	eba6 0807 	sub.w	r8, r6, r7
 800ee56:	608b      	str	r3, [r1, #8]
 800ee58:	f1b8 0f00 	cmp.w	r8, #0
 800ee5c:	dde9      	ble.n	800ee32 <__sflush_r+0xae>
 800ee5e:	6a21      	ldr	r1, [r4, #32]
 800ee60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee62:	4643      	mov	r3, r8
 800ee64:	463a      	mov	r2, r7
 800ee66:	4628      	mov	r0, r5
 800ee68:	47b0      	blx	r6
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	dc08      	bgt.n	800ee80 <__sflush_r+0xfc>
 800ee6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee76:	81a3      	strh	r3, [r4, #12]
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee80:	4407      	add	r7, r0
 800ee82:	eba8 0800 	sub.w	r8, r8, r0
 800ee86:	e7e7      	b.n	800ee58 <__sflush_r+0xd4>
 800ee88:	20400001 	.word	0x20400001

0800ee8c <_fflush_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	690b      	ldr	r3, [r1, #16]
 800ee90:	4605      	mov	r5, r0
 800ee92:	460c      	mov	r4, r1
 800ee94:	b913      	cbnz	r3, 800ee9c <_fflush_r+0x10>
 800ee96:	2500      	movs	r5, #0
 800ee98:	4628      	mov	r0, r5
 800ee9a:	bd38      	pop	{r3, r4, r5, pc}
 800ee9c:	b118      	cbz	r0, 800eea6 <_fflush_r+0x1a>
 800ee9e:	6a03      	ldr	r3, [r0, #32]
 800eea0:	b90b      	cbnz	r3, 800eea6 <_fflush_r+0x1a>
 800eea2:	f7fe f853 	bl	800cf4c <__sinit>
 800eea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0f3      	beq.n	800ee96 <_fflush_r+0xa>
 800eeae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eeb0:	07d0      	lsls	r0, r2, #31
 800eeb2:	d404      	bmi.n	800eebe <_fflush_r+0x32>
 800eeb4:	0599      	lsls	r1, r3, #22
 800eeb6:	d402      	bmi.n	800eebe <_fflush_r+0x32>
 800eeb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeba:	f7fe fa64 	bl	800d386 <__retarget_lock_acquire_recursive>
 800eebe:	4628      	mov	r0, r5
 800eec0:	4621      	mov	r1, r4
 800eec2:	f7ff ff5f 	bl	800ed84 <__sflush_r>
 800eec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eec8:	07da      	lsls	r2, r3, #31
 800eeca:	4605      	mov	r5, r0
 800eecc:	d4e4      	bmi.n	800ee98 <_fflush_r+0xc>
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	059b      	lsls	r3, r3, #22
 800eed2:	d4e1      	bmi.n	800ee98 <_fflush_r+0xc>
 800eed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eed6:	f7fe fa57 	bl	800d388 <__retarget_lock_release_recursive>
 800eeda:	e7dd      	b.n	800ee98 <_fflush_r+0xc>

0800eedc <__swhatbuf_r>:
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	460c      	mov	r4, r1
 800eee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee4:	2900      	cmp	r1, #0
 800eee6:	b096      	sub	sp, #88	@ 0x58
 800eee8:	4615      	mov	r5, r2
 800eeea:	461e      	mov	r6, r3
 800eeec:	da0d      	bge.n	800ef0a <__swhatbuf_r+0x2e>
 800eeee:	89a3      	ldrh	r3, [r4, #12]
 800eef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eef4:	f04f 0100 	mov.w	r1, #0
 800eef8:	bf14      	ite	ne
 800eefa:	2340      	movne	r3, #64	@ 0x40
 800eefc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef00:	2000      	movs	r0, #0
 800ef02:	6031      	str	r1, [r6, #0]
 800ef04:	602b      	str	r3, [r5, #0]
 800ef06:	b016      	add	sp, #88	@ 0x58
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	466a      	mov	r2, sp
 800ef0c:	f000 f862 	bl	800efd4 <_fstat_r>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	dbec      	blt.n	800eeee <__swhatbuf_r+0x12>
 800ef14:	9901      	ldr	r1, [sp, #4]
 800ef16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef1e:	4259      	negs	r1, r3
 800ef20:	4159      	adcs	r1, r3
 800ef22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef26:	e7eb      	b.n	800ef00 <__swhatbuf_r+0x24>

0800ef28 <__smakebuf_r>:
 800ef28:	898b      	ldrh	r3, [r1, #12]
 800ef2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef2c:	079d      	lsls	r5, r3, #30
 800ef2e:	4606      	mov	r6, r0
 800ef30:	460c      	mov	r4, r1
 800ef32:	d507      	bpl.n	800ef44 <__smakebuf_r+0x1c>
 800ef34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	6123      	str	r3, [r4, #16]
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	6163      	str	r3, [r4, #20]
 800ef40:	b003      	add	sp, #12
 800ef42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef44:	ab01      	add	r3, sp, #4
 800ef46:	466a      	mov	r2, sp
 800ef48:	f7ff ffc8 	bl	800eedc <__swhatbuf_r>
 800ef4c:	9f00      	ldr	r7, [sp, #0]
 800ef4e:	4605      	mov	r5, r0
 800ef50:	4639      	mov	r1, r7
 800ef52:	4630      	mov	r0, r6
 800ef54:	f7ff f876 	bl	800e044 <_malloc_r>
 800ef58:	b948      	cbnz	r0, 800ef6e <__smakebuf_r+0x46>
 800ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5e:	059a      	lsls	r2, r3, #22
 800ef60:	d4ee      	bmi.n	800ef40 <__smakebuf_r+0x18>
 800ef62:	f023 0303 	bic.w	r3, r3, #3
 800ef66:	f043 0302 	orr.w	r3, r3, #2
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	e7e2      	b.n	800ef34 <__smakebuf_r+0xc>
 800ef6e:	89a3      	ldrh	r3, [r4, #12]
 800ef70:	6020      	str	r0, [r4, #0]
 800ef72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef76:	81a3      	strh	r3, [r4, #12]
 800ef78:	9b01      	ldr	r3, [sp, #4]
 800ef7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef7e:	b15b      	cbz	r3, 800ef98 <__smakebuf_r+0x70>
 800ef80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef84:	4630      	mov	r0, r6
 800ef86:	f000 f837 	bl	800eff8 <_isatty_r>
 800ef8a:	b128      	cbz	r0, 800ef98 <__smakebuf_r+0x70>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f023 0303 	bic.w	r3, r3, #3
 800ef92:	f043 0301 	orr.w	r3, r3, #1
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	431d      	orrs	r5, r3
 800ef9c:	81a5      	strh	r5, [r4, #12]
 800ef9e:	e7cf      	b.n	800ef40 <__smakebuf_r+0x18>

0800efa0 <memmove>:
 800efa0:	4288      	cmp	r0, r1
 800efa2:	b510      	push	{r4, lr}
 800efa4:	eb01 0402 	add.w	r4, r1, r2
 800efa8:	d902      	bls.n	800efb0 <memmove+0x10>
 800efaa:	4284      	cmp	r4, r0
 800efac:	4623      	mov	r3, r4
 800efae:	d807      	bhi.n	800efc0 <memmove+0x20>
 800efb0:	1e43      	subs	r3, r0, #1
 800efb2:	42a1      	cmp	r1, r4
 800efb4:	d008      	beq.n	800efc8 <memmove+0x28>
 800efb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efbe:	e7f8      	b.n	800efb2 <memmove+0x12>
 800efc0:	4402      	add	r2, r0
 800efc2:	4601      	mov	r1, r0
 800efc4:	428a      	cmp	r2, r1
 800efc6:	d100      	bne.n	800efca <memmove+0x2a>
 800efc8:	bd10      	pop	{r4, pc}
 800efca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efd2:	e7f7      	b.n	800efc4 <memmove+0x24>

0800efd4 <_fstat_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d07      	ldr	r5, [pc, #28]	@ (800eff4 <_fstat_r+0x20>)
 800efd8:	2300      	movs	r3, #0
 800efda:	4604      	mov	r4, r0
 800efdc:	4608      	mov	r0, r1
 800efde:	4611      	mov	r1, r2
 800efe0:	602b      	str	r3, [r5, #0]
 800efe2:	f7f2 fe18 	bl	8001c16 <_fstat>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d102      	bne.n	800eff0 <_fstat_r+0x1c>
 800efea:	682b      	ldr	r3, [r5, #0]
 800efec:	b103      	cbz	r3, 800eff0 <_fstat_r+0x1c>
 800efee:	6023      	str	r3, [r4, #0]
 800eff0:	bd38      	pop	{r3, r4, r5, pc}
 800eff2:	bf00      	nop
 800eff4:	24000b94 	.word	0x24000b94

0800eff8 <_isatty_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4d06      	ldr	r5, [pc, #24]	@ (800f014 <_isatty_r+0x1c>)
 800effc:	2300      	movs	r3, #0
 800effe:	4604      	mov	r4, r0
 800f000:	4608      	mov	r0, r1
 800f002:	602b      	str	r3, [r5, #0]
 800f004:	f7f2 fe17 	bl	8001c36 <_isatty>
 800f008:	1c43      	adds	r3, r0, #1
 800f00a:	d102      	bne.n	800f012 <_isatty_r+0x1a>
 800f00c:	682b      	ldr	r3, [r5, #0]
 800f00e:	b103      	cbz	r3, 800f012 <_isatty_r+0x1a>
 800f010:	6023      	str	r3, [r4, #0]
 800f012:	bd38      	pop	{r3, r4, r5, pc}
 800f014:	24000b94 	.word	0x24000b94

0800f018 <_sbrk_r>:
 800f018:	b538      	push	{r3, r4, r5, lr}
 800f01a:	4d06      	ldr	r5, [pc, #24]	@ (800f034 <_sbrk_r+0x1c>)
 800f01c:	2300      	movs	r3, #0
 800f01e:	4604      	mov	r4, r0
 800f020:	4608      	mov	r0, r1
 800f022:	602b      	str	r3, [r5, #0]
 800f024:	f7f2 fe20 	bl	8001c68 <_sbrk>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	d102      	bne.n	800f032 <_sbrk_r+0x1a>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b103      	cbz	r3, 800f032 <_sbrk_r+0x1a>
 800f030:	6023      	str	r3, [r4, #0]
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	24000b94 	.word	0x24000b94

0800f038 <memcpy>:
 800f038:	440a      	add	r2, r1
 800f03a:	4291      	cmp	r1, r2
 800f03c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f040:	d100      	bne.n	800f044 <memcpy+0xc>
 800f042:	4770      	bx	lr
 800f044:	b510      	push	{r4, lr}
 800f046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f04a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f04e:	4291      	cmp	r1, r2
 800f050:	d1f9      	bne.n	800f046 <memcpy+0xe>
 800f052:	bd10      	pop	{r4, pc}

0800f054 <__assert_func>:
 800f054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f056:	4614      	mov	r4, r2
 800f058:	461a      	mov	r2, r3
 800f05a:	4b09      	ldr	r3, [pc, #36]	@ (800f080 <__assert_func+0x2c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4605      	mov	r5, r0
 800f060:	68d8      	ldr	r0, [r3, #12]
 800f062:	b14c      	cbz	r4, 800f078 <__assert_func+0x24>
 800f064:	4b07      	ldr	r3, [pc, #28]	@ (800f084 <__assert_func+0x30>)
 800f066:	9100      	str	r1, [sp, #0]
 800f068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f06c:	4906      	ldr	r1, [pc, #24]	@ (800f088 <__assert_func+0x34>)
 800f06e:	462b      	mov	r3, r5
 800f070:	f000 f870 	bl	800f154 <fiprintf>
 800f074:	f000 f880 	bl	800f178 <abort>
 800f078:	4b04      	ldr	r3, [pc, #16]	@ (800f08c <__assert_func+0x38>)
 800f07a:	461c      	mov	r4, r3
 800f07c:	e7f3      	b.n	800f066 <__assert_func+0x12>
 800f07e:	bf00      	nop
 800f080:	240000ac 	.word	0x240000ac
 800f084:	08016736 	.word	0x08016736
 800f088:	08016743 	.word	0x08016743
 800f08c:	08016771 	.word	0x08016771

0800f090 <_calloc_r>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	fba1 5402 	umull	r5, r4, r1, r2
 800f096:	b934      	cbnz	r4, 800f0a6 <_calloc_r+0x16>
 800f098:	4629      	mov	r1, r5
 800f09a:	f7fe ffd3 	bl	800e044 <_malloc_r>
 800f09e:	4606      	mov	r6, r0
 800f0a0:	b928      	cbnz	r0, 800f0ae <_calloc_r+0x1e>
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	bd70      	pop	{r4, r5, r6, pc}
 800f0a6:	220c      	movs	r2, #12
 800f0a8:	6002      	str	r2, [r0, #0]
 800f0aa:	2600      	movs	r6, #0
 800f0ac:	e7f9      	b.n	800f0a2 <_calloc_r+0x12>
 800f0ae:	462a      	mov	r2, r5
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	f7fe f8eb 	bl	800d28c <memset>
 800f0b6:	e7f4      	b.n	800f0a2 <_calloc_r+0x12>

0800f0b8 <__ascii_mbtowc>:
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	b901      	cbnz	r1, 800f0be <__ascii_mbtowc+0x6>
 800f0bc:	a901      	add	r1, sp, #4
 800f0be:	b142      	cbz	r2, 800f0d2 <__ascii_mbtowc+0x1a>
 800f0c0:	b14b      	cbz	r3, 800f0d6 <__ascii_mbtowc+0x1e>
 800f0c2:	7813      	ldrb	r3, [r2, #0]
 800f0c4:	600b      	str	r3, [r1, #0]
 800f0c6:	7812      	ldrb	r2, [r2, #0]
 800f0c8:	1e10      	subs	r0, r2, #0
 800f0ca:	bf18      	it	ne
 800f0cc:	2001      	movne	r0, #1
 800f0ce:	b002      	add	sp, #8
 800f0d0:	4770      	bx	lr
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	e7fb      	b.n	800f0ce <__ascii_mbtowc+0x16>
 800f0d6:	f06f 0001 	mvn.w	r0, #1
 800f0da:	e7f8      	b.n	800f0ce <__ascii_mbtowc+0x16>

0800f0dc <_realloc_r>:
 800f0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	4614      	mov	r4, r2
 800f0e4:	460d      	mov	r5, r1
 800f0e6:	b921      	cbnz	r1, 800f0f2 <_realloc_r+0x16>
 800f0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	f7fe bfa9 	b.w	800e044 <_malloc_r>
 800f0f2:	b92a      	cbnz	r2, 800f100 <_realloc_r+0x24>
 800f0f4:	f7fe ff32 	bl	800df5c <_free_r>
 800f0f8:	4625      	mov	r5, r4
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f100:	f000 f841 	bl	800f186 <_malloc_usable_size_r>
 800f104:	4284      	cmp	r4, r0
 800f106:	4606      	mov	r6, r0
 800f108:	d802      	bhi.n	800f110 <_realloc_r+0x34>
 800f10a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f10e:	d8f4      	bhi.n	800f0fa <_realloc_r+0x1e>
 800f110:	4621      	mov	r1, r4
 800f112:	4638      	mov	r0, r7
 800f114:	f7fe ff96 	bl	800e044 <_malloc_r>
 800f118:	4680      	mov	r8, r0
 800f11a:	b908      	cbnz	r0, 800f120 <_realloc_r+0x44>
 800f11c:	4645      	mov	r5, r8
 800f11e:	e7ec      	b.n	800f0fa <_realloc_r+0x1e>
 800f120:	42b4      	cmp	r4, r6
 800f122:	4622      	mov	r2, r4
 800f124:	4629      	mov	r1, r5
 800f126:	bf28      	it	cs
 800f128:	4632      	movcs	r2, r6
 800f12a:	f7ff ff85 	bl	800f038 <memcpy>
 800f12e:	4629      	mov	r1, r5
 800f130:	4638      	mov	r0, r7
 800f132:	f7fe ff13 	bl	800df5c <_free_r>
 800f136:	e7f1      	b.n	800f11c <_realloc_r+0x40>

0800f138 <__ascii_wctomb>:
 800f138:	4603      	mov	r3, r0
 800f13a:	4608      	mov	r0, r1
 800f13c:	b141      	cbz	r1, 800f150 <__ascii_wctomb+0x18>
 800f13e:	2aff      	cmp	r2, #255	@ 0xff
 800f140:	d904      	bls.n	800f14c <__ascii_wctomb+0x14>
 800f142:	228a      	movs	r2, #138	@ 0x8a
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	f04f 30ff 	mov.w	r0, #4294967295
 800f14a:	4770      	bx	lr
 800f14c:	700a      	strb	r2, [r1, #0]
 800f14e:	2001      	movs	r0, #1
 800f150:	4770      	bx	lr
	...

0800f154 <fiprintf>:
 800f154:	b40e      	push	{r1, r2, r3}
 800f156:	b503      	push	{r0, r1, lr}
 800f158:	4601      	mov	r1, r0
 800f15a:	ab03      	add	r3, sp, #12
 800f15c:	4805      	ldr	r0, [pc, #20]	@ (800f174 <fiprintf+0x20>)
 800f15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f162:	6800      	ldr	r0, [r0, #0]
 800f164:	9301      	str	r3, [sp, #4]
 800f166:	f7ff fcf5 	bl	800eb54 <_vfiprintf_r>
 800f16a:	b002      	add	sp, #8
 800f16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f170:	b003      	add	sp, #12
 800f172:	4770      	bx	lr
 800f174:	240000ac 	.word	0x240000ac

0800f178 <abort>:
 800f178:	b508      	push	{r3, lr}
 800f17a:	2006      	movs	r0, #6
 800f17c:	f000 f834 	bl	800f1e8 <raise>
 800f180:	2001      	movs	r0, #1
 800f182:	f7f2 fcf8 	bl	8001b76 <_exit>

0800f186 <_malloc_usable_size_r>:
 800f186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f18a:	1f18      	subs	r0, r3, #4
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	bfbc      	itt	lt
 800f190:	580b      	ldrlt	r3, [r1, r0]
 800f192:	18c0      	addlt	r0, r0, r3
 800f194:	4770      	bx	lr

0800f196 <_raise_r>:
 800f196:	291f      	cmp	r1, #31
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4605      	mov	r5, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	d904      	bls.n	800f1aa <_raise_r+0x14>
 800f1a0:	2316      	movs	r3, #22
 800f1a2:	6003      	str	r3, [r0, #0]
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a8:	bd38      	pop	{r3, r4, r5, pc}
 800f1aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f1ac:	b112      	cbz	r2, 800f1b4 <_raise_r+0x1e>
 800f1ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1b2:	b94b      	cbnz	r3, 800f1c8 <_raise_r+0x32>
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f000 f831 	bl	800f21c <_getpid_r>
 800f1ba:	4622      	mov	r2, r4
 800f1bc:	4601      	mov	r1, r0
 800f1be:	4628      	mov	r0, r5
 800f1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1c4:	f000 b818 	b.w	800f1f8 <_kill_r>
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d00a      	beq.n	800f1e2 <_raise_r+0x4c>
 800f1cc:	1c59      	adds	r1, r3, #1
 800f1ce:	d103      	bne.n	800f1d8 <_raise_r+0x42>
 800f1d0:	2316      	movs	r3, #22
 800f1d2:	6003      	str	r3, [r0, #0]
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	e7e7      	b.n	800f1a8 <_raise_r+0x12>
 800f1d8:	2100      	movs	r1, #0
 800f1da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	4798      	blx	r3
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	e7e0      	b.n	800f1a8 <_raise_r+0x12>
	...

0800f1e8 <raise>:
 800f1e8:	4b02      	ldr	r3, [pc, #8]	@ (800f1f4 <raise+0xc>)
 800f1ea:	4601      	mov	r1, r0
 800f1ec:	6818      	ldr	r0, [r3, #0]
 800f1ee:	f7ff bfd2 	b.w	800f196 <_raise_r>
 800f1f2:	bf00      	nop
 800f1f4:	240000ac 	.word	0x240000ac

0800f1f8 <_kill_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	@ (800f218 <_kill_r+0x20>)
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4604      	mov	r4, r0
 800f200:	4608      	mov	r0, r1
 800f202:	4611      	mov	r1, r2
 800f204:	602b      	str	r3, [r5, #0]
 800f206:	f7f2 fca6 	bl	8001b56 <_kill>
 800f20a:	1c43      	adds	r3, r0, #1
 800f20c:	d102      	bne.n	800f214 <_kill_r+0x1c>
 800f20e:	682b      	ldr	r3, [r5, #0]
 800f210:	b103      	cbz	r3, 800f214 <_kill_r+0x1c>
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	bd38      	pop	{r3, r4, r5, pc}
 800f216:	bf00      	nop
 800f218:	24000b94 	.word	0x24000b94

0800f21c <_getpid_r>:
 800f21c:	f7f2 bc93 	b.w	8001b46 <_getpid>

0800f220 <_init>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	bf00      	nop
 800f224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f226:	bc08      	pop	{r3}
 800f228:	469e      	mov	lr, r3
 800f22a:	4770      	bx	lr

0800f22c <_fini>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr
