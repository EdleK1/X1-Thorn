
X1_Thorn_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a30  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007334  08017cd0  08017cd0  00018cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f004  0801f004  00020004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f00c  0801f00c  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801f010  0801f010  00020010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000270  24000000  0801f014  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000597c  24000270  0801f284  00021270  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005bec  0801f284  00021bec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00021270  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034406  00000000  00000000  0002129e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068e1  00000000  00000000  000556a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024f0  00000000  00000000  0005bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c6e  00000000  00000000  0005e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003faa0  00000000  00000000  000600e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036164  00000000  00000000  0009fb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018c966  00000000  00000000  000d5cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00262650  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a8e4  00000000  00000000  00262694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0026cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000270 	.word	0x24000270
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017cb8 	.word	0x08017cb8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000274 	.word	0x24000274
 80002dc:	08017cb8 	.word	0x08017cb8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <Odometry_Read>:
}



void Odometry_Read(odometry_t *Curr_Read)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

	// Read from sensor

	ReadData(&BNO055, SENSOR_LINACC|SENSOR_GYRO|SENSOR_QUATERNION);
 80006c4:	210e      	movs	r1, #14
 80006c6:	4813      	ldr	r0, [pc, #76]	@ (8000714 <Odometry_Read+0x58>)
 80006c8:	f000 fa1a 	bl	8000b00 <ReadData>

	Curr_Read->ax = BNO055.LineerAcc.X;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <Odometry_Read+0x58>)
 80006ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
	Curr_Read->p = BNO055.Gyro.X;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <Odometry_Read+0x58>)
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	605a      	str	r2, [r3, #4]
	Curr_Read->q = BNO055.Gyro.Y;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <Odometry_Read+0x58>)
 80006de:	691a      	ldr	r2, [r3, #16]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
	Curr_Read->r = BNO055.Gyro.Z;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <Odometry_Read+0x58>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
	Curr_Read->q0 = BNO055.Quaternion.W;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <Odometry_Read+0x58>)
 80006ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]
	Curr_Read->q1 = BNO055.Quaternion.X;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <Odometry_Read+0x58>)
 80006f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	615a      	str	r2, [r3, #20]
	Curr_Read->q2 = BNO055.Quaternion.Y;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <Odometry_Read+0x58>)
 80006fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	619a      	str	r2, [r3, #24]
	Curr_Read->q3 = BNO055.Quaternion.Z;
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <Odometry_Read+0x58>)
 8000706:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	61da      	str	r2, [r3, #28]

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2400028c 	.word	0x2400028c

08000718 <DShot_Init>:

static SemaphoreHandle_t xDshotRxDoneSemaphoreHandle;
static StaticSemaphore_t xDshotRxDoneSemaphoreControlBlock;

uint8_t DShot_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8
	// Definition for xDshotRxDoneSemaphore
	xDshotRxDoneSemaphoreHandle = xSemaphoreCreateBinaryStatic(&xDshotRxDoneSemaphoreControlBlock);
 800071e:	2303      	movs	r3, #3
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <DShot_Init+0x30>)
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2001      	movs	r0, #1
 800072a:	f011 fec5 	bl	80124b8 <xQueueGenericCreateStatic>
 800072e:	4603      	mov	r3, r0
 8000730:	4a06      	ldr	r2, [pc, #24]	@ (800074c <DShot_Init+0x34>)
 8000732:	6013      	str	r3, [r2, #0]

    if (xDshotRxDoneSemaphoreHandle == NULL)
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <DShot_Init+0x34>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <DShot_Init+0x28>
    {
        return 0; // Semaphore creation failed
 800073c:	2300      	movs	r3, #0
 800073e:	e000      	b.n	8000742 <DShot_Init+0x2a>
    }

	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	24000340 	.word	0x24000340
 800074c:	2400033c 	.word	0x2400033c

08000750 <DShot_SendFrame>:



uint8_t DShot_SendFrame(uint16_t throttle1, uint16_t throttle2, uint32_t *last_rpm1, uint32_t *last_rpm2)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60ba      	str	r2, [r7, #8]
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4603      	mov	r3, r0
 800075c:	81fb      	strh	r3, [r7, #14]
 800075e:	460b      	mov	r3, r1
 8000760:	81bb      	strh	r3, [r7, #12]
	DShot_MakeFrame(throttle1, dshotBuf1);
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	491c      	ldr	r1, [pc, #112]	@ (80007d8 <DShot_SendFrame+0x88>)
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f842 	bl	80007f0 <DShot_MakeFrame>
	DShot_MakeFrame(throttle2, dshotBuf2);
 800076c:	89bb      	ldrh	r3, [r7, #12]
 800076e:	491b      	ldr	r1, [pc, #108]	@ (80007dc <DShot_SendFrame+0x8c>)
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f83d 	bl	80007f0 <DShot_MakeFrame>

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)dshotBuf1, 18);
 8000776:	2312      	movs	r3, #18
 8000778:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <DShot_SendFrame+0x88>)
 800077a:	2100      	movs	r1, #0
 800077c:	4818      	ldr	r0, [pc, #96]	@ (80007e0 <DShot_SendFrame+0x90>)
 800077e:	f00d fb69 	bl	800de54 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)dshotBuf2, 18);
 8000782:	2312      	movs	r3, #18
 8000784:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <DShot_SendFrame+0x8c>)
 8000786:	2104      	movs	r1, #4
 8000788:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <DShot_SendFrame+0x90>)
 800078a:	f00d fb63 	bl	800de54 <HAL_TIM_PWM_Start_DMA>

	if (xSemaphoreTake(xDshotRxDoneSemaphoreHandle, portMAX_DELAY)!=pdTRUE) // This semaphore is given when the erpm has finished being decoded
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <DShot_SendFrame+0x94>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f04f 31ff 	mov.w	r1, #4294967295
 8000796:	4618      	mov	r0, r3
 8000798:	f012 fa40 	bl	8012c1c <xQueueSemaphoreTake>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d001      	beq.n	80007a6 <DShot_SendFrame+0x56>
	{
		return 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e014      	b.n	80007d0 <DShot_SendFrame+0x80>
	}

	if (DShot_DecodeTelemetry(rawtelem1, last_rpm1) == 0 || DShot_DecodeTelemetry(rawtelem2, last_rpm2) == 0)
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <DShot_SendFrame+0x98>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f87d 	bl	80008ac <DShot_DecodeTelemetry>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <DShot_SendFrame+0x7a>
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <DShot_SendFrame+0x9c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f874 	bl	80008ac <DShot_DecodeTelemetry>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <DShot_SendFrame+0x7e>
	{
		return 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <DShot_SendFrame+0x80>
	}

	return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	240002e4 	.word	0x240002e4
 80007dc:	24000308 	.word	0x24000308
 80007e0:	24000e4c 	.word	0x24000e4c
 80007e4:	2400033c 	.word	0x2400033c
 80007e8:	24000330 	.word	0x24000330
 80007ec:	24000338 	.word	0x24000338

080007f0 <DShot_MakeFrame>:




void DShot_MakeFrame(uint16_t throttle, uint16_t *dshotBits)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	80fb      	strh	r3, [r7, #6]
    if (throttle > 2047)
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000802:	d302      	bcc.n	800080a <DShot_MakeFrame+0x1a>
    {
        throttle = 2047;
 8000804:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000808:	80fb      	strh	r3, [r7, #6]
    }
    // 11 bits throttle, LSB is telemetry flag
    uint16_t payload = (throttle << 1);
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	81fb      	strh	r3, [r7, #14]

    // 4-bit CRC = inverted XOR of the 3 payload nibbles
    uint8_t crc = ( payload ^ (payload >>  4) ^ (payload >>  8)) & 0x0F;
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	b29b      	uxth	r3, r3
 8000816:	b2da      	uxtb	r2, r3
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4053      	eors	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	0a1b      	lsrs	r3, r3, #8
 8000824:	b29b      	uxth	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4053      	eors	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	737b      	strb	r3, [r7, #13]
    crc = (~crc) & 0x0F;
 8000832:	7b7b      	ldrb	r3, [r7, #13]
 8000834:	43db      	mvns	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 030f 	and.w	r3, r3, #15
 800083c:	737b      	strb	r3, [r7, #13]

    // Frame = payload << 4 | CRC
    uint16_t frame =  (payload << 4) | crc;
 800083e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	b21a      	sxth	r2, r3
 8000846:	7b7b      	ldrb	r3, [r7, #13]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	82fb      	strh	r3, [r7, #22]


    for(int i = 0; i < 16; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	e018      	b.n	8000888 <DShot_MakeFrame+0x98>
        // MSB first
        if (frame & 0x8000)
 8000856:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da07      	bge.n	800086e <DShot_MakeFrame+0x7e>
        {
            dshotBits[i] = ESC_BIT_1;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800086a:	801a      	strh	r2, [r3, #0]
 800086c:	e006      	b.n	800087c <DShot_MakeFrame+0x8c>
        } else
        {
            dshotBits[i] = ESC_BIT_0;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800087a:	801a      	strh	r2, [r3, #0]
        }
        frame <<= 1;
 800087c:	8afb      	ldrh	r3, [r7, #22]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	82fb      	strh	r3, [r7, #22]
    for(int i = 0; i < 16; i++) {
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	3301      	adds	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	dde3      	ble.n	8000856 <DShot_MakeFrame+0x66>
    }
    // Add 2 zero slots to leave the line low after frame (reset gap)
    dshotBits[16] = 0;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3320      	adds	r3, #32
 8000892:	2200      	movs	r2, #0
 8000894:	801a      	strh	r2, [r3, #0]
    dshotBits[17] = 0;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3322      	adds	r3, #34	@ 0x22
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	371c      	adds	r7, #28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <DShot_DecodeTelemetry>:




uint8_t DShot_DecodeTelemetry(uint32_t rawtelem, uint32_t *mRPM)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	@ 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]

	uint32_t gcr = (rawtelem ^ (rawtelem >> 1));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4053      	eors	r3, r2
 80008be:	61fb      	str	r3, [r7, #28]
	uint16_t raw16 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	84fb      	strh	r3, [r7, #38]	@ 0x26

	for (int i = 0; i < 4; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
 80008c8:	e021      	b.n	800090e <DShot_DecodeTelemetry+0x62>
	{
	    // Extract symbol #i (i = 0 is the first 5 bits)
	    uint8_t symbol = (gcr >> (15 - 5*i)) & 0x1F;
 80008ca:	6a3a      	ldr	r2, [r7, #32]
 80008cc:	4613      	mov	r3, r2
 80008ce:	079b      	lsls	r3, r3, #30
 80008d0:	1a9b      	subs	r3, r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	330f      	adds	r3, #15
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	fa22 f303 	lsr.w	r3, r2, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	72fb      	strb	r3, [r7, #11]
	    uint8_t nibble = gcr_reverse[symbol];
 80008e6:	7afb      	ldrb	r3, [r7, #11]
 80008e8:	4a2e      	ldr	r2, [pc, #184]	@ (80009a4 <DShot_DecodeTelemetry+0xf8>)
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	72bb      	strb	r3, [r7, #10]
	    raw16 |= (nibble << (12 - 4*i));
 80008ee:	7aba      	ldrb	r2, [r7, #10]
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	f1c3 0303 	rsb	r3, r3, #3
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int i = 0; i < 4; i++)
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	3301      	adds	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	2b03      	cmp	r3, #3
 8000912:	ddda      	ble.n	80008ca <DShot_DecodeTelemetry+0x1e>
	}

	uint16_t word12   = raw16 >> 4;      // top 12 bits
 8000914:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	837b      	strh	r3, [r7, #26]
	uint8_t recv_crc  = raw16 & 0x0F;    // low 4 bits
 800091a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	767b      	strb	r3, [r7, #25]

	// Compute CRC of word12
	uint8_t calc_crc = (word12 ^ (word12 >> 4) ^ (word12 >> 8)) & 0x0F;
 8000924:	8b7b      	ldrh	r3, [r7, #26]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	8b7b      	ldrh	r3, [r7, #26]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4053      	eors	r3, r2
 8000932:	b2da      	uxtb	r2, r3
 8000934:	8b7b      	ldrh	r3, [r7, #26]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4053      	eors	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	763b      	strb	r3, [r7, #24]
	calc_crc = (~calc_crc) & 0x0F;
 8000946:	7e3b      	ldrb	r3, [r7, #24]
 8000948:	43db      	mvns	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	763b      	strb	r3, [r7, #24]

	if (calc_crc != recv_crc)
 8000952:	7e3a      	ldrb	r2, [r7, #24]
 8000954:	7e7b      	ldrb	r3, [r7, #25]
 8000956:	429a      	cmp	r2, r3
 8000958:	d001      	beq.n	800095e <DShot_DecodeTelemetry+0xb2>
	{
	    return 0;
 800095a:	2300      	movs	r3, #0
 800095c:	e01b      	b.n	8000996 <DShot_DecodeTelemetry+0xea>
	}

	uint16_t E = (word12 >> 9) & 0x07;
 800095e:	8b7b      	ldrh	r3, [r7, #26]
 8000960:	0a5b      	lsrs	r3, r3, #9
 8000962:	b29b      	uxth	r3, r3
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	82fb      	strh	r3, [r7, #22]
	uint16_t M = (word12 >> 0) & 0x01FF;
 800096a:	8b7b      	ldrh	r3, [r7, #26]
 800096c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000970:	82bb      	strh	r3, [r7, #20]
	uint32_t period_us = ((uint32_t)M) << E;
 8000972:	8aba      	ldrh	r2, [r7, #20]
 8000974:	8afb      	ldrh	r3, [r7, #22]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	613b      	str	r3, [r7, #16]

	// eRPM (electrical RPM) = 60 000 000 µs/s ÷ period_us
	uint32_t eRPM = 60000000UL / period_us;
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <DShot_DecodeTelemetry+0xfc>)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	fbb2 f3f3 	udiv	r3, r2, r3
 8000984:	60fb      	str	r3, [r7, #12]

	// mechanical RPM = electrical RPM ÷ (poles/2)
	*mRPM = eRPM / (POLES/2);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <DShot_DecodeTelemetry+0x100>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	085a      	lsrs	r2, r3, #1
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	601a      	str	r2, [r3, #0]

	return 1;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	372c      	adds	r7, #44	@ 0x2c
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	08017d5c 	.word	0x08017d5c
 80009a8:	03938700 	.word	0x03938700
 80009ac:	aaaaaaab 	.word	0xaaaaaaab

080009b0 <TIM_PeriodElapsedCallback_TIM16>:


void TIM_PeriodElapsedCallback_TIM16(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
	uint32_t idr = GPIOD->IDR;
 80009b6:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <TIM_PeriodElapsedCallback_TIM16+0x11c>)
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	60fb      	str	r3, [r7, #12]
	uint8_t motor1bit  = (idr >> 8) & 1;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	72fb      	strb	r3, [r7, #11]
	uint8_t motor2bit  = (idr >> 9) & 1;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	0a5b      	lsrs	r3, r3, #9
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	72bb      	strb	r3, [r7, #10]

	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 80009d4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad0 <TIM_PeriodElapsedCallback_TIM16+0x120>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10a      	bne.n	80009f2 <TIM_PeriodElapsedCallback_TIM16+0x42>
 80009dc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <TIM_PeriodElapsedCallback_TIM16+0x124>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d106      	bne.n	80009f2 <TIM_PeriodElapsedCallback_TIM16+0x42>
	{
		if (motor1bit == 0)
 80009e4:	7afb      	ldrb	r3, [r7, #11]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d120      	bne.n	8000a2c <TIM_PeriodElapsedCallback_TIM16+0x7c>
		{
			RX_motor1_started = 1;
 80009ea:	4b39      	ldr	r3, [pc, #228]	@ (8000ad0 <TIM_PeriodElapsedCallback_TIM16+0x120>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
		if (motor1bit == 0)
 80009f0:	e01c      	b.n	8000a2c <TIM_PeriodElapsedCallback_TIM16+0x7c>
		}
	}
	else if (RX_motor1_started == 1 && RX_motor1_finished == 0)
 80009f2:	4b37      	ldr	r3, [pc, #220]	@ (8000ad0 <TIM_PeriodElapsedCallback_TIM16+0x120>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d118      	bne.n	8000a2c <TIM_PeriodElapsedCallback_TIM16+0x7c>
 80009fa:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <TIM_PeriodElapsedCallback_TIM16+0x124>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d114      	bne.n	8000a2c <TIM_PeriodElapsedCallback_TIM16+0x7c>
	{
		if (motor1bitcnt < 20)
 8000a02:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <TIM_PeriodElapsedCallback_TIM16+0x128>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b13      	cmp	r3, #19
 8000a08:	d80d      	bhi.n	8000a26 <TIM_PeriodElapsedCallback_TIM16+0x76>
		{
			rawtelem1 = (rawtelem1 << 1) | motor1bit;
 8000a0a:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <TIM_PeriodElapsedCallback_TIM16+0x12c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	005a      	lsls	r2, r3, #1
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4a31      	ldr	r2, [pc, #196]	@ (8000adc <TIM_PeriodElapsedCallback_TIM16+0x12c>)
 8000a16:	6013      	str	r3, [r2, #0]
			motor1bitcnt++;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <TIM_PeriodElapsedCallback_TIM16+0x128>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <TIM_PeriodElapsedCallback_TIM16+0x128>)
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e002      	b.n	8000a2c <TIM_PeriodElapsedCallback_TIM16+0x7c>
		}
		else
		{
			RX_motor1_finished = 1;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <TIM_PeriodElapsedCallback_TIM16+0x124>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
		}
	}


	if (RX_motor2_started == 0 && RX_motor2_finished == 0)
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <TIM_PeriodElapsedCallback_TIM16+0x130>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10a      	bne.n	8000a4a <TIM_PeriodElapsedCallback_TIM16+0x9a>
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <TIM_PeriodElapsedCallback_TIM16+0x134>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d106      	bne.n	8000a4a <TIM_PeriodElapsedCallback_TIM16+0x9a>
	{
		if (motor2bit == 0)
 8000a3c:	7abb      	ldrb	r3, [r7, #10]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d120      	bne.n	8000a84 <TIM_PeriodElapsedCallback_TIM16+0xd4>
		{
			RX_motor2_started = 1;
 8000a42:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <TIM_PeriodElapsedCallback_TIM16+0x130>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
		if (motor2bit == 0)
 8000a48:	e01c      	b.n	8000a84 <TIM_PeriodElapsedCallback_TIM16+0xd4>
		}
	}
	else if (RX_motor2_started == 1 && RX_motor2_finished == 0)
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <TIM_PeriodElapsedCallback_TIM16+0x130>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d118      	bne.n	8000a84 <TIM_PeriodElapsedCallback_TIM16+0xd4>
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <TIM_PeriodElapsedCallback_TIM16+0x134>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d114      	bne.n	8000a84 <TIM_PeriodElapsedCallback_TIM16+0xd4>
	{
		if (motor2bitcnt < 20)
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <TIM_PeriodElapsedCallback_TIM16+0x138>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b13      	cmp	r3, #19
 8000a60:	d80d      	bhi.n	8000a7e <TIM_PeriodElapsedCallback_TIM16+0xce>
		{
			rawtelem2 = (rawtelem2 << 1) | motor2bit;
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <TIM_PeriodElapsedCallback_TIM16+0x13c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	005a      	lsls	r2, r3, #1
 8000a68:	7abb      	ldrb	r3, [r7, #10]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <TIM_PeriodElapsedCallback_TIM16+0x13c>)
 8000a6e:	6013      	str	r3, [r2, #0]
			motor2bitcnt++;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <TIM_PeriodElapsedCallback_TIM16+0x138>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <TIM_PeriodElapsedCallback_TIM16+0x138>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e002      	b.n	8000a84 <TIM_PeriodElapsedCallback_TIM16+0xd4>
		}
		else
		{
			RX_motor2_finished = 1;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <TIM_PeriodElapsedCallback_TIM16+0x134>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
		}
	}


	if (RX_motor1_finished && RX_motor2_finished)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <TIM_PeriodElapsedCallback_TIM16+0x124>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d01a      	beq.n	8000ac2 <TIM_PeriodElapsedCallback_TIM16+0x112>
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <TIM_PeriodElapsedCallback_TIM16+0x134>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d016      	beq.n	8000ac2 <TIM_PeriodElapsedCallback_TIM16+0x112>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 8000a94:	4816      	ldr	r0, [pc, #88]	@ (8000af0 <TIM_PeriodElapsedCallback_TIM16+0x140>)
 8000a96:	f00d f8f5 	bl	800dc84 <HAL_TIM_Base_Stop_IT>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
		xSemaphoreGiveFromISR(xDshotRxDoneSemaphoreHandle, &xHigherPriorityTaskWoken);
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <TIM_PeriodElapsedCallback_TIM16+0x144>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1d3a      	adds	r2, r7, #4
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f011 ff46 	bl	8012938 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <TIM_PeriodElapsedCallback_TIM16+0x112>
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <TIM_PeriodElapsedCallback_TIM16+0x148>)
 8000ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	f3bf 8f4f 	dsb	sy
 8000abe:	f3bf 8f6f 	isb	sy
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58020c00 	.word	0x58020c00
 8000ad0:	2400032c 	.word	0x2400032c
 8000ad4:	2400032d 	.word	0x2400032d
 8000ad8:	2400032e 	.word	0x2400032e
 8000adc:	24000330 	.word	0x24000330
 8000ae0:	24000334 	.word	0x24000334
 8000ae4:	24000335 	.word	0x24000335
 8000ae8:	24000336 	.word	0x24000336
 8000aec:	24000338 	.word	0x24000338
 8000af0:	24000e98 	.word	0x24000e98
 8000af4:	2400033c 	.word	0x2400033c
 8000af8:	e000ed04 	.word	0xe000ed04
 8000afc:	00000000 	.word	0x00000000

08000b00 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]


	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d053      	beq.n	8000bbe <ReadData+0xbe>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	222e      	movs	r2, #46	@ 0x2e
 8000b2a:	2150      	movs	r1, #80	@ 0x50
 8000b2c:	48b8      	ldr	r0, [pc, #736]	@ (8000e10 <ReadData+0x310>)
 8000b2e:	f007 ffed 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8000b32:	7a7b      	ldrb	r3, [r7, #9]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	7a3b      	ldrb	r3, [r7, #8]
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b4a:	ed9f 5bad 	vldr	d5, [pc, #692]	@ 8000e00 <ReadData+0x300>
 8000b4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7abb      	ldrb	r3, [r7, #10]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	ee07 3a90 	vmov	s15, r3
 8000b70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b74:	ed9f 5ba2 	vldr	d5, [pc, #648]	@ 8000e00 <ReadData+0x300>
 8000b78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	7b3b      	ldrb	r3, [r7, #12]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b9e:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8000e00 <ReadData+0x300>
 8000ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ba6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f015 f857 	bl	8015c6c <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d068      	beq.n	8000c9a <ReadData+0x19a>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2308      	movs	r3, #8
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2150      	movs	r1, #80	@ 0x50
 8000bde:	488c      	ldr	r0, [pc, #560]	@ (8000e10 <ReadData+0x310>)
 8000be0:	f007 ff94 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(16384.0));
 8000be4:	7a7b      	ldrb	r3, [r7, #9]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	7a3b      	ldrb	r3, [r7, #8]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bfc:	ed9f 5b82 	vldr	d5, [pc, #520]	@ 8000e08 <ReadData+0x308>
 8000c00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(16384.0));
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	7abb      	ldrb	r3, [r7, #10]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c26:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 8000e08 <ReadData+0x308>
 8000c2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(16384.0));
 8000c38:	7b7b      	ldrb	r3, [r7, #13]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	7b3b      	ldrb	r3, [r7, #12]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c50:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8000e08 <ReadData+0x308>
 8000c54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(16384.0));
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c7a:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8000e08 <ReadData+0x308>
 8000c7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2208      	movs	r2, #8
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f014 ffe9 	bl	8015c6c <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d053      	beq.n	8000d4c <ReadData+0x24c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2306      	movs	r3, #6
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2228      	movs	r2, #40	@ 0x28
 8000cb8:	2150      	movs	r1, #80	@ 0x50
 8000cba:	4855      	ldr	r0, [pc, #340]	@ (8000e10 <ReadData+0x310>)
 8000cbc:	f007 ff26 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8000cc0:	7a7b      	ldrb	r3, [r7, #9]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	7a3b      	ldrb	r3, [r7, #8]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cd8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000e00 <ReadData+0x300>
 8000cdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ce0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	7abb      	ldrb	r3, [r7, #10]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d02:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8000e00 <ReadData+0x300>
 8000d06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d2c:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000e00 <ReadData+0x300>
 8000d30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2208      	movs	r2, #8
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f014 ff90 	bl	8015c6c <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d05e      	beq.n	8000e14 <ReadData+0x314>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2214      	movs	r2, #20
 8000d6a:	2150      	movs	r1, #80	@ 0x50
 8000d6c:	4828      	ldr	r0, [pc, #160]	@ (8000e10 <ReadData+0x310>)
 8000d6e:	f007 fecd 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000d72:	7a7b      	ldrb	r3, [r7, #9]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	7a3b      	ldrb	r3, [r7, #8]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d8a:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	edc3 7a03 	vstr	s15, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	7abb      	ldrb	r3, [r7, #10]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000db4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a04 	vstr	s15, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000dc6:	7b7b      	ldrb	r3, [r7, #13]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dde:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000de6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a05 	vstr	s15, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2208      	movs	r2, #8
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f014 ff37 	bl	8015c6c <memset>
 8000dfe:	e009      	b.n	8000e14 <ReadData+0x314>
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40d00000 	.word	0x40d00000
 8000e10:	24000cd4 	.word	0x24000cd4
	    }
	    if (sensors & SENSOR_ACCEL) {
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d053      	beq.n	8000ec6 <ReadData+0x3c6>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2306      	movs	r3, #6
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2208      	movs	r2, #8
 8000e32:	2150      	movs	r1, #80	@ 0x50
 8000e34:	4882      	ldr	r0, [pc, #520]	@ (8001040 <ReadData+0x540>)
 8000e36:	f007 fe69 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 8000e3a:	7a7b      	ldrb	r3, [r7, #9]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	7a3b      	ldrb	r3, [r7, #8]
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e52:	ed9f 5b79 	vldr	d5, [pc, #484]	@ 8001038 <ReadData+0x538>
 8000e56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	edc3 7a00 	vstr	s15, [r3]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	7abb      	ldrb	r3, [r7, #10]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e7c:	ed9f 5b6e 	vldr	d5, [pc, #440]	@ 8001038 <ReadData+0x538>
 8000e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edc3 7a01 	vstr	s15, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	7b3b      	ldrb	r3, [r7, #12]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ea6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8001038 <ReadData+0x538>
 8000eaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edc3 7a02 	vstr	s15, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f014 fed3 	bl	8015c6c <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d053      	beq.n	8000f78 <ReadData+0x478>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	220e      	movs	r2, #14
 8000ee4:	2150      	movs	r1, #80	@ 0x50
 8000ee6:	4856      	ldr	r0, [pc, #344]	@ (8001040 <ReadData+0x540>)
 8000ee8:	f007 fe10 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000eec:	7a7b      	ldrb	r3, [r7, #9]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	7a3b      	ldrb	r3, [r7, #8]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f04:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000f08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	edc3 7a06 	vstr	s15, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	7abb      	ldrb	r3, [r7, #10]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f2e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000f32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a07 	vstr	s15, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	7b3b      	ldrb	r3, [r7, #12]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f58:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000f5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	edc3 7a08 	vstr	s15, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2208      	movs	r2, #8
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f014 fe7a 	bl	8015c6c <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d053      	beq.n	800102a <ReadData+0x52a>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2306      	movs	r3, #6
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	221a      	movs	r2, #26
 8000f96:	2150      	movs	r1, #80	@ 0x50
 8000f98:	4829      	ldr	r0, [pc, #164]	@ (8001040 <ReadData+0x540>)
 8000f9a:	f007 fdb7 	bl	8008b0c <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8000f9e:	7a7b      	ldrb	r3, [r7, #9]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7a3b      	ldrb	r3, [r7, #8]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fb6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fe0:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8000fe4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fe8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8000ff2:	7b7b      	ldrb	r3, [r7, #13]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	7b3b      	ldrb	r3, [r7, #12]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800100a:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800100e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2208      	movs	r2, #8
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f014 fe21 	bl	8015c6c <memset>
	    }
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	00000000 	.word	0x00000000
 800103c:	40590000 	.word	0x40590000
 8001040:	24000cd4 	.word	0x24000cd4

08001044 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a29      	ldr	r2, [pc, #164]	@ (80010f4 <HAL_UART_RxCpltCallback+0xb0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d14b      	bne.n	80010ec <HAL_UART_RxCpltCallback+0xa8>
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8001054:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <HAL_UART_RxCpltCallback+0xb0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2208      	movs	r2, #8
 800105a:	621a      	str	r2, [r3, #32]

        // 2) State machine
        switch (frame_state)
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d01d      	beq.n	80010a0 <HAL_UART_RxCpltCallback+0x5c>
 8001064:	2b02      	cmp	r3, #2
 8001066:	dc3c      	bgt.n	80010e2 <HAL_UART_RxCpltCallback+0x9e>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_UART_RxCpltCallback+0x2e>
 800106c:	2b01      	cmp	r3, #1
 800106e:	d008      	beq.n	8001082 <HAL_UART_RxCpltCallback+0x3e>
 8001070:	e037      	b.n	80010e2 <HAL_UART_RxCpltCallback+0x9e>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <HAL_UART_RxCpltCallback+0xb8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b55      	cmp	r3, #85	@ 0x55
 8001078:	d130      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x98>
                    frame_state = SYNC_WAIT_2;
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
                break;
 8001080:	e02c      	b.n	80010dc <HAL_UART_RxCpltCallback+0x98>

            case SYNC_WAIT_2:
                if (rx_byte == 0xAA)
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <HAL_UART_RxCpltCallback+0xb8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2baa      	cmp	r3, #170	@ 0xaa
 8001088:	d106      	bne.n	8001098 <HAL_UART_RxCpltCallback+0x54>
                {
                    frame_state = SYNC_COLLECT;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
                    collect_count = 0;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_UART_RxCpltCallback+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
                }
                else
                    frame_state = SYNC_WAIT_1; // false alarm, restart
                break;
 8001096:	e024      	b.n	80010e2 <HAL_UART_RxCpltCallback+0x9e>
                    frame_state = SYNC_WAIT_1; // false alarm, restart
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
                break;
 800109e:	e020      	b.n	80010e2 <HAL_UART_RxCpltCallback+0x9e>

            case SYNC_COLLECT:
                collect_buf[collect_count++] = rx_byte;
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_UART_RxCpltCallback+0xbc>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	b2d1      	uxtb	r1, r2
 80010a8:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <HAL_UART_RxCpltCallback+0xbc>)
 80010aa:	7011      	strb	r1, [r2, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_UART_RxCpltCallback+0xb8>)
 80010b0:	7819      	ldrb	r1, [r3, #0]
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_UART_RxCpltCallback+0xc0>)
 80010b4:	5499      	strb	r1, [r3, r2]
                if (collect_count >= sizeof(collect_buf))
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_UART_RxCpltCallback+0xbc>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b13      	cmp	r3, #19
 80010bc:	d910      	bls.n	80010e0 <HAL_UART_RxCpltCallback+0x9c>
                {
                    // got full payload: copy to floats
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <HAL_UART_RxCpltCallback+0xc4>)
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_UART_RxCpltCallback+0xc0>)
 80010c2:	4614      	mov	r4, r2
 80010c4:	461d      	mov	r5, r3
 80010c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	6023      	str	r3, [r4, #0]
                    uart_data_ready = true;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_UART_RxCpltCallback+0xc8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
                    // restart framing
                    frame_state = SYNC_WAIT_1;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_UART_RxCpltCallback+0xb4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
                }
                break;
 80010da:	e001      	b.n	80010e0 <HAL_UART_RxCpltCallback+0x9c>
                break;
 80010dc:	bf00      	nop
 80010de:	e000      	b.n	80010e2 <HAL_UART_RxCpltCallback+0x9e>
                break;
 80010e0:	bf00      	nop
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	4905      	ldr	r1, [pc, #20]	@ (80010fc <HAL_UART_RxCpltCallback+0xb8>)
 80010e6:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <HAL_UART_RxCpltCallback+0xb0>)
 80010e8:	f00e fc12 	bl	800f910 <HAL_UART_Receive_IT>
    }
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}
 80010f4:	24001020 	.word	0x24001020
 80010f8:	240003aa 	.word	0x240003aa
 80010fc:	240003a8 	.word	0x240003a8
 8001100:	240003a9 	.word	0x240003a9
 8001104:	240003ac 	.word	0x240003ac
 8001108:	24000394 	.word	0x24000394
 800110c:	24000390 	.word	0x24000390

08001110 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_UART_ErrorCallback+0x2c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d108      	bne.n	8001132 <HAL_UART_ErrorCallback+0x22>
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_UART_ErrorCallback+0x2c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2208      	movs	r2, #8
 8001126:	621a      	str	r2, [r3, #32]
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	4905      	ldr	r1, [pc, #20]	@ (8001140 <HAL_UART_ErrorCallback+0x30>)
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <HAL_UART_ErrorCallback+0x2c>)
 800112e:	f00e fbef 	bl	800f910 <HAL_UART_Receive_IT>
    }
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24001020 	.word	0x24001020
 8001140:	240003a8 	.word	0x240003a8

08001144 <LCD_LoadScreen>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_LoadScreen(void)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE;
 800114a:	4b61      	ldr	r3, [pc, #388]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 800114c:	2202      	movs	r2, #2
 800114e:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001150:	4b5f      	ldr	r3, [pc, #380]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 8001152:	2200      	movs	r2, #0
 8001154:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 8001156:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 8001158:	2201      	movs	r2, #1
 800115a:	735a      	strb	r2, [r3, #13]

	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800115c:	495d      	ldr	r1, [pc, #372]	@ (80012d4 <LCD_LoadScreen+0x190>)
 800115e:	485e      	ldr	r0, [pc, #376]	@ (80012d8 <LCD_LoadScreen+0x194>)
 8001160:	f000 fcc0 	bl	8001ae4 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001164:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <LCD_LoadScreen+0x198>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a59      	ldr	r2, [pc, #356]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 800116a:	2105      	movs	r1, #5
 800116c:	485a      	ldr	r0, [pc, #360]	@ (80012d8 <LCD_LoadScreen+0x194>)
 800116e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001170:	4b5a      	ldr	r3, [pc, #360]	@ (80012dc <LCD_LoadScreen+0x198>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	495a      	ldr	r1, [pc, #360]	@ (80012e0 <LCD_LoadScreen+0x19c>)
 8001176:	4858      	ldr	r0, [pc, #352]	@ (80012d8 <LCD_LoadScreen+0x194>)
 8001178:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f8bc 	bl	80012f8 <LCD_SetBrightness>
	

	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001180:	4b56      	ldr	r3, [pc, #344]	@ (80012dc <LCD_LoadScreen+0x198>)
 8001182:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8001184:	4b57      	ldr	r3, [pc, #348]	@ (80012e4 <LCD_LoadScreen+0x1a0>)
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	4853      	ldr	r0, [pc, #332]	@ (80012d8 <LCD_LoadScreen+0x194>)
 800118c:	47a0      	blx	r4

	
  uint32_t tick = get_tick();
 800118e:	f003 fb67 	bl	8004860 <HAL_GetTick>
 8001192:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001194:	e06a      	b.n	800126c <LCD_LoadScreen+0x128>
	{
		delay_ms(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f003 fb6e 	bl	8004878 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 800119c:	f003 fb60 	bl	8004860 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011aa:	d80f      	bhi.n	80011cc <LCD_LoadScreen+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80011ac:	f003 fb58 	bl	8004860 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2264      	movs	r2, #100	@ 0x64
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a4a      	ldr	r2, [pc, #296]	@ (80012e8 <LCD_LoadScreen+0x1a4>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f897 	bl	80012f8 <LCD_SetBrightness>
 80011ca:	e04f      	b.n	800126c <LCD_LoadScreen+0x128>
		else if (get_tick() - tick <= 3000)
 80011cc:	f003 fb48 	bl	8004860 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80011da:	4293      	cmp	r3, r2
 80011dc:	d83d      	bhi.n	800125a <LCD_LoadScreen+0x116>
		{
			sprintf((char *)&text, "%lu", (get_tick() - tick - 1000) / 10);
 80011de:	f003 fb3f 	bl	8004860 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011ec:	4a3f      	ldr	r2, [pc, #252]	@ (80012ec <LCD_LoadScreen+0x1a8>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	463b      	mov	r3, r7
 80011f6:	493e      	ldr	r1, [pc, #248]	@ (80012f0 <LCD_LoadScreen+0x1ac>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f014 fc3d 	bl	8015a78 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b1e      	subs	r3, #30
 8001206:	b298      	uxth	r0, r3
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29a      	uxth	r2, r3
 800120e:	463b      	mov	r3, r7
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2310      	movs	r3, #16
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2310      	movs	r3, #16
 8001218:	2101      	movs	r1, #1
 800121a:	f000 fb15 	bl	8001848 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 800121e:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <LCD_LoadScreen+0x198>)
 8001220:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	1edd      	subs	r5, r3, #3
 8001228:	f003 fb1a 	bl	8004860 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	4a2a      	ldr	r2, [pc, #168]	@ (80012e8 <LCD_LoadScreen+0x1a4>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	09db      	lsrs	r3, r3, #7
 8001246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	462a      	mov	r2, r5
 8001252:	2100      	movs	r1, #0
 8001254:	4820      	ldr	r0, [pc, #128]	@ (80012d8 <LCD_LoadScreen+0x194>)
 8001256:	47a0      	blx	r4
 8001258:	e008      	b.n	800126c <LCD_LoadScreen+0x128>
		}
		else if (get_tick() - tick > 3000)
 800125a:	f003 fb01 	bl	8004860 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001268:	4293      	cmp	r3, r2
 800126a:	d808      	bhi.n	800127e <LCD_LoadScreen+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800126c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001270:	4820      	ldr	r0, [pc, #128]	@ (80012f4 <LCD_LoadScreen+0x1b0>)
 8001272:	f007 fb7d 	bl	8008970 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d18c      	bne.n	8001196 <LCD_LoadScreen+0x52>
 800127c:	e004      	b.n	8001288 <LCD_LoadScreen+0x144>
			break;
 800127e:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001280:	e002      	b.n	8001288 <LCD_LoadScreen+0x144>
	{
		delay_ms(10);
 8001282:	200a      	movs	r0, #10
 8001284:	f003 faf8 	bl	8004878 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	4819      	ldr	r0, [pc, #100]	@ (80012f4 <LCD_LoadScreen+0x1b0>)
 800128e:	f007 fb6f 	bl	8008970 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d0f4      	beq.n	8001282 <LCD_LoadScreen+0x13e>
	}
	LCD_Light(0, 300);
 8001298:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800129c:	2000      	movs	r0, #0
 800129e:	f000 f847 	bl	8001330 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <LCD_LoadScreen+0x198>)
 80012a4:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <LCD_LoadScreen+0x18c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2100      	movs	r1, #0
 80012b0:	9101      	str	r1, [sp, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <LCD_LoadScreen+0x194>)
 80012bc:	47a0      	blx	r4
//	sprintf((char *)&text, "STM32H7xx 0x%lu", HAL_GetDEVID());
//	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
//	sprintf((char *)&text, "LCD ID:0x%lu", st7735_id);
//	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);

	LCD_Light(100, 200);
 80012be:	21c8      	movs	r1, #200	@ 0xc8
 80012c0:	2064      	movs	r0, #100	@ 0x64
 80012c2:	f000 f835 	bl	8001330 <LCD_Light>

}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdb0      	pop	{r4, r5, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000400 	.word	0x24000400
 80012d4:	24000000 	.word	0x24000000
 80012d8:	240003c0 	.word	0x240003c0
 80012dc:	24000024 	.word	0x24000024
 80012e0:	240003f8 	.word	0x240003f8
 80012e4:	080187e0 	.word	0x080187e0
 80012e8:	10624dd3 	.word	0x10624dd3
 80012ec:	cccccccd 	.word	0xcccccccd
 80012f0:	08017cd0 	.word	0x08017cd0
 80012f4:	58020800 	.word	0x58020800

080012f8 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <LCD_SetBrightness+0x1c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	24000e00 	.word	0x24000e00

08001318 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <LCD_GetBrightness+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	24000e00 	.word	0x24000e00

08001330 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 800133a:	f7ff ffed 	bl	8001318 <LCD_GetBrightness>
 800133e:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8001344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d05e      	beq.n	800140a <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	429a      	cmp	r2, r3
 8001352:	d05c      	beq.n	800140e <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001374:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001382:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	ed97 7a06 	vldr	s14, [r7, #24]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 800139c:	edd7 6a07 	vldr	s13, [r7, #28]
 80013a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a8:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80013ac:	f003 fa58 	bl	8004860 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f003 fa60 	bl	8004878 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80013b8:	f003 fa52 	bl	8004860 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 80013d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ec:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80013f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 0a90 	vmov	r0, s15
 80013fc:	f7ff ff7c 	bl	80012f8 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8001400:	6a3a      	ldr	r2, [r7, #32]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d204      	bcs.n	8001412 <LCD_Light+0xe2>
		delay_ms(1);
 8001408:	e7d3      	b.n	80013b2 <LCD_Light+0x82>
		return;
 800140a:	bf00      	nop
 800140c:	e002      	b.n	8001414 <LCD_Light+0xe4>
		return;
 800140e:	bf00      	nop
 8001410:	e000      	b.n	8001414 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8001412:	bf00      	nop
		
	}
}
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 800141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001420:	b097      	sub	sp, #92	@ 0x5c
 8001422:	af02      	add	r7, sp, #8
 8001424:	461e      	mov	r6, r3
 8001426:	4603      	mov	r3, r0
 8001428:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800142a:	460b      	mov	r3, r1
 800142c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800142e:	4613      	mov	r3, r2
 8001430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001434:	4633      	mov	r3, r6
 8001436:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800143a:	466b      	mov	r3, sp
 800143c:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 800143e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001440:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0=x;
 8001444:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001446:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp=POINT_COLOR; 
 800144a:	4bb0      	ldr	r3, [pc, #704]	@ (800170c <LCD_ShowChar+0x2f0>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001452:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d101      	bne.n	800145e <LCD_ShowChar+0x42>
 800145a:	2106      	movs	r1, #6
 800145c:	e000      	b.n	8001460 <LCD_ShowChar+0x44>
 800145e:	2108      	movs	r1, #8
 8001460:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8001464:	1e4b      	subs	r3, r1, #1
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40
 8001468:	460a      	mov	r2, r1
 800146a:	2300      	movs	r3, #0
 800146c:	4692      	mov	sl, r2
 800146e:	469b      	mov	fp, r3
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800147c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001480:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001484:	460b      	mov	r3, r1
 8001486:	005e      	lsls	r6, r3, #1
 8001488:	4603      	mov	r3, r0
 800148a:	3b01      	subs	r3, #1
 800148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800148e:	460a      	mov	r2, r1
 8001490:	2300      	movs	r3, #0
 8001492:	61ba      	str	r2, [r7, #24]
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	b2c3      	uxtb	r3, r0
 8001498:	2200      	movs	r2, #0
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	627a      	str	r2, [r7, #36]	@ 0x24
 800149e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014a2:	465b      	mov	r3, fp
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	fb02 fc03 	mul.w	ip, r2, r3
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	4652      	mov	r2, sl
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	449c      	add	ip, r3
 80014b4:	4652      	mov	r2, sl
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	fba2 8903 	umull	r8, r9, r2, r3
 80014bc:	eb0c 0309 	add.w	r3, ip, r9
 80014c0:	4699      	mov	r9, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80014ce:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80014d2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80014d6:	460a      	mov	r2, r1
 80014d8:	2300      	movs	r3, #0
 80014da:	613a      	str	r2, [r7, #16]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	b2c3      	uxtb	r3, r0
 80014e0:	2200      	movs	r2, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	60fa      	str	r2, [r7, #12]
 80014e6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014ea:	464b      	mov	r3, r9
 80014ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014f0:	4652      	mov	r2, sl
 80014f2:	fb02 fc03 	mul.w	ip, r2, r3
 80014f6:	465b      	mov	r3, fp
 80014f8:	4642      	mov	r2, r8
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	449c      	add	ip, r3
 8001500:	4642      	mov	r2, r8
 8001502:	4653      	mov	r3, sl
 8001504:	fba2 4503 	umull	r4, r5, r2, r3
 8001508:	eb0c 0305 	add.w	r3, ip, r5
 800150c:	461d      	mov	r5, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	012b      	lsls	r3, r5, #4
 8001518:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800151c:	0122      	lsls	r2, r4, #4
 800151e:	460b      	mov	r3, r1
 8001520:	4602      	mov	r2, r0
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	3307      	adds	r3, #7
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	ebad 0d03 	sub.w	sp, sp, r3
 8001532:	ab02      	add	r3, sp, #8
 8001534:	3301      	adds	r3, #1
 8001536:	085b      	lsrs	r3, r3, #1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 800153c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001540:	4619      	mov	r1, r3
 8001542:	4873      	ldr	r0, [pc, #460]	@ (8001710 <LCD_ShowChar+0x2f4>)
 8001544:	f001 fc2a 	bl	8002d9c <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8001548:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800154c:	4619      	mov	r1, r3
 800154e:	4870      	ldr	r0, [pc, #448]	@ (8001710 <LCD_ShowChar+0x2f4>)
 8001550:	f001 fc36 	bl	8002dc0 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001558:	3b20      	subs	r3, #32
 800155a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 8001564:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 80a8 	bne.w	80016be <LCD_ShowChar+0x2a2>
	{
		for(t=0;t<size;t++)
 800156e:	2300      	movs	r3, #0
 8001570:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001574:	e09b      	b.n	80016ae <LCD_ShowChar+0x292>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001576:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d10e      	bne.n	800159c <LCD_ShowChar+0x180>
 800157e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001582:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8001586:	4863      	ldr	r0, [pc, #396]	@ (8001714 <LCD_ShowChar+0x2f8>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4403      	add	r3, r0
 8001592:	440b      	add	r3, r1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800159a:	e00a      	b.n	80015b2 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 800159c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80015a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80015a4:	495c      	ldr	r1, [pc, #368]	@ (8001718 <LCD_ShowChar+0x2fc>)
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	440a      	add	r2, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			
			for(t1=0;t1<8;t1++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80015b8:	e06e      	b.n	8001698 <LCD_ShowChar+0x27c>
			{			    
				if(temp&0x80)
 80015ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da0e      	bge.n	80015e0 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80015c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b4c      	ldr	r3, [pc, #304]	@ (800170c <LCD_ShowChar+0x2f0>)
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	e00e      	b.n	80015fe <LCD_ShowChar+0x1e2>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80015e0:	4b4e      	ldr	r3, [pc, #312]	@ (800171c <LCD_ShowChar+0x300>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <LCD_ShowChar+0x300>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <LCD_ShowChar+0x2f0>)
 80015fc:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80015fe:	0872      	lsrs	r2, r6, #1
 8001600:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001604:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461c      	mov	r4, r3
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <LCD_ShowChar+0x2f0>)
 8001610:	8818      	ldrh	r0, [r3, #0]
 8001612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001614:	fb01 f202 	mul.w	r2, r1, r2
 8001618:	4422      	add	r2, r4
 800161a:	4601      	mov	r1, r0
 800161c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001624:	3301      	adds	r3, #1
 8001626:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 800162a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001634:	429a      	cmp	r2, r3
 8001636:	d302      	bcc.n	800163e <LCD_ShowChar+0x222>
 8001638:	2300      	movs	r3, #0
 800163a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 800163e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8001648:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800164a:	3301      	adds	r3, #1
 800164c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800164e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001652:	429a      	cmp	r2, r3
 8001654:	d304      	bcc.n	8001660 <LCD_ShowChar+0x244>
 8001656:	4a2d      	ldr	r2, [pc, #180]	@ (800170c <LCD_ShowChar+0x2f0>)
 8001658:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800165c:	8013      	strh	r3, [r2, #0]
 800165e:	e0e8      	b.n	8001832 <LCD_ShowChar+0x416>
				if((y-y0)==size)
 8001660:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001662:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800166c:	429a      	cmp	r2, r3
 800166e:	d10e      	bne.n	800168e <LCD_ShowChar+0x272>
				{
					y=y0;
 8001670:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001674:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8001676:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001678:	3301      	adds	r3, #1
 800167a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800167c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800167e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001680:	429a      	cmp	r2, r3
 8001682:	d30e      	bcc.n	80016a2 <LCD_ShowChar+0x286>
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <LCD_ShowChar+0x2f0>)
 8001686:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800168a:	8013      	strh	r3, [r2, #0]
 800168c:	e0d1      	b.n	8001832 <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 800168e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001692:	3301      	adds	r3, #1
 8001694:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001698:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800169c:	2b07      	cmp	r3, #7
 800169e:	d98c      	bls.n	80015ba <LCD_ShowChar+0x19e>
 80016a0:	e000      	b.n	80016a4 <LCD_ShowChar+0x288>
					break;
 80016a2:	bf00      	nop
		for(t=0;t<size;t++)
 80016a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016a8:	3301      	adds	r3, #1
 80016aa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80016ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80016b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016b6:	429a      	cmp	r2, r3
 80016b8:	f4ff af5d 	bcc.w	8001576 <LCD_ShowChar+0x15a>
 80016bc:	e09e      	b.n	80017fc <LCD_ShowChar+0x3e0>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80016c4:	e093      	b.n	80017ee <LCD_ShowChar+0x3d2>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80016c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d10e      	bne.n	80016ec <LCD_ShowChar+0x2d0>
 80016ce:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016d2:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 80016d6:	480f      	ldr	r0, [pc, #60]	@ (8001714 <LCD_ShowChar+0x2f8>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4403      	add	r3, r0
 80016e2:	440b      	add	r3, r1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80016ea:	e00a      	b.n	8001702 <LCD_ShowChar+0x2e6>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80016ec:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016f4:	4908      	ldr	r1, [pc, #32]	@ (8001718 <LCD_ShowChar+0x2fc>)
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	440a      	add	r2, r1
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for(t1=0;t1<8;t1++)
 8001702:	2300      	movs	r3, #0
 8001704:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001708:	e066      	b.n	80017d8 <LCD_ShowChar+0x3bc>
 800170a:	bf00      	nop
 800170c:	24000020 	.word	0x24000020
 8001710:	240003c0 	.word	0x240003c0
 8001714:	08017d7c 	.word	0x08017d7c
 8001718:	080181f0 	.word	0x080181f0
 800171c:	240003fc 	.word	0x240003fc
			{			    
				if(temp&0x80)
 8001720:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8001724:	2b00      	cmp	r3, #0
 8001726:	da1b      	bge.n	8001760 <LCD_ShowChar+0x344>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001728:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <LCD_ShowChar+0x424>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b21b      	sxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <LCD_ShowChar+0x424>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b218      	sxth	r0, r3
 8001740:	0872      	lsrs	r2, r6, #1
 8001742:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8001746:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461c      	mov	r4, r3
 8001750:	b280      	uxth	r0, r0
 8001752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001754:	fb01 f202 	mul.w	r2, r1, r2
 8001758:	4422      	add	r2, r4
 800175a:	4601      	mov	r1, r0
 800175c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001760:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001764:	3301      	adds	r3, #1
 8001766:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 800176a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800176e:	b29b      	uxth	r3, r3
 8001770:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001774:	429a      	cmp	r2, r3
 8001776:	d302      	bcc.n	800177e <LCD_ShowChar+0x362>
 8001778:	2300      	movs	r3, #0
 800177a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 800177e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8001788:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800178a:	3301      	adds	r3, #1
 800178c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800178e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001792:	429a      	cmp	r2, r3
 8001794:	d304      	bcc.n	80017a0 <LCD_ShowChar+0x384>
 8001796:	4a2a      	ldr	r2, [pc, #168]	@ (8001840 <LCD_ShowChar+0x424>)
 8001798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800179c:	8013      	strh	r3, [r2, #0]
 800179e:	e048      	b.n	8001832 <LCD_ShowChar+0x416>
				if((y-y0)==size)
 80017a0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80017a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d10e      	bne.n	80017ce <LCD_ShowChar+0x3b2>
				{
					y=y0;
 80017b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80017b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 80017b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b8:	3301      	adds	r3, #1
 80017ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80017bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80017be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d30e      	bcc.n	80017e2 <LCD_ShowChar+0x3c6>
 80017c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001840 <LCD_ShowChar+0x424>)
 80017c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80017ca:	8013      	strh	r3, [r2, #0]
 80017cc:	e031      	b.n	8001832 <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 80017ce:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80017d2:	3301      	adds	r3, #1
 80017d4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80017d8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d99f      	bls.n	8001720 <LCD_ShowChar+0x304>
 80017e0:	e000      	b.n	80017e4 <LCD_ShowChar+0x3c8>
					break;
 80017e2:	bf00      	nop
		for(t=0;t<size;t++)
 80017e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017e8:	3301      	adds	r3, #1
 80017ea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80017ee:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80017f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017f6:	429a      	cmp	r2, r3
 80017f8:	f4ff af65 	bcc.w	80016c6 <LCD_ShowChar+0x2aa>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80017fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001800:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8001804:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d101      	bne.n	8001810 <LCD_ShowChar+0x3f4>
 800180c:	2306      	movs	r3, #6
 800180e:	e000      	b.n	8001812 <LCD_ShowChar+0x3f6>
 8001810:	2308      	movs	r3, #8
 8001812:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001816:	9201      	str	r2, [sp, #4]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800181c:	4602      	mov	r2, r0
 800181e:	4809      	ldr	r0, [pc, #36]	@ (8001844 <LCD_ShowChar+0x428>)
 8001820:	f001 f90e 	bl	8002a40 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001824:	4a06      	ldr	r2, [pc, #24]	@ (8001840 <LCD_ShowChar+0x424>)
 8001826:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800182a:	8013      	strh	r3, [r2, #0]
 800182c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001830:	e001      	b.n	8001836 <LCD_ShowChar+0x41a>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001832:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8001836:	3754      	adds	r7, #84	@ 0x54
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	24000020 	.word	0x24000020
 8001844:	240003c0 	.word	0x240003c0

08001848 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af02      	add	r7, sp, #8
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4413      	add	r3, r2
 8001870:	807b      	strh	r3, [r7, #2]
	height+=y;
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800187a:	e024      	b.n	80018c6 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	429a      	cmp	r2, r3
 8001882:	d307      	bcc.n	8001894 <LCD_ShowString+0x4c>
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	80fb      	strh	r3, [r7, #6]
 8001888:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188c:	b29a      	uxth	r2, r3
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8001894:	88ba      	ldrh	r2, [r7, #4]
 8001896:	883b      	ldrh	r3, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d21d      	bcs.n	80018d8 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a4:	88b9      	ldrh	r1, [r7, #4]
 80018a6:	88f8      	ldrh	r0, [r7, #6]
 80018a8:	2400      	movs	r4, #0
 80018aa:	9400      	str	r4, [sp, #0]
 80018ac:	f7ff fdb6 	bl	800141c <LCD_ShowChar>
        x+=size/2;
 80018b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4413      	add	r3, r2
 80018be:	80fb      	strh	r3, [r7, #6]
        p++;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	3301      	adds	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80018cc:	d805      	bhi.n	80018da <LCD_ShowString+0x92>
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b1f      	cmp	r3, #31
 80018d4:	d8d2      	bhi.n	800187c <LCD_ShowString+0x34>
    }  
}
 80018d6:	e000      	b.n	80018da <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80018d8:	bf00      	nop
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
	...

080018e4 <lcd_init>:

static int32_t lcd_init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80018ee:	2104      	movs	r1, #4
 80018f0:	4803      	ldr	r0, [pc, #12]	@ (8001900 <lcd_init+0x1c>)
 80018f2:	f00d fdab 	bl	800f44c <HAL_TIMEx_PWMN_Start>
	return result;
 80018f6:	687b      	ldr	r3, [r7, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	24000e00 	.word	0x24000e00

08001904 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001908:	f002 ffaa 	bl	8004860 <HAL_GetTick>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001928:	481d      	ldr	r0, [pc, #116]	@ (80019a0 <lcd_writereg+0x8c>)
 800192a:	f007 f839 	bl	80089a0 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001934:	481a      	ldr	r0, [pc, #104]	@ (80019a0 <lcd_writereg+0x8c>)
 8001936:	f007 f833 	bl	80089a0 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800193a:	f107 010f 	add.w	r1, r7, #15
 800193e:	2364      	movs	r3, #100	@ 0x64
 8001940:	2201      	movs	r2, #1
 8001942:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <lcd_writereg+0x90>)
 8001944:	f00b fb86 	bl	800d054 <HAL_SPI_Transmit>
 8001948:	4603      	mov	r3, r0
 800194a:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001952:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <lcd_writereg+0x8c>)
 8001954:	f007 f824 	bl	80089a0 <HAL_GPIO_WritePin>
	if(length > 0)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00c      	beq.n	8001978 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	b29a      	uxth	r2, r3
 8001962:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <lcd_writereg+0x90>)
 800196a:	f00b fb73 	bl	800d054 <HAL_SPI_Transmit>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800197e:	4808      	ldr	r0, [pc, #32]	@ (80019a0 <lcd_writereg+0x8c>)
 8001980:	f007 f80e 	bl	80089a0 <HAL_GPIO_WritePin>
	if(result>0){
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dd03      	ble.n	8001992 <lcd_writereg+0x7e>
		result = -1;}
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e001      	b.n	8001996 <lcd_writereg+0x82>
	else{
		result = 0;}
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
	return result;
 8001996:	697b      	ldr	r3, [r7, #20]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58021000 	.word	0x58021000
 80019a4:	24000d28 	.word	0x24000d28

080019a8 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ba:	481b      	ldr	r0, [pc, #108]	@ (8001a28 <lcd_readreg+0x80>)
 80019bc:	f006 fff0 	bl	80089a0 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c6:	4818      	ldr	r0, [pc, #96]	@ (8001a28 <lcd_readreg+0x80>)
 80019c8:	f006 ffea 	bl	80089a0 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80019cc:	1df9      	adds	r1, r7, #7
 80019ce:	2364      	movs	r3, #100	@ 0x64
 80019d0:	2201      	movs	r2, #1
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <lcd_readreg+0x84>)
 80019d4:	f00b fb3e 	bl	800d054 <HAL_SPI_Transmit>
 80019d8:	4603      	mov	r3, r0
 80019da:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e2:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <lcd_readreg+0x80>)
 80019e4:	f006 ffdc 	bl	80089a0 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80019e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019ec:	2201      	movs	r2, #1
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	480e      	ldr	r0, [pc, #56]	@ (8001a2c <lcd_readreg+0x84>)
 80019f2:	f00b fd1d 	bl	800d430 <HAL_SPI_Receive>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a06:	4808      	ldr	r0, [pc, #32]	@ (8001a28 <lcd_readreg+0x80>)
 8001a08:	f006 ffca 	bl	80089a0 <HAL_GPIO_WritePin>
	if(result>0){
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dd03      	ble.n	8001a1a <lcd_readreg+0x72>
		result = -1;}
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e001      	b.n	8001a1e <lcd_readreg+0x76>
	else{
		result = 0;}
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
	return result;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58021000 	.word	0x58021000
 8001a2c:	24000d28 	.word	0x24000d28

08001a30 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a40:	480f      	ldr	r0, [pc, #60]	@ (8001a80 <lcd_senddata+0x50>)
 8001a42:	f006 ffad 	bl	80089a0 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	2364      	movs	r3, #100	@ 0x64
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <lcd_senddata+0x54>)
 8001a50:	f00b fb00 	bl	800d054 <HAL_SPI_Transmit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a5e:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <lcd_senddata+0x50>)
 8001a60:	f006 ff9e 	bl	80089a0 <HAL_GPIO_WritePin>
	if(result>0){
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	dd03      	ble.n	8001a72 <lcd_senddata+0x42>
		result = -1;}
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e001      	b.n	8001a76 <lcd_senddata+0x46>
	else{
		result = 0;}
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
	return result;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58021000 	.word	0x58021000
 8001a84:	24000d28 	.word	0x24000d28

08001a88 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a98:	4810      	ldr	r0, [pc, #64]	@ (8001adc <lcd_recvdata+0x54>)
 8001a9a:	f006 ff81 	bl	80089a0 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <lcd_recvdata+0x58>)
 8001aaa:	f00b fcc1 	bl	800d430 <HAL_SPI_Receive>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <lcd_recvdata+0x54>)
 8001aba:	f006 ff71 	bl	80089a0 <HAL_GPIO_WritePin>
	if(result>0){
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dd03      	ble.n	8001acc <lcd_recvdata+0x44>
		result = -1;}
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e001      	b.n	8001ad0 <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
	return result;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	58021000 	.word	0x58021000
 8001ae0:	24000d28 	.word	0x24000d28

08001ae4 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e03a      	b.n	8001b72 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	891a      	ldrh	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b7c <ST7735_RegisterBusIO+0x98>)
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <ST7735_RegisterBusIO+0x9c>)
 8001b46:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b84 <ST7735_RegisterBusIO+0xa0>)
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <ST7735_RegisterBusIO+0xa4>)
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c
    pObj->Ctx.handle    = pObj;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	631a      	str	r2, [r3, #48]	@ 0x30

    if(pObj->IO.Init != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4798      	blx	r3
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	e002      	b.n	8001b72 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b70:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08002fed 	.word	0x08002fed
 8001b80:	08003015 	.word	0x08003015
 8001b84:	0800303f 	.word	0x0800303f
 8001b88:	08003063 	.word	0x08003063

08001b8c <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e3a6      	b.n	80022f4 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f103 0020 	add.w	r0, r3, #32
 8001bb0:	f107 0213 	add.w	r2, r7, #19
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	f001 fa92 	bl	80030e0 <st7735_write_reg>
 8001bbc:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bbe:	2178      	movs	r1, #120	@ 0x78
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f001 fa60 	bl	8003086 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f103 0020 	add.w	r0, r3, #32
 8001bd0:	f107 0213 	add.w	r2, r7, #19
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	f001 fa82 	bl	80030e0 <st7735_write_reg>
 8001bdc:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bde:	2178      	movs	r1, #120	@ 0x78
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f001 fa50 	bl	8003086 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f103 0020 	add.w	r0, r3, #32
 8001bf0:	f107 0213 	add.w	r2, r7, #19
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2111      	movs	r1, #17
 8001bf8:	f001 fa72 	bl	80030e0 <st7735_write_reg>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f103 0020 	add.w	r0, r3, #32
 8001c0a:	f107 0213 	add.w	r2, r7, #19
 8001c0e:	2300      	movs	r3, #0
 8001c10:	21b1      	movs	r1, #177	@ 0xb1
 8001c12:	f001 fa65 	bl	80030e0 <st7735_write_reg>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3320      	adds	r3, #32
 8001c26:	f107 0113 	add.w	r1, r7, #19
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fa6c 	bl	800310a <st7735_send_data>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4413      	add	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c3a:	232c      	movs	r3, #44	@ 0x2c
 8001c3c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3320      	adds	r3, #32
 8001c42:	f107 0113 	add.w	r1, r7, #19
 8001c46:	2201      	movs	r2, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fa5e 	bl	800310a <st7735_send_data>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c56:	232d      	movs	r3, #45	@ 0x2d
 8001c58:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3320      	adds	r3, #32
 8001c5e:	f107 0113 	add.w	r1, r7, #19
 8001c62:	2201      	movs	r2, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fa50 	bl	800310a <st7735_send_data>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4413      	add	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001c72:	2301      	movs	r3, #1
 8001c74:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f103 0020 	add.w	r0, r3, #32
 8001c7c:	f107 0213 	add.w	r2, r7, #19
 8001c80:	2301      	movs	r3, #1
 8001c82:	21b2      	movs	r1, #178	@ 0xb2
 8001c84:	f001 fa2c 	bl	80030e0 <st7735_write_reg>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c90:	232c      	movs	r3, #44	@ 0x2c
 8001c92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3320      	adds	r3, #32
 8001c98:	f107 0113 	add.w	r1, r7, #19
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 fa33 	bl	800310a <st7735_send_data>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001cac:	232d      	movs	r3, #45	@ 0x2d
 8001cae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3320      	adds	r3, #32
 8001cb4:	f107 0113 	add.w	r1, r7, #19
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 fa25 	bl	800310a <st7735_send_data>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f103 0020 	add.w	r0, r3, #32
 8001cd2:	f107 0213 	add.w	r2, r7, #19
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	21b3      	movs	r1, #179	@ 0xb3
 8001cda:	f001 fa01 	bl	80030e0 <st7735_write_reg>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001ce6:	232c      	movs	r3, #44	@ 0x2c
 8001ce8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3320      	adds	r3, #32
 8001cee:	f107 0113 	add.w	r1, r7, #19
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fa08 	bl	800310a <st7735_send_data>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d02:	232d      	movs	r3, #45	@ 0x2d
 8001d04:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	f107 0113 	add.w	r1, r7, #19
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 f9fa 	bl	800310a <st7735_send_data>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3320      	adds	r3, #32
 8001d26:	f107 0113 	add.w	r1, r7, #19
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 f9ec 	bl	800310a <st7735_send_data>
 8001d32:	4602      	mov	r2, r0
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d3a:	232c      	movs	r3, #44	@ 0x2c
 8001d3c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3320      	adds	r3, #32
 8001d42:	f107 0113 	add.w	r1, r7, #19
 8001d46:	2201      	movs	r2, #1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 f9de 	bl	800310a <st7735_send_data>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4413      	add	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d56:	232d      	movs	r3, #45	@ 0x2d
 8001d58:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3320      	adds	r3, #32
 8001d5e:	f107 0113 	add.w	r1, r7, #19
 8001d62:	2201      	movs	r2, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 f9d0 	bl	800310a <st7735_send_data>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001d72:	2307      	movs	r3, #7
 8001d74:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f103 0020 	add.w	r0, r3, #32
 8001d7c:	f107 0213 	add.w	r2, r7, #19
 8001d80:	2301      	movs	r3, #1
 8001d82:	21b4      	movs	r1, #180	@ 0xb4
 8001d84:	f001 f9ac 	bl	80030e0 <st7735_write_reg>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001d90:	23a2      	movs	r3, #162	@ 0xa2
 8001d92:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f103 0020 	add.w	r0, r3, #32
 8001d9a:	f107 0213 	add.w	r2, r7, #19
 8001d9e:	2301      	movs	r3, #1
 8001da0:	21c0      	movs	r1, #192	@ 0xc0
 8001da2:	f001 f99d 	bl	80030e0 <st7735_write_reg>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001dae:	2302      	movs	r3, #2
 8001db0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3320      	adds	r3, #32
 8001db6:	f107 0113 	add.w	r1, r7, #19
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 f9a4 	bl	800310a <st7735_send_data>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001dca:	2384      	movs	r3, #132	@ 0x84
 8001dcc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	f107 0113 	add.w	r1, r7, #19
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 f996 	bl	800310a <st7735_send_data>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001de6:	23c5      	movs	r3, #197	@ 0xc5
 8001de8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f103 0020 	add.w	r0, r3, #32
 8001df0:	f107 0213 	add.w	r2, r7, #19
 8001df4:	2301      	movs	r3, #1
 8001df6:	21c1      	movs	r1, #193	@ 0xc1
 8001df8:	f001 f972 	bl	80030e0 <st7735_write_reg>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001e04:	230a      	movs	r3, #10
 8001e06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f103 0020 	add.w	r0, r3, #32
 8001e0e:	f107 0213 	add.w	r2, r7, #19
 8001e12:	2301      	movs	r3, #1
 8001e14:	21c2      	movs	r1, #194	@ 0xc2
 8001e16:	f001 f963 	bl	80030e0 <st7735_write_reg>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3320      	adds	r3, #32
 8001e2a:	f107 0113 	add.w	r1, r7, #19
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 f96a 	bl	800310a <st7735_send_data>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001e3e:	238a      	movs	r3, #138	@ 0x8a
 8001e40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f103 0020 	add.w	r0, r3, #32
 8001e48:	f107 0213 	add.w	r2, r7, #19
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	21c3      	movs	r1, #195	@ 0xc3
 8001e50:	f001 f946 	bl	80030e0 <st7735_write_reg>
 8001e54:	4602      	mov	r2, r0
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4413      	add	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001e5c:	232a      	movs	r3, #42	@ 0x2a
 8001e5e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3320      	adds	r3, #32
 8001e64:	f107 0113 	add.w	r1, r7, #19
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f94d 	bl	800310a <st7735_send_data>
 8001e70:	4602      	mov	r2, r0
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001e78:	238a      	movs	r3, #138	@ 0x8a
 8001e7a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f103 0020 	add.w	r0, r3, #32
 8001e82:	f107 0213 	add.w	r2, r7, #19
 8001e86:	2301      	movs	r3, #1
 8001e88:	21c4      	movs	r1, #196	@ 0xc4
 8001e8a:	f001 f929 	bl	80030e0 <st7735_write_reg>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001e96:	23ee      	movs	r3, #238	@ 0xee
 8001e98:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	f107 0113 	add.w	r1, r7, #19
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f930 	bl	800310a <st7735_send_data>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001eb2:	230e      	movs	r3, #14
 8001eb4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f103 0020 	add.w	r0, r3, #32
 8001ebc:	f107 0213 	add.w	r2, r7, #19
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	21c5      	movs	r1, #197	@ 0xc5
 8001ec4:	f001 f90c 	bl	80030e0 <st7735_write_reg>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7b1b      	ldrb	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f103 0020 	add.w	r0, r3, #32
 8001ede:	f107 0213 	add.w	r2, r7, #19
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2121      	movs	r1, #33	@ 0x21
 8001ee6:	f001 f8fb 	bl	80030e0 <st7735_write_reg>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4413      	add	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e00c      	b.n	8001f0e <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f103 0020 	add.w	r0, r3, #32
 8001efa:	f107 0213 	add.w	r2, r7, #19
 8001efe:	2300      	movs	r3, #0
 8001f00:	2120      	movs	r1, #32
 8001f02:	f001 f8ed 	bl	80030e0 <st7735_write_reg>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f103 0020 	add.w	r0, r3, #32
 8001f14:	f107 0208 	add.w	r2, r7, #8
 8001f18:	2301      	movs	r3, #1
 8001f1a:	213a      	movs	r1, #58	@ 0x3a
 8001f1c:	f001 f8e0 	bl	80030e0 <st7735_write_reg>
 8001f20:	4602      	mov	r2, r0
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4413      	add	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f103 0020 	add.w	r0, r3, #32
 8001f32:	f107 0213 	add.w	r2, r7, #19
 8001f36:	2301      	movs	r3, #1
 8001f38:	21e0      	movs	r1, #224	@ 0xe0
 8001f3a:	f001 f8d1 	bl	80030e0 <st7735_write_reg>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001f46:	231c      	movs	r3, #28
 8001f48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	f107 0113 	add.w	r1, r7, #19
 8001f52:	2201      	movs	r2, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f8d8 	bl	800310a <st7735_send_data>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001f62:	2307      	movs	r3, #7
 8001f64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3320      	adds	r3, #32
 8001f6a:	f107 0113 	add.w	r1, r7, #19
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 f8ca 	bl	800310a <st7735_send_data>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001f7e:	2312      	movs	r3, #18
 8001f80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3320      	adds	r3, #32
 8001f86:	f107 0113 	add.w	r1, r7, #19
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f8bc 	bl	800310a <st7735_send_data>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001f9a:	2337      	movs	r3, #55	@ 0x37
 8001f9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3320      	adds	r3, #32
 8001fa2:	f107 0113 	add.w	r1, r7, #19
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f8ae 	bl	800310a <st7735_send_data>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001fb6:	2332      	movs	r3, #50	@ 0x32
 8001fb8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3320      	adds	r3, #32
 8001fbe:	f107 0113 	add.w	r1, r7, #19
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f8a0 	bl	800310a <st7735_send_data>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001fd2:	2329      	movs	r3, #41	@ 0x29
 8001fd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3320      	adds	r3, #32
 8001fda:	f107 0113 	add.w	r1, r7, #19
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 f892 	bl	800310a <st7735_send_data>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4413      	add	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001fee:	232d      	movs	r3, #45	@ 0x2d
 8001ff0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	f107 0113 	add.w	r1, r7, #19
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 f884 	bl	800310a <st7735_send_data>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800200a:	2329      	movs	r3, #41	@ 0x29
 800200c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3320      	adds	r3, #32
 8002012:	f107 0113 	add.w	r1, r7, #19
 8002016:	2201      	movs	r2, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f876 	bl	800310a <st7735_send_data>
 800201e:	4602      	mov	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8002026:	2325      	movs	r3, #37	@ 0x25
 8002028:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3320      	adds	r3, #32
 800202e:	f107 0113 	add.w	r1, r7, #19
 8002032:	2201      	movs	r2, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f001 f868 	bl	800310a <st7735_send_data>
 800203a:	4602      	mov	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8002042:	232b      	movs	r3, #43	@ 0x2b
 8002044:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3320      	adds	r3, #32
 800204a:	f107 0113 	add.w	r1, r7, #19
 800204e:	2201      	movs	r2, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f85a 	bl	800310a <st7735_send_data>
 8002056:	4602      	mov	r2, r0
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 800205e:	2339      	movs	r3, #57	@ 0x39
 8002060:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3320      	adds	r3, #32
 8002066:	f107 0113 	add.w	r1, r7, #19
 800206a:	2201      	movs	r2, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f001 f84c 	bl	800310a <st7735_send_data>
 8002072:	4602      	mov	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3320      	adds	r3, #32
 8002082:	f107 0113 	add.w	r1, r7, #19
 8002086:	2201      	movs	r2, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f001 f83e 	bl	800310a <st7735_send_data>
 800208e:	4602      	mov	r2, r0
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8002096:	2301      	movs	r3, #1
 8002098:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3320      	adds	r3, #32
 800209e:	f107 0113 	add.w	r1, r7, #19
 80020a2:	2201      	movs	r2, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 f830 	bl	800310a <st7735_send_data>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3320      	adds	r3, #32
 80020ba:	f107 0113 	add.w	r1, r7, #19
 80020be:	2201      	movs	r2, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 f822 	bl	800310a <st7735_send_data>
 80020c6:	4602      	mov	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80020ce:	2310      	movs	r3, #16
 80020d0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3320      	adds	r3, #32
 80020d6:	f107 0113 	add.w	r1, r7, #19
 80020da:	2201      	movs	r2, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 f814 	bl	800310a <st7735_send_data>
 80020e2:	4602      	mov	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4413      	add	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 80020ea:	2303      	movs	r3, #3
 80020ec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f103 0020 	add.w	r0, r3, #32
 80020f4:	f107 0213 	add.w	r2, r7, #19
 80020f8:	2301      	movs	r3, #1
 80020fa:	21e1      	movs	r1, #225	@ 0xe1
 80020fc:	f000 fff0 	bl	80030e0 <st7735_write_reg>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8002108:	231d      	movs	r3, #29
 800210a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3320      	adds	r3, #32
 8002110:	f107 0113 	add.w	r1, r7, #19
 8002114:	2201      	movs	r2, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fff7 	bl	800310a <st7735_send_data>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002124:	2307      	movs	r3, #7
 8002126:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3320      	adds	r3, #32
 800212c:	f107 0113 	add.w	r1, r7, #19
 8002130:	2201      	movs	r2, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ffe9 	bl	800310a <st7735_send_data>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8002140:	2306      	movs	r3, #6
 8002142:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3320      	adds	r3, #32
 8002148:	f107 0113 	add.w	r1, r7, #19
 800214c:	2201      	movs	r2, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f000 ffdb 	bl	800310a <st7735_send_data>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 800215c:	232e      	movs	r3, #46	@ 0x2e
 800215e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3320      	adds	r3, #32
 8002164:	f107 0113 	add.w	r1, r7, #19
 8002168:	2201      	movs	r2, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f000 ffcd 	bl	800310a <st7735_send_data>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002178:	232c      	movs	r3, #44	@ 0x2c
 800217a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3320      	adds	r3, #32
 8002180:	f107 0113 	add.w	r1, r7, #19
 8002184:	2201      	movs	r2, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f000 ffbf 	bl	800310a <st7735_send_data>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002194:	2329      	movs	r3, #41	@ 0x29
 8002196:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3320      	adds	r3, #32
 800219c:	f107 0113 	add.w	r1, r7, #19
 80021a0:	2201      	movs	r2, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 ffb1 	bl	800310a <st7735_send_data>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4413      	add	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80021b0:	232d      	movs	r3, #45	@ 0x2d
 80021b2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3320      	adds	r3, #32
 80021b8:	f107 0113 	add.w	r1, r7, #19
 80021bc:	2201      	movs	r2, #1
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ffa3 	bl	800310a <st7735_send_data>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021cc:	232e      	movs	r3, #46	@ 0x2e
 80021ce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3320      	adds	r3, #32
 80021d4:	f107 0113 	add.w	r1, r7, #19
 80021d8:	2201      	movs	r2, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 ff95 	bl	800310a <st7735_send_data>
 80021e0:	4602      	mov	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021e8:	232e      	movs	r3, #46	@ 0x2e
 80021ea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3320      	adds	r3, #32
 80021f0:	f107 0113 	add.w	r1, r7, #19
 80021f4:	2201      	movs	r2, #1
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 ff87 	bl	800310a <st7735_send_data>
 80021fc:	4602      	mov	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002204:	2337      	movs	r3, #55	@ 0x37
 8002206:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3320      	adds	r3, #32
 800220c:	f107 0113 	add.w	r1, r7, #19
 8002210:	2201      	movs	r2, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f000 ff79 	bl	800310a <st7735_send_data>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8002220:	233f      	movs	r3, #63	@ 0x3f
 8002222:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3320      	adds	r3, #32
 8002228:	f107 0113 	add.w	r1, r7, #19
 800222c:	2201      	movs	r2, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f000 ff6b 	bl	800310a <st7735_send_data>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3320      	adds	r3, #32
 8002244:	f107 0113 	add.w	r1, r7, #19
 8002248:	2201      	movs	r2, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f000 ff5d 	bl	800310a <st7735_send_data>
 8002250:	4602      	mov	r2, r0
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3320      	adds	r3, #32
 8002260:	f107 0113 	add.w	r1, r7, #19
 8002264:	2201      	movs	r2, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f000 ff4f 	bl	800310a <st7735_send_data>
 800226c:	4602      	mov	r2, r0
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4413      	add	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8002274:	2302      	movs	r3, #2
 8002276:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3320      	adds	r3, #32
 800227c:	f107 0113 	add.w	r1, r7, #19
 8002280:	2201      	movs	r2, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f000 ff41 	bl	800310a <st7735_send_data>
 8002288:	4602      	mov	r2, r0
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4413      	add	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002290:	2310      	movs	r3, #16
 8002292:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3320      	adds	r3, #32
 8002298:	f107 0113 	add.w	r1, r7, #19
 800229c:	2201      	movs	r2, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 ff33 	bl	800310a <st7735_send_data>
 80022a4:	4602      	mov	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	4413      	add	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f103 0020 	add.w	r0, r3, #32
 80022b6:	f107 0213 	add.w	r2, r7, #19
 80022ba:	2301      	movs	r3, #1
 80022bc:	2113      	movs	r1, #19
 80022be:	f000 ff0f 	bl	80030e0 <st7735_write_reg>
 80022c2:	4602      	mov	r2, r0
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4413      	add	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f103 0020 	add.w	r0, r3, #32
 80022d0:	f107 0213 	add.w	r2, r7, #19
 80022d4:	2301      	movs	r3, #1
 80022d6:	2129      	movs	r1, #41	@ 0x29
 80022d8:	f000 ff02 	bl	80030e0 <st7735_write_reg>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f944 	bl	8002574 <ST7735_SetOrientation>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4413      	add	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002300:	697b      	ldr	r3, [r7, #20]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3320      	adds	r3, #32
 800232e:	f107 0208 	add.w	r2, r7, #8
 8002332:	21da      	movs	r1, #218	@ 0xda
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fec0 	bl	80030ba <st7735_read_reg>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e02d      	b.n	80023a4 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0020 	add.w	r0, r3, #32
 800234e:	f107 0308 	add.w	r3, r7, #8
 8002352:	3301      	adds	r3, #1
 8002354:	461a      	mov	r2, r3
 8002356:	21db      	movs	r1, #219	@ 0xdb
 8002358:	f000 feaf 	bl	80030ba <st7735_read_reg>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e01c      	b.n	80023a4 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f103 0020 	add.w	r0, r3, #32
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	3302      	adds	r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	21dc      	movs	r1, #220	@ 0xdc
 800237a:	f000 fe9e 	bl	80030ba <st7735_read_reg>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e00b      	b.n	80023a4 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 800238c:	7abb      	ldrb	r3, [r7, #10]
 800238e:	461a      	mov	r2, r3
 8002390:	7a7b      	ldrb	r3, [r7, #9]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	431a      	orrs	r2, r3
 8002396:	7a3b      	ldrb	r3, [r7, #8]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80023a4:	68fb      	ldr	r3, [r7, #12]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0020 	add.w	r0, r3, #32
 80023c2:	f107 020b 	add.w	r2, r7, #11
 80023c6:	2300      	movs	r3, #0
 80023c8:	2113      	movs	r1, #19
 80023ca:	f000 fe89 	bl	80030e0 <st7735_write_reg>
 80023ce:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023d0:	210a      	movs	r1, #10
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fe57 	bl	8003086 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 0020 	add.w	r0, r3, #32
 80023de:	f107 020b 	add.w	r2, r7, #11
 80023e2:	2300      	movs	r3, #0
 80023e4:	2129      	movs	r1, #41	@ 0x29
 80023e6:	f000 fe7b 	bl	80030e0 <st7735_write_reg>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023f2:	210a      	movs	r1, #10
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fe46 	bl	8003086 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f103 0020 	add.w	r0, r3, #32
 8002400:	f107 020b 	add.w	r2, r7, #11
 8002404:	2300      	movs	r3, #0
 8002406:	2136      	movs	r1, #54	@ 0x36
 8002408:	f000 fe6a 	bl	80030e0 <st7735_write_reg>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <ST7735_DisplayOn+0xc0>)
 8002416:	7b1b      	ldrb	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <ST7735_DisplayOn+0xc0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <ST7735_DisplayOn+0xc4>)
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	b2db      	uxtb	r3, r3
 8002430:	e006      	b.n	8002440 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002432:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <ST7735_DisplayOn+0xc0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a0f      	ldr	r2, [pc, #60]	@ (8002474 <ST7735_DisplayOn+0xc4>)
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800243e:	b2db      	uxtb	r3, r3
 8002440:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3320      	adds	r3, #32
 8002446:	f107 010b 	add.w	r1, r7, #11
 800244a:	2201      	movs	r2, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fe5c 	bl	800310a <st7735_send_data>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	24000400 	.word	0x24000400
 8002474:	24000070 	.word	0x24000070

08002478 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0020 	add.w	r0, r3, #32
 800248a:	f107 020b 	add.w	r2, r7, #11
 800248e:	2300      	movs	r3, #0
 8002490:	2113      	movs	r1, #19
 8002492:	f000 fe25 	bl	80030e0 <st7735_write_reg>
 8002496:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002498:	210a      	movs	r1, #10
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fdf3 	bl	8003086 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0020 	add.w	r0, r3, #32
 80024a6:	f107 020b 	add.w	r2, r7, #11
 80024aa:	2300      	movs	r3, #0
 80024ac:	2128      	movs	r1, #40	@ 0x28
 80024ae:	f000 fe17 	bl	80030e0 <st7735_write_reg>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80024ba:	210a      	movs	r1, #10
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fde2 	bl	8003086 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0020 	add.w	r0, r3, #32
 80024c8:	f107 020b 	add.w	r2, r7, #11
 80024cc:	2300      	movs	r3, #0
 80024ce:	2136      	movs	r1, #54	@ 0x36
 80024d0:	f000 fe06 	bl	80030e0 <st7735_write_reg>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <ST7735_DisplayOff+0xc0>)
 80024de:	7b1b      	ldrb	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80024e4:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <ST7735_DisplayOff+0xc0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a14      	ldr	r2, [pc, #80]	@ (800253c <ST7735_DisplayOff+0xc4>)
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	e006      	b.n	8002508 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <ST7735_DisplayOff+0xc0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <ST7735_DisplayOff+0xc4>)
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002506:	b2db      	uxtb	r3, r3
 8002508:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3320      	adds	r3, #32
 800250e:	f107 010b 	add.w	r1, r7, #11
 8002512:	2201      	movs	r2, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fdf8 	bl	800310a <st7735_send_data>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800252e:	68fb      	ldr	r3, [r7, #12]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	24000400 	.word	0x24000400
 800253c:	24000070 	.word	0x24000070

08002540 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <ST7735_SetOrientation+0x1a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d119      	bne.n	80025c2 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	7b5b      	ldrb	r3, [r3, #13]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d106      	bne.n	80025a4 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8002596:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002598:	2250      	movs	r2, #80	@ 0x50
 800259a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 800259c:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <ST7735_SetOrientation+0x114>)
 800259e:	22a0      	movs	r2, #160	@ 0xa0
 80025a0:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025a2:	e028      	b.n	80025f6 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <ST7735_SetOrientation+0x40>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7b5b      	ldrb	r3, [r3, #13]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d120      	bne.n	80025f6 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80025b4:	4b34      	ldr	r3, [pc, #208]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025b6:	2280      	movs	r2, #128	@ 0x80
 80025b8:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80025ba:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025bc:	22a0      	movs	r2, #160	@ 0xa0
 80025be:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025c0:	e019      	b.n	80025f6 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	7b5b      	ldrb	r3, [r3, #13]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80025ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025cc:	22a0      	movs	r2, #160	@ 0xa0
 80025ce:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80025d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025d2:	2250      	movs	r2, #80	@ 0x50
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	e00f      	b.n	80025f8 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	7b5b      	ldrb	r3, [r3, #13]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <ST7735_SetOrientation+0x74>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	7b5b      	ldrb	r3, [r3, #13]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d107      	bne.n	80025f8 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025ea:	22a0      	movs	r2, #160	@ 0xa0
 80025ec:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80025ee:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e000      	b.n	80025f8 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025f6:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <ST7735_SetOrientation+0x114>)
 80025fe:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7b1a      	ldrb	r2, [r3, #12]
 8002604:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002606:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7b5a      	ldrb	r2, [r3, #13]
 800260c:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <ST7735_SetOrientation+0x114>)
 800260e:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fbdf 	bl	8002de4 <ST7735_SetDisplayWindow>
 8002626:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002628:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <ST7735_SetOrientation+0x114>)
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a15      	ldr	r2, [pc, #84]	@ (800268c <ST7735_SetOrientation+0x118>)
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	b2db      	uxtb	r3, r3
 8002644:	e006      	b.n	8002654 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <ST7735_SetOrientation+0x114>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a10      	ldr	r2, [pc, #64]	@ (800268c <ST7735_SetOrientation+0x118>)
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002652:	b2db      	uxtb	r3, r3
 8002654:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 0020 	add.w	r0, r3, #32
 800265c:	f107 020b 	add.w	r2, r7, #11
 8002660:	2301      	movs	r3, #1
 8002662:	2136      	movs	r1, #54	@ 0x36
 8002664:	f000 fd3c 	bl	80030e0 <st7735_write_reg>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	24000400 	.word	0x24000400
 800268c:	24000070 	.word	0x24000070

08002690 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <ST7735_GetOrientation+0x20>)
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	24000400 	.word	0x24000400

080026b4 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <ST7735_SetCursor+0x174>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d821      	bhi.n	800270c <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80026c8:	4b57      	ldr	r3, [pc, #348]	@ (8002828 <ST7735_SetCursor+0x174>)
 80026ca:	7b5b      	ldrb	r3, [r3, #13]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10e      	bne.n	80026ee <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80026d0:	4b55      	ldr	r3, [pc, #340]	@ (8002828 <ST7735_SetCursor+0x174>)
 80026d2:	7b1b      	ldrb	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <ST7735_SetCursor+0x32>
				Xpos += 26;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	331a      	adds	r3, #26
 80026dc:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3301      	adds	r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	e033      	b.n	800274e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3318      	adds	r3, #24
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e02f      	b.n	800274e <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80026ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002828 <ST7735_SetCursor+0x174>)
 80026f0:	7b5b      	ldrb	r3, [r3, #13]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d12b      	bne.n	800274e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80026f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002828 <ST7735_SetCursor+0x174>)
 80026f8:	7b1b      	ldrb	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d127      	bne.n	800274e <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3302      	adds	r3, #2
 8002702:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e020      	b.n	800274e <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 800270c:	4b46      	ldr	r3, [pc, #280]	@ (8002828 <ST7735_SetCursor+0x174>)
 800270e:	7b5b      	ldrb	r3, [r3, #13]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d10e      	bne.n	8002732 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002714:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <ST7735_SetCursor+0x174>)
 8002716:	7b1b      	ldrb	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <ST7735_SetCursor+0x76>
				Xpos += 1;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	331a      	adds	r3, #26
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e011      	b.n	800274e <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3318      	adds	r3, #24
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	e00d      	b.n	800274e <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002732:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <ST7735_SetCursor+0x174>)
 8002734:	7b5b      	ldrb	r3, [r3, #13]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d109      	bne.n	800274e <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800273a:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <ST7735_SetCursor+0x174>)
 800273c:	7b1b      	ldrb	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3301      	adds	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3302      	adds	r3, #2
 800274c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f103 0020 	add.w	r0, r3, #32
 8002754:	f107 0213 	add.w	r2, r7, #19
 8002758:	2300      	movs	r3, #0
 800275a:	212a      	movs	r1, #42	@ 0x2a
 800275c:	f000 fcc0 	bl	80030e0 <st7735_write_reg>
 8002760:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b2db      	uxtb	r3, r3
 8002768:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3320      	adds	r3, #32
 800276e:	f107 0113 	add.w	r1, r7, #19
 8002772:	2201      	movs	r2, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fcc8 	bl	800310a <st7735_send_data>
 800277a:	4602      	mov	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4413      	add	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3320      	adds	r3, #32
 800278c:	f107 0113 	add.w	r1, r7, #19
 8002790:	2201      	movs	r2, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fcb9 	bl	800310a <st7735_send_data>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4413      	add	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f103 0020 	add.w	r0, r3, #32
 80027a6:	f107 0213 	add.w	r2, r7, #19
 80027aa:	2300      	movs	r3, #0
 80027ac:	212b      	movs	r1, #43	@ 0x2b
 80027ae:	f000 fc97 	bl	80030e0 <st7735_write_reg>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3320      	adds	r3, #32
 80027c6:	f107 0113 	add.w	r1, r7, #19
 80027ca:	2201      	movs	r2, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fc9c 	bl	800310a <st7735_send_data>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	4413      	add	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3320      	adds	r3, #32
 80027e4:	f107 0113 	add.w	r1, r7, #19
 80027e8:	2201      	movs	r2, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fc8d 	bl	800310a <st7735_send_data>
 80027f0:	4602      	mov	r2, r0
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f103 0020 	add.w	r0, r3, #32
 80027fe:	f107 0213 	add.w	r2, r7, #19
 8002802:	2300      	movs	r3, #0
 8002804:	212c      	movs	r1, #44	@ 0x2c
 8002806:	f000 fc6b 	bl	80030e0 <st7735_write_reg>
 800280a:	4602      	mov	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800281e:	697b      	ldr	r3, [r7, #20]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	24000400 	.word	0x24000400

0800282c <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	@ 0x40
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	330a      	adds	r3, #10
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	330b      	adds	r3, #11
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	441a      	add	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	441a      	add	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	330d      	adds	r3, #13
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4413      	add	r3, r2
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3312      	adds	r3, #18
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3313      	adds	r3, #19
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	441a      	add	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3314      	adds	r3, #20
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	441a      	add	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	3315      	adds	r3, #21
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	4413      	add	r3, r2
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	3316      	adds	r3, #22
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3317      	adds	r3, #23
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	441a      	add	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3318      	adds	r3, #24
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	441a      	add	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3319      	adds	r3, #25
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4413      	add	r3, r2
 80028b8:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3302      	adds	r3, #2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3303      	adds	r3, #3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	441a      	add	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3304      	adds	r3, #4
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	441a      	add	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3305      	adds	r3, #5
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4413      	add	r3, r2
 80028e0:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ee:	4413      	add	r3, r2
 80028f0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80028f2:	4b51      	ldr	r3, [pc, #324]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa6a 	bl	8002de4 <ST7735_SetDisplayWindow>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
 800291c:	e087      	b.n	8002a2e <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800291e:	4b46      	ldr	r3, [pc, #280]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 8002920:	7b1b      	ldrb	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a44      	ldr	r2, [pc, #272]	@ (8002a3c <ST7735_DrawBitmap+0x210>)
 800292c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002930:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e005      	b.n	8002946 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800293a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a3c <ST7735_DrawBitmap+0x210>)
 8002940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002944:	b2db      	uxtb	r3, r3
 8002946:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f103 0020 	add.w	r0, r3, #32
 800294e:	f107 0213 	add.w	r2, r7, #19
 8002952:	2301      	movs	r3, #1
 8002954:	2136      	movs	r1, #54	@ 0x36
 8002956:	f000 fbc3 	bl	80030e0 <st7735_write_reg>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
 8002966:	e062      	b.n	8002a2e <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fea1 	bl	80026b4 <ST7735_SetCursor>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	637b      	str	r3, [r7, #52]	@ 0x34
 800297e:	e056      	b.n	8002a2e <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3320      	adds	r3, #32
 8002990:	f107 0114 	add.w	r1, r7, #20
 8002994:	2202      	movs	r2, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fbb7 	bl	800310a <st7735_send_data>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80029a8:	e009      	b.n	80029be <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	3302      	adds	r3, #2
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pbmp += 2;
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	3302      	adds	r3, #2
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }while(counter < size);
 80029b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d3e0      	bcc.n	8002980 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 80029c0:	7b1b      	ldrb	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <ST7735_DrawBitmap+0x210>)
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e006      	b.n	80029ea <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80029dc:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <ST7735_DrawBitmap+0x210>)
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f103 0020 	add.w	r0, r3, #32
 80029f2:	f107 0213 	add.w	r2, r7, #19
 80029f6:	2301      	movs	r3, #1
 80029f8:	2136      	movs	r1, #54	@ 0x36
 80029fa:	f000 fb71 	bl	80030e0 <st7735_write_reg>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a0a:	e010      	b.n	8002a2e <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <ST7735_DrawBitmap+0x20c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f9e1 	bl	8002de4 <ST7735_SetDisplayWindow>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
  }

  return ret;
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3738      	adds	r7, #56	@ 0x38
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	24000400 	.word	0x24000400
 8002a3c:	24000070 	.word	0x24000070

08002a40 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5a:	441a      	add	r2, r3
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <ST7735_FillRGBRect+0xcc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d806      	bhi.n	8002a72 <ST7735_FillRGBRect+0x32>
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a68:	441a      	add	r2, r3
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <ST7735_FillRGBRect+0xcc>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d903      	bls.n	8002a7a <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e042      	b.n	8002b00 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e03b      	b.n	8002af8 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fe12 	bl	80026b4 <ST7735_SetCursor>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e029      	b.n	8002af2 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e013      	b.n	8002acc <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	7811      	ldrb	r1, [r2, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <ST7735_FillRGBRect+0xd0>)
 8002aae:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	3301      	adds	r3, #1
 8002aba:	7811      	ldrb	r1, [r2, #0]
 8002abc:	4a14      	ldr	r2, [pc, #80]	@ (8002b10 <ST7735_FillRGBRect+0xd0>)
 8002abe:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d3e7      	bcc.n	8002aa4 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f103 0020 	add.w	r0, r3, #32
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	461a      	mov	r2, r3
 8002ae0:	490b      	ldr	r1, [pc, #44]	@ (8002b10 <ST7735_FillRGBRect+0xd0>)
 8002ae2:	f000 fb12 	bl	800310a <st7735_send_data>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3301      	adds	r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3bf      	bcc.n	8002a80 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002b00:	69fb      	ldr	r3, [r7, #28]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	24000400 	.word	0x24000400
 8002b10:	24000410 	.word	0x24000410

08002b14 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <ST7735_DrawHLine+0x98>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d903      	bls.n	8002b3c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e032      	b.n	8002ba2 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fdb7 	bl	80026b4 <ST7735_SetCursor>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e026      	b.n	8002ba2 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e010      	b.n	8002b7c <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	0a1a      	lsrs	r2, r3, #8
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	b2d1      	uxtb	r1, r2
 8002b64:	4a12      	ldr	r2, [pc, #72]	@ (8002bb0 <ST7735_DrawHLine+0x9c>)
 8002b66:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	6a3a      	ldr	r2, [r7, #32]
 8002b70:	b2d1      	uxtb	r1, r2
 8002b72:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb0 <ST7735_DrawHLine+0x9c>)
 8002b74:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3ea      	bcc.n	8002b5a <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f103 0020 	add.w	r0, r3, #32
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4907      	ldr	r1, [pc, #28]	@ (8002bb0 <ST7735_DrawHLine+0x9c>)
 8002b92:	f000 faba 	bl	800310a <st7735_send_data>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002ba2:	697b      	ldr	r3, [r7, #20]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	24000400 	.word	0x24000400
 8002bb0:	24000690 	.word	0x24000690

08002bb4 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	441a      	add	r2, r3
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <ST7735_DrawVLine+0x64>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d903      	bls.n	8002bdc <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e018      	b.n	8002c0e <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e011      	b.n	8002c06 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	441a      	add	r2, r3
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f841 	bl	8002c74 <ST7735_SetPixel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfc:	617b      	str	r3, [r7, #20]
        break;
 8002bfe:	e006      	b.n	8002c0e <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	3301      	adds	r3, #1
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3e9      	bcc.n	8002be2 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002c0e:	697b      	ldr	r3, [r7, #20]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000400 	.word	0x24000400

08002c1c <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e014      	b.n	8002c62 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ff66 	bl	8002b14 <ST7735_DrawHLine>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	61fb      	str	r3, [r7, #28]
      break;
 8002c54:	e009      	b.n	8002c6a <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3e6      	bcc.n	8002c38 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	8a7b      	ldrh	r3, [r7, #18]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002c9e:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <ST7735_SetPixel+0x84>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d204      	bcs.n	8002cb2 <ST7735_SetPixel+0x3e>
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <ST7735_SetPixel+0x84>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d303      	bcc.n	8002cba <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e019      	b.n	8002cee <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fcf8 	bl	80026b4 <ST7735_SetCursor>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e00d      	b.n	8002cee <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3320      	adds	r3, #32
 8002cd6:	f107 0112 	add.w	r1, r7, #18
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fa14 	bl	800310a <st7735_send_data>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002cee:	697b      	ldr	r3, [r7, #20]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	24000400 	.word	0x24000400

08002cfc <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fcd0 	bl	80026b4 <ST7735_SetCursor>
 8002d14:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3320      	adds	r3, #32
 8002d1a:	f107 0211 	add.w	r2, r7, #17
 8002d1e:	212e      	movs	r1, #46	@ 0x2e
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f9ca 	bl	80030ba <st7735_read_reg>
 8002d26:	4602      	mov	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3320      	adds	r3, #32
 8002d32:	f107 0111 	add.w	r1, r7, #17
 8002d36:	2201      	movs	r2, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f9f8 	bl	800312e <st7735_recv_data>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3320      	adds	r3, #32
 8002d4a:	f107 0113 	add.w	r1, r7, #19
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f9ec 	bl	800312e <st7735_recv_data>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3320      	adds	r3, #32
 8002d62:	f107 0112 	add.w	r1, r7, #18
 8002d66:	2201      	movs	r2, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f9e0 	bl	800312e <st7735_recv_data>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	7cbb      	ldrb	r3, [r7, #18]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	441a      	add	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002d90:	697b      	ldr	r3, [r7, #20]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <ST7735_GetXSize+0x20>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	24000400 	.word	0x24000400

08002dc0 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <ST7735_GetYSize+0x20>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	24000400 	.word	0x24000400

08002de4 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002df2:	4b7d      	ldr	r3, [pc, #500]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d821      	bhi.n	8002e3e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002dfc:	7b5b      	ldrb	r3, [r3, #13]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002e02:	4b79      	ldr	r3, [pc, #484]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e04:	7b1b      	ldrb	r3, [r3, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	331a      	adds	r3, #26
 8002e0e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	e036      	b.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	e032      	b.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e20:	4b71      	ldr	r3, [pc, #452]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e22:	7b5b      	ldrb	r3, [r3, #13]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d12e      	bne.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e28:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e2a:	7b1b      	ldrb	r3, [r3, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d12a      	bne.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3302      	adds	r3, #2
 8002e34:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	e023      	b.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e40:	7b5b      	ldrb	r3, [r3, #13]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d111      	bne.n	8002e6a <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002e46:	4b68      	ldr	r3, [pc, #416]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e48:	7b1b      	ldrb	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	331a      	adds	r3, #26
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	e014      	b.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3318      	adds	r3, #24
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	e00d      	b.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e6c:	7b5b      	ldrb	r3, [r3, #13]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d109      	bne.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e72:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe8 <ST7735_SetDisplayWindow+0x204>)
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3302      	adds	r3, #2
 8002e84:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f103 0020 	add.w	r0, r3, #32
 8002e8c:	f107 0213 	add.w	r2, r7, #19
 8002e90:	2300      	movs	r3, #0
 8002e92:	212a      	movs	r1, #42	@ 0x2a
 8002e94:	f000 f924 	bl	80030e0 <st7735_write_reg>
 8002e98:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3320      	adds	r3, #32
 8002ea6:	f107 0113 	add.w	r1, r7, #19
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f92c 	bl	800310a <st7735_send_data>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	f107 0113 	add.w	r1, r7, #19
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f91d 	bl	800310a <st7735_send_data>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3320      	adds	r3, #32
 8002eea:	f107 0113 	add.w	r1, r7, #19
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f90a 	bl	800310a <st7735_send_data>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	4413      	add	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3320      	adds	r3, #32
 8002f14:	f107 0113 	add.w	r1, r7, #19
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8f5 	bl	800310a <st7735_send_data>
 8002f20:	4602      	mov	r2, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f103 0020 	add.w	r0, r3, #32
 8002f2e:	f107 0213 	add.w	r2, r7, #19
 8002f32:	2300      	movs	r3, #0
 8002f34:	212b      	movs	r1, #43	@ 0x2b
 8002f36:	f000 f8d3 	bl	80030e0 <st7735_write_reg>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3320      	adds	r3, #32
 8002f4e:	f107 0113 	add.w	r1, r7, #19
 8002f52:	2201      	movs	r2, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f8d8 	bl	800310a <st7735_send_data>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4413      	add	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3320      	adds	r3, #32
 8002f6c:	f107 0113 	add.w	r1, r7, #19
 8002f70:	2201      	movs	r2, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f8c9 	bl	800310a <st7735_send_data>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	4413      	add	r3, r2
 8002f86:	3b01      	subs	r3, #1
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3320      	adds	r3, #32
 8002f92:	f107 0113 	add.w	r1, r7, #19
 8002f96:	2201      	movs	r2, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f8b6 	bl	800310a <st7735_send_data>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3320      	adds	r3, #32
 8002fbc:	f107 0113 	add.w	r1, r7, #19
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f8a1 	bl	800310a <st7735_send_data>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4413      	add	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002fdc:	697b      	ldr	r3, [r7, #20]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	24000400 	.word	0x24000400

08002fec <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	7afa      	ldrb	r2, [r7, #11]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4610      	mov	r0, r2
 8003008:	4798      	blx	r3
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	7af8      	ldrb	r0, [r7, #11]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	68b8      	ldr	r0, [r7, #8]
 8003056:	4798      	blx	r3
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68b8      	ldr	r0, [r7, #8]
 800307a:	4798      	blx	r3
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4798      	blx	r3
 8003096:	4603      	mov	r3, r0
 8003098:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800309a:	bf00      	nop
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4798      	blx	r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d8f5      	bhi.n	800309c <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	460b      	mov	r3, r1
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	6910      	ldr	r0, [r2, #16]
 80030d0:	7af9      	ldrb	r1, [r7, #11]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	460b      	mov	r3, r1
 80030ee:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681c      	ldr	r4, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6918      	ldr	r0, [r3, #16]
 80030f8:	7af9      	ldrb	r1, [r7, #11]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	47a0      	blx	r4
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bd90      	pop	{r4, r7, pc}

0800310a <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	6910      	ldr	r0, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	4798      	blx	r3
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	6910      	ldr	r0, [r2, #16]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	4798      	blx	r3
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <Test_Init>:
/* USER CODE END Variable Declaration */



void Test_Init(void)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	af00      	add	r7, sp, #0

    LCD_LoadScreen();
 8003156:	f7fd fff5 	bl	8001144 <LCD_LoadScreen>

//    Odometry_Test_Init();
//    ESP32_Test();
//    GroundCommands_Test();
//    AttitudeMPC_Test_Init(void)
    DShot_Test();
 800315a:	f000 f809 	bl	8003170 <DShot_Test>



}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}

08003162 <Test_Loop>:




void Test_Loop(void)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	af00      	add	r7, sp, #0
	Odometry_Test_Loop();
 8003166:	f000 f81f 	bl	80031a8 <Odometry_Test_Loop>
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <DShot_Test>:
uint32_t last_rpm1;
uint32_t last_rpm2;
static uint8_t DShotResult;

void DShot_Test(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

	DShot_Init();
 8003174:	f7fd fad0 	bl	8000718 <DShot_Init>

	DShotResult = DShot_SendFrame(throttle1, throttle2, &last_rpm1, &last_rpm2);
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <DShot_Test+0x24>)
 800317a:	8818      	ldrh	r0, [r3, #0]
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <DShot_Test+0x28>)
 800317e:	8819      	ldrh	r1, [r3, #0]
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <DShot_Test+0x2c>)
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <DShot_Test+0x30>)
 8003184:	f7fd fae4 	bl	8000750 <DShot_SendFrame>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <DShot_Test+0x34>)
 800318e:	701a      	strb	r2, [r3, #0]

}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	24000090 	.word	0x24000090
 8003198:	24000092 	.word	0x24000092
 800319c:	24000914 	.word	0x24000914
 80031a0:	24000910 	.word	0x24000910
 80031a4:	24000918 	.word	0x24000918

080031a8 <Odometry_Test_Loop>:




void Odometry_Test_Loop(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af06      	add	r7, sp, #24
	Odometry_Read(&result);
 80031ae:	482b      	ldr	r0, [pc, #172]	@ (800325c <Odometry_Test_Loop+0xb4>)
 80031b0:	f7fd fa84 	bl	80006bc <Odometry_Read>

	sprintf((char *)&text, "%.2f %.2f %.2f              ",result.p,result.q,result.r);
 80031b4:	4b29      	ldr	r3, [pc, #164]	@ (800325c <Odometry_Test_Loop+0xb4>)
 80031b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031be:	4b27      	ldr	r3, [pc, #156]	@ (800325c <Odometry_Test_Loop+0xb4>)
 80031c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <Odometry_Test_Loop+0xb4>)
 80031ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80031ce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80031d2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031d6:	ed8d 7b00 	vstr	d7, [sp]
 80031da:	ec53 2b15 	vmov	r2, r3, d5
 80031de:	4920      	ldr	r1, [pc, #128]	@ (8003260 <Odometry_Test_Loop+0xb8>)
 80031e0:	4820      	ldr	r0, [pc, #128]	@ (8003264 <Odometry_Test_Loop+0xbc>)
 80031e2:	f012 fc49 	bl	8015a78 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <Odometry_Test_Loop+0xc0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <Odometry_Test_Loop+0xbc>)
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	2310      	movs	r3, #16
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	2116      	movs	r1, #22
 80031f8:	2004      	movs	r0, #4
 80031fa:	f7fe fb25 	bl	8001848 <LCD_ShowString>

	sprintf((char *)&text, "%.2f %.2f %.2f %.2f          ",result.q0,result.q1,result.q2,result.q3);
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <Odometry_Test_Loop+0xb4>)
 8003200:	edd3 7a04 	vldr	s15, [r3, #16]
 8003204:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8003208:	4b14      	ldr	r3, [pc, #80]	@ (800325c <Odometry_Test_Loop+0xb4>)
 800320a:	edd3 7a05 	vldr	s15, [r3, #20]
 800320e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <Odometry_Test_Loop+0xb4>)
 8003214:	edd3 6a06 	vldr	s13, [r3, #24]
 8003218:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800321c:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <Odometry_Test_Loop+0xb4>)
 800321e:	edd3 5a07 	vldr	s11, [r3, #28]
 8003222:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8003226:	ed8d 5b04 	vstr	d5, [sp, #16]
 800322a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800322e:	ed8d 7b00 	vstr	d7, [sp]
 8003232:	ec53 2b14 	vmov	r2, r3, d4
 8003236:	490d      	ldr	r1, [pc, #52]	@ (800326c <Odometry_Test_Loop+0xc4>)
 8003238:	480a      	ldr	r0, [pc, #40]	@ (8003264 <Odometry_Test_Loop+0xbc>)
 800323a:	f012 fc1d 	bl	8015a78 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <Odometry_Test_Loop+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <Odometry_Test_Loop+0xbc>)
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2310      	movs	r3, #16
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2310      	movs	r3, #16
 800324e:	2128      	movs	r1, #40	@ 0x28
 8003250:	2004      	movs	r0, #4
 8003252:	f7fe faf9 	bl	8001848 <LCD_ShowString>
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2400091c 	.word	0x2400091c
 8003260:	08017cd4 	.word	0x08017cd4
 8003264:	2400093c 	.word	0x2400093c
 8003268:	24000400 	.word	0x24000400
 800326c:	08017cf4 	.word	0x08017cf4

08003270 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003288:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <MX_ADC3_Init+0xc0>)
 800328a:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <MX_ADC3_Init+0xc4>)
 800328c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800328e:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <MX_ADC3_Init+0xc0>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003294:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <MX_ADC3_Init+0xc0>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800329a:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <MX_ADC3_Init+0xc0>)
 800329c:	2204      	movs	r2, #4
 800329e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80032a0:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032be:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80032d6:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80032de:	4b14      	ldr	r3, [pc, #80]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032e4:	4812      	ldr	r0, [pc, #72]	@ (8003330 <MX_ADC3_Init+0xc0>)
 80032e6:	f001 fcd9 	bl	8004c9c <HAL_ADC_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80032f0:	f000 faf8 	bl	80038e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80032f4:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <MX_ADC3_Init+0xc8>)
 80032f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032f8:	2306      	movs	r3, #6
 80032fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003300:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003304:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003306:	2304      	movs	r3, #4
 8003308:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	@ (8003330 <MX_ADC3_Init+0xc0>)
 8003318:	f001 fe62 	bl	8004fe0 <HAL_ADC_ConfigChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8003322:	f000 fadf 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	24000970 	.word	0x24000970
 8003334:	58026000 	.word	0x58026000
 8003338:	cb840000 	.word	0xcb840000

0800333c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0b4      	sub	sp, #208	@ 0xd0
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	22c0      	movs	r2, #192	@ 0xc0
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f012 fc8d 	bl	8015c6c <memset>
  if(adcHandle->Instance==ADC3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_ADC_MspInit+0x8c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d131      	bne.n	80033c0 <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800335c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8003368:	2306      	movs	r3, #6
 800336a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 800336c:	2328      	movs	r3, #40	@ 0x28
 800336e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003378:	2302      	movs	r3, #2
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003380:	2320      	movs	r3, #32
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f007 f83c 	bl	800a410 <HAL_RCCEx_PeriphCLKConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800339e:	f000 faa1 	bl	80038e4 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80033a2:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <HAL_ADC_MspInit+0x90>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a8:	4a08      	ldr	r2, [pc, #32]	@ (80033cc <HAL_ADC_MspInit+0x90>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_ADC_MspInit+0x90>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80033c0:	bf00      	nop
 80033c2:	37d0      	adds	r7, #208	@ 0xd0
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58026000 	.word	0x58026000
 80033cc:	58024400 	.word	0x58024400

080033d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <MX_DMA_Init+0x4c>)
 80033d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <MX_DMA_Init+0x4c>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033e6:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <MX_DMA_Init+0x4c>)
 80033e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2105      	movs	r1, #5
 80033f8:	200b      	movs	r0, #11
 80033fa:	f002 faa5 	bl	8005948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033fe:	200b      	movs	r0, #11
 8003400:	f002 fabc 	bl	800597c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2105      	movs	r1, #5
 8003408:	200c      	movs	r0, #12
 800340a:	f002 fa9d 	bl	8005948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800340e:	200c      	movs	r0, #12
 8003410:	f002 fab4 	bl	800597c <HAL_NVIC_EnableIRQ>

}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400

08003420 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  /* creation of ESCTask */
//  ESCTaskHandle = osThreadNew(StartESCTask, NULL, &ESCTask_attributes);

  /* creation of TestsTask */
  TestsTaskHandle = osThreadNew(StartTestsTask, NULL, &TestsTask_attributes);
 8003424:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <MX_FREERTOS_Init+0x18>)
 8003426:	2100      	movs	r1, #0
 8003428:	4804      	ldr	r0, [pc, #16]	@ (800343c <MX_FREERTOS_Init+0x1c>)
 800342a:	f00e fe61 	bl	80120f0 <osThreadNew>
 800342e:	4603      	mov	r3, r0
 8003430:	4a03      	ldr	r2, [pc, #12]	@ (8003440 <MX_FREERTOS_Init+0x20>)
 8003432:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	0801ec2c 	.word	0x0801ec2c
 800343c:	08003445 	.word	0x08003445
 8003440:	240009d4 	.word	0x240009d4

08003444 <StartTestsTask>:
static SemaphoreHandle_t TestsTaskSemaphoreHandle;
static StaticSemaphore_t TestsTaskSemaphoreControlBlock;

/* USER CODE END Header_StartTestsTask */
void StartTestsTask(void *argument)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af02      	add	r7, sp, #8
 800344a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTestsTask */

  TestsTaskSemaphoreHandle = xSemaphoreCreateBinaryStatic(&TestsTaskSemaphoreControlBlock);
 800344c:	2303      	movs	r3, #3
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <StartTestsTask+0x3c>)
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2001      	movs	r0, #1
 8003458:	f00f f82e 	bl	80124b8 <xQueueGenericCreateStatic>
 800345c:	4603      	mov	r3, r0
 800345e:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <StartTestsTask+0x40>)
 8003460:	6013      	str	r3, [r2, #0]

  Test_Init();
 8003462:	f7ff fe76 	bl	8003152 <Test_Init>

  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(TestsTaskSemaphoreHandle, portMAX_DELAY) == pdTRUE)
 8003466:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <StartTestsTask+0x40>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f04f 31ff 	mov.w	r1, #4294967295
 800346e:	4618      	mov	r0, r3
 8003470:	f00f fbd4 	bl	8012c1c <xQueueSemaphoreTake>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d1f5      	bne.n	8003466 <StartTestsTask+0x22>
	  {
		  Test_Loop();
 800347a:	f7ff fe72 	bl	8003162 <Test_Loop>
	  if (xSemaphoreTake(TestsTaskSemaphoreHandle, portMAX_DELAY) == pdTRUE)
 800347e:	e7f2      	b.n	8003466 <StartTestsTask+0x22>
 8003480:	24000c84 	.word	0x24000c84
 8003484:	24000c80 	.word	0x24000c80

08003488 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	@ 0x30
 800348c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348e:	f107 031c 	add.w	r3, r7, #28
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800349e:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a4:	4a4e      	ldr	r2, [pc, #312]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ae:	4b4c      	ldr	r3, [pc, #304]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034bc:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c2:	4a47      	ldr	r2, [pc, #284]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034cc:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034da:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e0:	4a3f      	ldr	r2, [pc, #252]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ea:	4b3d      	ldr	r3, [pc, #244]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f8:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <MX_GPIO_Init+0x158>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034fe:	4a38      	ldr	r2, [pc, #224]	@ (80035e0 <MX_GPIO_Init+0x158>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003508:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <MX_GPIO_Init+0x158>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003516:	4b32      	ldr	r3, [pc, #200]	@ (80035e0 <MX_GPIO_Init+0x158>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800351c:	4a30      	ldr	r2, [pc, #192]	@ (80035e0 <MX_GPIO_Init+0x158>)
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003526:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <MX_GPIO_Init+0x158>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003534:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <MX_GPIO_Init+0x158>)
 8003536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353a:	4a29      	ldr	r2, [pc, #164]	@ (80035e0 <MX_GPIO_Init+0x158>)
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003544:	4b26      	ldr	r3, [pc, #152]	@ (80035e0 <MX_GPIO_Init+0x158>)
 8003546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8003552:	2200      	movs	r2, #0
 8003554:	2108      	movs	r1, #8
 8003556:	4823      	ldr	r0, [pc, #140]	@ (80035e4 <MX_GPIO_Init+0x15c>)
 8003558:	f005 fa22 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 800355c:	2201      	movs	r2, #1
 800355e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8003562:	4820      	ldr	r0, [pc, #128]	@ (80035e4 <MX_GPIO_Init+0x15c>)
 8003564:	f005 fa1c 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 8003568:	2308      	movs	r3, #8
 800356a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356c:	2301      	movs	r3, #1
 800356e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	4619      	mov	r1, r3
 800357e:	4819      	ldr	r0, [pc, #100]	@ (80035e4 <MX_GPIO_Init+0x15c>)
 8003580:	f005 f846 	bl	8008610 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8003584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800358e:	2302      	movs	r3, #2
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	4813      	ldr	r0, [pc, #76]	@ (80035e8 <MX_GPIO_Init+0x160>)
 800359a:	f005 f839 	bl	8008610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800359e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80035a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	480b      	ldr	r0, [pc, #44]	@ (80035e4 <MX_GPIO_Init+0x15c>)
 80035b8:	f005 f82a 	bl	8008610 <HAL_GPIO_Init>

  /*Configure GPIO pins : DShotRX_MOTOR1_Pin DShotRX_MOTOR2_Pin */
  GPIO_InitStruct.Pin = DShotRX_MOTOR1_Pin|DShotRX_MOTOR2_Pin;
 80035bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	4806      	ldr	r0, [pc, #24]	@ (80035ec <MX_GPIO_Init+0x164>)
 80035d2:	f005 f81d 	bl	8008610 <HAL_GPIO_Init>

}
 80035d6:	bf00      	nop
 80035d8:	3730      	adds	r7, #48	@ 0x30
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	58024400 	.word	0x58024400
 80035e4:	58021000 	.word	0x58021000
 80035e8:	58020800 	.word	0x58020800
 80035ec:	58020c00 	.word	0x58020c00

080035f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <MX_I2C2_Init+0x74>)
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <MX_I2C2_Init+0x78>)
 80035f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <MX_I2C2_Init+0x74>)
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <MX_I2C2_Init+0x7c>)
 80035fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003600:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003606:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003608:	2201      	movs	r2, #1
 800360a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <MX_I2C2_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003612:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <MX_I2C2_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800362a:	480e      	ldr	r0, [pc, #56]	@ (8003664 <MX_I2C2_Init+0x74>)
 800362c:	f005 f9d2 	bl	80089d4 <HAL_I2C_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003636:	f000 f955 	bl	80038e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800363a:	2100      	movs	r1, #0
 800363c:	4809      	ldr	r0, [pc, #36]	@ (8003664 <MX_I2C2_Init+0x74>)
 800363e:	f005 fded 	bl	800921c <HAL_I2CEx_ConfigAnalogFilter>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003648:	f000 f94c 	bl	80038e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800364c:	2100      	movs	r1, #0
 800364e:	4805      	ldr	r0, [pc, #20]	@ (8003664 <MX_I2C2_Init+0x74>)
 8003650:	f005 fe2f 	bl	80092b2 <HAL_I2CEx_ConfigDigitalFilter>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800365a:	f000 f943 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	24000cd4 	.word	0x24000cd4
 8003668:	40005800 	.word	0x40005800
 800366c:	307075b1 	.word	0x307075b1

08003670 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ba      	sub	sp, #232	@ 0xe8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	22c0      	movs	r2, #192	@ 0xc0
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f012 faeb 	bl	8015c6c <memset>
  if(i2cHandle->Instance==I2C2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <HAL_I2C_MspInit+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d146      	bne.n	800372e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80036a0:	f04f 0208 	mov.w	r2, #8
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b2:	f107 0310 	add.w	r3, r7, #16
 80036b6:	4618      	mov	r0, r3
 80036b8:	f006 feaa 	bl	800a410 <HAL_RCCEx_PeriphCLKConfig>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80036c2:	f000 f90f 	bl	80038e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c6:	4b1d      	ldr	r3, [pc, #116]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 80036c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036d6:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 80036d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036ec:	2312      	movs	r3, #18
 80036ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036fe:	2304      	movs	r3, #4
 8003700:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003708:	4619      	mov	r1, r3
 800370a:	480d      	ldr	r0, [pc, #52]	@ (8003740 <HAL_I2C_MspInit+0xd0>)
 800370c:	f004 ff80 	bl	8008610 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003710:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 8003712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 8003718:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800371c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_I2C_MspInit+0xcc>)
 8003722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	37e8      	adds	r7, #232	@ 0xe8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40005800 	.word	0x40005800
 800373c:	58024400 	.word	0x58024400
 8003740:	58020400 	.word	0x58020400

08003744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003748:	f001 f83a 	bl	80047c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800374c:	f000 f81c 	bl	8003788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003750:	f7ff fe9a 	bl	8003488 <MX_GPIO_Init>
  MX_DMA_Init();
 8003754:	f7ff fe3c 	bl	80033d0 <MX_DMA_Init>
  MX_SPI4_Init();
 8003758:	f000 f8ca 	bl	80038f0 <MX_SPI4_Init>
  MX_TIM1_Init();
 800375c:	f000 fbfc 	bl	8003f58 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003760:	f7ff fd86 	bl	8003270 <MX_ADC3_Init>
  MX_TIM17_Init();
 8003764:	f000 fd80 	bl	8004268 <MX_TIM17_Init>
  MX_I2C2_Init();
 8003768:	f7ff ff42 	bl	80035f0 <MX_I2C2_Init>
  MX_UART5_Init();
 800376c:	f000 ff3e 	bl	80045ec <MX_UART5_Init>
  MX_TIM16_Init();
 8003770:	f000 fd04 	bl	800417c <MX_TIM16_Init>
  MX_TIM3_Init();
 8003774:	f000 fc80 	bl	8004078 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003778:	f00e fc70 	bl	801205c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800377c:	f7ff fe50 	bl	8003420 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003780:	f00e fc90 	bl	80120a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <main+0x40>

08003788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b09c      	sub	sp, #112	@ 0x70
 800378c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800378e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003792:	224c      	movs	r2, #76	@ 0x4c
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f012 fa68 	bl	8015c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	2220      	movs	r2, #32
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f012 fa62 	bl	8015c6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80037a8:	2002      	movs	r0, #2
 80037aa:	f005 fdcf 	bl	800934c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4b30      	ldr	r3, [pc, #192]	@ (8003874 <SystemClock_Config+0xec>)
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <SystemClock_Config+0xec>)
 80037b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037bc:	6193      	str	r3, [r2, #24]
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <SystemClock_Config+0xec>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <SystemClock_Config+0xf0>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003878 <SystemClock_Config+0xf0>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <SystemClock_Config+0xf0>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80037e0:	bf00      	nop
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <SystemClock_Config+0xec>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ee:	d1f8      	bne.n	80037e2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037fa:	2302      	movs	r3, #2
 80037fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037fe:	2302      	movs	r3, #2
 8003800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003802:	2305      	movs	r3, #5
 8003804:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003806:	23c0      	movs	r3, #192	@ 0xc0
 8003808:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800380a:	2302      	movs	r3, #2
 800380c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800380e:	2302      	movs	r3, #2
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003812:	2302      	movs	r3, #2
 8003814:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003816:	2308      	movs	r3, #8
 8003818:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800381a:	2300      	movs	r3, #0
 800381c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f005 fdca 	bl	80093c0 <HAL_RCC_OscConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003832:	f000 f857 	bl	80038e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003836:	233f      	movs	r3, #63	@ 0x3f
 8003838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800383a:	2303      	movs	r3, #3
 800383c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003842:	2308      	movs	r3, #8
 8003844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003846:	2340      	movs	r3, #64	@ 0x40
 8003848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800384a:	2340      	movs	r3, #64	@ 0x40
 800384c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800384e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003852:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003854:	2340      	movs	r3, #64	@ 0x40
 8003856:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	2104      	movs	r1, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f006 fa09 	bl	8009c74 <HAL_RCC_ClockConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003868:	f000 f83c 	bl	80038e4 <Error_Handler>
  }
}
 800386c:	bf00      	nop
 800386e:	3770      	adds	r7, #112	@ 0x70
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	58024800 	.word	0x58024800
 8003878:	58000400 	.word	0x58000400

0800387c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	BaseType_t xHigherPriorityTaskWoken_ESC = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
	BaseType_t xHigherPriorityTaskWoken_Control = pdFALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
	BaseType_t xHigherPriorityTaskWoken_Tests = pdFALSE;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]


	if (htim->Instance == TIM16) //DShot sampling telemetry timer
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a10      	ldr	r2, [pc, #64]	@ (80038d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		TIM_PeriodElapsedCallback_TIM16();
 800389a:	f7fd f889 	bl	80009b0 <TIM_PeriodElapsedCallback_TIM16>
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a0e      	ldr	r2, [pc, #56]	@ (80038dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_PeriodElapsedCallback+0x30>
  {
    HAL_IncTick();
 80038a8:	f000 ffc6 	bl	8004838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (xHigherPriorityTaskWoken_ESC || xHigherPriorityTaskWoken_Control || xHigherPriorityTaskWoken_Tests)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <HAL_TIM_PeriodElapsedCallback+0x42>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <HAL_TIM_PeriodElapsedCallback+0x42>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_TIM_PeriodElapsedCallback+0x52>
  {
          portYIELD_FROM_ISR(pdTRUE);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80038c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	f3bf 8f6f 	isb	sy
  }

  /* USER CODE END Callback 1 */
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40001400 	.word	0x40001400
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038e8:	b672      	cpsid	i
}
 80038ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <Error_Handler+0x8>

080038f0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80038f4:	4b28      	ldr	r3, [pc, #160]	@ (8003998 <MX_SPI4_Init+0xa8>)
 80038f6:	4a29      	ldr	r2, [pc, #164]	@ (800399c <MX_SPI4_Init+0xac>)
 80038f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80038fa:	4b27      	ldr	r3, [pc, #156]	@ (8003998 <MX_SPI4_Init+0xa8>)
 80038fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003900:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8003902:	4b25      	ldr	r3, [pc, #148]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003904:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8003908:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800390a:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800390c:	2207      	movs	r2, #7
 800390e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003910:	4b21      	ldr	r3, [pc, #132]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800391e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003922:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003924:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003926:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800392a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800392e:	2200      	movs	r2, #0
 8003930:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003934:	2200      	movs	r2, #0
 8003936:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800393a:	2200      	movs	r2, #0
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003940:	2200      	movs	r2, #0
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003946:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800394a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800394c:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800394e:	2200      	movs	r2, #0
 8003950:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003954:	2200      	movs	r2, #0
 8003956:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800395e:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003966:	2200      	movs	r2, #0
 8003968:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800396c:	2200      	movs	r2, #0
 800396e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003970:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003972:	2200      	movs	r2, #0
 8003974:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003976:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800397c:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <MX_SPI4_Init+0xa8>)
 800397e:	2200      	movs	r2, #0
 8003980:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003982:	4805      	ldr	r0, [pc, #20]	@ (8003998 <MX_SPI4_Init+0xa8>)
 8003984:	f009 fa42 	bl	800ce0c <HAL_SPI_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800398e:	f7ff ffa9 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	24000d28 	.word	0x24000d28
 800399c:	40013400 	.word	0x40013400

080039a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0ba      	sub	sp, #232	@ 0xe8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	22c0      	movs	r2, #192	@ 0xc0
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f012 f953 	bl	8015c6c <memset>
  if(spiHandle->Instance==SPI4)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <HAL_SPI_MspInit+0xc4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d145      	bne.n	8003a5c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80039d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80039dc:	2300      	movs	r3, #0
 80039de:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039e0:	f107 0310 	add.w	r3, r7, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f006 fd13 	bl	800a410 <HAL_RCCEx_PeriphCLKConfig>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80039f0:	f7ff ff78 	bl	80038e4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80039f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 80039f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 80039fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a04:	4b18      	ldr	r3, [pc, #96]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 8003a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 8003a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a18:	4a13      	ldr	r2, [pc, #76]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 8003a1a:	f043 0310 	orr.w	r3, r3, #16
 8003a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a22:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <HAL_SPI_MspInit+0xc8>)
 8003a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8003a30:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003a34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a44:	2302      	movs	r3, #2
 8003a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003a4a:	2305      	movs	r3, #5
 8003a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4805      	ldr	r0, [pc, #20]	@ (8003a6c <HAL_SPI_MspInit+0xcc>)
 8003a58:	f004 fdda 	bl	8008610 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	37e8      	adds	r7, #232	@ 0xe8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013400 	.word	0x40013400
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	58021000 	.word	0x58021000

08003a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a94:	2200      	movs	r2, #0
 8003a96:	210f      	movs	r1, #15
 8003a98:	f06f 0001 	mvn.w	r0, #1
 8003a9c:	f001 ff54 	bl	8005948 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003ab0:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <HAL_MspInit+0x60>)
 8003ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003abe:	f000 ff1f 	bl	8004900 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f000 ff08 	bl	80048d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58024400 	.word	0x58024400

08003ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b090      	sub	sp, #64	@ 0x40
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d827      	bhi.n	8003b32 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	2037      	movs	r0, #55	@ 0x37
 8003ae8:	f001 ff2e 	bl	8005948 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003aec:	2037      	movs	r0, #55	@ 0x37
 8003aee:	f001 ff45 	bl	800597c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8003af2:	4a29      	ldr	r2, [pc, #164]	@ (8003b98 <HAL_InitTick+0xc4>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003af8:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <HAL_InitTick+0xc8>)
 8003afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003afe:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_InitTick+0xc8>)
 8003b00:	f043 0320 	orr.w	r3, r3, #32
 8003b04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b08:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_InitTick+0xc8>)
 8003b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b16:	f107 0210 	add.w	r2, r7, #16
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 fc33 	bl	800a38c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_InitTick+0x6a>
 8003b30:	e001      	b.n	8003b36 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e02b      	b.n	8003b8e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b36:	f006 fbfd 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 8003b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003b3c:	e004      	b.n	8003b48 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b3e:	f006 fbf9 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 8003b42:	4603      	mov	r3, r0
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <HAL_InitTick+0xcc>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	0c9b      	lsrs	r3, r3, #18
 8003b52:	3b01      	subs	r3, #1
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003b56:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b58:	4a13      	ldr	r2, [pc, #76]	@ (8003ba8 <HAL_InitTick+0xd4>)
 8003b5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b62:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003b64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003b76:	480b      	ldr	r0, [pc, #44]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b78:	f009 ffb5 	bl	800dae6 <HAL_TIM_Base_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003b82:	4808      	ldr	r0, [pc, #32]	@ (8003ba4 <HAL_InitTick+0xd0>)
 8003b84:	f00a f806 	bl	800db94 <HAL_TIM_Base_Start_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	e000      	b.n	8003b8e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3740      	adds	r7, #64	@ 0x40
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	2400009c 	.word	0x2400009c
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	431bde83 	.word	0x431bde83
 8003ba4:	24000db0 	.word	0x24000db0
 8003ba8:	40001400 	.word	0x40001400

08003bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <NMI_Handler+0x4>

08003bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <HardFault_Handler+0x4>

08003bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <MemManage_Handler+0x4>

08003bc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <BusFault_Handler+0x4>

08003bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <UsageFault_Handler+0x4>

08003bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003be8:	4802      	ldr	r0, [pc, #8]	@ (8003bf4 <DMA1_Stream0_IRQHandler+0x10>)
 8003bea:	f003 f9ff 	bl	8006fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	24000f30 	.word	0x24000f30

08003bf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003bfc:	4802      	ldr	r0, [pc, #8]	@ (8003c08 <DMA1_Stream1_IRQHandler+0x10>)
 8003bfe:	f003 f9f5 	bl	8006fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	24000fa8 	.word	0x24000fa8

08003c0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c10:	4802      	ldr	r0, [pc, #8]	@ (8003c1c <UART5_IRQHandler+0x10>)
 8003c12:	f00b fec9 	bl	800f9a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	24001020 	.word	0x24001020

08003c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <TIM7_IRQHandler+0x10>)
 8003c26:	f00a fb3b 	bl	800e2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24000db0 	.word	0x24000db0

08003c34 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <TIM16_IRQHandler+0x10>)
 8003c3a:	f00a fb31 	bl	800e2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	24000e98 	.word	0x24000e98

08003c48 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <TIM17_IRQHandler+0x10>)
 8003c4e:	f00a fb27 	bl	800e2a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	24000ee4 	.word	0x24000ee4

08003c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return 1;
 8003c60:	2301      	movs	r3, #1
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_kill>:

int _kill(int pid, int sig)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c76:	f012 f8a9 	bl	8015dcc <__errno>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2216      	movs	r2, #22
 8003c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_exit>:

void _exit (int status)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ffe7 	bl	8003c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <_exit+0x12>

08003ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e00a      	b.n	8003cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	4601      	mov	r1, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	60ba      	str	r2, [r7, #8]
 8003cc0:	b2ca      	uxtb	r2, r1
 8003cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dbf0      	blt.n	8003cb4 <_read+0x12>
  }

  return len;
 8003cd2:	687b      	ldr	r3, [r7, #4]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e009      	b.n	8003d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	60ba      	str	r2, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	dbf1      	blt.n	8003cee <_write+0x12>
  }
  return len;
 8003d0a:	687b      	ldr	r3, [r7, #4]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_close>:

int _close(int file)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d3c:	605a      	str	r2, [r3, #4]
  return 0;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_isatty>:

int _isatty(int file)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d54:	2301      	movs	r3, #1
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <_sbrk+0x5c>)
 8003d86:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <_sbrk+0x60>)
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <_sbrk+0x64>)
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <_sbrk+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d207      	bcs.n	8003dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dac:	f012 f80e 	bl	8015dcc <__errno>
 8003db0:	4603      	mov	r3, r0
 8003db2:	220c      	movs	r2, #12
 8003db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	e009      	b.n	8003dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dbc:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <_sbrk+0x64>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	4a05      	ldr	r2, [pc, #20]	@ (8003de0 <_sbrk+0x64>)
 8003dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	24080000 	.word	0x24080000
 8003ddc:	00000400 	.word	0x00000400
 8003de0:	24000dfc 	.word	0x24000dfc
 8003de4:	24005bf0 	.word	0x24005bf0

08003de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dec:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <SystemInit+0x114>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <SystemInit+0x114>)
 8003df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dfc:	4b40      	ldr	r3, [pc, #256]	@ (8003f00 <SystemInit+0x118>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2b06      	cmp	r3, #6
 8003e06:	d807      	bhi.n	8003e18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e08:	4b3d      	ldr	r3, [pc, #244]	@ (8003f00 <SystemInit+0x118>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 030f 	bic.w	r3, r3, #15
 8003e10:	4a3b      	ldr	r2, [pc, #236]	@ (8003f00 <SystemInit+0x118>)
 8003e12:	f043 0307 	orr.w	r3, r3, #7
 8003e16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e18:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <SystemInit+0x11c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a39      	ldr	r2, [pc, #228]	@ (8003f04 <SystemInit+0x11c>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e24:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <SystemInit+0x11c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <SystemInit+0x11c>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4935      	ldr	r1, [pc, #212]	@ (8003f04 <SystemInit+0x11c>)
 8003e30:	4b35      	ldr	r3, [pc, #212]	@ (8003f08 <SystemInit+0x120>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e36:	4b32      	ldr	r3, [pc, #200]	@ (8003f00 <SystemInit+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e42:	4b2f      	ldr	r3, [pc, #188]	@ (8003f00 <SystemInit+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 030f 	bic.w	r3, r3, #15
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <SystemInit+0x118>)
 8003e4c:	f043 0307 	orr.w	r3, r3, #7
 8003e50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e52:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <SystemInit+0x11c>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e58:	4b2a      	ldr	r3, [pc, #168]	@ (8003f04 <SystemInit+0x11c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <SystemInit+0x11c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e64:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <SystemInit+0x11c>)
 8003e66:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <SystemInit+0x124>)
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e6a:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <SystemInit+0x11c>)
 8003e6c:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <SystemInit+0x128>)
 8003e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e70:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <SystemInit+0x11c>)
 8003e72:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <SystemInit+0x12c>)
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e76:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <SystemInit+0x11c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e7c:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <SystemInit+0x11c>)
 8003e7e:	4a25      	ldr	r2, [pc, #148]	@ (8003f14 <SystemInit+0x12c>)
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e82:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <SystemInit+0x11c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e88:	4b1e      	ldr	r3, [pc, #120]	@ (8003f04 <SystemInit+0x11c>)
 8003e8a:	4a22      	ldr	r2, [pc, #136]	@ (8003f14 <SystemInit+0x12c>)
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <SystemInit+0x11c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <SystemInit+0x11c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1a      	ldr	r2, [pc, #104]	@ (8003f04 <SystemInit+0x11c>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <SystemInit+0x11c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <SystemInit+0x130>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <SystemInit+0x134>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb2:	d202      	bcs.n	8003eba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <SystemInit+0x138>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003eba:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <SystemInit+0x11c>)
 8003ebc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <SystemInit+0x11c>)
 8003eca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ece:	4a0d      	ldr	r2, [pc, #52]	@ (8003f04 <SystemInit+0x11c>)
 8003ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ed4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ed8:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <SystemInit+0x13c>)
 8003eda:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003ede:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003ee0:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <SystemInit+0x11c>)
 8003ee2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ee6:	4a07      	ldr	r2, [pc, #28]	@ (8003f04 <SystemInit+0x11c>)
 8003ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000ed00 	.word	0xe000ed00
 8003f00:	52002000 	.word	0x52002000
 8003f04:	58024400 	.word	0x58024400
 8003f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f0c:	02020200 	.word	0x02020200
 8003f10:	01ff0000 	.word	0x01ff0000
 8003f14:	01010280 	.word	0x01010280
 8003f18:	5c001000 	.word	0x5c001000
 8003f1c:	ffff0000 	.word	0xffff0000
 8003f20:	51008108 	.word	0x51008108
 8003f24:	52004000 	.word	0x52004000

08003f28 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <ExitRun0Mode+0x2c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a08      	ldr	r2, [pc, #32]	@ (8003f54 <ExitRun0Mode+0x2c>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003f38:	bf00      	nop
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <ExitRun0Mode+0x2c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f9      	beq.n	8003f3a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	58024800 	.word	0x58024800

08003f58 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch1;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b096      	sub	sp, #88	@ 0x58
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	615a      	str	r2, [r3, #20]
 8003f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	222c      	movs	r2, #44	@ 0x2c
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f011 fe71 	bl	8015c6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f8a:	4b39      	ldr	r3, [pc, #228]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003f8c:	4a39      	ldr	r2, [pc, #228]	@ (8004074 <MX_TIM1_Init+0x11c>)
 8003f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8003f90:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003f92:	220b      	movs	r2, #11
 8003f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f96:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003f9c:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003f9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fb6:	482e      	ldr	r0, [pc, #184]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003fb8:	f009 fef4 	bl	800dda4 <HAL_TIM_PWM_Init>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003fc2:	f7ff fc8f 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4825      	ldr	r0, [pc, #148]	@ (8004070 <MX_TIM1_Init+0x118>)
 8003fda:	f00b faf9 	bl	800f5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003fe4:	f7ff fc7e 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe8:	2360      	movs	r3, #96	@ 0x60
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004004:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004008:	2204      	movs	r2, #4
 800400a:	4619      	mov	r1, r3
 800400c:	4818      	ldr	r0, [pc, #96]	@ (8004070 <MX_TIM1_Init+0x118>)
 800400e:	f00a fac9 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004018:	f7ff fc64 	bl	80038e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800403e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4807      	ldr	r0, [pc, #28]	@ (8004070 <MX_TIM1_Init+0x118>)
 8004052:	f00b fb4b 	bl	800f6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800405c:	f7ff fc42 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004060:	4803      	ldr	r0, [pc, #12]	@ (8004070 <MX_TIM1_Init+0x118>)
 8004062:	f000 fa5f 	bl	8004524 <HAL_TIM_MspPostInit>

}
 8004066:	bf00      	nop
 8004068:	3758      	adds	r7, #88	@ 0x58
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	24000e00 	.word	0x24000e00
 8004074:	40010000 	.word	0x40010000

08004078 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	@ 0x38
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800407e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408c:	f107 031c 	add.w	r3, r7, #28
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004098:	463b      	mov	r3, r7
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	611a      	str	r2, [r3, #16]
 80040a6:	615a      	str	r2, [r3, #20]
 80040a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040aa:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040ac:	4a32      	ldr	r2, [pc, #200]	@ (8004178 <MX_TIM3_Init+0x100>)
 80040ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040b0:	4b30      	ldr	r3, [pc, #192]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 800;
 80040bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040be:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80040c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040d0:	4828      	ldr	r0, [pc, #160]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040d2:	f009 fd08 	bl	800dae6 <HAL_TIM_Base_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040dc:	f7ff fc02 	bl	80038e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040ea:	4619      	mov	r1, r3
 80040ec:	4821      	ldr	r0, [pc, #132]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040ee:	f00a fb6d 	bl	800e7cc <HAL_TIM_ConfigClockSource>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80040f8:	f7ff fbf4 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040fc:	481d      	ldr	r0, [pc, #116]	@ (8004174 <MX_TIM3_Init+0xfc>)
 80040fe:	f009 fe51 	bl	800dda4 <HAL_TIM_PWM_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004108:	f7ff fbec 	bl	80038e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	4619      	mov	r1, r3
 800411a:	4816      	ldr	r0, [pc, #88]	@ (8004174 <MX_TIM3_Init+0xfc>)
 800411c:	f00b fa58 	bl	800f5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004126:	f7ff fbdd 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800412a:	2360      	movs	r3, #96	@ 0x60
 800412c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004132:	2302      	movs	r3, #2
 8004134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800413a:	463b      	mov	r3, r7
 800413c:	2200      	movs	r2, #0
 800413e:	4619      	mov	r1, r3
 8004140:	480c      	ldr	r0, [pc, #48]	@ (8004174 <MX_TIM3_Init+0xfc>)
 8004142:	f00a fa2f 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800414c:	f7ff fbca 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004150:	463b      	mov	r3, r7
 8004152:	2204      	movs	r2, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4807      	ldr	r0, [pc, #28]	@ (8004174 <MX_TIM3_Init+0xfc>)
 8004158:	f00a fa24 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004162:	f7ff fbbf 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004166:	4803      	ldr	r0, [pc, #12]	@ (8004174 <MX_TIM3_Init+0xfc>)
 8004168:	f000 f9dc 	bl	8004524 <HAL_TIM_MspPostInit>

}
 800416c:	bf00      	nop
 800416e:	3738      	adds	r7, #56	@ 0x38
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	24000e4c 	.word	0x24000e4c
 8004178:	40000400 	.word	0x40000400

0800417c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b092      	sub	sp, #72	@ 0x48
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	611a      	str	r2, [r3, #16]
 8004192:	615a      	str	r2, [r3, #20]
 8004194:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004196:	463b      	mov	r3, r7
 8004198:	222c      	movs	r2, #44	@ 0x2c
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f011 fd65 	bl	8015c6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80041a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004264 <MX_TIM16_Init+0xe8>)
 80041a6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80041a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 640;
 80041b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80041ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041bc:	4b28      	ldr	r3, [pc, #160]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80041c2:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80041ce:	4824      	ldr	r0, [pc, #144]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041d0:	f009 fc89 	bl	800dae6 <HAL_TIM_Base_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80041da:	f7ff fb83 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80041de:	4820      	ldr	r0, [pc, #128]	@ (8004260 <MX_TIM16_Init+0xe4>)
 80041e0:	f009 fd7f 	bl	800dce2 <HAL_TIM_OC_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80041ea:	f7ff fb7b 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f6:	2300      	movs	r3, #0
 80041f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800420a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800420e:	2200      	movs	r2, #0
 8004210:	4619      	mov	r1, r3
 8004212:	4813      	ldr	r0, [pc, #76]	@ (8004260 <MX_TIM16_Init+0xe4>)
 8004214:	f00a f94c 	bl	800e4b0 <HAL_TIM_OC_ConfigChannel>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800421e:	f7ff fb61 	bl	80038e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800423a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004244:	463b      	mov	r3, r7
 8004246:	4619      	mov	r1, r3
 8004248:	4805      	ldr	r0, [pc, #20]	@ (8004260 <MX_TIM16_Init+0xe4>)
 800424a:	f00b fa4f 	bl	800f6ec <HAL_TIMEx_ConfigBreakDeadTime>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8004254:	f7ff fb46 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004258:	bf00      	nop
 800425a:	3748      	adds	r7, #72	@ 0x48
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	24000e98 	.word	0x24000e98
 8004264:	40014400 	.word	0x40014400

08004268 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b092      	sub	sp, #72	@ 0x48
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800426e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004282:	463b      	mov	r3, r7
 8004284:	222c      	movs	r2, #44	@ 0x2c
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f011 fcef 	bl	8015c6c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800428e:	4b2f      	ldr	r3, [pc, #188]	@ (800434c <MX_TIM17_Init+0xe4>)
 8004290:	4a2f      	ldr	r2, [pc, #188]	@ (8004350 <MX_TIM17_Init+0xe8>)
 8004292:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 239;
 8004294:	4b2d      	ldr	r3, [pc, #180]	@ (800434c <MX_TIM17_Init+0xe4>)
 8004296:	22ef      	movs	r2, #239	@ 0xef
 8004298:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800429a:	4b2c      	ldr	r3, [pc, #176]	@ (800434c <MX_TIM17_Init+0xe4>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 80042a0:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80042a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a8:	4b28      	ldr	r3, [pc, #160]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80042ae:	4b27      	ldr	r3, [pc, #156]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042b4:	4b25      	ldr	r3, [pc, #148]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042ba:	4824      	ldr	r0, [pc, #144]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042bc:	f009 fc13 	bl	800dae6 <HAL_TIM_Base_Init>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80042c6:	f7ff fb0d 	bl	80038e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80042ca:	4820      	ldr	r0, [pc, #128]	@ (800434c <MX_TIM17_Init+0xe4>)
 80042cc:	f009 fd09 	bl	800dce2 <HAL_TIM_OC_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80042d6:	f7ff fb05 	bl	80038e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042da:	2300      	movs	r3, #0
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042e6:	2300      	movs	r3, #0
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042fa:	2200      	movs	r2, #0
 80042fc:	4619      	mov	r1, r3
 80042fe:	4813      	ldr	r0, [pc, #76]	@ (800434c <MX_TIM17_Init+0xe4>)
 8004300:	f00a f8d6 	bl	800e4b0 <HAL_TIM_OC_ConfigChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800430a:	f7ff faeb 	bl	80038e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004330:	463b      	mov	r3, r7
 8004332:	4619      	mov	r1, r3
 8004334:	4805      	ldr	r0, [pc, #20]	@ (800434c <MX_TIM17_Init+0xe4>)
 8004336:	f00b f9d9 	bl	800f6ec <HAL_TIMEx_ConfigBreakDeadTime>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8004340:	f7ff fad0 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004344:	bf00      	nop
 8004346:	3748      	adds	r7, #72	@ 0x48
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	24000ee4 	.word	0x24000ee4
 8004350:	40014800 	.word	0x40014800

08004354 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0b      	ldr	r2, [pc, #44]	@ (8004390 <HAL_TIM_PWM_MspInit+0x3c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_TIM_PWM_MspInit+0x40>)
 8004368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436c:	4a09      	ldr	r2, [pc, #36]	@ (8004394 <HAL_TIM_PWM_MspInit+0x40>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_TIM_PWM_MspInit+0x40>)
 8004378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000
 8004394:	58024400 	.word	0x58024400

08004398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a57      	ldr	r2, [pc, #348]	@ (8004504 <HAL_TIM_Base_MspInit+0x16c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d16f      	bne.n	800448a <HAL_TIM_Base_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043aa:	4b57      	ldr	r3, [pc, #348]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80043ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043b0:	4a55      	ldr	r2, [pc, #340]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043ba:	4b53      	ldr	r3, [pc, #332]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80043bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 80043c8:	4b50      	ldr	r3, [pc, #320]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043ca:	4a51      	ldr	r2, [pc, #324]	@ (8004510 <HAL_TIM_Base_MspInit+0x178>)
 80043cc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80043ce:	4b4f      	ldr	r3, [pc, #316]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043d0:	2217      	movs	r2, #23
 80043d2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d4:	4b4d      	ldr	r3, [pc, #308]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043d6:	2240      	movs	r2, #64	@ 0x40
 80043d8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043da:	4b4c      	ldr	r3, [pc, #304]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043dc:	2200      	movs	r2, #0
 80043de:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80043e0:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043e6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043e8:	4b48      	ldr	r3, [pc, #288]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ee:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043f0:	4b46      	ldr	r3, [pc, #280]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043f6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80043f8:	4b44      	ldr	r3, [pc, #272]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80043fe:	4b43      	ldr	r3, [pc, #268]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 8004400:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004404:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004406:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 8004408:	2200      	movs	r2, #0
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800440c:	483f      	ldr	r0, [pc, #252]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 800440e:	f001 fac3 	bl	8005998 <HAL_DMA_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8004418:	f7ff fa64 	bl	80038e4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a3b      	ldr	r2, [pc, #236]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24
 8004422:	4a3a      	ldr	r2, [pc, #232]	@ (800450c <HAL_TIM_Base_MspInit+0x174>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream1;
 8004428:	4b3a      	ldr	r3, [pc, #232]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 800442a:	4a3b      	ldr	r2, [pc, #236]	@ (8004518 <HAL_TIM_Base_MspInit+0x180>)
 800442c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800442e:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004430:	2218      	movs	r2, #24
 8004432:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004434:	4b37      	ldr	r3, [pc, #220]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800443a:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 800443c:	2200      	movs	r2, #0
 800443e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004440:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004442:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004446:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004448:	4b32      	ldr	r3, [pc, #200]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 800444a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004450:	4b30      	ldr	r3, [pc, #192]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004456:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8004458:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004460:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004464:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004466:	4b2b      	ldr	r3, [pc, #172]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800446c:	4829      	ldr	r0, [pc, #164]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 800446e:	f001 fa93 	bl	8005998 <HAL_DMA_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_TIM_Base_MspInit+0xe4>
    {
      Error_Handler();
 8004478:	f7ff fa34 	bl	80038e4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004480:	629a      	str	r2, [r3, #40]	@ 0x28
 8004482:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <HAL_TIM_Base_MspInit+0x17c>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004488:	e038      	b.n	80044fc <HAL_TIM_Base_MspInit+0x164>
  else if(tim_baseHandle->Instance==TIM16)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_TIM_Base_MspInit+0x184>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d117      	bne.n	80044c4 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004494:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 8004496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 800449c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044a4:	4b18      	ldr	r3, [pc, #96]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80044a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2105      	movs	r1, #5
 80044b6:	2075      	movs	r0, #117	@ 0x75
 80044b8:	f001 fa46 	bl	8005948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80044bc:	2075      	movs	r0, #117	@ 0x75
 80044be:	f001 fa5d 	bl	800597c <HAL_NVIC_EnableIRQ>
}
 80044c2:	e01b      	b.n	80044fc <HAL_TIM_Base_MspInit+0x164>
  else if(tim_baseHandle->Instance==TIM17)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <HAL_TIM_Base_MspInit+0x188>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d116      	bne.n	80044fc <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80044ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80044d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80044d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044de:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <HAL_TIM_Base_MspInit+0x170>)
 80044e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 5, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2105      	movs	r1, #5
 80044f0:	2076      	movs	r0, #118	@ 0x76
 80044f2:	f001 fa29 	bl	8005948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80044f6:	2076      	movs	r0, #118	@ 0x76
 80044f8:	f001 fa40 	bl	800597c <HAL_NVIC_EnableIRQ>
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40000400 	.word	0x40000400
 8004508:	58024400 	.word	0x58024400
 800450c:	24000f30 	.word	0x24000f30
 8004510:	40020010 	.word	0x40020010
 8004514:	24000fa8 	.word	0x24000fa8
 8004518:	40020028 	.word	0x40020028
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	@ 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	@ (80045d8 <HAL_TIM_MspPostInit+0xb4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d120      	bne.n	8004588 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004546:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 8004548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800454c:	4a23      	ldr	r2, [pc, #140]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 800454e:	f043 0310 	orr.w	r3, r3, #16
 8004552:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004556:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 8004558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004572:	2300      	movs	r3, #0
 8004574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004576:	2301      	movs	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800457a:	f107 0314 	add.w	r3, r7, #20
 800457e:	4619      	mov	r1, r3
 8004580:	4817      	ldr	r0, [pc, #92]	@ (80045e0 <HAL_TIM_MspPostInit+0xbc>)
 8004582:	f004 f845 	bl	8008610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004586:	e023      	b.n	80045d0 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <HAL_TIM_MspPostInit+0xc0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d11e      	bne.n	80045d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004592:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 8004594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004598:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <HAL_TIM_MspPostInit+0xb8>)
 80045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DShotTX_MOTOR1_Pin|DShotTX_MOTOR2_Pin;
 80045b0:	23c0      	movs	r3, #192	@ 0xc0
 80045b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b4:	2302      	movs	r3, #2
 80045b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045b8:	2301      	movs	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045bc:	2303      	movs	r3, #3
 80045be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045c0:	2302      	movs	r3, #2
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	4619      	mov	r1, r3
 80045ca:	4807      	ldr	r0, [pc, #28]	@ (80045e8 <HAL_TIM_MspPostInit+0xc4>)
 80045cc:	f004 f820 	bl	8008610 <HAL_GPIO_Init>
}
 80045d0:	bf00      	nop
 80045d2:	3728      	adds	r7, #40	@ 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40010000 	.word	0x40010000
 80045dc:	58024400 	.word	0x58024400
 80045e0:	58021000 	.word	0x58021000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	58020000 	.word	0x58020000

080045ec <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80045f0:	4b22      	ldr	r3, [pc, #136]	@ (800467c <MX_UART5_Init+0x90>)
 80045f2:	4a23      	ldr	r2, [pc, #140]	@ (8004680 <MX_UART5_Init+0x94>)
 80045f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80045f6:	4b21      	ldr	r3, [pc, #132]	@ (800467c <MX_UART5_Init+0x90>)
 80045f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80045fe:	4b1f      	ldr	r3, [pc, #124]	@ (800467c <MX_UART5_Init+0x90>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <MX_UART5_Init+0x90>)
 8004606:	2200      	movs	r2, #0
 8004608:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800460a:	4b1c      	ldr	r3, [pc, #112]	@ (800467c <MX_UART5_Init+0x90>)
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <MX_UART5_Init+0x90>)
 8004612:	220c      	movs	r2, #12
 8004614:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004616:	4b19      	ldr	r3, [pc, #100]	@ (800467c <MX_UART5_Init+0x90>)
 8004618:	2200      	movs	r2, #0
 800461a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800461c:	4b17      	ldr	r3, [pc, #92]	@ (800467c <MX_UART5_Init+0x90>)
 800461e:	2200      	movs	r2, #0
 8004620:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004622:	4b16      	ldr	r3, [pc, #88]	@ (800467c <MX_UART5_Init+0x90>)
 8004624:	2200      	movs	r2, #0
 8004626:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <MX_UART5_Init+0x90>)
 800462a:	2200      	movs	r2, #0
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800462e:	4b13      	ldr	r3, [pc, #76]	@ (800467c <MX_UART5_Init+0x90>)
 8004630:	2200      	movs	r2, #0
 8004632:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004634:	4811      	ldr	r0, [pc, #68]	@ (800467c <MX_UART5_Init+0x90>)
 8004636:	f00b f91a 	bl	800f86e <HAL_UART_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8004640:	f7ff f950 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004644:	2100      	movs	r1, #0
 8004646:	480d      	ldr	r0, [pc, #52]	@ (800467c <MX_UART5_Init+0x90>)
 8004648:	f00d fbf9 	bl	8011e3e <HAL_UARTEx_SetTxFifoThreshold>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8004652:	f7ff f947 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004656:	2100      	movs	r1, #0
 8004658:	4808      	ldr	r0, [pc, #32]	@ (800467c <MX_UART5_Init+0x90>)
 800465a:	f00d fc2e 	bl	8011eba <HAL_UARTEx_SetRxFifoThreshold>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8004664:	f7ff f93e 	bl	80038e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004668:	4804      	ldr	r0, [pc, #16]	@ (800467c <MX_UART5_Init+0x90>)
 800466a:	f00d fbaf 	bl	8011dcc <HAL_UARTEx_DisableFifoMode>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8004674:	f7ff f936 	bl	80038e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	24001020 	.word	0x24001020
 8004680:	40005000 	.word	0x40005000

08004684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b0ba      	sub	sp, #232	@ 0xe8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	22c0      	movs	r2, #192	@ 0xc0
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f011 fae1 	bl	8015c6c <memset>
  if(uartHandle->Instance==UART5)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2b      	ldr	r2, [pc, #172]	@ (800475c <HAL_UART_MspInit+0xd8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d14e      	bne.n	8004752 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80046b4:	f04f 0202 	mov.w	r2, #2
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046c6:	f107 0310 	add.w	r3, r7, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 fea0 	bl	800a410 <HAL_RCCEx_PeriphCLKConfig>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80046d6:	f7ff f905 	bl	80038e4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80046da:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 80046dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 80046ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 80046fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004708:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_UART_MspInit+0xdc>)
 800470a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004716:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800471a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004730:	230e      	movs	r3, #14
 8004732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004736:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800473a:	4619      	mov	r1, r3
 800473c:	4809      	ldr	r0, [pc, #36]	@ (8004764 <HAL_UART_MspInit+0xe0>)
 800473e:	f003 ff67 	bl	8008610 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2105      	movs	r1, #5
 8004746:	2035      	movs	r0, #53	@ 0x35
 8004748:	f001 f8fe 	bl	8005948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800474c:	2035      	movs	r0, #53	@ 0x35
 800474e:	f001 f915 	bl	800597c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8004752:	bf00      	nop
 8004754:	37e8      	adds	r7, #232	@ 0xe8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40005000 	.word	0x40005000
 8004760:	58024400 	.word	0x58024400
 8004764:	58020400 	.word	0x58020400

08004768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004768:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80047a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800476c:	f7ff fbdc 	bl	8003f28 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004770:	f7ff fb3a 	bl	8003de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004774:	480c      	ldr	r0, [pc, #48]	@ (80047a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004776:	490d      	ldr	r1, [pc, #52]	@ (80047ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004778:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800477a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800477c:	e002      	b.n	8004784 <LoopCopyDataInit>

0800477e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800477e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004782:	3304      	adds	r3, #4

08004784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004788:	d3f9      	bcc.n	800477e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800478a:	4a0a      	ldr	r2, [pc, #40]	@ (80047b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800478c:	4c0a      	ldr	r4, [pc, #40]	@ (80047b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800478e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004790:	e001      	b.n	8004796 <LoopFillZerobss>

08004792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004794:	3204      	adds	r2, #4

08004796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004798:	d3fb      	bcc.n	8004792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800479a:	f011 fb1d 	bl	8015dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800479e:	f7fe ffd1 	bl	8003744 <main>
  bx  lr
 80047a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80047a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80047ac:	24000270 	.word	0x24000270
  ldr r2, =_sidata
 80047b0:	0801f014 	.word	0x0801f014
  ldr r2, =_sbss
 80047b4:	24000270 	.word	0x24000270
  ldr r4, =_ebss
 80047b8:	24005bec 	.word	0x24005bec

080047bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047bc:	e7fe      	b.n	80047bc <ADC3_IRQHandler>
	...

080047c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c6:	2003      	movs	r0, #3
 80047c8:	f001 f8b3 	bl	8005932 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047cc:	f005 fc08 	bl	8009fe0 <HAL_RCC_GetSysClockFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_Init+0x68>)
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	4913      	ldr	r1, [pc, #76]	@ (800482c <HAL_Init+0x6c>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <HAL_Init+0x68>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <HAL_Init+0x6c>)
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	4a0b      	ldr	r2, [pc, #44]	@ (8004830 <HAL_Init+0x70>)
 8004802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004804:	4a0b      	ldr	r2, [pc, #44]	@ (8004834 <HAL_Init+0x74>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800480a:	200f      	movs	r0, #15
 800480c:	f7ff f962 	bl	8003ad4 <HAL_InitTick>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e002      	b.n	8004820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800481a:	f7ff f929 	bl	8003a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	58024400 	.word	0x58024400
 800482c:	0801ec50 	.word	0x0801ec50
 8004830:	24000098 	.word	0x24000098
 8004834:	24000094 	.word	0x24000094

08004838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_IncTick+0x20>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_IncTick+0x24>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4413      	add	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	@ (800485c <HAL_IncTick+0x24>)
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	240000a0 	.word	0x240000a0
 800485c:	240010b4 	.word	0x240010b4

08004860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return uwTick;
 8004864:	4b03      	ldr	r3, [pc, #12]	@ (8004874 <HAL_GetTick+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	240010b4 	.word	0x240010b4

08004878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004880:	f7ff ffee 	bl	8004860 <HAL_GetTick>
 8004884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d005      	beq.n	800489e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <HAL_Delay+0x44>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800489e:	bf00      	nop
 80048a0:	f7ff ffde 	bl	8004860 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d8f7      	bhi.n	80048a0 <HAL_Delay+0x28>
  {
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	240000a0 	.word	0x240000a0

080048c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <HAL_GetREVID+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0c1b      	lsrs	r3, r3, #16
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	5c001000 	.word	0x5c001000

080048d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 0202 	bic.w	r2, r3, #2
 80048e8:	4904      	ldr	r1, [pc, #16]	@ (80048fc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	58003c00 	.word	0x58003c00

08004900 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a04      	ldr	r2, [pc, #16]	@ (800491c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	58003c00 	.word	0x58003c00

08004920 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	609a      	str	r2, [r3, #8]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	609a      	str	r2, [r3, #8]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <LL_ADC_SetChannelPreselection+0x24>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	0e9b      	lsrs	r3, r3, #26
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2201      	movs	r2, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	e015      	b.n	80049d8 <LL_ADC_SetChannelPreselection+0x50>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80049c2:	2320      	movs	r3, #32
 80049c4:	e003      	b.n	80049ce <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	69d2      	ldr	r2, [r2, #28]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3360      	adds	r3, #96	@ 0x60
 8004a00:	461a      	mov	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	611a      	str	r2, [r3, #16]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3360      	adds	r3, #96	@ 0x60
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	601a      	str	r2, [r3, #0]
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3330      	adds	r3, #48	@ 0x30
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	4413      	add	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	211f      	movs	r1, #31
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	401a      	ands	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	f003 011f 	and.w	r1, r3, #31
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	431a      	orrs	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3314      	adds	r3, #20
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	0e5b      	lsrs	r3, r3, #25
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	4413      	add	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0d1b      	lsrs	r3, r3, #20
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2107      	movs	r1, #7
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	0d1b      	lsrs	r3, r3, #20
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	431a      	orrs	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0318 	and.w	r3, r3, #24
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b68:	40d9      	lsrs	r1, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	000fffff 	.word	0x000fffff

08004b8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6093      	str	r3, [r2, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	5fffffc0 	.word	0x5fffffc0

08004bb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bc4:	d101      	bne.n	8004bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <LL_ADC_EnableInternalRegulator+0x24>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	6fffffc0 	.word	0x6fffffc0

08004c00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c14:	d101      	bne.n	8004c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <LL_ADC_IsEnabled+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_ADC_IsEnabled+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d101      	bne.n	8004c66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d101      	bne.n	8004c8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e18f      	b.n	8004fd6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fe fb39 	bl	800333c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff67 	bl	8004bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff4d 	bl	8004b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff82 	bl	8004c00 <LL_ADC_IsInternalRegulatorEnabled>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d114      	bne.n	8004d2c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff66 	bl	8004bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d0c:	4b87      	ldr	r3, [pc, #540]	@ (8004f2c <HAL_ADC_Init+0x290>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	4a87      	ldr	r2, [pc, #540]	@ (8004f30 <HAL_ADC_Init+0x294>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d1e:	e002      	b.n	8004d26 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff65 	bl	8004c00 <LL_ADC_IsInternalRegulatorEnabled>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d40:	f043 0210 	orr.w	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff76 	bl	8004c4e <LL_ADC_REG_IsConversionOngoing>
 8004d62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 8129 	bne.w	8004fc4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 8125 	bne.w	8004fc4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d82:	f043 0202 	orr.w	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff4a 	bl	8004c28 <LL_ADC_IsEnabled>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d136      	bne.n	8004e08 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a65      	ldr	r2, [pc, #404]	@ (8004f34 <HAL_ADC_Init+0x298>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_Init+0x112>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a63      	ldr	r2, [pc, #396]	@ (8004f38 <HAL_ADC_Init+0x29c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10e      	bne.n	8004dcc <HAL_ADC_Init+0x130>
 8004dae:	4861      	ldr	r0, [pc, #388]	@ (8004f34 <HAL_ADC_Init+0x298>)
 8004db0:	f7ff ff3a 	bl	8004c28 <LL_ADC_IsEnabled>
 8004db4:	4604      	mov	r4, r0
 8004db6:	4860      	ldr	r0, [pc, #384]	@ (8004f38 <HAL_ADC_Init+0x29c>)
 8004db8:	f7ff ff36 	bl	8004c28 <LL_ADC_IsEnabled>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4323      	orrs	r3, r4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_ADC_Init+0x142>
 8004dcc:	485b      	ldr	r0, [pc, #364]	@ (8004f3c <HAL_ADC_Init+0x2a0>)
 8004dce:	f7ff ff2b 	bl	8004c28 <LL_ADC_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d012      	beq.n	8004e08 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a53      	ldr	r2, [pc, #332]	@ (8004f34 <HAL_ADC_Init+0x298>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_ADC_Init+0x15a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a51      	ldr	r2, [pc, #324]	@ (8004f38 <HAL_ADC_Init+0x29c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_Init+0x15e>
 8004df6:	4a52      	ldr	r2, [pc, #328]	@ (8004f40 <HAL_ADC_Init+0x2a4>)
 8004df8:	e000      	b.n	8004dfc <HAL_ADC_Init+0x160>
 8004dfa:	4a52      	ldr	r2, [pc, #328]	@ (8004f44 <HAL_ADC_Init+0x2a8>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7ff fd8c 	bl	8004920 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004e08:	f7ff fd5a 	bl	80048c0 <HAL_GetREVID>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d914      	bls.n	8004e40 <HAL_ADC_Init+0x1a4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d110      	bne.n	8004e40 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7d5b      	ldrb	r3, [r3, #21]
 8004e22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7f1b      	ldrb	r3, [r3, #28]
 8004e34:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004e36:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e38:	f043 030c 	orr.w	r3, r3, #12
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e00d      	b.n	8004e5c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7d5b      	ldrb	r3, [r3, #21]
 8004e44:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e4a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e50:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7f1b      	ldrb	r3, [r3, #28]
 8004e56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7f1b      	ldrb	r3, [r3, #28]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	045b      	lsls	r3, r3, #17
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b2c      	ldr	r3, [pc, #176]	@ (8004f48 <HAL_ADC_Init+0x2ac>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fed1 	bl	8004c4e <LL_ADC_REG_IsConversionOngoing>
 8004eac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fede 	bl	8004c74 <LL_ADC_INJ_IsConversionOngoing>
 8004eb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d15f      	bne.n	8004f80 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d15c      	bne.n	8004f80 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7d1b      	ldrb	r3, [r3, #20]
 8004eca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	4b1c      	ldr	r3, [pc, #112]	@ (8004f4c <HAL_ADC_Init+0x2b0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d130      	bne.n	8004f54 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <HAL_ADC_Init+0x2b4>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0411      	lsls	r1, r2, #16
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f0e:	4311      	orrs	r1, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f14:	4311      	orrs	r1, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	611a      	str	r2, [r3, #16]
 8004f28:	e01c      	b.n	8004f64 <HAL_ADC_Init+0x2c8>
 8004f2a:	bf00      	nop
 8004f2c:	24000094 	.word	0x24000094
 8004f30:	053e2d63 	.word	0x053e2d63
 8004f34:	40022000 	.word	0x40022000
 8004f38:	40022100 	.word	0x40022100
 8004f3c:	58026000 	.word	0x58026000
 8004f40:	40022300 	.word	0x40022300
 8004f44:	58026300 	.word	0x58026300
 8004f48:	fff0c003 	.word	0xfff0c003
 8004f4c:	ffffbffc 	.word	0xffffbffc
 8004f50:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fb20 	bl	80055c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10c      	bne.n	8004fa2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	f023 010f 	bic.w	r1, r3, #15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	1e5a      	subs	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa0:	e007      	b.n	8004fb2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 020f 	bic.w	r2, r2, #15
 8004fb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8004fc2:	e007      	b.n	8004fd4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc8:	f043 0210 	orr.w	r2, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop

08004fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b08d      	sub	sp, #52	@ 0x34
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a65      	ldr	r2, [pc, #404]	@ (8005190 <HAL_ADC_ConfigChannel+0x1b0>)
 8004ffa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_ADC_ConfigChannel+0x2a>
 8005006:	2302      	movs	r3, #2
 8005008:	e2c7      	b.n	800559a <HAL_ADC_ConfigChannel+0x5ba>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fe19 	bl	8004c4e <LL_ADC_REG_IsConversionOngoing>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 82ac 	bne.w	800557c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	db2c      	blt.n	8005086 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <HAL_ADC_ConfigChannel+0x6a>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0e9b      	lsrs	r3, r3, #26
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2201      	movs	r2, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	e016      	b.n	8005078 <HAL_ADC_ConfigChannel+0x98>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	613b      	str	r3, [r7, #16]
  return result;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8005062:	2320      	movs	r3, #32
 8005064:	e003      	b.n	800506e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	69d1      	ldr	r1, [r2, #28]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	430b      	orrs	r3, r1
 8005084:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7ff fcff 	bl	8004a96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fdd6 	bl	8004c4e <LL_ADC_REG_IsConversionOngoing>
 80050a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fde3 	bl	8004c74 <LL_ADC_INJ_IsConversionOngoing>
 80050ae:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 80b8 	bne.w	8005228 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 80b4 	bne.w	8005228 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	461a      	mov	r2, r3
 80050ce:	f7ff fd0e 	bl	8004aee <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050d2:	4b30      	ldr	r3, [pc, #192]	@ (8005194 <HAL_ADC_ConfigChannel+0x1b4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80050da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050de:	d10b      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x118>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	e01d      	b.n	8005134 <HAL_ADC_ConfigChannel+0x154>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_ADC_ConfigChannel+0x13e>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	e00a      	b.n	8005134 <HAL_ADC_ConfigChannel+0x154>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695a      	ldr	r2, [r3, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d02c      	beq.n	8005198 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6919      	ldr	r1, [r3, #16]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	f7ff fc4f 	bl	80049ee <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6919      	ldr	r1, [r3, #16]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	7e5b      	ldrb	r3, [r3, #25]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x186>
 8005160:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005164:	e000      	b.n	8005168 <HAL_ADC_ConfigChannel+0x188>
 8005166:	2300      	movs	r3, #0
 8005168:	461a      	mov	r2, r3
 800516a:	f7ff fc79 	bl	8004a60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6919      	ldr	r1, [r3, #16]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	7e1b      	ldrb	r3, [r3, #24]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x1a4>
 800517e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005182:	e000      	b.n	8005186 <HAL_ADC_ConfigChannel+0x1a6>
 8005184:	2300      	movs	r3, #0
 8005186:	461a      	mov	r2, r3
 8005188:	f7ff fc51 	bl	8004a2e <LL_ADC_SetDataRightShift>
 800518c:	e04c      	b.n	8005228 <HAL_ADC_ConfigChannel+0x248>
 800518e:	bf00      	nop
 8005190:	47ff0000 	.word	0x47ff0000
 8005194:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	069b      	lsls	r3, r3, #26
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d107      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051ba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	069b      	lsls	r3, r3, #26
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d107      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80051de:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	069b      	lsls	r3, r3, #26
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d107      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005202:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800520a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	069b      	lsls	r3, r3, #26
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005226:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fcfb 	bl	8004c28 <LL_ADC_IsEnabled>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 81aa 	bne.w	800558e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f7ff fc7c 	bl	8004b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a87      	ldr	r2, [pc, #540]	@ (8005470 <HAL_ADC_ConfigChannel+0x490>)
 8005252:	4293      	cmp	r3, r2
 8005254:	f040 809a 	bne.w	800538c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4984      	ldr	r1, [pc, #528]	@ (8005474 <HAL_ADC_ConfigChannel+0x494>)
 8005262:	428b      	cmp	r3, r1
 8005264:	d147      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x316>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4983      	ldr	r1, [pc, #524]	@ (8005478 <HAL_ADC_ConfigChannel+0x498>)
 800526c:	428b      	cmp	r3, r1
 800526e:	d040      	beq.n	80052f2 <HAL_ADC_ConfigChannel+0x312>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4981      	ldr	r1, [pc, #516]	@ (800547c <HAL_ADC_ConfigChannel+0x49c>)
 8005276:	428b      	cmp	r3, r1
 8005278:	d039      	beq.n	80052ee <HAL_ADC_ConfigChannel+0x30e>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4980      	ldr	r1, [pc, #512]	@ (8005480 <HAL_ADC_ConfigChannel+0x4a0>)
 8005280:	428b      	cmp	r3, r1
 8005282:	d032      	beq.n	80052ea <HAL_ADC_ConfigChannel+0x30a>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	497e      	ldr	r1, [pc, #504]	@ (8005484 <HAL_ADC_ConfigChannel+0x4a4>)
 800528a:	428b      	cmp	r3, r1
 800528c:	d02b      	beq.n	80052e6 <HAL_ADC_ConfigChannel+0x306>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	497d      	ldr	r1, [pc, #500]	@ (8005488 <HAL_ADC_ConfigChannel+0x4a8>)
 8005294:	428b      	cmp	r3, r1
 8005296:	d024      	beq.n	80052e2 <HAL_ADC_ConfigChannel+0x302>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	497b      	ldr	r1, [pc, #492]	@ (800548c <HAL_ADC_ConfigChannel+0x4ac>)
 800529e:	428b      	cmp	r3, r1
 80052a0:	d01d      	beq.n	80052de <HAL_ADC_ConfigChannel+0x2fe>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	497a      	ldr	r1, [pc, #488]	@ (8005490 <HAL_ADC_ConfigChannel+0x4b0>)
 80052a8:	428b      	cmp	r3, r1
 80052aa:	d016      	beq.n	80052da <HAL_ADC_ConfigChannel+0x2fa>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4978      	ldr	r1, [pc, #480]	@ (8005494 <HAL_ADC_ConfigChannel+0x4b4>)
 80052b2:	428b      	cmp	r3, r1
 80052b4:	d00f      	beq.n	80052d6 <HAL_ADC_ConfigChannel+0x2f6>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4977      	ldr	r1, [pc, #476]	@ (8005498 <HAL_ADC_ConfigChannel+0x4b8>)
 80052bc:	428b      	cmp	r3, r1
 80052be:	d008      	beq.n	80052d2 <HAL_ADC_ConfigChannel+0x2f2>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4975      	ldr	r1, [pc, #468]	@ (800549c <HAL_ADC_ConfigChannel+0x4bc>)
 80052c6:	428b      	cmp	r3, r1
 80052c8:	d101      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x2ee>
 80052ca:	4b75      	ldr	r3, [pc, #468]	@ (80054a0 <HAL_ADC_ConfigChannel+0x4c0>)
 80052cc:	e05a      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	e058      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052d2:	4b74      	ldr	r3, [pc, #464]	@ (80054a4 <HAL_ADC_ConfigChannel+0x4c4>)
 80052d4:	e056      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052d6:	4b74      	ldr	r3, [pc, #464]	@ (80054a8 <HAL_ADC_ConfigChannel+0x4c8>)
 80052d8:	e054      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052da:	4b6e      	ldr	r3, [pc, #440]	@ (8005494 <HAL_ADC_ConfigChannel+0x4b4>)
 80052dc:	e052      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052de:	4b6c      	ldr	r3, [pc, #432]	@ (8005490 <HAL_ADC_ConfigChannel+0x4b0>)
 80052e0:	e050      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052e2:	4b72      	ldr	r3, [pc, #456]	@ (80054ac <HAL_ADC_ConfigChannel+0x4cc>)
 80052e4:	e04e      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052e6:	4b72      	ldr	r3, [pc, #456]	@ (80054b0 <HAL_ADC_ConfigChannel+0x4d0>)
 80052e8:	e04c      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052ea:	4b72      	ldr	r3, [pc, #456]	@ (80054b4 <HAL_ADC_ConfigChannel+0x4d4>)
 80052ec:	e04a      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052ee:	4b72      	ldr	r3, [pc, #456]	@ (80054b8 <HAL_ADC_ConfigChannel+0x4d8>)
 80052f0:	e048      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e046      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4970      	ldr	r1, [pc, #448]	@ (80054bc <HAL_ADC_ConfigChannel+0x4dc>)
 80052fc:	428b      	cmp	r3, r1
 80052fe:	d140      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x3a2>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	495c      	ldr	r1, [pc, #368]	@ (8005478 <HAL_ADC_ConfigChannel+0x498>)
 8005306:	428b      	cmp	r3, r1
 8005308:	d039      	beq.n	800537e <HAL_ADC_ConfigChannel+0x39e>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	495b      	ldr	r1, [pc, #364]	@ (800547c <HAL_ADC_ConfigChannel+0x49c>)
 8005310:	428b      	cmp	r3, r1
 8005312:	d032      	beq.n	800537a <HAL_ADC_ConfigChannel+0x39a>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4959      	ldr	r1, [pc, #356]	@ (8005480 <HAL_ADC_ConfigChannel+0x4a0>)
 800531a:	428b      	cmp	r3, r1
 800531c:	d02b      	beq.n	8005376 <HAL_ADC_ConfigChannel+0x396>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4958      	ldr	r1, [pc, #352]	@ (8005484 <HAL_ADC_ConfigChannel+0x4a4>)
 8005324:	428b      	cmp	r3, r1
 8005326:	d024      	beq.n	8005372 <HAL_ADC_ConfigChannel+0x392>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4956      	ldr	r1, [pc, #344]	@ (8005488 <HAL_ADC_ConfigChannel+0x4a8>)
 800532e:	428b      	cmp	r3, r1
 8005330:	d01d      	beq.n	800536e <HAL_ADC_ConfigChannel+0x38e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4955      	ldr	r1, [pc, #340]	@ (800548c <HAL_ADC_ConfigChannel+0x4ac>)
 8005338:	428b      	cmp	r3, r1
 800533a:	d016      	beq.n	800536a <HAL_ADC_ConfigChannel+0x38a>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4953      	ldr	r1, [pc, #332]	@ (8005490 <HAL_ADC_ConfigChannel+0x4b0>)
 8005342:	428b      	cmp	r3, r1
 8005344:	d00f      	beq.n	8005366 <HAL_ADC_ConfigChannel+0x386>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4952      	ldr	r1, [pc, #328]	@ (8005494 <HAL_ADC_ConfigChannel+0x4b4>)
 800534c:	428b      	cmp	r3, r1
 800534e:	d008      	beq.n	8005362 <HAL_ADC_ConfigChannel+0x382>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4951      	ldr	r1, [pc, #324]	@ (800549c <HAL_ADC_ConfigChannel+0x4bc>)
 8005356:	428b      	cmp	r3, r1
 8005358:	d101      	bne.n	800535e <HAL_ADC_ConfigChannel+0x37e>
 800535a:	4b51      	ldr	r3, [pc, #324]	@ (80054a0 <HAL_ADC_ConfigChannel+0x4c0>)
 800535c:	e012      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 800535e:	2300      	movs	r3, #0
 8005360:	e010      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 8005362:	4b51      	ldr	r3, [pc, #324]	@ (80054a8 <HAL_ADC_ConfigChannel+0x4c8>)
 8005364:	e00e      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 8005366:	4b4b      	ldr	r3, [pc, #300]	@ (8005494 <HAL_ADC_ConfigChannel+0x4b4>)
 8005368:	e00c      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 800536a:	4b49      	ldr	r3, [pc, #292]	@ (8005490 <HAL_ADC_ConfigChannel+0x4b0>)
 800536c:	e00a      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 800536e:	4b4f      	ldr	r3, [pc, #316]	@ (80054ac <HAL_ADC_ConfigChannel+0x4cc>)
 8005370:	e008      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 8005372:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <HAL_ADC_ConfigChannel+0x4d0>)
 8005374:	e006      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 8005376:	4b4f      	ldr	r3, [pc, #316]	@ (80054b4 <HAL_ADC_ConfigChannel+0x4d4>)
 8005378:	e004      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 800537a:	4b4f      	ldr	r3, [pc, #316]	@ (80054b8 <HAL_ADC_ConfigChannel+0x4d8>)
 800537c:	e002      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_ADC_ConfigChannel+0x3a4>
 8005382:	2300      	movs	r3, #0
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f7ff fafe 	bl	8004988 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f280 80fc 	bge.w	800558e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a36      	ldr	r2, [pc, #216]	@ (8005474 <HAL_ADC_ConfigChannel+0x494>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_ADC_ConfigChannel+0x3ca>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a45      	ldr	r2, [pc, #276]	@ (80054bc <HAL_ADC_ConfigChannel+0x4dc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x3ce>
 80053aa:	4b45      	ldr	r3, [pc, #276]	@ (80054c0 <HAL_ADC_ConfigChannel+0x4e0>)
 80053ac:	e000      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x3d0>
 80053ae:	4b45      	ldr	r3, [pc, #276]	@ (80054c4 <HAL_ADC_ConfigChannel+0x4e4>)
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fadb 	bl	800496c <LL_ADC_GetCommonPathInternalCh>
 80053b6:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005474 <HAL_ADC_ConfigChannel+0x494>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_ADC_ConfigChannel+0x3ec>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a3d      	ldr	r2, [pc, #244]	@ (80054bc <HAL_ADC_ConfigChannel+0x4dc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10e      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x40a>
 80053cc:	4829      	ldr	r0, [pc, #164]	@ (8005474 <HAL_ADC_ConfigChannel+0x494>)
 80053ce:	f7ff fc2b 	bl	8004c28 <LL_ADC_IsEnabled>
 80053d2:	4604      	mov	r4, r0
 80053d4:	4839      	ldr	r0, [pc, #228]	@ (80054bc <HAL_ADC_ConfigChannel+0x4dc>)
 80053d6:	f7ff fc27 	bl	8004c28 <LL_ADC_IsEnabled>
 80053da:	4603      	mov	r3, r0
 80053dc:	4323      	orrs	r3, r4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e008      	b.n	80053fc <HAL_ADC_ConfigChannel+0x41c>
 80053ea:	4837      	ldr	r0, [pc, #220]	@ (80054c8 <HAL_ADC_ConfigChannel+0x4e8>)
 80053ec:	f7ff fc1c 	bl	8004c28 <LL_ADC_IsEnabled>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80b3 	beq.w	8005568 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a31      	ldr	r2, [pc, #196]	@ (80054cc <HAL_ADC_ConfigChannel+0x4ec>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d165      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x4f8>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d160      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2b      	ldr	r2, [pc, #172]	@ (80054c8 <HAL_ADC_ConfigChannel+0x4e8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	f040 80b6 	bne.w	800558e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <HAL_ADC_ConfigChannel+0x494>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_ADC_ConfigChannel+0x456>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <HAL_ADC_ConfigChannel+0x4dc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_ADC_ConfigChannel+0x45a>
 8005436:	4a22      	ldr	r2, [pc, #136]	@ (80054c0 <HAL_ADC_ConfigChannel+0x4e0>)
 8005438:	e000      	b.n	800543c <HAL_ADC_ConfigChannel+0x45c>
 800543a:	4a22      	ldr	r2, [pc, #136]	@ (80054c4 <HAL_ADC_ConfigChannel+0x4e4>)
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7ff fa7e 	bl	8004946 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800544a:	4b21      	ldr	r3, [pc, #132]	@ (80054d0 <HAL_ADC_ConfigChannel+0x4f0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <HAL_ADC_ConfigChannel+0x4f4>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	3301      	adds	r3, #1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800545e:	e002      	b.n	8005466 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3b01      	subs	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f9      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800546c:	e08f      	b.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
 800546e:	bf00      	nop
 8005470:	47ff0000 	.word	0x47ff0000
 8005474:	40022000 	.word	0x40022000
 8005478:	04300002 	.word	0x04300002
 800547c:	08600004 	.word	0x08600004
 8005480:	0c900008 	.word	0x0c900008
 8005484:	10c00010 	.word	0x10c00010
 8005488:	14f00020 	.word	0x14f00020
 800548c:	2a000400 	.word	0x2a000400
 8005490:	2e300800 	.word	0x2e300800
 8005494:	32601000 	.word	0x32601000
 8005498:	43210000 	.word	0x43210000
 800549c:	4b840000 	.word	0x4b840000
 80054a0:	4fb80000 	.word	0x4fb80000
 80054a4:	47520000 	.word	0x47520000
 80054a8:	36902000 	.word	0x36902000
 80054ac:	25b00200 	.word	0x25b00200
 80054b0:	21800100 	.word	0x21800100
 80054b4:	1d500080 	.word	0x1d500080
 80054b8:	19200040 	.word	0x19200040
 80054bc:	40022100 	.word	0x40022100
 80054c0:	40022300 	.word	0x40022300
 80054c4:	58026300 	.word	0x58026300
 80054c8:	58026000 	.word	0x58026000
 80054cc:	cb840000 	.word	0xcb840000
 80054d0:	24000094 	.word	0x24000094
 80054d4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <HAL_ADC_ConfigChannel+0x5c4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d11e      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x540>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d119      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2d      	ldr	r2, [pc, #180]	@ (80055a8 <HAL_ADC_ConfigChannel+0x5c8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d14b      	bne.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <HAL_ADC_ConfigChannel+0x5cc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_ADC_ConfigChannel+0x52a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <HAL_ADC_ConfigChannel+0x5d0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_ADC_ConfigChannel+0x52e>
 800550a:	4a2a      	ldr	r2, [pc, #168]	@ (80055b4 <HAL_ADC_ConfigChannel+0x5d4>)
 800550c:	e000      	b.n	8005510 <HAL_ADC_ConfigChannel+0x530>
 800550e:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <HAL_ADC_ConfigChannel+0x5d8>)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7ff fa14 	bl	8004946 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800551e:	e036      	b.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <HAL_ADC_ConfigChannel+0x5dc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d131      	bne.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d12c      	bne.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1b      	ldr	r2, [pc, #108]	@ (80055a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d127      	bne.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1a      	ldr	r2, [pc, #104]	@ (80055ac <HAL_ADC_ConfigChannel+0x5cc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_ADC_ConfigChannel+0x572>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <HAL_ADC_ConfigChannel+0x5d0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x576>
 8005552:	4a18      	ldr	r2, [pc, #96]	@ (80055b4 <HAL_ADC_ConfigChannel+0x5d4>)
 8005554:	e000      	b.n	8005558 <HAL_ADC_ConfigChannel+0x578>
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <HAL_ADC_ConfigChannel+0x5d8>)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7ff f9f0 	bl	8004946 <LL_ADC_SetCommonPathInternalCh>
 8005566:	e012      	b.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800557a:	e008      	b.n	800558e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800559a:	4618      	mov	r0, r3
 800559c:	3734      	adds	r7, #52	@ 0x34
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	c7520000 	.word	0xc7520000
 80055a8:	58026000 	.word	0x58026000
 80055ac:	40022000 	.word	0x40022000
 80055b0:	40022100 	.word	0x40022100
 80055b4:	40022300 	.word	0x40022300
 80055b8:	58026300 	.word	0x58026300
 80055bc:	cfb80000 	.word	0xcfb80000

080055c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a7a      	ldr	r2, [pc, #488]	@ (80057b8 <ADC_ConfigureBoostMode+0x1f8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <ADC_ConfigureBoostMode+0x1c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a79      	ldr	r2, [pc, #484]	@ (80057bc <ADC_ConfigureBoostMode+0x1fc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d109      	bne.n	80055f0 <ADC_ConfigureBoostMode+0x30>
 80055dc:	4b78      	ldr	r3, [pc, #480]	@ (80057c0 <ADC_ConfigureBoostMode+0x200>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <ADC_ConfigureBoostMode+0x42>
 80055f0:	4b74      	ldr	r3, [pc, #464]	@ (80057c4 <ADC_ConfigureBoostMode+0x204>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01c      	beq.n	8005640 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005606:	f004 fe65 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800560a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005614:	d010      	beq.n	8005638 <ADC_ConfigureBoostMode+0x78>
 8005616:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800561a:	d873      	bhi.n	8005704 <ADC_ConfigureBoostMode+0x144>
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d002      	beq.n	8005628 <ADC_ConfigureBoostMode+0x68>
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005626:	d16d      	bne.n	8005704 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	60fb      	str	r3, [r7, #12]
        break;
 8005636:	e068      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	60fb      	str	r3, [r7, #12]
        break;
 800563e:	e064      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005640:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	f006 f8ec 	bl	800b824 <HAL_RCCEx_GetPeriphCLKFreq>
 800564c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005656:	d051      	beq.n	80056fc <ADC_ConfigureBoostMode+0x13c>
 8005658:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800565c:	d854      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 800565e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005662:	d047      	beq.n	80056f4 <ADC_ConfigureBoostMode+0x134>
 8005664:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005668:	d84e      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 800566a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800566e:	d03d      	beq.n	80056ec <ADC_ConfigureBoostMode+0x12c>
 8005670:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005674:	d848      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 8005676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800567a:	d033      	beq.n	80056e4 <ADC_ConfigureBoostMode+0x124>
 800567c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005680:	d842      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 8005682:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005686:	d029      	beq.n	80056dc <ADC_ConfigureBoostMode+0x11c>
 8005688:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800568c:	d83c      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 800568e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005692:	d01a      	beq.n	80056ca <ADC_ConfigureBoostMode+0x10a>
 8005694:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005698:	d836      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 800569a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800569e:	d014      	beq.n	80056ca <ADC_ConfigureBoostMode+0x10a>
 80056a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80056a4:	d830      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056aa:	d00e      	beq.n	80056ca <ADC_ConfigureBoostMode+0x10a>
 80056ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b0:	d82a      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 80056b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056b6:	d008      	beq.n	80056ca <ADC_ConfigureBoostMode+0x10a>
 80056b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056bc:	d824      	bhi.n	8005708 <ADC_ConfigureBoostMode+0x148>
 80056be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056c2:	d002      	beq.n	80056ca <ADC_ConfigureBoostMode+0x10a>
 80056c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056c8:	d11e      	bne.n	8005708 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	0c9b      	lsrs	r3, r3, #18
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	60fb      	str	r3, [r7, #12]
        break;
 80056da:	e016      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]
        break;
 80056e2:	e012      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	60fb      	str	r3, [r7, #12]
        break;
 80056ea:	e00e      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	60fb      	str	r3, [r7, #12]
        break;
 80056f2:	e00a      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]
        break;
 80056fa:	e006      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	60fb      	str	r3, [r7, #12]
        break;
 8005702:	e002      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005708:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800570a:	f7ff f8d9 	bl	80048c0 <HAL_GetREVID>
 800570e:	4603      	mov	r3, r0
 8005710:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005714:	4293      	cmp	r3, r2
 8005716:	d815      	bhi.n	8005744 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <ADC_ConfigureBoostMode+0x208>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d908      	bls.n	8005732 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800572e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005730:	e03e      	b.n	80057b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005740:	609a      	str	r2, [r3, #8]
}
 8005742:	e035      	b.n	80057b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <ADC_ConfigureBoostMode+0x20c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d808      	bhi.n	8005764 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005760:	609a      	str	r2, [r3, #8]
}
 8005762:	e025      	b.n	80057b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a1a      	ldr	r2, [pc, #104]	@ (80057d0 <ADC_ConfigureBoostMode+0x210>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d80a      	bhi.n	8005782 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	e016      	b.n	80057b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a13      	ldr	r2, [pc, #76]	@ (80057d4 <ADC_ConfigureBoostMode+0x214>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d80a      	bhi.n	80057a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579c:	609a      	str	r2, [r3, #8]
}
 800579e:	e007      	b.n	80057b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40022000 	.word	0x40022000
 80057bc:	40022100 	.word	0x40022100
 80057c0:	40022300 	.word	0x40022300
 80057c4:	58026300 	.word	0x58026300
 80057c8:	01312d00 	.word	0x01312d00
 80057cc:	005f5e10 	.word	0x005f5e10
 80057d0:	00bebc20 	.word	0x00bebc20
 80057d4:	017d7840 	.word	0x017d7840

080057d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <__NVIC_SetPriorityGrouping+0x40>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057f4:	4013      	ands	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005800:	4b06      	ldr	r3, [pc, #24]	@ (800581c <__NVIC_SetPriorityGrouping+0x44>)
 8005802:	4313      	orrs	r3, r2
 8005804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005806:	4a04      	ldr	r2, [pc, #16]	@ (8005818 <__NVIC_SetPriorityGrouping+0x40>)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	60d3      	str	r3, [r2, #12]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	e000ed00 	.word	0xe000ed00
 800581c:	05fa0000 	.word	0x05fa0000

08005820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005824:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <__NVIC_GetPriorityGrouping+0x18>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0307 	and.w	r3, r3, #7
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db0b      	blt.n	8005866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	f003 021f 	and.w	r2, r3, #31
 8005854:	4907      	ldr	r1, [pc, #28]	@ (8005874 <__NVIC_EnableIRQ+0x38>)
 8005856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2001      	movs	r0, #1
 800585e:	fa00 f202 	lsl.w	r2, r0, r2
 8005862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	e000e100 	.word	0xe000e100

08005878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	db0a      	blt.n	80058a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	490c      	ldr	r1, [pc, #48]	@ (80058c4 <__NVIC_SetPriority+0x4c>)
 8005892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005896:	0112      	lsls	r2, r2, #4
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	440b      	add	r3, r1
 800589c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a0:	e00a      	b.n	80058b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	4908      	ldr	r1, [pc, #32]	@ (80058c8 <__NVIC_SetPriority+0x50>)
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	3b04      	subs	r3, #4
 80058b0:	0112      	lsls	r2, r2, #4
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	440b      	add	r3, r1
 80058b6:	761a      	strb	r2, [r3, #24]
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	e000e100 	.word	0xe000e100
 80058c8:	e000ed00 	.word	0xe000ed00

080058cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b089      	sub	sp, #36	@ 0x24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f1c3 0307 	rsb	r3, r3, #7
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	bf28      	it	cs
 80058ea:	2304      	movcs	r3, #4
 80058ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d902      	bls.n	80058fc <NVIC_EncodePriority+0x30>
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3b03      	subs	r3, #3
 80058fa:	e000      	b.n	80058fe <NVIC_EncodePriority+0x32>
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	f04f 32ff 	mov.w	r2, #4294967295
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43da      	mvns	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	401a      	ands	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005914:	f04f 31ff 	mov.w	r1, #4294967295
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	43d9      	mvns	r1, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005924:	4313      	orrs	r3, r2
         );
}
 8005926:	4618      	mov	r0, r3
 8005928:	3724      	adds	r7, #36	@ 0x24
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ff4c 	bl	80057d8 <__NVIC_SetPriorityGrouping>
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005956:	f7ff ff63 	bl	8005820 <__NVIC_GetPriorityGrouping>
 800595a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	6978      	ldr	r0, [r7, #20]
 8005962:	f7ff ffb3 	bl	80058cc <NVIC_EncodePriority>
 8005966:	4602      	mov	r2, r0
 8005968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff ff82 	bl	8005878 <__NVIC_SetPriority>
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ff56 	bl	800583c <__NVIC_EnableIRQ>
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059a0:	f7fe ff5e 	bl	8004860 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e316      	b.n	8005fde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a66      	ldr	r2, [pc, #408]	@ (8005b50 <HAL_DMA_Init+0x1b8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a65      	ldr	r2, [pc, #404]	@ (8005b54 <HAL_DMA_Init+0x1bc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a63      	ldr	r2, [pc, #396]	@ (8005b58 <HAL_DMA_Init+0x1c0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a62      	ldr	r2, [pc, #392]	@ (8005b5c <HAL_DMA_Init+0x1c4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a60      	ldr	r2, [pc, #384]	@ (8005b60 <HAL_DMA_Init+0x1c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b64 <HAL_DMA_Init+0x1cc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b68 <HAL_DMA_Init+0x1d0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5c      	ldr	r2, [pc, #368]	@ (8005b6c <HAL_DMA_Init+0x1d4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5a      	ldr	r2, [pc, #360]	@ (8005b70 <HAL_DMA_Init+0x1d8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a59      	ldr	r2, [pc, #356]	@ (8005b74 <HAL_DMA_Init+0x1dc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a57      	ldr	r2, [pc, #348]	@ (8005b78 <HAL_DMA_Init+0x1e0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a56      	ldr	r2, [pc, #344]	@ (8005b7c <HAL_DMA_Init+0x1e4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a54      	ldr	r2, [pc, #336]	@ (8005b80 <HAL_DMA_Init+0x1e8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a53      	ldr	r2, [pc, #332]	@ (8005b84 <HAL_DMA_Init+0x1ec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a51      	ldr	r2, [pc, #324]	@ (8005b88 <HAL_DMA_Init+0x1f0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a50      	ldr	r2, [pc, #320]	@ (8005b8c <HAL_DMA_Init+0x1f4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Init+0xbc>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <HAL_DMA_Init+0xbe>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 813b 	beq.w	8005cd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <HAL_DMA_Init+0x1b8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d04a      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a36      	ldr	r2, [pc, #216]	@ (8005b54 <HAL_DMA_Init+0x1bc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d045      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <HAL_DMA_Init+0x1c0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d040      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a33      	ldr	r2, [pc, #204]	@ (8005b5c <HAL_DMA_Init+0x1c4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d03b      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a31      	ldr	r2, [pc, #196]	@ (8005b60 <HAL_DMA_Init+0x1c8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d036      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a30      	ldr	r2, [pc, #192]	@ (8005b64 <HAL_DMA_Init+0x1cc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d031      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <HAL_DMA_Init+0x1d0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d02c      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <HAL_DMA_Init+0x1d4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d027      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b70 <HAL_DMA_Init+0x1d8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	@ (8005b74 <HAL_DMA_Init+0x1dc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d01d      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a28      	ldr	r2, [pc, #160]	@ (8005b78 <HAL_DMA_Init+0x1e0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a27      	ldr	r2, [pc, #156]	@ (8005b7c <HAL_DMA_Init+0x1e4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a25      	ldr	r2, [pc, #148]	@ (8005b80 <HAL_DMA_Init+0x1e8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a24      	ldr	r2, [pc, #144]	@ (8005b84 <HAL_DMA_Init+0x1ec>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a22      	ldr	r2, [pc, #136]	@ (8005b88 <HAL_DMA_Init+0x1f0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a21      	ldr	r2, [pc, #132]	@ (8005b8c <HAL_DMA_Init+0x1f4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d108      	bne.n	8005b1e <HAL_DMA_Init+0x186>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e007      	b.n	8005b2e <HAL_DMA_Init+0x196>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b2e:	e02f      	b.n	8005b90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b30:	f7fe fe96 	bl	8004860 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d928      	bls.n	8005b90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2203      	movs	r2, #3
 8005b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e246      	b.n	8005fde <HAL_DMA_Init+0x646>
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1c8      	bne.n	8005b30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4b83      	ldr	r3, [pc, #524]	@ (8005db8 <HAL_DMA_Init+0x420>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d107      	bne.n	8005bf4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bec:	4313      	orrs	r3, r2
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005bf4:	4b71      	ldr	r3, [pc, #452]	@ (8005dbc <HAL_DMA_Init+0x424>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b71      	ldr	r3, [pc, #452]	@ (8005dc0 <HAL_DMA_Init+0x428>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c00:	d328      	bcc.n	8005c54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b28      	cmp	r3, #40	@ 0x28
 8005c08:	d903      	bls.n	8005c12 <HAL_DMA_Init+0x27a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c10:	d917      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c18:	d903      	bls.n	8005c22 <HAL_DMA_Init+0x28a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b42      	cmp	r3, #66	@ 0x42
 8005c20:	d90f      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b46      	cmp	r3, #70	@ 0x46
 8005c28:	d903      	bls.n	8005c32 <HAL_DMA_Init+0x29a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b48      	cmp	r3, #72	@ 0x48
 8005c30:	d907      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c38:	d905      	bls.n	8005c46 <HAL_DMA_Init+0x2ae>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b52      	cmp	r3, #82	@ 0x52
 8005c40:	d801      	bhi.n	8005c46 <HAL_DMA_Init+0x2ae>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_Init+0x2b0>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d117      	bne.n	8005cae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 fb33 	bl	80082fc <DMA_CheckFifoParam>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e197      	b.n	8005fde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f002 fa6e 	bl	8008198 <DMA_CalcBaseAndBitshift>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	223f      	movs	r2, #63	@ 0x3f
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	e0cd      	b.n	8005e6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc4 <HAL_DMA_Init+0x42c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a39      	ldr	r2, [pc, #228]	@ (8005dc8 <HAL_DMA_Init+0x430>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a38      	ldr	r2, [pc, #224]	@ (8005dcc <HAL_DMA_Init+0x434>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <HAL_DMA_Init+0x438>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <HAL_DMA_Init+0x43c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a33      	ldr	r2, [pc, #204]	@ (8005dd8 <HAL_DMA_Init+0x440>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a32      	ldr	r2, [pc, #200]	@ (8005ddc <HAL_DMA_Init+0x444>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <HAL_DMA_Init+0x448>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d101      	bne.n	8005d26 <HAL_DMA_Init+0x38e>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_DMA_Init+0x390>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8097 	beq.w	8005e5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a24      	ldr	r2, [pc, #144]	@ (8005dc4 <HAL_DMA_Init+0x42c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d021      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <HAL_DMA_Init+0x430>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01c      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_DMA_Init+0x434>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d017      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_DMA_Init+0x438>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d012      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd4 <HAL_DMA_Init+0x43c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00d      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <HAL_DMA_Init+0x440>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d008      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <HAL_DMA_Init+0x444>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_DMA_Init+0x448>)
 8005d7a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <HAL_DMA_Init+0x44c>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d021      	beq.n	8005de8 <HAL_DMA_Init+0x450>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b80      	cmp	r3, #128	@ 0x80
 8005daa:	d102      	bne.n	8005db2 <HAL_DMA_Init+0x41a>
 8005dac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005db0:	e01b      	b.n	8005dea <HAL_DMA_Init+0x452>
 8005db2:	2300      	movs	r3, #0
 8005db4:	e019      	b.n	8005dea <HAL_DMA_Init+0x452>
 8005db6:	bf00      	nop
 8005db8:	fe10803f 	.word	0xfe10803f
 8005dbc:	5c001000 	.word	0x5c001000
 8005dc0:	ffff0000 	.word	0xffff0000
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	fffe000f 	.word	0xfffe000f
 8005de8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68d2      	ldr	r2, [r2, #12]
 8005dee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8005fe8 <HAL_DMA_Init+0x650>)
 8005e30:	4413      	add	r3, r2
 8005e32:	4a6e      	ldr	r2, [pc, #440]	@ (8005fec <HAL_DMA_Init+0x654>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f002 f9a9 	bl	8008198 <DMA_CalcBaseAndBitshift>
 8005e46:	4603      	mov	r3, r0
 8005e48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2201      	movs	r2, #1
 8005e54:	409a      	lsls	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	e008      	b.n	8005e6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2240      	movs	r2, #64	@ 0x40
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2203      	movs	r2, #3
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0b7      	b.n	8005fde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5f      	ldr	r2, [pc, #380]	@ (8005ff0 <HAL_DMA_Init+0x658>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d072      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ff4 <HAL_DMA_Init+0x65c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d06d      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5c      	ldr	r2, [pc, #368]	@ (8005ff8 <HAL_DMA_Init+0x660>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d068      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5a      	ldr	r2, [pc, #360]	@ (8005ffc <HAL_DMA_Init+0x664>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d063      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a59      	ldr	r2, [pc, #356]	@ (8006000 <HAL_DMA_Init+0x668>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d05e      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a57      	ldr	r2, [pc, #348]	@ (8006004 <HAL_DMA_Init+0x66c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d059      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a56      	ldr	r2, [pc, #344]	@ (8006008 <HAL_DMA_Init+0x670>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d054      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a54      	ldr	r2, [pc, #336]	@ (800600c <HAL_DMA_Init+0x674>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04f      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a53      	ldr	r2, [pc, #332]	@ (8006010 <HAL_DMA_Init+0x678>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d04a      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a51      	ldr	r2, [pc, #324]	@ (8006014 <HAL_DMA_Init+0x67c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d045      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a50      	ldr	r2, [pc, #320]	@ (8006018 <HAL_DMA_Init+0x680>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d040      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800601c <HAL_DMA_Init+0x684>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d03b      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4d      	ldr	r2, [pc, #308]	@ (8006020 <HAL_DMA_Init+0x688>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d036      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	@ (8006024 <HAL_DMA_Init+0x68c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d031      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4a      	ldr	r2, [pc, #296]	@ (8006028 <HAL_DMA_Init+0x690>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d02c      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a48      	ldr	r2, [pc, #288]	@ (800602c <HAL_DMA_Init+0x694>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d027      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a47      	ldr	r2, [pc, #284]	@ (8006030 <HAL_DMA_Init+0x698>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d022      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a45      	ldr	r2, [pc, #276]	@ (8006034 <HAL_DMA_Init+0x69c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01d      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a44      	ldr	r2, [pc, #272]	@ (8006038 <HAL_DMA_Init+0x6a0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a42      	ldr	r2, [pc, #264]	@ (800603c <HAL_DMA_Init+0x6a4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a41      	ldr	r2, [pc, #260]	@ (8006040 <HAL_DMA_Init+0x6a8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3f      	ldr	r2, [pc, #252]	@ (8006044 <HAL_DMA_Init+0x6ac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8006048 <HAL_DMA_Init+0x6b0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3c      	ldr	r2, [pc, #240]	@ (800604c <HAL_DMA_Init+0x6b4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_Init+0x5ca>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_DMA_Init+0x5cc>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d032      	beq.n	8005fce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f002 fa43 	bl	80083f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b80      	cmp	r3, #128	@ 0x80
 8005f74:	d102      	bne.n	8005f7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_DMA_Init+0x624>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d80c      	bhi.n	8005fbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 fac0 	bl	8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	e008      	b.n	8005fce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	a7fdabf8 	.word	0xa7fdabf8
 8005fec:	cccccccd 	.word	0xcccccccd
 8005ff0:	40020010 	.word	0x40020010
 8005ff4:	40020028 	.word	0x40020028
 8005ff8:	40020040 	.word	0x40020040
 8005ffc:	40020058 	.word	0x40020058
 8006000:	40020070 	.word	0x40020070
 8006004:	40020088 	.word	0x40020088
 8006008:	400200a0 	.word	0x400200a0
 800600c:	400200b8 	.word	0x400200b8
 8006010:	40020410 	.word	0x40020410
 8006014:	40020428 	.word	0x40020428
 8006018:	40020440 	.word	0x40020440
 800601c:	40020458 	.word	0x40020458
 8006020:	40020470 	.word	0x40020470
 8006024:	40020488 	.word	0x40020488
 8006028:	400204a0 	.word	0x400204a0
 800602c:	400204b8 	.word	0x400204b8
 8006030:	58025408 	.word	0x58025408
 8006034:	5802541c 	.word	0x5802541c
 8006038:	58025430 	.word	0x58025430
 800603c:	58025444 	.word	0x58025444
 8006040:	58025458 	.word	0x58025458
 8006044:	5802546c 	.word	0x5802546c
 8006048:	58025480 	.word	0x58025480
 800604c:	58025494 	.word	0x58025494

08006050 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e226      	b.n	80064ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_DMA_Start_IT+0x2a>
 8006076:	2302      	movs	r3, #2
 8006078:	e21f      	b.n	80064ba <HAL_DMA_Start_IT+0x46a>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	f040 820a 	bne.w	80064a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a68      	ldr	r2, [pc, #416]	@ (8006244 <HAL_DMA_Start_IT+0x1f4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04a      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a66      	ldr	r2, [pc, #408]	@ (8006248 <HAL_DMA_Start_IT+0x1f8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d045      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a65      	ldr	r2, [pc, #404]	@ (800624c <HAL_DMA_Start_IT+0x1fc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d040      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a63      	ldr	r2, [pc, #396]	@ (8006250 <HAL_DMA_Start_IT+0x200>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a62      	ldr	r2, [pc, #392]	@ (8006254 <HAL_DMA_Start_IT+0x204>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d036      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a60      	ldr	r2, [pc, #384]	@ (8006258 <HAL_DMA_Start_IT+0x208>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5f      	ldr	r2, [pc, #380]	@ (800625c <HAL_DMA_Start_IT+0x20c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02c      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006260 <HAL_DMA_Start_IT+0x210>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006264 <HAL_DMA_Start_IT+0x214>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006268 <HAL_DMA_Start_IT+0x218>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a59      	ldr	r2, [pc, #356]	@ (800626c <HAL_DMA_Start_IT+0x21c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a57      	ldr	r2, [pc, #348]	@ (8006270 <HAL_DMA_Start_IT+0x220>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a56      	ldr	r2, [pc, #344]	@ (8006274 <HAL_DMA_Start_IT+0x224>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a54      	ldr	r2, [pc, #336]	@ (8006278 <HAL_DMA_Start_IT+0x228>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a53      	ldr	r2, [pc, #332]	@ (800627c <HAL_DMA_Start_IT+0x22c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_DMA_Start_IT+0xee>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a51      	ldr	r2, [pc, #324]	@ (8006280 <HAL_DMA_Start_IT+0x230>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <HAL_DMA_Start_IT+0x100>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e007      	b.n	8006160 <HAL_DMA_Start_IT+0x110>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 fe6a 	bl	8007e40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a34      	ldr	r2, [pc, #208]	@ (8006244 <HAL_DMA_Start_IT+0x1f4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04a      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a33      	ldr	r2, [pc, #204]	@ (8006248 <HAL_DMA_Start_IT+0x1f8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d045      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a31      	ldr	r2, [pc, #196]	@ (800624c <HAL_DMA_Start_IT+0x1fc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d040      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a30      	ldr	r2, [pc, #192]	@ (8006250 <HAL_DMA_Start_IT+0x200>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d03b      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2e      	ldr	r2, [pc, #184]	@ (8006254 <HAL_DMA_Start_IT+0x204>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d036      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006258 <HAL_DMA_Start_IT+0x208>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d031      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	@ (800625c <HAL_DMA_Start_IT+0x20c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d02c      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006260 <HAL_DMA_Start_IT+0x210>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d027      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a28      	ldr	r2, [pc, #160]	@ (8006264 <HAL_DMA_Start_IT+0x214>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d022      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a27      	ldr	r2, [pc, #156]	@ (8006268 <HAL_DMA_Start_IT+0x218>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d01d      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a25      	ldr	r2, [pc, #148]	@ (800626c <HAL_DMA_Start_IT+0x21c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a24      	ldr	r2, [pc, #144]	@ (8006270 <HAL_DMA_Start_IT+0x220>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a22      	ldr	r2, [pc, #136]	@ (8006274 <HAL_DMA_Start_IT+0x224>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <HAL_DMA_Start_IT+0x228>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1f      	ldr	r2, [pc, #124]	@ (800627c <HAL_DMA_Start_IT+0x22c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_DMA_Start_IT+0x1bc>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <HAL_DMA_Start_IT+0x230>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_DMA_Start_IT+0x1c0>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_DMA_Start_IT+0x1c2>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d036      	beq.n	8006284 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f023 021e 	bic.w	r2, r3, #30
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0216 	orr.w	r2, r2, #22
 8006228:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d03e      	beq.n	80062b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0208 	orr.w	r2, r2, #8
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e035      	b.n	80062b0 <HAL_DMA_Start_IT+0x260>
 8006244:	40020010 	.word	0x40020010
 8006248:	40020028 	.word	0x40020028
 800624c:	40020040 	.word	0x40020040
 8006250:	40020058 	.word	0x40020058
 8006254:	40020070 	.word	0x40020070
 8006258:	40020088 	.word	0x40020088
 800625c:	400200a0 	.word	0x400200a0
 8006260:	400200b8 	.word	0x400200b8
 8006264:	40020410 	.word	0x40020410
 8006268:	40020428 	.word	0x40020428
 800626c:	40020440 	.word	0x40020440
 8006270:	40020458 	.word	0x40020458
 8006274:	40020470 	.word	0x40020470
 8006278:	40020488 	.word	0x40020488
 800627c:	400204a0 	.word	0x400204a0
 8006280:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 020e 	bic.w	r2, r3, #14
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 020a 	orr.w	r2, r2, #10
 8006296:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0204 	orr.w	r2, r2, #4
 80062ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a83      	ldr	r2, [pc, #524]	@ (80064c4 <HAL_DMA_Start_IT+0x474>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d072      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a82      	ldr	r2, [pc, #520]	@ (80064c8 <HAL_DMA_Start_IT+0x478>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d06d      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a80      	ldr	r2, [pc, #512]	@ (80064cc <HAL_DMA_Start_IT+0x47c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d068      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a7f      	ldr	r2, [pc, #508]	@ (80064d0 <HAL_DMA_Start_IT+0x480>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d063      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a7d      	ldr	r2, [pc, #500]	@ (80064d4 <HAL_DMA_Start_IT+0x484>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d05e      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a7c      	ldr	r2, [pc, #496]	@ (80064d8 <HAL_DMA_Start_IT+0x488>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d059      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a7a      	ldr	r2, [pc, #488]	@ (80064dc <HAL_DMA_Start_IT+0x48c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d054      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a79      	ldr	r2, [pc, #484]	@ (80064e0 <HAL_DMA_Start_IT+0x490>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04f      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a77      	ldr	r2, [pc, #476]	@ (80064e4 <HAL_DMA_Start_IT+0x494>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d04a      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a76      	ldr	r2, [pc, #472]	@ (80064e8 <HAL_DMA_Start_IT+0x498>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d045      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a74      	ldr	r2, [pc, #464]	@ (80064ec <HAL_DMA_Start_IT+0x49c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d040      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a73      	ldr	r2, [pc, #460]	@ (80064f0 <HAL_DMA_Start_IT+0x4a0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d03b      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a71      	ldr	r2, [pc, #452]	@ (80064f4 <HAL_DMA_Start_IT+0x4a4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d036      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a70      	ldr	r2, [pc, #448]	@ (80064f8 <HAL_DMA_Start_IT+0x4a8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d031      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	@ (80064fc <HAL_DMA_Start_IT+0x4ac>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d02c      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a6d      	ldr	r2, [pc, #436]	@ (8006500 <HAL_DMA_Start_IT+0x4b0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d027      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6b      	ldr	r2, [pc, #428]	@ (8006504 <HAL_DMA_Start_IT+0x4b4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a6a      	ldr	r2, [pc, #424]	@ (8006508 <HAL_DMA_Start_IT+0x4b8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d01d      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a68      	ldr	r2, [pc, #416]	@ (800650c <HAL_DMA_Start_IT+0x4bc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a67      	ldr	r2, [pc, #412]	@ (8006510 <HAL_DMA_Start_IT+0x4c0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a65      	ldr	r2, [pc, #404]	@ (8006514 <HAL_DMA_Start_IT+0x4c4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00e      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a64      	ldr	r2, [pc, #400]	@ (8006518 <HAL_DMA_Start_IT+0x4c8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a62      	ldr	r2, [pc, #392]	@ (800651c <HAL_DMA_Start_IT+0x4cc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_DMA_Start_IT+0x350>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a61      	ldr	r2, [pc, #388]	@ (8006520 <HAL_DMA_Start_IT+0x4d0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d101      	bne.n	80063a4 <HAL_DMA_Start_IT+0x354>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <HAL_DMA_Start_IT+0x356>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01a      	beq.n	80063e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a37      	ldr	r2, [pc, #220]	@ (80064c4 <HAL_DMA_Start_IT+0x474>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d04a      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a36      	ldr	r2, [pc, #216]	@ (80064c8 <HAL_DMA_Start_IT+0x478>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d045      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a34      	ldr	r2, [pc, #208]	@ (80064cc <HAL_DMA_Start_IT+0x47c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d040      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a33      	ldr	r2, [pc, #204]	@ (80064d0 <HAL_DMA_Start_IT+0x480>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d03b      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a31      	ldr	r2, [pc, #196]	@ (80064d4 <HAL_DMA_Start_IT+0x484>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d036      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a30      	ldr	r2, [pc, #192]	@ (80064d8 <HAL_DMA_Start_IT+0x488>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d031      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2e      	ldr	r2, [pc, #184]	@ (80064dc <HAL_DMA_Start_IT+0x48c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d02c      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2d      	ldr	r2, [pc, #180]	@ (80064e0 <HAL_DMA_Start_IT+0x490>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d027      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2b      	ldr	r2, [pc, #172]	@ (80064e4 <HAL_DMA_Start_IT+0x494>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d022      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2a      	ldr	r2, [pc, #168]	@ (80064e8 <HAL_DMA_Start_IT+0x498>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d01d      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a28      	ldr	r2, [pc, #160]	@ (80064ec <HAL_DMA_Start_IT+0x49c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d018      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a27      	ldr	r2, [pc, #156]	@ (80064f0 <HAL_DMA_Start_IT+0x4a0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a25      	ldr	r2, [pc, #148]	@ (80064f4 <HAL_DMA_Start_IT+0x4a4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00e      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a24      	ldr	r2, [pc, #144]	@ (80064f8 <HAL_DMA_Start_IT+0x4a8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a22      	ldr	r2, [pc, #136]	@ (80064fc <HAL_DMA_Start_IT+0x4ac>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_DMA_Start_IT+0x430>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a21      	ldr	r2, [pc, #132]	@ (8006500 <HAL_DMA_Start_IT+0x4b0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <HAL_DMA_Start_IT+0x442>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e012      	b.n	80064b8 <HAL_DMA_Start_IT+0x468>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e009      	b.n	80064b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
 8006504:	58025408 	.word	0x58025408
 8006508:	5802541c 	.word	0x5802541c
 800650c:	58025430 	.word	0x58025430
 8006510:	58025444 	.word	0x58025444
 8006514:	58025458 	.word	0x58025458
 8006518:	5802546c 	.word	0x5802546c
 800651c:	58025480 	.word	0x58025480
 8006520:	58025494 	.word	0x58025494

08006524 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800652c:	f7fe f998 	bl	8004860 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e2dc      	b.n	8006af6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d008      	beq.n	800655a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2280      	movs	r2, #128	@ 0x80
 800654c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e2cd      	b.n	8006af6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a76      	ldr	r2, [pc, #472]	@ (8006738 <HAL_DMA_Abort+0x214>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d04a      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a74      	ldr	r2, [pc, #464]	@ (800673c <HAL_DMA_Abort+0x218>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d045      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a73      	ldr	r2, [pc, #460]	@ (8006740 <HAL_DMA_Abort+0x21c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d040      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a71      	ldr	r2, [pc, #452]	@ (8006744 <HAL_DMA_Abort+0x220>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d03b      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a70      	ldr	r2, [pc, #448]	@ (8006748 <HAL_DMA_Abort+0x224>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d036      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a6e      	ldr	r2, [pc, #440]	@ (800674c <HAL_DMA_Abort+0x228>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d031      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6d      	ldr	r2, [pc, #436]	@ (8006750 <HAL_DMA_Abort+0x22c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d02c      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006754 <HAL_DMA_Abort+0x230>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d027      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6a      	ldr	r2, [pc, #424]	@ (8006758 <HAL_DMA_Abort+0x234>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a68      	ldr	r2, [pc, #416]	@ (800675c <HAL_DMA_Abort+0x238>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01d      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a67      	ldr	r2, [pc, #412]	@ (8006760 <HAL_DMA_Abort+0x23c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a65      	ldr	r2, [pc, #404]	@ (8006764 <HAL_DMA_Abort+0x240>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a64      	ldr	r2, [pc, #400]	@ (8006768 <HAL_DMA_Abort+0x244>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a62      	ldr	r2, [pc, #392]	@ (800676c <HAL_DMA_Abort+0x248>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a61      	ldr	r2, [pc, #388]	@ (8006770 <HAL_DMA_Abort+0x24c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_DMA_Abort+0xd6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a5f      	ldr	r2, [pc, #380]	@ (8006774 <HAL_DMA_Abort+0x250>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_DMA_Abort+0xda>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_DMA_Abort+0xdc>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d013      	beq.n	800662c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 021e 	bic.w	r2, r2, #30
 8006612:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006622:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e00a      	b.n	8006642 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 020e 	bic.w	r2, r2, #14
 800663a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <HAL_DMA_Abort+0x214>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d072      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a3a      	ldr	r2, [pc, #232]	@ (800673c <HAL_DMA_Abort+0x218>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d06d      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a39      	ldr	r2, [pc, #228]	@ (8006740 <HAL_DMA_Abort+0x21c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d068      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a37      	ldr	r2, [pc, #220]	@ (8006744 <HAL_DMA_Abort+0x220>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d063      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a36      	ldr	r2, [pc, #216]	@ (8006748 <HAL_DMA_Abort+0x224>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d05e      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a34      	ldr	r2, [pc, #208]	@ (800674c <HAL_DMA_Abort+0x228>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d059      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a33      	ldr	r2, [pc, #204]	@ (8006750 <HAL_DMA_Abort+0x22c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d054      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a31      	ldr	r2, [pc, #196]	@ (8006754 <HAL_DMA_Abort+0x230>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04f      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a30      	ldr	r2, [pc, #192]	@ (8006758 <HAL_DMA_Abort+0x234>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04a      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2e      	ldr	r2, [pc, #184]	@ (800675c <HAL_DMA_Abort+0x238>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d045      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006760 <HAL_DMA_Abort+0x23c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d040      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006764 <HAL_DMA_Abort+0x240>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2a      	ldr	r2, [pc, #168]	@ (8006768 <HAL_DMA_Abort+0x244>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a28      	ldr	r2, [pc, #160]	@ (800676c <HAL_DMA_Abort+0x248>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a27      	ldr	r2, [pc, #156]	@ (8006770 <HAL_DMA_Abort+0x24c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02c      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a25      	ldr	r2, [pc, #148]	@ (8006774 <HAL_DMA_Abort+0x250>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <HAL_DMA_Abort+0x254>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a22      	ldr	r2, [pc, #136]	@ (800677c <HAL_DMA_Abort+0x258>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a21      	ldr	r2, [pc, #132]	@ (8006780 <HAL_DMA_Abort+0x25c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1f      	ldr	r2, [pc, #124]	@ (8006784 <HAL_DMA_Abort+0x260>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1e      	ldr	r2, [pc, #120]	@ (8006788 <HAL_DMA_Abort+0x264>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1c      	ldr	r2, [pc, #112]	@ (800678c <HAL_DMA_Abort+0x268>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1b      	ldr	r2, [pc, #108]	@ (8006790 <HAL_DMA_Abort+0x26c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_Abort+0x20e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a19      	ldr	r2, [pc, #100]	@ (8006794 <HAL_DMA_Abort+0x270>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d132      	bne.n	8006798 <HAL_DMA_Abort+0x274>
 8006732:	2301      	movs	r3, #1
 8006734:	e031      	b.n	800679a <HAL_DMA_Abort+0x276>
 8006736:	bf00      	nop
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
 8006778:	58025408 	.word	0x58025408
 800677c:	5802541c 	.word	0x5802541c
 8006780:	58025430 	.word	0x58025430
 8006784:	58025444 	.word	0x58025444
 8006788:	58025458 	.word	0x58025458
 800678c:	5802546c 	.word	0x5802546c
 8006790:	58025480 	.word	0x58025480
 8006794:	58025494 	.word	0x58025494
 8006798:	2300      	movs	r3, #0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a6d      	ldr	r2, [pc, #436]	@ (8006968 <HAL_DMA_Abort+0x444>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d04a      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6b      	ldr	r2, [pc, #428]	@ (800696c <HAL_DMA_Abort+0x448>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d045      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a6a      	ldr	r2, [pc, #424]	@ (8006970 <HAL_DMA_Abort+0x44c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d040      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a68      	ldr	r2, [pc, #416]	@ (8006974 <HAL_DMA_Abort+0x450>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d03b      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a67      	ldr	r2, [pc, #412]	@ (8006978 <HAL_DMA_Abort+0x454>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d036      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a65      	ldr	r2, [pc, #404]	@ (800697c <HAL_DMA_Abort+0x458>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d031      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a64      	ldr	r2, [pc, #400]	@ (8006980 <HAL_DMA_Abort+0x45c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d02c      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a62      	ldr	r2, [pc, #392]	@ (8006984 <HAL_DMA_Abort+0x460>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d027      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a61      	ldr	r2, [pc, #388]	@ (8006988 <HAL_DMA_Abort+0x464>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d022      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5f      	ldr	r2, [pc, #380]	@ (800698c <HAL_DMA_Abort+0x468>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01d      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a5e      	ldr	r2, [pc, #376]	@ (8006990 <HAL_DMA_Abort+0x46c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d018      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a5c      	ldr	r2, [pc, #368]	@ (8006994 <HAL_DMA_Abort+0x470>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a5b      	ldr	r2, [pc, #364]	@ (8006998 <HAL_DMA_Abort+0x474>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a59      	ldr	r2, [pc, #356]	@ (800699c <HAL_DMA_Abort+0x478>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a58      	ldr	r2, [pc, #352]	@ (80069a0 <HAL_DMA_Abort+0x47c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_DMA_Abort+0x32a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a56      	ldr	r2, [pc, #344]	@ (80069a4 <HAL_DMA_Abort+0x480>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d108      	bne.n	8006860 <HAL_DMA_Abort+0x33c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0201 	bic.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e007      	b.n	8006870 <HAL_DMA_Abort+0x34c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006870:	e013      	b.n	800689a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006872:	f7fd fff5 	bl	8004860 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b05      	cmp	r3, #5
 800687e:	d90c      	bls.n	800689a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2203      	movs	r2, #3
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e12d      	b.n	8006af6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006968 <HAL_DMA_Abort+0x444>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d04a      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2d      	ldr	r2, [pc, #180]	@ (800696c <HAL_DMA_Abort+0x448>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d045      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2c      	ldr	r2, [pc, #176]	@ (8006970 <HAL_DMA_Abort+0x44c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d040      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006974 <HAL_DMA_Abort+0x450>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d03b      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a29      	ldr	r2, [pc, #164]	@ (8006978 <HAL_DMA_Abort+0x454>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d036      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a27      	ldr	r2, [pc, #156]	@ (800697c <HAL_DMA_Abort+0x458>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_DMA_Abort+0x45c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d02c      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a24      	ldr	r2, [pc, #144]	@ (8006984 <HAL_DMA_Abort+0x460>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d027      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a23      	ldr	r2, [pc, #140]	@ (8006988 <HAL_DMA_Abort+0x464>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a21      	ldr	r2, [pc, #132]	@ (800698c <HAL_DMA_Abort+0x468>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <HAL_DMA_Abort+0x46c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1e      	ldr	r2, [pc, #120]	@ (8006994 <HAL_DMA_Abort+0x470>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <HAL_DMA_Abort+0x474>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <HAL_DMA_Abort+0x478>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1a      	ldr	r2, [pc, #104]	@ (80069a0 <HAL_DMA_Abort+0x47c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_DMA_Abort+0x422>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <HAL_DMA_Abort+0x480>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_DMA_Abort+0x426>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <HAL_DMA_Abort+0x428>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02b      	beq.n	80069a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	223f      	movs	r2, #63	@ 0x3f
 8006960:	409a      	lsls	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	609a      	str	r2, [r3, #8]
 8006966:	e02a      	b.n	80069be <HAL_DMA_Abort+0x49a>
 8006968:	40020010 	.word	0x40020010
 800696c:	40020028 	.word	0x40020028
 8006970:	40020040 	.word	0x40020040
 8006974:	40020058 	.word	0x40020058
 8006978:	40020070 	.word	0x40020070
 800697c:	40020088 	.word	0x40020088
 8006980:	400200a0 	.word	0x400200a0
 8006984:	400200b8 	.word	0x400200b8
 8006988:	40020410 	.word	0x40020410
 800698c:	40020428 	.word	0x40020428
 8006990:	40020440 	.word	0x40020440
 8006994:	40020458 	.word	0x40020458
 8006998:	40020470 	.word	0x40020470
 800699c:	40020488 	.word	0x40020488
 80069a0:	400204a0 	.word	0x400204a0
 80069a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2201      	movs	r2, #1
 80069b8:	409a      	lsls	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4f      	ldr	r2, [pc, #316]	@ (8006b00 <HAL_DMA_Abort+0x5dc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d072      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a4d      	ldr	r2, [pc, #308]	@ (8006b04 <HAL_DMA_Abort+0x5e0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d06d      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006b08 <HAL_DMA_Abort+0x5e4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d068      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a4a      	ldr	r2, [pc, #296]	@ (8006b0c <HAL_DMA_Abort+0x5e8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d063      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a49      	ldr	r2, [pc, #292]	@ (8006b10 <HAL_DMA_Abort+0x5ec>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d05e      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a47      	ldr	r2, [pc, #284]	@ (8006b14 <HAL_DMA_Abort+0x5f0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d059      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a46      	ldr	r2, [pc, #280]	@ (8006b18 <HAL_DMA_Abort+0x5f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d054      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a44      	ldr	r2, [pc, #272]	@ (8006b1c <HAL_DMA_Abort+0x5f8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d04f      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a43      	ldr	r2, [pc, #268]	@ (8006b20 <HAL_DMA_Abort+0x5fc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d04a      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a41      	ldr	r2, [pc, #260]	@ (8006b24 <HAL_DMA_Abort+0x600>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d045      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a40      	ldr	r2, [pc, #256]	@ (8006b28 <HAL_DMA_Abort+0x604>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d040      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a3e      	ldr	r2, [pc, #248]	@ (8006b2c <HAL_DMA_Abort+0x608>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d03b      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b30 <HAL_DMA_Abort+0x60c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d036      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a3b      	ldr	r2, [pc, #236]	@ (8006b34 <HAL_DMA_Abort+0x610>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d031      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8006b38 <HAL_DMA_Abort+0x614>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d02c      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a38      	ldr	r2, [pc, #224]	@ (8006b3c <HAL_DMA_Abort+0x618>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a37      	ldr	r2, [pc, #220]	@ (8006b40 <HAL_DMA_Abort+0x61c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a35      	ldr	r2, [pc, #212]	@ (8006b44 <HAL_DMA_Abort+0x620>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a34      	ldr	r2, [pc, #208]	@ (8006b48 <HAL_DMA_Abort+0x624>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a32      	ldr	r2, [pc, #200]	@ (8006b4c <HAL_DMA_Abort+0x628>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a31      	ldr	r2, [pc, #196]	@ (8006b50 <HAL_DMA_Abort+0x62c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2f      	ldr	r2, [pc, #188]	@ (8006b54 <HAL_DMA_Abort+0x630>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b58 <HAL_DMA_Abort+0x634>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_DMA_Abort+0x58a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8006b5c <HAL_DMA_Abort+0x638>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d101      	bne.n	8006ab2 <HAL_DMA_Abort+0x58e>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <HAL_DMA_Abort+0x590>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d015      	beq.n	8006ae4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ac0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ae2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40020010 	.word	0x40020010
 8006b04:	40020028 	.word	0x40020028
 8006b08:	40020040 	.word	0x40020040
 8006b0c:	40020058 	.word	0x40020058
 8006b10:	40020070 	.word	0x40020070
 8006b14:	40020088 	.word	0x40020088
 8006b18:	400200a0 	.word	0x400200a0
 8006b1c:	400200b8 	.word	0x400200b8
 8006b20:	40020410 	.word	0x40020410
 8006b24:	40020428 	.word	0x40020428
 8006b28:	40020440 	.word	0x40020440
 8006b2c:	40020458 	.word	0x40020458
 8006b30:	40020470 	.word	0x40020470
 8006b34:	40020488 	.word	0x40020488
 8006b38:	400204a0 	.word	0x400204a0
 8006b3c:	400204b8 	.word	0x400204b8
 8006b40:	58025408 	.word	0x58025408
 8006b44:	5802541c 	.word	0x5802541c
 8006b48:	58025430 	.word	0x58025430
 8006b4c:	58025444 	.word	0x58025444
 8006b50:	58025458 	.word	0x58025458
 8006b54:	5802546c 	.word	0x5802546c
 8006b58:	58025480 	.word	0x58025480
 8006b5c:	58025494 	.word	0x58025494

08006b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e237      	b.n	8006fe2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d004      	beq.n	8006b88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2280      	movs	r2, #128	@ 0x80
 8006b82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e22c      	b.n	8006fe2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8006d00 <HAL_DMA_Abort_IT+0x1a0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d04a      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5b      	ldr	r2, [pc, #364]	@ (8006d04 <HAL_DMA_Abort_IT+0x1a4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d045      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a59      	ldr	r2, [pc, #356]	@ (8006d08 <HAL_DMA_Abort_IT+0x1a8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d040      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a58      	ldr	r2, [pc, #352]	@ (8006d0c <HAL_DMA_Abort_IT+0x1ac>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d03b      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a56      	ldr	r2, [pc, #344]	@ (8006d10 <HAL_DMA_Abort_IT+0x1b0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d036      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a55      	ldr	r2, [pc, #340]	@ (8006d14 <HAL_DMA_Abort_IT+0x1b4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d031      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a53      	ldr	r2, [pc, #332]	@ (8006d18 <HAL_DMA_Abort_IT+0x1b8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d02c      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a52      	ldr	r2, [pc, #328]	@ (8006d1c <HAL_DMA_Abort_IT+0x1bc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d027      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a50      	ldr	r2, [pc, #320]	@ (8006d20 <HAL_DMA_Abort_IT+0x1c0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d022      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a4f      	ldr	r2, [pc, #316]	@ (8006d24 <HAL_DMA_Abort_IT+0x1c4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d01d      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8006d28 <HAL_DMA_Abort_IT+0x1c8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d018      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8006d2c <HAL_DMA_Abort_IT+0x1cc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d013      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a4a      	ldr	r2, [pc, #296]	@ (8006d30 <HAL_DMA_Abort_IT+0x1d0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00e      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a49      	ldr	r2, [pc, #292]	@ (8006d34 <HAL_DMA_Abort_IT+0x1d4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d009      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a47      	ldr	r2, [pc, #284]	@ (8006d38 <HAL_DMA_Abort_IT+0x1d8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d004      	beq.n	8006c28 <HAL_DMA_Abort_IT+0xc8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a46      	ldr	r2, [pc, #280]	@ (8006d3c <HAL_DMA_Abort_IT+0x1dc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d101      	bne.n	8006c2c <HAL_DMA_Abort_IT+0xcc>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <HAL_DMA_Abort_IT+0xce>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8086 	beq.w	8006d40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2204      	movs	r2, #4
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2f      	ldr	r2, [pc, #188]	@ (8006d00 <HAL_DMA_Abort_IT+0x1a0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d04a      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d04 <HAL_DMA_Abort_IT+0x1a4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d045      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2c      	ldr	r2, [pc, #176]	@ (8006d08 <HAL_DMA_Abort_IT+0x1a8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d040      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2b      	ldr	r2, [pc, #172]	@ (8006d0c <HAL_DMA_Abort_IT+0x1ac>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d03b      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a29      	ldr	r2, [pc, #164]	@ (8006d10 <HAL_DMA_Abort_IT+0x1b0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d036      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a28      	ldr	r2, [pc, #160]	@ (8006d14 <HAL_DMA_Abort_IT+0x1b4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d031      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a26      	ldr	r2, [pc, #152]	@ (8006d18 <HAL_DMA_Abort_IT+0x1b8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d02c      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a25      	ldr	r2, [pc, #148]	@ (8006d1c <HAL_DMA_Abort_IT+0x1bc>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d027      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a23      	ldr	r2, [pc, #140]	@ (8006d20 <HAL_DMA_Abort_IT+0x1c0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d022      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a22      	ldr	r2, [pc, #136]	@ (8006d24 <HAL_DMA_Abort_IT+0x1c4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d01d      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a20      	ldr	r2, [pc, #128]	@ (8006d28 <HAL_DMA_Abort_IT+0x1c8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d018      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1f      	ldr	r2, [pc, #124]	@ (8006d2c <HAL_DMA_Abort_IT+0x1cc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d013      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <HAL_DMA_Abort_IT+0x1d0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00e      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d34 <HAL_DMA_Abort_IT+0x1d4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d38 <HAL_DMA_Abort_IT+0x1d8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_DMA_Abort_IT+0x17c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a19      	ldr	r2, [pc, #100]	@ (8006d3c <HAL_DMA_Abort_IT+0x1dc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <HAL_DMA_Abort_IT+0x18e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e178      	b.n	8006fe0 <HAL_DMA_Abort_IT+0x480>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e16f      	b.n	8006fe0 <HAL_DMA_Abort_IT+0x480>
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 020e 	bic.w	r2, r2, #14
 8006d4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a6c      	ldr	r2, [pc, #432]	@ (8006f08 <HAL_DMA_Abort_IT+0x3a8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d04a      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8006f0c <HAL_DMA_Abort_IT+0x3ac>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d045      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a69      	ldr	r2, [pc, #420]	@ (8006f10 <HAL_DMA_Abort_IT+0x3b0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d040      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a68      	ldr	r2, [pc, #416]	@ (8006f14 <HAL_DMA_Abort_IT+0x3b4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d03b      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a66      	ldr	r2, [pc, #408]	@ (8006f18 <HAL_DMA_Abort_IT+0x3b8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d036      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a65      	ldr	r2, [pc, #404]	@ (8006f1c <HAL_DMA_Abort_IT+0x3bc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d031      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a63      	ldr	r2, [pc, #396]	@ (8006f20 <HAL_DMA_Abort_IT+0x3c0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d02c      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a62      	ldr	r2, [pc, #392]	@ (8006f24 <HAL_DMA_Abort_IT+0x3c4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d027      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a60      	ldr	r2, [pc, #384]	@ (8006f28 <HAL_DMA_Abort_IT+0x3c8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a5f      	ldr	r2, [pc, #380]	@ (8006f2c <HAL_DMA_Abort_IT+0x3cc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d01d      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a5d      	ldr	r2, [pc, #372]	@ (8006f30 <HAL_DMA_Abort_IT+0x3d0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a5c      	ldr	r2, [pc, #368]	@ (8006f34 <HAL_DMA_Abort_IT+0x3d4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8006f38 <HAL_DMA_Abort_IT+0x3d8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a59      	ldr	r2, [pc, #356]	@ (8006f3c <HAL_DMA_Abort_IT+0x3dc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a57      	ldr	r2, [pc, #348]	@ (8006f40 <HAL_DMA_Abort_IT+0x3e0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_DMA_Abort_IT+0x290>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a56      	ldr	r2, [pc, #344]	@ (8006f44 <HAL_DMA_Abort_IT+0x3e4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <HAL_DMA_Abort_IT+0x2a2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e007      	b.n	8006e12 <HAL_DMA_Abort_IT+0x2b2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a3c      	ldr	r2, [pc, #240]	@ (8006f08 <HAL_DMA_Abort_IT+0x3a8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d072      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a3a      	ldr	r2, [pc, #232]	@ (8006f0c <HAL_DMA_Abort_IT+0x3ac>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d06d      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a39      	ldr	r2, [pc, #228]	@ (8006f10 <HAL_DMA_Abort_IT+0x3b0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d068      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a37      	ldr	r2, [pc, #220]	@ (8006f14 <HAL_DMA_Abort_IT+0x3b4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d063      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a36      	ldr	r2, [pc, #216]	@ (8006f18 <HAL_DMA_Abort_IT+0x3b8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d05e      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a34      	ldr	r2, [pc, #208]	@ (8006f1c <HAL_DMA_Abort_IT+0x3bc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d059      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a33      	ldr	r2, [pc, #204]	@ (8006f20 <HAL_DMA_Abort_IT+0x3c0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d054      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a31      	ldr	r2, [pc, #196]	@ (8006f24 <HAL_DMA_Abort_IT+0x3c4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d04f      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a30      	ldr	r2, [pc, #192]	@ (8006f28 <HAL_DMA_Abort_IT+0x3c8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d04a      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2e      	ldr	r2, [pc, #184]	@ (8006f2c <HAL_DMA_Abort_IT+0x3cc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d045      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8006f30 <HAL_DMA_Abort_IT+0x3d0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d040      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2b      	ldr	r2, [pc, #172]	@ (8006f34 <HAL_DMA_Abort_IT+0x3d4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d03b      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f38 <HAL_DMA_Abort_IT+0x3d8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d036      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a28      	ldr	r2, [pc, #160]	@ (8006f3c <HAL_DMA_Abort_IT+0x3dc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d031      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a27      	ldr	r2, [pc, #156]	@ (8006f40 <HAL_DMA_Abort_IT+0x3e0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d02c      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a25      	ldr	r2, [pc, #148]	@ (8006f44 <HAL_DMA_Abort_IT+0x3e4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d027      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a24      	ldr	r2, [pc, #144]	@ (8006f48 <HAL_DMA_Abort_IT+0x3e8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a22      	ldr	r2, [pc, #136]	@ (8006f4c <HAL_DMA_Abort_IT+0x3ec>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d01d      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a21      	ldr	r2, [pc, #132]	@ (8006f50 <HAL_DMA_Abort_IT+0x3f0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8006f54 <HAL_DMA_Abort_IT+0x3f4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <HAL_DMA_Abort_IT+0x3f8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f5c <HAL_DMA_Abort_IT+0x3fc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8006f60 <HAL_DMA_Abort_IT+0x400>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_DMA_Abort_IT+0x3a2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <HAL_DMA_Abort_IT+0x404>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d132      	bne.n	8006f68 <HAL_DMA_Abort_IT+0x408>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e031      	b.n	8006f6a <HAL_DMA_Abort_IT+0x40a>
 8006f06:	bf00      	nop
 8006f08:	40020010 	.word	0x40020010
 8006f0c:	40020028 	.word	0x40020028
 8006f10:	40020040 	.word	0x40020040
 8006f14:	40020058 	.word	0x40020058
 8006f18:	40020070 	.word	0x40020070
 8006f1c:	40020088 	.word	0x40020088
 8006f20:	400200a0 	.word	0x400200a0
 8006f24:	400200b8 	.word	0x400200b8
 8006f28:	40020410 	.word	0x40020410
 8006f2c:	40020428 	.word	0x40020428
 8006f30:	40020440 	.word	0x40020440
 8006f34:	40020458 	.word	0x40020458
 8006f38:	40020470 	.word	0x40020470
 8006f3c:	40020488 	.word	0x40020488
 8006f40:	400204a0 	.word	0x400204a0
 8006f44:	400204b8 	.word	0x400204b8
 8006f48:	58025408 	.word	0x58025408
 8006f4c:	5802541c 	.word	0x5802541c
 8006f50:	58025430 	.word	0x58025430
 8006f54:	58025444 	.word	0x58025444
 8006f58:	58025458 	.word	0x58025458
 8006f5c:	5802546c 	.word	0x5802546c
 8006f60:	58025480 	.word	0x58025480
 8006f64:	58025494 	.word	0x58025494
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d028      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006f9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006fbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	@ 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ff8:	4b67      	ldr	r3, [pc, #412]	@ (8007198 <HAL_DMA_IRQHandler+0x1ac>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a67      	ldr	r2, [pc, #412]	@ (800719c <HAL_DMA_IRQHandler+0x1b0>)
 8006ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8007002:	0a9b      	lsrs	r3, r3, #10
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007010:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5f      	ldr	r2, [pc, #380]	@ (80071a0 <HAL_DMA_IRQHandler+0x1b4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d04a      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5d      	ldr	r2, [pc, #372]	@ (80071a4 <HAL_DMA_IRQHandler+0x1b8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d045      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a5c      	ldr	r2, [pc, #368]	@ (80071a8 <HAL_DMA_IRQHandler+0x1bc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d040      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a5a      	ldr	r2, [pc, #360]	@ (80071ac <HAL_DMA_IRQHandler+0x1c0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d03b      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a59      	ldr	r2, [pc, #356]	@ (80071b0 <HAL_DMA_IRQHandler+0x1c4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d036      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a57      	ldr	r2, [pc, #348]	@ (80071b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d031      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a56      	ldr	r2, [pc, #344]	@ (80071b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d02c      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a54      	ldr	r2, [pc, #336]	@ (80071bc <HAL_DMA_IRQHandler+0x1d0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d027      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a53      	ldr	r2, [pc, #332]	@ (80071c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d022      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a51      	ldr	r2, [pc, #324]	@ (80071c4 <HAL_DMA_IRQHandler+0x1d8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01d      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a50      	ldr	r2, [pc, #320]	@ (80071c8 <HAL_DMA_IRQHandler+0x1dc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d018      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a4e      	ldr	r2, [pc, #312]	@ (80071cc <HAL_DMA_IRQHandler+0x1e0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a4d      	ldr	r2, [pc, #308]	@ (80071d0 <HAL_DMA_IRQHandler+0x1e4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00e      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a4b      	ldr	r2, [pc, #300]	@ (80071d4 <HAL_DMA_IRQHandler+0x1e8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d009      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4a      	ldr	r2, [pc, #296]	@ (80071d8 <HAL_DMA_IRQHandler+0x1ec>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d004      	beq.n	80070be <HAL_DMA_IRQHandler+0xd2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a48      	ldr	r2, [pc, #288]	@ (80071dc <HAL_DMA_IRQHandler+0x1f0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d101      	bne.n	80070c2 <HAL_DMA_IRQHandler+0xd6>
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <HAL_DMA_IRQHandler+0xd8>
 80070c2:	2300      	movs	r3, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 842b 	beq.w	8007920 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	2208      	movs	r2, #8
 80070d4:	409a      	lsls	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80a2 	beq.w	8007224 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2e      	ldr	r2, [pc, #184]	@ (80071a0 <HAL_DMA_IRQHandler+0x1b4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d04a      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	@ (80071a4 <HAL_DMA_IRQHandler+0x1b8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d045      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2b      	ldr	r2, [pc, #172]	@ (80071a8 <HAL_DMA_IRQHandler+0x1bc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d040      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2a      	ldr	r2, [pc, #168]	@ (80071ac <HAL_DMA_IRQHandler+0x1c0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d03b      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a28      	ldr	r2, [pc, #160]	@ (80071b0 <HAL_DMA_IRQHandler+0x1c4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d036      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a27      	ldr	r2, [pc, #156]	@ (80071b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d031      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a25      	ldr	r2, [pc, #148]	@ (80071b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02c      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a24      	ldr	r2, [pc, #144]	@ (80071bc <HAL_DMA_IRQHandler+0x1d0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d027      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a22      	ldr	r2, [pc, #136]	@ (80071c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d022      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	@ (80071c4 <HAL_DMA_IRQHandler+0x1d8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d01d      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	@ (80071c8 <HAL_DMA_IRQHandler+0x1dc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d018      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	@ (80071cc <HAL_DMA_IRQHandler+0x1e0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <HAL_DMA_IRQHandler+0x1e4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00e      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <HAL_DMA_IRQHandler+0x1e8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d009      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <HAL_DMA_IRQHandler+0x1ec>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <HAL_DMA_IRQHandler+0x194>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_DMA_IRQHandler+0x1f0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d12f      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x1f4>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf14      	ite	ne
 800718e:	2301      	movne	r3, #1
 8007190:	2300      	moveq	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e02e      	b.n	80071f4 <HAL_DMA_IRQHandler+0x208>
 8007196:	bf00      	nop
 8007198:	24000094 	.word	0x24000094
 800719c:	1b4e81b5 	.word	0x1b4e81b5
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40020028 	.word	0x40020028
 80071a8:	40020040 	.word	0x40020040
 80071ac:	40020058 	.word	0x40020058
 80071b0:	40020070 	.word	0x40020070
 80071b4:	40020088 	.word	0x40020088
 80071b8:	400200a0 	.word	0x400200a0
 80071bc:	400200b8 	.word	0x400200b8
 80071c0:	40020410 	.word	0x40020410
 80071c4:	40020428 	.word	0x40020428
 80071c8:	40020440 	.word	0x40020440
 80071cc:	40020458 	.word	0x40020458
 80071d0:	40020470 	.word	0x40020470
 80071d4:	40020488 	.word	0x40020488
 80071d8:	400204a0 	.word	0x400204a0
 80071dc:	400204b8 	.word	0x400204b8
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d015      	beq.n	8007224 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0204 	bic.w	r2, r2, #4
 8007206:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800720c:	f003 031f 	and.w	r3, r3, #31
 8007210:	2208      	movs	r2, #8
 8007212:	409a      	lsls	r2, r3
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d06e      	beq.n	8007318 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a69      	ldr	r2, [pc, #420]	@ (80073e4 <HAL_DMA_IRQHandler+0x3f8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d04a      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a67      	ldr	r2, [pc, #412]	@ (80073e8 <HAL_DMA_IRQHandler+0x3fc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d045      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a66      	ldr	r2, [pc, #408]	@ (80073ec <HAL_DMA_IRQHandler+0x400>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d040      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a64      	ldr	r2, [pc, #400]	@ (80073f0 <HAL_DMA_IRQHandler+0x404>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d03b      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a63      	ldr	r2, [pc, #396]	@ (80073f4 <HAL_DMA_IRQHandler+0x408>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d036      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a61      	ldr	r2, [pc, #388]	@ (80073f8 <HAL_DMA_IRQHandler+0x40c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d031      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a60      	ldr	r2, [pc, #384]	@ (80073fc <HAL_DMA_IRQHandler+0x410>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d02c      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5e      	ldr	r2, [pc, #376]	@ (8007400 <HAL_DMA_IRQHandler+0x414>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d027      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a5d      	ldr	r2, [pc, #372]	@ (8007404 <HAL_DMA_IRQHandler+0x418>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d022      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a5b      	ldr	r2, [pc, #364]	@ (8007408 <HAL_DMA_IRQHandler+0x41c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d01d      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5a      	ldr	r2, [pc, #360]	@ (800740c <HAL_DMA_IRQHandler+0x420>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d018      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a58      	ldr	r2, [pc, #352]	@ (8007410 <HAL_DMA_IRQHandler+0x424>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a57      	ldr	r2, [pc, #348]	@ (8007414 <HAL_DMA_IRQHandler+0x428>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a55      	ldr	r2, [pc, #340]	@ (8007418 <HAL_DMA_IRQHandler+0x42c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d009      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a54      	ldr	r2, [pc, #336]	@ (800741c <HAL_DMA_IRQHandler+0x430>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_DMA_IRQHandler+0x2ee>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a52      	ldr	r2, [pc, #328]	@ (8007420 <HAL_DMA_IRQHandler+0x434>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10a      	bne.n	80072f0 <HAL_DMA_IRQHandler+0x304>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf14      	ite	ne
 80072e8:	2301      	movne	r3, #1
 80072ea:	2300      	moveq	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	e003      	b.n	80072f8 <HAL_DMA_IRQHandler+0x30c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2201      	movs	r2, #1
 8007306:	409a      	lsls	r2, r3
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007310:	f043 0202 	orr.w	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2204      	movs	r2, #4
 8007322:	409a      	lsls	r2, r3
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 808f 	beq.w	800744c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a2c      	ldr	r2, [pc, #176]	@ (80073e4 <HAL_DMA_IRQHandler+0x3f8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d04a      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2a      	ldr	r2, [pc, #168]	@ (80073e8 <HAL_DMA_IRQHandler+0x3fc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d045      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a29      	ldr	r2, [pc, #164]	@ (80073ec <HAL_DMA_IRQHandler+0x400>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d040      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a27      	ldr	r2, [pc, #156]	@ (80073f0 <HAL_DMA_IRQHandler+0x404>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d03b      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a26      	ldr	r2, [pc, #152]	@ (80073f4 <HAL_DMA_IRQHandler+0x408>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d036      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a24      	ldr	r2, [pc, #144]	@ (80073f8 <HAL_DMA_IRQHandler+0x40c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d031      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a23      	ldr	r2, [pc, #140]	@ (80073fc <HAL_DMA_IRQHandler+0x410>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d02c      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a21      	ldr	r2, [pc, #132]	@ (8007400 <HAL_DMA_IRQHandler+0x414>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d027      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a20      	ldr	r2, [pc, #128]	@ (8007404 <HAL_DMA_IRQHandler+0x418>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d022      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1e      	ldr	r2, [pc, #120]	@ (8007408 <HAL_DMA_IRQHandler+0x41c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01d      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1d      	ldr	r2, [pc, #116]	@ (800740c <HAL_DMA_IRQHandler+0x420>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007410 <HAL_DMA_IRQHandler+0x424>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d013      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007414 <HAL_DMA_IRQHandler+0x428>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a18      	ldr	r2, [pc, #96]	@ (8007418 <HAL_DMA_IRQHandler+0x42c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a17      	ldr	r2, [pc, #92]	@ (800741c <HAL_DMA_IRQHandler+0x430>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_DMA_IRQHandler+0x3e2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a15      	ldr	r2, [pc, #84]	@ (8007420 <HAL_DMA_IRQHandler+0x434>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d12a      	bne.n	8007424 <HAL_DMA_IRQHandler+0x438>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e023      	b.n	800742c <HAL_DMA_IRQHandler+0x440>
 80073e4:	40020010 	.word	0x40020010
 80073e8:	40020028 	.word	0x40020028
 80073ec:	40020040 	.word	0x40020040
 80073f0:	40020058 	.word	0x40020058
 80073f4:	40020070 	.word	0x40020070
 80073f8:	40020088 	.word	0x40020088
 80073fc:	400200a0 	.word	0x400200a0
 8007400:	400200b8 	.word	0x400200b8
 8007404:	40020410 	.word	0x40020410
 8007408:	40020428 	.word	0x40020428
 800740c:	40020440 	.word	0x40020440
 8007410:	40020458 	.word	0x40020458
 8007414:	40020470 	.word	0x40020470
 8007418:	40020488 	.word	0x40020488
 800741c:	400204a0 	.word	0x400204a0
 8007420:	400204b8 	.word	0x400204b8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007434:	f003 031f 	and.w	r3, r3, #31
 8007438:	2204      	movs	r2, #4
 800743a:	409a      	lsls	r2, r3
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	f043 0204 	orr.w	r2, r3, #4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2210      	movs	r2, #16
 8007456:	409a      	lsls	r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	4013      	ands	r3, r2
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a6 	beq.w	80075ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a85      	ldr	r2, [pc, #532]	@ (800767c <HAL_DMA_IRQHandler+0x690>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d04a      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a83      	ldr	r2, [pc, #524]	@ (8007680 <HAL_DMA_IRQHandler+0x694>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d045      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a82      	ldr	r2, [pc, #520]	@ (8007684 <HAL_DMA_IRQHandler+0x698>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d040      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a80      	ldr	r2, [pc, #512]	@ (8007688 <HAL_DMA_IRQHandler+0x69c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03b      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a7f      	ldr	r2, [pc, #508]	@ (800768c <HAL_DMA_IRQHandler+0x6a0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d036      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a7d      	ldr	r2, [pc, #500]	@ (8007690 <HAL_DMA_IRQHandler+0x6a4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d031      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a7c      	ldr	r2, [pc, #496]	@ (8007694 <HAL_DMA_IRQHandler+0x6a8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02c      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a7a      	ldr	r2, [pc, #488]	@ (8007698 <HAL_DMA_IRQHandler+0x6ac>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a79      	ldr	r2, [pc, #484]	@ (800769c <HAL_DMA_IRQHandler+0x6b0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a77      	ldr	r2, [pc, #476]	@ (80076a0 <HAL_DMA_IRQHandler+0x6b4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a76      	ldr	r2, [pc, #472]	@ (80076a4 <HAL_DMA_IRQHandler+0x6b8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a74      	ldr	r2, [pc, #464]	@ (80076a8 <HAL_DMA_IRQHandler+0x6bc>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a73      	ldr	r2, [pc, #460]	@ (80076ac <HAL_DMA_IRQHandler+0x6c0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a71      	ldr	r2, [pc, #452]	@ (80076b0 <HAL_DMA_IRQHandler+0x6c4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a70      	ldr	r2, [pc, #448]	@ (80076b4 <HAL_DMA_IRQHandler+0x6c8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_IRQHandler+0x516>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a6e      	ldr	r2, [pc, #440]	@ (80076b8 <HAL_DMA_IRQHandler+0x6cc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10a      	bne.n	8007518 <HAL_DMA_IRQHandler+0x52c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e009      	b.n	800752c <HAL_DMA_IRQHandler+0x540>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d03e      	beq.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2210      	movs	r2, #16
 800753a:	409a      	lsls	r2, r3
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d018      	beq.n	8007580 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d024      	beq.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	e01f      	b.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01b      	beq.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
 800757e:	e016      	b.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d107      	bne.n	800759e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0208 	bic.w	r2, r2, #8
 800759c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2220      	movs	r2, #32
 80075b8:	409a      	lsls	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8110 	beq.w	80077e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2c      	ldr	r2, [pc, #176]	@ (800767c <HAL_DMA_IRQHandler+0x690>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d04a      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007680 <HAL_DMA_IRQHandler+0x694>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d045      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a29      	ldr	r2, [pc, #164]	@ (8007684 <HAL_DMA_IRQHandler+0x698>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d040      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a28      	ldr	r2, [pc, #160]	@ (8007688 <HAL_DMA_IRQHandler+0x69c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d03b      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a26      	ldr	r2, [pc, #152]	@ (800768c <HAL_DMA_IRQHandler+0x6a0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d036      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a25      	ldr	r2, [pc, #148]	@ (8007690 <HAL_DMA_IRQHandler+0x6a4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d031      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a23      	ldr	r2, [pc, #140]	@ (8007694 <HAL_DMA_IRQHandler+0x6a8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d02c      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <HAL_DMA_IRQHandler+0x6ac>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a20      	ldr	r2, [pc, #128]	@ (800769c <HAL_DMA_IRQHandler+0x6b0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1f      	ldr	r2, [pc, #124]	@ (80076a0 <HAL_DMA_IRQHandler+0x6b4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01d      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1d      	ldr	r2, [pc, #116]	@ (80076a4 <HAL_DMA_IRQHandler+0x6b8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <HAL_DMA_IRQHandler+0x6bc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1a      	ldr	r2, [pc, #104]	@ (80076ac <HAL_DMA_IRQHandler+0x6c0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a19      	ldr	r2, [pc, #100]	@ (80076b0 <HAL_DMA_IRQHandler+0x6c4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a17      	ldr	r2, [pc, #92]	@ (80076b4 <HAL_DMA_IRQHandler+0x6c8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_DMA_IRQHandler+0x678>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a16      	ldr	r2, [pc, #88]	@ (80076b8 <HAL_DMA_IRQHandler+0x6cc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d12b      	bne.n	80076bc <HAL_DMA_IRQHandler+0x6d0>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	e02a      	b.n	80076d0 <HAL_DMA_IRQHandler+0x6e4>
 800767a:	bf00      	nop
 800767c:	40020010 	.word	0x40020010
 8007680:	40020028 	.word	0x40020028
 8007684:	40020040 	.word	0x40020040
 8007688:	40020058 	.word	0x40020058
 800768c:	40020070 	.word	0x40020070
 8007690:	40020088 	.word	0x40020088
 8007694:	400200a0 	.word	0x400200a0
 8007698:	400200b8 	.word	0x400200b8
 800769c:	40020410 	.word	0x40020410
 80076a0:	40020428 	.word	0x40020428
 80076a4:	40020440 	.word	0x40020440
 80076a8:	40020458 	.word	0x40020458
 80076ac:	40020470 	.word	0x40020470
 80076b0:	40020488 	.word	0x40020488
 80076b4:	400204a0 	.word	0x400204a0
 80076b8:	400204b8 	.word	0x400204b8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf14      	ite	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	2300      	moveq	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8087 	beq.w	80077e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2220      	movs	r2, #32
 80076e0:	409a      	lsls	r2, r3
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d139      	bne.n	8007766 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0216 	bic.w	r2, r2, #22
 8007700:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695a      	ldr	r2, [r3, #20]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007710:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <HAL_DMA_IRQHandler+0x736>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0208 	bic.w	r2, r2, #8
 8007730:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	223f      	movs	r2, #63	@ 0x3f
 800773c:	409a      	lsls	r2, r3
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 834a 	beq.w	8007df0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
          }
          return;
 8007764:	e344      	b.n	8007df0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d018      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d108      	bne.n	8007794 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	2b00      	cmp	r3, #0
 8007788:	d02c      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	e027      	b.n	80077e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d023      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
 80077a4:	e01e      	b.n	80077e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10f      	bne.n	80077d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0210 	bic.w	r2, r2, #16
 80077c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8306 	beq.w	8007dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8088 	beq.w	800790c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2204      	movs	r2, #4
 8007800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7a      	ldr	r2, [pc, #488]	@ (80079f4 <HAL_DMA_IRQHandler+0xa08>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d04a      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a79      	ldr	r2, [pc, #484]	@ (80079f8 <HAL_DMA_IRQHandler+0xa0c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d045      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a77      	ldr	r2, [pc, #476]	@ (80079fc <HAL_DMA_IRQHandler+0xa10>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d040      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a76      	ldr	r2, [pc, #472]	@ (8007a00 <HAL_DMA_IRQHandler+0xa14>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d03b      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a74      	ldr	r2, [pc, #464]	@ (8007a04 <HAL_DMA_IRQHandler+0xa18>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d036      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a73      	ldr	r2, [pc, #460]	@ (8007a08 <HAL_DMA_IRQHandler+0xa1c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d031      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a71      	ldr	r2, [pc, #452]	@ (8007a0c <HAL_DMA_IRQHandler+0xa20>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d02c      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a70      	ldr	r2, [pc, #448]	@ (8007a10 <HAL_DMA_IRQHandler+0xa24>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d027      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a6e      	ldr	r2, [pc, #440]	@ (8007a14 <HAL_DMA_IRQHandler+0xa28>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d022      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6d      	ldr	r2, [pc, #436]	@ (8007a18 <HAL_DMA_IRQHandler+0xa2c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d01d      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a1c <HAL_DMA_IRQHandler+0xa30>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d018      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6a      	ldr	r2, [pc, #424]	@ (8007a20 <HAL_DMA_IRQHandler+0xa34>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d013      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a68      	ldr	r2, [pc, #416]	@ (8007a24 <HAL_DMA_IRQHandler+0xa38>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00e      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a67      	ldr	r2, [pc, #412]	@ (8007a28 <HAL_DMA_IRQHandler+0xa3c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d009      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a65      	ldr	r2, [pc, #404]	@ (8007a2c <HAL_DMA_IRQHandler+0xa40>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d004      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x8b8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a64      	ldr	r2, [pc, #400]	@ (8007a30 <HAL_DMA_IRQHandler+0xa44>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d108      	bne.n	80078b6 <HAL_DMA_IRQHandler+0x8ca>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0201 	bic.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e007      	b.n	80078c6 <HAL_DMA_IRQHandler+0x8da>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d307      	bcc.n	80078e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1f2      	bne.n	80078c6 <HAL_DMA_IRQHandler+0x8da>
 80078e0:	e000      	b.n	80078e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80078e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2203      	movs	r2, #3
 80078f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80078fa:	e003      	b.n	8007904 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8272 	beq.w	8007dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
 800791e:	e26c      	b.n	8007dfa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a43      	ldr	r2, [pc, #268]	@ (8007a34 <HAL_DMA_IRQHandler+0xa48>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d022      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a42      	ldr	r2, [pc, #264]	@ (8007a38 <HAL_DMA_IRQHandler+0xa4c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01d      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a40      	ldr	r2, [pc, #256]	@ (8007a3c <HAL_DMA_IRQHandler+0xa50>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d018      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a3f      	ldr	r2, [pc, #252]	@ (8007a40 <HAL_DMA_IRQHandler+0xa54>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3d      	ldr	r2, [pc, #244]	@ (8007a44 <HAL_DMA_IRQHandler+0xa58>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00e      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a3c      	ldr	r2, [pc, #240]	@ (8007a48 <HAL_DMA_IRQHandler+0xa5c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a3a      	ldr	r2, [pc, #232]	@ (8007a4c <HAL_DMA_IRQHandler+0xa60>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <HAL_DMA_IRQHandler+0x984>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a39      	ldr	r2, [pc, #228]	@ (8007a50 <HAL_DMA_IRQHandler+0xa64>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d101      	bne.n	8007974 <HAL_DMA_IRQHandler+0x988>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_DMA_IRQHandler+0x98a>
 8007974:	2300      	movs	r3, #0
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 823f 	beq.w	8007dfa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007988:	f003 031f 	and.w	r3, r3, #31
 800798c:	2204      	movs	r2, #4
 800798e:	409a      	lsls	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80cd 	beq.w	8007b34 <HAL_DMA_IRQHandler+0xb48>
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80c7 	beq.w	8007b34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2204      	movs	r2, #4
 80079b0:	409a      	lsls	r2, r3
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d049      	beq.n	8007a54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8210 	beq.w	8007df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079dc:	e20a      	b.n	8007df4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8206 	beq.w	8007df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079f0:	e200      	b.n	8007df4 <HAL_DMA_IRQHandler+0xe08>
 80079f2:	bf00      	nop
 80079f4:	40020010 	.word	0x40020010
 80079f8:	40020028 	.word	0x40020028
 80079fc:	40020040 	.word	0x40020040
 8007a00:	40020058 	.word	0x40020058
 8007a04:	40020070 	.word	0x40020070
 8007a08:	40020088 	.word	0x40020088
 8007a0c:	400200a0 	.word	0x400200a0
 8007a10:	400200b8 	.word	0x400200b8
 8007a14:	40020410 	.word	0x40020410
 8007a18:	40020428 	.word	0x40020428
 8007a1c:	40020440 	.word	0x40020440
 8007a20:	40020458 	.word	0x40020458
 8007a24:	40020470 	.word	0x40020470
 8007a28:	40020488 	.word	0x40020488
 8007a2c:	400204a0 	.word	0x400204a0
 8007a30:	400204b8 	.word	0x400204b8
 8007a34:	58025408 	.word	0x58025408
 8007a38:	5802541c 	.word	0x5802541c
 8007a3c:	58025430 	.word	0x58025430
 8007a40:	58025444 	.word	0x58025444
 8007a44:	58025458 	.word	0x58025458
 8007a48:	5802546c 	.word	0x5802546c
 8007a4c:	58025480 	.word	0x58025480
 8007a50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d160      	bne.n	8007b20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a7f      	ldr	r2, [pc, #508]	@ (8007c60 <HAL_DMA_IRQHandler+0xc74>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d04a      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a7d      	ldr	r2, [pc, #500]	@ (8007c64 <HAL_DMA_IRQHandler+0xc78>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d045      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a7c      	ldr	r2, [pc, #496]	@ (8007c68 <HAL_DMA_IRQHandler+0xc7c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d040      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a7a      	ldr	r2, [pc, #488]	@ (8007c6c <HAL_DMA_IRQHandler+0xc80>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d03b      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a79      	ldr	r2, [pc, #484]	@ (8007c70 <HAL_DMA_IRQHandler+0xc84>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d036      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a77      	ldr	r2, [pc, #476]	@ (8007c74 <HAL_DMA_IRQHandler+0xc88>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d031      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a76      	ldr	r2, [pc, #472]	@ (8007c78 <HAL_DMA_IRQHandler+0xc8c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d02c      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a74      	ldr	r2, [pc, #464]	@ (8007c7c <HAL_DMA_IRQHandler+0xc90>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d027      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a73      	ldr	r2, [pc, #460]	@ (8007c80 <HAL_DMA_IRQHandler+0xc94>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d022      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a71      	ldr	r2, [pc, #452]	@ (8007c84 <HAL_DMA_IRQHandler+0xc98>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01d      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a70      	ldr	r2, [pc, #448]	@ (8007c88 <HAL_DMA_IRQHandler+0xc9c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8007c8c <HAL_DMA_IRQHandler+0xca0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a6d      	ldr	r2, [pc, #436]	@ (8007c90 <HAL_DMA_IRQHandler+0xca4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8007c94 <HAL_DMA_IRQHandler+0xca8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6a      	ldr	r2, [pc, #424]	@ (8007c98 <HAL_DMA_IRQHandler+0xcac>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_DMA_IRQHandler+0xb12>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a68      	ldr	r2, [pc, #416]	@ (8007c9c <HAL_DMA_IRQHandler+0xcb0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d108      	bne.n	8007b10 <HAL_DMA_IRQHandler+0xb24>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0208 	bic.w	r2, r2, #8
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e007      	b.n	8007b20 <HAL_DMA_IRQHandler+0xb34>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0204 	bic.w	r2, r2, #4
 8007b1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8165 	beq.w	8007df4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b32:	e15f      	b.n	8007df4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4013      	ands	r3, r2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80c5 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xce8>
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80bf 	beq.w	8007cd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2202      	movs	r2, #2
 8007b60:	409a      	lsls	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d018      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 813a 	beq.w	8007df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b8c:	e134      	b.n	8007df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 8130 	beq.w	8007df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba0:	e12a      	b.n	8007df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 8089 	bne.w	8007cc0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8007c60 <HAL_DMA_IRQHandler+0xc74>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d04a      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a29      	ldr	r2, [pc, #164]	@ (8007c64 <HAL_DMA_IRQHandler+0xc78>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d045      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a28      	ldr	r2, [pc, #160]	@ (8007c68 <HAL_DMA_IRQHandler+0xc7c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d040      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	@ (8007c6c <HAL_DMA_IRQHandler+0xc80>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d03b      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a25      	ldr	r2, [pc, #148]	@ (8007c70 <HAL_DMA_IRQHandler+0xc84>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d036      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a23      	ldr	r2, [pc, #140]	@ (8007c74 <HAL_DMA_IRQHandler+0xc88>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d031      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a22      	ldr	r2, [pc, #136]	@ (8007c78 <HAL_DMA_IRQHandler+0xc8c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d02c      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a20      	ldr	r2, [pc, #128]	@ (8007c7c <HAL_DMA_IRQHandler+0xc90>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1f      	ldr	r2, [pc, #124]	@ (8007c80 <HAL_DMA_IRQHandler+0xc94>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c84 <HAL_DMA_IRQHandler+0xc98>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_DMA_IRQHandler+0xc9c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1a      	ldr	r2, [pc, #104]	@ (8007c8c <HAL_DMA_IRQHandler+0xca0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	@ (8007c90 <HAL_DMA_IRQHandler+0xca4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a17      	ldr	r2, [pc, #92]	@ (8007c94 <HAL_DMA_IRQHandler+0xca8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a16      	ldr	r2, [pc, #88]	@ (8007c98 <HAL_DMA_IRQHandler+0xcac>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_DMA_IRQHandler+0xc62>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a14      	ldr	r2, [pc, #80]	@ (8007c9c <HAL_DMA_IRQHandler+0xcb0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d128      	bne.n	8007ca0 <HAL_DMA_IRQHandler+0xcb4>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0214 	bic.w	r2, r2, #20
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e027      	b.n	8007cb0 <HAL_DMA_IRQHandler+0xcc4>
 8007c60:	40020010 	.word	0x40020010
 8007c64:	40020028 	.word	0x40020028
 8007c68:	40020040 	.word	0x40020040
 8007c6c:	40020058 	.word	0x40020058
 8007c70:	40020070 	.word	0x40020070
 8007c74:	40020088 	.word	0x40020088
 8007c78:	400200a0 	.word	0x400200a0
 8007c7c:	400200b8 	.word	0x400200b8
 8007c80:	40020410 	.word	0x40020410
 8007c84:	40020428 	.word	0x40020428
 8007c88:	40020440 	.word	0x40020440
 8007c8c:	40020458 	.word	0x40020458
 8007c90:	40020470 	.word	0x40020470
 8007c94:	40020488 	.word	0x40020488
 8007c98:	400204a0 	.word	0x400204a0
 8007c9c:	400204b8 	.word	0x400204b8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 020a 	bic.w	r2, r2, #10
 8007cae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8097 	beq.w	8007df8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd2:	e091      	b.n	8007df8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd8:	f003 031f 	and.w	r3, r3, #31
 8007cdc:	2208      	movs	r2, #8
 8007cde:	409a      	lsls	r2, r3
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8088 	beq.w	8007dfa <HAL_DMA_IRQHandler+0xe0e>
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8082 	beq.w	8007dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a41      	ldr	r2, [pc, #260]	@ (8007e00 <HAL_DMA_IRQHandler+0xe14>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d04a      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a3f      	ldr	r2, [pc, #252]	@ (8007e04 <HAL_DMA_IRQHandler+0xe18>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d045      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a3e      	ldr	r2, [pc, #248]	@ (8007e08 <HAL_DMA_IRQHandler+0xe1c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d040      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3c      	ldr	r2, [pc, #240]	@ (8007e0c <HAL_DMA_IRQHandler+0xe20>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d03b      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3b      	ldr	r2, [pc, #236]	@ (8007e10 <HAL_DMA_IRQHandler+0xe24>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d036      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a39      	ldr	r2, [pc, #228]	@ (8007e14 <HAL_DMA_IRQHandler+0xe28>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d031      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a38      	ldr	r2, [pc, #224]	@ (8007e18 <HAL_DMA_IRQHandler+0xe2c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d02c      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a36      	ldr	r2, [pc, #216]	@ (8007e1c <HAL_DMA_IRQHandler+0xe30>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d027      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a35      	ldr	r2, [pc, #212]	@ (8007e20 <HAL_DMA_IRQHandler+0xe34>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d022      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a33      	ldr	r2, [pc, #204]	@ (8007e24 <HAL_DMA_IRQHandler+0xe38>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01d      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a32      	ldr	r2, [pc, #200]	@ (8007e28 <HAL_DMA_IRQHandler+0xe3c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d018      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a30      	ldr	r2, [pc, #192]	@ (8007e2c <HAL_DMA_IRQHandler+0xe40>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d013      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2f      	ldr	r2, [pc, #188]	@ (8007e30 <HAL_DMA_IRQHandler+0xe44>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00e      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007e34 <HAL_DMA_IRQHandler+0xe48>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a2c      	ldr	r2, [pc, #176]	@ (8007e38 <HAL_DMA_IRQHandler+0xe4c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_DMA_IRQHandler+0xdaa>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2a      	ldr	r2, [pc, #168]	@ (8007e3c <HAL_DMA_IRQHandler+0xe50>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d108      	bne.n	8007da8 <HAL_DMA_IRQHandler+0xdbc>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 021c 	bic.w	r2, r2, #28
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	e007      	b.n	8007db8 <HAL_DMA_IRQHandler+0xdcc>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 020e 	bic.w	r2, r2, #14
 8007db6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
 8007dee:	e004      	b.n	8007dfa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007df0:	bf00      	nop
 8007df2:	e002      	b.n	8007dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007dfa:	3728      	adds	r7, #40	@ 0x28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40020010 	.word	0x40020010
 8007e04:	40020028 	.word	0x40020028
 8007e08:	40020040 	.word	0x40020040
 8007e0c:	40020058 	.word	0x40020058
 8007e10:	40020070 	.word	0x40020070
 8007e14:	40020088 	.word	0x40020088
 8007e18:	400200a0 	.word	0x400200a0
 8007e1c:	400200b8 	.word	0x400200b8
 8007e20:	40020410 	.word	0x40020410
 8007e24:	40020428 	.word	0x40020428
 8007e28:	40020440 	.word	0x40020440
 8007e2c:	40020458 	.word	0x40020458
 8007e30:	40020470 	.word	0x40020470
 8007e34:	40020488 	.word	0x40020488
 8007e38:	400204a0 	.word	0x400204a0
 8007e3c:	400204b8 	.word	0x400204b8

08007e40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a7f      	ldr	r2, [pc, #508]	@ (800805c <DMA_SetConfig+0x21c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d072      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a7d      	ldr	r2, [pc, #500]	@ (8008060 <DMA_SetConfig+0x220>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d06d      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a7c      	ldr	r2, [pc, #496]	@ (8008064 <DMA_SetConfig+0x224>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d068      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a7a      	ldr	r2, [pc, #488]	@ (8008068 <DMA_SetConfig+0x228>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d063      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a79      	ldr	r2, [pc, #484]	@ (800806c <DMA_SetConfig+0x22c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d05e      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a77      	ldr	r2, [pc, #476]	@ (8008070 <DMA_SetConfig+0x230>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d059      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a76      	ldr	r2, [pc, #472]	@ (8008074 <DMA_SetConfig+0x234>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d054      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a74      	ldr	r2, [pc, #464]	@ (8008078 <DMA_SetConfig+0x238>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d04f      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a73      	ldr	r2, [pc, #460]	@ (800807c <DMA_SetConfig+0x23c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d04a      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a71      	ldr	r2, [pc, #452]	@ (8008080 <DMA_SetConfig+0x240>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d045      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a70      	ldr	r2, [pc, #448]	@ (8008084 <DMA_SetConfig+0x244>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d040      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8008088 <DMA_SetConfig+0x248>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d03b      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a6d      	ldr	r2, [pc, #436]	@ (800808c <DMA_SetConfig+0x24c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d036      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8008090 <DMA_SetConfig+0x250>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d031      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a6a      	ldr	r2, [pc, #424]	@ (8008094 <DMA_SetConfig+0x254>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d02c      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a68      	ldr	r2, [pc, #416]	@ (8008098 <DMA_SetConfig+0x258>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d027      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a67      	ldr	r2, [pc, #412]	@ (800809c <DMA_SetConfig+0x25c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d022      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a65      	ldr	r2, [pc, #404]	@ (80080a0 <DMA_SetConfig+0x260>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01d      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a64      	ldr	r2, [pc, #400]	@ (80080a4 <DMA_SetConfig+0x264>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d018      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a62      	ldr	r2, [pc, #392]	@ (80080a8 <DMA_SetConfig+0x268>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a61      	ldr	r2, [pc, #388]	@ (80080ac <DMA_SetConfig+0x26c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a5f      	ldr	r2, [pc, #380]	@ (80080b0 <DMA_SetConfig+0x270>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80080b4 <DMA_SetConfig+0x274>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <DMA_SetConfig+0x10a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5c      	ldr	r2, [pc, #368]	@ (80080b8 <DMA_SetConfig+0x278>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d101      	bne.n	8007f4e <DMA_SetConfig+0x10e>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <DMA_SetConfig+0x110>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00d      	beq.n	8007f70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007f5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a39      	ldr	r2, [pc, #228]	@ (800805c <DMA_SetConfig+0x21c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d04a      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a38      	ldr	r2, [pc, #224]	@ (8008060 <DMA_SetConfig+0x220>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d045      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a36      	ldr	r2, [pc, #216]	@ (8008064 <DMA_SetConfig+0x224>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d040      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a35      	ldr	r2, [pc, #212]	@ (8008068 <DMA_SetConfig+0x228>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d03b      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a33      	ldr	r2, [pc, #204]	@ (800806c <DMA_SetConfig+0x22c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d036      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a32      	ldr	r2, [pc, #200]	@ (8008070 <DMA_SetConfig+0x230>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d031      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a30      	ldr	r2, [pc, #192]	@ (8008074 <DMA_SetConfig+0x234>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d02c      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2f      	ldr	r2, [pc, #188]	@ (8008078 <DMA_SetConfig+0x238>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d027      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800807c <DMA_SetConfig+0x23c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d022      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a2c      	ldr	r2, [pc, #176]	@ (8008080 <DMA_SetConfig+0x240>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d01d      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008084 <DMA_SetConfig+0x244>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d018      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <DMA_SetConfig+0x248>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d013      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a27      	ldr	r2, [pc, #156]	@ (800808c <DMA_SetConfig+0x24c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00e      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a26      	ldr	r2, [pc, #152]	@ (8008090 <DMA_SetConfig+0x250>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d009      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a24      	ldr	r2, [pc, #144]	@ (8008094 <DMA_SetConfig+0x254>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <DMA_SetConfig+0x1d0>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a23      	ldr	r2, [pc, #140]	@ (8008098 <DMA_SetConfig+0x258>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d101      	bne.n	8008014 <DMA_SetConfig+0x1d4>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <DMA_SetConfig+0x1d6>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d059      	beq.n	80080ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	223f      	movs	r2, #63	@ 0x3f
 8008024:	409a      	lsls	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008038:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b40      	cmp	r3, #64	@ 0x40
 8008048:	d138      	bne.n	80080bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800805a:	e086      	b.n	800816a <DMA_SetConfig+0x32a>
 800805c:	40020010 	.word	0x40020010
 8008060:	40020028 	.word	0x40020028
 8008064:	40020040 	.word	0x40020040
 8008068:	40020058 	.word	0x40020058
 800806c:	40020070 	.word	0x40020070
 8008070:	40020088 	.word	0x40020088
 8008074:	400200a0 	.word	0x400200a0
 8008078:	400200b8 	.word	0x400200b8
 800807c:	40020410 	.word	0x40020410
 8008080:	40020428 	.word	0x40020428
 8008084:	40020440 	.word	0x40020440
 8008088:	40020458 	.word	0x40020458
 800808c:	40020470 	.word	0x40020470
 8008090:	40020488 	.word	0x40020488
 8008094:	400204a0 	.word	0x400204a0
 8008098:	400204b8 	.word	0x400204b8
 800809c:	58025408 	.word	0x58025408
 80080a0:	5802541c 	.word	0x5802541c
 80080a4:	58025430 	.word	0x58025430
 80080a8:	58025444 	.word	0x58025444
 80080ac:	58025458 	.word	0x58025458
 80080b0:	5802546c 	.word	0x5802546c
 80080b4:	58025480 	.word	0x58025480
 80080b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	60da      	str	r2, [r3, #12]
}
 80080cc:	e04d      	b.n	800816a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a29      	ldr	r2, [pc, #164]	@ (8008178 <DMA_SetConfig+0x338>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d022      	beq.n	800811e <DMA_SetConfig+0x2de>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a27      	ldr	r2, [pc, #156]	@ (800817c <DMA_SetConfig+0x33c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d01d      	beq.n	800811e <DMA_SetConfig+0x2de>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a26      	ldr	r2, [pc, #152]	@ (8008180 <DMA_SetConfig+0x340>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <DMA_SetConfig+0x2de>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a24      	ldr	r2, [pc, #144]	@ (8008184 <DMA_SetConfig+0x344>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <DMA_SetConfig+0x2de>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a23      	ldr	r2, [pc, #140]	@ (8008188 <DMA_SetConfig+0x348>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <DMA_SetConfig+0x2de>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a21      	ldr	r2, [pc, #132]	@ (800818c <DMA_SetConfig+0x34c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <DMA_SetConfig+0x2de>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a20      	ldr	r2, [pc, #128]	@ (8008190 <DMA_SetConfig+0x350>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <DMA_SetConfig+0x2de>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <DMA_SetConfig+0x354>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d101      	bne.n	8008122 <DMA_SetConfig+0x2e2>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <DMA_SetConfig+0x2e4>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d020      	beq.n	800816a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b40      	cmp	r3, #64	@ 0x40
 8008146:	d108      	bne.n	800815a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	60da      	str	r2, [r3, #12]
}
 8008158:	e007      	b.n	800816a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	60da      	str	r2, [r3, #12]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	58025408 	.word	0x58025408
 800817c:	5802541c 	.word	0x5802541c
 8008180:	58025430 	.word	0x58025430
 8008184:	58025444 	.word	0x58025444
 8008188:	58025458 	.word	0x58025458
 800818c:	5802546c 	.word	0x5802546c
 8008190:	58025480 	.word	0x58025480
 8008194:	58025494 	.word	0x58025494

08008198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a42      	ldr	r2, [pc, #264]	@ (80082b0 <DMA_CalcBaseAndBitshift+0x118>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d04a      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a41      	ldr	r2, [pc, #260]	@ (80082b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d045      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3f      	ldr	r2, [pc, #252]	@ (80082b8 <DMA_CalcBaseAndBitshift+0x120>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d040      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a3e      	ldr	r2, [pc, #248]	@ (80082bc <DMA_CalcBaseAndBitshift+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d03b      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3c      	ldr	r2, [pc, #240]	@ (80082c0 <DMA_CalcBaseAndBitshift+0x128>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d036      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a3b      	ldr	r2, [pc, #236]	@ (80082c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d031      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a39      	ldr	r2, [pc, #228]	@ (80082c8 <DMA_CalcBaseAndBitshift+0x130>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d02c      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a38      	ldr	r2, [pc, #224]	@ (80082cc <DMA_CalcBaseAndBitshift+0x134>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d027      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a36      	ldr	r2, [pc, #216]	@ (80082d0 <DMA_CalcBaseAndBitshift+0x138>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d022      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a35      	ldr	r2, [pc, #212]	@ (80082d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d01d      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a33      	ldr	r2, [pc, #204]	@ (80082d8 <DMA_CalcBaseAndBitshift+0x140>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d018      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a32      	ldr	r2, [pc, #200]	@ (80082dc <DMA_CalcBaseAndBitshift+0x144>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a30      	ldr	r2, [pc, #192]	@ (80082e0 <DMA_CalcBaseAndBitshift+0x148>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00e      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a2f      	ldr	r2, [pc, #188]	@ (80082e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d009      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a2d      	ldr	r2, [pc, #180]	@ (80082e8 <DMA_CalcBaseAndBitshift+0x150>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <DMA_CalcBaseAndBitshift+0xa8>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a2c      	ldr	r2, [pc, #176]	@ (80082ec <DMA_CalcBaseAndBitshift+0x154>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d101      	bne.n	8008244 <DMA_CalcBaseAndBitshift+0xac>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <DMA_CalcBaseAndBitshift+0xae>
 8008244:	2300      	movs	r3, #0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d024      	beq.n	8008294 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	3b10      	subs	r3, #16
 8008252:	4a27      	ldr	r2, [pc, #156]	@ (80082f0 <DMA_CalcBaseAndBitshift+0x158>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	4a24      	ldr	r2, [pc, #144]	@ (80082f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008264:	5cd3      	ldrb	r3, [r2, r3]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b03      	cmp	r3, #3
 8008270:	d908      	bls.n	8008284 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	4b1f      	ldr	r3, [pc, #124]	@ (80082f8 <DMA_CalcBaseAndBitshift+0x160>)
 800827a:	4013      	ands	r3, r2
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	659a      	str	r2, [r3, #88]	@ 0x58
 8008282:	e00d      	b.n	80082a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	4b1b      	ldr	r3, [pc, #108]	@ (80082f8 <DMA_CalcBaseAndBitshift+0x160>)
 800828c:	4013      	ands	r3, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6593      	str	r3, [r2, #88]	@ 0x58
 8008292:	e005      	b.n	80082a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	40020010 	.word	0x40020010
 80082b4:	40020028 	.word	0x40020028
 80082b8:	40020040 	.word	0x40020040
 80082bc:	40020058 	.word	0x40020058
 80082c0:	40020070 	.word	0x40020070
 80082c4:	40020088 	.word	0x40020088
 80082c8:	400200a0 	.word	0x400200a0
 80082cc:	400200b8 	.word	0x400200b8
 80082d0:	40020410 	.word	0x40020410
 80082d4:	40020428 	.word	0x40020428
 80082d8:	40020440 	.word	0x40020440
 80082dc:	40020458 	.word	0x40020458
 80082e0:	40020470 	.word	0x40020470
 80082e4:	40020488 	.word	0x40020488
 80082e8:	400204a0 	.word	0x400204a0
 80082ec:	400204b8 	.word	0x400204b8
 80082f0:	aaaaaaab 	.word	0xaaaaaaab
 80082f4:	0801ec60 	.word	0x0801ec60
 80082f8:	fffffc00 	.word	0xfffffc00

080082fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d120      	bne.n	8008352 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	2b03      	cmp	r3, #3
 8008316:	d858      	bhi.n	80083ca <DMA_CheckFifoParam+0xce>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <DMA_CheckFifoParam+0x24>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008343 	.word	0x08008343
 8008328:	08008331 	.word	0x08008331
 800832c:	080083cb 	.word	0x080083cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d048      	beq.n	80083ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008340:	e045      	b.n	80083ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800834a:	d142      	bne.n	80083d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008350:	e03f      	b.n	80083d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800835a:	d123      	bne.n	80083a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	2b03      	cmp	r3, #3
 8008362:	d838      	bhi.n	80083d6 <DMA_CheckFifoParam+0xda>
 8008364:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <DMA_CheckFifoParam+0x70>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	08008383 	.word	0x08008383
 8008374:	0800837d 	.word	0x0800837d
 8008378:	08008395 	.word	0x08008395
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]
        break;
 8008380:	e030      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d025      	beq.n	80083da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008392:	e022      	b.n	80083da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800839c:	d11f      	bne.n	80083de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083a2:	e01c      	b.n	80083de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d902      	bls.n	80083b2 <DMA_CheckFifoParam+0xb6>
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d003      	beq.n	80083b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083b0:	e018      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
        break;
 80083b6:	e015      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	e00b      	b.n	80083e2 <DMA_CheckFifoParam+0xe6>
        break;
 80083ca:	bf00      	nop
 80083cc:	e00a      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        break;
 80083ce:	bf00      	nop
 80083d0:	e008      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        break;
 80083d2:	bf00      	nop
 80083d4:	e006      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        break;
 80083d6:	bf00      	nop
 80083d8:	e004      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        break;
 80083da:	bf00      	nop
 80083dc:	e002      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
        break;
 80083de:	bf00      	nop
 80083e0:	e000      	b.n	80083e4 <DMA_CheckFifoParam+0xe8>
    break;
 80083e2:	bf00      	nop
    }
  }

  return status;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a38      	ldr	r2, [pc, #224]	@ (80084e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d022      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a36      	ldr	r2, [pc, #216]	@ (80084ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01d      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a35      	ldr	r2, [pc, #212]	@ (80084f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d018      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a33      	ldr	r2, [pc, #204]	@ (80084f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a32      	ldr	r2, [pc, #200]	@ (80084f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00e      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a30      	ldr	r2, [pc, #192]	@ (80084fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d009      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a2f      	ldr	r2, [pc, #188]	@ (8008500 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d004      	beq.n	8008452 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a2d      	ldr	r2, [pc, #180]	@ (8008504 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d101      	bne.n	8008456 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008456:	2300      	movs	r3, #0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d01a      	beq.n	8008492 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	b2db      	uxtb	r3, r3
 8008462:	3b08      	subs	r3, #8
 8008464:	4a28      	ldr	r2, [pc, #160]	@ (8008508 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008466:	fba2 2303 	umull	r2, r3, r2, r3
 800846a:	091b      	lsrs	r3, r3, #4
 800846c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4b26      	ldr	r3, [pc, #152]	@ (800850c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a24      	ldr	r2, [pc, #144]	@ (8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008480:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	2201      	movs	r2, #1
 800848a:	409a      	lsls	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008490:	e024      	b.n	80084dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	3b10      	subs	r3, #16
 800849a:	4a1e      	ldr	r2, [pc, #120]	@ (8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800849c:	fba2 2303 	umull	r2, r3, r2, r3
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d806      	bhi.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d902      	bls.n	80084ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3308      	adds	r3, #8
 80084b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4b18      	ldr	r3, [pc, #96]	@ (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a16      	ldr	r2, [pc, #88]	@ (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2201      	movs	r2, #1
 80084d6:	409a      	lsls	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80084dc:	bf00      	nop
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	58025408 	.word	0x58025408
 80084ec:	5802541c 	.word	0x5802541c
 80084f0:	58025430 	.word	0x58025430
 80084f4:	58025444 	.word	0x58025444
 80084f8:	58025458 	.word	0x58025458
 80084fc:	5802546c 	.word	0x5802546c
 8008500:	58025480 	.word	0x58025480
 8008504:	58025494 	.word	0x58025494
 8008508:	cccccccd 	.word	0xcccccccd
 800850c:	16009600 	.word	0x16009600
 8008510:	58025880 	.word	0x58025880
 8008514:	aaaaaaab 	.word	0xaaaaaaab
 8008518:	400204b8 	.word	0x400204b8
 800851c:	4002040f 	.word	0x4002040f
 8008520:	10008200 	.word	0x10008200
 8008524:	40020880 	.word	0x40020880

08008528 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d04a      	beq.n	80085d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b08      	cmp	r3, #8
 8008542:	d847      	bhi.n	80085d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a25      	ldr	r2, [pc, #148]	@ (80085e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d022      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a24      	ldr	r2, [pc, #144]	@ (80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d01d      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a22      	ldr	r2, [pc, #136]	@ (80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d018      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a21      	ldr	r2, [pc, #132]	@ (80085ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d013      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	@ (80085f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00e      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1e      	ldr	r2, [pc, #120]	@ (80085f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d009      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1c      	ldr	r2, [pc, #112]	@ (80085f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d101      	bne.n	8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008594:	2301      	movs	r3, #1
 8008596:	e000      	b.n	800859a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008598:	2300      	movs	r3, #0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4b17      	ldr	r3, [pc, #92]	@ (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80085b2:	e009      	b.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4b14      	ldr	r3, [pc, #80]	@ (8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a11      	ldr	r2, [pc, #68]	@ (800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	2201      	movs	r2, #1
 80085ce:	409a      	lsls	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	58025408 	.word	0x58025408
 80085e4:	5802541c 	.word	0x5802541c
 80085e8:	58025430 	.word	0x58025430
 80085ec:	58025444 	.word	0x58025444
 80085f0:	58025458 	.word	0x58025458
 80085f4:	5802546c 	.word	0x5802546c
 80085f8:	58025480 	.word	0x58025480
 80085fc:	58025494 	.word	0x58025494
 8008600:	1600963f 	.word	0x1600963f
 8008604:	58025940 	.word	0x58025940
 8008608:	1000823f 	.word	0x1000823f
 800860c:	40020940 	.word	0x40020940

08008610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008610:	b480      	push	{r7}
 8008612:	b089      	sub	sp, #36	@ 0x24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800861a:	2300      	movs	r3, #0
 800861c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800861e:	4b89      	ldr	r3, [pc, #548]	@ (8008844 <HAL_GPIO_Init+0x234>)
 8008620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008622:	e194      	b.n	800894e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	2101      	movs	r1, #1
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	fa01 f303 	lsl.w	r3, r1, r3
 8008630:	4013      	ands	r3, r2
 8008632:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8186 	beq.w	8008948 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	2b01      	cmp	r3, #1
 8008646:	d005      	beq.n	8008654 <HAL_GPIO_Init+0x44>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d130      	bne.n	80086b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	2203      	movs	r2, #3
 8008660:	fa02 f303 	lsl.w	r3, r2, r3
 8008664:	43db      	mvns	r3, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4013      	ands	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4313      	orrs	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800868a:	2201      	movs	r2, #1
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	43db      	mvns	r3, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4013      	ands	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	091b      	lsrs	r3, r3, #4
 80086a0:	f003 0201 	and.w	r2, r3, #1
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d017      	beq.n	80086f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	2203      	movs	r2, #3
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	4013      	ands	r3, r2
 80086d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	fa02 f303 	lsl.w	r3, r2, r3
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d123      	bne.n	8008746 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	08da      	lsrs	r2, r3, #3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3208      	adds	r2, #8
 8008706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	220f      	movs	r2, #15
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	43db      	mvns	r3, r3
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	4013      	ands	r3, r2
 8008720:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	691a      	ldr	r2, [r3, #16]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	4313      	orrs	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	08da      	lsrs	r2, r3, #3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3208      	adds	r2, #8
 8008740:	69b9      	ldr	r1, [r7, #24]
 8008742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	2203      	movs	r2, #3
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43db      	mvns	r3, r3
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	4013      	ands	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f003 0203 	and.w	r2, r3, #3
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	4313      	orrs	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80e0 	beq.w	8008948 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008788:	4b2f      	ldr	r3, [pc, #188]	@ (8008848 <HAL_GPIO_Init+0x238>)
 800878a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800878e:	4a2e      	ldr	r2, [pc, #184]	@ (8008848 <HAL_GPIO_Init+0x238>)
 8008790:	f043 0302 	orr.w	r3, r3, #2
 8008794:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008798:	4b2b      	ldr	r3, [pc, #172]	@ (8008848 <HAL_GPIO_Init+0x238>)
 800879a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087a6:	4a29      	ldr	r2, [pc, #164]	@ (800884c <HAL_GPIO_Init+0x23c>)
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	089b      	lsrs	r3, r3, #2
 80087ac:	3302      	adds	r3, #2
 80087ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	220f      	movs	r2, #15
 80087be:	fa02 f303 	lsl.w	r3, r2, r3
 80087c2:	43db      	mvns	r3, r3
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	4013      	ands	r3, r2
 80087c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a20      	ldr	r2, [pc, #128]	@ (8008850 <HAL_GPIO_Init+0x240>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d052      	beq.n	8008878 <HAL_GPIO_Init+0x268>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008854 <HAL_GPIO_Init+0x244>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d031      	beq.n	800883e <HAL_GPIO_Init+0x22e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008858 <HAL_GPIO_Init+0x248>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d02b      	beq.n	800883a <HAL_GPIO_Init+0x22a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a1d      	ldr	r2, [pc, #116]	@ (800885c <HAL_GPIO_Init+0x24c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d025      	beq.n	8008836 <HAL_GPIO_Init+0x226>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008860 <HAL_GPIO_Init+0x250>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01f      	beq.n	8008832 <HAL_GPIO_Init+0x222>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008864 <HAL_GPIO_Init+0x254>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d019      	beq.n	800882e <HAL_GPIO_Init+0x21e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008868 <HAL_GPIO_Init+0x258>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <HAL_GPIO_Init+0x21a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a19      	ldr	r2, [pc, #100]	@ (800886c <HAL_GPIO_Init+0x25c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00d      	beq.n	8008826 <HAL_GPIO_Init+0x216>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <HAL_GPIO_Init+0x260>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <HAL_GPIO_Init+0x212>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a17      	ldr	r2, [pc, #92]	@ (8008874 <HAL_GPIO_Init+0x264>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d101      	bne.n	800881e <HAL_GPIO_Init+0x20e>
 800881a:	2309      	movs	r3, #9
 800881c:	e02d      	b.n	800887a <HAL_GPIO_Init+0x26a>
 800881e:	230a      	movs	r3, #10
 8008820:	e02b      	b.n	800887a <HAL_GPIO_Init+0x26a>
 8008822:	2308      	movs	r3, #8
 8008824:	e029      	b.n	800887a <HAL_GPIO_Init+0x26a>
 8008826:	2307      	movs	r3, #7
 8008828:	e027      	b.n	800887a <HAL_GPIO_Init+0x26a>
 800882a:	2306      	movs	r3, #6
 800882c:	e025      	b.n	800887a <HAL_GPIO_Init+0x26a>
 800882e:	2305      	movs	r3, #5
 8008830:	e023      	b.n	800887a <HAL_GPIO_Init+0x26a>
 8008832:	2304      	movs	r3, #4
 8008834:	e021      	b.n	800887a <HAL_GPIO_Init+0x26a>
 8008836:	2303      	movs	r3, #3
 8008838:	e01f      	b.n	800887a <HAL_GPIO_Init+0x26a>
 800883a:	2302      	movs	r3, #2
 800883c:	e01d      	b.n	800887a <HAL_GPIO_Init+0x26a>
 800883e:	2301      	movs	r3, #1
 8008840:	e01b      	b.n	800887a <HAL_GPIO_Init+0x26a>
 8008842:	bf00      	nop
 8008844:	58000080 	.word	0x58000080
 8008848:	58024400 	.word	0x58024400
 800884c:	58000400 	.word	0x58000400
 8008850:	58020000 	.word	0x58020000
 8008854:	58020400 	.word	0x58020400
 8008858:	58020800 	.word	0x58020800
 800885c:	58020c00 	.word	0x58020c00
 8008860:	58021000 	.word	0x58021000
 8008864:	58021400 	.word	0x58021400
 8008868:	58021800 	.word	0x58021800
 800886c:	58021c00 	.word	0x58021c00
 8008870:	58022000 	.word	0x58022000
 8008874:	58022400 	.word	0x58022400
 8008878:	2300      	movs	r3, #0
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	f002 0203 	and.w	r2, r2, #3
 8008880:	0092      	lsls	r2, r2, #2
 8008882:	4093      	lsls	r3, r2
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	4313      	orrs	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800888a:	4938      	ldr	r1, [pc, #224]	@ (800896c <HAL_GPIO_Init+0x35c>)
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	089b      	lsrs	r3, r3, #2
 8008890:	3302      	adds	r3, #2
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	43db      	mvns	r3, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	4013      	ands	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	4013      	ands	r3, r2
 80088d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80088ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	43db      	mvns	r3, r3
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	4013      	ands	r3, r2
 8008902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	43db      	mvns	r3, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	4013      	ands	r3, r2
 800892c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	3301      	adds	r3, #1
 800894c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	f47f ae63 	bne.w	8008624 <HAL_GPIO_Init+0x14>
  }
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	3724      	adds	r7, #36	@ 0x24
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	58000400 	.word	0x58000400

08008970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691a      	ldr	r2, [r3, #16]
 8008980:	887b      	ldrh	r3, [r7, #2]
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008988:	2301      	movs	r3, #1
 800898a:	73fb      	strb	r3, [r7, #15]
 800898c:	e001      	b.n	8008992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
 80089ac:	4613      	mov	r3, r2
 80089ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089b0:	787b      	ldrb	r3, [r7, #1]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80089bc:	e003      	b.n	80089c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	041a      	lsls	r2, r3, #16
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	619a      	str	r2, [r3, #24]
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e08b      	b.n	8008afe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fa fe38 	bl	8003670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2224      	movs	r2, #36	@ 0x24
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0201 	bic.w	r2, r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d107      	bne.n	8008a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a4a:	609a      	str	r2, [r3, #8]
 8008a4c:	e006      	b.n	8008a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d108      	bne.n	8008a76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a72:	605a      	str	r2, [r3, #4]
 8008a74:	e007      	b.n	8008a86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6859      	ldr	r1, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b1d      	ldr	r3, [pc, #116]	@ (8008b08 <HAL_I2C_Init+0x134>)
 8008a92:	430b      	orrs	r3, r1
 8008a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	69d9      	ldr	r1, [r3, #28]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1a      	ldr	r2, [r3, #32]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0201 	orr.w	r2, r2, #1
 8008ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	02008000 	.word	0x02008000

08008b0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	817b      	strh	r3, [r7, #10]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	813b      	strh	r3, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	f040 80fd 	bne.w	8008d2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_I2C_Mem_Read+0x34>
 8008b3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0f1      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_I2C_Mem_Read+0x4e>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e0ea      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b62:	f7fb fe7d 	bl	8004860 <HAL_GetTick>
 8008b66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	2319      	movs	r3, #25
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f95b 	bl	8008e30 <I2C_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0d5      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2222      	movs	r2, #34	@ 0x22
 8008b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2240      	movs	r2, #64	@ 0x40
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bac:	88f8      	ldrh	r0, [r7, #6]
 8008bae:	893a      	ldrh	r2, [r7, #8]
 8008bb0:	8979      	ldrh	r1, [r7, #10]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	4603      	mov	r3, r0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f8bf 	bl	8008d40 <I2C_RequestMemoryRead>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0ad      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2bff      	cmp	r3, #255	@ 0xff
 8008bdc:	d90e      	bls.n	8008bfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	22ff      	movs	r2, #255	@ 0xff
 8008be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	8979      	ldrh	r1, [r7, #10]
 8008bec:	4b52      	ldr	r3, [pc, #328]	@ (8008d38 <HAL_I2C_Mem_Read+0x22c>)
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fadf 	bl	80091b8 <I2C_TransferConfig>
 8008bfa:	e00f      	b.n	8008c1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	8979      	ldrh	r1, [r7, #10]
 8008c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d38 <HAL_I2C_Mem_Read+0x22c>)
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 face 	bl	80091b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	2200      	movs	r2, #0
 8008c24:	2104      	movs	r1, #4
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f902 	bl	8008e30 <I2C_WaitOnFlagUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e07c      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d034      	beq.n	8008cdc <HAL_I2C_Mem_Read+0x1d0>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d130      	bne.n	8008cdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c80:	2200      	movs	r2, #0
 8008c82:	2180      	movs	r1, #128	@ 0x80
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f8d3 	bl	8008e30 <I2C_WaitOnFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e04d      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2bff      	cmp	r3, #255	@ 0xff
 8008c9c:	d90e      	bls.n	8008cbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	22ff      	movs	r2, #255	@ 0xff
 8008ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	8979      	ldrh	r1, [r7, #10]
 8008cac:	2300      	movs	r3, #0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fa7f 	bl	80091b8 <I2C_TransferConfig>
 8008cba:	e00f      	b.n	8008cdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	8979      	ldrh	r1, [r7, #10]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fa6e 	bl	80091b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d19a      	bne.n	8008c1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f940 	bl	8008f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e01a      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6859      	ldr	r1, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <HAL_I2C_Mem_Read+0x230>)
 8008d0e:	400b      	ands	r3, r1
 8008d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e000      	b.n	8008d30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
  }
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	80002400 	.word	0x80002400
 8008d3c:	fe00e800 	.word	0xfe00e800

08008d40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	817b      	strh	r3, [r7, #10]
 8008d52:	460b      	mov	r3, r1
 8008d54:	813b      	strh	r3, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	8979      	ldrh	r1, [r7, #10]
 8008d60:	4b20      	ldr	r3, [pc, #128]	@ (8008de4 <I2C_RequestMemoryRead+0xa4>)
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 fa26 	bl	80091b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	69b9      	ldr	r1, [r7, #24]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f8b6 	bl	8008ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e02c      	b.n	8008dda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d105      	bne.n	8008d92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d86:	893b      	ldrh	r3, [r7, #8]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d90:	e015      	b.n	8008dbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d92:	893b      	ldrh	r3, [r7, #8]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	69b9      	ldr	r1, [r7, #24]
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f89c 	bl	8008ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e012      	b.n	8008dda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db4:	893b      	ldrh	r3, [r7, #8]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2140      	movs	r1, #64	@ 0x40
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 f831 	bl	8008e30 <I2C_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	80002000 	.word	0x80002000

08008de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d103      	bne.n	8008e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d007      	beq.n	8008e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0201 	orr.w	r2, r2, #1
 8008e22:	619a      	str	r2, [r3, #24]
  }
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e40:	e03b      	b.n	8008eba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f8d6 	bl	8008ff8 <I2C_IsErrorOccurred>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e041      	b.n	8008eda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5c:	d02d      	beq.n	8008eba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5e:	f7fb fcff 	bl	8004860 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d122      	bne.n	8008eba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d113      	bne.n	8008eba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e96:	f043 0220 	orr.w	r2, r3, #32
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e00f      	b.n	8008eda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699a      	ldr	r2, [r3, #24]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	bf0c      	ite	eq
 8008eca:	2301      	moveq	r3, #1
 8008ecc:	2300      	movne	r3, #0
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d0b4      	beq.n	8008e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008eee:	e033      	b.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f87f 	bl	8008ff8 <I2C_IsErrorOccurred>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e031      	b.n	8008f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	d025      	beq.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0c:	f7fb fca8 	bl	8004860 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d11a      	bne.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d013      	beq.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f34:	f043 0220 	orr.w	r2, r3, #32
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e007      	b.n	8008f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d1c4      	bne.n	8008ef0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f7c:	e02f      	b.n	8008fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	68b9      	ldr	r1, [r7, #8]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f838 	bl	8008ff8 <I2C_IsErrorOccurred>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e02d      	b.n	8008fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7fb fc65 	bl	8004860 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11a      	bne.n	8008fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d013      	beq.n	8008fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fba:	f043 0220 	orr.w	r2, r3, #32
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e007      	b.n	8008fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d1c8      	bne.n	8008f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	@ 0x28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b00      	cmp	r3, #0
 8009022:	d068      	beq.n	80090f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2210      	movs	r2, #16
 800902a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800902c:	e049      	b.n	80090c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d045      	beq.n	80090c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009036:	f7fb fc13 	bl	8004860 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <I2C_IsErrorOccurred+0x54>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d13a      	bne.n	80090c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800905e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800906a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800906e:	d121      	bne.n	80090b4 <I2C_IsErrorOccurred+0xbc>
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009076:	d01d      	beq.n	80090b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2b20      	cmp	r3, #32
 800907c:	d01a      	beq.n	80090b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800908c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800908e:	f7fb fbe7 	bl	8004860 <HAL_GetTick>
 8009092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009094:	e00e      	b.n	80090b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009096:	f7fb fbe3 	bl	8004860 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b19      	cmp	r3, #25
 80090a2:	d907      	bls.n	80090b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	f043 0320 	orr.w	r3, r3, #32
 80090aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80090b2:	e006      	b.n	80090c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d1e9      	bne.n	8009096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f003 0320 	and.w	r3, r3, #32
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d003      	beq.n	80090d8 <I2C_IsErrorOccurred+0xe0>
 80090d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0aa      	beq.n	800902e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d103      	bne.n	80090e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2220      	movs	r2, #32
 80090e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	f043 0304 	orr.w	r3, r3, #4
 80090ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009118:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	f043 0308 	orr.w	r3, r3, #8
 8009130:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800913a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	f043 0302 	orr.w	r3, r3, #2
 8009152:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800915c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01c      	beq.n	80091a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff fe3b 	bl	8008de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6859      	ldr	r1, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <I2C_IsErrorOccurred+0x1bc>)
 800917e:	400b      	ands	r3, r1
 8009180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	431a      	orrs	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80091a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3728      	adds	r7, #40	@ 0x28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	fe00e800 	.word	0xfe00e800

080091b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	817b      	strh	r3, [r7, #10]
 80091c6:	4613      	mov	r3, r2
 80091c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091ca:	897b      	ldrh	r3, [r7, #10]
 80091cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091d0:	7a7b      	ldrb	r3, [r7, #9]
 80091d2:	041b      	lsls	r3, r3, #16
 80091d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091d8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091e6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	0d5b      	lsrs	r3, r3, #21
 80091f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80091f6:	4b08      	ldr	r3, [pc, #32]	@ (8009218 <I2C_TransferConfig+0x60>)
 80091f8:	430b      	orrs	r3, r1
 80091fa:	43db      	mvns	r3, r3
 80091fc:	ea02 0103 	and.w	r1, r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	03ff63ff 	.word	0x03ff63ff

0800921c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b20      	cmp	r3, #32
 8009230:	d138      	bne.n	80092a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800923c:	2302      	movs	r3, #2
 800923e:	e032      	b.n	80092a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2224      	movs	r2, #36	@ 0x24
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0201 	bic.w	r2, r2, #1
 800925e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800926e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6819      	ldr	r1, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0201 	orr.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	e000      	b.n	80092a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092a4:	2302      	movs	r3, #2
  }
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d139      	bne.n	800933c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e033      	b.n	800933e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2224      	movs	r2, #36	@ 0x24
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009304:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009354:	4b19      	ldr	r3, [pc, #100]	@ (80093bc <HAL_PWREx_ConfigSupply+0x70>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b04      	cmp	r3, #4
 800935e:	d00a      	beq.n	8009376 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009360:	4b16      	ldr	r3, [pc, #88]	@ (80093bc <HAL_PWREx_ConfigSupply+0x70>)
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d001      	beq.n	8009372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e01f      	b.n	80093b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e01d      	b.n	80093b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009376:	4b11      	ldr	r3, [pc, #68]	@ (80093bc <HAL_PWREx_ConfigSupply+0x70>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f023 0207 	bic.w	r2, r3, #7
 800937e:	490f      	ldr	r1, [pc, #60]	@ (80093bc <HAL_PWREx_ConfigSupply+0x70>)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4313      	orrs	r3, r2
 8009384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009386:	f7fb fa6b 	bl	8004860 <HAL_GetTick>
 800938a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800938c:	e009      	b.n	80093a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800938e:	f7fb fa67 	bl	8004860 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800939c:	d901      	bls.n	80093a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e007      	b.n	80093b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80093a2:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <HAL_PWREx_ConfigSupply+0x70>)
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ae:	d1ee      	bne.n	800938e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	58024800 	.word	0x58024800

080093c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	@ 0x30
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f000 bc48 	b.w	8009c64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8088 	beq.w	80094f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093e2:	4b99      	ldr	r3, [pc, #612]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093ec:	4b96      	ldr	r3, [pc, #600]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d007      	beq.n	8009408 <HAL_RCC_OscConfig+0x48>
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	2b18      	cmp	r3, #24
 80093fc:	d111      	bne.n	8009422 <HAL_RCC_OscConfig+0x62>
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d10c      	bne.n	8009422 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009408:	4b8f      	ldr	r3, [pc, #572]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d06d      	beq.n	80094f0 <HAL_RCC_OscConfig+0x130>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d169      	bne.n	80094f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	f000 bc21 	b.w	8009c64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800942a:	d106      	bne.n	800943a <HAL_RCC_OscConfig+0x7a>
 800942c:	4b86      	ldr	r3, [pc, #536]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a85      	ldr	r2, [pc, #532]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e02e      	b.n	8009498 <HAL_RCC_OscConfig+0xd8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10c      	bne.n	800945c <HAL_RCC_OscConfig+0x9c>
 8009442:	4b81      	ldr	r3, [pc, #516]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a80      	ldr	r2, [pc, #512]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	4b7e      	ldr	r3, [pc, #504]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a7d      	ldr	r2, [pc, #500]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009458:	6013      	str	r3, [r2, #0]
 800945a:	e01d      	b.n	8009498 <HAL_RCC_OscConfig+0xd8>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009464:	d10c      	bne.n	8009480 <HAL_RCC_OscConfig+0xc0>
 8009466:	4b78      	ldr	r3, [pc, #480]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a77      	ldr	r2, [pc, #476]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800946c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4b75      	ldr	r3, [pc, #468]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a74      	ldr	r2, [pc, #464]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e00b      	b.n	8009498 <HAL_RCC_OscConfig+0xd8>
 8009480:	4b71      	ldr	r3, [pc, #452]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a70      	ldr	r2, [pc, #448]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4b6e      	ldr	r3, [pc, #440]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a6d      	ldr	r2, [pc, #436]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d013      	beq.n	80094c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a0:	f7fb f9de 	bl	8004860 <HAL_GetTick>
 80094a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094a6:	e008      	b.n	80094ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094a8:	f7fb f9da 	bl	8004860 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b64      	cmp	r3, #100	@ 0x64
 80094b4:	d901      	bls.n	80094ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e3d4      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ba:	4b63      	ldr	r3, [pc, #396]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0f0      	beq.n	80094a8 <HAL_RCC_OscConfig+0xe8>
 80094c6:	e014      	b.n	80094f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c8:	f7fb f9ca 	bl	8004860 <HAL_GetTick>
 80094cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d0:	f7fb f9c6 	bl	8004860 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b64      	cmp	r3, #100	@ 0x64
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e3c0      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094e2:	4b59      	ldr	r3, [pc, #356]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1f0      	bne.n	80094d0 <HAL_RCC_OscConfig+0x110>
 80094ee:	e000      	b.n	80094f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80ca 	beq.w	8009694 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009500:	4b51      	ldr	r3, [pc, #324]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009508:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800950a:	4b4f      	ldr	r3, [pc, #316]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d007      	beq.n	8009526 <HAL_RCC_OscConfig+0x166>
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	2b18      	cmp	r3, #24
 800951a:	d156      	bne.n	80095ca <HAL_RCC_OscConfig+0x20a>
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d151      	bne.n	80095ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009526:	4b48      	ldr	r3, [pc, #288]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0304 	and.w	r3, r3, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <HAL_RCC_OscConfig+0x17e>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e392      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800953e:	4b42      	ldr	r3, [pc, #264]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f023 0219 	bic.w	r2, r3, #25
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	493f      	ldr	r1, [pc, #252]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800954c:	4313      	orrs	r3, r2
 800954e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fb f986 	bl	8004860 <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009558:	f7fb f982 	bl	8004860 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e37c      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800956a:	4b37      	ldr	r3, [pc, #220]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f0      	beq.n	8009558 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009576:	f7fb f9a3 	bl	80048c0 <HAL_GetREVID>
 800957a:	4603      	mov	r3, r0
 800957c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009580:	4293      	cmp	r3, r2
 8009582:	d817      	bhi.n	80095b4 <HAL_RCC_OscConfig+0x1f4>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b40      	cmp	r3, #64	@ 0x40
 800958a:	d108      	bne.n	800959e <HAL_RCC_OscConfig+0x1de>
 800958c:	4b2e      	ldr	r3, [pc, #184]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009594:	4a2c      	ldr	r2, [pc, #176]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800959a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800959c:	e07a      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800959e:	4b2a      	ldr	r3, [pc, #168]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	031b      	lsls	r3, r3, #12
 80095ac:	4926      	ldr	r1, [pc, #152]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095b2:	e06f      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b4:	4b24      	ldr	r3, [pc, #144]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	061b      	lsls	r3, r3, #24
 80095c2:	4921      	ldr	r1, [pc, #132]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095c8:	e064      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d047      	beq.n	8009662 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f023 0219 	bic.w	r2, r3, #25
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	491a      	ldr	r1, [pc, #104]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7fb f93c 	bl	8004860 <HAL_GetTick>
 80095e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095ec:	f7fb f938 	bl	8004860 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e332      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095fe:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f0      	beq.n	80095ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800960a:	f7fb f959 	bl	80048c0 <HAL_GetREVID>
 800960e:	4603      	mov	r3, r0
 8009610:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009614:	4293      	cmp	r3, r2
 8009616:	d819      	bhi.n	800964c <HAL_RCC_OscConfig+0x28c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b40      	cmp	r3, #64	@ 0x40
 800961e:	d108      	bne.n	8009632 <HAL_RCC_OscConfig+0x272>
 8009620:	4b09      	ldr	r3, [pc, #36]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009628:	4a07      	ldr	r2, [pc, #28]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 800962a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800962e:	6053      	str	r3, [r2, #4]
 8009630:	e030      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
 8009632:	4b05      	ldr	r3, [pc, #20]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	031b      	lsls	r3, r3, #12
 8009640:	4901      	ldr	r1, [pc, #4]	@ (8009648 <HAL_RCC_OscConfig+0x288>)
 8009642:	4313      	orrs	r3, r2
 8009644:	604b      	str	r3, [r1, #4]
 8009646:	e025      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
 8009648:	58024400 	.word	0x58024400
 800964c:	4b9a      	ldr	r3, [pc, #616]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	061b      	lsls	r3, r3, #24
 800965a:	4997      	ldr	r1, [pc, #604]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800965c:	4313      	orrs	r3, r2
 800965e:	604b      	str	r3, [r1, #4]
 8009660:	e018      	b.n	8009694 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009662:	4b95      	ldr	r3, [pc, #596]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a94      	ldr	r2, [pc, #592]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800966e:	f7fb f8f7 	bl	8004860 <HAL_GetTick>
 8009672:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009674:	e008      	b.n	8009688 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009676:	f7fb f8f3 	bl	8004860 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	2b02      	cmp	r3, #2
 8009682:	d901      	bls.n	8009688 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e2ed      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009688:	4b8b      	ldr	r3, [pc, #556]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1f0      	bne.n	8009676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 80a9 	beq.w	80097f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096a2:	4b85      	ldr	r3, [pc, #532]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096ac:	4b82      	ldr	r3, [pc, #520]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80096ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d007      	beq.n	80096c8 <HAL_RCC_OscConfig+0x308>
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	2b18      	cmp	r3, #24
 80096bc:	d13a      	bne.n	8009734 <HAL_RCC_OscConfig+0x374>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d135      	bne.n	8009734 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096c8:	4b7b      	ldr	r3, [pc, #492]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <HAL_RCC_OscConfig+0x320>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	2b80      	cmp	r3, #128	@ 0x80
 80096da:	d001      	beq.n	80096e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e2c1      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096e0:	f7fb f8ee 	bl	80048c0 <HAL_GetREVID>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d817      	bhi.n	800971e <HAL_RCC_OscConfig+0x35e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	d108      	bne.n	8009708 <HAL_RCC_OscConfig+0x348>
 80096f6:	4b70      	ldr	r3, [pc, #448]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80096fe:	4a6e      	ldr	r2, [pc, #440]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009700:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009704:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009706:	e075      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009708:	4b6b      	ldr	r3, [pc, #428]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	069b      	lsls	r3, r3, #26
 8009716:	4968      	ldr	r1, [pc, #416]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009718:	4313      	orrs	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800971c:	e06a      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800971e:	4b66      	ldr	r3, [pc, #408]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	061b      	lsls	r3, r3, #24
 800972c:	4962      	ldr	r1, [pc, #392]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800972e:	4313      	orrs	r3, r2
 8009730:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009732:	e05f      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d042      	beq.n	80097c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800973c:	4b5e      	ldr	r3, [pc, #376]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a5d      	ldr	r2, [pc, #372]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009748:	f7fb f88a 	bl	8004860 <HAL_GetTick>
 800974c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800974e:	e008      	b.n	8009762 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009750:	f7fb f886 	bl	8004860 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e280      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009762:	4b55      	ldr	r3, [pc, #340]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0f0      	beq.n	8009750 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800976e:	f7fb f8a7 	bl	80048c0 <HAL_GetREVID>
 8009772:	4603      	mov	r3, r0
 8009774:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009778:	4293      	cmp	r3, r2
 800977a:	d817      	bhi.n	80097ac <HAL_RCC_OscConfig+0x3ec>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	2b20      	cmp	r3, #32
 8009782:	d108      	bne.n	8009796 <HAL_RCC_OscConfig+0x3d6>
 8009784:	4b4c      	ldr	r3, [pc, #304]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800978c:	4a4a      	ldr	r2, [pc, #296]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800978e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009792:	6053      	str	r3, [r2, #4]
 8009794:	e02e      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
 8009796:	4b48      	ldr	r3, [pc, #288]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	069b      	lsls	r3, r3, #26
 80097a4:	4944      	ldr	r1, [pc, #272]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	604b      	str	r3, [r1, #4]
 80097aa:	e023      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
 80097ac:	4b42      	ldr	r3, [pc, #264]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	061b      	lsls	r3, r3, #24
 80097ba:	493f      	ldr	r1, [pc, #252]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	60cb      	str	r3, [r1, #12]
 80097c0:	e018      	b.n	80097f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097c2:	4b3d      	ldr	r3, [pc, #244]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a3c      	ldr	r2, [pc, #240]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ce:	f7fb f847 	bl	8004860 <HAL_GetTick>
 80097d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097d4:	e008      	b.n	80097e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80097d6:	f7fb f843 	bl	8004860 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d901      	bls.n	80097e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e23d      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097e8:	4b33      	ldr	r3, [pc, #204]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f0      	bne.n	80097d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d036      	beq.n	800986e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d019      	beq.n	800983c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009808:	4b2b      	ldr	r3, [pc, #172]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800980a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800980c:	4a2a      	ldr	r2, [pc, #168]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800980e:	f043 0301 	orr.w	r3, r3, #1
 8009812:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009814:	f7fb f824 	bl	8004860 <HAL_GetTick>
 8009818:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800981c:	f7fb f820 	bl	8004860 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e21a      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800982e:	4b22      	ldr	r3, [pc, #136]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0x45c>
 800983a:	e018      	b.n	800986e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800983c:	4b1e      	ldr	r3, [pc, #120]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 800983e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009840:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009848:	f7fb f80a 	bl	8004860 <HAL_GetTick>
 800984c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009850:	f7fb f806 	bl	8004860 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b02      	cmp	r3, #2
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e200      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009862:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d039      	beq.n	80098ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01c      	beq.n	80098bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009882:	4b0d      	ldr	r3, [pc, #52]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 8009888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800988c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800988e:	f7fa ffe7 	bl	8004860 <HAL_GetTick>
 8009892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009894:	e008      	b.n	80098a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009896:	f7fa ffe3 	bl	8004860 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e1dd      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098a8:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <HAL_RCC_OscConfig+0x4f8>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0f0      	beq.n	8009896 <HAL_RCC_OscConfig+0x4d6>
 80098b4:	e01b      	b.n	80098ee <HAL_RCC_OscConfig+0x52e>
 80098b6:	bf00      	nop
 80098b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098bc:	4b9b      	ldr	r3, [pc, #620]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a9a      	ldr	r2, [pc, #616]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 80098c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098c8:	f7fa ffca 	bl	8004860 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098d0:	f7fa ffc6 	bl	8004860 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e1c0      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098e2:	4b92      	ldr	r3, [pc, #584]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f0      	bne.n	80098d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0304 	and.w	r3, r3, #4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8081 	beq.w	80099fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098fc:	4b8c      	ldr	r3, [pc, #560]	@ (8009b30 <HAL_RCC_OscConfig+0x770>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a8b      	ldr	r2, [pc, #556]	@ (8009b30 <HAL_RCC_OscConfig+0x770>)
 8009902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009908:	f7fa ffaa 	bl	8004860 <HAL_GetTick>
 800990c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009910:	f7fa ffa6 	bl	8004860 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	@ 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e1a0      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009922:	4b83      	ldr	r3, [pc, #524]	@ (8009b30 <HAL_RCC_OscConfig+0x770>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0f0      	beq.n	8009910 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d106      	bne.n	8009944 <HAL_RCC_OscConfig+0x584>
 8009936:	4b7d      	ldr	r3, [pc, #500]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993a:	4a7c      	ldr	r2, [pc, #496]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800993c:	f043 0301 	orr.w	r3, r3, #1
 8009940:	6713      	str	r3, [r2, #112]	@ 0x70
 8009942:	e02d      	b.n	80099a0 <HAL_RCC_OscConfig+0x5e0>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10c      	bne.n	8009966 <HAL_RCC_OscConfig+0x5a6>
 800994c:	4b77      	ldr	r3, [pc, #476]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800994e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009950:	4a76      	ldr	r2, [pc, #472]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	6713      	str	r3, [r2, #112]	@ 0x70
 8009958:	4b74      	ldr	r3, [pc, #464]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800995a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800995c:	4a73      	ldr	r2, [pc, #460]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800995e:	f023 0304 	bic.w	r3, r3, #4
 8009962:	6713      	str	r3, [r2, #112]	@ 0x70
 8009964:	e01c      	b.n	80099a0 <HAL_RCC_OscConfig+0x5e0>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	2b05      	cmp	r3, #5
 800996c:	d10c      	bne.n	8009988 <HAL_RCC_OscConfig+0x5c8>
 800996e:	4b6f      	ldr	r3, [pc, #444]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009972:	4a6e      	ldr	r2, [pc, #440]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009974:	f043 0304 	orr.w	r3, r3, #4
 8009978:	6713      	str	r3, [r2, #112]	@ 0x70
 800997a:	4b6c      	ldr	r3, [pc, #432]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800997c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800997e:	4a6b      	ldr	r2, [pc, #428]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	6713      	str	r3, [r2, #112]	@ 0x70
 8009986:	e00b      	b.n	80099a0 <HAL_RCC_OscConfig+0x5e0>
 8009988:	4b68      	ldr	r3, [pc, #416]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800998c:	4a67      	ldr	r2, [pc, #412]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800998e:	f023 0301 	bic.w	r3, r3, #1
 8009992:	6713      	str	r3, [r2, #112]	@ 0x70
 8009994:	4b65      	ldr	r3, [pc, #404]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009998:	4a64      	ldr	r2, [pc, #400]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 800999a:	f023 0304 	bic.w	r3, r3, #4
 800999e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a8:	f7fa ff5a 	bl	8004860 <HAL_GetTick>
 80099ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099ae:	e00a      	b.n	80099c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b0:	f7fa ff56 	bl	8004860 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099be:	4293      	cmp	r3, r2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e14e      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099c6:	4b59      	ldr	r3, [pc, #356]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 80099c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0ee      	beq.n	80099b0 <HAL_RCC_OscConfig+0x5f0>
 80099d2:	e014      	b.n	80099fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d4:	f7fa ff44 	bl	8004860 <HAL_GetTick>
 80099d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099da:	e00a      	b.n	80099f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099dc:	f7fa ff40 	bl	8004860 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d901      	bls.n	80099f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e138      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099f2:	4b4e      	ldr	r3, [pc, #312]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 80099f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1ee      	bne.n	80099dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 812d 	beq.w	8009c62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009a08:	4b48      	ldr	r3, [pc, #288]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a10:	2b18      	cmp	r3, #24
 8009a12:	f000 80bd 	beq.w	8009b90 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	f040 809e 	bne.w	8009b5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a20:	4b42      	ldr	r3, [pc, #264]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a41      	ldr	r2, [pc, #260]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2c:	f7fa ff18 	bl	8004860 <HAL_GetTick>
 8009a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a34:	f7fa ff14 	bl	8004860 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e10e      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f0      	bne.n	8009a34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a52:	4b36      	ldr	r3, [pc, #216]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a56:	4b37      	ldr	r3, [pc, #220]	@ (8009b34 <HAL_RCC_OscConfig+0x774>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009a62:	0112      	lsls	r2, r2, #4
 8009a64:	430a      	orrs	r2, r1
 8009a66:	4931      	ldr	r1, [pc, #196]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a70:	3b01      	subs	r3, #1
 8009a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	025b      	lsls	r3, r3, #9
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	431a      	orrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a86:	3b01      	subs	r3, #1
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a94:	3b01      	subs	r3, #1
 8009a96:	061b      	lsls	r3, r3, #24
 8009a98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a9c:	4923      	ldr	r1, [pc, #140]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009aa2:	4b22      	ldr	r3, [pc, #136]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa6:	4a21      	ldr	r2, [pc, #132]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009aa8:	f023 0301 	bic.w	r3, r3, #1
 8009aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009aae:	4b1f      	ldr	r3, [pc, #124]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab2:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <HAL_RCC_OscConfig+0x778>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009aba:	00d2      	lsls	r2, r2, #3
 8009abc:	491b      	ldr	r1, [pc, #108]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	f023 020c 	bic.w	r2, r3, #12
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ace:	4917      	ldr	r1, [pc, #92]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ad4:	4b15      	ldr	r3, [pc, #84]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad8:	f023 0202 	bic.w	r2, r3, #2
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae0:	4912      	ldr	r1, [pc, #72]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ae6:	4b11      	ldr	r3, [pc, #68]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	4a10      	ldr	r2, [pc, #64]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af6:	4a0d      	ldr	r2, [pc, #52]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009afe:	4b0b      	ldr	r3, [pc, #44]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	4a0a      	ldr	r2, [pc, #40]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009b0a:	4b08      	ldr	r3, [pc, #32]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0e:	4a07      	ldr	r2, [pc, #28]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b10:	f043 0301 	orr.w	r3, r3, #1
 8009b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b16:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a04      	ldr	r2, [pc, #16]	@ (8009b2c <HAL_RCC_OscConfig+0x76c>)
 8009b1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b22:	f7fa fe9d 	bl	8004860 <HAL_GetTick>
 8009b26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b28:	e011      	b.n	8009b4e <HAL_RCC_OscConfig+0x78e>
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400
 8009b30:	58024800 	.word	0x58024800
 8009b34:	fffffc0c 	.word	0xfffffc0c
 8009b38:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b3c:	f7fa fe90 	bl	8004860 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e08a      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b4e:	4b47      	ldr	r3, [pc, #284]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f0      	beq.n	8009b3c <HAL_RCC_OscConfig+0x77c>
 8009b5a:	e082      	b.n	8009c62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b5c:	4b43      	ldr	r3, [pc, #268]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a42      	ldr	r2, [pc, #264]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b68:	f7fa fe7a 	bl	8004860 <HAL_GetTick>
 8009b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b70:	f7fa fe76 	bl	8004860 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e070      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b82:	4b3a      	ldr	r3, [pc, #232]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1f0      	bne.n	8009b70 <HAL_RCC_OscConfig+0x7b0>
 8009b8e:	e068      	b.n	8009c62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b90:	4b36      	ldr	r3, [pc, #216]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b96:	4b35      	ldr	r3, [pc, #212]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d031      	beq.n	8009c08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f003 0203 	and.w	r2, r3, #3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d12a      	bne.n	8009c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	091b      	lsrs	r3, r3, #4
 8009bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d122      	bne.n	8009c08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d11a      	bne.n	8009c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	0a5b      	lsrs	r3, r3, #9
 8009bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d111      	bne.n	8009c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	0c1b      	lsrs	r3, r3, #16
 8009be8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d108      	bne.n	8009c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d001      	beq.n	8009c0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e02b      	b.n	8009c64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009c0c:	4b17      	ldr	r3, [pc, #92]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c10:	08db      	lsrs	r3, r3, #3
 8009c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d01f      	beq.n	8009c62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009c22:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c26:	4a11      	ldr	r2, [pc, #68]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c2e:	f7fa fe17 	bl	8004860 <HAL_GetTick>
 8009c32:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009c34:	bf00      	nop
 8009c36:	f7fa fe13 	bl	8004860 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d0f9      	beq.n	8009c36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c42:	4b0a      	ldr	r3, [pc, #40]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c46:	4b0a      	ldr	r3, [pc, #40]	@ (8009c70 <HAL_RCC_OscConfig+0x8b0>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c4e:	00d2      	lsls	r2, r2, #3
 8009c50:	4906      	ldr	r1, [pc, #24]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009c56:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5a:	4a04      	ldr	r2, [pc, #16]	@ (8009c6c <HAL_RCC_OscConfig+0x8ac>)
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3730      	adds	r7, #48	@ 0x30
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	ffff0007 	.word	0xffff0007

08009c74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e19c      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c88:	4b8a      	ldr	r3, [pc, #552]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d910      	bls.n	8009cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c96:	4b87      	ldr	r3, [pc, #540]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f023 020f 	bic.w	r2, r3, #15
 8009c9e:	4985      	ldr	r1, [pc, #532]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ca6:	4b83      	ldr	r3, [pc, #524]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d001      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e184      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d010      	beq.n	8009ce6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691a      	ldr	r2, [r3, #16]
 8009cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d908      	bls.n	8009ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cd4:	4b78      	ldr	r3, [pc, #480]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	4975      	ldr	r1, [pc, #468]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d010      	beq.n	8009d14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	4b70      	ldr	r3, [pc, #448]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d908      	bls.n	8009d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d02:	4b6d      	ldr	r3, [pc, #436]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	496a      	ldr	r1, [pc, #424]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d010      	beq.n	8009d42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	699a      	ldr	r2, [r3, #24]
 8009d24:	4b64      	ldr	r3, [pc, #400]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d908      	bls.n	8009d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d30:	4b61      	ldr	r3, [pc, #388]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	495e      	ldr	r1, [pc, #376]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d010      	beq.n	8009d70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	69da      	ldr	r2, [r3, #28]
 8009d52:	4b59      	ldr	r3, [pc, #356]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d908      	bls.n	8009d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d5e:	4b56      	ldr	r3, [pc, #344]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	4953      	ldr	r1, [pc, #332]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d010      	beq.n	8009d9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	4b4d      	ldr	r3, [pc, #308]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d908      	bls.n	8009d9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	f023 020f 	bic.w	r2, r3, #15
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4947      	ldr	r1, [pc, #284]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d055      	beq.n	8009e56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009daa:	4b43      	ldr	r3, [pc, #268]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	4940      	ldr	r1, [pc, #256]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d107      	bne.n	8009dd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d121      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0f6      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d107      	bne.n	8009dec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ddc:	4b36      	ldr	r3, [pc, #216]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d115      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e0ea      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d107      	bne.n	8009e04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009df4:	4b30      	ldr	r3, [pc, #192]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d109      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e0de      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e04:	4b2c      	ldr	r3, [pc, #176]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e0d6      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e14:	4b28      	ldr	r3, [pc, #160]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f023 0207 	bic.w	r2, r3, #7
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4925      	ldr	r1, [pc, #148]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e26:	f7fa fd1b 	bl	8004860 <HAL_GetTick>
 8009e2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e2c:	e00a      	b.n	8009e44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e2e:	f7fa fd17 	bl	8004860 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e0be      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e44:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d1eb      	bne.n	8009e2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d010      	beq.n	8009e84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	4b14      	ldr	r3, [pc, #80]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f003 030f 	and.w	r3, r3, #15
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d208      	bcs.n	8009e84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e72:	4b11      	ldr	r3, [pc, #68]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	f023 020f 	bic.w	r2, r3, #15
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	490e      	ldr	r1, [pc, #56]	@ (8009eb8 <HAL_RCC_ClockConfig+0x244>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e84:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d214      	bcs.n	8009ebc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e92:	4b08      	ldr	r3, [pc, #32]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 020f 	bic.w	r2, r3, #15
 8009e9a:	4906      	ldr	r1, [pc, #24]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ea2:	4b04      	ldr	r3, [pc, #16]	@ (8009eb4 <HAL_RCC_ClockConfig+0x240>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d005      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e086      	b.n	8009fc2 <HAL_RCC_ClockConfig+0x34e>
 8009eb4:	52002000 	.word	0x52002000
 8009eb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d208      	bcs.n	8009eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	4939      	ldr	r1, [pc, #228]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d010      	beq.n	8009f18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695a      	ldr	r2, [r3, #20]
 8009efa:	4b34      	ldr	r3, [pc, #208]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d208      	bcs.n	8009f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f06:	4b31      	ldr	r3, [pc, #196]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	492e      	ldr	r1, [pc, #184]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0310 	and.w	r3, r3, #16
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d010      	beq.n	8009f46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	4b28      	ldr	r3, [pc, #160]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d208      	bcs.n	8009f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f34:	4b25      	ldr	r3, [pc, #148]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	4922      	ldr	r1, [pc, #136]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d010      	beq.n	8009f74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69da      	ldr	r2, [r3, #28]
 8009f56:	4b1d      	ldr	r3, [pc, #116]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d208      	bcs.n	8009f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f62:	4b1a      	ldr	r3, [pc, #104]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	4917      	ldr	r1, [pc, #92]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f74:	f000 f834 	bl	8009fe0 <HAL_RCC_GetSysClockFreq>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	4b14      	ldr	r3, [pc, #80]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	4912      	ldr	r1, [pc, #72]	@ (8009fd0 <HAL_RCC_ClockConfig+0x35c>)
 8009f86:	5ccb      	ldrb	r3, [r1, r3]
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f92:	4b0e      	ldr	r3, [pc, #56]	@ (8009fcc <HAL_RCC_ClockConfig+0x358>)
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8009fd0 <HAL_RCC_ClockConfig+0x35c>)
 8009f9c:	5cd3      	ldrb	r3, [r2, r3]
 8009f9e:	f003 031f 	and.w	r3, r3, #31
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd4 <HAL_RCC_ClockConfig+0x360>)
 8009faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009fac:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <HAL_RCC_ClockConfig+0x364>)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <HAL_RCC_ClockConfig+0x368>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 fd8c 	bl	8003ad4 <HAL_InitTick>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	0801ec50 	.word	0x0801ec50
 8009fd4:	24000098 	.word	0x24000098
 8009fd8:	24000094 	.word	0x24000094
 8009fdc:	2400009c 	.word	0x2400009c

08009fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b089      	sub	sp, #36	@ 0x24
 8009fe4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fe6:	4bb3      	ldr	r3, [pc, #716]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fee:	2b18      	cmp	r3, #24
 8009ff0:	f200 8155 	bhi.w	800a29e <HAL_RCC_GetSysClockFreq+0x2be>
 8009ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ffc <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a061 	.word	0x0800a061
 800a000:	0800a29f 	.word	0x0800a29f
 800a004:	0800a29f 	.word	0x0800a29f
 800a008:	0800a29f 	.word	0x0800a29f
 800a00c:	0800a29f 	.word	0x0800a29f
 800a010:	0800a29f 	.word	0x0800a29f
 800a014:	0800a29f 	.word	0x0800a29f
 800a018:	0800a29f 	.word	0x0800a29f
 800a01c:	0800a087 	.word	0x0800a087
 800a020:	0800a29f 	.word	0x0800a29f
 800a024:	0800a29f 	.word	0x0800a29f
 800a028:	0800a29f 	.word	0x0800a29f
 800a02c:	0800a29f 	.word	0x0800a29f
 800a030:	0800a29f 	.word	0x0800a29f
 800a034:	0800a29f 	.word	0x0800a29f
 800a038:	0800a29f 	.word	0x0800a29f
 800a03c:	0800a08d 	.word	0x0800a08d
 800a040:	0800a29f 	.word	0x0800a29f
 800a044:	0800a29f 	.word	0x0800a29f
 800a048:	0800a29f 	.word	0x0800a29f
 800a04c:	0800a29f 	.word	0x0800a29f
 800a050:	0800a29f 	.word	0x0800a29f
 800a054:	0800a29f 	.word	0x0800a29f
 800a058:	0800a29f 	.word	0x0800a29f
 800a05c:	0800a093 	.word	0x0800a093
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a060:	4b94      	ldr	r3, [pc, #592]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0320 	and.w	r3, r3, #32
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a06c:	4b91      	ldr	r3, [pc, #580]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	08db      	lsrs	r3, r3, #3
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	4a90      	ldr	r2, [pc, #576]	@ (800a2b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a078:	fa22 f303 	lsr.w	r3, r2, r3
 800a07c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a07e:	e111      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a080:	4b8d      	ldr	r3, [pc, #564]	@ (800a2b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a082:	61bb      	str	r3, [r7, #24]
      break;
 800a084:	e10e      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a086:	4b8d      	ldr	r3, [pc, #564]	@ (800a2bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a088:	61bb      	str	r3, [r7, #24]
      break;
 800a08a:	e10b      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a08c:	4b8c      	ldr	r3, [pc, #560]	@ (800a2c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a08e:	61bb      	str	r3, [r7, #24]
      break;
 800a090:	e108      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a092:	4b88      	ldr	r3, [pc, #544]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a09c:	4b85      	ldr	r3, [pc, #532]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a0a8:	4b82      	ldr	r3, [pc, #520]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a0b2:	4b80      	ldr	r3, [pc, #512]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 80e1 	beq.w	800a298 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	f000 8083 	beq.w	800a1e4 <HAL_RCC_GetSysClockFreq+0x204>
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	f200 80a1 	bhi.w	800a228 <HAL_RCC_GetSysClockFreq+0x248>
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <HAL_RCC_GetSysClockFreq+0x114>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d056      	beq.n	800a1a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a0f2:	e099      	b.n	800a228 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0f4:	4b6f      	ldr	r3, [pc, #444]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d02d      	beq.n	800a15c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a100:	4b6c      	ldr	r3, [pc, #432]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	08db      	lsrs	r3, r3, #3
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	4a6b      	ldr	r2, [pc, #428]	@ (800a2b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
 800a110:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	ee07 3a90 	vmov	s15, r3
 800a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12a:	4b62      	ldr	r3, [pc, #392]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a13e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a2c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a156:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a15a:	e087      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a166:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a2c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a16e:	4b51      	ldr	r3, [pc, #324]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a17e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a182:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a2c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a19e:	e065      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	ee07 3a90 	vmov	s15, r3
 800a1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a2cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800a1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b2:	4b40      	ldr	r3, [pc, #256]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a2c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a1e2:	e043      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a2d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f6:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a206:	ed97 6a02 	vldr	s12, [r7, #8]
 800a20a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a2c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a226:	e021      	b.n	800a26c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a232:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a2cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800a236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23a:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a23c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a24e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a2c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a26a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a26c:	4b11      	ldr	r3, [pc, #68]	@ (800a2b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a26e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a270:	0a5b      	lsrs	r3, r3, #9
 800a272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a276:	3301      	adds	r3, #1
 800a278:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a284:	edd7 6a07 	vldr	s13, [r7, #28]
 800a288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a290:	ee17 3a90 	vmov	r3, s15
 800a294:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a296:	e005      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
      break;
 800a29c:	e002      	b.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a29e:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a2a0:	61bb      	str	r3, [r7, #24]
      break;
 800a2a2:	bf00      	nop
  }

  return sysclockfreq;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3724      	adds	r7, #36	@ 0x24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	03d09000 	.word	0x03d09000
 800a2bc:	003d0900 	.word	0x003d0900
 800a2c0:	017d7840 	.word	0x017d7840
 800a2c4:	46000000 	.word	0x46000000
 800a2c8:	4c742400 	.word	0x4c742400
 800a2cc:	4a742400 	.word	0x4a742400
 800a2d0:	4bbebc20 	.word	0x4bbebc20

0800a2d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a2da:	f7ff fe81 	bl	8009fe0 <HAL_RCC_GetSysClockFreq>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <HAL_RCC_GetHCLKFreq+0x50>)
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	490f      	ldr	r1, [pc, #60]	@ (800a328 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2ec:	5ccb      	ldrb	r3, [r1, r3]
 800a2ee:	f003 031f 	and.w	r3, r3, #31
 800a2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a324 <HAL_RCC_GetHCLKFreq+0x50>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f003 030f 	and.w	r3, r3, #15
 800a300:	4a09      	ldr	r2, [pc, #36]	@ (800a328 <HAL_RCC_GetHCLKFreq+0x54>)
 800a302:	5cd3      	ldrb	r3, [r2, r3]
 800a304:	f003 031f 	and.w	r3, r3, #31
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	fa22 f303 	lsr.w	r3, r2, r3
 800a30e:	4a07      	ldr	r2, [pc, #28]	@ (800a32c <HAL_RCC_GetHCLKFreq+0x58>)
 800a310:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a312:	4a07      	ldr	r2, [pc, #28]	@ (800a330 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a318:	4b04      	ldr	r3, [pc, #16]	@ (800a32c <HAL_RCC_GetHCLKFreq+0x58>)
 800a31a:	681b      	ldr	r3, [r3, #0]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	58024400 	.word	0x58024400
 800a328:	0801ec50 	.word	0x0801ec50
 800a32c:	24000098 	.word	0x24000098
 800a330:	24000094 	.word	0x24000094

0800a334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a338:	f7ff ffcc 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800a33c:	4602      	mov	r2, r0
 800a33e:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	091b      	lsrs	r3, r3, #4
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	4904      	ldr	r1, [pc, #16]	@ (800a35c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a34a:	5ccb      	ldrb	r3, [r1, r3]
 800a34c:	f003 031f 	and.w	r3, r3, #31
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a354:	4618      	mov	r0, r3
 800a356:	bd80      	pop	{r7, pc}
 800a358:	58024400 	.word	0x58024400
 800a35c:	0801ec50 	.word	0x0801ec50

0800a360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a364:	f7ff ffb6 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800a368:	4602      	mov	r2, r0
 800a36a:	4b06      	ldr	r3, [pc, #24]	@ (800a384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	0a1b      	lsrs	r3, r3, #8
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	4904      	ldr	r1, [pc, #16]	@ (800a388 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a376:	5ccb      	ldrb	r3, [r1, r3]
 800a378:	f003 031f 	and.w	r3, r3, #31
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a380:	4618      	mov	r0, r3
 800a382:	bd80      	pop	{r7, pc}
 800a384:	58024400 	.word	0x58024400
 800a388:	0801ec50 	.word	0x0801ec50

0800a38c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	223f      	movs	r2, #63	@ 0x3f
 800a39a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a39c:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f003 0207 	and.w	r2, r3, #7
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a3a8:	4b17      	ldr	r3, [pc, #92]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a3b4:	4b14      	ldr	r3, [pc, #80]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	f003 020f 	and.w	r2, r3, #15
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a3c0:	4b11      	ldr	r3, [pc, #68]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a3e4:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <HAL_RCC_GetClockConfig+0x7c>)
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3f0:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <HAL_RCC_GetClockConfig+0x80>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	58024400 	.word	0x58024400
 800a40c:	52002000 	.word	0x52002000

0800a410 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a414:	b0ca      	sub	sp, #296	@ 0x128
 800a416:	af00      	add	r7, sp, #0
 800a418:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a41c:	2300      	movs	r3, #0
 800a41e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a422:	2300      	movs	r3, #0
 800a424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a434:	2500      	movs	r5, #0
 800a436:	ea54 0305 	orrs.w	r3, r4, r5
 800a43a:	d049      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a442:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a446:	d02f      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a448:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a44c:	d828      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a44e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a452:	d01a      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a458:	d822      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a45e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a462:	d007      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a464:	e01c      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a466:	4bb8      	ldr	r3, [pc, #736]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	4ab7      	ldr	r2, [pc, #732]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a46c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a472:	e01a      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a478:	3308      	adds	r3, #8
 800a47a:	2102      	movs	r1, #2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f002 fb61 	bl	800cb44 <RCCEx_PLL2_Config>
 800a482:	4603      	mov	r3, r0
 800a484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a488:	e00f      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48e:	3328      	adds	r3, #40	@ 0x28
 800a490:	2102      	movs	r1, #2
 800a492:	4618      	mov	r0, r3
 800a494:	f002 fc08 	bl	800cca8 <RCCEx_PLL3_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a49e:	e004      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4a6:	e000      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a4a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10a      	bne.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4b2:	4ba5      	ldr	r3, [pc, #660]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4c0:	4aa1      	ldr	r2, [pc, #644]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4c6:	e003      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a4dc:	f04f 0900 	mov.w	r9, #0
 800a4e0:	ea58 0309 	orrs.w	r3, r8, r9
 800a4e4:	d047      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d82a      	bhi.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a50d 	.word	0x0800a50d
 800a4fc:	0800a51b 	.word	0x0800a51b
 800a500:	0800a531 	.word	0x0800a531
 800a504:	0800a54f 	.word	0x0800a54f
 800a508:	0800a54f 	.word	0x0800a54f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a50c:	4b8e      	ldr	r3, [pc, #568]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a510:	4a8d      	ldr	r2, [pc, #564]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a518:	e01a      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51e:	3308      	adds	r3, #8
 800a520:	2100      	movs	r1, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f002 fb0e 	bl	800cb44 <RCCEx_PLL2_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a52e:	e00f      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a534:	3328      	adds	r3, #40	@ 0x28
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f002 fbb5 	bl	800cca8 <RCCEx_PLL3_Config>
 800a53e:	4603      	mov	r3, r0
 800a540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a544:	e004      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a54c:	e000      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a558:	4b7b      	ldr	r3, [pc, #492]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a55c:	f023 0107 	bic.w	r1, r3, #7
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a566:	4a78      	ldr	r2, [pc, #480]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a568:	430b      	orrs	r3, r1
 800a56a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a56c:	e003      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a582:	f04f 0b00 	mov.w	fp, #0
 800a586:	ea5a 030b 	orrs.w	r3, sl, fp
 800a58a:	d04c      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a596:	d030      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a59c:	d829      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a59e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5a0:	d02d      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a5a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5a4:	d825      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a5a6:	2b80      	cmp	r3, #128	@ 0x80
 800a5a8:	d018      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a5aa:	2b80      	cmp	r3, #128	@ 0x80
 800a5ac:	d821      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a5b2:	2b40      	cmp	r3, #64	@ 0x40
 800a5b4:	d007      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a5b6:	e01c      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b8:	4b63      	ldr	r3, [pc, #396]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	4a62      	ldr	r2, [pc, #392]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a5be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a5c4:	e01c      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f002 fab8 	bl	800cb44 <RCCEx_PLL2_Config>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a5da:	e011      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e0:	3328      	adds	r3, #40	@ 0x28
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f002 fb5f 	bl	800cca8 <RCCEx_PLL3_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a5f0:	e006      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5f8:	e002      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a5fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a608:	4b4f      	ldr	r3, [pc, #316]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a60a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a60c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a616:	4a4c      	ldr	r2, [pc, #304]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a618:	430b      	orrs	r3, r1
 800a61a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a61c:	e003      	b.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a632:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a636:	2300      	movs	r3, #0
 800a638:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a63c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a640:	460b      	mov	r3, r1
 800a642:	4313      	orrs	r3, r2
 800a644:	d053      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a64e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a652:	d035      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a654:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a658:	d82e      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a65a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a65e:	d031      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a660:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a664:	d828      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a66a:	d01a      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a66c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a670:	d822      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a67a:	d007      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a67c:	e01c      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a67e:	4b32      	ldr	r3, [pc, #200]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a682:	4a31      	ldr	r2, [pc, #196]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a68a:	e01c      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a690:	3308      	adds	r3, #8
 800a692:	2100      	movs	r1, #0
 800a694:	4618      	mov	r0, r3
 800a696:	f002 fa55 	bl	800cb44 <RCCEx_PLL2_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a6a0:	e011      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a6:	3328      	adds	r3, #40	@ 0x28
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f002 fafc 	bl	800cca8 <RCCEx_PLL3_Config>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6b6:	e006      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6be:	e002      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a6c0:	bf00      	nop
 800a6c2:	e000      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10b      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a6de:	4a1a      	ldr	r2, [pc, #104]	@ (800a748 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6e0:	430b      	orrs	r3, r1
 800a6e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6e4:	e003      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a6fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a6fe:	2300      	movs	r3, #0
 800a700:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a704:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a708:	460b      	mov	r3, r1
 800a70a:	4313      	orrs	r3, r2
 800a70c:	d056      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a712:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a716:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a71a:	d038      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a71c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a720:	d831      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a722:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a726:	d034      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a728:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a72c:	d82b      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a72e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a732:	d01d      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a738:	d825      	bhi.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d006      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a73e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a742:	d00a      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a744:	e01f      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a746:	bf00      	nop
 800a748:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a74c:	4ba2      	ldr	r3, [pc, #648]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a750:	4aa1      	ldr	r2, [pc, #644]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a758:	e01c      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75e:	3308      	adds	r3, #8
 800a760:	2100      	movs	r1, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f002 f9ee 	bl	800cb44 <RCCEx_PLL2_Config>
 800a768:	4603      	mov	r3, r0
 800a76a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a76e:	e011      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a774:	3328      	adds	r3, #40	@ 0x28
 800a776:	2100      	movs	r1, #0
 800a778:	4618      	mov	r0, r3
 800a77a:	f002 fa95 	bl	800cca8 <RCCEx_PLL3_Config>
 800a77e:	4603      	mov	r3, r0
 800a780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a784:	e006      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a78c:	e002      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a792:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a79c:	4b8e      	ldr	r3, [pc, #568]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a7ac:	4a8a      	ldr	r2, [pc, #552]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7b2:	e003      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a7c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	d03a      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e2:	2b30      	cmp	r3, #48	@ 0x30
 800a7e4:	d01f      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a7e6:	2b30      	cmp	r3, #48	@ 0x30
 800a7e8:	d819      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d00c      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d815      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d019      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a7f6:	2b10      	cmp	r3, #16
 800a7f8:	d111      	bne.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fa:	4b77      	ldr	r3, [pc, #476]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	4a76      	ldr	r2, [pc, #472]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a804:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a806:	e011      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80c:	3308      	adds	r3, #8
 800a80e:	2102      	movs	r1, #2
 800a810:	4618      	mov	r0, r3
 800a812:	f002 f997 	bl	800cb44 <RCCEx_PLL2_Config>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a81c:	e006      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a824:	e002      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a826:	bf00      	nop
 800a828:	e000      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a82c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a834:	4b68      	ldr	r3, [pc, #416]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a838:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a842:	4a65      	ldr	r2, [pc, #404]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a844:	430b      	orrs	r3, r1
 800a846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a848:	e003      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a84e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a85e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a862:	2300      	movs	r3, #0
 800a864:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a868:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4313      	orrs	r3, r2
 800a870:	d051      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a87c:	d035      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a87e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a882:	d82e      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a884:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a888:	d031      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a88a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a88e:	d828      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a894:	d01a      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89a:	d822      	bhi.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a8a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a4:	d007      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a8a6:	e01c      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a8:	4b4b      	ldr	r3, [pc, #300]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ac:	4a4a      	ldr	r2, [pc, #296]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8b4:	e01c      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f002 f940 	bl	800cb44 <RCCEx_PLL2_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8ca:	e011      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d0:	3328      	adds	r3, #40	@ 0x28
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f002 f9e7 	bl	800cca8 <RCCEx_PLL3_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a8e0:	e006      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8e8:	e002      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a8ea:	bf00      	nop
 800a8ec:	e000      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a8ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8f8:	4b37      	ldr	r3, [pc, #220]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a906:	4a34      	ldr	r2, [pc, #208]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a908:	430b      	orrs	r3, r1
 800a90a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a90c:	e003      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a926:	2300      	movs	r3, #0
 800a928:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a92c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a930:	460b      	mov	r3, r1
 800a932:	4313      	orrs	r3, r2
 800a934:	d056      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a93c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a940:	d033      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a942:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a946:	d82c      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a948:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a94c:	d02f      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a94e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a952:	d826      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a958:	d02b      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a95a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a95e:	d820      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a964:	d012      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a96a:	d81a      	bhi.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d022      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a974:	d115      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97a:	3308      	adds	r3, #8
 800a97c:	2101      	movs	r1, #1
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 f8e0 	bl	800cb44 <RCCEx_PLL2_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a98a:	e015      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a990:	3328      	adds	r3, #40	@ 0x28
 800a992:	2101      	movs	r1, #1
 800a994:	4618      	mov	r0, r3
 800a996:	f002 f987 	bl	800cca8 <RCCEx_PLL3_Config>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a9a0:	e00a      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9a8:	e006      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a9aa:	bf00      	nop
 800a9ac:	e004      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a9ae:	bf00      	nop
 800a9b0:	e002      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a9b2:	bf00      	nop
 800a9b4:	e000      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a9b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10d      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9c0:	4b05      	ldr	r3, [pc, #20]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ce:	4a02      	ldr	r2, [pc, #8]	@ (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9d4:	e006      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a9d6:	bf00      	nop
 800a9d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a9f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4313      	orrs	r3, r2
 800aa02:	d055      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aa04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa10:	d033      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aa12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa16:	d82c      	bhi.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa1c:	d02f      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800aa1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa22:	d826      	bhi.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa28:	d02b      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800aa2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa2e:	d820      	bhi.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa34:	d012      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800aa36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa3a:	d81a      	bhi.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d022      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800aa40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa44:	d115      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f002 f878 	bl	800cb44 <RCCEx_PLL2_Config>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa5a:	e015      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa60:	3328      	adds	r3, #40	@ 0x28
 800aa62:	2101      	movs	r1, #1
 800aa64:	4618      	mov	r0, r3
 800aa66:	f002 f91f 	bl	800cca8 <RCCEx_PLL3_Config>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa70:	e00a      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa78:	e006      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aa7a:	bf00      	nop
 800aa7c:	e004      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aa7e:	bf00      	nop
 800aa80:	e002      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800aa86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa90:	4ba3      	ldr	r3, [pc, #652]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aaa0:	4a9f      	ldr	r2, [pc, #636]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaa6:	e003      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800aabc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aac0:	2300      	movs	r3, #0
 800aac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aaca:	460b      	mov	r3, r1
 800aacc:	4313      	orrs	r3, r2
 800aace:	d037      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aada:	d00e      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800aadc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aae0:	d816      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d018      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800aae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaea:	d111      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaec:	4b8c      	ldr	r3, [pc, #560]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf0:	4a8b      	ldr	r2, [pc, #556]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aaf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aaf8:	e00f      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aafe:	3308      	adds	r3, #8
 800ab00:	2101      	movs	r1, #1
 800ab02:	4618      	mov	r0, r3
 800ab04:	f002 f81e 	bl	800cb44 <RCCEx_PLL2_Config>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ab0e:	e004      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab16:	e000      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ab18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab22:	4b7f      	ldr	r3, [pc, #508]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab30:	4a7b      	ldr	r2, [pc, #492]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab32:	430b      	orrs	r3, r1
 800ab34:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab36:	e003      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ab40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ab4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ab56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	d039      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d81c      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ab6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab70 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800abad 	.word	0x0800abad
 800ab74:	0800ab81 	.word	0x0800ab81
 800ab78:	0800ab8f 	.word	0x0800ab8f
 800ab7c:	0800abad 	.word	0x0800abad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab80:	4b67      	ldr	r3, [pc, #412]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab84:	4a66      	ldr	r2, [pc, #408]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab8c:	e00f      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab92:	3308      	adds	r3, #8
 800ab94:	2102      	movs	r1, #2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 ffd4 	bl	800cb44 <RCCEx_PLL2_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aba2:	e004      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abaa:	e000      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800abac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800abb6:	4b5a      	ldr	r3, [pc, #360]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abba:	f023 0103 	bic.w	r1, r3, #3
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abc4:	4a56      	ldr	r2, [pc, #344]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800abc6:	430b      	orrs	r3, r1
 800abc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abca:	e003      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800abe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abe4:	2300      	movs	r3, #0
 800abe6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800abea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800abee:	460b      	mov	r3, r1
 800abf0:	4313      	orrs	r3, r2
 800abf2:	f000 809f 	beq.w	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abf6:	4b4b      	ldr	r3, [pc, #300]	@ (800ad24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a4a      	ldr	r2, [pc, #296]	@ (800ad24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800abfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac02:	f7f9 fe2d 	bl	8004860 <HAL_GetTick>
 800ac06:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac0a:	e00b      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac0c:	f7f9 fe28 	bl	8004860 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b64      	cmp	r3, #100	@ 0x64
 800ac1a:	d903      	bls.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac22:	e005      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac24:	4b3f      	ldr	r3, [pc, #252]	@ (800ad24 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0ed      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ac30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d179      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ac38:	4b39      	ldr	r3, [pc, #228]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac44:	4053      	eors	r3, r2
 800ac46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d015      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac4e:	4b34      	ldr	r3, [pc, #208]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac5a:	4b31      	ldr	r3, [pc, #196]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac5e:	4a30      	ldr	r2, [pc, #192]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac66:	4b2e      	ldr	r3, [pc, #184]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac6a:	4a2d      	ldr	r2, [pc, #180]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac72:	4a2b      	ldr	r2, [pc, #172]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ac74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ac78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac86:	d118      	bne.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac88:	f7f9 fdea 	bl	8004860 <HAL_GetTick>
 800ac8c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac90:	e00d      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac92:	f7f9 fde5 	bl	8004860 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ac9c:	1ad2      	subs	r2, r2, r3
 800ac9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d903      	bls.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800acac:	e005      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acae:	4b1c      	ldr	r3, [pc, #112]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0eb      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800acba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d129      	bne.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd2:	d10e      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800acd4:	4b12      	ldr	r3, [pc, #72]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ace4:	091a      	lsrs	r2, r3, #4
 800ace6:	4b10      	ldr	r3, [pc, #64]	@ (800ad28 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ace8:	4013      	ands	r3, r2
 800acea:	4a0d      	ldr	r2, [pc, #52]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acec:	430b      	orrs	r3, r1
 800acee:	6113      	str	r3, [r2, #16]
 800acf0:	e005      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800acf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acf8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800acfc:	6113      	str	r3, [r2, #16]
 800acfe:	4b08      	ldr	r3, [pc, #32]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ad02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad0e:	4a04      	ldr	r2, [pc, #16]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad10:	430b      	orrs	r3, r1
 800ad12:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad14:	e00e      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ad1e:	e009      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ad20:	58024400 	.word	0x58024400
 800ad24:	58024800 	.word	0x58024800
 800ad28:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f002 0301 	and.w	r3, r2, #1
 800ad40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ad44:	2300      	movs	r3, #0
 800ad46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4313      	orrs	r3, r2
 800ad52:	f000 8089 	beq.w	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad5c:	2b28      	cmp	r3, #40	@ 0x28
 800ad5e:	d86b      	bhi.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ad60:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad66:	bf00      	nop
 800ad68:	0800ae41 	.word	0x0800ae41
 800ad6c:	0800ae39 	.word	0x0800ae39
 800ad70:	0800ae39 	.word	0x0800ae39
 800ad74:	0800ae39 	.word	0x0800ae39
 800ad78:	0800ae39 	.word	0x0800ae39
 800ad7c:	0800ae39 	.word	0x0800ae39
 800ad80:	0800ae39 	.word	0x0800ae39
 800ad84:	0800ae39 	.word	0x0800ae39
 800ad88:	0800ae0d 	.word	0x0800ae0d
 800ad8c:	0800ae39 	.word	0x0800ae39
 800ad90:	0800ae39 	.word	0x0800ae39
 800ad94:	0800ae39 	.word	0x0800ae39
 800ad98:	0800ae39 	.word	0x0800ae39
 800ad9c:	0800ae39 	.word	0x0800ae39
 800ada0:	0800ae39 	.word	0x0800ae39
 800ada4:	0800ae39 	.word	0x0800ae39
 800ada8:	0800ae23 	.word	0x0800ae23
 800adac:	0800ae39 	.word	0x0800ae39
 800adb0:	0800ae39 	.word	0x0800ae39
 800adb4:	0800ae39 	.word	0x0800ae39
 800adb8:	0800ae39 	.word	0x0800ae39
 800adbc:	0800ae39 	.word	0x0800ae39
 800adc0:	0800ae39 	.word	0x0800ae39
 800adc4:	0800ae39 	.word	0x0800ae39
 800adc8:	0800ae41 	.word	0x0800ae41
 800adcc:	0800ae39 	.word	0x0800ae39
 800add0:	0800ae39 	.word	0x0800ae39
 800add4:	0800ae39 	.word	0x0800ae39
 800add8:	0800ae39 	.word	0x0800ae39
 800addc:	0800ae39 	.word	0x0800ae39
 800ade0:	0800ae39 	.word	0x0800ae39
 800ade4:	0800ae39 	.word	0x0800ae39
 800ade8:	0800ae41 	.word	0x0800ae41
 800adec:	0800ae39 	.word	0x0800ae39
 800adf0:	0800ae39 	.word	0x0800ae39
 800adf4:	0800ae39 	.word	0x0800ae39
 800adf8:	0800ae39 	.word	0x0800ae39
 800adfc:	0800ae39 	.word	0x0800ae39
 800ae00:	0800ae39 	.word	0x0800ae39
 800ae04:	0800ae39 	.word	0x0800ae39
 800ae08:	0800ae41 	.word	0x0800ae41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae10:	3308      	adds	r3, #8
 800ae12:	2101      	movs	r1, #1
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 fe95 	bl	800cb44 <RCCEx_PLL2_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae20:	e00f      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae26:	3328      	adds	r3, #40	@ 0x28
 800ae28:	2101      	movs	r1, #1
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 ff3c 	bl	800cca8 <RCCEx_PLL3_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ae36:	e004      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ae40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae4a:	4bbf      	ldr	r3, [pc, #764]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ae52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae58:	4abb      	ldr	r2, [pc, #748]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae5a:	430b      	orrs	r3, r1
 800ae5c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae5e:	e003      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f002 0302 	and.w	r3, r2, #2
 800ae74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d041      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d824      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ae92:	a201      	add	r2, pc, #4	@ (adr r2, 800ae98 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aee5 	.word	0x0800aee5
 800ae9c:	0800aeb1 	.word	0x0800aeb1
 800aea0:	0800aec7 	.word	0x0800aec7
 800aea4:	0800aee5 	.word	0x0800aee5
 800aea8:	0800aee5 	.word	0x0800aee5
 800aeac:	0800aee5 	.word	0x0800aee5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 fe43 	bl	800cb44 <RCCEx_PLL2_Config>
 800aebe:	4603      	mov	r3, r0
 800aec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aec4:	e00f      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeca:	3328      	adds	r3, #40	@ 0x28
 800aecc:	2101      	movs	r1, #1
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 feea 	bl	800cca8 <RCCEx_PLL3_Config>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800aeda:	e004      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aee2:	e000      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800aee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aeee:	4b96      	ldr	r3, [pc, #600]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aef2:	f023 0107 	bic.w	r1, r3, #7
 800aef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aefa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aefc:	4a92      	ldr	r2, [pc, #584]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aefe:	430b      	orrs	r3, r1
 800af00:	6553      	str	r3, [r2, #84]	@ 0x54
 800af02:	e003      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f002 0304 	and.w	r3, r2, #4
 800af18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af1c:	2300      	movs	r3, #0
 800af1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800af26:	460b      	mov	r3, r1
 800af28:	4313      	orrs	r3, r2
 800af2a:	d044      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af34:	2b05      	cmp	r3, #5
 800af36:	d825      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800af38:	a201      	add	r2, pc, #4	@ (adr r2, 800af40 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800af3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800af8d 	.word	0x0800af8d
 800af44:	0800af59 	.word	0x0800af59
 800af48:	0800af6f 	.word	0x0800af6f
 800af4c:	0800af8d 	.word	0x0800af8d
 800af50:	0800af8d 	.word	0x0800af8d
 800af54:	0800af8d 	.word	0x0800af8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af5c:	3308      	adds	r3, #8
 800af5e:	2101      	movs	r1, #1
 800af60:	4618      	mov	r0, r3
 800af62:	f001 fdef 	bl	800cb44 <RCCEx_PLL2_Config>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e00f      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af72:	3328      	adds	r3, #40	@ 0x28
 800af74:	2101      	movs	r1, #1
 800af76:	4618      	mov	r0, r3
 800af78:	f001 fe96 	bl	800cca8 <RCCEx_PLL3_Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af82:	e004      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af8a:	e000      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800af8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af96:	4b6c      	ldr	r3, [pc, #432]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af9a:	f023 0107 	bic.w	r1, r3, #7
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afa6:	4a68      	ldr	r2, [pc, #416]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800afa8:	430b      	orrs	r3, r1
 800afaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800afac:	e003      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f002 0320 	and.w	r3, r2, #32
 800afc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800afc6:	2300      	movs	r3, #0
 800afc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800afd0:	460b      	mov	r3, r1
 800afd2:	4313      	orrs	r3, r2
 800afd4:	d055      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800afd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afe2:	d033      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800afe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afe8:	d82c      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800afea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afee:	d02f      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff4:	d826      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800affa:	d02b      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800affc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b000:	d820      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b006:	d012      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b00c:	d81a      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d022      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b016:	d115      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b01c:	3308      	adds	r3, #8
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f001 fd8f 	bl	800cb44 <RCCEx_PLL2_Config>
 800b026:	4603      	mov	r3, r0
 800b028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b02c:	e015      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b032:	3328      	adds	r3, #40	@ 0x28
 800b034:	2102      	movs	r1, #2
 800b036:	4618      	mov	r0, r3
 800b038:	f001 fe36 	bl	800cca8 <RCCEx_PLL3_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b042:	e00a      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b04a:	e006      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b04c:	bf00      	nop
 800b04e:	e004      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b050:	bf00      	nop
 800b052:	e002      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b054:	bf00      	nop
 800b056:	e000      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10b      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b062:	4b39      	ldr	r3, [pc, #228]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b066:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b072:	4a35      	ldr	r2, [pc, #212]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b074:	430b      	orrs	r3, r1
 800b076:	6553      	str	r3, [r2, #84]	@ 0x54
 800b078:	e003      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b07e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b098:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b09c:	460b      	mov	r3, r1
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	d058      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b0aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b0ae:	d033      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b0b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b0b4:	d82c      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b0b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ba:	d02f      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b0bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0c0:	d826      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b0c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0c6:	d02b      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b0c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0cc:	d820      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b0ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0d2:	d012      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b0d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0d8:	d81a      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d022      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b0de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0e2:	d115      	bne.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 fd29 	bl	800cb44 <RCCEx_PLL2_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0f8:	e015      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0fe:	3328      	adds	r3, #40	@ 0x28
 800b100:	2102      	movs	r1, #2
 800b102:	4618      	mov	r0, r3
 800b104:	f001 fdd0 	bl	800cca8 <RCCEx_PLL3_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b10e:	e00a      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b116:	e006      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b118:	bf00      	nop
 800b11a:	e004      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b11c:	bf00      	nop
 800b11e:	e002      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b120:	bf00      	nop
 800b122:	e000      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10e      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b12e:	4b06      	ldr	r3, [pc, #24]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b132:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b13a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b13e:	4a02      	ldr	r2, [pc, #8]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b140:	430b      	orrs	r3, r1
 800b142:	6593      	str	r3, [r2, #88]	@ 0x58
 800b144:	e006      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b146:	bf00      	nop
 800b148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b16a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d055      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b17c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b180:	d033      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b182:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b186:	d82c      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b18c:	d02f      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b18e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b192:	d826      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b194:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b198:	d02b      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b19a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b19e:	d820      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b1a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1a4:	d012      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b1a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1aa:	d81a      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d022      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b1b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b4:	d115      	bne.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 fcc0 	bl	800cb44 <RCCEx_PLL2_Config>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1ca:	e015      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1d0:	3328      	adds	r3, #40	@ 0x28
 800b1d2:	2102      	movs	r1, #2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f001 fd67 	bl	800cca8 <RCCEx_PLL3_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b1e0:	e00a      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b1ea:	bf00      	nop
 800b1ec:	e004      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b1ee:	bf00      	nop
 800b1f0:	e002      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b1f2:	bf00      	nop
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b200:	4ba1      	ldr	r3, [pc, #644]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b204:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b20c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b210:	4a9d      	ldr	r2, [pc, #628]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b212:	430b      	orrs	r3, r1
 800b214:	6593      	str	r3, [r2, #88]	@ 0x58
 800b216:	e003      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b21c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f002 0308 	and.w	r3, r2, #8
 800b22c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b230:	2300      	movs	r3, #0
 800b232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b236:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b23a:	460b      	mov	r3, r1
 800b23c:	4313      	orrs	r3, r2
 800b23e:	d01e      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b24c:	d10c      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b252:	3328      	adds	r3, #40	@ 0x28
 800b254:	2102      	movs	r1, #2
 800b256:	4618      	mov	r0, r3
 800b258:	f001 fd26 	bl	800cca8 <RCCEx_PLL3_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b268:	4b87      	ldr	r3, [pc, #540]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b26a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b26c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b278:	4a83      	ldr	r2, [pc, #524]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b27a:	430b      	orrs	r3, r1
 800b27c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f002 0310 	and.w	r3, r2, #16
 800b28a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b28e:	2300      	movs	r3, #0
 800b290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b294:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b298:	460b      	mov	r3, r1
 800b29a:	4313      	orrs	r3, r2
 800b29c:	d01e      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2aa:	d10c      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2b0:	3328      	adds	r3, #40	@ 0x28
 800b2b2:	2102      	movs	r1, #2
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f001 fcf7 	bl	800cca8 <RCCEx_PLL3_Config>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2c6:	4b70      	ldr	r3, [pc, #448]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b2d6:	4a6c      	ldr	r2, [pc, #432]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b2e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	d03e      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b300:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b308:	d022      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b30a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b30e:	d81b      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b318:	d00b      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b31a:	e015      	b.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b320:	3308      	adds	r3, #8
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f001 fc0d 	bl	800cb44 <RCCEx_PLL2_Config>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b330:	e00f      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b336:	3328      	adds	r3, #40	@ 0x28
 800b338:	2102      	movs	r1, #2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fcb4 	bl	800cca8 <RCCEx_PLL3_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b346:	e004      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b34e:	e000      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10b      	bne.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b35a:	4b4b      	ldr	r3, [pc, #300]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b35c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b35e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b36a:	4a47      	ldr	r2, [pc, #284]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b370:	e003      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b386:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b388:	2300      	movs	r3, #0
 800b38a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b38c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b390:	460b      	mov	r3, r1
 800b392:	4313      	orrs	r3, r2
 800b394:	d03b      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b39e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3a2:	d01f      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b3a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3a8:	d818      	bhi.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b3aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3ae:	d003      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b3b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3b4:	d007      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b3b6:	e011      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b8:	4b33      	ldr	r3, [pc, #204]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4a32      	ldr	r2, [pc, #200]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3c4:	e00f      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ca:	3328      	adds	r3, #40	@ 0x28
 800b3cc:	2101      	movs	r1, #1
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f001 fc6a 	bl	800cca8 <RCCEx_PLL3_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b3da:	e004      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b3e2:	e000      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10b      	bne.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3ee:	4b26      	ldr	r3, [pc, #152]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3fe:	4a22      	ldr	r2, [pc, #136]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b400:	430b      	orrs	r3, r1
 800b402:	6553      	str	r3, [r2, #84]	@ 0x54
 800b404:	e003      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b40a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b41a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b41c:	2300      	movs	r3, #0
 800b41e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b420:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b424:	460b      	mov	r3, r1
 800b426:	4313      	orrs	r3, r2
 800b428:	d034      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b438:	d007      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b43a:	e011      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b43c:	4b12      	ldr	r3, [pc, #72]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b440:	4a11      	ldr	r2, [pc, #68]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b448:	e00e      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b44e:	3308      	adds	r3, #8
 800b450:	2102      	movs	r1, #2
 800b452:	4618      	mov	r0, r3
 800b454:	f001 fb76 	bl	800cb44 <RCCEx_PLL2_Config>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b45e:	e003      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b466:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10d      	bne.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b470:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b474:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b47e:	4a02      	ldr	r2, [pc, #8]	@ (800b488 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b480:	430b      	orrs	r3, r1
 800b482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b484:	e006      	b.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b48c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b4a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d00c      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4b4:	3328      	adds	r3, #40	@ 0x28
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 fbf5 	bl	800cca8 <RCCEx_PLL3_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b4d6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4d8:	2300      	movs	r3, #0
 800b4da:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	d038      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4f2:	d018      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b4f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4f8:	d811      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b4fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4fe:	d014      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b504:	d80b      	bhi.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d011      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b50e:	d106      	bne.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b510:	4bc3      	ldr	r3, [pc, #780]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b514:	4ac2      	ldr	r2, [pc, #776]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b51a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b51c:	e008      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b524:	e004      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b526:	bf00      	nop
 800b528:	e002      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b52a:	bf00      	nop
 800b52c:	e000      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b52e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10b      	bne.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b538:	4bb9      	ldr	r3, [pc, #740]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b53a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b53c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b548:	4ab5      	ldr	r2, [pc, #724]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b54a:	430b      	orrs	r3, r1
 800b54c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b54e:	e003      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b564:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b566:	2300      	movs	r3, #0
 800b568:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b56a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b56e:	460b      	mov	r3, r1
 800b570:	4313      	orrs	r3, r2
 800b572:	d009      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b574:	4baa      	ldr	r3, [pc, #680]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b578:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b582:	4aa7      	ldr	r2, [pc, #668]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b584:	430b      	orrs	r3, r1
 800b586:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b590:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b594:	653b      	str	r3, [r7, #80]	@ 0x50
 800b596:	2300      	movs	r3, #0
 800b598:	657b      	str	r3, [r7, #84]	@ 0x54
 800b59a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	d00a      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b5a4:	4b9e      	ldr	r3, [pc, #632]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b5b4:	4a9a      	ldr	r2, [pc, #616]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b5c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	d009      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b5d6:	4b92      	ldr	r3, [pc, #584]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5e4:	4a8e      	ldr	r2, [pc, #568]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b5f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b600:	460b      	mov	r3, r1
 800b602:	4313      	orrs	r3, r2
 800b604:	d00e      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b606:	4b86      	ldr	r3, [pc, #536]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	4a85      	ldr	r2, [pc, #532]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b60c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b610:	6113      	str	r3, [r2, #16]
 800b612:	4b83      	ldr	r3, [pc, #524]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b614:	6919      	ldr	r1, [r3, #16]
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b61a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b61e:	4a80      	ldr	r2, [pc, #512]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b620:	430b      	orrs	r3, r1
 800b622:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b630:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b632:	2300      	movs	r3, #0
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b636:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b63a:	460b      	mov	r3, r1
 800b63c:	4313      	orrs	r3, r2
 800b63e:	d009      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b640:	4b77      	ldr	r3, [pc, #476]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b644:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b64c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64e:	4a74      	ldr	r2, [pc, #464]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b650:	430b      	orrs	r3, r1
 800b652:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b660:	633b      	str	r3, [r7, #48]	@ 0x30
 800b662:	2300      	movs	r3, #0
 800b664:	637b      	str	r3, [r7, #52]	@ 0x34
 800b666:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b66a:	460b      	mov	r3, r1
 800b66c:	4313      	orrs	r3, r2
 800b66e:	d00a      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b670:	4b6b      	ldr	r3, [pc, #428]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b674:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b680:	4a67      	ldr	r2, [pc, #412]	@ (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b682:	430b      	orrs	r3, r1
 800b684:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	2100      	movs	r1, #0
 800b690:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b698:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b69c:	460b      	mov	r3, r1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	d011      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f001 fa4a 	bl	800cb44 <RCCEx_PLL2_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6239      	str	r1, [r7, #32]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	d011      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 fa2a 	bl	800cb44 <RCCEx_PLL2_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	2100      	movs	r1, #0
 800b710:	61b9      	str	r1, [r7, #24]
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b71c:	460b      	mov	r3, r1
 800b71e:	4313      	orrs	r3, r2
 800b720:	d011      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b726:	3308      	adds	r3, #8
 800b728:	2102      	movs	r1, #2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 fa0a 	bl	800cb44 <RCCEx_PLL2_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	2100      	movs	r1, #0
 800b750:	6139      	str	r1, [r7, #16]
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b75c:	460b      	mov	r3, r1
 800b75e:	4313      	orrs	r3, r2
 800b760:	d011      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b766:	3328      	adds	r3, #40	@ 0x28
 800b768:	2100      	movs	r1, #0
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 fa9c 	bl	800cca8 <RCCEx_PLL3_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	2100      	movs	r1, #0
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	f003 0310 	and.w	r3, r3, #16
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b79c:	460b      	mov	r3, r1
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	d011      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7a6:	3328      	adds	r3, #40	@ 0x28
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 fa7c 	bl	800cca8 <RCCEx_PLL3_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	607b      	str	r3, [r7, #4]
 800b7d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	d011      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7e6:	3328      	adds	r3, #40	@ 0x28
 800b7e8:	2102      	movs	r1, #2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f001 fa5c 	bl	800cca8 <RCCEx_PLL3_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b7f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b806:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	e000      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
}
 800b814:	4618      	mov	r0, r3
 800b816:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b81a:	46bd      	mov	sp, r7
 800b81c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b820:	58024400 	.word	0x58024400

0800b824 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b090      	sub	sp, #64	@ 0x40
 800b828:	af00      	add	r7, sp, #0
 800b82a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b832:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b836:	430b      	orrs	r3, r1
 800b838:	f040 8094 	bne.w	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b83c:	4b9e      	ldr	r3, [pc, #632]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b840:	f003 0307 	and.w	r3, r3, #7
 800b844:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b848:	2b04      	cmp	r3, #4
 800b84a:	f200 8087 	bhi.w	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b84e:	a201      	add	r2, pc, #4	@ (adr r2, 800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b869 	.word	0x0800b869
 800b858:	0800b891 	.word	0x0800b891
 800b85c:	0800b8b9 	.word	0x0800b8b9
 800b860:	0800b955 	.word	0x0800b955
 800b864:	0800b8e1 	.word	0x0800b8e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b868:	4b93      	ldr	r3, [pc, #588]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b874:	d108      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 f810 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b884:	f000 bd45 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b88c:	f000 bd41 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b890:	4b89      	ldr	r3, [pc, #548]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b89c:	d108      	bne.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b89e:	f107 0318 	add.w	r3, r7, #24
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fd54 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ac:	f000 bd31 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8b4:	f000 bd2d 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8b8:	4b7f      	ldr	r3, [pc, #508]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8c4:	d108      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fe94 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d4:	f000 bd1d 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8dc:	f000 bd19 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8e0:	4b75      	ldr	r3, [pc, #468]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ea:	4b73      	ldr	r3, [pc, #460]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d10c      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8fc:	4b6e      	ldr	r3, [pc, #440]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	08db      	lsrs	r3, r3, #3
 800b902:	f003 0303 	and.w	r3, r3, #3
 800b906:	4a6d      	ldr	r2, [pc, #436]	@ (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b90e:	e01f      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b910:	4b69      	ldr	r3, [pc, #420]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b91c:	d106      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b924:	d102      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b926:	4b66      	ldr	r3, [pc, #408]	@ (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b92a:	e011      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b92c:	4b62      	ldr	r3, [pc, #392]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b938:	d106      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b940:	d102      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b942:	4b60      	ldr	r3, [pc, #384]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b946:	e003      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b94c:	f000 bce1 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b950:	f000 bcdf 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b954:	4b5c      	ldr	r3, [pc, #368]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b958:	f000 bcdb 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b960:	f000 bcd7 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b968:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b96c:	430b      	orrs	r3, r1
 800b96e:	f040 80ad 	bne.w	800bacc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b972:	4b51      	ldr	r3, [pc, #324]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b976:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b97a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b982:	d056      	beq.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b98a:	f200 8090 	bhi.w	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b990:	2bc0      	cmp	r3, #192	@ 0xc0
 800b992:	f000 8088 	beq.w	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	2bc0      	cmp	r3, #192	@ 0xc0
 800b99a:	f200 8088 	bhi.w	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	2b80      	cmp	r3, #128	@ 0x80
 800b9a2:	d032      	beq.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a6:	2b80      	cmp	r3, #128	@ 0x80
 800b9a8:	f200 8081 	bhi.w	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b4:	2b40      	cmp	r3, #64	@ 0x40
 800b9b6:	d014      	beq.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b9b8:	e079      	b.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9ba:	4b3f      	ldr	r3, [pc, #252]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9c6:	d108      	bne.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 ff67 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d6:	f000 bc9c 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9de:	f000 bc98 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e2:	4b35      	ldr	r3, [pc, #212]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ee:	d108      	bne.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f0:	f107 0318 	add.w	r3, r7, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fcab 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fe:	f000 bc88 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba06:	f000 bc84 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba0a:	4b2b      	ldr	r3, [pc, #172]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba16:	d108      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fdeb 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba26:	f000 bc74 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba2e:	f000 bc70 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba32:	4b21      	ldr	r3, [pc, #132]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	d10c      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ba48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	08db      	lsrs	r3, r3, #3
 800ba54:	f003 0303 	and.w	r3, r3, #3
 800ba58:	4a18      	ldr	r2, [pc, #96]	@ (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ba5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba60:	e01f      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba62:	4b15      	ldr	r3, [pc, #84]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba6e:	d106      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ba70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba76:	d102      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba78:	4b11      	ldr	r3, [pc, #68]	@ (800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ba7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba7c:	e011      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba7e:	4b0e      	ldr	r3, [pc, #56]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba8a:	d106      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba92:	d102      	bne.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba94:	4b0b      	ldr	r3, [pc, #44]	@ (800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba98:	e003      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba9e:	f000 bc38 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800baa2:	f000 bc36 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800baa6:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800baa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baaa:	f000 bc32 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab2:	f000 bc2e 	b.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bab6:	bf00      	nop
 800bab8:	58024400 	.word	0x58024400
 800babc:	03d09000 	.word	0x03d09000
 800bac0:	003d0900 	.word	0x003d0900
 800bac4:	017d7840 	.word	0x017d7840
 800bac8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bacc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bad4:	430b      	orrs	r3, r1
 800bad6:	f040 809c 	bne.w	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bada:	4b9e      	ldr	r3, [pc, #632]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800badc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bade:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800bae2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800baea:	d054      	beq.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800baec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800baf2:	f200 808b 	bhi.w	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800baf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bafc:	f000 8083 	beq.w	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bb06:	f200 8081 	bhi.w	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb10:	d02f      	beq.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb18:	d878      	bhi.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb26:	d012      	beq.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bb28:	e070      	b.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb2a:	4b8a      	ldr	r3, [pc, #552]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb36:	d107      	bne.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 feaf 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb46:	e3e4      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb4c:	e3e1      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb4e:	4b81      	ldr	r3, [pc, #516]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb5a:	d107      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb5c:	f107 0318 	add.w	r3, r7, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fbf5 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb6a:	e3d2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb70:	e3cf      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb72:	4b78      	ldr	r3, [pc, #480]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb7e:	d107      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fd37 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb8e:	e3c0      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb94:	e3bd      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb96:	4b6f      	ldr	r3, [pc, #444]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bb9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bba0:	4b6c      	ldr	r3, [pc, #432]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 0304 	and.w	r3, r3, #4
 800bba8:	2b04      	cmp	r3, #4
 800bbaa:	d10c      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbb2:	4b68      	ldr	r3, [pc, #416]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	08db      	lsrs	r3, r3, #3
 800bbb8:	f003 0303 	and.w	r3, r3, #3
 800bbbc:	4a66      	ldr	r2, [pc, #408]	@ (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bbbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbc4:	e01e      	b.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbc6:	4b63      	ldr	r3, [pc, #396]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbd2:	d106      	bne.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbda:	d102      	bne.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bbdc:	4b5f      	ldr	r3, [pc, #380]	@ (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbe0:	e010      	b.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbe2:	4b5c      	ldr	r3, [pc, #368]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbee:	d106      	bne.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf6:	d102      	bne.n	800bbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbf8:	4b59      	ldr	r3, [pc, #356]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbfc:	e002      	b.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc02:	e386      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc04:	e385      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc06:	4b57      	ldr	r3, [pc, #348]	@ (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc0a:	e382      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc10:	e37f      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bc12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc16:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	f040 80a7 	bne.w	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bc20:	4b4c      	ldr	r3, [pc, #304]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc24:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bc28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc30:	d055      	beq.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc38:	f200 8096 	bhi.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc42:	f000 8084 	beq.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc4c:	f200 808c 	bhi.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc56:	d030      	beq.n	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc5e:	f200 8083 	bhi.w	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d004      	beq.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc6e:	d012      	beq.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bc70:	e07a      	b.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc72:	4b38      	ldr	r3, [pc, #224]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc7e:	d107      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc84:	4618      	mov	r0, r3
 800bc86:	f000 fe0b 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc8e:	e340      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc94:	e33d      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc96:	4b2f      	ldr	r3, [pc, #188]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bca2:	d107      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bca4:	f107 0318 	add.w	r3, r7, #24
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 fb51 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcb2:	e32e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcb8:	e32b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcba:	4b26      	ldr	r3, [pc, #152]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcc6:	d107      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 fc93 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcd6:	e31c      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcdc:	e319      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcde:	4b1d      	ldr	r3, [pc, #116]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bce2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bce6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bce8:	4b1a      	ldr	r3, [pc, #104]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d10c      	bne.n	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d109      	bne.n	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcfa:	4b16      	ldr	r3, [pc, #88]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	08db      	lsrs	r3, r3, #3
 800bd00:	f003 0303 	and.w	r3, r3, #3
 800bd04:	4a14      	ldr	r2, [pc, #80]	@ (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bd06:	fa22 f303 	lsr.w	r3, r2, r3
 800bd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd0c:	e01e      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd0e:	4b11      	ldr	r3, [pc, #68]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd1a:	d106      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd22:	d102      	bne.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd24:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd28:	e010      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd2a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd36:	d106      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bd38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd3e:	d102      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd40:	4b07      	ldr	r3, [pc, #28]	@ (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd44:	e002      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bd4a:	e2e2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd4c:	e2e1      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd4e:	4b05      	ldr	r3, [pc, #20]	@ (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd52:	e2de      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd54:	58024400 	.word	0x58024400
 800bd58:	03d09000 	.word	0x03d09000
 800bd5c:	003d0900 	.word	0x003d0900
 800bd60:	017d7840 	.word	0x017d7840
 800bd64:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd6c:	e2d1      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bd6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd72:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bd76:	430b      	orrs	r3, r1
 800bd78:	f040 809c 	bne.w	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bd7c:	4b93      	ldr	r3, [pc, #588]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd80:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bd84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd8c:	d054      	beq.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd94:	f200 808b 	bhi.w	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd9e:	f000 8083 	beq.w	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bda8:	f200 8081 	bhi.w	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdb2:	d02f      	beq.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdba:	d878      	bhi.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdc8:	d012      	beq.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bdca:	e070      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdcc:	4b7f      	ldr	r3, [pc, #508]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bdd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdd8:	d107      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fd5e 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bde4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde8:	e293      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdee:	e290      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdf0:	4b76      	ldr	r3, [pc, #472]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdfc:	d107      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdfe:	f107 0318 	add.w	r3, r7, #24
 800be02:	4618      	mov	r0, r3
 800be04:	f000 faa4 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be0c:	e281      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be12:	e27e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be14:	4b6d      	ldr	r3, [pc, #436]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be20:	d107      	bne.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be22:	f107 030c 	add.w	r3, r7, #12
 800be26:	4618      	mov	r0, r3
 800be28:	f000 fbe6 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be30:	e26f      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be36:	e26c      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be38:	4b64      	ldr	r3, [pc, #400]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800be40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be42:	4b62      	ldr	r3, [pc, #392]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d10c      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800be4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be50:	2b00      	cmp	r3, #0
 800be52:	d109      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be54:	4b5d      	ldr	r3, [pc, #372]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	08db      	lsrs	r3, r3, #3
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	4a5c      	ldr	r2, [pc, #368]	@ (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800be60:	fa22 f303 	lsr.w	r3, r2, r3
 800be64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be66:	e01e      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be68:	4b58      	ldr	r3, [pc, #352]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be74:	d106      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800be76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be7c:	d102      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be7e:	4b55      	ldr	r3, [pc, #340]	@ (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800be80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be82:	e010      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be84:	4b51      	ldr	r3, [pc, #324]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be90:	d106      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800be92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be98:	d102      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be9a:	4b4f      	ldr	r3, [pc, #316]	@ (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800be9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be9e:	e002      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bea4:	e235      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bea6:	e234      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bea8:	4b4c      	ldr	r3, [pc, #304]	@ (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800beaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beac:	e231      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb2:	e22e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800beb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beb8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bebc:	430b      	orrs	r3, r1
 800bebe:	f040 808f 	bne.w	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bec2:	4b42      	ldr	r3, [pc, #264]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800beca:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800becc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bece:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bed2:	d06b      	beq.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800beda:	d874      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bede:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bee2:	d056      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800bee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800beea:	d86c      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800beec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bef2:	d03b      	beq.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800bef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800befa:	d864      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf02:	d021      	beq.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf0a:	d85c      	bhi.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d004      	beq.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf18:	d004      	beq.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800bf1a:	e054      	b.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bf1c:	f7fe fa0a 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 800bf20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf22:	e1f6      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf24:	4b29      	ldr	r3, [pc, #164]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf30:	d107      	bne.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf32:	f107 0318 	add.w	r3, r7, #24
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fa0a 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf40:	e1e7      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf46:	e1e4      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf48:	4b20      	ldr	r3, [pc, #128]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf54:	d107      	bne.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf56:	f107 030c 	add.w	r3, r7, #12
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fb4c 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf64:	e1d5      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf6a:	e1d2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf6c:	4b17      	ldr	r3, [pc, #92]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0304 	and.w	r3, r3, #4
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d109      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf78:	4b14      	ldr	r3, [pc, #80]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	08db      	lsrs	r3, r3, #3
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	4a13      	ldr	r2, [pc, #76]	@ (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bf84:	fa22 f303 	lsr.w	r3, r2, r3
 800bf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf8a:	e1c2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf90:	e1bf      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf92:	4b0e      	ldr	r3, [pc, #56]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9e:	d102      	bne.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa4:	e1b5      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfaa:	e1b2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfac:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfb8:	d102      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800bfba:	4b07      	ldr	r3, [pc, #28]	@ (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfbe:	e1a8      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfc4:	e1a5      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfca:	e1a2      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfcc:	58024400 	.word	0x58024400
 800bfd0:	03d09000 	.word	0x03d09000
 800bfd4:	003d0900 	.word	0x003d0900
 800bfd8:	017d7840 	.word	0x017d7840
 800bfdc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	d173      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bfec:	4b9c      	ldr	r3, [pc, #624]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bff4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bffc:	d02f      	beq.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800bffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c004:	d863      	bhi.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c012:	d012      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c014:	e05b      	b.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c016:	4b92      	ldr	r3, [pc, #584]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c01e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c022:	d107      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c024:	f107 0318 	add.w	r3, r7, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 f991 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c032:	e16e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c038:	e16b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c03a:	4b89      	ldr	r3, [pc, #548]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c046:	d107      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 fad3 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c056:	e15c      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c05c:	e159      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c05e:	4b80      	ldr	r3, [pc, #512]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c066:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c068:	4b7d      	ldr	r3, [pc, #500]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b04      	cmp	r3, #4
 800c072:	d10c      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c076:	2b00      	cmp	r3, #0
 800c078:	d109      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c07a:	4b79      	ldr	r3, [pc, #484]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	08db      	lsrs	r3, r3, #3
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	4a77      	ldr	r2, [pc, #476]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c086:	fa22 f303 	lsr.w	r3, r2, r3
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c08c:	e01e      	b.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c08e:	4b74      	ldr	r3, [pc, #464]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c09a:	d106      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c09e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0a2:	d102      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0a4:	4b70      	ldr	r3, [pc, #448]	@ (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0a8:	e010      	b.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0aa:	4b6d      	ldr	r3, [pc, #436]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0b6:	d106      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0be:	d102      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0c0:	4b6a      	ldr	r3, [pc, #424]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0c4:	e002      	b.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c0ca:	e122      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0cc:	e121      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0d2:	e11e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	d133      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c0e0:	4b5f      	ldr	r3, [pc, #380]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0f6:	d012      	beq.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c0f8:	e023      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0fa:	4b59      	ldr	r3, [pc, #356]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c106:	d107      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 fbc7 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c116:	e0fc      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c11c:	e0f9      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c11e:	4b50      	ldr	r3, [pc, #320]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c12a:	d107      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c12c:	f107 0318 	add.w	r3, r7, #24
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f90d 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c13a:	e0ea      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c140:	e0e7      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c142:	2300      	movs	r3, #0
 800c144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c146:	e0e4      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c14c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c150:	430b      	orrs	r3, r1
 800c152:	f040 808d 	bne.w	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c156:	4b42      	ldr	r3, [pc, #264]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c15a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c15e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c166:	d06b      	beq.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c16e:	d874      	bhi.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c176:	d056      	beq.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c17e:	d86c      	bhi.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c182:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c186:	d03b      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c18e:	d864      	bhi.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c196:	d021      	beq.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c19e:	d85c      	bhi.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1ac:	d004      	beq.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c1ae:	e054      	b.n	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c1b0:	f000 f8b8 	bl	800c324 <HAL_RCCEx_GetD3PCLK1Freq>
 800c1b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1b6:	e0ac      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1b8:	4b29      	ldr	r3, [pc, #164]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1c4:	d107      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1c6:	f107 0318 	add.w	r3, r7, #24
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 f8c0 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d4:	e09d      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1da:	e09a      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1dc:	4b20      	ldr	r3, [pc, #128]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c1e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1e8:	d107      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fa02 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f8:	e08b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1fe:	e088      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c200:	4b17      	ldr	r3, [pc, #92]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d109      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c20c:	4b14      	ldr	r3, [pc, #80]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	08db      	lsrs	r3, r3, #3
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	4a13      	ldr	r2, [pc, #76]	@ (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c218:	fa22 f303 	lsr.w	r3, r2, r3
 800c21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c21e:	e078      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c224:	e075      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c226:	4b0e      	ldr	r3, [pc, #56]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c232:	d102      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c234:	4b0c      	ldr	r3, [pc, #48]	@ (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c238:	e06b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c23e:	e068      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c240:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c24c:	d102      	bne.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c24e:	4b07      	ldr	r3, [pc, #28]	@ (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c252:	e05e      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c258:	e05b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c25e:	e058      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c260:	58024400 	.word	0x58024400
 800c264:	03d09000 	.word	0x03d09000
 800c268:	003d0900 	.word	0x003d0900
 800c26c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c274:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c278:	430b      	orrs	r3, r1
 800c27a:	d148      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c27c:	4b27      	ldr	r3, [pc, #156]	@ (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c280:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c284:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c28c:	d02a      	beq.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c294:	d838      	bhi.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2a2:	d00d      	beq.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c2a4:	e030      	b.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2b2:	d102      	bne.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b8:	e02b      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2be:	e028      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2c0:	4b16      	ldr	r3, [pc, #88]	@ (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c2cc:	d107      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fae4 	bl	800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2dc:	e019      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2e2:	e016      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	@ (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2f0:	d107      	bne.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f2:	f107 0318 	add.w	r3, r7, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 f82a 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c300:	e007      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c306:	e004      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c30c:	e001      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c314:	4618      	mov	r0, r3
 800c316:	3740      	adds	r7, #64	@ 0x40
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	58024400 	.word	0x58024400
 800c320:	017d7840 	.word	0x017d7840

0800c324 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c328:	f7fd ffd4 	bl	800a2d4 <HAL_RCC_GetHCLKFreq>
 800c32c:	4602      	mov	r2, r0
 800c32e:	4b06      	ldr	r3, [pc, #24]	@ (800c348 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	091b      	lsrs	r3, r3, #4
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	4904      	ldr	r1, [pc, #16]	@ (800c34c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c33a:	5ccb      	ldrb	r3, [r1, r3]
 800c33c:	f003 031f 	and.w	r3, r3, #31
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c344:	4618      	mov	r0, r3
 800c346:	bd80      	pop	{r7, pc}
 800c348:	58024400 	.word	0x58024400
 800c34c:	0801ec50 	.word	0x0801ec50

0800c350 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c350:	b480      	push	{r7}
 800c352:	b089      	sub	sp, #36	@ 0x24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c358:	4ba1      	ldr	r3, [pc, #644]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c362:	4b9f      	ldr	r3, [pc, #636]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c366:	0b1b      	lsrs	r3, r3, #12
 800c368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c36c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c36e:	4b9c      	ldr	r3, [pc, #624]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c372:	091b      	lsrs	r3, r3, #4
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c37a:	4b99      	ldr	r3, [pc, #612]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c37e:	08db      	lsrs	r3, r3, #3
 800c380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	fb02 f303 	mul.w	r3, r2, r3
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8111 	beq.w	800c5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	f000 8083 	beq.w	800c4ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	f200 80a1 	bhi.w	800c4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d056      	beq.n	800c468 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c3ba:	e099      	b.n	800c4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3bc:	4b88      	ldr	r3, [pc, #544]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d02d      	beq.n	800c424 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c8:	4b85      	ldr	r3, [pc, #532]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	08db      	lsrs	r3, r3, #3
 800c3ce:	f003 0303 	and.w	r3, r3, #3
 800c3d2:	4a84      	ldr	r2, [pc, #528]	@ (800c5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	ee07 3a90 	vmov	s15, r3
 800c3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3f2:	4b7b      	ldr	r3, [pc, #492]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c402:	ed97 6a03 	vldr	s12, [r7, #12]
 800c406:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c41e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c422:	e087      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c436:	4b6a      	ldr	r3, [pc, #424]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c446:	ed97 6a03 	vldr	s12, [r7, #12]
 800c44a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c466:	e065      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c472:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c47a:	4b59      	ldr	r3, [pc, #356]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c482:	ee07 3a90 	vmov	s15, r3
 800c486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c48e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c49a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4aa:	e043      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4be:	4b48      	ldr	r3, [pc, #288]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4ee:	e021      	b.n	800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c502:	4b37      	ldr	r3, [pc, #220]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c512:	ed97 6a03 	vldr	s12, [r7, #12]
 800c516:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c532:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c534:	4b2a      	ldr	r3, [pc, #168]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c538:	0a5b      	lsrs	r3, r3, #9
 800c53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c54a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c54e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c55a:	ee17 2a90 	vmov	r2, s15
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c562:	4b1f      	ldr	r3, [pc, #124]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c566:	0c1b      	lsrs	r3, r3, #16
 800c568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c57c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c588:	ee17 2a90 	vmov	r2, s15
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c590:	4b13      	ldr	r3, [pc, #76]	@ (800c5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c594:	0e1b      	lsrs	r3, r3, #24
 800c596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5b6:	ee17 2a90 	vmov	r2, s15
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c5be:	e008      	b.n	800c5d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	609a      	str	r2, [r3, #8]
}
 800c5d2:	bf00      	nop
 800c5d4:	3724      	adds	r7, #36	@ 0x24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	58024400 	.word	0x58024400
 800c5e4:	03d09000 	.word	0x03d09000
 800c5e8:	46000000 	.word	0x46000000
 800c5ec:	4c742400 	.word	0x4c742400
 800c5f0:	4a742400 	.word	0x4a742400
 800c5f4:	4bbebc20 	.word	0x4bbebc20

0800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b089      	sub	sp, #36	@ 0x24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c600:	4ba1      	ldr	r3, [pc, #644]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c60a:	4b9f      	ldr	r3, [pc, #636]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60e:	0d1b      	lsrs	r3, r3, #20
 800c610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c614:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c616:	4b9c      	ldr	r3, [pc, #624]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61a:	0a1b      	lsrs	r3, r3, #8
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c622:	4b99      	ldr	r3, [pc, #612]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c626:	08db      	lsrs	r3, r3, #3
 800c628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	fb02 f303 	mul.w	r3, r2, r3
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8111 	beq.w	800c868 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	f000 8083 	beq.w	800c754 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	2b02      	cmp	r3, #2
 800c652:	f200 80a1 	bhi.w	800c798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d056      	beq.n	800c710 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c662:	e099      	b.n	800c798 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c664:	4b88      	ldr	r3, [pc, #544]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02d      	beq.n	800c6cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c670:	4b85      	ldr	r3, [pc, #532]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	08db      	lsrs	r3, r3, #3
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	4a84      	ldr	r2, [pc, #528]	@ (800c88c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
 800c680:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	ee07 3a90 	vmov	s15, r3
 800c688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c69a:	4b7b      	ldr	r3, [pc, #492]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c6ca:	e087      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c894 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6de:	4b6a      	ldr	r3, [pc, #424]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e6:	ee07 3a90 	vmov	s15, r3
 800c6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c70e:	e065      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c722:	4b59      	ldr	r3, [pc, #356]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c732:	ed97 6a03 	vldr	s12, [r7, #12]
 800c736:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c752:	e043      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	ee07 3a90 	vmov	s15, r3
 800c75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c89c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c766:	4b48      	ldr	r3, [pc, #288]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c776:	ed97 6a03 	vldr	s12, [r7, #12]
 800c77a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c796:	e021      	b.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7aa:	4b37      	ldr	r3, [pc, #220]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c890 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c7dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e0:	0a5b      	lsrs	r3, r3, #9
 800c7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c802:	ee17 2a90 	vmov	r2, s15
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c80a:	4b1f      	ldr	r3, [pc, #124]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c80e:	0c1b      	lsrs	r3, r3, #16
 800c810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c814:	ee07 3a90 	vmov	s15, r3
 800c818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c820:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c824:	edd7 6a07 	vldr	s13, [r7, #28]
 800c828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c830:	ee17 2a90 	vmov	r2, s15
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c838:	4b13      	ldr	r3, [pc, #76]	@ (800c888 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c83c:	0e1b      	lsrs	r3, r3, #24
 800c83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c84e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c852:	edd7 6a07 	vldr	s13, [r7, #28]
 800c856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c85e:	ee17 2a90 	vmov	r2, s15
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c866:	e008      	b.n	800c87a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	609a      	str	r2, [r3, #8]
}
 800c87a:	bf00      	nop
 800c87c:	3724      	adds	r7, #36	@ 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	58024400 	.word	0x58024400
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	46000000 	.word	0x46000000
 800c894:	4c742400 	.word	0x4c742400
 800c898:	4a742400 	.word	0x4a742400
 800c89c:	4bbebc20 	.word	0x4bbebc20

0800c8a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b089      	sub	sp, #36	@ 0x24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8a8:	4ba0      	ldr	r3, [pc, #640]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c8b2:	4b9e      	ldr	r3, [pc, #632]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b6:	091b      	lsrs	r3, r3, #4
 800c8b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c8bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c8be:	4b9b      	ldr	r3, [pc, #620]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c8c8:	4b98      	ldr	r3, [pc, #608]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8cc:	08db      	lsrs	r3, r3, #3
 800c8ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
 800c8d8:	ee07 3a90 	vmov	s15, r3
 800c8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 8111 	beq.w	800cb0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	f000 8083 	beq.w	800c9fa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	f200 80a1 	bhi.w	800ca3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d003      	beq.n	800c90a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d056      	beq.n	800c9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c908:	e099      	b.n	800ca3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c90a:	4b88      	ldr	r3, [pc, #544]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b00      	cmp	r3, #0
 800c914:	d02d      	beq.n	800c972 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c916:	4b85      	ldr	r3, [pc, #532]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	08db      	lsrs	r3, r3, #3
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	4a83      	ldr	r2, [pc, #524]	@ (800cb30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c922:	fa22 f303 	lsr.w	r3, r2, r3
 800c926:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	ee07 3a90 	vmov	s15, r3
 800c938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c940:	4b7a      	ldr	r3, [pc, #488]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c948:	ee07 3a90 	vmov	s15, r3
 800c94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c950:	ed97 6a03 	vldr	s12, [r7, #12]
 800c954:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800cb34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c970:	e087      	b.n	800ca82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	ee07 3a90 	vmov	s15, r3
 800c978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800cb38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c984:	4b69      	ldr	r3, [pc, #420]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98c:	ee07 3a90 	vmov	s15, r3
 800c990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c994:	ed97 6a03 	vldr	s12, [r7, #12]
 800c998:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800cb34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c99c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9b4:	e065      	b.n	800ca82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	ee07 3a90 	vmov	s15, r3
 800c9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800cb3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c9c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c8:	4b58      	ldr	r3, [pc, #352]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d0:	ee07 3a90 	vmov	s15, r3
 800c9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9dc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800cb34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9f8:	e043      	b.n	800ca82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca04:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800cb40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ca08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0c:	4b47      	ldr	r3, [pc, #284]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca14:	ee07 3a90 	vmov	s15, r3
 800ca18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca20:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cb34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca3c:	e021      	b.n	800ca82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	ee07 3a90 	vmov	s15, r3
 800ca44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800cb38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ca4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca50:	4b36      	ldr	r3, [pc, #216]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cb34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca82:	4b2a      	ldr	r3, [pc, #168]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca86:	0a5b      	lsrs	r3, r3, #9
 800ca88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800caa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa8:	ee17 2a90 	vmov	r2, s15
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cab0:	4b1e      	ldr	r3, [pc, #120]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad6:	ee17 2a90 	vmov	r2, s15
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cade:	4b13      	ldr	r3, [pc, #76]	@ (800cb2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae2:	0e1b      	lsrs	r3, r3, #24
 800cae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cae8:	ee07 3a90 	vmov	s15, r3
 800caec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800caf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cafc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb04:	ee17 2a90 	vmov	r2, s15
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cb0c:	e008      	b.n	800cb20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	609a      	str	r2, [r3, #8]
}
 800cb20:	bf00      	nop
 800cb22:	3724      	adds	r7, #36	@ 0x24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	58024400 	.word	0x58024400
 800cb30:	03d09000 	.word	0x03d09000
 800cb34:	46000000 	.word	0x46000000
 800cb38:	4c742400 	.word	0x4c742400
 800cb3c:	4a742400 	.word	0x4a742400
 800cb40:	4bbebc20 	.word	0x4bbebc20

0800cb44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb52:	4b53      	ldr	r3, [pc, #332]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb56:	f003 0303 	and.w	r3, r3, #3
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d101      	bne.n	800cb62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e099      	b.n	800cc96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb62:	4b4f      	ldr	r3, [pc, #316]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a4e      	ldr	r2, [pc, #312]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cb68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cb6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6e:	f7f7 fe77 	bl	8004860 <HAL_GetTick>
 800cb72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb74:	e008      	b.n	800cb88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb76:	f7f7 fe73 	bl	8004860 <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d901      	bls.n	800cb88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e086      	b.n	800cc96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb88:	4b45      	ldr	r3, [pc, #276]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1f0      	bne.n	800cb76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb94:	4b42      	ldr	r3, [pc, #264]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cb96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	031b      	lsls	r3, r3, #12
 800cba2:	493f      	ldr	r1, [pc, #252]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	628b      	str	r3, [r1, #40]	@ 0x28
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	025b      	lsls	r3, r3, #9
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	431a      	orrs	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	041b      	lsls	r3, r3, #16
 800cbc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	061b      	lsls	r3, r3, #24
 800cbd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cbd8:	4931      	ldr	r1, [pc, #196]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbde:	4b30      	ldr	r3, [pc, #192]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	492d      	ldr	r1, [pc, #180]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cbec:	4313      	orrs	r3, r2
 800cbee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf4:	f023 0220 	bic.w	r2, r3, #32
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	4928      	ldr	r1, [pc, #160]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc02:	4b27      	ldr	r3, [pc, #156]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc06:	4a26      	ldr	r2, [pc, #152]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc08:	f023 0310 	bic.w	r3, r3, #16
 800cc0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc0e:	4b24      	ldr	r3, [pc, #144]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc12:	4b24      	ldr	r3, [pc, #144]	@ (800cca4 <RCCEx_PLL2_Config+0x160>)
 800cc14:	4013      	ands	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	69d2      	ldr	r2, [r2, #28]
 800cc1a:	00d2      	lsls	r2, r2, #3
 800cc1c:	4920      	ldr	r1, [pc, #128]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc22:	4b1f      	ldr	r3, [pc, #124]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc26:	4a1e      	ldr	r2, [pc, #120]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc28:	f043 0310 	orr.w	r3, r3, #16
 800cc2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc34:	4b1a      	ldr	r3, [pc, #104]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc38:	4a19      	ldr	r2, [pc, #100]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cc40:	e00f      	b.n	800cc62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d106      	bne.n	800cc56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc48:	4b15      	ldr	r3, [pc, #84]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc4c:	4a14      	ldr	r2, [pc, #80]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cc54:	e005      	b.n	800cc62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc56:	4b12      	ldr	r3, [pc, #72]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5a:	4a11      	ldr	r2, [pc, #68]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc62:	4b0f      	ldr	r3, [pc, #60]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a0e      	ldr	r2, [pc, #56]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cc6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6e:	f7f7 fdf7 	bl	8004860 <HAL_GetTick>
 800cc72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc74:	e008      	b.n	800cc88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc76:	f7f7 fdf3 	bl	8004860 <HAL_GetTick>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d901      	bls.n	800cc88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc84:	2303      	movs	r3, #3
 800cc86:	e006      	b.n	800cc96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc88:	4b05      	ldr	r3, [pc, #20]	@ (800cca0 <RCCEx_PLL2_Config+0x15c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d0f0      	beq.n	800cc76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	58024400 	.word	0x58024400
 800cca4:	ffff0007 	.word	0xffff0007

0800cca8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccb6:	4b53      	ldr	r3, [pc, #332]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccba:	f003 0303 	and.w	r3, r3, #3
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d101      	bne.n	800ccc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e099      	b.n	800cdfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccc6:	4b4f      	ldr	r3, [pc, #316]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a4e      	ldr	r2, [pc, #312]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccd2:	f7f7 fdc5 	bl	8004860 <HAL_GetTick>
 800ccd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccd8:	e008      	b.n	800ccec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccda:	f7f7 fdc1 	bl	8004860 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d901      	bls.n	800ccec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e086      	b.n	800cdfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccec:	4b45      	ldr	r3, [pc, #276]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1f0      	bne.n	800ccda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ccf8:	4b42      	ldr	r3, [pc, #264]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	051b      	lsls	r3, r3, #20
 800cd06:	493f      	ldr	r1, [pc, #252]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	025b      	lsls	r3, r3, #9
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	431a      	orrs	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	041b      	lsls	r3, r3, #16
 800cd2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	061b      	lsls	r3, r3, #24
 800cd38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cd3c:	4931      	ldr	r1, [pc, #196]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd42:	4b30      	ldr	r3, [pc, #192]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	492d      	ldr	r1, [pc, #180]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd50:	4313      	orrs	r3, r2
 800cd52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd54:	4b2b      	ldr	r3, [pc, #172]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	4928      	ldr	r1, [pc, #160]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd62:	4313      	orrs	r3, r2
 800cd64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd66:	4b27      	ldr	r3, [pc, #156]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd6a:	4a26      	ldr	r2, [pc, #152]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd72:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd76:	4b24      	ldr	r3, [pc, #144]	@ (800ce08 <RCCEx_PLL3_Config+0x160>)
 800cd78:	4013      	ands	r3, r2
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	69d2      	ldr	r2, [r2, #28]
 800cd7e:	00d2      	lsls	r2, r2, #3
 800cd80:	4920      	ldr	r1, [pc, #128]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd82:	4313      	orrs	r3, r2
 800cd84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd86:	4b1f      	ldr	r3, [pc, #124]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd8a:	4a1e      	ldr	r2, [pc, #120]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd98:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9c:	4a19      	ldr	r2, [pc, #100]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cd9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cda2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cda4:	e00f      	b.n	800cdc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d106      	bne.n	800cdba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cdac:	4b15      	ldr	r3, [pc, #84]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb0:	4a14      	ldr	r2, [pc, #80]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cdb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cdb8:	e005      	b.n	800cdc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdba:	4b12      	ldr	r3, [pc, #72]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdbe:	4a11      	ldr	r2, [pc, #68]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cdc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a0e      	ldr	r2, [pc, #56]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdd2:	f7f7 fd45 	bl	8004860 <HAL_GetTick>
 800cdd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdd8:	e008      	b.n	800cdec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdda:	f7f7 fd41 	bl	8004860 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d901      	bls.n	800cdec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e006      	b.n	800cdfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdec:	4b05      	ldr	r3, [pc, #20]	@ (800ce04 <RCCEx_PLL3_Config+0x15c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d0f0      	beq.n	800cdda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	58024400 	.word	0x58024400
 800ce08:	ffff0007 	.word	0xffff0007

0800ce0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e10f      	b.n	800d03e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a87      	ldr	r2, [pc, #540]	@ (800d048 <HAL_SPI_Init+0x23c>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d00f      	beq.n	800ce4e <HAL_SPI_Init+0x42>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a86      	ldr	r2, [pc, #536]	@ (800d04c <HAL_SPI_Init+0x240>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d00a      	beq.n	800ce4e <HAL_SPI_Init+0x42>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a84      	ldr	r2, [pc, #528]	@ (800d050 <HAL_SPI_Init+0x244>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d005      	beq.n	800ce4e <HAL_SPI_Init+0x42>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	2b0f      	cmp	r3, #15
 800ce48:	d901      	bls.n	800ce4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e0f7      	b.n	800d03e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fe2e 	bl	800dab0 <SPI_GetPacketSize>
 800ce54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a7b      	ldr	r2, [pc, #492]	@ (800d048 <HAL_SPI_Init+0x23c>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d00c      	beq.n	800ce7a <HAL_SPI_Init+0x6e>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a79      	ldr	r2, [pc, #484]	@ (800d04c <HAL_SPI_Init+0x240>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d007      	beq.n	800ce7a <HAL_SPI_Init+0x6e>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a78      	ldr	r2, [pc, #480]	@ (800d050 <HAL_SPI_Init+0x244>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d002      	beq.n	800ce7a <HAL_SPI_Init+0x6e>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	d811      	bhi.n	800ce9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce7e:	4a72      	ldr	r2, [pc, #456]	@ (800d048 <HAL_SPI_Init+0x23c>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d009      	beq.n	800ce98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a70      	ldr	r2, [pc, #448]	@ (800d04c <HAL_SPI_Init+0x240>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d004      	beq.n	800ce98 <HAL_SPI_Init+0x8c>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a6f      	ldr	r2, [pc, #444]	@ (800d050 <HAL_SPI_Init+0x244>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d104      	bne.n	800cea2 <HAL_SPI_Init+0x96>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b10      	cmp	r3, #16
 800ce9c:	d901      	bls.n	800cea2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e0cd      	b.n	800d03e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7f6 fd72 	bl	80039a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2202      	movs	r2, #2
 800cec0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0201 	bic.w	r2, r2, #1
 800ced2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cede:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	699b      	ldr	r3, [r3, #24]
 800cee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cee8:	d119      	bne.n	800cf1e <HAL_SPI_Init+0x112>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cef2:	d103      	bne.n	800cefc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d008      	beq.n	800cf0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10c      	bne.n	800cf1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf0c:	d107      	bne.n	800cf1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cf1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00f      	beq.n	800cf4a <HAL_SPI_Init+0x13e>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	2b06      	cmp	r3, #6
 800cf30:	d90b      	bls.n	800cf4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	e007      	b.n	800cf5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cf58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	69da      	ldr	r2, [r3, #28]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf62:	431a      	orrs	r2, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf6c:	ea42 0103 	orr.w	r1, r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68da      	ldr	r2, [r3, #12]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf84:	431a      	orrs	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf8a:	431a      	orrs	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	699b      	ldr	r3, [r3, #24]
 800cf90:	431a      	orrs	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	431a      	orrs	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	431a      	orrs	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfae:	431a      	orrs	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	431a      	orrs	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfba:	ea42 0103 	orr.w	r1, r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d113      	bne.n	800cffa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfe4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cff8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f022 0201 	bic.w	r2, r2, #1
 800d008:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00a      	beq.n	800d02c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	430a      	orrs	r2, r1
 800d02a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	40013000 	.word	0x40013000
 800d04c:	40003800 	.word	0x40003800
 800d050:	40003c00 	.word	0x40003c00

0800d054 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af02      	add	r7, sp, #8
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	603b      	str	r3, [r7, #0]
 800d060:	4613      	mov	r3, r2
 800d062:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3320      	adds	r3, #32
 800d06a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d06c:	f7f7 fbf8 	bl	8004860 <HAL_GetTick>
 800d070:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d001      	beq.n	800d082 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d07e:	2302      	movs	r3, #2
 800d080:	e1d1      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d002      	beq.n	800d08e <HAL_SPI_Transmit+0x3a>
 800d088:	88fb      	ldrh	r3, [r7, #6]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d101      	bne.n	800d092 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	e1c9      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d101      	bne.n	800d0a0 <HAL_SPI_Transmit+0x4c>
 800d09c:	2302      	movs	r3, #2
 800d09e:	e1c2      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	88fa      	ldrh	r2, [r7, #6]
 800d0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	88fa      	ldrh	r2, [r7, #6]
 800d0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d0f8:	d108      	bne.n	800d10c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	e009      	b.n	800d120 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d11e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	4b96      	ldr	r3, [pc, #600]	@ (800d380 <HAL_SPI_Transmit+0x32c>)
 800d128:	4013      	ands	r3, r2
 800d12a:	88f9      	ldrh	r1, [r7, #6]
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	6812      	ldr	r2, [r2, #0]
 800d130:	430b      	orrs	r3, r1
 800d132:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f042 0201 	orr.w	r2, r2, #1
 800d142:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d14c:	d107      	bne.n	800d15e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d15c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	2b0f      	cmp	r3, #15
 800d164:	d947      	bls.n	800d1f6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d166:	e03f      	b.n	800d1e8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	f003 0302 	and.w	r3, r3, #2
 800d172:	2b02      	cmp	r3, #2
 800d174:	d114      	bne.n	800d1a0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6812      	ldr	r2, [r2, #0]
 800d180:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d186:	1d1a      	adds	r2, r3, #4
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d192:	b29b      	uxth	r3, r3
 800d194:	3b01      	subs	r3, #1
 800d196:	b29a      	uxth	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d19e:	e023      	b.n	800d1e8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1a0:	f7f7 fb5e 	bl	8004860 <HAL_GetTick>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d803      	bhi.n	800d1b8 <HAL_SPI_Transmit+0x164>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b6:	d102      	bne.n	800d1be <HAL_SPI_Transmit+0x16a>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d114      	bne.n	800d1e8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 fba8 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e11e      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1b9      	bne.n	800d168 <HAL_SPI_Transmit+0x114>
 800d1f4:	e0f1      	b.n	800d3da <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	2b07      	cmp	r3, #7
 800d1fc:	f240 80e6 	bls.w	800d3cc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d200:	e05d      	b.n	800d2be <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	f003 0302 	and.w	r3, r3, #2
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d132      	bne.n	800d276 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d216:	b29b      	uxth	r3, r3
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d918      	bls.n	800d24e <HAL_SPI_Transmit+0x1fa>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d220:	2b00      	cmp	r3, #0
 800d222:	d014      	beq.n	800d24e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d234:	1d1a      	adds	r2, r3, #4
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d240:	b29b      	uxth	r3, r3
 800d242:	3b02      	subs	r3, #2
 800d244:	b29a      	uxth	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d24c:	e037      	b.n	800d2be <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d252:	881a      	ldrh	r2, [r3, #0]
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d25c:	1c9a      	adds	r2, r3, #2
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d274:	e023      	b.n	800d2be <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d276:	f7f7 faf3 	bl	8004860 <HAL_GetTick>
 800d27a:	4602      	mov	r2, r0
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	1ad3      	subs	r3, r2, r3
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d803      	bhi.n	800d28e <HAL_SPI_Transmit+0x23a>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28c:	d102      	bne.n	800d294 <HAL_SPI_Transmit+0x240>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d114      	bne.n	800d2be <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f000 fb3d 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	e0b3      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d19b      	bne.n	800d202 <HAL_SPI_Transmit+0x1ae>
 800d2ca:	e086      	b.n	800d3da <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d154      	bne.n	800d384 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d918      	bls.n	800d318 <HAL_SPI_Transmit+0x2c4>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ea:	2b40      	cmp	r3, #64	@ 0x40
 800d2ec:	d914      	bls.n	800d318 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6812      	ldr	r2, [r2, #0]
 800d2f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2fe:	1d1a      	adds	r2, r3, #4
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	3b04      	subs	r3, #4
 800d30e:	b29a      	uxth	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d316:	e059      	b.n	800d3cc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d31e:	b29b      	uxth	r3, r3
 800d320:	2b01      	cmp	r3, #1
 800d322:	d917      	bls.n	800d354 <HAL_SPI_Transmit+0x300>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d013      	beq.n	800d354 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d330:	881a      	ldrh	r2, [r3, #0]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d33a:	1c9a      	adds	r2, r3, #2
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d346:	b29b      	uxth	r3, r3
 800d348:	3b02      	subs	r3, #2
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d352:	e03b      	b.n	800d3cc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3320      	adds	r3, #32
 800d35e:	7812      	ldrb	r2, [r2, #0]
 800d360:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d372:	b29b      	uxth	r3, r3
 800d374:	3b01      	subs	r3, #1
 800d376:	b29a      	uxth	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d37e:	e025      	b.n	800d3cc <HAL_SPI_Transmit+0x378>
 800d380:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d384:	f7f7 fa6c 	bl	8004860 <HAL_GetTick>
 800d388:	4602      	mov	r2, r0
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	429a      	cmp	r2, r3
 800d392:	d803      	bhi.n	800d39c <HAL_SPI_Transmit+0x348>
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39a:	d102      	bne.n	800d3a2 <HAL_SPI_Transmit+0x34e>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d114      	bne.n	800d3cc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 fab6 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e02c      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f47f af79 	bne.w	800d2cc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2108      	movs	r1, #8
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f000 fb35 	bl	800da54 <SPI_WaitOnFlagUntilTimeout>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d007      	beq.n	800d400 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3f6:	f043 0220 	orr.w	r2, r3, #32
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 fa87 	bl	800d914 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e000      	b.n	800d426 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d424:	2300      	movs	r3, #0
  }
}
 800d426:	4618      	mov	r0, r3
 800d428:	3718      	adds	r7, #24
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop

0800d430 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	4613      	mov	r3, r2
 800d43e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d444:	095b      	lsrs	r3, r3, #5
 800d446:	b29b      	uxth	r3, r3
 800d448:	3301      	adds	r3, #1
 800d44a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	3330      	adds	r3, #48	@ 0x30
 800d452:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d454:	f7f7 fa04 	bl	8004860 <HAL_GetTick>
 800d458:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b01      	cmp	r3, #1
 800d464:	d001      	beq.n	800d46a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d466:	2302      	movs	r3, #2
 800d468:	e250      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <HAL_SPI_Receive+0x46>
 800d470:	88fb      	ldrh	r3, [r7, #6]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e248      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d480:	2b01      	cmp	r3, #1
 800d482:	d101      	bne.n	800d488 <HAL_SPI_Receive+0x58>
 800d484:	2302      	movs	r3, #2
 800d486:	e241      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2204      	movs	r2, #4
 800d494:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	88fa      	ldrh	r2, [r7, #6]
 800d4aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	88fa      	ldrh	r2, [r7, #6]
 800d4b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d4e0:	d108      	bne.n	800d4f4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e009      	b.n	800d508 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d506:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	4b95      	ldr	r3, [pc, #596]	@ (800d764 <HAL_SPI_Receive+0x334>)
 800d510:	4013      	ands	r3, r2
 800d512:	88f9      	ldrh	r1, [r7, #6]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	430b      	orrs	r3, r1
 800d51a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f042 0201 	orr.w	r2, r2, #1
 800d52a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d534:	d107      	bne.n	800d546 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	2b0f      	cmp	r3, #15
 800d54c:	d96c      	bls.n	800d628 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d54e:	e064      	b.n	800d61a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b01      	cmp	r3, #1
 800d564:	d114      	bne.n	800d590 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d56e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d570:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d576:	1d1a      	adds	r2, r3, #4
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d582:	b29b      	uxth	r3, r3
 800d584:	3b01      	subs	r3, #1
 800d586:	b29a      	uxth	r2, r3
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d58e:	e044      	b.n	800d61a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d596:	b29b      	uxth	r3, r3
 800d598:	8bfa      	ldrh	r2, [r7, #30]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d919      	bls.n	800d5d2 <HAL_SPI_Receive+0x1a2>
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d014      	beq.n	800d5d2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d5b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5b8:	1d1a      	adds	r2, r3, #4
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d5d0:	e023      	b.n	800d61a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5d2:	f7f7 f945 	bl	8004860 <HAL_GetTick>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d803      	bhi.n	800d5ea <HAL_SPI_Receive+0x1ba>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e8:	d102      	bne.n	800d5f0 <HAL_SPI_Receive+0x1c0>
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d114      	bne.n	800d61a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f000 f98f 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d616:	2303      	movs	r3, #3
 800d618:	e178      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d620:	b29b      	uxth	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d194      	bne.n	800d550 <HAL_SPI_Receive+0x120>
 800d626:	e15e      	b.n	800d8e6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	2b07      	cmp	r3, #7
 800d62e:	f240 8153 	bls.w	800d8d8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d632:	e08f      	b.n	800d754 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	695b      	ldr	r3, [r3, #20]
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	2b01      	cmp	r3, #1
 800d648:	d114      	bne.n	800d674 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	8812      	ldrh	r2, [r2, #0]
 800d652:	b292      	uxth	r2, r2
 800d654:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d65a:	1c9a      	adds	r2, r3, #2
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d666:	b29b      	uxth	r3, r3
 800d668:	3b01      	subs	r3, #1
 800d66a:	b29a      	uxth	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d672:	e06f      	b.n	800d754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	8bfa      	ldrh	r2, [r7, #30]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d924      	bls.n	800d6cc <HAL_SPI_Receive+0x29c>
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d01f      	beq.n	800d6cc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d690:	69ba      	ldr	r2, [r7, #24]
 800d692:	8812      	ldrh	r2, [r2, #0]
 800d694:	b292      	uxth	r2, r2
 800d696:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d69c:	1c9a      	adds	r2, r3, #2
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	8812      	ldrh	r2, [r2, #0]
 800d6aa:	b292      	uxth	r2, r2
 800d6ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6b2:	1c9a      	adds	r2, r3, #2
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	3b02      	subs	r3, #2
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d6ca:	e043      	b.n	800d754 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d119      	bne.n	800d70c <HAL_SPI_Receive+0x2dc>
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d014      	beq.n	800d70c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	8812      	ldrh	r2, [r2, #0]
 800d6ea:	b292      	uxth	r2, r2
 800d6ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6f2:	1c9a      	adds	r2, r3, #2
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	3b01      	subs	r3, #1
 800d702:	b29a      	uxth	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d70a:	e023      	b.n	800d754 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d70c:	f7f7 f8a8 	bl	8004860 <HAL_GetTick>
 800d710:	4602      	mov	r2, r0
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d803      	bhi.n	800d724 <HAL_SPI_Receive+0x2f4>
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d722:	d102      	bne.n	800d72a <HAL_SPI_Receive+0x2fa>
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d114      	bne.n	800d754 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 f8f2 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d736:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e0db      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f47f af69 	bne.w	800d634 <HAL_SPI_Receive+0x204>
 800d762:	e0c0      	b.n	800d8e6 <HAL_SPI_Receive+0x4b6>
 800d764:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	695b      	ldr	r3, [r3, #20]
 800d76e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	695b      	ldr	r3, [r3, #20]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d117      	bne.n	800d7ae <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d78a:	7812      	ldrb	r2, [r2, #0]
 800d78c:	b2d2      	uxtb	r2, r2
 800d78e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d7ac:	e094      	b.n	800d8d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	8bfa      	ldrh	r2, [r7, #30]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d946      	bls.n	800d84a <HAL_SPI_Receive+0x41a>
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d041      	beq.n	800d84a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	b2d2      	uxtb	r2, r2
 800d7d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7ee:	7812      	ldrb	r2, [r2, #0]
 800d7f0:	b2d2      	uxtb	r2, r2
 800d7f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d80a:	7812      	ldrb	r2, [r2, #0]
 800d80c:	b2d2      	uxtb	r2, r2
 800d80e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d826:	7812      	ldrb	r2, [r2, #0]
 800d828:	b2d2      	uxtb	r2, r2
 800d82a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	3b04      	subs	r3, #4
 800d840:	b29a      	uxth	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d848:	e046      	b.n	800d8d8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b03      	cmp	r3, #3
 800d854:	d81c      	bhi.n	800d890 <HAL_SPI_Receive+0x460>
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d017      	beq.n	800d890 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d86c:	7812      	ldrb	r2, [r2, #0]
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d882:	b29b      	uxth	r3, r3
 800d884:	3b01      	subs	r3, #1
 800d886:	b29a      	uxth	r2, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d88e:	e023      	b.n	800d8d8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d890:	f7f6 ffe6 	bl	8004860 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d803      	bhi.n	800d8a8 <HAL_SPI_Receive+0x478>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a6:	d102      	bne.n	800d8ae <HAL_SPI_Receive+0x47e>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d114      	bne.n	800d8d8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f000 f830 	bl	800d914 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	e019      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f47f af41 	bne.w	800d768 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f000 f814 	bl	800d914 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d90a:	2300      	movs	r3, #0
  }
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	699a      	ldr	r2, [r3, #24]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f042 0208 	orr.w	r2, r2, #8
 800d932:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	699a      	ldr	r2, [r3, #24]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f042 0210 	orr.w	r2, r2, #16
 800d942:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 0201 	bic.w	r2, r2, #1
 800d952:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6919      	ldr	r1, [r3, #16]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	4b3c      	ldr	r3, [pc, #240]	@ (800da50 <SPI_CloseTransfer+0x13c>)
 800d960:	400b      	ands	r3, r1
 800d962:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	689a      	ldr	r2, [r3, #8]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d972:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d014      	beq.n	800d9aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f003 0320 	and.w	r3, r3, #32
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00f      	beq.n	800d9aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d990:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	699a      	ldr	r2, [r3, #24]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f042 0220 	orr.w	r2, r2, #32
 800d9a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b03      	cmp	r3, #3
 800d9b4:	d014      	beq.n	800d9e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00f      	beq.n	800d9e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d9c6:	f043 0204 	orr.w	r2, r3, #4
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d9de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00f      	beq.n	800da0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d9f0:	f043 0201 	orr.w	r2, r3, #1
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	699a      	ldr	r2, [r3, #24]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00f      	beq.n	800da34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da1a:	f043 0208 	orr.w	r2, r3, #8
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	699a      	ldr	r2, [r3, #24]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800da32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800da44:	bf00      	nop
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	fffffc90 	.word	0xfffffc90

0800da54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	4613      	mov	r3, r2
 800da62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800da64:	e010      	b.n	800da88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da66:	f7f6 fefb 	bl	8004860 <HAL_GetTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d803      	bhi.n	800da7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7c:	d102      	bne.n	800da84 <SPI_WaitOnFlagUntilTimeout+0x30>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800da84:	2303      	movs	r3, #3
 800da86:	e00f      	b.n	800daa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	695a      	ldr	r2, [r3, #20]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	4013      	ands	r3, r2
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	429a      	cmp	r2, r3
 800da96:	bf0c      	ite	eq
 800da98:	2301      	moveq	r3, #1
 800da9a:	2300      	movne	r3, #0
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	461a      	mov	r2, r3
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d0df      	beq.n	800da66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dabc:	095b      	lsrs	r3, r3, #5
 800dabe:	3301      	adds	r3, #1
 800dac0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	3301      	adds	r3, #1
 800dac8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	3307      	adds	r3, #7
 800dace:	08db      	lsrs	r3, r3, #3
 800dad0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	fb02 f303 	mul.w	r3, r2, r3
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e049      	b.n	800db8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7f6 fc43 	bl	8004398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2202      	movs	r2, #2
 800db16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3304      	adds	r3, #4
 800db22:	4619      	mov	r1, r3
 800db24:	4610      	mov	r0, r2
 800db26:	f001 f857 	bl	800ebd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d001      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e054      	b.n	800dc56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2202      	movs	r2, #2
 800dbb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	68da      	ldr	r2, [r3, #12]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f042 0201 	orr.w	r2, r2, #1
 800dbc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a26      	ldr	r2, [pc, #152]	@ (800dc64 <HAL_TIM_Base_Start_IT+0xd0>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d022      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbd6:	d01d      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a22      	ldr	r2, [pc, #136]	@ (800dc68 <HAL_TIM_Base_Start_IT+0xd4>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d018      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a21      	ldr	r2, [pc, #132]	@ (800dc6c <HAL_TIM_Base_Start_IT+0xd8>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d013      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a1f      	ldr	r2, [pc, #124]	@ (800dc70 <HAL_TIM_Base_Start_IT+0xdc>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d00e      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800dc74 <HAL_TIM_Base_Start_IT+0xe0>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d009      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a1c      	ldr	r2, [pc, #112]	@ (800dc78 <HAL_TIM_Base_Start_IT+0xe4>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d004      	beq.n	800dc14 <HAL_TIM_Base_Start_IT+0x80>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a1b      	ldr	r2, [pc, #108]	@ (800dc7c <HAL_TIM_Base_Start_IT+0xe8>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d115      	bne.n	800dc40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	4b19      	ldr	r3, [pc, #100]	@ (800dc80 <HAL_TIM_Base_Start_IT+0xec>)
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2b06      	cmp	r3, #6
 800dc24:	d015      	beq.n	800dc52 <HAL_TIM_Base_Start_IT+0xbe>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc2c:	d011      	beq.n	800dc52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f042 0201 	orr.w	r2, r2, #1
 800dc3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc3e:	e008      	b.n	800dc52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f042 0201 	orr.w	r2, r2, #1
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	e000      	b.n	800dc54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	40010000 	.word	0x40010000
 800dc68:	40000400 	.word	0x40000400
 800dc6c:	40000800 	.word	0x40000800
 800dc70:	40000c00 	.word	0x40000c00
 800dc74:	40010400 	.word	0x40010400
 800dc78:	40001800 	.word	0x40001800
 800dc7c:	40014000 	.word	0x40014000
 800dc80:	00010007 	.word	0x00010007

0800dc84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68da      	ldr	r2, [r3, #12]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f022 0201 	bic.w	r2, r2, #1
 800dc9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6a1a      	ldr	r2, [r3, #32]
 800dca2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dca6:	4013      	ands	r3, r2
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10f      	bne.n	800dccc <HAL_TIM_Base_Stop_IT+0x48>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6a1a      	ldr	r2, [r3, #32]
 800dcb2:	f240 4344 	movw	r3, #1092	@ 0x444
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d107      	bne.n	800dccc <HAL_TIM_Base_Stop_IT+0x48>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f022 0201 	bic.w	r2, r2, #1
 800dcca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e049      	b.n	800dd88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d106      	bne.n	800dd0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 f841 	bl	800dd90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2202      	movs	r2, #2
 800dd12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4619      	mov	r1, r3
 800dd20:	4610      	mov	r0, r2
 800dd22:	f000 ff59 	bl	800ebd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2201      	movs	r2, #1
 800dd42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e049      	b.n	800de4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d106      	bne.n	800ddd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7f6 fac2 	bl	8004354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4619      	mov	r1, r3
 800dde2:	4610      	mov	r0, r2
 800dde4:	f000 fef8 	bl	800ebd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
	...

0800de54 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800de62:	2300      	movs	r3, #0
 800de64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d109      	bne.n	800de80 <HAL_TIM_PWM_Start_DMA+0x2c>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b02      	cmp	r3, #2
 800de76:	bf0c      	ite	eq
 800de78:	2301      	moveq	r3, #1
 800de7a:	2300      	movne	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	e03c      	b.n	800defa <HAL_TIM_PWM_Start_DMA+0xa6>
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b04      	cmp	r3, #4
 800de84:	d109      	bne.n	800de9a <HAL_TIM_PWM_Start_DMA+0x46>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b02      	cmp	r3, #2
 800de90:	bf0c      	ite	eq
 800de92:	2301      	moveq	r3, #1
 800de94:	2300      	movne	r3, #0
 800de96:	b2db      	uxtb	r3, r3
 800de98:	e02f      	b.n	800defa <HAL_TIM_PWM_Start_DMA+0xa6>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b08      	cmp	r3, #8
 800de9e:	d109      	bne.n	800deb4 <HAL_TIM_PWM_Start_DMA+0x60>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	bf0c      	ite	eq
 800deac:	2301      	moveq	r3, #1
 800deae:	2300      	movne	r3, #0
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	e022      	b.n	800defa <HAL_TIM_PWM_Start_DMA+0xa6>
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b0c      	cmp	r3, #12
 800deb8:	d109      	bne.n	800dece <HAL_TIM_PWM_Start_DMA+0x7a>
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	bf0c      	ite	eq
 800dec6:	2301      	moveq	r3, #1
 800dec8:	2300      	movne	r3, #0
 800deca:	b2db      	uxtb	r3, r3
 800decc:	e015      	b.n	800defa <HAL_TIM_PWM_Start_DMA+0xa6>
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b10      	cmp	r3, #16
 800ded2:	d109      	bne.n	800dee8 <HAL_TIM_PWM_Start_DMA+0x94>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b02      	cmp	r3, #2
 800dede:	bf0c      	ite	eq
 800dee0:	2301      	moveq	r3, #1
 800dee2:	2300      	movne	r3, #0
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	e008      	b.n	800defa <HAL_TIM_PWM_Start_DMA+0xa6>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b02      	cmp	r3, #2
 800def2:	bf0c      	ite	eq
 800def4:	2301      	moveq	r3, #1
 800def6:	2300      	movne	r3, #0
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800defe:	2302      	movs	r3, #2
 800df00:	e1b0      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d109      	bne.n	800df1c <HAL_TIM_PWM_Start_DMA+0xc8>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b01      	cmp	r3, #1
 800df12:	bf0c      	ite	eq
 800df14:	2301      	moveq	r3, #1
 800df16:	2300      	movne	r3, #0
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	e03c      	b.n	800df96 <HAL_TIM_PWM_Start_DMA+0x142>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b04      	cmp	r3, #4
 800df20:	d109      	bne.n	800df36 <HAL_TIM_PWM_Start_DMA+0xe2>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	bf0c      	ite	eq
 800df2e:	2301      	moveq	r3, #1
 800df30:	2300      	movne	r3, #0
 800df32:	b2db      	uxtb	r3, r3
 800df34:	e02f      	b.n	800df96 <HAL_TIM_PWM_Start_DMA+0x142>
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2b08      	cmp	r3, #8
 800df3a:	d109      	bne.n	800df50 <HAL_TIM_PWM_Start_DMA+0xfc>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b01      	cmp	r3, #1
 800df46:	bf0c      	ite	eq
 800df48:	2301      	moveq	r3, #1
 800df4a:	2300      	movne	r3, #0
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	e022      	b.n	800df96 <HAL_TIM_PWM_Start_DMA+0x142>
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b0c      	cmp	r3, #12
 800df54:	d109      	bne.n	800df6a <HAL_TIM_PWM_Start_DMA+0x116>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b01      	cmp	r3, #1
 800df60:	bf0c      	ite	eq
 800df62:	2301      	moveq	r3, #1
 800df64:	2300      	movne	r3, #0
 800df66:	b2db      	uxtb	r3, r3
 800df68:	e015      	b.n	800df96 <HAL_TIM_PWM_Start_DMA+0x142>
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b10      	cmp	r3, #16
 800df6e:	d109      	bne.n	800df84 <HAL_TIM_PWM_Start_DMA+0x130>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b01      	cmp	r3, #1
 800df7a:	bf0c      	ite	eq
 800df7c:	2301      	moveq	r3, #1
 800df7e:	2300      	movne	r3, #0
 800df80:	b2db      	uxtb	r3, r3
 800df82:	e008      	b.n	800df96 <HAL_TIM_PWM_Start_DMA+0x142>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	bf0c      	ite	eq
 800df90:	2301      	moveq	r3, #1
 800df92:	2300      	movne	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d034      	beq.n	800e004 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d002      	beq.n	800dfa6 <HAL_TIM_PWM_Start_DMA+0x152>
 800dfa0:	887b      	ldrh	r3, [r7, #2]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e15c      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d104      	bne.n	800dfba <HAL_TIM_PWM_Start_DMA+0x166>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2202      	movs	r2, #2
 800dfb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfb8:	e026      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2b04      	cmp	r3, #4
 800dfbe:	d104      	bne.n	800dfca <HAL_TIM_PWM_Start_DMA+0x176>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dfc8:	e01e      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b08      	cmp	r3, #8
 800dfce:	d104      	bne.n	800dfda <HAL_TIM_PWM_Start_DMA+0x186>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dfd8:	e016      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b0c      	cmp	r3, #12
 800dfde:	d104      	bne.n	800dfea <HAL_TIM_PWM_Start_DMA+0x196>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfe8:	e00e      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b10      	cmp	r3, #16
 800dfee:	d104      	bne.n	800dffa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2202      	movs	r2, #2
 800dff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dff8:	e006      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2202      	movs	r2, #2
 800dffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e002:	e001      	b.n	800e008 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e12d      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2b0c      	cmp	r3, #12
 800e00c:	f200 80ae 	bhi.w	800e16c <HAL_TIM_PWM_Start_DMA+0x318>
 800e010:	a201      	add	r2, pc, #4	@ (adr r2, 800e018 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800e012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e016:	bf00      	nop
 800e018:	0800e04d 	.word	0x0800e04d
 800e01c:	0800e16d 	.word	0x0800e16d
 800e020:	0800e16d 	.word	0x0800e16d
 800e024:	0800e16d 	.word	0x0800e16d
 800e028:	0800e095 	.word	0x0800e095
 800e02c:	0800e16d 	.word	0x0800e16d
 800e030:	0800e16d 	.word	0x0800e16d
 800e034:	0800e16d 	.word	0x0800e16d
 800e038:	0800e0dd 	.word	0x0800e0dd
 800e03c:	0800e16d 	.word	0x0800e16d
 800e040:	0800e16d 	.word	0x0800e16d
 800e044:	0800e16d 	.word	0x0800e16d
 800e048:	0800e125 	.word	0x0800e125
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e050:	4a86      	ldr	r2, [pc, #536]	@ (800e26c <HAL_TIM_PWM_Start_DMA+0x418>)
 800e052:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e058:	4a85      	ldr	r2, [pc, #532]	@ (800e270 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800e05a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e060:	4a84      	ldr	r2, [pc, #528]	@ (800e274 <HAL_TIM_PWM_Start_DMA+0x420>)
 800e062:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3334      	adds	r3, #52	@ 0x34
 800e070:	461a      	mov	r2, r3
 800e072:	887b      	ldrh	r3, [r7, #2]
 800e074:	f7f7 ffec 	bl	8006050 <HAL_DMA_Start_IT>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d001      	beq.n	800e082 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e0f0      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68da      	ldr	r2, [r3, #12]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e090:	60da      	str	r2, [r3, #12]
      break;
 800e092:	e06e      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e098:	4a74      	ldr	r2, [pc, #464]	@ (800e26c <HAL_TIM_PWM_Start_DMA+0x418>)
 800e09a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a0:	4a73      	ldr	r2, [pc, #460]	@ (800e270 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800e0a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a8:	4a72      	ldr	r2, [pc, #456]	@ (800e274 <HAL_TIM_PWM_Start_DMA+0x420>)
 800e0aa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3338      	adds	r3, #56	@ 0x38
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	887b      	ldrh	r3, [r7, #2]
 800e0bc:	f7f7 ffc8 	bl	8006050 <HAL_DMA_Start_IT>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e0cc      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	68da      	ldr	r2, [r3, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e0d8:	60da      	str	r2, [r3, #12]
      break;
 800e0da:	e04a      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e0:	4a62      	ldr	r2, [pc, #392]	@ (800e26c <HAL_TIM_PWM_Start_DMA+0x418>)
 800e0e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	4a61      	ldr	r2, [pc, #388]	@ (800e270 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800e0ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f0:	4a60      	ldr	r2, [pc, #384]	@ (800e274 <HAL_TIM_PWM_Start_DMA+0x420>)
 800e0f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e0f8:	6879      	ldr	r1, [r7, #4]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	333c      	adds	r3, #60	@ 0x3c
 800e100:	461a      	mov	r2, r3
 800e102:	887b      	ldrh	r3, [r7, #2]
 800e104:	f7f7 ffa4 	bl	8006050 <HAL_DMA_Start_IT>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e0a8      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e120:	60da      	str	r2, [r3, #12]
      break;
 800e122:	e026      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e128:	4a50      	ldr	r2, [pc, #320]	@ (800e26c <HAL_TIM_PWM_Start_DMA+0x418>)
 800e12a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e130:	4a4f      	ldr	r2, [pc, #316]	@ (800e270 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800e132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e138:	4a4e      	ldr	r2, [pc, #312]	@ (800e274 <HAL_TIM_PWM_Start_DMA+0x420>)
 800e13a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	3340      	adds	r3, #64	@ 0x40
 800e148:	461a      	mov	r2, r3
 800e14a:	887b      	ldrh	r3, [r7, #2]
 800e14c:	f7f7 ff80 	bl	8006050 <HAL_DMA_Start_IT>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e156:	2301      	movs	r3, #1
 800e158:	e084      	b.n	800e264 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68da      	ldr	r2, [r3, #12]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e168:	60da      	str	r2, [r3, #12]
      break;
 800e16a:	e002      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	75fb      	strb	r3, [r7, #23]
      break;
 800e170:	bf00      	nop
  }

  if (status == HAL_OK)
 800e172:	7dfb      	ldrb	r3, [r7, #23]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d174      	bne.n	800e262 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2201      	movs	r2, #1
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	4618      	mov	r0, r3
 800e182:	f001 f93d 	bl	800f400 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a3b      	ldr	r2, [pc, #236]	@ (800e278 <HAL_TIM_PWM_Start_DMA+0x424>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d013      	beq.n	800e1b8 <HAL_TIM_PWM_Start_DMA+0x364>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a39      	ldr	r2, [pc, #228]	@ (800e27c <HAL_TIM_PWM_Start_DMA+0x428>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d00e      	beq.n	800e1b8 <HAL_TIM_PWM_Start_DMA+0x364>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a38      	ldr	r2, [pc, #224]	@ (800e280 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d009      	beq.n	800e1b8 <HAL_TIM_PWM_Start_DMA+0x364>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a36      	ldr	r2, [pc, #216]	@ (800e284 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d004      	beq.n	800e1b8 <HAL_TIM_PWM_Start_DMA+0x364>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a35      	ldr	r2, [pc, #212]	@ (800e288 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d101      	bne.n	800e1bc <HAL_TIM_PWM_Start_DMA+0x368>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e000      	b.n	800e1be <HAL_TIM_PWM_Start_DMA+0x36a>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d007      	beq.n	800e1d2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e1d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a28      	ldr	r2, [pc, #160]	@ (800e278 <HAL_TIM_PWM_Start_DMA+0x424>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d022      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1e4:	d01d      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a28      	ldr	r2, [pc, #160]	@ (800e28c <HAL_TIM_PWM_Start_DMA+0x438>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d018      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a26      	ldr	r2, [pc, #152]	@ (800e290 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d013      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a25      	ldr	r2, [pc, #148]	@ (800e294 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d00e      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a1c      	ldr	r2, [pc, #112]	@ (800e27c <HAL_TIM_PWM_Start_DMA+0x428>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d009      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a21      	ldr	r2, [pc, #132]	@ (800e298 <HAL_TIM_PWM_Start_DMA+0x444>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d004      	beq.n	800e222 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a18      	ldr	r2, [pc, #96]	@ (800e280 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d115      	bne.n	800e24e <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	689a      	ldr	r2, [r3, #8]
 800e228:	4b1c      	ldr	r3, [pc, #112]	@ (800e29c <HAL_TIM_PWM_Start_DMA+0x448>)
 800e22a:	4013      	ands	r3, r2
 800e22c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	2b06      	cmp	r3, #6
 800e232:	d015      	beq.n	800e260 <HAL_TIM_PWM_Start_DMA+0x40c>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e23a:	d011      	beq.n	800e260 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f042 0201 	orr.w	r2, r2, #1
 800e24a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e24c:	e008      	b.n	800e260 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f042 0201 	orr.w	r2, r2, #1
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	e000      	b.n	800e262 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e260:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e262:	7dfb      	ldrb	r3, [r7, #23]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	0800eac7 	.word	0x0800eac7
 800e270:	0800eb6f 	.word	0x0800eb6f
 800e274:	0800ea35 	.word	0x0800ea35
 800e278:	40010000 	.word	0x40010000
 800e27c:	40010400 	.word	0x40010400
 800e280:	40014000 	.word	0x40014000
 800e284:	40014400 	.word	0x40014400
 800e288:	40014800 	.word	0x40014800
 800e28c:	40000400 	.word	0x40000400
 800e290:	40000800 	.word	0x40000800
 800e294:	40000c00 	.word	0x40000c00
 800e298:	40001800 	.word	0x40001800
 800e29c:	00010007 	.word	0x00010007

0800e2a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d020      	beq.n	800e304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f003 0302 	and.w	r3, r3, #2
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d01b      	beq.n	800e304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f06f 0202 	mvn.w	r2, #2
 800e2d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	f003 0303 	and.w	r3, r3, #3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d003      	beq.n	800e2f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fb70 	bl	800e9d0 <HAL_TIM_IC_CaptureCallback>
 800e2f0:	e005      	b.n	800e2fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fb62 	bl	800e9bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fb73 	bl	800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	f003 0304 	and.w	r3, r3, #4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d020      	beq.n	800e350 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	d01b      	beq.n	800e350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f06f 0204 	mvn.w	r2, #4
 800e320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2202      	movs	r2, #2
 800e326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e332:	2b00      	cmp	r3, #0
 800e334:	d003      	beq.n	800e33e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fb4a 	bl	800e9d0 <HAL_TIM_IC_CaptureCallback>
 800e33c:	e005      	b.n	800e34a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fb3c 	bl	800e9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fb4d 	bl	800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f003 0308 	and.w	r3, r3, #8
 800e356:	2b00      	cmp	r3, #0
 800e358:	d020      	beq.n	800e39c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f003 0308 	and.w	r3, r3, #8
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01b      	beq.n	800e39c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f06f 0208 	mvn.w	r2, #8
 800e36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2204      	movs	r2, #4
 800e372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	69db      	ldr	r3, [r3, #28]
 800e37a:	f003 0303 	and.w	r3, r3, #3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fb24 	bl	800e9d0 <HAL_TIM_IC_CaptureCallback>
 800e388:	e005      	b.n	800e396 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb16 	bl	800e9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fb27 	bl	800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f003 0310 	and.w	r3, r3, #16
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d020      	beq.n	800e3e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f003 0310 	and.w	r3, r3, #16
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01b      	beq.n	800e3e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f06f 0210 	mvn.w	r2, #16
 800e3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2208      	movs	r2, #8
 800e3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fafe 	bl	800e9d0 <HAL_TIM_IC_CaptureCallback>
 800e3d4:	e005      	b.n	800e3e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 faf0 	bl	800e9bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fb01 	bl	800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	f003 0301 	and.w	r3, r3, #1
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00c      	beq.n	800e40c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f06f 0201 	mvn.w	r2, #1
 800e404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7f5 fa38 	bl	800387c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00c      	beq.n	800e43a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e426:	2b00      	cmp	r3, #0
 800e428:	d007      	beq.n	800e43a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f001 f9e1 	bl	800f7fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00c      	beq.n	800e45e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f001 f9d9 	bl	800f810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00c      	beq.n	800e482 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fac5 	bl	800ea0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	f003 0320 	and.w	r3, r3, #32
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00c      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f003 0320 	and.w	r3, r3, #32
 800e492:	2b00      	cmp	r3, #0
 800e494:	d007      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f06f 0220 	mvn.w	r2, #32
 800e49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f001 f9a1 	bl	800f7e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4a6:	bf00      	nop
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
	...

0800e4b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d101      	bne.n	800e4ce <HAL_TIM_OC_ConfigChannel+0x1e>
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	e066      	b.n	800e59c <HAL_TIM_OC_ConfigChannel+0xec>
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b14      	cmp	r3, #20
 800e4da:	d857      	bhi.n	800e58c <HAL_TIM_OC_ConfigChannel+0xdc>
 800e4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800e4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e2:	bf00      	nop
 800e4e4:	0800e539 	.word	0x0800e539
 800e4e8:	0800e58d 	.word	0x0800e58d
 800e4ec:	0800e58d 	.word	0x0800e58d
 800e4f0:	0800e58d 	.word	0x0800e58d
 800e4f4:	0800e547 	.word	0x0800e547
 800e4f8:	0800e58d 	.word	0x0800e58d
 800e4fc:	0800e58d 	.word	0x0800e58d
 800e500:	0800e58d 	.word	0x0800e58d
 800e504:	0800e555 	.word	0x0800e555
 800e508:	0800e58d 	.word	0x0800e58d
 800e50c:	0800e58d 	.word	0x0800e58d
 800e510:	0800e58d 	.word	0x0800e58d
 800e514:	0800e563 	.word	0x0800e563
 800e518:	0800e58d 	.word	0x0800e58d
 800e51c:	0800e58d 	.word	0x0800e58d
 800e520:	0800e58d 	.word	0x0800e58d
 800e524:	0800e571 	.word	0x0800e571
 800e528:	0800e58d 	.word	0x0800e58d
 800e52c:	0800e58d 	.word	0x0800e58d
 800e530:	0800e58d 	.word	0x0800e58d
 800e534:	0800e57f 	.word	0x0800e57f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 fbea 	bl	800ed18 <TIM_OC1_SetConfig>
      break;
 800e544:	e025      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	68b9      	ldr	r1, [r7, #8]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 fc73 	bl	800ee38 <TIM_OC2_SetConfig>
      break;
 800e552:	e01e      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 fcf6 	bl	800ef4c <TIM_OC3_SetConfig>
      break;
 800e560:	e017      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68b9      	ldr	r1, [r7, #8]
 800e568:	4618      	mov	r0, r3
 800e56a:	f000 fd77 	bl	800f05c <TIM_OC4_SetConfig>
      break;
 800e56e:	e010      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68b9      	ldr	r1, [r7, #8]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 fdda 	bl	800f130 <TIM_OC5_SetConfig>
      break;
 800e57c:	e009      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68b9      	ldr	r1, [r7, #8]
 800e584:	4618      	mov	r0, r3
 800e586:	f000 fe37 	bl	800f1f8 <TIM_OC6_SetConfig>
      break;
 800e58a:	e002      	b.n	800e592 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	75fb      	strb	r3, [r7, #23]
      break;
 800e590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3718      	adds	r7, #24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d101      	bne.n	800e5c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e5be:	2302      	movs	r3, #2
 800e5c0:	e0ff      	b.n	800e7c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b14      	cmp	r3, #20
 800e5ce:	f200 80f0 	bhi.w	800e7b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d8:	0800e62d 	.word	0x0800e62d
 800e5dc:	0800e7b3 	.word	0x0800e7b3
 800e5e0:	0800e7b3 	.word	0x0800e7b3
 800e5e4:	0800e7b3 	.word	0x0800e7b3
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e7b3 	.word	0x0800e7b3
 800e5f0:	0800e7b3 	.word	0x0800e7b3
 800e5f4:	0800e7b3 	.word	0x0800e7b3
 800e5f8:	0800e6af 	.word	0x0800e6af
 800e5fc:	0800e7b3 	.word	0x0800e7b3
 800e600:	0800e7b3 	.word	0x0800e7b3
 800e604:	0800e7b3 	.word	0x0800e7b3
 800e608:	0800e6ef 	.word	0x0800e6ef
 800e60c:	0800e7b3 	.word	0x0800e7b3
 800e610:	0800e7b3 	.word	0x0800e7b3
 800e614:	0800e7b3 	.word	0x0800e7b3
 800e618:	0800e731 	.word	0x0800e731
 800e61c:	0800e7b3 	.word	0x0800e7b3
 800e620:	0800e7b3 	.word	0x0800e7b3
 800e624:	0800e7b3 	.word	0x0800e7b3
 800e628:	0800e771 	.word	0x0800e771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fb70 	bl	800ed18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	699a      	ldr	r2, [r3, #24]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f042 0208 	orr.w	r2, r2, #8
 800e646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	699a      	ldr	r2, [r3, #24]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0204 	bic.w	r2, r2, #4
 800e656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6999      	ldr	r1, [r3, #24]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691a      	ldr	r2, [r3, #16]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	619a      	str	r2, [r3, #24]
      break;
 800e66a:	e0a5      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68b9      	ldr	r1, [r7, #8]
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fbe0 	bl	800ee38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6999      	ldr	r1, [r3, #24]
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	021a      	lsls	r2, r3, #8
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	619a      	str	r2, [r3, #24]
      break;
 800e6ac:	e084      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fc49 	bl	800ef4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69da      	ldr	r2, [r3, #28]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f042 0208 	orr.w	r2, r2, #8
 800e6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	69da      	ldr	r2, [r3, #28]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f022 0204 	bic.w	r2, r2, #4
 800e6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69d9      	ldr	r1, [r3, #28]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	61da      	str	r2, [r3, #28]
      break;
 800e6ec:	e064      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68b9      	ldr	r1, [r7, #8]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fcb1 	bl	800f05c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	69da      	ldr	r2, [r3, #28]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69da      	ldr	r2, [r3, #28]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	69d9      	ldr	r1, [r3, #28]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	021a      	lsls	r2, r3, #8
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	430a      	orrs	r2, r1
 800e72c:	61da      	str	r2, [r3, #28]
      break;
 800e72e:	e043      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fcfa 	bl	800f130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f042 0208 	orr.w	r2, r2, #8
 800e74a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f022 0204 	bic.w	r2, r2, #4
 800e75a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	691a      	ldr	r2, [r3, #16]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e76e:	e023      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fd3e 	bl	800f1f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e78a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e79a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	021a      	lsls	r2, r3, #8
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e7b0:	e002      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	75fb      	strb	r3, [r7, #23]
      break;
 800e7b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3718      	adds	r7, #24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop

0800e7cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <HAL_TIM_ConfigClockSource+0x1c>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e0dc      	b.n	800e9a2 <HAL_TIM_ConfigClockSource+0x1d6>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	4b6a      	ldr	r3, [pc, #424]	@ (800e9ac <HAL_TIM_ConfigClockSource+0x1e0>)
 800e804:	4013      	ands	r3, r2
 800e806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e80e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a64      	ldr	r2, [pc, #400]	@ (800e9b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	f000 80a9 	beq.w	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e824:	4a62      	ldr	r2, [pc, #392]	@ (800e9b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e826:	4293      	cmp	r3, r2
 800e828:	f200 80ae 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e82c:	4a61      	ldr	r2, [pc, #388]	@ (800e9b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	f000 80a1 	beq.w	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e834:	4a5f      	ldr	r2, [pc, #380]	@ (800e9b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e836:	4293      	cmp	r3, r2
 800e838:	f200 80a6 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e83c:	4a5e      	ldr	r2, [pc, #376]	@ (800e9b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	f000 8099 	beq.w	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e844:	4a5c      	ldr	r2, [pc, #368]	@ (800e9b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e846:	4293      	cmp	r3, r2
 800e848:	f200 809e 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e84c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e850:	f000 8091 	beq.w	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e854:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e858:	f200 8096 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e85c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e860:	f000 8089 	beq.w	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e868:	f200 808e 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e86c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e870:	d03e      	beq.n	800e8f0 <HAL_TIM_ConfigClockSource+0x124>
 800e872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e876:	f200 8087 	bhi.w	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e87a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e87e:	f000 8086 	beq.w	800e98e <HAL_TIM_ConfigClockSource+0x1c2>
 800e882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e886:	d87f      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e888:	2b70      	cmp	r3, #112	@ 0x70
 800e88a:	d01a      	beq.n	800e8c2 <HAL_TIM_ConfigClockSource+0xf6>
 800e88c:	2b70      	cmp	r3, #112	@ 0x70
 800e88e:	d87b      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e890:	2b60      	cmp	r3, #96	@ 0x60
 800e892:	d050      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x16a>
 800e894:	2b60      	cmp	r3, #96	@ 0x60
 800e896:	d877      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e898:	2b50      	cmp	r3, #80	@ 0x50
 800e89a:	d03c      	beq.n	800e916 <HAL_TIM_ConfigClockSource+0x14a>
 800e89c:	2b50      	cmp	r3, #80	@ 0x50
 800e89e:	d873      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8a0:	2b40      	cmp	r3, #64	@ 0x40
 800e8a2:	d058      	beq.n	800e956 <HAL_TIM_ConfigClockSource+0x18a>
 800e8a4:	2b40      	cmp	r3, #64	@ 0x40
 800e8a6:	d86f      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8a8:	2b30      	cmp	r3, #48	@ 0x30
 800e8aa:	d064      	beq.n	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e8ac:	2b30      	cmp	r3, #48	@ 0x30
 800e8ae:	d86b      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8b0:	2b20      	cmp	r3, #32
 800e8b2:	d060      	beq.n	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e8b4:	2b20      	cmp	r3, #32
 800e8b6:	d867      	bhi.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d05c      	beq.n	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e8bc:	2b10      	cmp	r3, #16
 800e8be:	d05a      	beq.n	800e976 <HAL_TIM_ConfigClockSource+0x1aa>
 800e8c0:	e062      	b.n	800e988 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e8d2:	f000 fd75 	bl	800f3c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e8e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	609a      	str	r2, [r3, #8]
      break;
 800e8ee:	e04f      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e900:	f000 fd5e 	bl	800f3c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e912:	609a      	str	r2, [r3, #8]
      break;
 800e914:	e03c      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e922:	461a      	mov	r2, r3
 800e924:	f000 fcce 	bl	800f2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2150      	movs	r1, #80	@ 0x50
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 fd28 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800e934:	e02c      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e942:	461a      	mov	r2, r3
 800e944:	f000 fced 	bl	800f322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2160      	movs	r1, #96	@ 0x60
 800e94e:	4618      	mov	r0, r3
 800e950:	f000 fd18 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800e954:	e01c      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e962:	461a      	mov	r2, r3
 800e964:	f000 fcae 	bl	800f2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2140      	movs	r1, #64	@ 0x40
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fd08 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800e974:	e00c      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4619      	mov	r1, r3
 800e980:	4610      	mov	r0, r2
 800e982:	f000 fcff 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800e986:	e003      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	73fb      	strb	r3, [r7, #15]
      break;
 800e98c:	e000      	b.n	800e990 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e98e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	ffceff88 	.word	0xffceff88
 800e9b0:	00100040 	.word	0x00100040
 800e9b4:	00100030 	.word	0x00100030
 800e9b8:	00100020 	.word	0x00100020

0800e9bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9c4:	bf00      	nop
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d107      	bne.n	800ea5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea5a:	e02a      	b.n	800eab2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d107      	bne.n	800ea76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2202      	movs	r2, #2
 800ea6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea74:	e01d      	b.n	800eab2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d107      	bne.n	800ea90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2204      	movs	r2, #4
 800ea84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea8e:	e010      	b.n	800eab2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d107      	bne.n	800eaaa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2208      	movs	r2, #8
 800ea9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eaa8:	e003      	b.n	800eab2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2201      	movs	r2, #1
 800eaae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff ffb4 	bl	800ea20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	771a      	strb	r2, [r3, #28]
}
 800eabe:	bf00      	nop
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b084      	sub	sp, #16
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ead2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d10b      	bne.n	800eaf6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2201      	movs	r2, #1
 800eae2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	69db      	ldr	r3, [r3, #28]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d136      	bne.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eaf4:	e031      	b.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d10b      	bne.n	800eb18 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2202      	movs	r2, #2
 800eb04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d125      	bne.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb16:	e020      	b.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d10b      	bne.n	800eb3a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2204      	movs	r2, #4
 800eb26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	69db      	ldr	r3, [r3, #28]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d114      	bne.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb38:	e00f      	b.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d10a      	bne.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2208      	movs	r2, #8
 800eb48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	69db      	ldr	r3, [r3, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7ff ff42 	bl	800e9e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	771a      	strb	r2, [r3, #28]
}
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d103      	bne.n	800eb8e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	771a      	strb	r2, [r3, #28]
 800eb8c:	e019      	b.n	800ebc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d103      	bne.n	800eba0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	771a      	strb	r2, [r3, #28]
 800eb9e:	e010      	b.n	800ebc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d103      	bne.n	800ebb2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2204      	movs	r2, #4
 800ebae:	771a      	strb	r2, [r3, #28]
 800ebb0:	e007      	b.n	800ebc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d102      	bne.n	800ebc2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2208      	movs	r2, #8
 800ebc0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f7ff ff18 	bl	800e9f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	771a      	strb	r2, [r3, #28]
}
 800ebce:	bf00      	nop
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
	...

0800ebd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a43      	ldr	r2, [pc, #268]	@ (800ecf8 <TIM_Base_SetConfig+0x120>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d013      	beq.n	800ec18 <TIM_Base_SetConfig+0x40>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebf6:	d00f      	beq.n	800ec18 <TIM_Base_SetConfig+0x40>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a40      	ldr	r2, [pc, #256]	@ (800ecfc <TIM_Base_SetConfig+0x124>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d00b      	beq.n	800ec18 <TIM_Base_SetConfig+0x40>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a3f      	ldr	r2, [pc, #252]	@ (800ed00 <TIM_Base_SetConfig+0x128>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d007      	beq.n	800ec18 <TIM_Base_SetConfig+0x40>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4a3e      	ldr	r2, [pc, #248]	@ (800ed04 <TIM_Base_SetConfig+0x12c>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d003      	beq.n	800ec18 <TIM_Base_SetConfig+0x40>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a3d      	ldr	r2, [pc, #244]	@ (800ed08 <TIM_Base_SetConfig+0x130>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d108      	bne.n	800ec2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a32      	ldr	r2, [pc, #200]	@ (800ecf8 <TIM_Base_SetConfig+0x120>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d01f      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec38:	d01b      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a2f      	ldr	r2, [pc, #188]	@ (800ecfc <TIM_Base_SetConfig+0x124>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d017      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4a2e      	ldr	r2, [pc, #184]	@ (800ed00 <TIM_Base_SetConfig+0x128>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d013      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a2d      	ldr	r2, [pc, #180]	@ (800ed04 <TIM_Base_SetConfig+0x12c>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d00f      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a2c      	ldr	r2, [pc, #176]	@ (800ed08 <TIM_Base_SetConfig+0x130>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d00b      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a2b      	ldr	r2, [pc, #172]	@ (800ed0c <TIM_Base_SetConfig+0x134>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d007      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4a2a      	ldr	r2, [pc, #168]	@ (800ed10 <TIM_Base_SetConfig+0x138>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d003      	beq.n	800ec72 <TIM_Base_SetConfig+0x9a>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a29      	ldr	r2, [pc, #164]	@ (800ed14 <TIM_Base_SetConfig+0x13c>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d108      	bne.n	800ec84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	689a      	ldr	r2, [r3, #8]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a14      	ldr	r2, [pc, #80]	@ (800ecf8 <TIM_Base_SetConfig+0x120>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d00f      	beq.n	800ecca <TIM_Base_SetConfig+0xf2>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a16      	ldr	r2, [pc, #88]	@ (800ed08 <TIM_Base_SetConfig+0x130>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d00b      	beq.n	800ecca <TIM_Base_SetConfig+0xf2>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4a15      	ldr	r2, [pc, #84]	@ (800ed0c <TIM_Base_SetConfig+0x134>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d007      	beq.n	800ecca <TIM_Base_SetConfig+0xf2>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a14      	ldr	r2, [pc, #80]	@ (800ed10 <TIM_Base_SetConfig+0x138>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d003      	beq.n	800ecca <TIM_Base_SetConfig+0xf2>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4a13      	ldr	r2, [pc, #76]	@ (800ed14 <TIM_Base_SetConfig+0x13c>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d103      	bne.n	800ecd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	691a      	ldr	r2, [r3, #16]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f043 0204 	orr.w	r2, r3, #4
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2201      	movs	r2, #1
 800ece2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	601a      	str	r2, [r3, #0]
}
 800ecea:	bf00      	nop
 800ecec:	3714      	adds	r7, #20
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	40010000 	.word	0x40010000
 800ecfc:	40000400 	.word	0x40000400
 800ed00:	40000800 	.word	0x40000800
 800ed04:	40000c00 	.word	0x40000c00
 800ed08:	40010400 	.word	0x40010400
 800ed0c:	40014000 	.word	0x40014000
 800ed10:	40014400 	.word	0x40014400
 800ed14:	40014800 	.word	0x40014800

0800ed18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b087      	sub	sp, #28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	f023 0201 	bic.w	r2, r3, #1
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	4b37      	ldr	r3, [pc, #220]	@ (800ee20 <TIM_OC1_SetConfig+0x108>)
 800ed44:	4013      	ands	r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f023 0303 	bic.w	r3, r3, #3
 800ed4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f023 0302 	bic.w	r3, r3, #2
 800ed60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4a2d      	ldr	r2, [pc, #180]	@ (800ee24 <TIM_OC1_SetConfig+0x10c>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d00f      	beq.n	800ed94 <TIM_OC1_SetConfig+0x7c>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a2c      	ldr	r2, [pc, #176]	@ (800ee28 <TIM_OC1_SetConfig+0x110>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d00b      	beq.n	800ed94 <TIM_OC1_SetConfig+0x7c>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ee2c <TIM_OC1_SetConfig+0x114>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d007      	beq.n	800ed94 <TIM_OC1_SetConfig+0x7c>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a2a      	ldr	r2, [pc, #168]	@ (800ee30 <TIM_OC1_SetConfig+0x118>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d003      	beq.n	800ed94 <TIM_OC1_SetConfig+0x7c>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a29      	ldr	r2, [pc, #164]	@ (800ee34 <TIM_OC1_SetConfig+0x11c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d10c      	bne.n	800edae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	f023 0308 	bic.w	r3, r3, #8
 800ed9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f023 0304 	bic.w	r3, r3, #4
 800edac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4a1c      	ldr	r2, [pc, #112]	@ (800ee24 <TIM_OC1_SetConfig+0x10c>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d00f      	beq.n	800edd6 <TIM_OC1_SetConfig+0xbe>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ee28 <TIM_OC1_SetConfig+0x110>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d00b      	beq.n	800edd6 <TIM_OC1_SetConfig+0xbe>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ee2c <TIM_OC1_SetConfig+0x114>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d007      	beq.n	800edd6 <TIM_OC1_SetConfig+0xbe>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a19      	ldr	r2, [pc, #100]	@ (800ee30 <TIM_OC1_SetConfig+0x118>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d003      	beq.n	800edd6 <TIM_OC1_SetConfig+0xbe>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a18      	ldr	r2, [pc, #96]	@ (800ee34 <TIM_OC1_SetConfig+0x11c>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d111      	bne.n	800edfa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ede4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	695b      	ldr	r3, [r3, #20]
 800edea:	693a      	ldr	r2, [r7, #16]
 800edec:	4313      	orrs	r3, r2
 800edee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	699b      	ldr	r3, [r3, #24]
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	4313      	orrs	r3, r2
 800edf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	693a      	ldr	r2, [r7, #16]
 800edfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	621a      	str	r2, [r3, #32]
}
 800ee14:	bf00      	nop
 800ee16:	371c      	adds	r7, #28
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr
 800ee20:	fffeff8f 	.word	0xfffeff8f
 800ee24:	40010000 	.word	0x40010000
 800ee28:	40010400 	.word	0x40010400
 800ee2c:	40014000 	.word	0x40014000
 800ee30:	40014400 	.word	0x40014400
 800ee34:	40014800 	.word	0x40014800

0800ee38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b087      	sub	sp, #28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a1b      	ldr	r3, [r3, #32]
 800ee46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a1b      	ldr	r3, [r3, #32]
 800ee4c:	f023 0210 	bic.w	r2, r3, #16
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	4b34      	ldr	r3, [pc, #208]	@ (800ef34 <TIM_OC2_SetConfig+0xfc>)
 800ee64:	4013      	ands	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	021b      	lsls	r3, r3, #8
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f023 0320 	bic.w	r3, r3, #32
 800ee82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	011b      	lsls	r3, r3, #4
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a29      	ldr	r2, [pc, #164]	@ (800ef38 <TIM_OC2_SetConfig+0x100>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d003      	beq.n	800eea0 <TIM_OC2_SetConfig+0x68>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a28      	ldr	r2, [pc, #160]	@ (800ef3c <TIM_OC2_SetConfig+0x104>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d10d      	bne.n	800eebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eeba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a1e      	ldr	r2, [pc, #120]	@ (800ef38 <TIM_OC2_SetConfig+0x100>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d00f      	beq.n	800eee4 <TIM_OC2_SetConfig+0xac>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a1d      	ldr	r2, [pc, #116]	@ (800ef3c <TIM_OC2_SetConfig+0x104>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d00b      	beq.n	800eee4 <TIM_OC2_SetConfig+0xac>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a1c      	ldr	r2, [pc, #112]	@ (800ef40 <TIM_OC2_SetConfig+0x108>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d007      	beq.n	800eee4 <TIM_OC2_SetConfig+0xac>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a1b      	ldr	r2, [pc, #108]	@ (800ef44 <TIM_OC2_SetConfig+0x10c>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d003      	beq.n	800eee4 <TIM_OC2_SetConfig+0xac>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a1a      	ldr	r2, [pc, #104]	@ (800ef48 <TIM_OC2_SetConfig+0x110>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d113      	bne.n	800ef0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eeea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	693a      	ldr	r2, [r7, #16]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	699b      	ldr	r3, [r3, #24]
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	693a      	ldr	r2, [r7, #16]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68fa      	ldr	r2, [r7, #12]
 800ef16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	621a      	str	r2, [r3, #32]
}
 800ef26:	bf00      	nop
 800ef28:	371c      	adds	r7, #28
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	feff8fff 	.word	0xfeff8fff
 800ef38:	40010000 	.word	0x40010000
 800ef3c:	40010400 	.word	0x40010400
 800ef40:	40014000 	.word	0x40014000
 800ef44:	40014400 	.word	0x40014400
 800ef48:	40014800 	.word	0x40014800

0800ef4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6a1b      	ldr	r3, [r3, #32]
 800ef5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a1b      	ldr	r3, [r3, #32]
 800ef60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4b33      	ldr	r3, [pc, #204]	@ (800f044 <TIM_OC3_SetConfig+0xf8>)
 800ef78:	4013      	ands	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f023 0303 	bic.w	r3, r3, #3
 800ef82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	021b      	lsls	r3, r3, #8
 800ef9c:	697a      	ldr	r2, [r7, #20]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a28      	ldr	r2, [pc, #160]	@ (800f048 <TIM_OC3_SetConfig+0xfc>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d003      	beq.n	800efb2 <TIM_OC3_SetConfig+0x66>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a27      	ldr	r2, [pc, #156]	@ (800f04c <TIM_OC3_SetConfig+0x100>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d10d      	bne.n	800efce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800efb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	021b      	lsls	r3, r3, #8
 800efc0:	697a      	ldr	r2, [r7, #20]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800efcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a1d      	ldr	r2, [pc, #116]	@ (800f048 <TIM_OC3_SetConfig+0xfc>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d00f      	beq.n	800eff6 <TIM_OC3_SetConfig+0xaa>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a1c      	ldr	r2, [pc, #112]	@ (800f04c <TIM_OC3_SetConfig+0x100>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d00b      	beq.n	800eff6 <TIM_OC3_SetConfig+0xaa>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a1b      	ldr	r2, [pc, #108]	@ (800f050 <TIM_OC3_SetConfig+0x104>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d007      	beq.n	800eff6 <TIM_OC3_SetConfig+0xaa>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a1a      	ldr	r2, [pc, #104]	@ (800f054 <TIM_OC3_SetConfig+0x108>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d003      	beq.n	800eff6 <TIM_OC3_SetConfig+0xaa>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a19      	ldr	r2, [pc, #100]	@ (800f058 <TIM_OC3_SetConfig+0x10c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d113      	bne.n	800f01e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800effc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	011b      	lsls	r3, r3, #4
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	4313      	orrs	r3, r2
 800f010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	699b      	ldr	r3, [r3, #24]
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	693a      	ldr	r2, [r7, #16]
 800f022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	621a      	str	r2, [r3, #32]
}
 800f038:	bf00      	nop
 800f03a:	371c      	adds	r7, #28
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	fffeff8f 	.word	0xfffeff8f
 800f048:	40010000 	.word	0x40010000
 800f04c:	40010400 	.word	0x40010400
 800f050:	40014000 	.word	0x40014000
 800f054:	40014400 	.word	0x40014400
 800f058:	40014800 	.word	0x40014800

0800f05c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	69db      	ldr	r3, [r3, #28]
 800f082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	4b24      	ldr	r3, [pc, #144]	@ (800f118 <TIM_OC4_SetConfig+0xbc>)
 800f088:	4013      	ands	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	021b      	lsls	r3, r3, #8
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	031b      	lsls	r3, r3, #12
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a19      	ldr	r2, [pc, #100]	@ (800f11c <TIM_OC4_SetConfig+0xc0>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d00f      	beq.n	800f0dc <TIM_OC4_SetConfig+0x80>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4a18      	ldr	r2, [pc, #96]	@ (800f120 <TIM_OC4_SetConfig+0xc4>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d00b      	beq.n	800f0dc <TIM_OC4_SetConfig+0x80>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a17      	ldr	r2, [pc, #92]	@ (800f124 <TIM_OC4_SetConfig+0xc8>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d007      	beq.n	800f0dc <TIM_OC4_SetConfig+0x80>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a16      	ldr	r2, [pc, #88]	@ (800f128 <TIM_OC4_SetConfig+0xcc>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d003      	beq.n	800f0dc <TIM_OC4_SetConfig+0x80>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a15      	ldr	r2, [pc, #84]	@ (800f12c <TIM_OC4_SetConfig+0xd0>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d109      	bne.n	800f0f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f0e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	019b      	lsls	r3, r3, #6
 800f0ea:	697a      	ldr	r2, [r7, #20]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	621a      	str	r2, [r3, #32]
}
 800f10a:	bf00      	nop
 800f10c:	371c      	adds	r7, #28
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	feff8fff 	.word	0xfeff8fff
 800f11c:	40010000 	.word	0x40010000
 800f120:	40010400 	.word	0x40010400
 800f124:	40014000 	.word	0x40014000
 800f128:	40014400 	.word	0x40014400
 800f12c:	40014800 	.word	0x40014800

0800f130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f130:	b480      	push	{r7}
 800f132:	b087      	sub	sp, #28
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a1b      	ldr	r3, [r3, #32]
 800f13e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	4b21      	ldr	r3, [pc, #132]	@ (800f1e0 <TIM_OC5_SetConfig+0xb0>)
 800f15c:	4013      	ands	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	4313      	orrs	r3, r2
 800f168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	041b      	lsls	r3, r3, #16
 800f178:	693a      	ldr	r2, [r7, #16]
 800f17a:	4313      	orrs	r3, r2
 800f17c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a18      	ldr	r2, [pc, #96]	@ (800f1e4 <TIM_OC5_SetConfig+0xb4>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d00f      	beq.n	800f1a6 <TIM_OC5_SetConfig+0x76>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a17      	ldr	r2, [pc, #92]	@ (800f1e8 <TIM_OC5_SetConfig+0xb8>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d00b      	beq.n	800f1a6 <TIM_OC5_SetConfig+0x76>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a16      	ldr	r2, [pc, #88]	@ (800f1ec <TIM_OC5_SetConfig+0xbc>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d007      	beq.n	800f1a6 <TIM_OC5_SetConfig+0x76>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a15      	ldr	r2, [pc, #84]	@ (800f1f0 <TIM_OC5_SetConfig+0xc0>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d003      	beq.n	800f1a6 <TIM_OC5_SetConfig+0x76>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a14      	ldr	r2, [pc, #80]	@ (800f1f4 <TIM_OC5_SetConfig+0xc4>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d109      	bne.n	800f1ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f1ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	693a      	ldr	r2, [r7, #16]
 800f1d2:	621a      	str	r2, [r3, #32]
}
 800f1d4:	bf00      	nop
 800f1d6:	371c      	adds	r7, #28
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	fffeff8f 	.word	0xfffeff8f
 800f1e4:	40010000 	.word	0x40010000
 800f1e8:	40010400 	.word	0x40010400
 800f1ec:	40014000 	.word	0x40014000
 800f1f0:	40014400 	.word	0x40014400
 800f1f4:	40014800 	.word	0x40014800

0800f1f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a1b      	ldr	r3, [r3, #32]
 800f20c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	4b22      	ldr	r3, [pc, #136]	@ (800f2ac <TIM_OC6_SetConfig+0xb4>)
 800f224:	4013      	ands	r3, r2
 800f226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	021b      	lsls	r3, r3, #8
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	4313      	orrs	r3, r2
 800f232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f23a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	051b      	lsls	r3, r3, #20
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	4313      	orrs	r3, r2
 800f246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a19      	ldr	r2, [pc, #100]	@ (800f2b0 <TIM_OC6_SetConfig+0xb8>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d00f      	beq.n	800f270 <TIM_OC6_SetConfig+0x78>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4a18      	ldr	r2, [pc, #96]	@ (800f2b4 <TIM_OC6_SetConfig+0xbc>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d00b      	beq.n	800f270 <TIM_OC6_SetConfig+0x78>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4a17      	ldr	r2, [pc, #92]	@ (800f2b8 <TIM_OC6_SetConfig+0xc0>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d007      	beq.n	800f270 <TIM_OC6_SetConfig+0x78>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a16      	ldr	r2, [pc, #88]	@ (800f2bc <TIM_OC6_SetConfig+0xc4>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d003      	beq.n	800f270 <TIM_OC6_SetConfig+0x78>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a15      	ldr	r2, [pc, #84]	@ (800f2c0 <TIM_OC6_SetConfig+0xc8>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d109      	bne.n	800f284 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	695b      	ldr	r3, [r3, #20]
 800f27c:	029b      	lsls	r3, r3, #10
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	4313      	orrs	r3, r2
 800f282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	693a      	ldr	r2, [r7, #16]
 800f29c:	621a      	str	r2, [r3, #32]
}
 800f29e:	bf00      	nop
 800f2a0:	371c      	adds	r7, #28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	feff8fff 	.word	0xfeff8fff
 800f2b0:	40010000 	.word	0x40010000
 800f2b4:	40010400 	.word	0x40010400
 800f2b8:	40014000 	.word	0x40014000
 800f2bc:	40014400 	.word	0x40014400
 800f2c0:	40014800 	.word	0x40014800

0800f2c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6a1b      	ldr	r3, [r3, #32]
 800f2d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	f023 0201 	bic.w	r2, r3, #1
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f2ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	f023 030a 	bic.w	r3, r3, #10
 800f300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f302:	697a      	ldr	r2, [r7, #20]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	4313      	orrs	r3, r2
 800f308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	621a      	str	r2, [r3, #32]
}
 800f316:	bf00      	nop
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f322:	b480      	push	{r7}
 800f324:	b087      	sub	sp, #28
 800f326:	af00      	add	r7, sp, #0
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6a1b      	ldr	r3, [r3, #32]
 800f338:	f023 0210 	bic.w	r2, r3, #16
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f34c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	031b      	lsls	r3, r3, #12
 800f352:	693a      	ldr	r2, [r7, #16]
 800f354:	4313      	orrs	r3, r2
 800f356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f35e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	011b      	lsls	r3, r3, #4
 800f364:	697a      	ldr	r2, [r7, #20]
 800f366:	4313      	orrs	r3, r2
 800f368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	621a      	str	r2, [r3, #32]
}
 800f376:	bf00      	nop
 800f378:	371c      	adds	r7, #28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	4b09      	ldr	r3, [pc, #36]	@ (800f3bc <TIM_ITRx_SetConfig+0x38>)
 800f398:	4013      	ands	r3, r2
 800f39a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	f043 0307 	orr.w	r3, r3, #7
 800f3a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	609a      	str	r2, [r3, #8]
}
 800f3ae:	bf00      	nop
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	ffcfff8f 	.word	0xffcfff8f

0800f3c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
 800f3cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f3da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	021a      	lsls	r2, r3, #8
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	431a      	orrs	r2, r3
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	609a      	str	r2, [r3, #8]
}
 800f3f4:	bf00      	nop
 800f3f6:	371c      	adds	r7, #28
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	f003 031f 	and.w	r3, r3, #31
 800f412:	2201      	movs	r2, #1
 800f414:	fa02 f303 	lsl.w	r3, r2, r3
 800f418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6a1a      	ldr	r2, [r3, #32]
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	43db      	mvns	r3, r3
 800f422:	401a      	ands	r2, r3
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6a1a      	ldr	r2, [r3, #32]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f003 031f 	and.w	r3, r3, #31
 800f432:	6879      	ldr	r1, [r7, #4]
 800f434:	fa01 f303 	lsl.w	r3, r1, r3
 800f438:	431a      	orrs	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	621a      	str	r2, [r3, #32]
}
 800f43e:	bf00      	nop
 800f440:	371c      	adds	r7, #28
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
	...

0800f44c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d109      	bne.n	800f470 <HAL_TIMEx_PWMN_Start+0x24>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b01      	cmp	r3, #1
 800f466:	bf14      	ite	ne
 800f468:	2301      	movne	r3, #1
 800f46a:	2300      	moveq	r3, #0
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	e022      	b.n	800f4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	2b04      	cmp	r3, #4
 800f474:	d109      	bne.n	800f48a <HAL_TIMEx_PWMN_Start+0x3e>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	2b01      	cmp	r3, #1
 800f480:	bf14      	ite	ne
 800f482:	2301      	movne	r3, #1
 800f484:	2300      	moveq	r3, #0
 800f486:	b2db      	uxtb	r3, r3
 800f488:	e015      	b.n	800f4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	2b08      	cmp	r3, #8
 800f48e:	d109      	bne.n	800f4a4 <HAL_TIMEx_PWMN_Start+0x58>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b01      	cmp	r3, #1
 800f49a:	bf14      	ite	ne
 800f49c:	2301      	movne	r3, #1
 800f49e:	2300      	moveq	r3, #0
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	e008      	b.n	800f4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	bf14      	ite	ne
 800f4b0:	2301      	movne	r3, #1
 800f4b2:	2300      	moveq	r3, #0
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e073      	b.n	800f5a6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d104      	bne.n	800f4ce <HAL_TIMEx_PWMN_Start+0x82>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f4cc:	e013      	b.n	800f4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	2b04      	cmp	r3, #4
 800f4d2:	d104      	bne.n	800f4de <HAL_TIMEx_PWMN_Start+0x92>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f4dc:	e00b      	b.n	800f4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	2b08      	cmp	r3, #8
 800f4e2:	d104      	bne.n	800f4ee <HAL_TIMEx_PWMN_Start+0xa2>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f4ec:	e003      	b.n	800f4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2202      	movs	r2, #2
 800f4f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2204      	movs	r2, #4
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 f990 	bl	800f824 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f512:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a25      	ldr	r2, [pc, #148]	@ (800f5b0 <HAL_TIMEx_PWMN_Start+0x164>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d022      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f526:	d01d      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a21      	ldr	r2, [pc, #132]	@ (800f5b4 <HAL_TIMEx_PWMN_Start+0x168>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d018      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a20      	ldr	r2, [pc, #128]	@ (800f5b8 <HAL_TIMEx_PWMN_Start+0x16c>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d013      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a1e      	ldr	r2, [pc, #120]	@ (800f5bc <HAL_TIMEx_PWMN_Start+0x170>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d00e      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a1d      	ldr	r2, [pc, #116]	@ (800f5c0 <HAL_TIMEx_PWMN_Start+0x174>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d009      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c4 <HAL_TIMEx_PWMN_Start+0x178>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d004      	beq.n	800f564 <HAL_TIMEx_PWMN_Start+0x118>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4a1a      	ldr	r2, [pc, #104]	@ (800f5c8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d115      	bne.n	800f590 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	689a      	ldr	r2, [r3, #8]
 800f56a:	4b18      	ldr	r3, [pc, #96]	@ (800f5cc <HAL_TIMEx_PWMN_Start+0x180>)
 800f56c:	4013      	ands	r3, r2
 800f56e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b06      	cmp	r3, #6
 800f574:	d015      	beq.n	800f5a2 <HAL_TIMEx_PWMN_Start+0x156>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f57c:	d011      	beq.n	800f5a2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f042 0201 	orr.w	r2, r2, #1
 800f58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f58e:	e008      	b.n	800f5a2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f042 0201 	orr.w	r2, r2, #1
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	e000      	b.n	800f5a4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	40010000 	.word	0x40010000
 800f5b4:	40000400 	.word	0x40000400
 800f5b8:	40000800 	.word	0x40000800
 800f5bc:	40000c00 	.word	0x40000c00
 800f5c0:	40010400 	.word	0x40010400
 800f5c4:	40001800 	.word	0x40001800
 800f5c8:	40014000 	.word	0x40014000
 800f5cc:	00010007 	.word	0x00010007

0800f5d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d101      	bne.n	800f5e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5e4:	2302      	movs	r3, #2
 800f5e6:	e06d      	b.n	800f6c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a30      	ldr	r2, [pc, #192]	@ (800f6d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d004      	beq.n	800f61c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a2f      	ldr	r2, [pc, #188]	@ (800f6d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d108      	bne.n	800f62e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a20      	ldr	r2, [pc, #128]	@ (800f6d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d022      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f65a:	d01d      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a1d      	ldr	r2, [pc, #116]	@ (800f6d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d018      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a1c      	ldr	r2, [pc, #112]	@ (800f6dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d013      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a1a      	ldr	r2, [pc, #104]	@ (800f6e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d00e      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a15      	ldr	r2, [pc, #84]	@ (800f6d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d009      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a16      	ldr	r2, [pc, #88]	@ (800f6e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d004      	beq.n	800f698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a15      	ldr	r2, [pc, #84]	@ (800f6e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d10c      	bne.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f69e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3714      	adds	r7, #20
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr
 800f6d0:	40010000 	.word	0x40010000
 800f6d4:	40010400 	.word	0x40010400
 800f6d8:	40000400 	.word	0x40000400
 800f6dc:	40000800 	.word	0x40000800
 800f6e0:	40000c00 	.word	0x40000c00
 800f6e4:	40001800 	.word	0x40001800
 800f6e8:	40014000 	.word	0x40014000

0800f6ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b085      	sub	sp, #20
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f700:	2b01      	cmp	r3, #1
 800f702:	d101      	bne.n	800f708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f704:	2302      	movs	r3, #2
 800f706:	e065      	b.n	800f7d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2201      	movs	r2, #1
 800f70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	4313      	orrs	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	4313      	orrs	r3, r2
 800f738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	691b      	ldr	r3, [r3, #16]
 800f752:	4313      	orrs	r3, r2
 800f754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	4313      	orrs	r3, r2
 800f762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f76e:	4313      	orrs	r3, r2
 800f770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	041b      	lsls	r3, r3, #16
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a16      	ldr	r2, [pc, #88]	@ (800f7e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d004      	beq.n	800f796 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a14      	ldr	r2, [pc, #80]	@ (800f7e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d115      	bne.n	800f7c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a0:	051b      	lsls	r3, r3, #20
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	69db      	ldr	r3, [r3, #28]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	6a1b      	ldr	r3, [r3, #32]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	40010000 	.word	0x40010000
 800f7e4:	40010400 	.word	0x40010400

0800f7e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f003 030f 	and.w	r3, r3, #15
 800f836:	2204      	movs	r2, #4
 800f838:	fa02 f303 	lsl.w	r3, r2, r3
 800f83c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a1a      	ldr	r2, [r3, #32]
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	43db      	mvns	r3, r3
 800f846:	401a      	ands	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6a1a      	ldr	r2, [r3, #32]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f003 030f 	and.w	r3, r3, #15
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	fa01 f303 	lsl.w	r3, r1, r3
 800f85c:	431a      	orrs	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	621a      	str	r2, [r3, #32]
}
 800f862:	bf00      	nop
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d101      	bne.n	800f880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	e042      	b.n	800f906 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7f4 fef6 	bl	8004684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2224      	movs	r2, #36	@ 0x24
 800f89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f022 0201 	bic.w	r2, r2, #1
 800f8ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f001 f9c9 	bl	8010c50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fc5e 	bl	8010180 <UART_SetConfig>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d101      	bne.n	800f8ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e01b      	b.n	800f906 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f8dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	689a      	ldr	r2, [r3, #8]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f8ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f042 0201 	orr.w	r2, r2, #1
 800f8fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f001 fa48 	bl	8010d94 <UART_CheckIdleState>
 800f904:	4603      	mov	r3, r0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
	...

0800f910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08a      	sub	sp, #40	@ 0x28
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	4613      	mov	r3, r2
 800f91c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f924:	2b20      	cmp	r3, #32
 800f926:	d137      	bne.n	800f998 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <HAL_UART_Receive_IT+0x24>
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f934:	2301      	movs	r3, #1
 800f936:	e030      	b.n	800f99a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a18      	ldr	r2, [pc, #96]	@ (800f9a4 <HAL_UART_Receive_IT+0x94>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d01f      	beq.n	800f988 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f952:	2b00      	cmp	r3, #0
 800f954:	d018      	beq.n	800f988 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	e853 3f00 	ldrex	r3, [r3]
 800f962:	613b      	str	r3, [r7, #16]
   return(result);
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f96a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	623b      	str	r3, [r7, #32]
 800f976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f978:	69f9      	ldr	r1, [r7, #28]
 800f97a:	6a3a      	ldr	r2, [r7, #32]
 800f97c:	e841 2300 	strex	r3, r2, [r1]
 800f980:	61bb      	str	r3, [r7, #24]
   return(result);
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1e6      	bne.n	800f956 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f988:	88fb      	ldrh	r3, [r7, #6]
 800f98a:	461a      	mov	r2, r3
 800f98c:	68b9      	ldr	r1, [r7, #8]
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f001 fb18 	bl	8010fc4 <UART_Start_Receive_IT>
 800f994:	4603      	mov	r3, r0
 800f996:	e000      	b.n	800f99a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f998:	2302      	movs	r3, #2
  }
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3728      	adds	r7, #40	@ 0x28
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	58000c00 	.word	0x58000c00

0800f9a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b0ba      	sub	sp, #232	@ 0xe8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	69db      	ldr	r3, [r3, #28]
 800f9b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f9ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f9d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f9dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d11b      	bne.n	800fa1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9e8:	f003 0320 	and.w	r3, r3, #32
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d015      	beq.n	800fa1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9f4:	f003 0320 	and.w	r3, r3, #32
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d105      	bne.n	800fa08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d009      	beq.n	800fa1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f000 8393 	beq.w	8010138 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	4798      	blx	r3
      }
      return;
 800fa1a:	e38d      	b.n	8010138 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fa1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f000 8123 	beq.w	800fc6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fa26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fa2a:	4b8d      	ldr	r3, [pc, #564]	@ (800fc60 <HAL_UART_IRQHandler+0x2b8>)
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d106      	bne.n	800fa40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fa32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fa36:	4b8b      	ldr	r3, [pc, #556]	@ (800fc64 <HAL_UART_IRQHandler+0x2bc>)
 800fa38:	4013      	ands	r3, r2
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 8116 	beq.w	800fc6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fa40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d011      	beq.n	800fa70 <HAL_UART_IRQHandler+0xc8>
 800fa4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00b      	beq.n	800fa70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa66:	f043 0201 	orr.w	r2, r3, #1
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa74:	f003 0302 	and.w	r3, r3, #2
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d011      	beq.n	800faa0 <HAL_UART_IRQHandler+0xf8>
 800fa7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00b      	beq.n	800faa0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa96:	f043 0204 	orr.w	r2, r3, #4
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800faa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d011      	beq.n	800fad0 <HAL_UART_IRQHandler+0x128>
 800faac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fab0:	f003 0301 	and.w	r3, r3, #1
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2204      	movs	r2, #4
 800fabe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fac6:	f043 0202 	orr.w	r2, r3, #2
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fad4:	f003 0308 	and.w	r3, r3, #8
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d017      	beq.n	800fb0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fae0:	f003 0320 	and.w	r3, r3, #32
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fae8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800faec:	4b5c      	ldr	r3, [pc, #368]	@ (800fc60 <HAL_UART_IRQHandler+0x2b8>)
 800faee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2208      	movs	r2, #8
 800fafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb02:	f043 0208 	orr.w	r2, r3, #8
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d012      	beq.n	800fb3e <HAL_UART_IRQHandler+0x196>
 800fb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00c      	beq.n	800fb3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb34:	f043 0220 	orr.w	r2, r3, #32
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 82f9 	beq.w	801013c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb4e:	f003 0320 	and.w	r3, r3, #32
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d013      	beq.n	800fb7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb5a:	f003 0320 	and.w	r3, r3, #32
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d105      	bne.n	800fb6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fb62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d007      	beq.n	800fb7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb92:	2b40      	cmp	r3, #64	@ 0x40
 800fb94:	d005      	beq.n	800fba2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fb96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fb9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d054      	beq.n	800fc4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f001 fb30 	bl	8011208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbb2:	2b40      	cmp	r3, #64	@ 0x40
 800fbb4:	d146      	bne.n	800fc44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fbc4:	e853 3f00 	ldrex	r3, [r3]
 800fbc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fbcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fbd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	3308      	adds	r3, #8
 800fbde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fbe2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fbe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fbee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fbfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1d9      	bne.n	800fbb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d017      	beq.n	800fc3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc12:	4a15      	ldr	r2, [pc, #84]	@ (800fc68 <HAL_UART_IRQHandler+0x2c0>)
 800fc14:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f6 ff9f 	bl	8006b60 <HAL_DMA_Abort_IT>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d019      	beq.n	800fc5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fc36:	4610      	mov	r0, r2
 800fc38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc3a:	e00f      	b.n	800fc5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7f1 fa67 	bl	8001110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc42:	e00b      	b.n	800fc5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7f1 fa63 	bl	8001110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc4a:	e007      	b.n	800fc5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7f1 fa5f 	bl	8001110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fc5a:	e26f      	b.n	801013c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc5c:	bf00      	nop
    return;
 800fc5e:	e26d      	b.n	801013c <HAL_UART_IRQHandler+0x794>
 800fc60:	10000001 	.word	0x10000001
 800fc64:	04000120 	.word	0x04000120
 800fc68:	080112d5 	.word	0x080112d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	f040 8203 	bne.w	801007c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc7a:	f003 0310 	and.w	r3, r3, #16
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f000 81fc 	beq.w	801007c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fc84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc88:	f003 0310 	and.w	r3, r3, #16
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 81f5 	beq.w	801007c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2210      	movs	r2, #16
 800fc98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fca4:	2b40      	cmp	r3, #64	@ 0x40
 800fca6:	f040 816d 	bne.w	800ff84 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4aa4      	ldr	r2, [pc, #656]	@ (800ff44 <HAL_UART_IRQHandler+0x59c>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d068      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4aa1      	ldr	r2, [pc, #644]	@ (800ff48 <HAL_UART_IRQHandler+0x5a0>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d061      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a9f      	ldr	r2, [pc, #636]	@ (800ff4c <HAL_UART_IRQHandler+0x5a4>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d05a      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a9c      	ldr	r2, [pc, #624]	@ (800ff50 <HAL_UART_IRQHandler+0x5a8>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d053      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a9a      	ldr	r2, [pc, #616]	@ (800ff54 <HAL_UART_IRQHandler+0x5ac>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d04c      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a97      	ldr	r2, [pc, #604]	@ (800ff58 <HAL_UART_IRQHandler+0x5b0>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d045      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a95      	ldr	r2, [pc, #596]	@ (800ff5c <HAL_UART_IRQHandler+0x5b4>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d03e      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a92      	ldr	r2, [pc, #584]	@ (800ff60 <HAL_UART_IRQHandler+0x5b8>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d037      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a90      	ldr	r2, [pc, #576]	@ (800ff64 <HAL_UART_IRQHandler+0x5bc>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d030      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a8d      	ldr	r2, [pc, #564]	@ (800ff68 <HAL_UART_IRQHandler+0x5c0>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d029      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4a8b      	ldr	r2, [pc, #556]	@ (800ff6c <HAL_UART_IRQHandler+0x5c4>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d022      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a88      	ldr	r2, [pc, #544]	@ (800ff70 <HAL_UART_IRQHandler+0x5c8>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d01b      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a86      	ldr	r2, [pc, #536]	@ (800ff74 <HAL_UART_IRQHandler+0x5cc>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d014      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a83      	ldr	r2, [pc, #524]	@ (800ff78 <HAL_UART_IRQHandler+0x5d0>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d00d      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4a81      	ldr	r2, [pc, #516]	@ (800ff7c <HAL_UART_IRQHandler+0x5d4>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d006      	beq.n	800fd8a <HAL_UART_IRQHandler+0x3e2>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a7e      	ldr	r2, [pc, #504]	@ (800ff80 <HAL_UART_IRQHandler+0x5d8>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d106      	bne.n	800fd98 <HAL_UART_IRQHandler+0x3f0>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	e005      	b.n	800fda4 <HAL_UART_IRQHandler+0x3fc>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fda8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f000 80ad 	beq.w	800ff0c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fdb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	f080 80a5 	bcs.w	800ff0c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fdc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdd2:	69db      	ldr	r3, [r3, #28]
 800fdd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdd8:	f000 8087 	beq.w	800feea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fde8:	e853 3f00 	ldrex	r3, [r3]
 800fdec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fdf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fdf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fdf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	461a      	mov	r2, r3
 800fe02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fe06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fe0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fe12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fe16:	e841 2300 	strex	r3, r2, [r1]
 800fe1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fe1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1da      	bne.n	800fddc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fe30:	e853 3f00 	ldrex	r3, [r3]
 800fe34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fe36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fe38:	f023 0301 	bic.w	r3, r3, #1
 800fe3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	3308      	adds	r3, #8
 800fe46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fe4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fe4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fe52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fe56:	e841 2300 	strex	r3, r2, [r1]
 800fe5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fe5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d1e1      	bne.n	800fe26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	3308      	adds	r3, #8
 800fe68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe6c:	e853 3f00 	ldrex	r3, [r3]
 800fe70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fe72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3308      	adds	r3, #8
 800fe82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fe86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fe8e:	e841 2300 	strex	r3, r2, [r1]
 800fe92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fe94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1e3      	bne.n	800fe62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2220      	movs	r2, #32
 800fe9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800feb0:	e853 3f00 	ldrex	r3, [r3]
 800feb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800feb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800feb8:	f023 0310 	bic.w	r3, r3, #16
 800febc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	461a      	mov	r2, r3
 800fec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800feca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fecc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fed2:	e841 2300 	strex	r3, r2, [r1]
 800fed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d1e4      	bne.n	800fea8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f6 fb1d 	bl	8006524 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2202      	movs	r2, #2
 800feee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	4619      	mov	r1, r3
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 f92f 	bl	8010168 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ff0a:	e119      	b.n	8010140 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff16:	429a      	cmp	r2, r3
 800ff18:	f040 8112 	bne.w	8010140 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff22:	69db      	ldr	r3, [r3, #28]
 800ff24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff28:	f040 810a 	bne.w	8010140 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2202      	movs	r2, #2
 800ff30:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f914 	bl	8010168 <HAL_UARTEx_RxEventCallback>
      return;
 800ff40:	e0fe      	b.n	8010140 <HAL_UART_IRQHandler+0x798>
 800ff42:	bf00      	nop
 800ff44:	40020010 	.word	0x40020010
 800ff48:	40020028 	.word	0x40020028
 800ff4c:	40020040 	.word	0x40020040
 800ff50:	40020058 	.word	0x40020058
 800ff54:	40020070 	.word	0x40020070
 800ff58:	40020088 	.word	0x40020088
 800ff5c:	400200a0 	.word	0x400200a0
 800ff60:	400200b8 	.word	0x400200b8
 800ff64:	40020410 	.word	0x40020410
 800ff68:	40020428 	.word	0x40020428
 800ff6c:	40020440 	.word	0x40020440
 800ff70:	40020458 	.word	0x40020458
 800ff74:	40020470 	.word	0x40020470
 800ff78:	40020488 	.word	0x40020488
 800ff7c:	400204a0 	.word	0x400204a0
 800ff80:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 80cf 	beq.w	8010144 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800ffa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 80ca 	beq.w	8010144 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb8:	e853 3f00 	ldrex	r3, [r3]
 800ffbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ffbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ffc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ffd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffd4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ffd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ffda:	e841 2300 	strex	r3, r2, [r1]
 800ffde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ffe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1e4      	bne.n	800ffb0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	3308      	adds	r3, #8
 800ffec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff0:	e853 3f00 	ldrex	r3, [r3]
 800fff4:	623b      	str	r3, [r7, #32]
   return(result);
 800fff6:	6a3a      	ldr	r2, [r7, #32]
 800fff8:	4b55      	ldr	r3, [pc, #340]	@ (8010150 <HAL_UART_IRQHandler+0x7a8>)
 800fffa:	4013      	ands	r3, r2
 800fffc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3308      	adds	r3, #8
 8010006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801000a:	633a      	str	r2, [r7, #48]	@ 0x30
 801000c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010012:	e841 2300 	strex	r3, r2, [r1]
 8010016:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1e3      	bne.n	800ffe6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2220      	movs	r2, #32
 8010022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	e853 3f00 	ldrex	r3, [r3]
 801003e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f023 0310 	bic.w	r3, r3, #16
 8010046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	461a      	mov	r2, r3
 8010050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010054:	61fb      	str	r3, [r7, #28]
 8010056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010058:	69b9      	ldr	r1, [r7, #24]
 801005a:	69fa      	ldr	r2, [r7, #28]
 801005c:	e841 2300 	strex	r3, r2, [r1]
 8010060:	617b      	str	r3, [r7, #20]
   return(result);
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1e4      	bne.n	8010032 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2202      	movs	r2, #2
 801006c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801006e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f877 	bl	8010168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801007a:	e063      	b.n	8010144 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801007c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00e      	beq.n	80100a6 <HAL_UART_IRQHandler+0x6fe>
 8010088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801008c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010090:	2b00      	cmp	r3, #0
 8010092:	d008      	beq.n	80100a6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801009c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f001 fe76 	bl	8011d90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80100a4:	e051      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80100a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d014      	beq.n	80100dc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80100b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d105      	bne.n	80100ca <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80100be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d008      	beq.n	80100dc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d03a      	beq.n	8010148 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	4798      	blx	r3
    }
    return;
 80100da:	e035      	b.n	8010148 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80100dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d009      	beq.n	80100fc <HAL_UART_IRQHandler+0x754>
 80100e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d003      	beq.n	80100fc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f001 f8ff 	bl	80112f8 <UART_EndTransmit_IT>
    return;
 80100fa:	e026      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80100fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d009      	beq.n	801011c <HAL_UART_IRQHandler+0x774>
 8010108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801010c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010110:	2b00      	cmp	r3, #0
 8010112:	d003      	beq.n	801011c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f001 fe4f 	bl	8011db8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801011a:	e016      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801011c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010124:	2b00      	cmp	r3, #0
 8010126:	d010      	beq.n	801014a <HAL_UART_IRQHandler+0x7a2>
 8010128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801012c:	2b00      	cmp	r3, #0
 801012e:	da0c      	bge.n	801014a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f001 fe37 	bl	8011da4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010136:	e008      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
      return;
 8010138:	bf00      	nop
 801013a:	e006      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
    return;
 801013c:	bf00      	nop
 801013e:	e004      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
      return;
 8010140:	bf00      	nop
 8010142:	e002      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
      return;
 8010144:	bf00      	nop
 8010146:	e000      	b.n	801014a <HAL_UART_IRQHandler+0x7a2>
    return;
 8010148:	bf00      	nop
  }
}
 801014a:	37e8      	adds	r7, #232	@ 0xe8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	effffffe 	.word	0xeffffffe

08010154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010184:	b092      	sub	sp, #72	@ 0x48
 8010186:	af00      	add	r7, sp, #0
 8010188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801018a:	2300      	movs	r3, #0
 801018c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	689a      	ldr	r2, [r3, #8]
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	431a      	orrs	r2, r3
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	695b      	ldr	r3, [r3, #20]
 801019e:	431a      	orrs	r2, r3
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	69db      	ldr	r3, [r3, #28]
 80101a4:	4313      	orrs	r3, r2
 80101a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	4bbe      	ldr	r3, [pc, #760]	@ (80104a8 <UART_SetConfig+0x328>)
 80101b0:	4013      	ands	r3, r2
 80101b2:	697a      	ldr	r2, [r7, #20]
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101b8:	430b      	orrs	r3, r1
 80101ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	68da      	ldr	r2, [r3, #12]
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	430a      	orrs	r2, r1
 80101d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4ab3      	ldr	r2, [pc, #716]	@ (80104ac <UART_SetConfig+0x32c>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d004      	beq.n	80101ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	6a1b      	ldr	r3, [r3, #32]
 80101e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101e8:	4313      	orrs	r3, r2
 80101ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689a      	ldr	r2, [r3, #8]
 80101f2:	4baf      	ldr	r3, [pc, #700]	@ (80104b0 <UART_SetConfig+0x330>)
 80101f4:	4013      	ands	r3, r2
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	6812      	ldr	r2, [r2, #0]
 80101fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101fc:	430b      	orrs	r3, r1
 80101fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010206:	f023 010f 	bic.w	r1, r3, #15
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	430a      	orrs	r2, r1
 8010214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4aa6      	ldr	r2, [pc, #664]	@ (80104b4 <UART_SetConfig+0x334>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d177      	bne.n	8010310 <UART_SetConfig+0x190>
 8010220:	4ba5      	ldr	r3, [pc, #660]	@ (80104b8 <UART_SetConfig+0x338>)
 8010222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010228:	2b28      	cmp	r3, #40	@ 0x28
 801022a:	d86d      	bhi.n	8010308 <UART_SetConfig+0x188>
 801022c:	a201      	add	r2, pc, #4	@ (adr r2, 8010234 <UART_SetConfig+0xb4>)
 801022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010232:	bf00      	nop
 8010234:	080102d9 	.word	0x080102d9
 8010238:	08010309 	.word	0x08010309
 801023c:	08010309 	.word	0x08010309
 8010240:	08010309 	.word	0x08010309
 8010244:	08010309 	.word	0x08010309
 8010248:	08010309 	.word	0x08010309
 801024c:	08010309 	.word	0x08010309
 8010250:	08010309 	.word	0x08010309
 8010254:	080102e1 	.word	0x080102e1
 8010258:	08010309 	.word	0x08010309
 801025c:	08010309 	.word	0x08010309
 8010260:	08010309 	.word	0x08010309
 8010264:	08010309 	.word	0x08010309
 8010268:	08010309 	.word	0x08010309
 801026c:	08010309 	.word	0x08010309
 8010270:	08010309 	.word	0x08010309
 8010274:	080102e9 	.word	0x080102e9
 8010278:	08010309 	.word	0x08010309
 801027c:	08010309 	.word	0x08010309
 8010280:	08010309 	.word	0x08010309
 8010284:	08010309 	.word	0x08010309
 8010288:	08010309 	.word	0x08010309
 801028c:	08010309 	.word	0x08010309
 8010290:	08010309 	.word	0x08010309
 8010294:	080102f1 	.word	0x080102f1
 8010298:	08010309 	.word	0x08010309
 801029c:	08010309 	.word	0x08010309
 80102a0:	08010309 	.word	0x08010309
 80102a4:	08010309 	.word	0x08010309
 80102a8:	08010309 	.word	0x08010309
 80102ac:	08010309 	.word	0x08010309
 80102b0:	08010309 	.word	0x08010309
 80102b4:	080102f9 	.word	0x080102f9
 80102b8:	08010309 	.word	0x08010309
 80102bc:	08010309 	.word	0x08010309
 80102c0:	08010309 	.word	0x08010309
 80102c4:	08010309 	.word	0x08010309
 80102c8:	08010309 	.word	0x08010309
 80102cc:	08010309 	.word	0x08010309
 80102d0:	08010309 	.word	0x08010309
 80102d4:	08010301 	.word	0x08010301
 80102d8:	2301      	movs	r3, #1
 80102da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102de:	e222      	b.n	8010726 <UART_SetConfig+0x5a6>
 80102e0:	2304      	movs	r3, #4
 80102e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102e6:	e21e      	b.n	8010726 <UART_SetConfig+0x5a6>
 80102e8:	2308      	movs	r3, #8
 80102ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ee:	e21a      	b.n	8010726 <UART_SetConfig+0x5a6>
 80102f0:	2310      	movs	r3, #16
 80102f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102f6:	e216      	b.n	8010726 <UART_SetConfig+0x5a6>
 80102f8:	2320      	movs	r3, #32
 80102fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102fe:	e212      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010300:	2340      	movs	r3, #64	@ 0x40
 8010302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010306:	e20e      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010308:	2380      	movs	r3, #128	@ 0x80
 801030a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801030e:	e20a      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4a69      	ldr	r2, [pc, #420]	@ (80104bc <UART_SetConfig+0x33c>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d130      	bne.n	801037c <UART_SetConfig+0x1fc>
 801031a:	4b67      	ldr	r3, [pc, #412]	@ (80104b8 <UART_SetConfig+0x338>)
 801031c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801031e:	f003 0307 	and.w	r3, r3, #7
 8010322:	2b05      	cmp	r3, #5
 8010324:	d826      	bhi.n	8010374 <UART_SetConfig+0x1f4>
 8010326:	a201      	add	r2, pc, #4	@ (adr r2, 801032c <UART_SetConfig+0x1ac>)
 8010328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801032c:	08010345 	.word	0x08010345
 8010330:	0801034d 	.word	0x0801034d
 8010334:	08010355 	.word	0x08010355
 8010338:	0801035d 	.word	0x0801035d
 801033c:	08010365 	.word	0x08010365
 8010340:	0801036d 	.word	0x0801036d
 8010344:	2300      	movs	r3, #0
 8010346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801034a:	e1ec      	b.n	8010726 <UART_SetConfig+0x5a6>
 801034c:	2304      	movs	r3, #4
 801034e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010352:	e1e8      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010354:	2308      	movs	r3, #8
 8010356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801035a:	e1e4      	b.n	8010726 <UART_SetConfig+0x5a6>
 801035c:	2310      	movs	r3, #16
 801035e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010362:	e1e0      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010364:	2320      	movs	r3, #32
 8010366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801036a:	e1dc      	b.n	8010726 <UART_SetConfig+0x5a6>
 801036c:	2340      	movs	r3, #64	@ 0x40
 801036e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010372:	e1d8      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010374:	2380      	movs	r3, #128	@ 0x80
 8010376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801037a:	e1d4      	b.n	8010726 <UART_SetConfig+0x5a6>
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a4f      	ldr	r2, [pc, #316]	@ (80104c0 <UART_SetConfig+0x340>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d130      	bne.n	80103e8 <UART_SetConfig+0x268>
 8010386:	4b4c      	ldr	r3, [pc, #304]	@ (80104b8 <UART_SetConfig+0x338>)
 8010388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801038a:	f003 0307 	and.w	r3, r3, #7
 801038e:	2b05      	cmp	r3, #5
 8010390:	d826      	bhi.n	80103e0 <UART_SetConfig+0x260>
 8010392:	a201      	add	r2, pc, #4	@ (adr r2, 8010398 <UART_SetConfig+0x218>)
 8010394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010398:	080103b1 	.word	0x080103b1
 801039c:	080103b9 	.word	0x080103b9
 80103a0:	080103c1 	.word	0x080103c1
 80103a4:	080103c9 	.word	0x080103c9
 80103a8:	080103d1 	.word	0x080103d1
 80103ac:	080103d9 	.word	0x080103d9
 80103b0:	2300      	movs	r3, #0
 80103b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103b6:	e1b6      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103b8:	2304      	movs	r3, #4
 80103ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103be:	e1b2      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103c0:	2308      	movs	r3, #8
 80103c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103c6:	e1ae      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103c8:	2310      	movs	r3, #16
 80103ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ce:	e1aa      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103d0:	2320      	movs	r3, #32
 80103d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103d6:	e1a6      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103d8:	2340      	movs	r3, #64	@ 0x40
 80103da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103de:	e1a2      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103e0:	2380      	movs	r3, #128	@ 0x80
 80103e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103e6:	e19e      	b.n	8010726 <UART_SetConfig+0x5a6>
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a35      	ldr	r2, [pc, #212]	@ (80104c4 <UART_SetConfig+0x344>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d130      	bne.n	8010454 <UART_SetConfig+0x2d4>
 80103f2:	4b31      	ldr	r3, [pc, #196]	@ (80104b8 <UART_SetConfig+0x338>)
 80103f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103f6:	f003 0307 	and.w	r3, r3, #7
 80103fa:	2b05      	cmp	r3, #5
 80103fc:	d826      	bhi.n	801044c <UART_SetConfig+0x2cc>
 80103fe:	a201      	add	r2, pc, #4	@ (adr r2, 8010404 <UART_SetConfig+0x284>)
 8010400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010404:	0801041d 	.word	0x0801041d
 8010408:	08010425 	.word	0x08010425
 801040c:	0801042d 	.word	0x0801042d
 8010410:	08010435 	.word	0x08010435
 8010414:	0801043d 	.word	0x0801043d
 8010418:	08010445 	.word	0x08010445
 801041c:	2300      	movs	r3, #0
 801041e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010422:	e180      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010424:	2304      	movs	r3, #4
 8010426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801042a:	e17c      	b.n	8010726 <UART_SetConfig+0x5a6>
 801042c:	2308      	movs	r3, #8
 801042e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010432:	e178      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010434:	2310      	movs	r3, #16
 8010436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801043a:	e174      	b.n	8010726 <UART_SetConfig+0x5a6>
 801043c:	2320      	movs	r3, #32
 801043e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010442:	e170      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010444:	2340      	movs	r3, #64	@ 0x40
 8010446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801044a:	e16c      	b.n	8010726 <UART_SetConfig+0x5a6>
 801044c:	2380      	movs	r3, #128	@ 0x80
 801044e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010452:	e168      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a1b      	ldr	r2, [pc, #108]	@ (80104c8 <UART_SetConfig+0x348>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d142      	bne.n	80104e4 <UART_SetConfig+0x364>
 801045e:	4b16      	ldr	r3, [pc, #88]	@ (80104b8 <UART_SetConfig+0x338>)
 8010460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010462:	f003 0307 	and.w	r3, r3, #7
 8010466:	2b05      	cmp	r3, #5
 8010468:	d838      	bhi.n	80104dc <UART_SetConfig+0x35c>
 801046a:	a201      	add	r2, pc, #4	@ (adr r2, 8010470 <UART_SetConfig+0x2f0>)
 801046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010470:	08010489 	.word	0x08010489
 8010474:	08010491 	.word	0x08010491
 8010478:	08010499 	.word	0x08010499
 801047c:	080104a1 	.word	0x080104a1
 8010480:	080104cd 	.word	0x080104cd
 8010484:	080104d5 	.word	0x080104d5
 8010488:	2300      	movs	r3, #0
 801048a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801048e:	e14a      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010490:	2304      	movs	r3, #4
 8010492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010496:	e146      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010498:	2308      	movs	r3, #8
 801049a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801049e:	e142      	b.n	8010726 <UART_SetConfig+0x5a6>
 80104a0:	2310      	movs	r3, #16
 80104a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104a6:	e13e      	b.n	8010726 <UART_SetConfig+0x5a6>
 80104a8:	cfff69f3 	.word	0xcfff69f3
 80104ac:	58000c00 	.word	0x58000c00
 80104b0:	11fff4ff 	.word	0x11fff4ff
 80104b4:	40011000 	.word	0x40011000
 80104b8:	58024400 	.word	0x58024400
 80104bc:	40004400 	.word	0x40004400
 80104c0:	40004800 	.word	0x40004800
 80104c4:	40004c00 	.word	0x40004c00
 80104c8:	40005000 	.word	0x40005000
 80104cc:	2320      	movs	r3, #32
 80104ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104d2:	e128      	b.n	8010726 <UART_SetConfig+0x5a6>
 80104d4:	2340      	movs	r3, #64	@ 0x40
 80104d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104da:	e124      	b.n	8010726 <UART_SetConfig+0x5a6>
 80104dc:	2380      	movs	r3, #128	@ 0x80
 80104de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104e2:	e120      	b.n	8010726 <UART_SetConfig+0x5a6>
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4acb      	ldr	r2, [pc, #812]	@ (8010818 <UART_SetConfig+0x698>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d176      	bne.n	80105dc <UART_SetConfig+0x45c>
 80104ee:	4bcb      	ldr	r3, [pc, #812]	@ (801081c <UART_SetConfig+0x69c>)
 80104f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80104f6:	2b28      	cmp	r3, #40	@ 0x28
 80104f8:	d86c      	bhi.n	80105d4 <UART_SetConfig+0x454>
 80104fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010500 <UART_SetConfig+0x380>)
 80104fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010500:	080105a5 	.word	0x080105a5
 8010504:	080105d5 	.word	0x080105d5
 8010508:	080105d5 	.word	0x080105d5
 801050c:	080105d5 	.word	0x080105d5
 8010510:	080105d5 	.word	0x080105d5
 8010514:	080105d5 	.word	0x080105d5
 8010518:	080105d5 	.word	0x080105d5
 801051c:	080105d5 	.word	0x080105d5
 8010520:	080105ad 	.word	0x080105ad
 8010524:	080105d5 	.word	0x080105d5
 8010528:	080105d5 	.word	0x080105d5
 801052c:	080105d5 	.word	0x080105d5
 8010530:	080105d5 	.word	0x080105d5
 8010534:	080105d5 	.word	0x080105d5
 8010538:	080105d5 	.word	0x080105d5
 801053c:	080105d5 	.word	0x080105d5
 8010540:	080105b5 	.word	0x080105b5
 8010544:	080105d5 	.word	0x080105d5
 8010548:	080105d5 	.word	0x080105d5
 801054c:	080105d5 	.word	0x080105d5
 8010550:	080105d5 	.word	0x080105d5
 8010554:	080105d5 	.word	0x080105d5
 8010558:	080105d5 	.word	0x080105d5
 801055c:	080105d5 	.word	0x080105d5
 8010560:	080105bd 	.word	0x080105bd
 8010564:	080105d5 	.word	0x080105d5
 8010568:	080105d5 	.word	0x080105d5
 801056c:	080105d5 	.word	0x080105d5
 8010570:	080105d5 	.word	0x080105d5
 8010574:	080105d5 	.word	0x080105d5
 8010578:	080105d5 	.word	0x080105d5
 801057c:	080105d5 	.word	0x080105d5
 8010580:	080105c5 	.word	0x080105c5
 8010584:	080105d5 	.word	0x080105d5
 8010588:	080105d5 	.word	0x080105d5
 801058c:	080105d5 	.word	0x080105d5
 8010590:	080105d5 	.word	0x080105d5
 8010594:	080105d5 	.word	0x080105d5
 8010598:	080105d5 	.word	0x080105d5
 801059c:	080105d5 	.word	0x080105d5
 80105a0:	080105cd 	.word	0x080105cd
 80105a4:	2301      	movs	r3, #1
 80105a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105aa:	e0bc      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105ac:	2304      	movs	r3, #4
 80105ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105b2:	e0b8      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105b4:	2308      	movs	r3, #8
 80105b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ba:	e0b4      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105bc:	2310      	movs	r3, #16
 80105be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105c2:	e0b0      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105c4:	2320      	movs	r3, #32
 80105c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ca:	e0ac      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105cc:	2340      	movs	r3, #64	@ 0x40
 80105ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105d2:	e0a8      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105d4:	2380      	movs	r3, #128	@ 0x80
 80105d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105da:	e0a4      	b.n	8010726 <UART_SetConfig+0x5a6>
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a8f      	ldr	r2, [pc, #572]	@ (8010820 <UART_SetConfig+0x6a0>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d130      	bne.n	8010648 <UART_SetConfig+0x4c8>
 80105e6:	4b8d      	ldr	r3, [pc, #564]	@ (801081c <UART_SetConfig+0x69c>)
 80105e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105ea:	f003 0307 	and.w	r3, r3, #7
 80105ee:	2b05      	cmp	r3, #5
 80105f0:	d826      	bhi.n	8010640 <UART_SetConfig+0x4c0>
 80105f2:	a201      	add	r2, pc, #4	@ (adr r2, 80105f8 <UART_SetConfig+0x478>)
 80105f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f8:	08010611 	.word	0x08010611
 80105fc:	08010619 	.word	0x08010619
 8010600:	08010621 	.word	0x08010621
 8010604:	08010629 	.word	0x08010629
 8010608:	08010631 	.word	0x08010631
 801060c:	08010639 	.word	0x08010639
 8010610:	2300      	movs	r3, #0
 8010612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010616:	e086      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010618:	2304      	movs	r3, #4
 801061a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061e:	e082      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010620:	2308      	movs	r3, #8
 8010622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010626:	e07e      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010628:	2310      	movs	r3, #16
 801062a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801062e:	e07a      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010630:	2320      	movs	r3, #32
 8010632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010636:	e076      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010638:	2340      	movs	r3, #64	@ 0x40
 801063a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801063e:	e072      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010640:	2380      	movs	r3, #128	@ 0x80
 8010642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010646:	e06e      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a75      	ldr	r2, [pc, #468]	@ (8010824 <UART_SetConfig+0x6a4>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d130      	bne.n	80106b4 <UART_SetConfig+0x534>
 8010652:	4b72      	ldr	r3, [pc, #456]	@ (801081c <UART_SetConfig+0x69c>)
 8010654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010656:	f003 0307 	and.w	r3, r3, #7
 801065a:	2b05      	cmp	r3, #5
 801065c:	d826      	bhi.n	80106ac <UART_SetConfig+0x52c>
 801065e:	a201      	add	r2, pc, #4	@ (adr r2, 8010664 <UART_SetConfig+0x4e4>)
 8010660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010664:	0801067d 	.word	0x0801067d
 8010668:	08010685 	.word	0x08010685
 801066c:	0801068d 	.word	0x0801068d
 8010670:	08010695 	.word	0x08010695
 8010674:	0801069d 	.word	0x0801069d
 8010678:	080106a5 	.word	0x080106a5
 801067c:	2300      	movs	r3, #0
 801067e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010682:	e050      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010684:	2304      	movs	r3, #4
 8010686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068a:	e04c      	b.n	8010726 <UART_SetConfig+0x5a6>
 801068c:	2308      	movs	r3, #8
 801068e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010692:	e048      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010694:	2310      	movs	r3, #16
 8010696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801069a:	e044      	b.n	8010726 <UART_SetConfig+0x5a6>
 801069c:	2320      	movs	r3, #32
 801069e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106a2:	e040      	b.n	8010726 <UART_SetConfig+0x5a6>
 80106a4:	2340      	movs	r3, #64	@ 0x40
 80106a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106aa:	e03c      	b.n	8010726 <UART_SetConfig+0x5a6>
 80106ac:	2380      	movs	r3, #128	@ 0x80
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b2:	e038      	b.n	8010726 <UART_SetConfig+0x5a6>
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a5b      	ldr	r2, [pc, #364]	@ (8010828 <UART_SetConfig+0x6a8>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d130      	bne.n	8010720 <UART_SetConfig+0x5a0>
 80106be:	4b57      	ldr	r3, [pc, #348]	@ (801081c <UART_SetConfig+0x69c>)
 80106c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106c2:	f003 0307 	and.w	r3, r3, #7
 80106c6:	2b05      	cmp	r3, #5
 80106c8:	d826      	bhi.n	8010718 <UART_SetConfig+0x598>
 80106ca:	a201      	add	r2, pc, #4	@ (adr r2, 80106d0 <UART_SetConfig+0x550>)
 80106cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d0:	080106e9 	.word	0x080106e9
 80106d4:	080106f1 	.word	0x080106f1
 80106d8:	080106f9 	.word	0x080106f9
 80106dc:	08010701 	.word	0x08010701
 80106e0:	08010709 	.word	0x08010709
 80106e4:	08010711 	.word	0x08010711
 80106e8:	2302      	movs	r3, #2
 80106ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ee:	e01a      	b.n	8010726 <UART_SetConfig+0x5a6>
 80106f0:	2304      	movs	r3, #4
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106f6:	e016      	b.n	8010726 <UART_SetConfig+0x5a6>
 80106f8:	2308      	movs	r3, #8
 80106fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106fe:	e012      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010700:	2310      	movs	r3, #16
 8010702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010706:	e00e      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010708:	2320      	movs	r3, #32
 801070a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070e:	e00a      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010710:	2340      	movs	r3, #64	@ 0x40
 8010712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010716:	e006      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010718:	2380      	movs	r3, #128	@ 0x80
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e002      	b.n	8010726 <UART_SetConfig+0x5a6>
 8010720:	2380      	movs	r3, #128	@ 0x80
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a3f      	ldr	r2, [pc, #252]	@ (8010828 <UART_SetConfig+0x6a8>)
 801072c:	4293      	cmp	r3, r2
 801072e:	f040 80f8 	bne.w	8010922 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010732:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010736:	2b20      	cmp	r3, #32
 8010738:	dc46      	bgt.n	80107c8 <UART_SetConfig+0x648>
 801073a:	2b02      	cmp	r3, #2
 801073c:	f2c0 8082 	blt.w	8010844 <UART_SetConfig+0x6c4>
 8010740:	3b02      	subs	r3, #2
 8010742:	2b1e      	cmp	r3, #30
 8010744:	d87e      	bhi.n	8010844 <UART_SetConfig+0x6c4>
 8010746:	a201      	add	r2, pc, #4	@ (adr r2, 801074c <UART_SetConfig+0x5cc>)
 8010748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074c:	080107cf 	.word	0x080107cf
 8010750:	08010845 	.word	0x08010845
 8010754:	080107d7 	.word	0x080107d7
 8010758:	08010845 	.word	0x08010845
 801075c:	08010845 	.word	0x08010845
 8010760:	08010845 	.word	0x08010845
 8010764:	080107e7 	.word	0x080107e7
 8010768:	08010845 	.word	0x08010845
 801076c:	08010845 	.word	0x08010845
 8010770:	08010845 	.word	0x08010845
 8010774:	08010845 	.word	0x08010845
 8010778:	08010845 	.word	0x08010845
 801077c:	08010845 	.word	0x08010845
 8010780:	08010845 	.word	0x08010845
 8010784:	080107f7 	.word	0x080107f7
 8010788:	08010845 	.word	0x08010845
 801078c:	08010845 	.word	0x08010845
 8010790:	08010845 	.word	0x08010845
 8010794:	08010845 	.word	0x08010845
 8010798:	08010845 	.word	0x08010845
 801079c:	08010845 	.word	0x08010845
 80107a0:	08010845 	.word	0x08010845
 80107a4:	08010845 	.word	0x08010845
 80107a8:	08010845 	.word	0x08010845
 80107ac:	08010845 	.word	0x08010845
 80107b0:	08010845 	.word	0x08010845
 80107b4:	08010845 	.word	0x08010845
 80107b8:	08010845 	.word	0x08010845
 80107bc:	08010845 	.word	0x08010845
 80107c0:	08010845 	.word	0x08010845
 80107c4:	08010837 	.word	0x08010837
 80107c8:	2b40      	cmp	r3, #64	@ 0x40
 80107ca:	d037      	beq.n	801083c <UART_SetConfig+0x6bc>
 80107cc:	e03a      	b.n	8010844 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80107ce:	f7fb fda9 	bl	800c324 <HAL_RCCEx_GetD3PCLK1Freq>
 80107d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107d4:	e03c      	b.n	8010850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fb fdb8 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80107e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107e4:	e034      	b.n	8010850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107e6:	f107 0318 	add.w	r3, r7, #24
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fb ff04 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107f4:	e02c      	b.n	8010850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107f6:	4b09      	ldr	r3, [pc, #36]	@ (801081c <UART_SetConfig+0x69c>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f003 0320 	and.w	r3, r3, #32
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d016      	beq.n	8010830 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010802:	4b06      	ldr	r3, [pc, #24]	@ (801081c <UART_SetConfig+0x69c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	08db      	lsrs	r3, r3, #3
 8010808:	f003 0303 	and.w	r3, r3, #3
 801080c:	4a07      	ldr	r2, [pc, #28]	@ (801082c <UART_SetConfig+0x6ac>)
 801080e:	fa22 f303 	lsr.w	r3, r2, r3
 8010812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010814:	e01c      	b.n	8010850 <UART_SetConfig+0x6d0>
 8010816:	bf00      	nop
 8010818:	40011400 	.word	0x40011400
 801081c:	58024400 	.word	0x58024400
 8010820:	40007800 	.word	0x40007800
 8010824:	40007c00 	.word	0x40007c00
 8010828:	58000c00 	.word	0x58000c00
 801082c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010830:	4b9d      	ldr	r3, [pc, #628]	@ (8010aa8 <UART_SetConfig+0x928>)
 8010832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010834:	e00c      	b.n	8010850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010836:	4b9d      	ldr	r3, [pc, #628]	@ (8010aac <UART_SetConfig+0x92c>)
 8010838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801083a:	e009      	b.n	8010850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801083c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010842:	e005      	b.n	8010850 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010844:	2300      	movs	r3, #0
 8010846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010848:	2301      	movs	r3, #1
 801084a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801084e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 81de 	beq.w	8010c14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801085c:	4a94      	ldr	r2, [pc, #592]	@ (8010ab0 <UART_SetConfig+0x930>)
 801085e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010862:	461a      	mov	r2, r3
 8010864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010866:	fbb3 f3f2 	udiv	r3, r3, r2
 801086a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	685a      	ldr	r2, [r3, #4]
 8010870:	4613      	mov	r3, r2
 8010872:	005b      	lsls	r3, r3, #1
 8010874:	4413      	add	r3, r2
 8010876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010878:	429a      	cmp	r2, r3
 801087a:	d305      	bcc.n	8010888 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010884:	429a      	cmp	r2, r3
 8010886:	d903      	bls.n	8010890 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010888:	2301      	movs	r3, #1
 801088a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801088e:	e1c1      	b.n	8010c14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010892:	2200      	movs	r2, #0
 8010894:	60bb      	str	r3, [r7, #8]
 8010896:	60fa      	str	r2, [r7, #12]
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801089c:	4a84      	ldr	r2, [pc, #528]	@ (8010ab0 <UART_SetConfig+0x930>)
 801089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	2200      	movs	r2, #0
 80108a6:	603b      	str	r3, [r7, #0]
 80108a8:	607a      	str	r2, [r7, #4]
 80108aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108b2:	f7ef fd6d 	bl	8000390 <__aeabi_uldivmod>
 80108b6:	4602      	mov	r2, r0
 80108b8:	460b      	mov	r3, r1
 80108ba:	4610      	mov	r0, r2
 80108bc:	4619      	mov	r1, r3
 80108be:	f04f 0200 	mov.w	r2, #0
 80108c2:	f04f 0300 	mov.w	r3, #0
 80108c6:	020b      	lsls	r3, r1, #8
 80108c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80108cc:	0202      	lsls	r2, r0, #8
 80108ce:	6979      	ldr	r1, [r7, #20]
 80108d0:	6849      	ldr	r1, [r1, #4]
 80108d2:	0849      	lsrs	r1, r1, #1
 80108d4:	2000      	movs	r0, #0
 80108d6:	460c      	mov	r4, r1
 80108d8:	4605      	mov	r5, r0
 80108da:	eb12 0804 	adds.w	r8, r2, r4
 80108de:	eb43 0905 	adc.w	r9, r3, r5
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	469a      	mov	sl, r3
 80108ea:	4693      	mov	fp, r2
 80108ec:	4652      	mov	r2, sl
 80108ee:	465b      	mov	r3, fp
 80108f0:	4640      	mov	r0, r8
 80108f2:	4649      	mov	r1, r9
 80108f4:	f7ef fd4c 	bl	8000390 <__aeabi_uldivmod>
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	4613      	mov	r3, r2
 80108fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010906:	d308      	bcc.n	801091a <UART_SetConfig+0x79a>
 8010908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801090e:	d204      	bcs.n	801091a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010916:	60da      	str	r2, [r3, #12]
 8010918:	e17c      	b.n	8010c14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801091a:	2301      	movs	r3, #1
 801091c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010920:	e178      	b.n	8010c14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	69db      	ldr	r3, [r3, #28]
 8010926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801092a:	f040 80c5 	bne.w	8010ab8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801092e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010932:	2b20      	cmp	r3, #32
 8010934:	dc48      	bgt.n	80109c8 <UART_SetConfig+0x848>
 8010936:	2b00      	cmp	r3, #0
 8010938:	db7b      	blt.n	8010a32 <UART_SetConfig+0x8b2>
 801093a:	2b20      	cmp	r3, #32
 801093c:	d879      	bhi.n	8010a32 <UART_SetConfig+0x8b2>
 801093e:	a201      	add	r2, pc, #4	@ (adr r2, 8010944 <UART_SetConfig+0x7c4>)
 8010940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010944:	080109cf 	.word	0x080109cf
 8010948:	080109d7 	.word	0x080109d7
 801094c:	08010a33 	.word	0x08010a33
 8010950:	08010a33 	.word	0x08010a33
 8010954:	080109df 	.word	0x080109df
 8010958:	08010a33 	.word	0x08010a33
 801095c:	08010a33 	.word	0x08010a33
 8010960:	08010a33 	.word	0x08010a33
 8010964:	080109ef 	.word	0x080109ef
 8010968:	08010a33 	.word	0x08010a33
 801096c:	08010a33 	.word	0x08010a33
 8010970:	08010a33 	.word	0x08010a33
 8010974:	08010a33 	.word	0x08010a33
 8010978:	08010a33 	.word	0x08010a33
 801097c:	08010a33 	.word	0x08010a33
 8010980:	08010a33 	.word	0x08010a33
 8010984:	080109ff 	.word	0x080109ff
 8010988:	08010a33 	.word	0x08010a33
 801098c:	08010a33 	.word	0x08010a33
 8010990:	08010a33 	.word	0x08010a33
 8010994:	08010a33 	.word	0x08010a33
 8010998:	08010a33 	.word	0x08010a33
 801099c:	08010a33 	.word	0x08010a33
 80109a0:	08010a33 	.word	0x08010a33
 80109a4:	08010a33 	.word	0x08010a33
 80109a8:	08010a33 	.word	0x08010a33
 80109ac:	08010a33 	.word	0x08010a33
 80109b0:	08010a33 	.word	0x08010a33
 80109b4:	08010a33 	.word	0x08010a33
 80109b8:	08010a33 	.word	0x08010a33
 80109bc:	08010a33 	.word	0x08010a33
 80109c0:	08010a33 	.word	0x08010a33
 80109c4:	08010a25 	.word	0x08010a25
 80109c8:	2b40      	cmp	r3, #64	@ 0x40
 80109ca:	d02e      	beq.n	8010a2a <UART_SetConfig+0x8aa>
 80109cc:	e031      	b.n	8010a32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80109ce:	f7f9 fcb1 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 80109d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80109d4:	e033      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80109d6:	f7f9 fcc3 	bl	800a360 <HAL_RCC_GetPCLK2Freq>
 80109da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80109dc:	e02f      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fb fcb4 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109ec:	e027      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109ee:	f107 0318 	add.w	r3, r7, #24
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fb fe00 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80109fc:	e01f      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109fe:	4b2d      	ldr	r3, [pc, #180]	@ (8010ab4 <UART_SetConfig+0x934>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f003 0320 	and.w	r3, r3, #32
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d009      	beq.n	8010a1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8010ab4 <UART_SetConfig+0x934>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	08db      	lsrs	r3, r3, #3
 8010a10:	f003 0303 	and.w	r3, r3, #3
 8010a14:	4a24      	ldr	r2, [pc, #144]	@ (8010aa8 <UART_SetConfig+0x928>)
 8010a16:	fa22 f303 	lsr.w	r3, r2, r3
 8010a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a1c:	e00f      	b.n	8010a3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010a1e:	4b22      	ldr	r3, [pc, #136]	@ (8010aa8 <UART_SetConfig+0x928>)
 8010a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a22:	e00c      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a24:	4b21      	ldr	r3, [pc, #132]	@ (8010aac <UART_SetConfig+0x92c>)
 8010a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a28:	e009      	b.n	8010a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a30:	e005      	b.n	8010a3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010a32:	2300      	movs	r3, #0
 8010a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 80e7 	beq.w	8010c14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a4a:	4a19      	ldr	r2, [pc, #100]	@ (8010ab0 <UART_SetConfig+0x930>)
 8010a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a50:	461a      	mov	r2, r3
 8010a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a58:	005a      	lsls	r2, r3, #1
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	085b      	lsrs	r3, r3, #1
 8010a60:	441a      	add	r2, r3
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	2b0f      	cmp	r3, #15
 8010a70:	d916      	bls.n	8010aa0 <UART_SetConfig+0x920>
 8010a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a78:	d212      	bcs.n	8010aa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	f023 030f 	bic.w	r3, r3, #15
 8010a82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a86:	085b      	lsrs	r3, r3, #1
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	f003 0307 	and.w	r3, r3, #7
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010a92:	4313      	orrs	r3, r2
 8010a94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010a9c:	60da      	str	r2, [r3, #12]
 8010a9e:	e0b9      	b.n	8010c14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010aa6:	e0b5      	b.n	8010c14 <UART_SetConfig+0xa94>
 8010aa8:	03d09000 	.word	0x03d09000
 8010aac:	003d0900 	.word	0x003d0900
 8010ab0:	0801ec68 	.word	0x0801ec68
 8010ab4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ab8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010abc:	2b20      	cmp	r3, #32
 8010abe:	dc49      	bgt.n	8010b54 <UART_SetConfig+0x9d4>
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	db7c      	blt.n	8010bbe <UART_SetConfig+0xa3e>
 8010ac4:	2b20      	cmp	r3, #32
 8010ac6:	d87a      	bhi.n	8010bbe <UART_SetConfig+0xa3e>
 8010ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8010ad0 <UART_SetConfig+0x950>)
 8010aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ace:	bf00      	nop
 8010ad0:	08010b5b 	.word	0x08010b5b
 8010ad4:	08010b63 	.word	0x08010b63
 8010ad8:	08010bbf 	.word	0x08010bbf
 8010adc:	08010bbf 	.word	0x08010bbf
 8010ae0:	08010b6b 	.word	0x08010b6b
 8010ae4:	08010bbf 	.word	0x08010bbf
 8010ae8:	08010bbf 	.word	0x08010bbf
 8010aec:	08010bbf 	.word	0x08010bbf
 8010af0:	08010b7b 	.word	0x08010b7b
 8010af4:	08010bbf 	.word	0x08010bbf
 8010af8:	08010bbf 	.word	0x08010bbf
 8010afc:	08010bbf 	.word	0x08010bbf
 8010b00:	08010bbf 	.word	0x08010bbf
 8010b04:	08010bbf 	.word	0x08010bbf
 8010b08:	08010bbf 	.word	0x08010bbf
 8010b0c:	08010bbf 	.word	0x08010bbf
 8010b10:	08010b8b 	.word	0x08010b8b
 8010b14:	08010bbf 	.word	0x08010bbf
 8010b18:	08010bbf 	.word	0x08010bbf
 8010b1c:	08010bbf 	.word	0x08010bbf
 8010b20:	08010bbf 	.word	0x08010bbf
 8010b24:	08010bbf 	.word	0x08010bbf
 8010b28:	08010bbf 	.word	0x08010bbf
 8010b2c:	08010bbf 	.word	0x08010bbf
 8010b30:	08010bbf 	.word	0x08010bbf
 8010b34:	08010bbf 	.word	0x08010bbf
 8010b38:	08010bbf 	.word	0x08010bbf
 8010b3c:	08010bbf 	.word	0x08010bbf
 8010b40:	08010bbf 	.word	0x08010bbf
 8010b44:	08010bbf 	.word	0x08010bbf
 8010b48:	08010bbf 	.word	0x08010bbf
 8010b4c:	08010bbf 	.word	0x08010bbf
 8010b50:	08010bb1 	.word	0x08010bb1
 8010b54:	2b40      	cmp	r3, #64	@ 0x40
 8010b56:	d02e      	beq.n	8010bb6 <UART_SetConfig+0xa36>
 8010b58:	e031      	b.n	8010bbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b5a:	f7f9 fbeb 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 8010b5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b60:	e033      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b62:	f7f9 fbfd 	bl	800a360 <HAL_RCC_GetPCLK2Freq>
 8010b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b68:	e02f      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fb fbee 	bl	800c350 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b78:	e027      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b7a:	f107 0318 	add.w	r3, r7, #24
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fb fd3a 	bl	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b88:	e01f      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8010c40 <UART_SetConfig+0xac0>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f003 0320 	and.w	r3, r3, #32
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d009      	beq.n	8010baa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b96:	4b2a      	ldr	r3, [pc, #168]	@ (8010c40 <UART_SetConfig+0xac0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	08db      	lsrs	r3, r3, #3
 8010b9c:	f003 0303 	and.w	r3, r3, #3
 8010ba0:	4a28      	ldr	r2, [pc, #160]	@ (8010c44 <UART_SetConfig+0xac4>)
 8010ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8010ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ba8:	e00f      	b.n	8010bca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010baa:	4b26      	ldr	r3, [pc, #152]	@ (8010c44 <UART_SetConfig+0xac4>)
 8010bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bae:	e00c      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bb0:	4b25      	ldr	r3, [pc, #148]	@ (8010c48 <UART_SetConfig+0xac8>)
 8010bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bb4:	e009      	b.n	8010bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bbc:	e005      	b.n	8010bca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8010bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d021      	beq.n	8010c14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c4c <UART_SetConfig+0xacc>)
 8010bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	085b      	lsrs	r3, r3, #1
 8010be8:	441a      	add	r2, r3
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf6:	2b0f      	cmp	r3, #15
 8010bf8:	d909      	bls.n	8010c0e <UART_SetConfig+0xa8e>
 8010bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c00:	d205      	bcs.n	8010c0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60da      	str	r2, [r3, #12]
 8010c0c:	e002      	b.n	8010c14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	2201      	movs	r2, #1
 8010c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	2200      	movs	r2, #0
 8010c28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010c30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3748      	adds	r7, #72	@ 0x48
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010c3e:	bf00      	nop
 8010c40:	58024400 	.word	0x58024400
 8010c44:	03d09000 	.word	0x03d09000
 8010c48:	003d0900 	.word	0x003d0900
 8010c4c:	0801ec68 	.word	0x0801ec68

08010c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c5c:	f003 0308 	and.w	r3, r3, #8
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d00a      	beq.n	8010c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	430a      	orrs	r2, r1
 8010c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c7e:	f003 0301 	and.w	r3, r3, #1
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00a      	beq.n	8010c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	430a      	orrs	r2, r1
 8010c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ca0:	f003 0302 	and.w	r3, r3, #2
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00a      	beq.n	8010cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	430a      	orrs	r2, r1
 8010cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cc2:	f003 0304 	and.w	r3, r3, #4
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00a      	beq.n	8010ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce4:	f003 0310 	and.w	r3, r3, #16
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d00a      	beq.n	8010d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	430a      	orrs	r2, r1
 8010d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d06:	f003 0320 	and.w	r3, r3, #32
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00a      	beq.n	8010d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	430a      	orrs	r2, r1
 8010d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d01a      	beq.n	8010d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	430a      	orrs	r2, r1
 8010d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010d4e:	d10a      	bne.n	8010d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	430a      	orrs	r2, r1
 8010d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00a      	beq.n	8010d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	430a      	orrs	r2, r1
 8010d86:	605a      	str	r2, [r3, #4]
  }
}
 8010d88:	bf00      	nop
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b098      	sub	sp, #96	@ 0x60
 8010d98:	af02      	add	r7, sp, #8
 8010d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010da4:	f7f3 fd5c 	bl	8004860 <HAL_GetTick>
 8010da8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f003 0308 	and.w	r3, r3, #8
 8010db4:	2b08      	cmp	r3, #8
 8010db6:	d12f      	bne.n	8010e18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010db8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f88e 	bl	8010ee8 <UART_WaitOnFlagUntilTimeout>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d022      	beq.n	8010e18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dda:	e853 3f00 	ldrex	r3, [r3]
 8010dde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010de6:	653b      	str	r3, [r7, #80]	@ 0x50
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	461a      	mov	r2, r3
 8010dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010df2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010df8:	e841 2300 	strex	r3, r2, [r1]
 8010dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1e6      	bne.n	8010dd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2220      	movs	r2, #32
 8010e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e14:	2303      	movs	r3, #3
 8010e16:	e063      	b.n	8010ee0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f003 0304 	and.w	r3, r3, #4
 8010e22:	2b04      	cmp	r3, #4
 8010e24:	d149      	bne.n	8010eba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f000 f857 	bl	8010ee8 <UART_WaitOnFlagUntilTimeout>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d03c      	beq.n	8010eba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e48:	e853 3f00 	ldrex	r3, [r3]
 8010e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8010e4e:	6a3b      	ldr	r3, [r7, #32]
 8010e50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e66:	e841 2300 	strex	r3, r2, [r1]
 8010e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1e6      	bne.n	8010e40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3308      	adds	r3, #8
 8010e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	e853 3f00 	ldrex	r3, [r3]
 8010e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f023 0301 	bic.w	r3, r3, #1
 8010e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	3308      	adds	r3, #8
 8010e90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e92:	61fa      	str	r2, [r7, #28]
 8010e94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e96:	69b9      	ldr	r1, [r7, #24]
 8010e98:	69fa      	ldr	r2, [r7, #28]
 8010e9a:	e841 2300 	strex	r3, r2, [r1]
 8010e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1e5      	bne.n	8010e72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e012      	b.n	8010ee0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2220      	movs	r2, #32
 8010ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2220      	movs	r2, #32
 8010ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3758      	adds	r7, #88	@ 0x58
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}

08010ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	603b      	str	r3, [r7, #0]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ef8:	e04f      	b.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f00:	d04b      	beq.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f02:	f7f3 fcad 	bl	8004860 <HAL_GetTick>
 8010f06:	4602      	mov	r2, r0
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d302      	bcc.n	8010f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d101      	bne.n	8010f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f18:	2303      	movs	r3, #3
 8010f1a:	e04e      	b.n	8010fba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 0304 	and.w	r3, r3, #4
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d037      	beq.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b80      	cmp	r3, #128	@ 0x80
 8010f2e:	d034      	beq.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2b40      	cmp	r3, #64	@ 0x40
 8010f34:	d031      	beq.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	69db      	ldr	r3, [r3, #28]
 8010f3c:	f003 0308 	and.w	r3, r3, #8
 8010f40:	2b08      	cmp	r3, #8
 8010f42:	d110      	bne.n	8010f66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2208      	movs	r2, #8
 8010f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f000 f95b 	bl	8011208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2208      	movs	r2, #8
 8010f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e029      	b.n	8010fba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	69db      	ldr	r3, [r3, #28]
 8010f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f74:	d111      	bne.n	8010f9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f000 f941 	bl	8011208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2220      	movs	r2, #32
 8010f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2200      	movs	r2, #0
 8010f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010f96:	2303      	movs	r3, #3
 8010f98:	e00f      	b.n	8010fba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	69da      	ldr	r2, [r3, #28]
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	bf0c      	ite	eq
 8010faa:	2301      	moveq	r3, #1
 8010fac:	2300      	movne	r3, #0
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d0a0      	beq.n	8010efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3710      	adds	r7, #16
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
	...

08010fc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b0a3      	sub	sp, #140	@ 0x8c
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	68ba      	ldr	r2, [r7, #8]
 8010fd6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	88fa      	ldrh	r2, [r7, #6]
 8010fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	88fa      	ldrh	r2, [r7, #6]
 8010fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ff6:	d10e      	bne.n	8011016 <UART_Start_Receive_IT+0x52>
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d105      	bne.n	801100c <UART_Start_Receive_IT+0x48>
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011006:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801100a:	e02d      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	22ff      	movs	r2, #255	@ 0xff
 8011010:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011014:	e028      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d10d      	bne.n	801103a <UART_Start_Receive_IT+0x76>
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	691b      	ldr	r3, [r3, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d104      	bne.n	8011030 <UART_Start_Receive_IT+0x6c>
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	22ff      	movs	r2, #255	@ 0xff
 801102a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801102e:	e01b      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	227f      	movs	r2, #127	@ 0x7f
 8011034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011038:	e016      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011042:	d10d      	bne.n	8011060 <UART_Start_Receive_IT+0x9c>
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	691b      	ldr	r3, [r3, #16]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d104      	bne.n	8011056 <UART_Start_Receive_IT+0x92>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	227f      	movs	r2, #127	@ 0x7f
 8011050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011054:	e008      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	223f      	movs	r2, #63	@ 0x3f
 801105a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801105e:	e003      	b.n	8011068 <UART_Start_Receive_IT+0xa4>
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2200      	movs	r2, #0
 8011064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2200      	movs	r2, #0
 801106c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2222      	movs	r2, #34	@ 0x22
 8011074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	3308      	adds	r3, #8
 801107e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011082:	e853 3f00 	ldrex	r3, [r3]
 8011086:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801108a:	f043 0301 	orr.w	r3, r3, #1
 801108e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	3308      	adds	r3, #8
 8011098:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801109c:	673a      	str	r2, [r7, #112]	@ 0x70
 801109e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80110a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80110a4:	e841 2300 	strex	r3, r2, [r1]
 80110a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80110aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1e3      	bne.n	8011078 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80110b8:	d14f      	bne.n	801115a <UART_Start_Receive_IT+0x196>
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80110c0:	88fa      	ldrh	r2, [r7, #6]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d349      	bcc.n	801115a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80110ce:	d107      	bne.n	80110e0 <UART_Start_Receive_IT+0x11c>
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	691b      	ldr	r3, [r3, #16]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d103      	bne.n	80110e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	4a47      	ldr	r2, [pc, #284]	@ (80111f8 <UART_Start_Receive_IT+0x234>)
 80110dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80110de:	e002      	b.n	80110e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	4a46      	ldr	r2, [pc, #280]	@ (80111fc <UART_Start_Receive_IT+0x238>)
 80110e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d01a      	beq.n	8011124 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110f6:	e853 3f00 	ldrex	r3, [r3]
 80110fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80110fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	461a      	mov	r2, r3
 801110c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011112:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011114:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011116:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011118:	e841 2300 	strex	r3, r2, [r1]
 801111c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801111e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1e4      	bne.n	80110ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	3308      	adds	r3, #8
 801112a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801112e:	e853 3f00 	ldrex	r3, [r3]
 8011132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801113a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3308      	adds	r3, #8
 8011142:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011144:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011146:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011148:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801114a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801114c:	e841 2300 	strex	r3, r2, [r1]
 8011150:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1e5      	bne.n	8011124 <UART_Start_Receive_IT+0x160>
 8011158:	e046      	b.n	80111e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	689b      	ldr	r3, [r3, #8]
 801115e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011162:	d107      	bne.n	8011174 <UART_Start_Receive_IT+0x1b0>
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	691b      	ldr	r3, [r3, #16]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d103      	bne.n	8011174 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4a24      	ldr	r2, [pc, #144]	@ (8011200 <UART_Start_Receive_IT+0x23c>)
 8011170:	675a      	str	r2, [r3, #116]	@ 0x74
 8011172:	e002      	b.n	801117a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	4a23      	ldr	r2, [pc, #140]	@ (8011204 <UART_Start_Receive_IT+0x240>)
 8011178:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d019      	beq.n	80111b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118a:	e853 3f00 	ldrex	r3, [r3]
 801118e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8011196:	677b      	str	r3, [r7, #116]	@ 0x74
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	461a      	mov	r2, r3
 801119e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80111a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80111a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111a8:	e841 2300 	strex	r3, r2, [r1]
 80111ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80111ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1e6      	bne.n	8011182 <UART_Start_Receive_IT+0x1be>
 80111b4:	e018      	b.n	80111e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	e853 3f00 	ldrex	r3, [r3]
 80111c2:	613b      	str	r3, [r7, #16]
   return(result);
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	f043 0320 	orr.w	r3, r3, #32
 80111ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	461a      	mov	r2, r3
 80111d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111d4:	623b      	str	r3, [r7, #32]
 80111d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d8:	69f9      	ldr	r1, [r7, #28]
 80111da:	6a3a      	ldr	r2, [r7, #32]
 80111dc:	e841 2300 	strex	r3, r2, [r1]
 80111e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1e6      	bne.n	80111b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80111e8:	2300      	movs	r3, #0
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	378c      	adds	r7, #140	@ 0x8c
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	08011a25 	.word	0x08011a25
 80111fc:	080116c1 	.word	0x080116c1
 8011200:	08011509 	.word	0x08011509
 8011204:	08011351 	.word	0x08011351

08011208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011208:	b480      	push	{r7}
 801120a:	b095      	sub	sp, #84	@ 0x54
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011218:	e853 3f00 	ldrex	r3, [r3]
 801121c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	461a      	mov	r2, r3
 801122c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801122e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011230:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011236:	e841 2300 	strex	r3, r2, [r1]
 801123a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801123c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123e:	2b00      	cmp	r3, #0
 8011240:	d1e6      	bne.n	8011210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	3308      	adds	r3, #8
 8011248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801124a:	6a3b      	ldr	r3, [r7, #32]
 801124c:	e853 3f00 	ldrex	r3, [r3]
 8011250:	61fb      	str	r3, [r7, #28]
   return(result);
 8011252:	69fa      	ldr	r2, [r7, #28]
 8011254:	4b1e      	ldr	r3, [pc, #120]	@ (80112d0 <UART_EndRxTransfer+0xc8>)
 8011256:	4013      	ands	r3, r2
 8011258:	64bb      	str	r3, [r7, #72]	@ 0x48
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	3308      	adds	r3, #8
 8011260:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801126a:	e841 2300 	strex	r3, r2, [r1]
 801126e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1e5      	bne.n	8011242 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801127a:	2b01      	cmp	r3, #1
 801127c:	d118      	bne.n	80112b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	e853 3f00 	ldrex	r3, [r3]
 801128a:	60bb      	str	r3, [r7, #8]
   return(result);
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	f023 0310 	bic.w	r3, r3, #16
 8011292:	647b      	str	r3, [r7, #68]	@ 0x44
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	461a      	mov	r2, r3
 801129a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801129c:	61bb      	str	r3, [r7, #24]
 801129e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a0:	6979      	ldr	r1, [r7, #20]
 80112a2:	69ba      	ldr	r2, [r7, #24]
 80112a4:	e841 2300 	strex	r3, r2, [r1]
 80112a8:	613b      	str	r3, [r7, #16]
   return(result);
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d1e6      	bne.n	801127e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2220      	movs	r2, #32
 80112b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2200      	movs	r2, #0
 80112bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80112c4:	bf00      	nop
 80112c6:	3754      	adds	r7, #84	@ 0x54
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	effffffe 	.word	0xeffffffe

080112d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f7ef ff10 	bl	8001110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80112f0:	bf00      	nop
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b088      	sub	sp, #32
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	e853 3f00 	ldrex	r3, [r3]
 801130c:	60bb      	str	r3, [r7, #8]
   return(result);
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011314:	61fb      	str	r3, [r7, #28]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	461a      	mov	r2, r3
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	61bb      	str	r3, [r7, #24]
 8011320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011322:	6979      	ldr	r1, [r7, #20]
 8011324:	69ba      	ldr	r2, [r7, #24]
 8011326:	e841 2300 	strex	r3, r2, [r1]
 801132a:	613b      	str	r3, [r7, #16]
   return(result);
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d1e6      	bne.n	8011300 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2220      	movs	r2, #32
 8011336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7fe ff07 	bl	8010154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011346:	bf00      	nop
 8011348:	3720      	adds	r7, #32
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
	...

08011350 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b09c      	sub	sp, #112	@ 0x70
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801135e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011368:	2b22      	cmp	r3, #34	@ 0x22
 801136a:	f040 80be 	bne.w	80114ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011374:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011378:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801137c:	b2d9      	uxtb	r1, r3
 801137e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011382:	b2da      	uxtb	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011388:	400a      	ands	r2, r1
 801138a:	b2d2      	uxtb	r2, r2
 801138c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011392:	1c5a      	adds	r2, r3, #1
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801139e:	b29b      	uxth	r3, r3
 80113a0:	3b01      	subs	r3, #1
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	f040 80a1 	bne.w	80114fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113c0:	e853 3f00 	ldrex	r3, [r3]
 80113c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80113c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80113cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	461a      	mov	r2, r3
 80113d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80113d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80113dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113de:	e841 2300 	strex	r3, r2, [r1]
 80113e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80113e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1e6      	bne.n	80113b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	3308      	adds	r3, #8
 80113f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f4:	e853 3f00 	ldrex	r3, [r3]
 80113f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80113fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113fc:	f023 0301 	bic.w	r3, r3, #1
 8011400:	667b      	str	r3, [r7, #100]	@ 0x64
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3308      	adds	r3, #8
 8011408:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801140a:	647a      	str	r2, [r7, #68]	@ 0x44
 801140c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011412:	e841 2300 	strex	r3, r2, [r1]
 8011416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1e5      	bne.n	80113ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2220      	movs	r2, #32
 8011422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2200      	movs	r2, #0
 801142a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4a33      	ldr	r2, [pc, #204]	@ (8011504 <UART_RxISR_8BIT+0x1b4>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d01f      	beq.n	801147c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011446:	2b00      	cmp	r3, #0
 8011448:	d018      	beq.n	801147c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011452:	e853 3f00 	ldrex	r3, [r3]
 8011456:	623b      	str	r3, [r7, #32]
   return(result);
 8011458:	6a3b      	ldr	r3, [r7, #32]
 801145a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801145e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	461a      	mov	r2, r3
 8011466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011468:	633b      	str	r3, [r7, #48]	@ 0x30
 801146a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801146e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011470:	e841 2300 	strex	r3, r2, [r1]
 8011474:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1e6      	bne.n	801144a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011480:	2b01      	cmp	r3, #1
 8011482:	d12e      	bne.n	80114e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	e853 3f00 	ldrex	r3, [r3]
 8011496:	60fb      	str	r3, [r7, #12]
   return(result);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f023 0310 	bic.w	r3, r3, #16
 801149e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114a8:	61fb      	str	r3, [r7, #28]
 80114aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ac:	69b9      	ldr	r1, [r7, #24]
 80114ae:	69fa      	ldr	r2, [r7, #28]
 80114b0:	e841 2300 	strex	r3, r2, [r1]
 80114b4:	617b      	str	r3, [r7, #20]
   return(result);
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d1e6      	bne.n	801148a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	69db      	ldr	r3, [r3, #28]
 80114c2:	f003 0310 	and.w	r3, r3, #16
 80114c6:	2b10      	cmp	r3, #16
 80114c8:	d103      	bne.n	80114d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2210      	movs	r2, #16
 80114d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7fe fe44 	bl	8010168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80114e0:	e00b      	b.n	80114fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ef fdae 	bl	8001044 <HAL_UART_RxCpltCallback>
}
 80114e8:	e007      	b.n	80114fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	699a      	ldr	r2, [r3, #24]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f042 0208 	orr.w	r2, r2, #8
 80114f8:	619a      	str	r2, [r3, #24]
}
 80114fa:	bf00      	nop
 80114fc:	3770      	adds	r7, #112	@ 0x70
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	58000c00 	.word	0x58000c00

08011508 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b09c      	sub	sp, #112	@ 0x70
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011516:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011520:	2b22      	cmp	r3, #34	@ 0x22
 8011522:	f040 80be 	bne.w	80116a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801152c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011534:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011536:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801153a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801153e:	4013      	ands	r3, r2
 8011540:	b29a      	uxth	r2, r3
 8011542:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011544:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801154a:	1c9a      	adds	r2, r3, #2
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011556:	b29b      	uxth	r3, r3
 8011558:	3b01      	subs	r3, #1
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011568:	b29b      	uxth	r3, r3
 801156a:	2b00      	cmp	r3, #0
 801156c:	f040 80a1 	bne.w	80116b2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011578:	e853 3f00 	ldrex	r3, [r3]
 801157c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801157e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011584:	667b      	str	r3, [r7, #100]	@ 0x64
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	461a      	mov	r2, r3
 801158c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801158e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011590:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011592:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011596:	e841 2300 	strex	r3, r2, [r1]
 801159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801159c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d1e6      	bne.n	8011570 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3308      	adds	r3, #8
 80115a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ac:	e853 3f00 	ldrex	r3, [r3]
 80115b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80115b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b4:	f023 0301 	bic.w	r3, r3, #1
 80115b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80115c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80115c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80115c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80115ca:	e841 2300 	strex	r3, r2, [r1]
 80115ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80115d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1e5      	bne.n	80115a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2220      	movs	r2, #32
 80115da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	4a33      	ldr	r2, [pc, #204]	@ (80116bc <UART_RxISR_16BIT+0x1b4>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d01f      	beq.n	8011634 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d018      	beq.n	8011634 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011608:	6a3b      	ldr	r3, [r7, #32]
 801160a:	e853 3f00 	ldrex	r3, [r3]
 801160e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	461a      	mov	r2, r3
 801161e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011622:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011628:	e841 2300 	strex	r3, r2, [r1]
 801162c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1e6      	bne.n	8011602 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011638:	2b01      	cmp	r3, #1
 801163a:	d12e      	bne.n	801169a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2200      	movs	r2, #0
 8011640:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	e853 3f00 	ldrex	r3, [r3]
 801164e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	f023 0310 	bic.w	r3, r3, #16
 8011656:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	461a      	mov	r2, r3
 801165e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011660:	61bb      	str	r3, [r7, #24]
 8011662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011664:	6979      	ldr	r1, [r7, #20]
 8011666:	69ba      	ldr	r2, [r7, #24]
 8011668:	e841 2300 	strex	r3, r2, [r1]
 801166c:	613b      	str	r3, [r7, #16]
   return(result);
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1e6      	bne.n	8011642 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	69db      	ldr	r3, [r3, #28]
 801167a:	f003 0310 	and.w	r3, r3, #16
 801167e:	2b10      	cmp	r3, #16
 8011680:	d103      	bne.n	801168a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2210      	movs	r2, #16
 8011688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011690:	4619      	mov	r1, r3
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7fe fd68 	bl	8010168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011698:	e00b      	b.n	80116b2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ef fcd2 	bl	8001044 <HAL_UART_RxCpltCallback>
}
 80116a0:	e007      	b.n	80116b2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	699a      	ldr	r2, [r3, #24]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f042 0208 	orr.w	r2, r2, #8
 80116b0:	619a      	str	r2, [r3, #24]
}
 80116b2:	bf00      	nop
 80116b4:	3770      	adds	r7, #112	@ 0x70
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	58000c00 	.word	0x58000c00

080116c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b0ac      	sub	sp, #176	@ 0xb0
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80116ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	69db      	ldr	r3, [r3, #28]
 80116d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116f6:	2b22      	cmp	r3, #34	@ 0x22
 80116f8:	f040 8181 	bne.w	80119fe <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011702:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011706:	e124      	b.n	8011952 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801170e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011712:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011716:	b2d9      	uxtb	r1, r3
 8011718:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801171c:	b2da      	uxtb	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011722:	400a      	ands	r2, r1
 8011724:	b2d2      	uxtb	r2, r2
 8011726:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801172c:	1c5a      	adds	r2, r3, #1
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011738:	b29b      	uxth	r3, r3
 801173a:	3b01      	subs	r3, #1
 801173c:	b29a      	uxth	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	69db      	ldr	r3, [r3, #28]
 801174a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801174e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011752:	f003 0307 	and.w	r3, r3, #7
 8011756:	2b00      	cmp	r3, #0
 8011758:	d053      	beq.n	8011802 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801175a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801175e:	f003 0301 	and.w	r3, r3, #1
 8011762:	2b00      	cmp	r3, #0
 8011764:	d011      	beq.n	801178a <UART_RxISR_8BIT_FIFOEN+0xca>
 8011766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801176e:	2b00      	cmp	r3, #0
 8011770:	d00b      	beq.n	801178a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2201      	movs	r2, #1
 8011778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011780:	f043 0201 	orr.w	r2, r3, #1
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801178e:	f003 0302 	and.w	r3, r3, #2
 8011792:	2b00      	cmp	r3, #0
 8011794:	d011      	beq.n	80117ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d00b      	beq.n	80117ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2202      	movs	r2, #2
 80117a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117b0:	f043 0204 	orr.w	r2, r3, #4
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80117ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117be:	f003 0304 	and.w	r3, r3, #4
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d011      	beq.n	80117ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80117c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00b      	beq.n	80117ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2204      	movs	r2, #4
 80117d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117e0:	f043 0202 	orr.w	r2, r3, #2
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d006      	beq.n	8011802 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7ef fc8b 	bl	8001110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011808:	b29b      	uxth	r3, r3
 801180a:	2b00      	cmp	r3, #0
 801180c:	f040 80a1 	bne.w	8011952 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011818:	e853 3f00 	ldrex	r3, [r3]
 801181c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801181e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011834:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011836:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011838:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801183a:	e841 2300 	strex	r3, r2, [r1]
 801183e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1e4      	bne.n	8011810 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	3308      	adds	r3, #8
 801184c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011850:	e853 3f00 	ldrex	r3, [r3]
 8011854:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8011856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011858:	4b6f      	ldr	r3, [pc, #444]	@ (8011a18 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801185a:	4013      	ands	r3, r2
 801185c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3308      	adds	r3, #8
 8011866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801186a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801186c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011870:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011872:	e841 2300 	strex	r3, r2, [r1]
 8011876:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1e3      	bne.n	8011846 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2220      	movs	r2, #32
 8011882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2200      	movs	r2, #0
 801188a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a61      	ldr	r2, [pc, #388]	@ (8011a1c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011898:	4293      	cmp	r3, r2
 801189a:	d021      	beq.n	80118e0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d01a      	beq.n	80118e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80118b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80118be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	461a      	mov	r2, r3
 80118c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80118cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80118ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80118d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80118d4:	e841 2300 	strex	r3, r2, [r1]
 80118d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80118da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1e4      	bne.n	80118aa <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d130      	bne.n	801194a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118f6:	e853 3f00 	ldrex	r3, [r3]
 80118fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80118fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fe:	f023 0310 	bic.w	r3, r3, #16
 8011902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011910:	643b      	str	r3, [r7, #64]	@ 0x40
 8011912:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011918:	e841 2300 	strex	r3, r2, [r1]
 801191c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1e4      	bne.n	80118ee <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	69db      	ldr	r3, [r3, #28]
 801192a:	f003 0310 	and.w	r3, r3, #16
 801192e:	2b10      	cmp	r3, #16
 8011930:	d103      	bne.n	801193a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2210      	movs	r2, #16
 8011938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011940:	4619      	mov	r1, r3
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fe fc10 	bl	8010168 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011948:	e00e      	b.n	8011968 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f7ef fb7a 	bl	8001044 <HAL_UART_RxCpltCallback>
        break;
 8011950:	e00a      	b.n	8011968 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011952:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011956:	2b00      	cmp	r3, #0
 8011958:	d006      	beq.n	8011968 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801195e:	f003 0320 	and.w	r3, r3, #32
 8011962:	2b00      	cmp	r3, #0
 8011964:	f47f aed0 	bne.w	8011708 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801196e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011972:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011976:	2b00      	cmp	r3, #0
 8011978:	d049      	beq.n	8011a0e <UART_RxISR_8BIT_FIFOEN+0x34e>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011980:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011984:	429a      	cmp	r2, r3
 8011986:	d242      	bcs.n	8011a0e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	3308      	adds	r3, #8
 801198e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	e853 3f00 	ldrex	r3, [r3]
 8011996:	61fb      	str	r3, [r7, #28]
   return(result);
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801199e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3308      	adds	r3, #8
 80119a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80119ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80119ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80119b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119b4:	e841 2300 	strex	r3, r2, [r1]
 80119b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d1e3      	bne.n	8011988 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4a17      	ldr	r2, [pc, #92]	@ (8011a20 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80119c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f043 0320 	orr.w	r3, r3, #32
 80119da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	461a      	mov	r2, r3
 80119e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80119e8:	61bb      	str	r3, [r7, #24]
 80119ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ec:	6979      	ldr	r1, [r7, #20]
 80119ee:	69ba      	ldr	r2, [r7, #24]
 80119f0:	e841 2300 	strex	r3, r2, [r1]
 80119f4:	613b      	str	r3, [r7, #16]
   return(result);
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1e4      	bne.n	80119c6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80119fc:	e007      	b.n	8011a0e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	699a      	ldr	r2, [r3, #24]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f042 0208 	orr.w	r2, r2, #8
 8011a0c:	619a      	str	r2, [r3, #24]
}
 8011a0e:	bf00      	nop
 8011a10:	37b0      	adds	r7, #176	@ 0xb0
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	effffffe 	.word	0xeffffffe
 8011a1c:	58000c00 	.word	0x58000c00
 8011a20:	08011351 	.word	0x08011351

08011a24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b0ae      	sub	sp, #184	@ 0xb8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a32:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	69db      	ldr	r3, [r3, #28]
 8011a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a5a:	2b22      	cmp	r3, #34	@ 0x22
 8011a5c:	f040 8185 	bne.w	8011d6a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011a66:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011a6a:	e128      	b.n	8011cbe <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a72:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011a7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011a82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011a86:	4013      	ands	r3, r2
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011a8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a94:	1c9a      	adds	r2, r3, #2
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	69db      	ldr	r3, [r3, #28]
 8011ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011aba:	f003 0307 	and.w	r3, r3, #7
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d053      	beq.n	8011b6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011ac6:	f003 0301 	and.w	r3, r3, #1
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d011      	beq.n	8011af2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00b      	beq.n	8011af2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ae8:	f043 0201 	orr.w	r2, r3, #1
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011af6:	f003 0302 	and.w	r3, r3, #2
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d011      	beq.n	8011b22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011b02:	f003 0301 	and.w	r3, r3, #1
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00b      	beq.n	8011b22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2202      	movs	r2, #2
 8011b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b18:	f043 0204 	orr.w	r2, r3, #4
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b26:	f003 0304 	and.w	r3, r3, #4
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d011      	beq.n	8011b52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011b32:	f003 0301 	and.w	r3, r3, #1
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00b      	beq.n	8011b52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2204      	movs	r2, #4
 8011b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b48:	f043 0202 	orr.w	r2, r3, #2
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d006      	beq.n	8011b6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7ef fad7 	bl	8001110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f040 80a3 	bne.w	8011cbe <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b80:	e853 3f00 	ldrex	r3, [r3]
 8011b84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	461a      	mov	r2, r3
 8011b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011b9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011b9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011ba6:	e841 2300 	strex	r3, r2, [r1]
 8011baa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1e2      	bne.n	8011b78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3308      	adds	r3, #8
 8011bb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bbc:	e853 3f00 	ldrex	r3, [r3]
 8011bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8011d84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011bd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011bdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011bde:	e841 2300 	strex	r3, r2, [r1]
 8011be2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1e3      	bne.n	8011bb2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2220      	movs	r2, #32
 8011bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a61      	ldr	r2, [pc, #388]	@ (8011d88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d021      	beq.n	8011c4c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d01a      	beq.n	8011c4c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c1e:	e853 3f00 	ldrex	r3, [r3]
 8011c22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	461a      	mov	r2, r3
 8011c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011c38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c3a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011c40:	e841 2300 	strex	r3, r2, [r1]
 8011c44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1e4      	bne.n	8011c16 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d130      	bne.n	8011cb6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2200      	movs	r2, #0
 8011c58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c62:	e853 3f00 	ldrex	r3, [r3]
 8011c66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c6a:	f023 0310 	bic.w	r3, r3, #16
 8011c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	461a      	mov	r2, r3
 8011c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c84:	e841 2300 	strex	r3, r2, [r1]
 8011c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d1e4      	bne.n	8011c5a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	69db      	ldr	r3, [r3, #28]
 8011c96:	f003 0310 	and.w	r3, r3, #16
 8011c9a:	2b10      	cmp	r3, #16
 8011c9c:	d103      	bne.n	8011ca6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2210      	movs	r2, #16
 8011ca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011cac:	4619      	mov	r1, r3
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f7fe fa5a 	bl	8010168 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011cb4:	e00e      	b.n	8011cd4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ef f9c4 	bl	8001044 <HAL_UART_RxCpltCallback>
        break;
 8011cbc:	e00a      	b.n	8011cd4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011cbe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d006      	beq.n	8011cd4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8011cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011cca:	f003 0320 	and.w	r3, r3, #32
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	f47f aecc 	bne.w	8011a6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011cda:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011cde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d049      	beq.n	8011d7a <UART_RxISR_16BIT_FIFOEN+0x356>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011cec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d242      	bcs.n	8011d7a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	3308      	adds	r3, #8
 8011cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfe:	e853 3f00 	ldrex	r3, [r3]
 8011d02:	623b      	str	r3, [r7, #32]
   return(result);
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3308      	adds	r3, #8
 8011d14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d18:	633a      	str	r2, [r7, #48]	@ 0x30
 8011d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d20:	e841 2300 	strex	r3, r2, [r1]
 8011d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e3      	bne.n	8011cf4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4a17      	ldr	r2, [pc, #92]	@ (8011d8c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8011d30:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	e853 3f00 	ldrex	r3, [r3]
 8011d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f043 0320 	orr.w	r3, r3, #32
 8011d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011d54:	61fb      	str	r3, [r7, #28]
 8011d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d58:	69b9      	ldr	r1, [r7, #24]
 8011d5a:	69fa      	ldr	r2, [r7, #28]
 8011d5c:	e841 2300 	strex	r3, r2, [r1]
 8011d60:	617b      	str	r3, [r7, #20]
   return(result);
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1e4      	bne.n	8011d32 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d68:	e007      	b.n	8011d7a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	699a      	ldr	r2, [r3, #24]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f042 0208 	orr.w	r2, r2, #8
 8011d78:	619a      	str	r2, [r3, #24]
}
 8011d7a:	bf00      	nop
 8011d7c:	37b8      	adds	r7, #184	@ 0xb8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	effffffe 	.word	0xeffffffe
 8011d88:	58000c00 	.word	0x58000c00
 8011d8c:	08011509 	.word	0x08011509

08011d90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011d98:	bf00      	nop
 8011d9a:	370c      	adds	r7, #12
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011dac:	bf00      	nop
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d101      	bne.n	8011de2 <HAL_UARTEx_DisableFifoMode+0x16>
 8011dde:	2302      	movs	r3, #2
 8011de0:	e027      	b.n	8011e32 <HAL_UARTEx_DisableFifoMode+0x66>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2224      	movs	r2, #36	@ 0x24
 8011dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f022 0201 	bic.w	r2, r2, #1
 8011e08:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011e10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2220      	movs	r2, #32
 8011e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3714      	adds	r7, #20
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr

08011e3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b084      	sub	sp, #16
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
 8011e46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d101      	bne.n	8011e56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011e52:	2302      	movs	r3, #2
 8011e54:	e02d      	b.n	8011eb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2201      	movs	r2, #1
 8011e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2224      	movs	r2, #36	@ 0x24
 8011e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f022 0201 	bic.w	r2, r2, #1
 8011e7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f850 	bl	8011f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2220      	movs	r2, #32
 8011ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b084      	sub	sp, #16
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d101      	bne.n	8011ed2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011ece:	2302      	movs	r3, #2
 8011ed0:	e02d      	b.n	8011f2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2224      	movs	r2, #36	@ 0x24
 8011ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f022 0201 	bic.w	r2, r2, #1
 8011ef8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	430a      	orrs	r2, r1
 8011f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f812 	bl	8011f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2220      	movs	r2, #32
 8011f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
	...

08011f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b085      	sub	sp, #20
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d108      	bne.n	8011f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2201      	movs	r2, #1
 8011f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011f58:	e031      	b.n	8011fbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011f5a:	2310      	movs	r3, #16
 8011f5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011f5e:	2310      	movs	r3, #16
 8011f60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	0e5b      	lsrs	r3, r3, #25
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	f003 0307 	and.w	r3, r3, #7
 8011f70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	0f5b      	lsrs	r3, r3, #29
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	f003 0307 	and.w	r3, r3, #7
 8011f80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f82:	7bbb      	ldrb	r3, [r7, #14]
 8011f84:	7b3a      	ldrb	r2, [r7, #12]
 8011f86:	4911      	ldr	r1, [pc, #68]	@ (8011fcc <UARTEx_SetNbDataToProcess+0x94>)
 8011f88:	5c8a      	ldrb	r2, [r1, r2]
 8011f8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011f8e:	7b3a      	ldrb	r2, [r7, #12]
 8011f90:	490f      	ldr	r1, [pc, #60]	@ (8011fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8011f92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
 8011fa2:	7b7a      	ldrb	r2, [r7, #13]
 8011fa4:	4909      	ldr	r1, [pc, #36]	@ (8011fcc <UARTEx_SetNbDataToProcess+0x94>)
 8011fa6:	5c8a      	ldrb	r2, [r1, r2]
 8011fa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011fac:	7b7a      	ldrb	r2, [r7, #13]
 8011fae:	4908      	ldr	r1, [pc, #32]	@ (8011fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8011fb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011fbe:	bf00      	nop
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	0801ec80 	.word	0x0801ec80
 8011fd0:	0801ec88 	.word	0x0801ec88

08011fd4 <__NVIC_SetPriority>:
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	4603      	mov	r3, r0
 8011fdc:	6039      	str	r1, [r7, #0]
 8011fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	db0a      	blt.n	8011ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	b2da      	uxtb	r2, r3
 8011fec:	490c      	ldr	r1, [pc, #48]	@ (8012020 <__NVIC_SetPriority+0x4c>)
 8011fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ff2:	0112      	lsls	r2, r2, #4
 8011ff4:	b2d2      	uxtb	r2, r2
 8011ff6:	440b      	add	r3, r1
 8011ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011ffc:	e00a      	b.n	8012014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	b2da      	uxtb	r2, r3
 8012002:	4908      	ldr	r1, [pc, #32]	@ (8012024 <__NVIC_SetPriority+0x50>)
 8012004:	88fb      	ldrh	r3, [r7, #6]
 8012006:	f003 030f 	and.w	r3, r3, #15
 801200a:	3b04      	subs	r3, #4
 801200c:	0112      	lsls	r2, r2, #4
 801200e:	b2d2      	uxtb	r2, r2
 8012010:	440b      	add	r3, r1
 8012012:	761a      	strb	r2, [r3, #24]
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr
 8012020:	e000e100 	.word	0xe000e100
 8012024:	e000ed00 	.word	0xe000ed00

08012028 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012028:	b580      	push	{r7, lr}
 801202a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801202c:	4b05      	ldr	r3, [pc, #20]	@ (8012044 <SysTick_Handler+0x1c>)
 801202e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012030:	f001 feac 	bl	8013d8c <xTaskGetSchedulerState>
 8012034:	4603      	mov	r3, r0
 8012036:	2b01      	cmp	r3, #1
 8012038:	d001      	beq.n	801203e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801203a:	f002 fda5 	bl	8014b88 <xPortSysTickHandler>
  }
}
 801203e:	bf00      	nop
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	e000e010 	.word	0xe000e010

08012048 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012048:	b580      	push	{r7, lr}
 801204a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801204c:	2100      	movs	r1, #0
 801204e:	f06f 0004 	mvn.w	r0, #4
 8012052:	f7ff ffbf 	bl	8011fd4 <__NVIC_SetPriority>
#endif
}
 8012056:	bf00      	nop
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012062:	f3ef 8305 	mrs	r3, IPSR
 8012066:	603b      	str	r3, [r7, #0]
  return(result);
 8012068:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801206a:	2b00      	cmp	r3, #0
 801206c:	d003      	beq.n	8012076 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801206e:	f06f 0305 	mvn.w	r3, #5
 8012072:	607b      	str	r3, [r7, #4]
 8012074:	e00c      	b.n	8012090 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012076:	4b0a      	ldr	r3, [pc, #40]	@ (80120a0 <osKernelInitialize+0x44>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d105      	bne.n	801208a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801207e:	4b08      	ldr	r3, [pc, #32]	@ (80120a0 <osKernelInitialize+0x44>)
 8012080:	2201      	movs	r2, #1
 8012082:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012084:	2300      	movs	r3, #0
 8012086:	607b      	str	r3, [r7, #4]
 8012088:	e002      	b.n	8012090 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801208a:	f04f 33ff 	mov.w	r3, #4294967295
 801208e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012090:	687b      	ldr	r3, [r7, #4]
}
 8012092:	4618      	mov	r0, r3
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	240010b8 	.word	0x240010b8

080120a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120aa:	f3ef 8305 	mrs	r3, IPSR
 80120ae:	603b      	str	r3, [r7, #0]
  return(result);
 80120b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d003      	beq.n	80120be <osKernelStart+0x1a>
    stat = osErrorISR;
 80120b6:	f06f 0305 	mvn.w	r3, #5
 80120ba:	607b      	str	r3, [r7, #4]
 80120bc:	e010      	b.n	80120e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80120be:	4b0b      	ldr	r3, [pc, #44]	@ (80120ec <osKernelStart+0x48>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d109      	bne.n	80120da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80120c6:	f7ff ffbf 	bl	8012048 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80120ca:	4b08      	ldr	r3, [pc, #32]	@ (80120ec <osKernelStart+0x48>)
 80120cc:	2202      	movs	r2, #2
 80120ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80120d0:	f001 f9f8 	bl	80134c4 <vTaskStartScheduler>
      stat = osOK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	607b      	str	r3, [r7, #4]
 80120d8:	e002      	b.n	80120e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80120da:	f04f 33ff 	mov.w	r3, #4294967295
 80120de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80120e0:	687b      	ldr	r3, [r7, #4]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	240010b8 	.word	0x240010b8

080120f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08e      	sub	sp, #56	@ 0x38
 80120f4:	af04      	add	r7, sp, #16
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80120fc:	2300      	movs	r3, #0
 80120fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012100:	f3ef 8305 	mrs	r3, IPSR
 8012104:	617b      	str	r3, [r7, #20]
  return(result);
 8012106:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012108:	2b00      	cmp	r3, #0
 801210a:	d17e      	bne.n	801220a <osThreadNew+0x11a>
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d07b      	beq.n	801220a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012112:	2380      	movs	r3, #128	@ 0x80
 8012114:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012116:	2318      	movs	r3, #24
 8012118:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801211a:	2300      	movs	r3, #0
 801211c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 801211e:	f04f 33ff 	mov.w	r3, #4294967295
 8012122:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d045      	beq.n	80121b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <osThreadNew+0x48>
        name = attr->name;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	699b      	ldr	r3, [r3, #24]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d002      	beq.n	8012146 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	699b      	ldr	r3, [r3, #24]
 8012144:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d008      	beq.n	801215e <osThreadNew+0x6e>
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	2b38      	cmp	r3, #56	@ 0x38
 8012150:	d805      	bhi.n	801215e <osThreadNew+0x6e>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	f003 0301 	and.w	r3, r3, #1
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <osThreadNew+0x72>
        return (NULL);
 801215e:	2300      	movs	r3, #0
 8012160:	e054      	b.n	801220c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	695b      	ldr	r3, [r3, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d003      	beq.n	8012172 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	695b      	ldr	r3, [r3, #20]
 801216e:	089b      	lsrs	r3, r3, #2
 8012170:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	689b      	ldr	r3, [r3, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00e      	beq.n	8012198 <osThreadNew+0xa8>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	2ba7      	cmp	r3, #167	@ 0xa7
 8012180:	d90a      	bls.n	8012198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012186:	2b00      	cmp	r3, #0
 8012188:	d006      	beq.n	8012198 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	695b      	ldr	r3, [r3, #20]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d002      	beq.n	8012198 <osThreadNew+0xa8>
        mem = 1;
 8012192:	2301      	movs	r3, #1
 8012194:	61bb      	str	r3, [r7, #24]
 8012196:	e010      	b.n	80121ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10c      	bne.n	80121ba <osThreadNew+0xca>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	68db      	ldr	r3, [r3, #12]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d108      	bne.n	80121ba <osThreadNew+0xca>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	691b      	ldr	r3, [r3, #16]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d104      	bne.n	80121ba <osThreadNew+0xca>
          mem = 0;
 80121b0:	2300      	movs	r3, #0
 80121b2:	61bb      	str	r3, [r7, #24]
 80121b4:	e001      	b.n	80121ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80121b6:	2300      	movs	r3, #0
 80121b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d110      	bne.n	80121e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80121c8:	9202      	str	r2, [sp, #8]
 80121ca:	9301      	str	r3, [sp, #4]
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	6a3a      	ldr	r2, [r7, #32]
 80121d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f000 ffb6 	bl	8013148 <xTaskCreateStatic>
 80121dc:	4603      	mov	r3, r0
 80121de:	613b      	str	r3, [r7, #16]
 80121e0:	e013      	b.n	801220a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d110      	bne.n	801220a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80121e8:	6a3b      	ldr	r3, [r7, #32]
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	f107 0310 	add.w	r3, r7, #16
 80121f0:	9301      	str	r3, [sp, #4]
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f001 f804 	bl	8013208 <xTaskCreate>
 8012200:	4603      	mov	r3, r0
 8012202:	2b01      	cmp	r3, #1
 8012204:	d001      	beq.n	801220a <osThreadNew+0x11a>
            hTask = NULL;
 8012206:	2300      	movs	r3, #0
 8012208:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801220a:	693b      	ldr	r3, [r7, #16]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3728      	adds	r7, #40	@ 0x28
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	4a07      	ldr	r2, [pc, #28]	@ (8012240 <vApplicationGetIdleTaskMemory+0x2c>)
 8012224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	4a06      	ldr	r2, [pc, #24]	@ (8012244 <vApplicationGetIdleTaskMemory+0x30>)
 801222a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2280      	movs	r2, #128	@ 0x80
 8012230:	601a      	str	r2, [r3, #0]
}
 8012232:	bf00      	nop
 8012234:	3714      	adds	r7, #20
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	240010bc 	.word	0x240010bc
 8012244:	24001164 	.word	0x24001164

08012248 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012248:	b480      	push	{r7}
 801224a:	b085      	sub	sp, #20
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	4a07      	ldr	r2, [pc, #28]	@ (8012274 <vApplicationGetTimerTaskMemory+0x2c>)
 8012258:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	4a06      	ldr	r2, [pc, #24]	@ (8012278 <vApplicationGetTimerTaskMemory+0x30>)
 801225e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012266:	601a      	str	r2, [r3, #0]
}
 8012268:	bf00      	nop
 801226a:	3714      	adds	r7, #20
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	24001364 	.word	0x24001364
 8012278:	2400140c 	.word	0x2400140c

0801227c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801227c:	b480      	push	{r7}
 801227e:	b083      	sub	sp, #12
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f103 0208 	add.w	r2, r3, #8
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f04f 32ff 	mov.w	r2, #4294967295
 8012294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f103 0208 	add.w	r2, r3, #8
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f103 0208 	add.w	r2, r3, #8
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2200      	movs	r2, #0
 80122ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80122b0:	bf00      	nop
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80122ca:	bf00      	nop
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122d6:	b480      	push	{r7}
 80122d8:	b085      	sub	sp, #20
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	689a      	ldr	r2, [r3, #8]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	683a      	ldr	r2, [r7, #0]
 80122fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	683a      	ldr	r2, [r7, #0]
 8012300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	1c5a      	adds	r2, r3, #1
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]
}
 8012312:	bf00      	nop
 8012314:	3714      	adds	r7, #20
 8012316:	46bd      	mov	sp, r7
 8012318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231c:	4770      	bx	lr

0801231e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801231e:	b480      	push	{r7}
 8012320:	b085      	sub	sp, #20
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
 8012326:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012334:	d103      	bne.n	801233e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	691b      	ldr	r3, [r3, #16]
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	e00c      	b.n	8012358 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	3308      	adds	r3, #8
 8012342:	60fb      	str	r3, [r7, #12]
 8012344:	e002      	b.n	801234c <vListInsert+0x2e>
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	60fb      	str	r3, [r7, #12]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	68ba      	ldr	r2, [r7, #8]
 8012354:	429a      	cmp	r2, r3
 8012356:	d2f6      	bcs.n	8012346 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	683a      	ldr	r2, [r7, #0]
 8012366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	601a      	str	r2, [r3, #0]
}
 8012384:	bf00      	nop
 8012386:	3714      	adds	r7, #20
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	6892      	ldr	r2, [r2, #8]
 80123a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	6852      	ldr	r2, [r2, #4]
 80123b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	685b      	ldr	r3, [r3, #4]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d103      	bne.n	80123c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	689a      	ldr	r2, [r3, #8]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	1e5a      	subs	r2, r3, #1
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3714      	adds	r7, #20
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d10b      	bne.n	8012410 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80123f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123fc:	f383 8811 	msr	BASEPRI, r3
 8012400:	f3bf 8f6f 	isb	sy
 8012404:	f3bf 8f4f 	dsb	sy
 8012408:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801240a:	bf00      	nop
 801240c:	bf00      	nop
 801240e:	e7fd      	b.n	801240c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012410:	f002 fb2a 	bl	8014a68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801241c:	68f9      	ldr	r1, [r7, #12]
 801241e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012420:	fb01 f303 	mul.w	r3, r1, r3
 8012424:	441a      	add	r2, r3
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2200      	movs	r2, #0
 801242e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012440:	3b01      	subs	r3, #1
 8012442:	68f9      	ldr	r1, [r7, #12]
 8012444:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012446:	fb01 f303 	mul.w	r3, r1, r3
 801244a:	441a      	add	r2, r3
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	22ff      	movs	r2, #255	@ 0xff
 8012454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	22ff      	movs	r2, #255	@ 0xff
 801245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d114      	bne.n	8012490 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	691b      	ldr	r3, [r3, #16]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d01a      	beq.n	80124a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3310      	adds	r3, #16
 8012472:	4618      	mov	r0, r3
 8012474:	f001 fac4 	bl	8013a00 <xTaskRemoveFromEventList>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d012      	beq.n	80124a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801247e:	4b0d      	ldr	r3, [pc, #52]	@ (80124b4 <xQueueGenericReset+0xd0>)
 8012480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012484:	601a      	str	r2, [r3, #0]
 8012486:	f3bf 8f4f 	dsb	sy
 801248a:	f3bf 8f6f 	isb	sy
 801248e:	e009      	b.n	80124a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3310      	adds	r3, #16
 8012494:	4618      	mov	r0, r3
 8012496:	f7ff fef1 	bl	801227c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	3324      	adds	r3, #36	@ 0x24
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ff feec 	bl	801227c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80124a4:	f002 fb12 	bl	8014acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80124a8:	2301      	movs	r3, #1
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3710      	adds	r7, #16
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	e000ed04 	.word	0xe000ed04

080124b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b08e      	sub	sp, #56	@ 0x38
 80124bc:	af02      	add	r7, sp, #8
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d10b      	bne.n	80124e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80124cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124d0:	f383 8811 	msr	BASEPRI, r3
 80124d4:	f3bf 8f6f 	isb	sy
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80124de:	bf00      	nop
 80124e0:	bf00      	nop
 80124e2:	e7fd      	b.n	80124e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10b      	bne.n	8012502 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80124ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ee:	f383 8811 	msr	BASEPRI, r3
 80124f2:	f3bf 8f6f 	isb	sy
 80124f6:	f3bf 8f4f 	dsb	sy
 80124fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80124fc:	bf00      	nop
 80124fe:	bf00      	nop
 8012500:	e7fd      	b.n	80124fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <xQueueGenericCreateStatic+0x56>
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <xQueueGenericCreateStatic+0x5a>
 801250e:	2301      	movs	r3, #1
 8012510:	e000      	b.n	8012514 <xQueueGenericCreateStatic+0x5c>
 8012512:	2300      	movs	r3, #0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d10b      	bne.n	8012530 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801251c:	f383 8811 	msr	BASEPRI, r3
 8012520:	f3bf 8f6f 	isb	sy
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	623b      	str	r3, [r7, #32]
}
 801252a:	bf00      	nop
 801252c:	bf00      	nop
 801252e:	e7fd      	b.n	801252c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d102      	bne.n	801253c <xQueueGenericCreateStatic+0x84>
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d101      	bne.n	8012540 <xQueueGenericCreateStatic+0x88>
 801253c:	2301      	movs	r3, #1
 801253e:	e000      	b.n	8012542 <xQueueGenericCreateStatic+0x8a>
 8012540:	2300      	movs	r3, #0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10b      	bne.n	801255e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801254a:	f383 8811 	msr	BASEPRI, r3
 801254e:	f3bf 8f6f 	isb	sy
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	61fb      	str	r3, [r7, #28]
}
 8012558:	bf00      	nop
 801255a:	bf00      	nop
 801255c:	e7fd      	b.n	801255a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801255e:	2350      	movs	r3, #80	@ 0x50
 8012560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b50      	cmp	r3, #80	@ 0x50
 8012566:	d00b      	beq.n	8012580 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	61bb      	str	r3, [r7, #24]
}
 801257a:	bf00      	nop
 801257c:	bf00      	nop
 801257e:	e7fd      	b.n	801257c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012580:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00d      	beq.n	80125a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258e:	2201      	movs	r2, #1
 8012590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012594:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	4613      	mov	r3, r2
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	68b9      	ldr	r1, [r7, #8]
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f000 f805 	bl	80125b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80125a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3730      	adds	r7, #48	@ 0x30
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	60f8      	str	r0, [r7, #12]
 80125ba:	60b9      	str	r1, [r7, #8]
 80125bc:	607a      	str	r2, [r7, #4]
 80125be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d103      	bne.n	80125ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	69ba      	ldr	r2, [r7, #24]
 80125ca:	601a      	str	r2, [r3, #0]
 80125cc:	e002      	b.n	80125d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80125e0:	2101      	movs	r1, #1
 80125e2:	69b8      	ldr	r0, [r7, #24]
 80125e4:	f7ff fefe 	bl	80123e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	78fa      	ldrb	r2, [r7, #3]
 80125ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80125f0:	bf00      	nop
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08e      	sub	sp, #56	@ 0x38
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012606:	2300      	movs	r3, #0
 8012608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801260e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10b      	bne.n	801262c <xQueueGenericSend+0x34>
	__asm volatile
 8012614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012618:	f383 8811 	msr	BASEPRI, r3
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012626:	bf00      	nop
 8012628:	bf00      	nop
 801262a:	e7fd      	b.n	8012628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d103      	bne.n	801263a <xQueueGenericSend+0x42>
 8012632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <xQueueGenericSend+0x46>
 801263a:	2301      	movs	r3, #1
 801263c:	e000      	b.n	8012640 <xQueueGenericSend+0x48>
 801263e:	2300      	movs	r3, #0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10b      	bne.n	801265c <xQueueGenericSend+0x64>
	__asm volatile
 8012644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012656:	bf00      	nop
 8012658:	bf00      	nop
 801265a:	e7fd      	b.n	8012658 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	2b02      	cmp	r3, #2
 8012660:	d103      	bne.n	801266a <xQueueGenericSend+0x72>
 8012662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012666:	2b01      	cmp	r3, #1
 8012668:	d101      	bne.n	801266e <xQueueGenericSend+0x76>
 801266a:	2301      	movs	r3, #1
 801266c:	e000      	b.n	8012670 <xQueueGenericSend+0x78>
 801266e:	2300      	movs	r3, #0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d10b      	bne.n	801268c <xQueueGenericSend+0x94>
	__asm volatile
 8012674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012678:	f383 8811 	msr	BASEPRI, r3
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	623b      	str	r3, [r7, #32]
}
 8012686:	bf00      	nop
 8012688:	bf00      	nop
 801268a:	e7fd      	b.n	8012688 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801268c:	f001 fb7e 	bl	8013d8c <xTaskGetSchedulerState>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d102      	bne.n	801269c <xQueueGenericSend+0xa4>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d101      	bne.n	80126a0 <xQueueGenericSend+0xa8>
 801269c:	2301      	movs	r3, #1
 801269e:	e000      	b.n	80126a2 <xQueueGenericSend+0xaa>
 80126a0:	2300      	movs	r3, #0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10b      	bne.n	80126be <xQueueGenericSend+0xc6>
	__asm volatile
 80126a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126aa:	f383 8811 	msr	BASEPRI, r3
 80126ae:	f3bf 8f6f 	isb	sy
 80126b2:	f3bf 8f4f 	dsb	sy
 80126b6:	61fb      	str	r3, [r7, #28]
}
 80126b8:	bf00      	nop
 80126ba:	bf00      	nop
 80126bc:	e7fd      	b.n	80126ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126be:	f002 f9d3 	bl	8014a68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80126c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d302      	bcc.n	80126d4 <xQueueGenericSend+0xdc>
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	d129      	bne.n	8012728 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	68b9      	ldr	r1, [r7, #8]
 80126d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80126da:	f000 fbc7 	bl	8012e6c <prvCopyDataToQueue>
 80126de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d010      	beq.n	801270a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126ea:	3324      	adds	r3, #36	@ 0x24
 80126ec:	4618      	mov	r0, r3
 80126ee:	f001 f987 	bl	8013a00 <xTaskRemoveFromEventList>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d013      	beq.n	8012720 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80126f8:	4b3f      	ldr	r3, [pc, #252]	@ (80127f8 <xQueueGenericSend+0x200>)
 80126fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126fe:	601a      	str	r2, [r3, #0]
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	f3bf 8f6f 	isb	sy
 8012708:	e00a      	b.n	8012720 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270c:	2b00      	cmp	r3, #0
 801270e:	d007      	beq.n	8012720 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012710:	4b39      	ldr	r3, [pc, #228]	@ (80127f8 <xQueueGenericSend+0x200>)
 8012712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012720:	f002 f9d4 	bl	8014acc <vPortExitCritical>
				return pdPASS;
 8012724:	2301      	movs	r3, #1
 8012726:	e063      	b.n	80127f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d103      	bne.n	8012736 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801272e:	f002 f9cd 	bl	8014acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012732:	2300      	movs	r3, #0
 8012734:	e05c      	b.n	80127f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012738:	2b00      	cmp	r3, #0
 801273a:	d106      	bne.n	801274a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801273c:	f107 0314 	add.w	r3, r7, #20
 8012740:	4618      	mov	r0, r3
 8012742:	f001 f9c1 	bl	8013ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012746:	2301      	movs	r3, #1
 8012748:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801274a:	f002 f9bf 	bl	8014acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801274e:	f000 ff29 	bl	80135a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012752:	f002 f989 	bl	8014a68 <vPortEnterCritical>
 8012756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801275c:	b25b      	sxtb	r3, r3
 801275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012762:	d103      	bne.n	801276c <xQueueGenericSend+0x174>
 8012764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012766:	2200      	movs	r2, #0
 8012768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801276e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012772:	b25b      	sxtb	r3, r3
 8012774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012778:	d103      	bne.n	8012782 <xQueueGenericSend+0x18a>
 801277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277c:	2200      	movs	r2, #0
 801277e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012782:	f002 f9a3 	bl	8014acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012786:	1d3a      	adds	r2, r7, #4
 8012788:	f107 0314 	add.w	r3, r7, #20
 801278c:	4611      	mov	r1, r2
 801278e:	4618      	mov	r0, r3
 8012790:	f001 f9b0 	bl	8013af4 <xTaskCheckForTimeOut>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d124      	bne.n	80127e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801279a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801279c:	f000 fc5e 	bl	801305c <prvIsQueueFull>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d018      	beq.n	80127d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80127a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a8:	3310      	adds	r3, #16
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4611      	mov	r1, r2
 80127ae:	4618      	mov	r0, r3
 80127b0:	f001 f8d4 	bl	801395c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80127b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127b6:	f000 fbe9 	bl	8012f8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80127ba:	f000 ff01 	bl	80135c0 <xTaskResumeAll>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f47f af7c 	bne.w	80126be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80127c6:	4b0c      	ldr	r3, [pc, #48]	@ (80127f8 <xQueueGenericSend+0x200>)
 80127c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	f3bf 8f6f 	isb	sy
 80127d6:	e772      	b.n	80126be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80127d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127da:	f000 fbd7 	bl	8012f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80127de:	f000 feef 	bl	80135c0 <xTaskResumeAll>
 80127e2:	e76c      	b.n	80126be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80127e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127e6:	f000 fbd1 	bl	8012f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127ea:	f000 fee9 	bl	80135c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80127ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3738      	adds	r7, #56	@ 0x38
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	e000ed04 	.word	0xe000ed04

080127fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b090      	sub	sp, #64	@ 0x40
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012810:	2b00      	cmp	r3, #0
 8012812:	d10b      	bne.n	801282c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012826:	bf00      	nop
 8012828:	bf00      	nop
 801282a:	e7fd      	b.n	8012828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d103      	bne.n	801283a <xQueueGenericSendFromISR+0x3e>
 8012832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012836:	2b00      	cmp	r3, #0
 8012838:	d101      	bne.n	801283e <xQueueGenericSendFromISR+0x42>
 801283a:	2301      	movs	r3, #1
 801283c:	e000      	b.n	8012840 <xQueueGenericSendFromISR+0x44>
 801283e:	2300      	movs	r3, #0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d10b      	bne.n	801285c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012848:	f383 8811 	msr	BASEPRI, r3
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	f3bf 8f4f 	dsb	sy
 8012854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012856:	bf00      	nop
 8012858:	bf00      	nop
 801285a:	e7fd      	b.n	8012858 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	2b02      	cmp	r3, #2
 8012860:	d103      	bne.n	801286a <xQueueGenericSendFromISR+0x6e>
 8012862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012866:	2b01      	cmp	r3, #1
 8012868:	d101      	bne.n	801286e <xQueueGenericSendFromISR+0x72>
 801286a:	2301      	movs	r3, #1
 801286c:	e000      	b.n	8012870 <xQueueGenericSendFromISR+0x74>
 801286e:	2300      	movs	r3, #0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10b      	bne.n	801288c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	623b      	str	r3, [r7, #32]
}
 8012886:	bf00      	nop
 8012888:	bf00      	nop
 801288a:	e7fd      	b.n	8012888 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801288c:	f002 f9cc 	bl	8014c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012890:	f3ef 8211 	mrs	r2, BASEPRI
 8012894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	61fa      	str	r2, [r7, #28]
 80128a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80128a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80128ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80128b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d302      	bcc.n	80128be <xQueueGenericSendFromISR+0xc2>
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	2b02      	cmp	r3, #2
 80128bc:	d12f      	bne.n	801291e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80128c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80128cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80128ce:	683a      	ldr	r2, [r7, #0]
 80128d0:	68b9      	ldr	r1, [r7, #8]
 80128d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80128d4:	f000 faca 	bl	8012e6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80128dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128e0:	d112      	bne.n	8012908 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d016      	beq.n	8012918 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ec:	3324      	adds	r3, #36	@ 0x24
 80128ee:	4618      	mov	r0, r3
 80128f0:	f001 f886 	bl	8013a00 <xTaskRemoveFromEventList>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00e      	beq.n	8012918 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d00b      	beq.n	8012918 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	e007      	b.n	8012918 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012908:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801290c:	3301      	adds	r3, #1
 801290e:	b2db      	uxtb	r3, r3
 8012910:	b25a      	sxtb	r2, r3
 8012912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012918:	2301      	movs	r3, #1
 801291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801291c:	e001      	b.n	8012922 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801291e:	2300      	movs	r3, #0
 8012920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012924:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801292c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801292e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012930:	4618      	mov	r0, r3
 8012932:	3740      	adds	r7, #64	@ 0x40
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08e      	sub	sp, #56	@ 0x38
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012948:	2b00      	cmp	r3, #0
 801294a:	d10b      	bne.n	8012964 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801294c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012950:	f383 8811 	msr	BASEPRI, r3
 8012954:	f3bf 8f6f 	isb	sy
 8012958:	f3bf 8f4f 	dsb	sy
 801295c:	623b      	str	r3, [r7, #32]
}
 801295e:	bf00      	nop
 8012960:	bf00      	nop
 8012962:	e7fd      	b.n	8012960 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012968:	2b00      	cmp	r3, #0
 801296a:	d00b      	beq.n	8012984 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801296c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012970:	f383 8811 	msr	BASEPRI, r3
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	61fb      	str	r3, [r7, #28]
}
 801297e:	bf00      	nop
 8012980:	bf00      	nop
 8012982:	e7fd      	b.n	8012980 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d103      	bne.n	8012994 <xQueueGiveFromISR+0x5c>
 801298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d101      	bne.n	8012998 <xQueueGiveFromISR+0x60>
 8012994:	2301      	movs	r3, #1
 8012996:	e000      	b.n	801299a <xQueueGiveFromISR+0x62>
 8012998:	2300      	movs	r3, #0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d10b      	bne.n	80129b6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801299e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129a2:	f383 8811 	msr	BASEPRI, r3
 80129a6:	f3bf 8f6f 	isb	sy
 80129aa:	f3bf 8f4f 	dsb	sy
 80129ae:	61bb      	str	r3, [r7, #24]
}
 80129b0:	bf00      	nop
 80129b2:	bf00      	nop
 80129b4:	e7fd      	b.n	80129b2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129b6:	f002 f937 	bl	8014c28 <vPortValidateInterruptPriority>
	__asm volatile
 80129ba:	f3ef 8211 	mrs	r2, BASEPRI
 80129be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	617a      	str	r2, [r7, #20]
 80129d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80129d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80129dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d22b      	bcs.n	8012a3e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80129e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80129ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80129f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80129f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80129fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a00:	d112      	bne.n	8012a28 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d016      	beq.n	8012a38 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a0c:	3324      	adds	r3, #36	@ 0x24
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f000 fff6 	bl	8013a00 <xTaskRemoveFromEventList>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00e      	beq.n	8012a38 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d00b      	beq.n	8012a38 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	2201      	movs	r2, #1
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	e007      	b.n	8012a38 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	b25a      	sxtb	r2, r3
 8012a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a3c:	e001      	b.n	8012a42 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	f383 8811 	msr	BASEPRI, r3
}
 8012a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3738      	adds	r7, #56	@ 0x38
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b08c      	sub	sp, #48	@ 0x30
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012a64:	2300      	movs	r3, #0
 8012a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d10b      	bne.n	8012a8a <xQueueReceive+0x32>
	__asm volatile
 8012a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a76:	f383 8811 	msr	BASEPRI, r3
 8012a7a:	f3bf 8f6f 	isb	sy
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	623b      	str	r3, [r7, #32]
}
 8012a84:	bf00      	nop
 8012a86:	bf00      	nop
 8012a88:	e7fd      	b.n	8012a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d103      	bne.n	8012a98 <xQueueReceive+0x40>
 8012a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d101      	bne.n	8012a9c <xQueueReceive+0x44>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e000      	b.n	8012a9e <xQueueReceive+0x46>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d10b      	bne.n	8012aba <xQueueReceive+0x62>
	__asm volatile
 8012aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa6:	f383 8811 	msr	BASEPRI, r3
 8012aaa:	f3bf 8f6f 	isb	sy
 8012aae:	f3bf 8f4f 	dsb	sy
 8012ab2:	61fb      	str	r3, [r7, #28]
}
 8012ab4:	bf00      	nop
 8012ab6:	bf00      	nop
 8012ab8:	e7fd      	b.n	8012ab6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012aba:	f001 f967 	bl	8013d8c <xTaskGetSchedulerState>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d102      	bne.n	8012aca <xQueueReceive+0x72>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d101      	bne.n	8012ace <xQueueReceive+0x76>
 8012aca:	2301      	movs	r3, #1
 8012acc:	e000      	b.n	8012ad0 <xQueueReceive+0x78>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d10b      	bne.n	8012aec <xQueueReceive+0x94>
	__asm volatile
 8012ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ad8:	f383 8811 	msr	BASEPRI, r3
 8012adc:	f3bf 8f6f 	isb	sy
 8012ae0:	f3bf 8f4f 	dsb	sy
 8012ae4:	61bb      	str	r3, [r7, #24]
}
 8012ae6:	bf00      	nop
 8012ae8:	bf00      	nop
 8012aea:	e7fd      	b.n	8012ae8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012aec:	f001 ffbc 	bl	8014a68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d01f      	beq.n	8012b3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b00:	f000 fa1e 	bl	8012f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b06:	1e5a      	subs	r2, r3, #1
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00f      	beq.n	8012b34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b16:	3310      	adds	r3, #16
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f000 ff71 	bl	8013a00 <xTaskRemoveFromEventList>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d007      	beq.n	8012b34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012b24:	4b3c      	ldr	r3, [pc, #240]	@ (8012c18 <xQueueReceive+0x1c0>)
 8012b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b2a:	601a      	str	r2, [r3, #0]
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012b34:	f001 ffca 	bl	8014acc <vPortExitCritical>
				return pdPASS;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e069      	b.n	8012c10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d103      	bne.n	8012b4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b42:	f001 ffc3 	bl	8014acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012b46:	2300      	movs	r3, #0
 8012b48:	e062      	b.n	8012c10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b50:	f107 0310 	add.w	r3, r7, #16
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 ffb7 	bl	8013ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b5e:	f001 ffb5 	bl	8014acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b62:	f000 fd1f 	bl	80135a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b66:	f001 ff7f 	bl	8014a68 <vPortEnterCritical>
 8012b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012b70:	b25b      	sxtb	r3, r3
 8012b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b76:	d103      	bne.n	8012b80 <xQueueReceive+0x128>
 8012b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012b86:	b25b      	sxtb	r3, r3
 8012b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b8c:	d103      	bne.n	8012b96 <xQueueReceive+0x13e>
 8012b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b90:	2200      	movs	r2, #0
 8012b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b96:	f001 ff99 	bl	8014acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b9a:	1d3a      	adds	r2, r7, #4
 8012b9c:	f107 0310 	add.w	r3, r7, #16
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f000 ffa6 	bl	8013af4 <xTaskCheckForTimeOut>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d123      	bne.n	8012bf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bb0:	f000 fa3e 	bl	8013030 <prvIsQueueEmpty>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d017      	beq.n	8012bea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bbc:	3324      	adds	r3, #36	@ 0x24
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f000 feca 	bl	801395c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bca:	f000 f9df 	bl	8012f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012bce:	f000 fcf7 	bl	80135c0 <xTaskResumeAll>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d189      	bne.n	8012aec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8012c18 <xQueueReceive+0x1c0>)
 8012bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bde:	601a      	str	r2, [r3, #0]
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	f3bf 8f6f 	isb	sy
 8012be8:	e780      	b.n	8012aec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bec:	f000 f9ce 	bl	8012f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bf0:	f000 fce6 	bl	80135c0 <xTaskResumeAll>
 8012bf4:	e77a      	b.n	8012aec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bf8:	f000 f9c8 	bl	8012f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bfc:	f000 fce0 	bl	80135c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c02:	f000 fa15 	bl	8013030 <prvIsQueueEmpty>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f43f af6f 	beq.w	8012aec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3730      	adds	r7, #48	@ 0x30
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	e000ed04 	.word	0xe000ed04

08012c1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b08e      	sub	sp, #56	@ 0x38
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c26:	2300      	movs	r3, #0
 8012c28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d10b      	bne.n	8012c50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c3c:	f383 8811 	msr	BASEPRI, r3
 8012c40:	f3bf 8f6f 	isb	sy
 8012c44:	f3bf 8f4f 	dsb	sy
 8012c48:	623b      	str	r3, [r7, #32]
}
 8012c4a:	bf00      	nop
 8012c4c:	bf00      	nop
 8012c4e:	e7fd      	b.n	8012c4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c5c:	f383 8811 	msr	BASEPRI, r3
 8012c60:	f3bf 8f6f 	isb	sy
 8012c64:	f3bf 8f4f 	dsb	sy
 8012c68:	61fb      	str	r3, [r7, #28]
}
 8012c6a:	bf00      	nop
 8012c6c:	bf00      	nop
 8012c6e:	e7fd      	b.n	8012c6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c70:	f001 f88c 	bl	8013d8c <xTaskGetSchedulerState>
 8012c74:	4603      	mov	r3, r0
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d102      	bne.n	8012c80 <xQueueSemaphoreTake+0x64>
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d101      	bne.n	8012c84 <xQueueSemaphoreTake+0x68>
 8012c80:	2301      	movs	r3, #1
 8012c82:	e000      	b.n	8012c86 <xQueueSemaphoreTake+0x6a>
 8012c84:	2300      	movs	r3, #0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10b      	bne.n	8012ca2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c8e:	f383 8811 	msr	BASEPRI, r3
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	f3bf 8f4f 	dsb	sy
 8012c9a:	61bb      	str	r3, [r7, #24]
}
 8012c9c:	bf00      	nop
 8012c9e:	bf00      	nop
 8012ca0:	e7fd      	b.n	8012c9e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ca2:	f001 fee1 	bl	8014a68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012caa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d024      	beq.n	8012cfc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cb4:	1e5a      	subs	r2, r3, #1
 8012cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d104      	bne.n	8012ccc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012cc2:	f001 f9dd 	bl	8014080 <pvTaskIncrementMutexHeldCount>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d00f      	beq.n	8012cf4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cd6:	3310      	adds	r3, #16
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f000 fe91 	bl	8013a00 <xTaskRemoveFromEventList>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d007      	beq.n	8012cf4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012ce4:	4b54      	ldr	r3, [pc, #336]	@ (8012e38 <xQueueSemaphoreTake+0x21c>)
 8012ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cea:	601a      	str	r2, [r3, #0]
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012cf4:	f001 feea 	bl	8014acc <vPortExitCritical>
				return pdPASS;
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e098      	b.n	8012e2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012cfc:	683b      	ldr	r3, [r7, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d112      	bne.n	8012d28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d00b      	beq.n	8012d20 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d0c:	f383 8811 	msr	BASEPRI, r3
 8012d10:	f3bf 8f6f 	isb	sy
 8012d14:	f3bf 8f4f 	dsb	sy
 8012d18:	617b      	str	r3, [r7, #20]
}
 8012d1a:	bf00      	nop
 8012d1c:	bf00      	nop
 8012d1e:	e7fd      	b.n	8012d1c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012d20:	f001 fed4 	bl	8014acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012d24:	2300      	movs	r3, #0
 8012d26:	e082      	b.n	8012e2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d106      	bne.n	8012d3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d2e:	f107 030c 	add.w	r3, r7, #12
 8012d32:	4618      	mov	r0, r3
 8012d34:	f000 fec8 	bl	8013ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d3c:	f001 fec6 	bl	8014acc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d40:	f000 fc30 	bl	80135a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d44:	f001 fe90 	bl	8014a68 <vPortEnterCritical>
 8012d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012d4e:	b25b      	sxtb	r3, r3
 8012d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d54:	d103      	bne.n	8012d5e <xQueueSemaphoreTake+0x142>
 8012d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012d64:	b25b      	sxtb	r3, r3
 8012d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d6a:	d103      	bne.n	8012d74 <xQueueSemaphoreTake+0x158>
 8012d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d6e:	2200      	movs	r2, #0
 8012d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012d74:	f001 feaa 	bl	8014acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d78:	463a      	mov	r2, r7
 8012d7a:	f107 030c 	add.w	r3, r7, #12
 8012d7e:	4611      	mov	r1, r2
 8012d80:	4618      	mov	r0, r3
 8012d82:	f000 feb7 	bl	8013af4 <xTaskCheckForTimeOut>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d132      	bne.n	8012df2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012d8e:	f000 f94f 	bl	8013030 <prvIsQueueEmpty>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d026      	beq.n	8012de6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d109      	bne.n	8012db4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012da0:	f001 fe62 	bl	8014a68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da6:	689b      	ldr	r3, [r3, #8]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f001 f80d 	bl	8013dc8 <xTaskPriorityInherit>
 8012dae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012db0:	f001 fe8c 	bl	8014acc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012db6:	3324      	adds	r3, #36	@ 0x24
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	4611      	mov	r1, r2
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f000 fdcd 	bl	801395c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dc4:	f000 f8e2 	bl	8012f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012dc8:	f000 fbfa 	bl	80135c0 <xTaskResumeAll>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f47f af67 	bne.w	8012ca2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012dd4:	4b18      	ldr	r3, [pc, #96]	@ (8012e38 <xQueueSemaphoreTake+0x21c>)
 8012dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dda:	601a      	str	r2, [r3, #0]
 8012ddc:	f3bf 8f4f 	dsb	sy
 8012de0:	f3bf 8f6f 	isb	sy
 8012de4:	e75d      	b.n	8012ca2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012de8:	f000 f8d0 	bl	8012f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012dec:	f000 fbe8 	bl	80135c0 <xTaskResumeAll>
 8012df0:	e757      	b.n	8012ca2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012df2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012df4:	f000 f8ca 	bl	8012f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012df8:	f000 fbe2 	bl	80135c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dfe:	f000 f917 	bl	8013030 <prvIsQueueEmpty>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	f43f af4c 	beq.w	8012ca2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00d      	beq.n	8012e2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012e10:	f001 fe2a 	bl	8014a68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012e16:	f000 f811 	bl	8012e3c <prvGetDisinheritPriorityAfterTimeout>
 8012e1a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e22:	4618      	mov	r0, r3
 8012e24:	f001 f8a8 	bl	8013f78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012e28:	f001 fe50 	bl	8014acc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3738      	adds	r7, #56	@ 0x38
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	e000ed04 	.word	0xe000ed04

08012e3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b085      	sub	sp, #20
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d006      	beq.n	8012e5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8012e56:	60fb      	str	r3, [r7, #12]
 8012e58:	e001      	b.n	8012e5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3714      	adds	r7, #20
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b086      	sub	sp, #24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10d      	bne.n	8012ea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d14d      	bne.n	8012f2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	689b      	ldr	r3, [r3, #8]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f000 fffe 	bl	8013e98 <xTaskPriorityDisinherit>
 8012e9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	609a      	str	r2, [r3, #8]
 8012ea4:	e043      	b.n	8012f2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d119      	bne.n	8012ee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	6858      	ldr	r0, [r3, #4]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	68b9      	ldr	r1, [r7, #8]
 8012eb8:	f002 ffb5 	bl	8015e26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	685a      	ldr	r2, [r3, #4]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ec4:	441a      	add	r2, r3
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	685a      	ldr	r2, [r3, #4]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	689b      	ldr	r3, [r3, #8]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d32b      	bcc.n	8012f2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	605a      	str	r2, [r3, #4]
 8012ede:	e026      	b.n	8012f2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	68d8      	ldr	r0, [r3, #12]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ee8:	461a      	mov	r2, r3
 8012eea:	68b9      	ldr	r1, [r7, #8]
 8012eec:	f002 ff9b 	bl	8015e26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68da      	ldr	r2, [r3, #12]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ef8:	425b      	negs	r3, r3
 8012efa:	441a      	add	r2, r3
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	68da      	ldr	r2, [r3, #12]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d207      	bcs.n	8012f1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	689a      	ldr	r2, [r3, #8]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f14:	425b      	negs	r3, r3
 8012f16:	441a      	add	r2, r3
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	d105      	bne.n	8012f2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d002      	beq.n	8012f2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012f36:	697b      	ldr	r3, [r7, #20]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3718      	adds	r7, #24
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d018      	beq.n	8012f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	68da      	ldr	r2, [r3, #12]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f5a:	441a      	add	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	68da      	ldr	r2, [r3, #12]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d303      	bcc.n	8012f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	68d9      	ldr	r1, [r3, #12]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	6838      	ldr	r0, [r7, #0]
 8012f80:	f002 ff51 	bl	8015e26 <memcpy>
	}
}
 8012f84:	bf00      	nop
 8012f86:	3708      	adds	r7, #8
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012f94:	f001 fd68 	bl	8014a68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fa0:	e011      	b.n	8012fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d012      	beq.n	8012fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	3324      	adds	r3, #36	@ 0x24
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f000 fd26 	bl	8013a00 <xTaskRemoveFromEventList>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d001      	beq.n	8012fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fba:	f000 fdff 	bl	8013bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
 8012fc0:	3b01      	subs	r3, #1
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	dce9      	bgt.n	8012fa2 <prvUnlockQueue+0x16>
 8012fce:	e000      	b.n	8012fd2 <prvUnlockQueue+0x46>
					break;
 8012fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	22ff      	movs	r2, #255	@ 0xff
 8012fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012fda:	f001 fd77 	bl	8014acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012fde:	f001 fd43 	bl	8014a68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fea:	e011      	b.n	8013010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d012      	beq.n	801301a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	3310      	adds	r3, #16
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 fd01 	bl	8013a00 <xTaskRemoveFromEventList>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013004:	f000 fdda 	bl	8013bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013008:	7bbb      	ldrb	r3, [r7, #14]
 801300a:	3b01      	subs	r3, #1
 801300c:	b2db      	uxtb	r3, r3
 801300e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013014:	2b00      	cmp	r3, #0
 8013016:	dce9      	bgt.n	8012fec <prvUnlockQueue+0x60>
 8013018:	e000      	b.n	801301c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801301a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	22ff      	movs	r2, #255	@ 0xff
 8013020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013024:	f001 fd52 	bl	8014acc <vPortExitCritical>
}
 8013028:	bf00      	nop
 801302a:	3710      	adds	r7, #16
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013038:	f001 fd16 	bl	8014a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013040:	2b00      	cmp	r3, #0
 8013042:	d102      	bne.n	801304a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013044:	2301      	movs	r3, #1
 8013046:	60fb      	str	r3, [r7, #12]
 8013048:	e001      	b.n	801304e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801304a:	2300      	movs	r3, #0
 801304c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801304e:	f001 fd3d 	bl	8014acc <vPortExitCritical>

	return xReturn;
 8013052:	68fb      	ldr	r3, [r7, #12]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013064:	f001 fd00 	bl	8014a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013070:	429a      	cmp	r2, r3
 8013072:	d102      	bne.n	801307a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013074:	2301      	movs	r3, #1
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	e001      	b.n	801307e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801307a:	2300      	movs	r3, #0
 801307c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801307e:	f001 fd25 	bl	8014acc <vPortExitCritical>

	return xReturn;
 8013082:	68fb      	ldr	r3, [r7, #12]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013096:	2300      	movs	r3, #0
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	e014      	b.n	80130c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801309c:	4a0f      	ldr	r2, [pc, #60]	@ (80130dc <vQueueAddToRegistry+0x50>)
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10b      	bne.n	80130c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80130a8:	490c      	ldr	r1, [pc, #48]	@ (80130dc <vQueueAddToRegistry+0x50>)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80130b2:	4a0a      	ldr	r2, [pc, #40]	@ (80130dc <vQueueAddToRegistry+0x50>)
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	4413      	add	r3, r2
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80130be:	e006      	b.n	80130ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	3301      	adds	r3, #1
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b07      	cmp	r3, #7
 80130ca:	d9e7      	bls.n	801309c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80130cc:	bf00      	nop
 80130ce:	bf00      	nop
 80130d0:	3714      	adds	r7, #20
 80130d2:	46bd      	mov	sp, r7
 80130d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d8:	4770      	bx	lr
 80130da:	bf00      	nop
 80130dc:	2400180c 	.word	0x2400180c

080130e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b086      	sub	sp, #24
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	60f8      	str	r0, [r7, #12]
 80130e8:	60b9      	str	r1, [r7, #8]
 80130ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80130f0:	f001 fcba 	bl	8014a68 <vPortEnterCritical>
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80130fa:	b25b      	sxtb	r3, r3
 80130fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013100:	d103      	bne.n	801310a <vQueueWaitForMessageRestricted+0x2a>
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	2200      	movs	r2, #0
 8013106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013110:	b25b      	sxtb	r3, r3
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013116:	d103      	bne.n	8013120 <vQueueWaitForMessageRestricted+0x40>
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2200      	movs	r2, #0
 801311c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013120:	f001 fcd4 	bl	8014acc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013128:	2b00      	cmp	r3, #0
 801312a:	d106      	bne.n	801313a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	3324      	adds	r3, #36	@ 0x24
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	68b9      	ldr	r1, [r7, #8]
 8013134:	4618      	mov	r0, r3
 8013136:	f000 fc37 	bl	80139a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801313a:	6978      	ldr	r0, [r7, #20]
 801313c:	f7ff ff26 	bl	8012f8c <prvUnlockQueue>
	}
 8013140:	bf00      	nop
 8013142:	3718      	adds	r7, #24
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013148:	b580      	push	{r7, lr}
 801314a:	b08e      	sub	sp, #56	@ 0x38
 801314c:	af04      	add	r7, sp, #16
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
 8013154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013158:	2b00      	cmp	r3, #0
 801315a:	d10b      	bne.n	8013174 <xTaskCreateStatic+0x2c>
	__asm volatile
 801315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	623b      	str	r3, [r7, #32]
}
 801316e:	bf00      	nop
 8013170:	bf00      	nop
 8013172:	e7fd      	b.n	8013170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013176:	2b00      	cmp	r3, #0
 8013178:	d10b      	bne.n	8013192 <xTaskCreateStatic+0x4a>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801317e:	f383 8811 	msr	BASEPRI, r3
 8013182:	f3bf 8f6f 	isb	sy
 8013186:	f3bf 8f4f 	dsb	sy
 801318a:	61fb      	str	r3, [r7, #28]
}
 801318c:	bf00      	nop
 801318e:	bf00      	nop
 8013190:	e7fd      	b.n	801318e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013192:	23a8      	movs	r3, #168	@ 0xa8
 8013194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	2ba8      	cmp	r3, #168	@ 0xa8
 801319a:	d00b      	beq.n	80131b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 801319c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131a0:	f383 8811 	msr	BASEPRI, r3
 80131a4:	f3bf 8f6f 	isb	sy
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	61bb      	str	r3, [r7, #24]
}
 80131ae:	bf00      	nop
 80131b0:	bf00      	nop
 80131b2:	e7fd      	b.n	80131b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80131b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80131b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d01e      	beq.n	80131fa <xTaskCreateStatic+0xb2>
 80131bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d01b      	beq.n	80131fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80131c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80131cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ce:	2202      	movs	r2, #2
 80131d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80131d4:	2300      	movs	r3, #0
 80131d6:	9303      	str	r3, [sp, #12]
 80131d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131da:	9302      	str	r3, [sp, #8]
 80131dc:	f107 0314 	add.w	r3, r7, #20
 80131e0:	9301      	str	r3, [sp, #4]
 80131e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	687a      	ldr	r2, [r7, #4]
 80131ea:	68b9      	ldr	r1, [r7, #8]
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f000 f851 	bl	8013294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80131f4:	f000 f8f6 	bl	80133e4 <prvAddNewTaskToReadyList>
 80131f8:	e001      	b.n	80131fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80131fe:	697b      	ldr	r3, [r7, #20]
	}
 8013200:	4618      	mov	r0, r3
 8013202:	3728      	adds	r7, #40	@ 0x28
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013208:	b580      	push	{r7, lr}
 801320a:	b08c      	sub	sp, #48	@ 0x30
 801320c:	af04      	add	r7, sp, #16
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	60b9      	str	r1, [r7, #8]
 8013212:	603b      	str	r3, [r7, #0]
 8013214:	4613      	mov	r3, r2
 8013216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013218:	88fb      	ldrh	r3, [r7, #6]
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4618      	mov	r0, r3
 801321e:	f001 fd45 	bl	8014cac <pvPortMalloc>
 8013222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00e      	beq.n	8013248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801322a:	20a8      	movs	r0, #168	@ 0xa8
 801322c:	f001 fd3e 	bl	8014cac <pvPortMalloc>
 8013230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	631a      	str	r2, [r3, #48]	@ 0x30
 801323e:	e005      	b.n	801324c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013240:	6978      	ldr	r0, [r7, #20]
 8013242:	f001 fe01 	bl	8014e48 <vPortFree>
 8013246:	e001      	b.n	801324c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013248:	2300      	movs	r3, #0
 801324a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d017      	beq.n	8013282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801325a:	88fa      	ldrh	r2, [r7, #6]
 801325c:	2300      	movs	r3, #0
 801325e:	9303      	str	r3, [sp, #12]
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	9302      	str	r3, [sp, #8]
 8013264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013266:	9301      	str	r3, [sp, #4]
 8013268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326a:	9300      	str	r3, [sp, #0]
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	68b9      	ldr	r1, [r7, #8]
 8013270:	68f8      	ldr	r0, [r7, #12]
 8013272:	f000 f80f 	bl	8013294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013276:	69f8      	ldr	r0, [r7, #28]
 8013278:	f000 f8b4 	bl	80133e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801327c:	2301      	movs	r3, #1
 801327e:	61bb      	str	r3, [r7, #24]
 8013280:	e002      	b.n	8013288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013282:	f04f 33ff 	mov.w	r3, #4294967295
 8013286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013288:	69bb      	ldr	r3, [r7, #24]
	}
 801328a:	4618      	mov	r0, r3
 801328c:	3720      	adds	r7, #32
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
	...

08013294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b088      	sub	sp, #32
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
 80132a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80132a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	461a      	mov	r2, r3
 80132ac:	21a5      	movs	r1, #165	@ 0xa5
 80132ae:	f002 fcdd 	bl	8015c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80132b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80132b6:	6879      	ldr	r1, [r7, #4]
 80132b8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80132bc:	440b      	add	r3, r1
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	4413      	add	r3, r2
 80132c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	f023 0307 	bic.w	r3, r3, #7
 80132ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	f003 0307 	and.w	r3, r3, #7
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00b      	beq.n	80132ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	617b      	str	r3, [r7, #20]
}
 80132e8:	bf00      	nop
 80132ea:	bf00      	nop
 80132ec:	e7fd      	b.n	80132ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d01f      	beq.n	8013334 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80132f4:	2300      	movs	r3, #0
 80132f6:	61fb      	str	r3, [r7, #28]
 80132f8:	e012      	b.n	8013320 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	4413      	add	r3, r2
 8013300:	7819      	ldrb	r1, [r3, #0]
 8013302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	4413      	add	r3, r2
 8013308:	3334      	adds	r3, #52	@ 0x34
 801330a:	460a      	mov	r2, r1
 801330c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	4413      	add	r3, r2
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d006      	beq.n	8013328 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	3301      	adds	r3, #1
 801331e:	61fb      	str	r3, [r7, #28]
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	2b0f      	cmp	r3, #15
 8013324:	d9e9      	bls.n	80132fa <prvInitialiseNewTask+0x66>
 8013326:	e000      	b.n	801332a <prvInitialiseNewTask+0x96>
			{
				break;
 8013328:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801332c:	2200      	movs	r2, #0
 801332e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013332:	e003      	b.n	801333c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013336:	2200      	movs	r2, #0
 8013338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333e:	2b37      	cmp	r3, #55	@ 0x37
 8013340:	d901      	bls.n	8013346 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013342:	2337      	movs	r3, #55	@ 0x37
 8013344:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801334a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013350:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013354:	2200      	movs	r2, #0
 8013356:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335a:	3304      	adds	r3, #4
 801335c:	4618      	mov	r0, r3
 801335e:	f7fe ffad 	bl	80122bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013364:	3318      	adds	r3, #24
 8013366:	4618      	mov	r0, r3
 8013368:	f7fe ffa8 	bl	80122bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013370:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013374:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013380:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013384:	2200      	movs	r2, #0
 8013386:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338c:	2200      	movs	r2, #0
 801338e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013394:	3354      	adds	r3, #84	@ 0x54
 8013396:	224c      	movs	r2, #76	@ 0x4c
 8013398:	2100      	movs	r1, #0
 801339a:	4618      	mov	r0, r3
 801339c:	f002 fc66 	bl	8015c6c <memset>
 80133a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a2:	4a0d      	ldr	r2, [pc, #52]	@ (80133d8 <prvInitialiseNewTask+0x144>)
 80133a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80133a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a8:	4a0c      	ldr	r2, [pc, #48]	@ (80133dc <prvInitialiseNewTask+0x148>)
 80133aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80133ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ae:	4a0c      	ldr	r2, [pc, #48]	@ (80133e0 <prvInitialiseNewTask+0x14c>)
 80133b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80133b2:	683a      	ldr	r2, [r7, #0]
 80133b4:	68f9      	ldr	r1, [r7, #12]
 80133b6:	69b8      	ldr	r0, [r7, #24]
 80133b8:	f001 fa24 	bl	8014804 <pxPortInitialiseStack>
 80133bc:	4602      	mov	r2, r0
 80133be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80133c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d002      	beq.n	80133ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80133c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133ce:	bf00      	nop
 80133d0:	3720      	adds	r7, #32
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	24005aa0 	.word	0x24005aa0
 80133dc:	24005b08 	.word	0x24005b08
 80133e0:	24005b70 	.word	0x24005b70

080133e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80133ec:	f001 fb3c 	bl	8014a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80133f0:	4b2d      	ldr	r3, [pc, #180]	@ (80134a8 <prvAddNewTaskToReadyList+0xc4>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	3301      	adds	r3, #1
 80133f6:	4a2c      	ldr	r2, [pc, #176]	@ (80134a8 <prvAddNewTaskToReadyList+0xc4>)
 80133f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80133fa:	4b2c      	ldr	r3, [pc, #176]	@ (80134ac <prvAddNewTaskToReadyList+0xc8>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d109      	bne.n	8013416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013402:	4a2a      	ldr	r2, [pc, #168]	@ (80134ac <prvAddNewTaskToReadyList+0xc8>)
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013408:	4b27      	ldr	r3, [pc, #156]	@ (80134a8 <prvAddNewTaskToReadyList+0xc4>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d110      	bne.n	8013432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013410:	f000 fbf8 	bl	8013c04 <prvInitialiseTaskLists>
 8013414:	e00d      	b.n	8013432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013416:	4b26      	ldr	r3, [pc, #152]	@ (80134b0 <prvAddNewTaskToReadyList+0xcc>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d109      	bne.n	8013432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801341e:	4b23      	ldr	r3, [pc, #140]	@ (80134ac <prvAddNewTaskToReadyList+0xc8>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013428:	429a      	cmp	r2, r3
 801342a:	d802      	bhi.n	8013432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801342c:	4a1f      	ldr	r2, [pc, #124]	@ (80134ac <prvAddNewTaskToReadyList+0xc8>)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013432:	4b20      	ldr	r3, [pc, #128]	@ (80134b4 <prvAddNewTaskToReadyList+0xd0>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	3301      	adds	r3, #1
 8013438:	4a1e      	ldr	r2, [pc, #120]	@ (80134b4 <prvAddNewTaskToReadyList+0xd0>)
 801343a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801343c:	4b1d      	ldr	r3, [pc, #116]	@ (80134b4 <prvAddNewTaskToReadyList+0xd0>)
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013448:	4b1b      	ldr	r3, [pc, #108]	@ (80134b8 <prvAddNewTaskToReadyList+0xd4>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	429a      	cmp	r2, r3
 801344e:	d903      	bls.n	8013458 <prvAddNewTaskToReadyList+0x74>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013454:	4a18      	ldr	r2, [pc, #96]	@ (80134b8 <prvAddNewTaskToReadyList+0xd4>)
 8013456:	6013      	str	r3, [r2, #0]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801345c:	4613      	mov	r3, r2
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	4413      	add	r3, r2
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	4a15      	ldr	r2, [pc, #84]	@ (80134bc <prvAddNewTaskToReadyList+0xd8>)
 8013466:	441a      	add	r2, r3
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	3304      	adds	r3, #4
 801346c:	4619      	mov	r1, r3
 801346e:	4610      	mov	r0, r2
 8013470:	f7fe ff31 	bl	80122d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013474:	f001 fb2a 	bl	8014acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013478:	4b0d      	ldr	r3, [pc, #52]	@ (80134b0 <prvAddNewTaskToReadyList+0xcc>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00e      	beq.n	801349e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013480:	4b0a      	ldr	r3, [pc, #40]	@ (80134ac <prvAddNewTaskToReadyList+0xc8>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801348a:	429a      	cmp	r2, r3
 801348c:	d207      	bcs.n	801349e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801348e:	4b0c      	ldr	r3, [pc, #48]	@ (80134c0 <prvAddNewTaskToReadyList+0xdc>)
 8013490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	f3bf 8f4f 	dsb	sy
 801349a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}
 80134a6:	bf00      	nop
 80134a8:	24001d20 	.word	0x24001d20
 80134ac:	2400184c 	.word	0x2400184c
 80134b0:	24001d2c 	.word	0x24001d2c
 80134b4:	24001d3c 	.word	0x24001d3c
 80134b8:	24001d28 	.word	0x24001d28
 80134bc:	24001850 	.word	0x24001850
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b08a      	sub	sp, #40	@ 0x28
 80134c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80134ca:	2300      	movs	r3, #0
 80134cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80134d2:	463a      	mov	r2, r7
 80134d4:	1d39      	adds	r1, r7, #4
 80134d6:	f107 0308 	add.w	r3, r7, #8
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fe9a 	bl	8012214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	9202      	str	r2, [sp, #8]
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	2300      	movs	r3, #0
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	2300      	movs	r3, #0
 80134f0:	460a      	mov	r2, r1
 80134f2:	4924      	ldr	r1, [pc, #144]	@ (8013584 <vTaskStartScheduler+0xc0>)
 80134f4:	4824      	ldr	r0, [pc, #144]	@ (8013588 <vTaskStartScheduler+0xc4>)
 80134f6:	f7ff fe27 	bl	8013148 <xTaskCreateStatic>
 80134fa:	4603      	mov	r3, r0
 80134fc:	4a23      	ldr	r2, [pc, #140]	@ (801358c <vTaskStartScheduler+0xc8>)
 80134fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013500:	4b22      	ldr	r3, [pc, #136]	@ (801358c <vTaskStartScheduler+0xc8>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013508:	2301      	movs	r3, #1
 801350a:	617b      	str	r3, [r7, #20]
 801350c:	e001      	b.n	8013512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801350e:	2300      	movs	r3, #0
 8013510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d102      	bne.n	801351e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013518:	f000 fe1a 	bl	8014150 <xTimerCreateTimerTask>
 801351c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	2b01      	cmp	r3, #1
 8013522:	d11b      	bne.n	801355c <vTaskStartScheduler+0x98>
	__asm volatile
 8013524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013528:	f383 8811 	msr	BASEPRI, r3
 801352c:	f3bf 8f6f 	isb	sy
 8013530:	f3bf 8f4f 	dsb	sy
 8013534:	613b      	str	r3, [r7, #16]
}
 8013536:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013538:	4b15      	ldr	r3, [pc, #84]	@ (8013590 <vTaskStartScheduler+0xcc>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	3354      	adds	r3, #84	@ 0x54
 801353e:	4a15      	ldr	r2, [pc, #84]	@ (8013594 <vTaskStartScheduler+0xd0>)
 8013540:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013542:	4b15      	ldr	r3, [pc, #84]	@ (8013598 <vTaskStartScheduler+0xd4>)
 8013544:	f04f 32ff 	mov.w	r2, #4294967295
 8013548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801354a:	4b14      	ldr	r3, [pc, #80]	@ (801359c <vTaskStartScheduler+0xd8>)
 801354c:	2201      	movs	r2, #1
 801354e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013550:	4b13      	ldr	r3, [pc, #76]	@ (80135a0 <vTaskStartScheduler+0xdc>)
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013556:	f001 f9e3 	bl	8014920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801355a:	e00f      	b.n	801357c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013562:	d10b      	bne.n	801357c <vTaskStartScheduler+0xb8>
	__asm volatile
 8013564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013568:	f383 8811 	msr	BASEPRI, r3
 801356c:	f3bf 8f6f 	isb	sy
 8013570:	f3bf 8f4f 	dsb	sy
 8013574:	60fb      	str	r3, [r7, #12]
}
 8013576:	bf00      	nop
 8013578:	bf00      	nop
 801357a:	e7fd      	b.n	8013578 <vTaskStartScheduler+0xb4>
}
 801357c:	bf00      	nop
 801357e:	3718      	adds	r7, #24
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	08017d44 	.word	0x08017d44
 8013588:	08013bd5 	.word	0x08013bd5
 801358c:	24001d44 	.word	0x24001d44
 8013590:	2400184c 	.word	0x2400184c
 8013594:	240000b4 	.word	0x240000b4
 8013598:	24001d40 	.word	0x24001d40
 801359c:	24001d2c 	.word	0x24001d2c
 80135a0:	24001d24 	.word	0x24001d24

080135a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80135a4:	b480      	push	{r7}
 80135a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80135a8:	4b04      	ldr	r3, [pc, #16]	@ (80135bc <vTaskSuspendAll+0x18>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	3301      	adds	r3, #1
 80135ae:	4a03      	ldr	r2, [pc, #12]	@ (80135bc <vTaskSuspendAll+0x18>)
 80135b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80135b2:	bf00      	nop
 80135b4:	46bd      	mov	sp, r7
 80135b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ba:	4770      	bx	lr
 80135bc:	24001d48 	.word	0x24001d48

080135c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80135c6:	2300      	movs	r3, #0
 80135c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80135ca:	2300      	movs	r3, #0
 80135cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80135ce:	4b42      	ldr	r3, [pc, #264]	@ (80136d8 <xTaskResumeAll+0x118>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10b      	bne.n	80135ee <xTaskResumeAll+0x2e>
	__asm volatile
 80135d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	603b      	str	r3, [r7, #0]
}
 80135e8:	bf00      	nop
 80135ea:	bf00      	nop
 80135ec:	e7fd      	b.n	80135ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80135ee:	f001 fa3b 	bl	8014a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80135f2:	4b39      	ldr	r3, [pc, #228]	@ (80136d8 <xTaskResumeAll+0x118>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	3b01      	subs	r3, #1
 80135f8:	4a37      	ldr	r2, [pc, #220]	@ (80136d8 <xTaskResumeAll+0x118>)
 80135fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135fc:	4b36      	ldr	r3, [pc, #216]	@ (80136d8 <xTaskResumeAll+0x118>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d162      	bne.n	80136ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013604:	4b35      	ldr	r3, [pc, #212]	@ (80136dc <xTaskResumeAll+0x11c>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d05e      	beq.n	80136ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801360c:	e02f      	b.n	801366e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801360e:	4b34      	ldr	r3, [pc, #208]	@ (80136e0 <xTaskResumeAll+0x120>)
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	3318      	adds	r3, #24
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe feb8 	bl	8012390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	3304      	adds	r3, #4
 8013624:	4618      	mov	r0, r3
 8013626:	f7fe feb3 	bl	8012390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801362e:	4b2d      	ldr	r3, [pc, #180]	@ (80136e4 <xTaskResumeAll+0x124>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	429a      	cmp	r2, r3
 8013634:	d903      	bls.n	801363e <xTaskResumeAll+0x7e>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801363a:	4a2a      	ldr	r2, [pc, #168]	@ (80136e4 <xTaskResumeAll+0x124>)
 801363c:	6013      	str	r3, [r2, #0]
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013642:	4613      	mov	r3, r2
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	4413      	add	r3, r2
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4a27      	ldr	r2, [pc, #156]	@ (80136e8 <xTaskResumeAll+0x128>)
 801364c:	441a      	add	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	3304      	adds	r3, #4
 8013652:	4619      	mov	r1, r3
 8013654:	4610      	mov	r0, r2
 8013656:	f7fe fe3e 	bl	80122d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801365e:	4b23      	ldr	r3, [pc, #140]	@ (80136ec <xTaskResumeAll+0x12c>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013664:	429a      	cmp	r2, r3
 8013666:	d302      	bcc.n	801366e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013668:	4b21      	ldr	r3, [pc, #132]	@ (80136f0 <xTaskResumeAll+0x130>)
 801366a:	2201      	movs	r2, #1
 801366c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801366e:	4b1c      	ldr	r3, [pc, #112]	@ (80136e0 <xTaskResumeAll+0x120>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d1cb      	bne.n	801360e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d001      	beq.n	8013680 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801367c:	f000 fb66 	bl	8013d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013680:	4b1c      	ldr	r3, [pc, #112]	@ (80136f4 <xTaskResumeAll+0x134>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d010      	beq.n	80136ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801368c:	f000 f846 	bl	801371c <xTaskIncrementTick>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d002      	beq.n	801369c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013696:	4b16      	ldr	r3, [pc, #88]	@ (80136f0 <xTaskResumeAll+0x130>)
 8013698:	2201      	movs	r2, #1
 801369a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3b01      	subs	r3, #1
 80136a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1f1      	bne.n	801368c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80136a8:	4b12      	ldr	r3, [pc, #72]	@ (80136f4 <xTaskResumeAll+0x134>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80136ae:	4b10      	ldr	r3, [pc, #64]	@ (80136f0 <xTaskResumeAll+0x130>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d009      	beq.n	80136ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80136b6:	2301      	movs	r3, #1
 80136b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80136ba:	4b0f      	ldr	r3, [pc, #60]	@ (80136f8 <xTaskResumeAll+0x138>)
 80136bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	f3bf 8f4f 	dsb	sy
 80136c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136ca:	f001 f9ff 	bl	8014acc <vPortExitCritical>

	return xAlreadyYielded;
 80136ce:	68bb      	ldr	r3, [r7, #8]
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	24001d48 	.word	0x24001d48
 80136dc:	24001d20 	.word	0x24001d20
 80136e0:	24001ce0 	.word	0x24001ce0
 80136e4:	24001d28 	.word	0x24001d28
 80136e8:	24001850 	.word	0x24001850
 80136ec:	2400184c 	.word	0x2400184c
 80136f0:	24001d34 	.word	0x24001d34
 80136f4:	24001d30 	.word	0x24001d30
 80136f8:	e000ed04 	.word	0xe000ed04

080136fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80136fc:	b480      	push	{r7}
 80136fe:	b083      	sub	sp, #12
 8013700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013702:	4b05      	ldr	r3, [pc, #20]	@ (8013718 <xTaskGetTickCount+0x1c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013708:	687b      	ldr	r3, [r7, #4]
}
 801370a:	4618      	mov	r0, r3
 801370c:	370c      	adds	r7, #12
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	24001d24 	.word	0x24001d24

0801371c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013722:	2300      	movs	r3, #0
 8013724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013726:	4b4f      	ldr	r3, [pc, #316]	@ (8013864 <xTaskIncrementTick+0x148>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	f040 8090 	bne.w	8013850 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013730:	4b4d      	ldr	r3, [pc, #308]	@ (8013868 <xTaskIncrementTick+0x14c>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3301      	adds	r3, #1
 8013736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013738:	4a4b      	ldr	r2, [pc, #300]	@ (8013868 <xTaskIncrementTick+0x14c>)
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d121      	bne.n	8013788 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013744:	4b49      	ldr	r3, [pc, #292]	@ (801386c <xTaskIncrementTick+0x150>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00b      	beq.n	8013766 <xTaskIncrementTick+0x4a>
	__asm volatile
 801374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013752:	f383 8811 	msr	BASEPRI, r3
 8013756:	f3bf 8f6f 	isb	sy
 801375a:	f3bf 8f4f 	dsb	sy
 801375e:	603b      	str	r3, [r7, #0]
}
 8013760:	bf00      	nop
 8013762:	bf00      	nop
 8013764:	e7fd      	b.n	8013762 <xTaskIncrementTick+0x46>
 8013766:	4b41      	ldr	r3, [pc, #260]	@ (801386c <xTaskIncrementTick+0x150>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	4b40      	ldr	r3, [pc, #256]	@ (8013870 <xTaskIncrementTick+0x154>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4a3e      	ldr	r2, [pc, #248]	@ (801386c <xTaskIncrementTick+0x150>)
 8013772:	6013      	str	r3, [r2, #0]
 8013774:	4a3e      	ldr	r2, [pc, #248]	@ (8013870 <xTaskIncrementTick+0x154>)
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	6013      	str	r3, [r2, #0]
 801377a:	4b3e      	ldr	r3, [pc, #248]	@ (8013874 <xTaskIncrementTick+0x158>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	3301      	adds	r3, #1
 8013780:	4a3c      	ldr	r2, [pc, #240]	@ (8013874 <xTaskIncrementTick+0x158>)
 8013782:	6013      	str	r3, [r2, #0]
 8013784:	f000 fae2 	bl	8013d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013788:	4b3b      	ldr	r3, [pc, #236]	@ (8013878 <xTaskIncrementTick+0x15c>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	429a      	cmp	r2, r3
 8013790:	d349      	bcc.n	8013826 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013792:	4b36      	ldr	r3, [pc, #216]	@ (801386c <xTaskIncrementTick+0x150>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d104      	bne.n	80137a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801379c:	4b36      	ldr	r3, [pc, #216]	@ (8013878 <xTaskIncrementTick+0x15c>)
 801379e:	f04f 32ff 	mov.w	r2, #4294967295
 80137a2:	601a      	str	r2, [r3, #0]
					break;
 80137a4:	e03f      	b.n	8013826 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137a6:	4b31      	ldr	r3, [pc, #196]	@ (801386c <xTaskIncrementTick+0x150>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80137b6:	693a      	ldr	r2, [r7, #16]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d203      	bcs.n	80137c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80137be:	4a2e      	ldr	r2, [pc, #184]	@ (8013878 <xTaskIncrementTick+0x15c>)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80137c4:	e02f      	b.n	8013826 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	3304      	adds	r3, #4
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fe fde0 	bl	8012390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d004      	beq.n	80137e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	3318      	adds	r3, #24
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fe fdd7 	bl	8012390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137e6:	4b25      	ldr	r3, [pc, #148]	@ (801387c <xTaskIncrementTick+0x160>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d903      	bls.n	80137f6 <xTaskIncrementTick+0xda>
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f2:	4a22      	ldr	r2, [pc, #136]	@ (801387c <xTaskIncrementTick+0x160>)
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137fa:	4613      	mov	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	4413      	add	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4a1f      	ldr	r2, [pc, #124]	@ (8013880 <xTaskIncrementTick+0x164>)
 8013804:	441a      	add	r2, r3
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	3304      	adds	r3, #4
 801380a:	4619      	mov	r1, r3
 801380c:	4610      	mov	r0, r2
 801380e:	f7fe fd62 	bl	80122d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013816:	4b1b      	ldr	r3, [pc, #108]	@ (8013884 <xTaskIncrementTick+0x168>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801381c:	429a      	cmp	r2, r3
 801381e:	d3b8      	bcc.n	8013792 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013820:	2301      	movs	r3, #1
 8013822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013824:	e7b5      	b.n	8013792 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013826:	4b17      	ldr	r3, [pc, #92]	@ (8013884 <xTaskIncrementTick+0x168>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801382c:	4914      	ldr	r1, [pc, #80]	@ (8013880 <xTaskIncrementTick+0x164>)
 801382e:	4613      	mov	r3, r2
 8013830:	009b      	lsls	r3, r3, #2
 8013832:	4413      	add	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	440b      	add	r3, r1
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2b01      	cmp	r3, #1
 801383c:	d901      	bls.n	8013842 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801383e:	2301      	movs	r3, #1
 8013840:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013842:	4b11      	ldr	r3, [pc, #68]	@ (8013888 <xTaskIncrementTick+0x16c>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d007      	beq.n	801385a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801384a:	2301      	movs	r3, #1
 801384c:	617b      	str	r3, [r7, #20]
 801384e:	e004      	b.n	801385a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013850:	4b0e      	ldr	r3, [pc, #56]	@ (801388c <xTaskIncrementTick+0x170>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	3301      	adds	r3, #1
 8013856:	4a0d      	ldr	r2, [pc, #52]	@ (801388c <xTaskIncrementTick+0x170>)
 8013858:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801385a:	697b      	ldr	r3, [r7, #20]
}
 801385c:	4618      	mov	r0, r3
 801385e:	3718      	adds	r7, #24
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	24001d48 	.word	0x24001d48
 8013868:	24001d24 	.word	0x24001d24
 801386c:	24001cd8 	.word	0x24001cd8
 8013870:	24001cdc 	.word	0x24001cdc
 8013874:	24001d38 	.word	0x24001d38
 8013878:	24001d40 	.word	0x24001d40
 801387c:	24001d28 	.word	0x24001d28
 8013880:	24001850 	.word	0x24001850
 8013884:	2400184c 	.word	0x2400184c
 8013888:	24001d34 	.word	0x24001d34
 801388c:	24001d30 	.word	0x24001d30

08013890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013896:	4b2b      	ldr	r3, [pc, #172]	@ (8013944 <vTaskSwitchContext+0xb4>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d003      	beq.n	80138a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801389e:	4b2a      	ldr	r3, [pc, #168]	@ (8013948 <vTaskSwitchContext+0xb8>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80138a4:	e047      	b.n	8013936 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80138a6:	4b28      	ldr	r3, [pc, #160]	@ (8013948 <vTaskSwitchContext+0xb8>)
 80138a8:	2200      	movs	r2, #0
 80138aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138ac:	4b27      	ldr	r3, [pc, #156]	@ (801394c <vTaskSwitchContext+0xbc>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	e011      	b.n	80138d8 <vTaskSwitchContext+0x48>
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d10b      	bne.n	80138d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80138ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	607b      	str	r3, [r7, #4]
}
 80138cc:	bf00      	nop
 80138ce:	bf00      	nop
 80138d0:	e7fd      	b.n	80138ce <vTaskSwitchContext+0x3e>
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	3b01      	subs	r3, #1
 80138d6:	60fb      	str	r3, [r7, #12]
 80138d8:	491d      	ldr	r1, [pc, #116]	@ (8013950 <vTaskSwitchContext+0xc0>)
 80138da:	68fa      	ldr	r2, [r7, #12]
 80138dc:	4613      	mov	r3, r2
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	4413      	add	r3, r2
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	440b      	add	r3, r1
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d0e3      	beq.n	80138b4 <vTaskSwitchContext+0x24>
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	4613      	mov	r3, r2
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	4413      	add	r3, r2
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	4a16      	ldr	r2, [pc, #88]	@ (8013950 <vTaskSwitchContext+0xc0>)
 80138f8:	4413      	add	r3, r2
 80138fa:	60bb      	str	r3, [r7, #8]
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	685a      	ldr	r2, [r3, #4]
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	605a      	str	r2, [r3, #4]
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	685a      	ldr	r2, [r3, #4]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	3308      	adds	r3, #8
 801390e:	429a      	cmp	r2, r3
 8013910:	d104      	bne.n	801391c <vTaskSwitchContext+0x8c>
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	685a      	ldr	r2, [r3, #4]
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	605a      	str	r2, [r3, #4]
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	4a0c      	ldr	r2, [pc, #48]	@ (8013954 <vTaskSwitchContext+0xc4>)
 8013924:	6013      	str	r3, [r2, #0]
 8013926:	4a09      	ldr	r2, [pc, #36]	@ (801394c <vTaskSwitchContext+0xbc>)
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801392c:	4b09      	ldr	r3, [pc, #36]	@ (8013954 <vTaskSwitchContext+0xc4>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	3354      	adds	r3, #84	@ 0x54
 8013932:	4a09      	ldr	r2, [pc, #36]	@ (8013958 <vTaskSwitchContext+0xc8>)
 8013934:	6013      	str	r3, [r2, #0]
}
 8013936:	bf00      	nop
 8013938:	3714      	adds	r7, #20
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	24001d48 	.word	0x24001d48
 8013948:	24001d34 	.word	0x24001d34
 801394c:	24001d28 	.word	0x24001d28
 8013950:	24001850 	.word	0x24001850
 8013954:	2400184c 	.word	0x2400184c
 8013958:	240000b4 	.word	0x240000b4

0801395c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d10b      	bne.n	8013984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013970:	f383 8811 	msr	BASEPRI, r3
 8013974:	f3bf 8f6f 	isb	sy
 8013978:	f3bf 8f4f 	dsb	sy
 801397c:	60fb      	str	r3, [r7, #12]
}
 801397e:	bf00      	nop
 8013980:	bf00      	nop
 8013982:	e7fd      	b.n	8013980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013984:	4b07      	ldr	r3, [pc, #28]	@ (80139a4 <vTaskPlaceOnEventList+0x48>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	3318      	adds	r3, #24
 801398a:	4619      	mov	r1, r3
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7fe fcc6 	bl	801231e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013992:	2101      	movs	r1, #1
 8013994:	6838      	ldr	r0, [r7, #0]
 8013996:	f000 fb87 	bl	80140a8 <prvAddCurrentTaskToDelayedList>
}
 801399a:	bf00      	nop
 801399c:	3710      	adds	r7, #16
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	2400184c 	.word	0x2400184c

080139a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b086      	sub	sp, #24
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d10b      	bne.n	80139d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80139ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	617b      	str	r3, [r7, #20]
}
 80139cc:	bf00      	nop
 80139ce:	bf00      	nop
 80139d0:	e7fd      	b.n	80139ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139d2:	4b0a      	ldr	r3, [pc, #40]	@ (80139fc <vTaskPlaceOnEventListRestricted+0x54>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	3318      	adds	r3, #24
 80139d8:	4619      	mov	r1, r3
 80139da:	68f8      	ldr	r0, [r7, #12]
 80139dc:	f7fe fc7b 	bl	80122d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d002      	beq.n	80139ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80139e6:	f04f 33ff 	mov.w	r3, #4294967295
 80139ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80139ec:	6879      	ldr	r1, [r7, #4]
 80139ee:	68b8      	ldr	r0, [r7, #8]
 80139f0:	f000 fb5a 	bl	80140a8 <prvAddCurrentTaskToDelayedList>
	}
 80139f4:	bf00      	nop
 80139f6:	3718      	adds	r7, #24
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	2400184c 	.word	0x2400184c

08013a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b086      	sub	sp, #24
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d10b      	bne.n	8013a2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a1a:	f383 8811 	msr	BASEPRI, r3
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	60fb      	str	r3, [r7, #12]
}
 8013a28:	bf00      	nop
 8013a2a:	bf00      	nop
 8013a2c:	e7fd      	b.n	8013a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	3318      	adds	r3, #24
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fe fcac 	bl	8012390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a38:	4b1d      	ldr	r3, [pc, #116]	@ (8013ab0 <xTaskRemoveFromEventList+0xb0>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d11d      	bne.n	8013a7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	3304      	adds	r3, #4
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7fe fca3 	bl	8012390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a4e:	4b19      	ldr	r3, [pc, #100]	@ (8013ab4 <xTaskRemoveFromEventList+0xb4>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d903      	bls.n	8013a5e <xTaskRemoveFromEventList+0x5e>
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a5a:	4a16      	ldr	r2, [pc, #88]	@ (8013ab4 <xTaskRemoveFromEventList+0xb4>)
 8013a5c:	6013      	str	r3, [r2, #0]
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a62:	4613      	mov	r3, r2
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	4413      	add	r3, r2
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	4a13      	ldr	r2, [pc, #76]	@ (8013ab8 <xTaskRemoveFromEventList+0xb8>)
 8013a6c:	441a      	add	r2, r3
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	3304      	adds	r3, #4
 8013a72:	4619      	mov	r1, r3
 8013a74:	4610      	mov	r0, r2
 8013a76:	f7fe fc2e 	bl	80122d6 <vListInsertEnd>
 8013a7a:	e005      	b.n	8013a88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	3318      	adds	r3, #24
 8013a80:	4619      	mov	r1, r3
 8013a82:	480e      	ldr	r0, [pc, #56]	@ (8013abc <xTaskRemoveFromEventList+0xbc>)
 8013a84:	f7fe fc27 	bl	80122d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8013ac0 <xTaskRemoveFromEventList+0xc0>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d905      	bls.n	8013aa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013a96:	2301      	movs	r3, #1
 8013a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8013ac4 <xTaskRemoveFromEventList+0xc4>)
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	601a      	str	r2, [r3, #0]
 8013aa0:	e001      	b.n	8013aa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013aa6:	697b      	ldr	r3, [r7, #20]
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3718      	adds	r7, #24
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	24001d48 	.word	0x24001d48
 8013ab4:	24001d28 	.word	0x24001d28
 8013ab8:	24001850 	.word	0x24001850
 8013abc:	24001ce0 	.word	0x24001ce0
 8013ac0:	2400184c 	.word	0x2400184c
 8013ac4:	24001d34 	.word	0x24001d34

08013ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013ad0:	4b06      	ldr	r3, [pc, #24]	@ (8013aec <vTaskInternalSetTimeOutState+0x24>)
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013ad8:	4b05      	ldr	r3, [pc, #20]	@ (8013af0 <vTaskInternalSetTimeOutState+0x28>)
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	605a      	str	r2, [r3, #4]
}
 8013ae0:	bf00      	nop
 8013ae2:	370c      	adds	r7, #12
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr
 8013aec:	24001d38 	.word	0x24001d38
 8013af0:	24001d24 	.word	0x24001d24

08013af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b088      	sub	sp, #32
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d10b      	bne.n	8013b1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b08:	f383 8811 	msr	BASEPRI, r3
 8013b0c:	f3bf 8f6f 	isb	sy
 8013b10:	f3bf 8f4f 	dsb	sy
 8013b14:	613b      	str	r3, [r7, #16]
}
 8013b16:	bf00      	nop
 8013b18:	bf00      	nop
 8013b1a:	e7fd      	b.n	8013b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d10b      	bne.n	8013b3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8013b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b26:	f383 8811 	msr	BASEPRI, r3
 8013b2a:	f3bf 8f6f 	isb	sy
 8013b2e:	f3bf 8f4f 	dsb	sy
 8013b32:	60fb      	str	r3, [r7, #12]
}
 8013b34:	bf00      	nop
 8013b36:	bf00      	nop
 8013b38:	e7fd      	b.n	8013b36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8013b3a:	f000 ff95 	bl	8014a68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8013bb4 <xTaskCheckForTimeOut+0xc0>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	69ba      	ldr	r2, [r7, #24]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b56:	d102      	bne.n	8013b5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	61fb      	str	r3, [r7, #28]
 8013b5c:	e023      	b.n	8013ba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	4b15      	ldr	r3, [pc, #84]	@ (8013bb8 <xTaskCheckForTimeOut+0xc4>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d007      	beq.n	8013b7a <xTaskCheckForTimeOut+0x86>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	69ba      	ldr	r2, [r7, #24]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d302      	bcc.n	8013b7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013b74:	2301      	movs	r3, #1
 8013b76:	61fb      	str	r3, [r7, #28]
 8013b78:	e015      	b.n	8013ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d20b      	bcs.n	8013b9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	1ad2      	subs	r2, r2, r3
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff ff99 	bl	8013ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013b96:	2300      	movs	r3, #0
 8013b98:	61fb      	str	r3, [r7, #28]
 8013b9a:	e004      	b.n	8013ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ba6:	f000 ff91 	bl	8014acc <vPortExitCritical>

	return xReturn;
 8013baa:	69fb      	ldr	r3, [r7, #28]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3720      	adds	r7, #32
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	24001d24 	.word	0x24001d24
 8013bb8:	24001d38 	.word	0x24001d38

08013bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013bc0:	4b03      	ldr	r3, [pc, #12]	@ (8013bd0 <vTaskMissedYield+0x14>)
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	601a      	str	r2, [r3, #0]
}
 8013bc6:	bf00      	nop
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr
 8013bd0:	24001d34 	.word	0x24001d34

08013bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013bdc:	f000 f852 	bl	8013c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013be0:	4b06      	ldr	r3, [pc, #24]	@ (8013bfc <prvIdleTask+0x28>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d9f9      	bls.n	8013bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8013be8:	4b05      	ldr	r3, [pc, #20]	@ (8013c00 <prvIdleTask+0x2c>)
 8013bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bee:	601a      	str	r2, [r3, #0]
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013bf8:	e7f0      	b.n	8013bdc <prvIdleTask+0x8>
 8013bfa:	bf00      	nop
 8013bfc:	24001850 	.word	0x24001850
 8013c00:	e000ed04 	.word	0xe000ed04

08013c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	607b      	str	r3, [r7, #4]
 8013c0e:	e00c      	b.n	8013c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	4613      	mov	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4413      	add	r3, r2
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	4a12      	ldr	r2, [pc, #72]	@ (8013c64 <prvInitialiseTaskLists+0x60>)
 8013c1c:	4413      	add	r3, r2
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fe fb2c 	bl	801227c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	3301      	adds	r3, #1
 8013c28:	607b      	str	r3, [r7, #4]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b37      	cmp	r3, #55	@ 0x37
 8013c2e:	d9ef      	bls.n	8013c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c30:	480d      	ldr	r0, [pc, #52]	@ (8013c68 <prvInitialiseTaskLists+0x64>)
 8013c32:	f7fe fb23 	bl	801227c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c36:	480d      	ldr	r0, [pc, #52]	@ (8013c6c <prvInitialiseTaskLists+0x68>)
 8013c38:	f7fe fb20 	bl	801227c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013c3c:	480c      	ldr	r0, [pc, #48]	@ (8013c70 <prvInitialiseTaskLists+0x6c>)
 8013c3e:	f7fe fb1d 	bl	801227c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013c42:	480c      	ldr	r0, [pc, #48]	@ (8013c74 <prvInitialiseTaskLists+0x70>)
 8013c44:	f7fe fb1a 	bl	801227c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013c48:	480b      	ldr	r0, [pc, #44]	@ (8013c78 <prvInitialiseTaskLists+0x74>)
 8013c4a:	f7fe fb17 	bl	801227c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8013c7c <prvInitialiseTaskLists+0x78>)
 8013c50:	4a05      	ldr	r2, [pc, #20]	@ (8013c68 <prvInitialiseTaskLists+0x64>)
 8013c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013c54:	4b0a      	ldr	r3, [pc, #40]	@ (8013c80 <prvInitialiseTaskLists+0x7c>)
 8013c56:	4a05      	ldr	r2, [pc, #20]	@ (8013c6c <prvInitialiseTaskLists+0x68>)
 8013c58:	601a      	str	r2, [r3, #0]
}
 8013c5a:	bf00      	nop
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	24001850 	.word	0x24001850
 8013c68:	24001cb0 	.word	0x24001cb0
 8013c6c:	24001cc4 	.word	0x24001cc4
 8013c70:	24001ce0 	.word	0x24001ce0
 8013c74:	24001cf4 	.word	0x24001cf4
 8013c78:	24001d0c 	.word	0x24001d0c
 8013c7c:	24001cd8 	.word	0x24001cd8
 8013c80:	24001cdc 	.word	0x24001cdc

08013c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c8a:	e019      	b.n	8013cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013c8c:	f000 feec 	bl	8014a68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c90:	4b10      	ldr	r3, [pc, #64]	@ (8013cd4 <prvCheckTasksWaitingTermination+0x50>)
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fe fb77 	bl	8012390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8013cd8 <prvCheckTasksWaitingTermination+0x54>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8013cd8 <prvCheckTasksWaitingTermination+0x54>)
 8013caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013cac:	4b0b      	ldr	r3, [pc, #44]	@ (8013cdc <prvCheckTasksWaitingTermination+0x58>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3b01      	subs	r3, #1
 8013cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8013cdc <prvCheckTasksWaitingTermination+0x58>)
 8013cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013cb6:	f000 ff09 	bl	8014acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 f810 	bl	8013ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013cc0:	4b06      	ldr	r3, [pc, #24]	@ (8013cdc <prvCheckTasksWaitingTermination+0x58>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d1e1      	bne.n	8013c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013cc8:	bf00      	nop
 8013cca:	bf00      	nop
 8013ccc:	3708      	adds	r7, #8
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	24001cf4 	.word	0x24001cf4
 8013cd8:	24001d20 	.word	0x24001d20
 8013cdc:	24001d08 	.word	0x24001d08

08013ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	3354      	adds	r3, #84	@ 0x54
 8013cec:	4618      	mov	r0, r3
 8013cee:	f001 ffd9 	bl	8015ca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d108      	bne.n	8013d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d00:	4618      	mov	r0, r3
 8013d02:	f001 f8a1 	bl	8014e48 <vPortFree>
				vPortFree( pxTCB );
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f001 f89e 	bl	8014e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013d0c:	e019      	b.n	8013d42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d103      	bne.n	8013d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f001 f895 	bl	8014e48 <vPortFree>
	}
 8013d1e:	e010      	b.n	8013d42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d00b      	beq.n	8013d42 <prvDeleteTCB+0x62>
	__asm volatile
 8013d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d2e:	f383 8811 	msr	BASEPRI, r3
 8013d32:	f3bf 8f6f 	isb	sy
 8013d36:	f3bf 8f4f 	dsb	sy
 8013d3a:	60fb      	str	r3, [r7, #12]
}
 8013d3c:	bf00      	nop
 8013d3e:	bf00      	nop
 8013d40:	e7fd      	b.n	8013d3e <prvDeleteTCB+0x5e>
	}
 8013d42:	bf00      	nop
 8013d44:	3710      	adds	r7, #16
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
	...

08013d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d52:	4b0c      	ldr	r3, [pc, #48]	@ (8013d84 <prvResetNextTaskUnblockTime+0x38>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d104      	bne.n	8013d66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8013d88 <prvResetNextTaskUnblockTime+0x3c>)
 8013d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013d64:	e008      	b.n	8013d78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d66:	4b07      	ldr	r3, [pc, #28]	@ (8013d84 <prvResetNextTaskUnblockTime+0x38>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	4a04      	ldr	r2, [pc, #16]	@ (8013d88 <prvResetNextTaskUnblockTime+0x3c>)
 8013d76:	6013      	str	r3, [r2, #0]
}
 8013d78:	bf00      	nop
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr
 8013d84:	24001cd8 	.word	0x24001cd8
 8013d88:	24001d40 	.word	0x24001d40

08013d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013d92:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc0 <xTaskGetSchedulerState+0x34>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d102      	bne.n	8013da0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	607b      	str	r3, [r7, #4]
 8013d9e:	e008      	b.n	8013db2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013da0:	4b08      	ldr	r3, [pc, #32]	@ (8013dc4 <xTaskGetSchedulerState+0x38>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013da8:	2302      	movs	r3, #2
 8013daa:	607b      	str	r3, [r7, #4]
 8013dac:	e001      	b.n	8013db2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013dae:	2300      	movs	r3, #0
 8013db0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013db2:	687b      	ldr	r3, [r7, #4]
	}
 8013db4:	4618      	mov	r0, r3
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	24001d2c 	.word	0x24001d2c
 8013dc4:	24001d48 	.word	0x24001d48

08013dc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d051      	beq.n	8013e82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013de2:	4b2a      	ldr	r3, [pc, #168]	@ (8013e8c <xTaskPriorityInherit+0xc4>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d241      	bcs.n	8013e70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	699b      	ldr	r3, [r3, #24]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	db06      	blt.n	8013e02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013df4:	4b25      	ldr	r3, [pc, #148]	@ (8013e8c <xTaskPriorityInherit+0xc4>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	6959      	ldr	r1, [r3, #20]
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	4413      	add	r3, r2
 8013e10:	009b      	lsls	r3, r3, #2
 8013e12:	4a1f      	ldr	r2, [pc, #124]	@ (8013e90 <xTaskPriorityInherit+0xc8>)
 8013e14:	4413      	add	r3, r2
 8013e16:	4299      	cmp	r1, r3
 8013e18:	d122      	bne.n	8013e60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe fab6 	bl	8012390 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e24:	4b19      	ldr	r3, [pc, #100]	@ (8013e8c <xTaskPriorityInherit+0xc4>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e32:	4b18      	ldr	r3, [pc, #96]	@ (8013e94 <xTaskPriorityInherit+0xcc>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d903      	bls.n	8013e42 <xTaskPriorityInherit+0x7a>
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e3e:	4a15      	ldr	r2, [pc, #84]	@ (8013e94 <xTaskPriorityInherit+0xcc>)
 8013e40:	6013      	str	r3, [r2, #0]
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e46:	4613      	mov	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	4413      	add	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	4a10      	ldr	r2, [pc, #64]	@ (8013e90 <xTaskPriorityInherit+0xc8>)
 8013e50:	441a      	add	r2, r3
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	3304      	adds	r3, #4
 8013e56:	4619      	mov	r1, r3
 8013e58:	4610      	mov	r0, r2
 8013e5a:	f7fe fa3c 	bl	80122d6 <vListInsertEnd>
 8013e5e:	e004      	b.n	8013e6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e60:	4b0a      	ldr	r3, [pc, #40]	@ (8013e8c <xTaskPriorityInherit+0xc4>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	e008      	b.n	8013e82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013e74:	4b05      	ldr	r3, [pc, #20]	@ (8013e8c <xTaskPriorityInherit+0xc4>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d201      	bcs.n	8013e82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013e82:	68fb      	ldr	r3, [r7, #12]
	}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3710      	adds	r7, #16
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	2400184c 	.word	0x2400184c
 8013e90:	24001850 	.word	0x24001850
 8013e94:	24001d28 	.word	0x24001d28

08013e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b086      	sub	sp, #24
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d058      	beq.n	8013f60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013eae:	4b2f      	ldr	r3, [pc, #188]	@ (8013f6c <xTaskPriorityDisinherit+0xd4>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	693a      	ldr	r2, [r7, #16]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d00b      	beq.n	8013ed0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ebc:	f383 8811 	msr	BASEPRI, r3
 8013ec0:	f3bf 8f6f 	isb	sy
 8013ec4:	f3bf 8f4f 	dsb	sy
 8013ec8:	60fb      	str	r3, [r7, #12]
}
 8013eca:	bf00      	nop
 8013ecc:	bf00      	nop
 8013ece:	e7fd      	b.n	8013ecc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013ed0:	693b      	ldr	r3, [r7, #16]
 8013ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10b      	bne.n	8013ef0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8013ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	60bb      	str	r3, [r7, #8]
}
 8013eea:	bf00      	nop
 8013eec:	bf00      	nop
 8013eee:	e7fd      	b.n	8013eec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ef4:	1e5a      	subs	r2, r3, #1
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d02c      	beq.n	8013f60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d128      	bne.n	8013f60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	3304      	adds	r3, #4
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fe fa3c 	bl	8012390 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f30:	4b0f      	ldr	r3, [pc, #60]	@ (8013f70 <xTaskPriorityDisinherit+0xd8>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d903      	bls.n	8013f40 <xTaskPriorityDisinherit+0xa8>
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8013f70 <xTaskPriorityDisinherit+0xd8>)
 8013f3e:	6013      	str	r3, [r2, #0]
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4a09      	ldr	r2, [pc, #36]	@ (8013f74 <xTaskPriorityDisinherit+0xdc>)
 8013f4e:	441a      	add	r2, r3
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	3304      	adds	r3, #4
 8013f54:	4619      	mov	r1, r3
 8013f56:	4610      	mov	r0, r2
 8013f58:	f7fe f9bd 	bl	80122d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f60:	697b      	ldr	r3, [r7, #20]
	}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3718      	adds	r7, #24
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	2400184c 	.word	0x2400184c
 8013f70:	24001d28 	.word	0x24001d28
 8013f74:	24001850 	.word	0x24001850

08013f78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b088      	sub	sp, #32
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d06c      	beq.n	801406a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d10b      	bne.n	8013fb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8013f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9c:	f383 8811 	msr	BASEPRI, r3
 8013fa0:	f3bf 8f6f 	isb	sy
 8013fa4:	f3bf 8f4f 	dsb	sy
 8013fa8:	60fb      	str	r3, [r7, #12]
}
 8013faa:	bf00      	nop
 8013fac:	bf00      	nop
 8013fae:	e7fd      	b.n	8013fac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fb4:	683a      	ldr	r2, [r7, #0]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d902      	bls.n	8013fc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	61fb      	str	r3, [r7, #28]
 8013fbe:	e002      	b.n	8013fc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fca:	69fa      	ldr	r2, [r7, #28]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d04c      	beq.n	801406a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fd4:	697a      	ldr	r2, [r7, #20]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d147      	bne.n	801406a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013fda:	4b26      	ldr	r3, [pc, #152]	@ (8014074 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	69ba      	ldr	r2, [r7, #24]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d10b      	bne.n	8013ffc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8013fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe8:	f383 8811 	msr	BASEPRI, r3
 8013fec:	f3bf 8f6f 	isb	sy
 8013ff0:	f3bf 8f4f 	dsb	sy
 8013ff4:	60bb      	str	r3, [r7, #8]
}
 8013ff6:	bf00      	nop
 8013ff8:	bf00      	nop
 8013ffa:	e7fd      	b.n	8013ff8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014000:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	69fa      	ldr	r2, [r7, #28]
 8014006:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	699b      	ldr	r3, [r3, #24]
 801400c:	2b00      	cmp	r3, #0
 801400e:	db04      	blt.n	801401a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	6959      	ldr	r1, [r3, #20]
 801401e:	693a      	ldr	r2, [r7, #16]
 8014020:	4613      	mov	r3, r2
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	4413      	add	r3, r2
 8014026:	009b      	lsls	r3, r3, #2
 8014028:	4a13      	ldr	r2, [pc, #76]	@ (8014078 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801402a:	4413      	add	r3, r2
 801402c:	4299      	cmp	r1, r3
 801402e:	d11c      	bne.n	801406a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	3304      	adds	r3, #4
 8014034:	4618      	mov	r0, r3
 8014036:	f7fe f9ab 	bl	8012390 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801403a:	69bb      	ldr	r3, [r7, #24]
 801403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801403e:	4b0f      	ldr	r3, [pc, #60]	@ (801407c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	429a      	cmp	r2, r3
 8014044:	d903      	bls.n	801404e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801404a:	4a0c      	ldr	r2, [pc, #48]	@ (801407c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801404c:	6013      	str	r3, [r2, #0]
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014052:	4613      	mov	r3, r2
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	4413      	add	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4a07      	ldr	r2, [pc, #28]	@ (8014078 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801405c:	441a      	add	r2, r3
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	3304      	adds	r3, #4
 8014062:	4619      	mov	r1, r3
 8014064:	4610      	mov	r0, r2
 8014066:	f7fe f936 	bl	80122d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801406a:	bf00      	nop
 801406c:	3720      	adds	r7, #32
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	2400184c 	.word	0x2400184c
 8014078:	24001850 	.word	0x24001850
 801407c:	24001d28 	.word	0x24001d28

08014080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014080:	b480      	push	{r7}
 8014082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014084:	4b07      	ldr	r3, [pc, #28]	@ (80140a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d004      	beq.n	8014096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801408c:	4b05      	ldr	r3, [pc, #20]	@ (80140a4 <pvTaskIncrementMutexHeldCount+0x24>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014092:	3201      	adds	r2, #1
 8014094:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014096:	4b03      	ldr	r3, [pc, #12]	@ (80140a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014098:	681b      	ldr	r3, [r3, #0]
	}
 801409a:	4618      	mov	r0, r3
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr
 80140a4:	2400184c 	.word	0x2400184c

080140a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80140b2:	4b21      	ldr	r3, [pc, #132]	@ (8014138 <prvAddCurrentTaskToDelayedList+0x90>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140b8:	4b20      	ldr	r3, [pc, #128]	@ (801413c <prvAddCurrentTaskToDelayedList+0x94>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	3304      	adds	r3, #4
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fe f966 	bl	8012390 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ca:	d10a      	bne.n	80140e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d007      	beq.n	80140e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140d2:	4b1a      	ldr	r3, [pc, #104]	@ (801413c <prvAddCurrentTaskToDelayedList+0x94>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	3304      	adds	r3, #4
 80140d8:	4619      	mov	r1, r3
 80140da:	4819      	ldr	r0, [pc, #100]	@ (8014140 <prvAddCurrentTaskToDelayedList+0x98>)
 80140dc:	f7fe f8fb 	bl	80122d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140e0:	e026      	b.n	8014130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80140e2:	68fa      	ldr	r2, [r7, #12]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	4413      	add	r3, r2
 80140e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80140ea:	4b14      	ldr	r3, [pc, #80]	@ (801413c <prvAddCurrentTaskToDelayedList+0x94>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80140f2:	68ba      	ldr	r2, [r7, #8]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d209      	bcs.n	801410e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140fa:	4b12      	ldr	r3, [pc, #72]	@ (8014144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	4b0f      	ldr	r3, [pc, #60]	@ (801413c <prvAddCurrentTaskToDelayedList+0x94>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	3304      	adds	r3, #4
 8014104:	4619      	mov	r1, r3
 8014106:	4610      	mov	r0, r2
 8014108:	f7fe f909 	bl	801231e <vListInsert>
}
 801410c:	e010      	b.n	8014130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801410e:	4b0e      	ldr	r3, [pc, #56]	@ (8014148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	4b0a      	ldr	r3, [pc, #40]	@ (801413c <prvAddCurrentTaskToDelayedList+0x94>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3304      	adds	r3, #4
 8014118:	4619      	mov	r1, r3
 801411a:	4610      	mov	r0, r2
 801411c:	f7fe f8ff 	bl	801231e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014120:	4b0a      	ldr	r3, [pc, #40]	@ (801414c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	429a      	cmp	r2, r3
 8014128:	d202      	bcs.n	8014130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801412a:	4a08      	ldr	r2, [pc, #32]	@ (801414c <prvAddCurrentTaskToDelayedList+0xa4>)
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	6013      	str	r3, [r2, #0]
}
 8014130:	bf00      	nop
 8014132:	3710      	adds	r7, #16
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}
 8014138:	24001d24 	.word	0x24001d24
 801413c:	2400184c 	.word	0x2400184c
 8014140:	24001d0c 	.word	0x24001d0c
 8014144:	24001cdc 	.word	0x24001cdc
 8014148:	24001cd8 	.word	0x24001cd8
 801414c:	24001d40 	.word	0x24001d40

08014150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b08a      	sub	sp, #40	@ 0x28
 8014154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014156:	2300      	movs	r3, #0
 8014158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801415a:	f000 fb13 	bl	8014784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801415e:	4b1d      	ldr	r3, [pc, #116]	@ (80141d4 <xTimerCreateTimerTask+0x84>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d021      	beq.n	80141aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014166:	2300      	movs	r3, #0
 8014168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801416a:	2300      	movs	r3, #0
 801416c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801416e:	1d3a      	adds	r2, r7, #4
 8014170:	f107 0108 	add.w	r1, r7, #8
 8014174:	f107 030c 	add.w	r3, r7, #12
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe f865 	bl	8012248 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801417e:	6879      	ldr	r1, [r7, #4]
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	68fa      	ldr	r2, [r7, #12]
 8014184:	9202      	str	r2, [sp, #8]
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	2302      	movs	r3, #2
 801418a:	9300      	str	r3, [sp, #0]
 801418c:	2300      	movs	r3, #0
 801418e:	460a      	mov	r2, r1
 8014190:	4911      	ldr	r1, [pc, #68]	@ (80141d8 <xTimerCreateTimerTask+0x88>)
 8014192:	4812      	ldr	r0, [pc, #72]	@ (80141dc <xTimerCreateTimerTask+0x8c>)
 8014194:	f7fe ffd8 	bl	8013148 <xTaskCreateStatic>
 8014198:	4603      	mov	r3, r0
 801419a:	4a11      	ldr	r2, [pc, #68]	@ (80141e0 <xTimerCreateTimerTask+0x90>)
 801419c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801419e:	4b10      	ldr	r3, [pc, #64]	@ (80141e0 <xTimerCreateTimerTask+0x90>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80141a6:	2301      	movs	r3, #1
 80141a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d10b      	bne.n	80141c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80141b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b4:	f383 8811 	msr	BASEPRI, r3
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	f3bf 8f4f 	dsb	sy
 80141c0:	613b      	str	r3, [r7, #16]
}
 80141c2:	bf00      	nop
 80141c4:	bf00      	nop
 80141c6:	e7fd      	b.n	80141c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80141c8:	697b      	ldr	r3, [r7, #20]
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3718      	adds	r7, #24
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd80      	pop	{r7, pc}
 80141d2:	bf00      	nop
 80141d4:	24001d7c 	.word	0x24001d7c
 80141d8:	08017d4c 	.word	0x08017d4c
 80141dc:	0801431d 	.word	0x0801431d
 80141e0:	24001d80 	.word	0x24001d80

080141e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08a      	sub	sp, #40	@ 0x28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80141f2:	2300      	movs	r3, #0
 80141f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d10b      	bne.n	8014214 <xTimerGenericCommand+0x30>
	__asm volatile
 80141fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014200:	f383 8811 	msr	BASEPRI, r3
 8014204:	f3bf 8f6f 	isb	sy
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	623b      	str	r3, [r7, #32]
}
 801420e:	bf00      	nop
 8014210:	bf00      	nop
 8014212:	e7fd      	b.n	8014210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014214:	4b19      	ldr	r3, [pc, #100]	@ (801427c <xTimerGenericCommand+0x98>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d02a      	beq.n	8014272 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	2b05      	cmp	r3, #5
 801422c:	dc18      	bgt.n	8014260 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801422e:	f7ff fdad 	bl	8013d8c <xTaskGetSchedulerState>
 8014232:	4603      	mov	r3, r0
 8014234:	2b02      	cmp	r3, #2
 8014236:	d109      	bne.n	801424c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014238:	4b10      	ldr	r3, [pc, #64]	@ (801427c <xTimerGenericCommand+0x98>)
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	f107 0110 	add.w	r1, r7, #16
 8014240:	2300      	movs	r3, #0
 8014242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014244:	f7fe f9d8 	bl	80125f8 <xQueueGenericSend>
 8014248:	6278      	str	r0, [r7, #36]	@ 0x24
 801424a:	e012      	b.n	8014272 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801424c:	4b0b      	ldr	r3, [pc, #44]	@ (801427c <xTimerGenericCommand+0x98>)
 801424e:	6818      	ldr	r0, [r3, #0]
 8014250:	f107 0110 	add.w	r1, r7, #16
 8014254:	2300      	movs	r3, #0
 8014256:	2200      	movs	r2, #0
 8014258:	f7fe f9ce 	bl	80125f8 <xQueueGenericSend>
 801425c:	6278      	str	r0, [r7, #36]	@ 0x24
 801425e:	e008      	b.n	8014272 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014260:	4b06      	ldr	r3, [pc, #24]	@ (801427c <xTimerGenericCommand+0x98>)
 8014262:	6818      	ldr	r0, [r3, #0]
 8014264:	f107 0110 	add.w	r1, r7, #16
 8014268:	2300      	movs	r3, #0
 801426a:	683a      	ldr	r2, [r7, #0]
 801426c:	f7fe fac6 	bl	80127fc <xQueueGenericSendFromISR>
 8014270:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014274:	4618      	mov	r0, r3
 8014276:	3728      	adds	r7, #40	@ 0x28
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	24001d7c 	.word	0x24001d7c

08014280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af02      	add	r7, sp, #8
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801428a:	4b23      	ldr	r3, [pc, #140]	@ (8014318 <prvProcessExpiredTimer+0x98>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	3304      	adds	r3, #4
 8014298:	4618      	mov	r0, r3
 801429a:	f7fe f879 	bl	8012390 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142a4:	f003 0304 	and.w	r3, r3, #4
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d023      	beq.n	80142f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80142ac:	697b      	ldr	r3, [r7, #20]
 80142ae:	699a      	ldr	r2, [r3, #24]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	18d1      	adds	r1, r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	683a      	ldr	r2, [r7, #0]
 80142b8:	6978      	ldr	r0, [r7, #20]
 80142ba:	f000 f8d5 	bl	8014468 <prvInsertTimerInActiveList>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d020      	beq.n	8014306 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80142c4:	2300      	movs	r3, #0
 80142c6:	9300      	str	r3, [sp, #0]
 80142c8:	2300      	movs	r3, #0
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	2100      	movs	r1, #0
 80142ce:	6978      	ldr	r0, [r7, #20]
 80142d0:	f7ff ff88 	bl	80141e4 <xTimerGenericCommand>
 80142d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d114      	bne.n	8014306 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80142dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142e0:	f383 8811 	msr	BASEPRI, r3
 80142e4:	f3bf 8f6f 	isb	sy
 80142e8:	f3bf 8f4f 	dsb	sy
 80142ec:	60fb      	str	r3, [r7, #12]
}
 80142ee:	bf00      	nop
 80142f0:	bf00      	nop
 80142f2:	e7fd      	b.n	80142f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142fa:	f023 0301 	bic.w	r3, r3, #1
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	6a1b      	ldr	r3, [r3, #32]
 801430a:	6978      	ldr	r0, [r7, #20]
 801430c:	4798      	blx	r3
}
 801430e:	bf00      	nop
 8014310:	3718      	adds	r7, #24
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	24001d74 	.word	0x24001d74

0801431c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b084      	sub	sp, #16
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014324:	f107 0308 	add.w	r3, r7, #8
 8014328:	4618      	mov	r0, r3
 801432a:	f000 f859 	bl	80143e0 <prvGetNextExpireTime>
 801432e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	4619      	mov	r1, r3
 8014334:	68f8      	ldr	r0, [r7, #12]
 8014336:	f000 f805 	bl	8014344 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801433a:	f000 f8d7 	bl	80144ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801433e:	bf00      	nop
 8014340:	e7f0      	b.n	8014324 <prvTimerTask+0x8>
	...

08014344 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801434e:	f7ff f929 	bl	80135a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014352:	f107 0308 	add.w	r3, r7, #8
 8014356:	4618      	mov	r0, r3
 8014358:	f000 f866 	bl	8014428 <prvSampleTimeNow>
 801435c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d130      	bne.n	80143c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d10a      	bne.n	8014380 <prvProcessTimerOrBlockTask+0x3c>
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	429a      	cmp	r2, r3
 8014370:	d806      	bhi.n	8014380 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014372:	f7ff f925 	bl	80135c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014376:	68f9      	ldr	r1, [r7, #12]
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7ff ff81 	bl	8014280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801437e:	e024      	b.n	80143ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d008      	beq.n	8014398 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014386:	4b13      	ldr	r3, [pc, #76]	@ (80143d4 <prvProcessTimerOrBlockTask+0x90>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <prvProcessTimerOrBlockTask+0x50>
 8014390:	2301      	movs	r3, #1
 8014392:	e000      	b.n	8014396 <prvProcessTimerOrBlockTask+0x52>
 8014394:	2300      	movs	r3, #0
 8014396:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014398:	4b0f      	ldr	r3, [pc, #60]	@ (80143d8 <prvProcessTimerOrBlockTask+0x94>)
 801439a:	6818      	ldr	r0, [r3, #0]
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	683a      	ldr	r2, [r7, #0]
 80143a4:	4619      	mov	r1, r3
 80143a6:	f7fe fe9b 	bl	80130e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80143aa:	f7ff f909 	bl	80135c0 <xTaskResumeAll>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10a      	bne.n	80143ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80143b4:	4b09      	ldr	r3, [pc, #36]	@ (80143dc <prvProcessTimerOrBlockTask+0x98>)
 80143b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80143ba:	601a      	str	r2, [r3, #0]
 80143bc:	f3bf 8f4f 	dsb	sy
 80143c0:	f3bf 8f6f 	isb	sy
}
 80143c4:	e001      	b.n	80143ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80143c6:	f7ff f8fb 	bl	80135c0 <xTaskResumeAll>
}
 80143ca:	bf00      	nop
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	24001d78 	.word	0x24001d78
 80143d8:	24001d7c 	.word	0x24001d7c
 80143dc:	e000ed04 	.word	0xe000ed04

080143e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b085      	sub	sp, #20
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80143e8:	4b0e      	ldr	r3, [pc, #56]	@ (8014424 <prvGetNextExpireTime+0x44>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d101      	bne.n	80143f6 <prvGetNextExpireTime+0x16>
 80143f2:	2201      	movs	r2, #1
 80143f4:	e000      	b.n	80143f8 <prvGetNextExpireTime+0x18>
 80143f6:	2200      	movs	r2, #0
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d105      	bne.n	8014410 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014404:	4b07      	ldr	r3, [pc, #28]	@ (8014424 <prvGetNextExpireTime+0x44>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	60fb      	str	r3, [r7, #12]
 801440e:	e001      	b.n	8014414 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014410:	2300      	movs	r3, #0
 8014412:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014414:	68fb      	ldr	r3, [r7, #12]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3714      	adds	r7, #20
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	24001d74 	.word	0x24001d74

08014428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014430:	f7ff f964 	bl	80136fc <xTaskGetTickCount>
 8014434:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014436:	4b0b      	ldr	r3, [pc, #44]	@ (8014464 <prvSampleTimeNow+0x3c>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	429a      	cmp	r2, r3
 801443e:	d205      	bcs.n	801444c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014440:	f000 f93a 	bl	80146b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2201      	movs	r2, #1
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	e002      	b.n	8014452 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014452:	4a04      	ldr	r2, [pc, #16]	@ (8014464 <prvSampleTimeNow+0x3c>)
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014458:	68fb      	ldr	r3, [r7, #12]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	24001d84 	.word	0x24001d84

08014468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b086      	sub	sp, #24
 801446c:	af00      	add	r7, sp, #0
 801446e:	60f8      	str	r0, [r7, #12]
 8014470:	60b9      	str	r1, [r7, #8]
 8014472:	607a      	str	r2, [r7, #4]
 8014474:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014476:	2300      	movs	r3, #0
 8014478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	68fa      	ldr	r2, [r7, #12]
 8014484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014486:	68ba      	ldr	r2, [r7, #8]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	429a      	cmp	r2, r3
 801448c:	d812      	bhi.n	80144b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	1ad2      	subs	r2, r2, r3
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	699b      	ldr	r3, [r3, #24]
 8014498:	429a      	cmp	r2, r3
 801449a:	d302      	bcc.n	80144a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801449c:	2301      	movs	r3, #1
 801449e:	617b      	str	r3, [r7, #20]
 80144a0:	e01b      	b.n	80144da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80144a2:	4b10      	ldr	r3, [pc, #64]	@ (80144e4 <prvInsertTimerInActiveList+0x7c>)
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	3304      	adds	r3, #4
 80144aa:	4619      	mov	r1, r3
 80144ac:	4610      	mov	r0, r2
 80144ae:	f7fd ff36 	bl	801231e <vListInsert>
 80144b2:	e012      	b.n	80144da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d206      	bcs.n	80144ca <prvInsertTimerInActiveList+0x62>
 80144bc:	68ba      	ldr	r2, [r7, #8]
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d302      	bcc.n	80144ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80144c4:	2301      	movs	r3, #1
 80144c6:	617b      	str	r3, [r7, #20]
 80144c8:	e007      	b.n	80144da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80144ca:	4b07      	ldr	r3, [pc, #28]	@ (80144e8 <prvInsertTimerInActiveList+0x80>)
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	3304      	adds	r3, #4
 80144d2:	4619      	mov	r1, r3
 80144d4:	4610      	mov	r0, r2
 80144d6:	f7fd ff22 	bl	801231e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80144da:	697b      	ldr	r3, [r7, #20]
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3718      	adds	r7, #24
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}
 80144e4:	24001d78 	.word	0x24001d78
 80144e8:	24001d74 	.word	0x24001d74

080144ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08e      	sub	sp, #56	@ 0x38
 80144f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80144f2:	e0ce      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	da19      	bge.n	801452e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80144fa:	1d3b      	adds	r3, r7, #4
 80144fc:	3304      	adds	r3, #4
 80144fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014502:	2b00      	cmp	r3, #0
 8014504:	d10b      	bne.n	801451e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8014506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801450a:	f383 8811 	msr	BASEPRI, r3
 801450e:	f3bf 8f6f 	isb	sy
 8014512:	f3bf 8f4f 	dsb	sy
 8014516:	61fb      	str	r3, [r7, #28]
}
 8014518:	bf00      	nop
 801451a:	bf00      	nop
 801451c:	e7fd      	b.n	801451a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014524:	6850      	ldr	r0, [r2, #4]
 8014526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014528:	6892      	ldr	r2, [r2, #8]
 801452a:	4611      	mov	r1, r2
 801452c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	f2c0 80ae 	blt.w	8014692 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453c:	695b      	ldr	r3, [r3, #20]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d004      	beq.n	801454c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014544:	3304      	adds	r3, #4
 8014546:	4618      	mov	r0, r3
 8014548:	f7fd ff22 	bl	8012390 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801454c:	463b      	mov	r3, r7
 801454e:	4618      	mov	r0, r3
 8014550:	f7ff ff6a 	bl	8014428 <prvSampleTimeNow>
 8014554:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2b09      	cmp	r3, #9
 801455a:	f200 8097 	bhi.w	801468c <prvProcessReceivedCommands+0x1a0>
 801455e:	a201      	add	r2, pc, #4	@ (adr r2, 8014564 <prvProcessReceivedCommands+0x78>)
 8014560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014564:	0801458d 	.word	0x0801458d
 8014568:	0801458d 	.word	0x0801458d
 801456c:	0801458d 	.word	0x0801458d
 8014570:	08014603 	.word	0x08014603
 8014574:	08014617 	.word	0x08014617
 8014578:	08014663 	.word	0x08014663
 801457c:	0801458d 	.word	0x0801458d
 8014580:	0801458d 	.word	0x0801458d
 8014584:	08014603 	.word	0x08014603
 8014588:	08014617 	.word	0x08014617
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014592:	f043 0301 	orr.w	r3, r3, #1
 8014596:	b2da      	uxtb	r2, r3
 8014598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801459e:	68ba      	ldr	r2, [r7, #8]
 80145a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a2:	699b      	ldr	r3, [r3, #24]
 80145a4:	18d1      	adds	r1, r2, r3
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145ac:	f7ff ff5c 	bl	8014468 <prvInsertTimerInActiveList>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d06c      	beq.n	8014690 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80145b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145b8:	6a1b      	ldr	r3, [r3, #32]
 80145ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80145be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80145c4:	f003 0304 	and.w	r3, r3, #4
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d061      	beq.n	8014690 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80145cc:	68ba      	ldr	r2, [r7, #8]
 80145ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145d0:	699b      	ldr	r3, [r3, #24]
 80145d2:	441a      	add	r2, r3
 80145d4:	2300      	movs	r3, #0
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	2300      	movs	r3, #0
 80145da:	2100      	movs	r1, #0
 80145dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145de:	f7ff fe01 	bl	80141e4 <xTimerGenericCommand>
 80145e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80145e4:	6a3b      	ldr	r3, [r7, #32]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d152      	bne.n	8014690 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80145ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145ee:	f383 8811 	msr	BASEPRI, r3
 80145f2:	f3bf 8f6f 	isb	sy
 80145f6:	f3bf 8f4f 	dsb	sy
 80145fa:	61bb      	str	r3, [r7, #24]
}
 80145fc:	bf00      	nop
 80145fe:	bf00      	nop
 8014600:	e7fd      	b.n	80145fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014608:	f023 0301 	bic.w	r3, r3, #1
 801460c:	b2da      	uxtb	r2, r3
 801460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8014614:	e03d      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801461c:	f043 0301 	orr.w	r3, r3, #1
 8014620:	b2da      	uxtb	r2, r3
 8014622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014628:	68ba      	ldr	r2, [r7, #8]
 801462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801462c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014630:	699b      	ldr	r3, [r3, #24]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10b      	bne.n	801464e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8014636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	617b      	str	r3, [r7, #20]
}
 8014648:	bf00      	nop
 801464a:	bf00      	nop
 801464c:	e7fd      	b.n	801464a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014650:	699a      	ldr	r2, [r3, #24]
 8014652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014654:	18d1      	adds	r1, r2, r3
 8014656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801465a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801465c:	f7ff ff04 	bl	8014468 <prvInsertTimerInActiveList>
					break;
 8014660:	e017      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014668:	f003 0302 	and.w	r3, r3, #2
 801466c:	2b00      	cmp	r3, #0
 801466e:	d103      	bne.n	8014678 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014672:	f000 fbe9 	bl	8014e48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014676:	e00c      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801467a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801467e:	f023 0301 	bic.w	r3, r3, #1
 8014682:	b2da      	uxtb	r2, r3
 8014684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801468a:	e002      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801468c:	bf00      	nop
 801468e:	e000      	b.n	8014692 <prvProcessReceivedCommands+0x1a6>
					break;
 8014690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014692:	4b08      	ldr	r3, [pc, #32]	@ (80146b4 <prvProcessReceivedCommands+0x1c8>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	1d39      	adds	r1, r7, #4
 8014698:	2200      	movs	r2, #0
 801469a:	4618      	mov	r0, r3
 801469c:	f7fe f9dc 	bl	8012a58 <xQueueReceive>
 80146a0:	4603      	mov	r3, r0
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f47f af26 	bne.w	80144f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80146a8:	bf00      	nop
 80146aa:	bf00      	nop
 80146ac:	3730      	adds	r7, #48	@ 0x30
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	24001d7c 	.word	0x24001d7c

080146b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80146be:	e049      	b.n	8014754 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80146c0:	4b2e      	ldr	r3, [pc, #184]	@ (801477c <prvSwitchTimerLists+0xc4>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	68db      	ldr	r3, [r3, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146ca:	4b2c      	ldr	r3, [pc, #176]	@ (801477c <prvSwitchTimerLists+0xc4>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	68db      	ldr	r3, [r3, #12]
 80146d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	3304      	adds	r3, #4
 80146d8:	4618      	mov	r0, r3
 80146da:	f7fd fe59 	bl	8012390 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	6a1b      	ldr	r3, [r3, #32]
 80146e2:	68f8      	ldr	r0, [r7, #12]
 80146e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80146ec:	f003 0304 	and.w	r3, r3, #4
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d02f      	beq.n	8014754 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	699b      	ldr	r3, [r3, #24]
 80146f8:	693a      	ldr	r2, [r7, #16]
 80146fa:	4413      	add	r3, r2
 80146fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80146fe:	68ba      	ldr	r2, [r7, #8]
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	429a      	cmp	r2, r3
 8014704:	d90e      	bls.n	8014724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	68ba      	ldr	r2, [r7, #8]
 801470a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	68fa      	ldr	r2, [r7, #12]
 8014710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014712:	4b1a      	ldr	r3, [pc, #104]	@ (801477c <prvSwitchTimerLists+0xc4>)
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	3304      	adds	r3, #4
 801471a:	4619      	mov	r1, r3
 801471c:	4610      	mov	r0, r2
 801471e:	f7fd fdfe 	bl	801231e <vListInsert>
 8014722:	e017      	b.n	8014754 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014724:	2300      	movs	r3, #0
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	2300      	movs	r3, #0
 801472a:	693a      	ldr	r2, [r7, #16]
 801472c:	2100      	movs	r1, #0
 801472e:	68f8      	ldr	r0, [r7, #12]
 8014730:	f7ff fd58 	bl	80141e4 <xTimerGenericCommand>
 8014734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d10b      	bne.n	8014754 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	603b      	str	r3, [r7, #0]
}
 801474e:	bf00      	nop
 8014750:	bf00      	nop
 8014752:	e7fd      	b.n	8014750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014754:	4b09      	ldr	r3, [pc, #36]	@ (801477c <prvSwitchTimerLists+0xc4>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d1b0      	bne.n	80146c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801475e:	4b07      	ldr	r3, [pc, #28]	@ (801477c <prvSwitchTimerLists+0xc4>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014764:	4b06      	ldr	r3, [pc, #24]	@ (8014780 <prvSwitchTimerLists+0xc8>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4a04      	ldr	r2, [pc, #16]	@ (801477c <prvSwitchTimerLists+0xc4>)
 801476a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801476c:	4a04      	ldr	r2, [pc, #16]	@ (8014780 <prvSwitchTimerLists+0xc8>)
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	6013      	str	r3, [r2, #0]
}
 8014772:	bf00      	nop
 8014774:	3718      	adds	r7, #24
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	24001d74 	.word	0x24001d74
 8014780:	24001d78 	.word	0x24001d78

08014784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801478a:	f000 f96d 	bl	8014a68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801478e:	4b15      	ldr	r3, [pc, #84]	@ (80147e4 <prvCheckForValidListAndQueue+0x60>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d120      	bne.n	80147d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014796:	4814      	ldr	r0, [pc, #80]	@ (80147e8 <prvCheckForValidListAndQueue+0x64>)
 8014798:	f7fd fd70 	bl	801227c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801479c:	4813      	ldr	r0, [pc, #76]	@ (80147ec <prvCheckForValidListAndQueue+0x68>)
 801479e:	f7fd fd6d 	bl	801227c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80147a2:	4b13      	ldr	r3, [pc, #76]	@ (80147f0 <prvCheckForValidListAndQueue+0x6c>)
 80147a4:	4a10      	ldr	r2, [pc, #64]	@ (80147e8 <prvCheckForValidListAndQueue+0x64>)
 80147a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80147a8:	4b12      	ldr	r3, [pc, #72]	@ (80147f4 <prvCheckForValidListAndQueue+0x70>)
 80147aa:	4a10      	ldr	r2, [pc, #64]	@ (80147ec <prvCheckForValidListAndQueue+0x68>)
 80147ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80147ae:	2300      	movs	r3, #0
 80147b0:	9300      	str	r3, [sp, #0]
 80147b2:	4b11      	ldr	r3, [pc, #68]	@ (80147f8 <prvCheckForValidListAndQueue+0x74>)
 80147b4:	4a11      	ldr	r2, [pc, #68]	@ (80147fc <prvCheckForValidListAndQueue+0x78>)
 80147b6:	2110      	movs	r1, #16
 80147b8:	200a      	movs	r0, #10
 80147ba:	f7fd fe7d 	bl	80124b8 <xQueueGenericCreateStatic>
 80147be:	4603      	mov	r3, r0
 80147c0:	4a08      	ldr	r2, [pc, #32]	@ (80147e4 <prvCheckForValidListAndQueue+0x60>)
 80147c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80147c4:	4b07      	ldr	r3, [pc, #28]	@ (80147e4 <prvCheckForValidListAndQueue+0x60>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d005      	beq.n	80147d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80147cc:	4b05      	ldr	r3, [pc, #20]	@ (80147e4 <prvCheckForValidListAndQueue+0x60>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	490b      	ldr	r1, [pc, #44]	@ (8014800 <prvCheckForValidListAndQueue+0x7c>)
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fe fc5a 	bl	801308c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80147d8:	f000 f978 	bl	8014acc <vPortExitCritical>
}
 80147dc:	bf00      	nop
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	24001d7c 	.word	0x24001d7c
 80147e8:	24001d4c 	.word	0x24001d4c
 80147ec:	24001d60 	.word	0x24001d60
 80147f0:	24001d74 	.word	0x24001d74
 80147f4:	24001d78 	.word	0x24001d78
 80147f8:	24001e28 	.word	0x24001e28
 80147fc:	24001d88 	.word	0x24001d88
 8014800:	08017d54 	.word	0x08017d54

08014804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014804:	b480      	push	{r7}
 8014806:	b085      	sub	sp, #20
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	3b04      	subs	r3, #4
 8014814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801481c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	3b04      	subs	r3, #4
 8014822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	f023 0201 	bic.w	r2, r3, #1
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	3b04      	subs	r3, #4
 8014832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014834:	4a0c      	ldr	r2, [pc, #48]	@ (8014868 <pxPortInitialiseStack+0x64>)
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	3b14      	subs	r3, #20
 801483e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	3b04      	subs	r3, #4
 801484a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	f06f 0202 	mvn.w	r2, #2
 8014852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	3b20      	subs	r3, #32
 8014858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801485a:	68fb      	ldr	r3, [r7, #12]
}
 801485c:	4618      	mov	r0, r3
 801485e:	3714      	adds	r7, #20
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr
 8014868:	0801486d 	.word	0x0801486d

0801486c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014872:	2300      	movs	r3, #0
 8014874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014876:	4b13      	ldr	r3, [pc, #76]	@ (80148c4 <prvTaskExitError+0x58>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801487e:	d00b      	beq.n	8014898 <prvTaskExitError+0x2c>
	__asm volatile
 8014880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014884:	f383 8811 	msr	BASEPRI, r3
 8014888:	f3bf 8f6f 	isb	sy
 801488c:	f3bf 8f4f 	dsb	sy
 8014890:	60fb      	str	r3, [r7, #12]
}
 8014892:	bf00      	nop
 8014894:	bf00      	nop
 8014896:	e7fd      	b.n	8014894 <prvTaskExitError+0x28>
	__asm volatile
 8014898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801489c:	f383 8811 	msr	BASEPRI, r3
 80148a0:	f3bf 8f6f 	isb	sy
 80148a4:	f3bf 8f4f 	dsb	sy
 80148a8:	60bb      	str	r3, [r7, #8]
}
 80148aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80148ac:	bf00      	nop
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d0fc      	beq.n	80148ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80148b4:	bf00      	nop
 80148b6:	bf00      	nop
 80148b8:	3714      	adds	r7, #20
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr
 80148c2:	bf00      	nop
 80148c4:	240000a4 	.word	0x240000a4
	...

080148d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80148d0:	4b07      	ldr	r3, [pc, #28]	@ (80148f0 <pxCurrentTCBConst2>)
 80148d2:	6819      	ldr	r1, [r3, #0]
 80148d4:	6808      	ldr	r0, [r1, #0]
 80148d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148da:	f380 8809 	msr	PSP, r0
 80148de:	f3bf 8f6f 	isb	sy
 80148e2:	f04f 0000 	mov.w	r0, #0
 80148e6:	f380 8811 	msr	BASEPRI, r0
 80148ea:	4770      	bx	lr
 80148ec:	f3af 8000 	nop.w

080148f0 <pxCurrentTCBConst2>:
 80148f0:	2400184c 	.word	0x2400184c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop

080148f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80148f8:	4808      	ldr	r0, [pc, #32]	@ (801491c <prvPortStartFirstTask+0x24>)
 80148fa:	6800      	ldr	r0, [r0, #0]
 80148fc:	6800      	ldr	r0, [r0, #0]
 80148fe:	f380 8808 	msr	MSP, r0
 8014902:	f04f 0000 	mov.w	r0, #0
 8014906:	f380 8814 	msr	CONTROL, r0
 801490a:	b662      	cpsie	i
 801490c:	b661      	cpsie	f
 801490e:	f3bf 8f4f 	dsb	sy
 8014912:	f3bf 8f6f 	isb	sy
 8014916:	df00      	svc	0
 8014918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801491a:	bf00      	nop
 801491c:	e000ed08 	.word	0xe000ed08

08014920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b086      	sub	sp, #24
 8014924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014926:	4b47      	ldr	r3, [pc, #284]	@ (8014a44 <xPortStartScheduler+0x124>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	4a47      	ldr	r2, [pc, #284]	@ (8014a48 <xPortStartScheduler+0x128>)
 801492c:	4293      	cmp	r3, r2
 801492e:	d10b      	bne.n	8014948 <xPortStartScheduler+0x28>
	__asm volatile
 8014930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014934:	f383 8811 	msr	BASEPRI, r3
 8014938:	f3bf 8f6f 	isb	sy
 801493c:	f3bf 8f4f 	dsb	sy
 8014940:	60fb      	str	r3, [r7, #12]
}
 8014942:	bf00      	nop
 8014944:	bf00      	nop
 8014946:	e7fd      	b.n	8014944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014948:	4b3e      	ldr	r3, [pc, #248]	@ (8014a44 <xPortStartScheduler+0x124>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	4a3f      	ldr	r2, [pc, #252]	@ (8014a4c <xPortStartScheduler+0x12c>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d10b      	bne.n	801496a <xPortStartScheduler+0x4a>
	__asm volatile
 8014952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014956:	f383 8811 	msr	BASEPRI, r3
 801495a:	f3bf 8f6f 	isb	sy
 801495e:	f3bf 8f4f 	dsb	sy
 8014962:	613b      	str	r3, [r7, #16]
}
 8014964:	bf00      	nop
 8014966:	bf00      	nop
 8014968:	e7fd      	b.n	8014966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801496a:	4b39      	ldr	r3, [pc, #228]	@ (8014a50 <xPortStartScheduler+0x130>)
 801496c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	b2db      	uxtb	r3, r3
 8014974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	22ff      	movs	r2, #255	@ 0xff
 801497a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	b2db      	uxtb	r3, r3
 8014982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014984:	78fb      	ldrb	r3, [r7, #3]
 8014986:	b2db      	uxtb	r3, r3
 8014988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801498c:	b2da      	uxtb	r2, r3
 801498e:	4b31      	ldr	r3, [pc, #196]	@ (8014a54 <xPortStartScheduler+0x134>)
 8014990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014992:	4b31      	ldr	r3, [pc, #196]	@ (8014a58 <xPortStartScheduler+0x138>)
 8014994:	2207      	movs	r2, #7
 8014996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014998:	e009      	b.n	80149ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801499a:	4b2f      	ldr	r3, [pc, #188]	@ (8014a58 <xPortStartScheduler+0x138>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	3b01      	subs	r3, #1
 80149a0:	4a2d      	ldr	r2, [pc, #180]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80149a4:	78fb      	ldrb	r3, [r7, #3]
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	005b      	lsls	r3, r3, #1
 80149aa:	b2db      	uxtb	r3, r3
 80149ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80149ae:	78fb      	ldrb	r3, [r7, #3]
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80149b6:	2b80      	cmp	r3, #128	@ 0x80
 80149b8:	d0ef      	beq.n	801499a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80149ba:	4b27      	ldr	r3, [pc, #156]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	f1c3 0307 	rsb	r3, r3, #7
 80149c2:	2b04      	cmp	r3, #4
 80149c4:	d00b      	beq.n	80149de <xPortStartScheduler+0xbe>
	__asm volatile
 80149c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149ca:	f383 8811 	msr	BASEPRI, r3
 80149ce:	f3bf 8f6f 	isb	sy
 80149d2:	f3bf 8f4f 	dsb	sy
 80149d6:	60bb      	str	r3, [r7, #8]
}
 80149d8:	bf00      	nop
 80149da:	bf00      	nop
 80149dc:	e7fd      	b.n	80149da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80149de:	4b1e      	ldr	r3, [pc, #120]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	021b      	lsls	r3, r3, #8
 80149e4:	4a1c      	ldr	r2, [pc, #112]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80149e8:	4b1b      	ldr	r3, [pc, #108]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80149f0:	4a19      	ldr	r2, [pc, #100]	@ (8014a58 <xPortStartScheduler+0x138>)
 80149f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	b2da      	uxtb	r2, r3
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80149fc:	4b17      	ldr	r3, [pc, #92]	@ (8014a5c <xPortStartScheduler+0x13c>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	4a16      	ldr	r2, [pc, #88]	@ (8014a5c <xPortStartScheduler+0x13c>)
 8014a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014a08:	4b14      	ldr	r3, [pc, #80]	@ (8014a5c <xPortStartScheduler+0x13c>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	4a13      	ldr	r2, [pc, #76]	@ (8014a5c <xPortStartScheduler+0x13c>)
 8014a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014a14:	f000 f8da 	bl	8014bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014a18:	4b11      	ldr	r3, [pc, #68]	@ (8014a60 <xPortStartScheduler+0x140>)
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014a1e:	f000 f8f9 	bl	8014c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014a22:	4b10      	ldr	r3, [pc, #64]	@ (8014a64 <xPortStartScheduler+0x144>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	4a0f      	ldr	r2, [pc, #60]	@ (8014a64 <xPortStartScheduler+0x144>)
 8014a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a2e:	f7ff ff63 	bl	80148f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a32:	f7fe ff2d 	bl	8013890 <vTaskSwitchContext>
	prvTaskExitError();
 8014a36:	f7ff ff19 	bl	801486c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a3a:	2300      	movs	r3, #0
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3718      	adds	r7, #24
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}
 8014a44:	e000ed00 	.word	0xe000ed00
 8014a48:	410fc271 	.word	0x410fc271
 8014a4c:	410fc270 	.word	0x410fc270
 8014a50:	e000e400 	.word	0xe000e400
 8014a54:	24001e78 	.word	0x24001e78
 8014a58:	24001e7c 	.word	0x24001e7c
 8014a5c:	e000ed20 	.word	0xe000ed20
 8014a60:	240000a4 	.word	0x240000a4
 8014a64:	e000ef34 	.word	0xe000ef34

08014a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a72:	f383 8811 	msr	BASEPRI, r3
 8014a76:	f3bf 8f6f 	isb	sy
 8014a7a:	f3bf 8f4f 	dsb	sy
 8014a7e:	607b      	str	r3, [r7, #4]
}
 8014a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a82:	4b10      	ldr	r3, [pc, #64]	@ (8014ac4 <vPortEnterCritical+0x5c>)
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	3301      	adds	r3, #1
 8014a88:	4a0e      	ldr	r2, [pc, #56]	@ (8014ac4 <vPortEnterCritical+0x5c>)
 8014a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8014ac4 <vPortEnterCritical+0x5c>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d110      	bne.n	8014ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014a94:	4b0c      	ldr	r3, [pc, #48]	@ (8014ac8 <vPortEnterCritical+0x60>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00b      	beq.n	8014ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8014a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa2:	f383 8811 	msr	BASEPRI, r3
 8014aa6:	f3bf 8f6f 	isb	sy
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	603b      	str	r3, [r7, #0]
}
 8014ab0:	bf00      	nop
 8014ab2:	bf00      	nop
 8014ab4:	e7fd      	b.n	8014ab2 <vPortEnterCritical+0x4a>
	}
}
 8014ab6:	bf00      	nop
 8014ab8:	370c      	adds	r7, #12
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	240000a4 	.word	0x240000a4
 8014ac8:	e000ed04 	.word	0xe000ed04

08014acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014ad2:	4b12      	ldr	r3, [pc, #72]	@ (8014b1c <vPortExitCritical+0x50>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d10b      	bne.n	8014af2 <vPortExitCritical+0x26>
	__asm volatile
 8014ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ade:	f383 8811 	msr	BASEPRI, r3
 8014ae2:	f3bf 8f6f 	isb	sy
 8014ae6:	f3bf 8f4f 	dsb	sy
 8014aea:	607b      	str	r3, [r7, #4]
}
 8014aec:	bf00      	nop
 8014aee:	bf00      	nop
 8014af0:	e7fd      	b.n	8014aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014af2:	4b0a      	ldr	r3, [pc, #40]	@ (8014b1c <vPortExitCritical+0x50>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	3b01      	subs	r3, #1
 8014af8:	4a08      	ldr	r2, [pc, #32]	@ (8014b1c <vPortExitCritical+0x50>)
 8014afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014afc:	4b07      	ldr	r3, [pc, #28]	@ (8014b1c <vPortExitCritical+0x50>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d105      	bne.n	8014b10 <vPortExitCritical+0x44>
 8014b04:	2300      	movs	r3, #0
 8014b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	f383 8811 	msr	BASEPRI, r3
}
 8014b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014b10:	bf00      	nop
 8014b12:	370c      	adds	r7, #12
 8014b14:	46bd      	mov	sp, r7
 8014b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1a:	4770      	bx	lr
 8014b1c:	240000a4 	.word	0x240000a4

08014b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b20:	f3ef 8009 	mrs	r0, PSP
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	4b15      	ldr	r3, [pc, #84]	@ (8014b80 <pxCurrentTCBConst>)
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	f01e 0f10 	tst.w	lr, #16
 8014b30:	bf08      	it	eq
 8014b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b3a:	6010      	str	r0, [r2, #0]
 8014b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014b44:	f380 8811 	msr	BASEPRI, r0
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	f3bf 8f6f 	isb	sy
 8014b50:	f7fe fe9e 	bl	8013890 <vTaskSwitchContext>
 8014b54:	f04f 0000 	mov.w	r0, #0
 8014b58:	f380 8811 	msr	BASEPRI, r0
 8014b5c:	bc09      	pop	{r0, r3}
 8014b5e:	6819      	ldr	r1, [r3, #0]
 8014b60:	6808      	ldr	r0, [r1, #0]
 8014b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b66:	f01e 0f10 	tst.w	lr, #16
 8014b6a:	bf08      	it	eq
 8014b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014b70:	f380 8809 	msr	PSP, r0
 8014b74:	f3bf 8f6f 	isb	sy
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	f3af 8000 	nop.w

08014b80 <pxCurrentTCBConst>:
 8014b80:	2400184c 	.word	0x2400184c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b84:	bf00      	nop
 8014b86:	bf00      	nop

08014b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b92:	f383 8811 	msr	BASEPRI, r3
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	607b      	str	r3, [r7, #4]
}
 8014ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ba2:	f7fe fdbb 	bl	801371c <xTaskIncrementTick>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d003      	beq.n	8014bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014bac:	4b06      	ldr	r3, [pc, #24]	@ (8014bc8 <xPortSysTickHandler+0x40>)
 8014bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014bb2:	601a      	str	r2, [r3, #0]
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	f383 8811 	msr	BASEPRI, r3
}
 8014bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014bc0:	bf00      	nop
 8014bc2:	3708      	adds	r7, #8
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	e000ed04 	.word	0xe000ed04

08014bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014bcc:	b480      	push	{r7}
 8014bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8014c00 <vPortSetupTimerInterrupt+0x34>)
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8014c04 <vPortSetupTimerInterrupt+0x38>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8014c08 <vPortSetupTimerInterrupt+0x3c>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4a0a      	ldr	r2, [pc, #40]	@ (8014c0c <vPortSetupTimerInterrupt+0x40>)
 8014be2:	fba2 2303 	umull	r2, r3, r2, r3
 8014be6:	099b      	lsrs	r3, r3, #6
 8014be8:	4a09      	ldr	r2, [pc, #36]	@ (8014c10 <vPortSetupTimerInterrupt+0x44>)
 8014bea:	3b01      	subs	r3, #1
 8014bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014bee:	4b04      	ldr	r3, [pc, #16]	@ (8014c00 <vPortSetupTimerInterrupt+0x34>)
 8014bf0:	2207      	movs	r2, #7
 8014bf2:	601a      	str	r2, [r3, #0]
}
 8014bf4:	bf00      	nop
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr
 8014bfe:	bf00      	nop
 8014c00:	e000e010 	.word	0xe000e010
 8014c04:	e000e018 	.word	0xe000e018
 8014c08:	24000094 	.word	0x24000094
 8014c0c:	10624dd3 	.word	0x10624dd3
 8014c10:	e000e014 	.word	0xe000e014

08014c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014c24 <vPortEnableVFP+0x10>
 8014c18:	6801      	ldr	r1, [r0, #0]
 8014c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014c1e:	6001      	str	r1, [r0, #0]
 8014c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014c22:	bf00      	nop
 8014c24:	e000ed88 	.word	0xe000ed88

08014c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c28:	b480      	push	{r7}
 8014c2a:	b085      	sub	sp, #20
 8014c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c2e:	f3ef 8305 	mrs	r3, IPSR
 8014c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2b0f      	cmp	r3, #15
 8014c38:	d915      	bls.n	8014c66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c3a:	4a18      	ldr	r2, [pc, #96]	@ (8014c9c <vPortValidateInterruptPriority+0x74>)
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	4413      	add	r3, r2
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c44:	4b16      	ldr	r3, [pc, #88]	@ (8014ca0 <vPortValidateInterruptPriority+0x78>)
 8014c46:	781b      	ldrb	r3, [r3, #0]
 8014c48:	7afa      	ldrb	r2, [r7, #11]
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	d20b      	bcs.n	8014c66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c52:	f383 8811 	msr	BASEPRI, r3
 8014c56:	f3bf 8f6f 	isb	sy
 8014c5a:	f3bf 8f4f 	dsb	sy
 8014c5e:	607b      	str	r3, [r7, #4]
}
 8014c60:	bf00      	nop
 8014c62:	bf00      	nop
 8014c64:	e7fd      	b.n	8014c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c66:	4b0f      	ldr	r3, [pc, #60]	@ (8014ca4 <vPortValidateInterruptPriority+0x7c>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8014ca8 <vPortValidateInterruptPriority+0x80>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d90b      	bls.n	8014c8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	603b      	str	r3, [r7, #0]
}
 8014c88:	bf00      	nop
 8014c8a:	bf00      	nop
 8014c8c:	e7fd      	b.n	8014c8a <vPortValidateInterruptPriority+0x62>
	}
 8014c8e:	bf00      	nop
 8014c90:	3714      	adds	r7, #20
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr
 8014c9a:	bf00      	nop
 8014c9c:	e000e3f0 	.word	0xe000e3f0
 8014ca0:	24001e78 	.word	0x24001e78
 8014ca4:	e000ed0c 	.word	0xe000ed0c
 8014ca8:	24001e7c 	.word	0x24001e7c

08014cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b08a      	sub	sp, #40	@ 0x28
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014cb8:	f7fe fc74 	bl	80135a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8014e30 <pvPortMalloc+0x184>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d101      	bne.n	8014cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014cc4:	f000 f924 	bl	8014f10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8014e34 <pvPortMalloc+0x188>)
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	4013      	ands	r3, r2
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f040 8095 	bne.w	8014e00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d01e      	beq.n	8014d1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014cdc:	2208      	movs	r2, #8
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f003 0307 	and.w	r3, r3, #7
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d015      	beq.n	8014d1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f023 0307 	bic.w	r3, r3, #7
 8014cf4:	3308      	adds	r3, #8
 8014cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f003 0307 	and.w	r3, r3, #7
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d00b      	beq.n	8014d1a <pvPortMalloc+0x6e>
	__asm volatile
 8014d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d06:	f383 8811 	msr	BASEPRI, r3
 8014d0a:	f3bf 8f6f 	isb	sy
 8014d0e:	f3bf 8f4f 	dsb	sy
 8014d12:	617b      	str	r3, [r7, #20]
}
 8014d14:	bf00      	nop
 8014d16:	bf00      	nop
 8014d18:	e7fd      	b.n	8014d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d06f      	beq.n	8014e00 <pvPortMalloc+0x154>
 8014d20:	4b45      	ldr	r3, [pc, #276]	@ (8014e38 <pvPortMalloc+0x18c>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d86a      	bhi.n	8014e00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014d2a:	4b44      	ldr	r3, [pc, #272]	@ (8014e3c <pvPortMalloc+0x190>)
 8014d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014d2e:	4b43      	ldr	r3, [pc, #268]	@ (8014e3c <pvPortMalloc+0x190>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d34:	e004      	b.n	8014d40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d903      	bls.n	8014d52 <pvPortMalloc+0xa6>
 8014d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d1f1      	bne.n	8014d36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d52:	4b37      	ldr	r3, [pc, #220]	@ (8014e30 <pvPortMalloc+0x184>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d051      	beq.n	8014e00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d5c:	6a3b      	ldr	r3, [r7, #32]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2208      	movs	r2, #8
 8014d62:	4413      	add	r3, r2
 8014d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	6a3b      	ldr	r3, [r7, #32]
 8014d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d70:	685a      	ldr	r2, [r3, #4]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	1ad2      	subs	r2, r2, r3
 8014d76:	2308      	movs	r3, #8
 8014d78:	005b      	lsls	r3, r3, #1
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d920      	bls.n	8014dc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4413      	add	r3, r2
 8014d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	f003 0307 	and.w	r3, r3, #7
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d00b      	beq.n	8014da8 <pvPortMalloc+0xfc>
	__asm volatile
 8014d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d94:	f383 8811 	msr	BASEPRI, r3
 8014d98:	f3bf 8f6f 	isb	sy
 8014d9c:	f3bf 8f4f 	dsb	sy
 8014da0:	613b      	str	r3, [r7, #16]
}
 8014da2:	bf00      	nop
 8014da4:	bf00      	nop
 8014da6:	e7fd      	b.n	8014da4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014daa:	685a      	ldr	r2, [r3, #4]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	1ad2      	subs	r2, r2, r3
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014dba:	69b8      	ldr	r0, [r7, #24]
 8014dbc:	f000 f90a 	bl	8014fd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8014e38 <pvPortMalloc+0x18c>)
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	4a1b      	ldr	r2, [pc, #108]	@ (8014e38 <pvPortMalloc+0x18c>)
 8014dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014dce:	4b1a      	ldr	r3, [pc, #104]	@ (8014e38 <pvPortMalloc+0x18c>)
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8014e40 <pvPortMalloc+0x194>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d203      	bcs.n	8014de2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014dda:	4b17      	ldr	r3, [pc, #92]	@ (8014e38 <pvPortMalloc+0x18c>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	4a18      	ldr	r2, [pc, #96]	@ (8014e40 <pvPortMalloc+0x194>)
 8014de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de4:	685a      	ldr	r2, [r3, #4]
 8014de6:	4b13      	ldr	r3, [pc, #76]	@ (8014e34 <pvPortMalloc+0x188>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	431a      	orrs	r2, r3
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df2:	2200      	movs	r2, #0
 8014df4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014df6:	4b13      	ldr	r3, [pc, #76]	@ (8014e44 <pvPortMalloc+0x198>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	4a11      	ldr	r2, [pc, #68]	@ (8014e44 <pvPortMalloc+0x198>)
 8014dfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014e00:	f7fe fbde 	bl	80135c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	f003 0307 	and.w	r3, r3, #7
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00b      	beq.n	8014e26 <pvPortMalloc+0x17a>
	__asm volatile
 8014e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e12:	f383 8811 	msr	BASEPRI, r3
 8014e16:	f3bf 8f6f 	isb	sy
 8014e1a:	f3bf 8f4f 	dsb	sy
 8014e1e:	60fb      	str	r3, [r7, #12]
}
 8014e20:	bf00      	nop
 8014e22:	bf00      	nop
 8014e24:	e7fd      	b.n	8014e22 <pvPortMalloc+0x176>
	return pvReturn;
 8014e26:	69fb      	ldr	r3, [r7, #28]
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3728      	adds	r7, #40	@ 0x28
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	24005a88 	.word	0x24005a88
 8014e34:	24005a9c 	.word	0x24005a9c
 8014e38:	24005a8c 	.word	0x24005a8c
 8014e3c:	24005a80 	.word	0x24005a80
 8014e40:	24005a90 	.word	0x24005a90
 8014e44:	24005a94 	.word	0x24005a94

08014e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b086      	sub	sp, #24
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d04f      	beq.n	8014efa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e5a:	2308      	movs	r3, #8
 8014e5c:	425b      	negs	r3, r3
 8014e5e:	697a      	ldr	r2, [r7, #20]
 8014e60:	4413      	add	r3, r2
 8014e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	685a      	ldr	r2, [r3, #4]
 8014e6c:	4b25      	ldr	r3, [pc, #148]	@ (8014f04 <vPortFree+0xbc>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4013      	ands	r3, r2
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d10b      	bne.n	8014e8e <vPortFree+0x46>
	__asm volatile
 8014e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e7a:	f383 8811 	msr	BASEPRI, r3
 8014e7e:	f3bf 8f6f 	isb	sy
 8014e82:	f3bf 8f4f 	dsb	sy
 8014e86:	60fb      	str	r3, [r7, #12]
}
 8014e88:	bf00      	nop
 8014e8a:	bf00      	nop
 8014e8c:	e7fd      	b.n	8014e8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d00b      	beq.n	8014eae <vPortFree+0x66>
	__asm volatile
 8014e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e9a:	f383 8811 	msr	BASEPRI, r3
 8014e9e:	f3bf 8f6f 	isb	sy
 8014ea2:	f3bf 8f4f 	dsb	sy
 8014ea6:	60bb      	str	r3, [r7, #8]
}
 8014ea8:	bf00      	nop
 8014eaa:	bf00      	nop
 8014eac:	e7fd      	b.n	8014eaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	685a      	ldr	r2, [r3, #4]
 8014eb2:	4b14      	ldr	r3, [pc, #80]	@ (8014f04 <vPortFree+0xbc>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4013      	ands	r3, r2
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d01e      	beq.n	8014efa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ebc:	693b      	ldr	r3, [r7, #16]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d11a      	bne.n	8014efa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	685a      	ldr	r2, [r3, #4]
 8014ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f04 <vPortFree+0xbc>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	43db      	mvns	r3, r3
 8014ece:	401a      	ands	r2, r3
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ed4:	f7fe fb66 	bl	80135a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	685a      	ldr	r2, [r3, #4]
 8014edc:	4b0a      	ldr	r3, [pc, #40]	@ (8014f08 <vPortFree+0xc0>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	4a09      	ldr	r2, [pc, #36]	@ (8014f08 <vPortFree+0xc0>)
 8014ee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014ee6:	6938      	ldr	r0, [r7, #16]
 8014ee8:	f000 f874 	bl	8014fd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014eec:	4b07      	ldr	r3, [pc, #28]	@ (8014f0c <vPortFree+0xc4>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	4a06      	ldr	r2, [pc, #24]	@ (8014f0c <vPortFree+0xc4>)
 8014ef4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014ef6:	f7fe fb63 	bl	80135c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014efa:	bf00      	nop
 8014efc:	3718      	adds	r7, #24
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	24005a9c 	.word	0x24005a9c
 8014f08:	24005a8c 	.word	0x24005a8c
 8014f0c:	24005a98 	.word	0x24005a98

08014f10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014f16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8014f1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014f1c:	4b27      	ldr	r3, [pc, #156]	@ (8014fbc <prvHeapInit+0xac>)
 8014f1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	f003 0307 	and.w	r3, r3, #7
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d00c      	beq.n	8014f44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	3307      	adds	r3, #7
 8014f2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f023 0307 	bic.w	r3, r3, #7
 8014f36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	1ad3      	subs	r3, r2, r3
 8014f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8014fbc <prvHeapInit+0xac>)
 8014f40:	4413      	add	r3, r2
 8014f42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f48:	4a1d      	ldr	r2, [pc, #116]	@ (8014fc0 <prvHeapInit+0xb0>)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8014fc0 <prvHeapInit+0xb0>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	68ba      	ldr	r2, [r7, #8]
 8014f58:	4413      	add	r3, r2
 8014f5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f5c:	2208      	movs	r2, #8
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	1a9b      	subs	r3, r3, r2
 8014f62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f023 0307 	bic.w	r3, r3, #7
 8014f6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	4a15      	ldr	r2, [pc, #84]	@ (8014fc4 <prvHeapInit+0xb4>)
 8014f70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f72:	4b14      	ldr	r3, [pc, #80]	@ (8014fc4 <prvHeapInit+0xb4>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2200      	movs	r2, #0
 8014f78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f7a:	4b12      	ldr	r3, [pc, #72]	@ (8014fc4 <prvHeapInit+0xb4>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	68fa      	ldr	r2, [r7, #12]
 8014f8a:	1ad2      	subs	r2, r2, r3
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f90:	4b0c      	ldr	r3, [pc, #48]	@ (8014fc4 <prvHeapInit+0xb4>)
 8014f92:	681a      	ldr	r2, [r3, #0]
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8014fc8 <prvHeapInit+0xb8>)
 8014f9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	4a09      	ldr	r2, [pc, #36]	@ (8014fcc <prvHeapInit+0xbc>)
 8014fa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014fa8:	4b09      	ldr	r3, [pc, #36]	@ (8014fd0 <prvHeapInit+0xc0>)
 8014faa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014fae:	601a      	str	r2, [r3, #0]
}
 8014fb0:	bf00      	nop
 8014fb2:	3714      	adds	r7, #20
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	24001e80 	.word	0x24001e80
 8014fc0:	24005a80 	.word	0x24005a80
 8014fc4:	24005a88 	.word	0x24005a88
 8014fc8:	24005a90 	.word	0x24005a90
 8014fcc:	24005a8c 	.word	0x24005a8c
 8014fd0:	24005a9c 	.word	0x24005a9c

08014fd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b085      	sub	sp, #20
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014fdc:	4b28      	ldr	r3, [pc, #160]	@ (8015080 <prvInsertBlockIntoFreeList+0xac>)
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	e002      	b.n	8014fe8 <prvInsertBlockIntoFreeList+0x14>
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	60fb      	str	r3, [r7, #12]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d8f7      	bhi.n	8014fe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	68ba      	ldr	r2, [r7, #8]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	429a      	cmp	r2, r3
 8015002:	d108      	bne.n	8015016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	685a      	ldr	r2, [r3, #4]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	441a      	add	r2, r3
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	68ba      	ldr	r2, [r7, #8]
 8015020:	441a      	add	r2, r3
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	429a      	cmp	r2, r3
 8015028:	d118      	bne.n	801505c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	4b15      	ldr	r3, [pc, #84]	@ (8015084 <prvInsertBlockIntoFreeList+0xb0>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	429a      	cmp	r2, r3
 8015034:	d00d      	beq.n	8015052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	685a      	ldr	r2, [r3, #4]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	441a      	add	r2, r3
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	601a      	str	r2, [r3, #0]
 8015050:	e008      	b.n	8015064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015052:	4b0c      	ldr	r3, [pc, #48]	@ (8015084 <prvInsertBlockIntoFreeList+0xb0>)
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	601a      	str	r2, [r3, #0]
 801505a:	e003      	b.n	8015064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015064:	68fa      	ldr	r2, [r7, #12]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	429a      	cmp	r2, r3
 801506a:	d002      	beq.n	8015072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015072:	bf00      	nop
 8015074:	3714      	adds	r7, #20
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	24005a80 	.word	0x24005a80
 8015084:	24005a88 	.word	0x24005a88

08015088 <__cvt>:
 8015088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801508a:	ed2d 8b02 	vpush	{d8}
 801508e:	eeb0 8b40 	vmov.f64	d8, d0
 8015092:	b085      	sub	sp, #20
 8015094:	4617      	mov	r7, r2
 8015096:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015098:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801509a:	ee18 2a90 	vmov	r2, s17
 801509e:	f025 0520 	bic.w	r5, r5, #32
 80150a2:	2a00      	cmp	r2, #0
 80150a4:	bfb6      	itet	lt
 80150a6:	222d      	movlt	r2, #45	@ 0x2d
 80150a8:	2200      	movge	r2, #0
 80150aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80150ae:	2d46      	cmp	r5, #70	@ 0x46
 80150b0:	460c      	mov	r4, r1
 80150b2:	701a      	strb	r2, [r3, #0]
 80150b4:	d004      	beq.n	80150c0 <__cvt+0x38>
 80150b6:	2d45      	cmp	r5, #69	@ 0x45
 80150b8:	d100      	bne.n	80150bc <__cvt+0x34>
 80150ba:	3401      	adds	r4, #1
 80150bc:	2102      	movs	r1, #2
 80150be:	e000      	b.n	80150c2 <__cvt+0x3a>
 80150c0:	2103      	movs	r1, #3
 80150c2:	ab03      	add	r3, sp, #12
 80150c4:	9301      	str	r3, [sp, #4]
 80150c6:	ab02      	add	r3, sp, #8
 80150c8:	9300      	str	r3, [sp, #0]
 80150ca:	4622      	mov	r2, r4
 80150cc:	4633      	mov	r3, r6
 80150ce:	eeb0 0b48 	vmov.f64	d0, d8
 80150d2:	f000 ff41 	bl	8015f58 <_dtoa_r>
 80150d6:	2d47      	cmp	r5, #71	@ 0x47
 80150d8:	d114      	bne.n	8015104 <__cvt+0x7c>
 80150da:	07fb      	lsls	r3, r7, #31
 80150dc:	d50a      	bpl.n	80150f4 <__cvt+0x6c>
 80150de:	1902      	adds	r2, r0, r4
 80150e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80150e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e8:	bf08      	it	eq
 80150ea:	9203      	streq	r2, [sp, #12]
 80150ec:	2130      	movs	r1, #48	@ 0x30
 80150ee:	9b03      	ldr	r3, [sp, #12]
 80150f0:	4293      	cmp	r3, r2
 80150f2:	d319      	bcc.n	8015128 <__cvt+0xa0>
 80150f4:	9b03      	ldr	r3, [sp, #12]
 80150f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80150f8:	1a1b      	subs	r3, r3, r0
 80150fa:	6013      	str	r3, [r2, #0]
 80150fc:	b005      	add	sp, #20
 80150fe:	ecbd 8b02 	vpop	{d8}
 8015102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015104:	2d46      	cmp	r5, #70	@ 0x46
 8015106:	eb00 0204 	add.w	r2, r0, r4
 801510a:	d1e9      	bne.n	80150e0 <__cvt+0x58>
 801510c:	7803      	ldrb	r3, [r0, #0]
 801510e:	2b30      	cmp	r3, #48	@ 0x30
 8015110:	d107      	bne.n	8015122 <__cvt+0x9a>
 8015112:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511a:	bf1c      	itt	ne
 801511c:	f1c4 0401 	rsbne	r4, r4, #1
 8015120:	6034      	strne	r4, [r6, #0]
 8015122:	6833      	ldr	r3, [r6, #0]
 8015124:	441a      	add	r2, r3
 8015126:	e7db      	b.n	80150e0 <__cvt+0x58>
 8015128:	1c5c      	adds	r4, r3, #1
 801512a:	9403      	str	r4, [sp, #12]
 801512c:	7019      	strb	r1, [r3, #0]
 801512e:	e7de      	b.n	80150ee <__cvt+0x66>

08015130 <__exponent>:
 8015130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015132:	2900      	cmp	r1, #0
 8015134:	bfba      	itte	lt
 8015136:	4249      	neglt	r1, r1
 8015138:	232d      	movlt	r3, #45	@ 0x2d
 801513a:	232b      	movge	r3, #43	@ 0x2b
 801513c:	2909      	cmp	r1, #9
 801513e:	7002      	strb	r2, [r0, #0]
 8015140:	7043      	strb	r3, [r0, #1]
 8015142:	dd29      	ble.n	8015198 <__exponent+0x68>
 8015144:	f10d 0307 	add.w	r3, sp, #7
 8015148:	461d      	mov	r5, r3
 801514a:	270a      	movs	r7, #10
 801514c:	461a      	mov	r2, r3
 801514e:	fbb1 f6f7 	udiv	r6, r1, r7
 8015152:	fb07 1416 	mls	r4, r7, r6, r1
 8015156:	3430      	adds	r4, #48	@ 0x30
 8015158:	f802 4c01 	strb.w	r4, [r2, #-1]
 801515c:	460c      	mov	r4, r1
 801515e:	2c63      	cmp	r4, #99	@ 0x63
 8015160:	f103 33ff 	add.w	r3, r3, #4294967295
 8015164:	4631      	mov	r1, r6
 8015166:	dcf1      	bgt.n	801514c <__exponent+0x1c>
 8015168:	3130      	adds	r1, #48	@ 0x30
 801516a:	1e94      	subs	r4, r2, #2
 801516c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015170:	1c41      	adds	r1, r0, #1
 8015172:	4623      	mov	r3, r4
 8015174:	42ab      	cmp	r3, r5
 8015176:	d30a      	bcc.n	801518e <__exponent+0x5e>
 8015178:	f10d 0309 	add.w	r3, sp, #9
 801517c:	1a9b      	subs	r3, r3, r2
 801517e:	42ac      	cmp	r4, r5
 8015180:	bf88      	it	hi
 8015182:	2300      	movhi	r3, #0
 8015184:	3302      	adds	r3, #2
 8015186:	4403      	add	r3, r0
 8015188:	1a18      	subs	r0, r3, r0
 801518a:	b003      	add	sp, #12
 801518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801518e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015192:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015196:	e7ed      	b.n	8015174 <__exponent+0x44>
 8015198:	2330      	movs	r3, #48	@ 0x30
 801519a:	3130      	adds	r1, #48	@ 0x30
 801519c:	7083      	strb	r3, [r0, #2]
 801519e:	70c1      	strb	r1, [r0, #3]
 80151a0:	1d03      	adds	r3, r0, #4
 80151a2:	e7f1      	b.n	8015188 <__exponent+0x58>
 80151a4:	0000      	movs	r0, r0
	...

080151a8 <_printf_float>:
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ac:	b08d      	sub	sp, #52	@ 0x34
 80151ae:	460c      	mov	r4, r1
 80151b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80151b4:	4616      	mov	r6, r2
 80151b6:	461f      	mov	r7, r3
 80151b8:	4605      	mov	r5, r0
 80151ba:	f000 fd5f 	bl	8015c7c <_localeconv_r>
 80151be:	f8d0 b000 	ldr.w	fp, [r0]
 80151c2:	4658      	mov	r0, fp
 80151c4:	f7eb f8dc 	bl	8000380 <strlen>
 80151c8:	2300      	movs	r3, #0
 80151ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80151cc:	f8d8 3000 	ldr.w	r3, [r8]
 80151d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80151d4:	6822      	ldr	r2, [r4, #0]
 80151d6:	9005      	str	r0, [sp, #20]
 80151d8:	3307      	adds	r3, #7
 80151da:	f023 0307 	bic.w	r3, r3, #7
 80151de:	f103 0108 	add.w	r1, r3, #8
 80151e2:	f8c8 1000 	str.w	r1, [r8]
 80151e6:	ed93 0b00 	vldr	d0, [r3]
 80151ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015448 <_printf_float+0x2a0>
 80151ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80151f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80151f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80151fe:	dd24      	ble.n	801524a <_printf_float+0xa2>
 8015200:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015208:	d502      	bpl.n	8015210 <_printf_float+0x68>
 801520a:	232d      	movs	r3, #45	@ 0x2d
 801520c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015210:	498f      	ldr	r1, [pc, #572]	@ (8015450 <_printf_float+0x2a8>)
 8015212:	4b90      	ldr	r3, [pc, #576]	@ (8015454 <_printf_float+0x2ac>)
 8015214:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015218:	bf8c      	ite	hi
 801521a:	4688      	movhi	r8, r1
 801521c:	4698      	movls	r8, r3
 801521e:	f022 0204 	bic.w	r2, r2, #4
 8015222:	2303      	movs	r3, #3
 8015224:	6123      	str	r3, [r4, #16]
 8015226:	6022      	str	r2, [r4, #0]
 8015228:	f04f 0a00 	mov.w	sl, #0
 801522c:	9700      	str	r7, [sp, #0]
 801522e:	4633      	mov	r3, r6
 8015230:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015232:	4621      	mov	r1, r4
 8015234:	4628      	mov	r0, r5
 8015236:	f000 f9d1 	bl	80155dc <_printf_common>
 801523a:	3001      	adds	r0, #1
 801523c:	f040 8089 	bne.w	8015352 <_printf_float+0x1aa>
 8015240:	f04f 30ff 	mov.w	r0, #4294967295
 8015244:	b00d      	add	sp, #52	@ 0x34
 8015246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801524a:	eeb4 0b40 	vcmp.f64	d0, d0
 801524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015252:	d709      	bvc.n	8015268 <_printf_float+0xc0>
 8015254:	ee10 3a90 	vmov	r3, s1
 8015258:	2b00      	cmp	r3, #0
 801525a:	bfbc      	itt	lt
 801525c:	232d      	movlt	r3, #45	@ 0x2d
 801525e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015262:	497d      	ldr	r1, [pc, #500]	@ (8015458 <_printf_float+0x2b0>)
 8015264:	4b7d      	ldr	r3, [pc, #500]	@ (801545c <_printf_float+0x2b4>)
 8015266:	e7d5      	b.n	8015214 <_printf_float+0x6c>
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	1c59      	adds	r1, r3, #1
 801526c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015270:	d139      	bne.n	80152e6 <_printf_float+0x13e>
 8015272:	2306      	movs	r3, #6
 8015274:	6063      	str	r3, [r4, #4]
 8015276:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801527a:	2300      	movs	r3, #0
 801527c:	6022      	str	r2, [r4, #0]
 801527e:	9303      	str	r3, [sp, #12]
 8015280:	ab0a      	add	r3, sp, #40	@ 0x28
 8015282:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015286:	ab09      	add	r3, sp, #36	@ 0x24
 8015288:	9300      	str	r3, [sp, #0]
 801528a:	6861      	ldr	r1, [r4, #4]
 801528c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015290:	4628      	mov	r0, r5
 8015292:	f7ff fef9 	bl	8015088 <__cvt>
 8015296:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801529a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801529c:	4680      	mov	r8, r0
 801529e:	d129      	bne.n	80152f4 <_printf_float+0x14c>
 80152a0:	1cc8      	adds	r0, r1, #3
 80152a2:	db02      	blt.n	80152aa <_printf_float+0x102>
 80152a4:	6863      	ldr	r3, [r4, #4]
 80152a6:	4299      	cmp	r1, r3
 80152a8:	dd41      	ble.n	801532e <_printf_float+0x186>
 80152aa:	f1a9 0902 	sub.w	r9, r9, #2
 80152ae:	fa5f f989 	uxtb.w	r9, r9
 80152b2:	3901      	subs	r1, #1
 80152b4:	464a      	mov	r2, r9
 80152b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80152ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80152bc:	f7ff ff38 	bl	8015130 <__exponent>
 80152c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80152c2:	1813      	adds	r3, r2, r0
 80152c4:	2a01      	cmp	r2, #1
 80152c6:	4682      	mov	sl, r0
 80152c8:	6123      	str	r3, [r4, #16]
 80152ca:	dc02      	bgt.n	80152d2 <_printf_float+0x12a>
 80152cc:	6822      	ldr	r2, [r4, #0]
 80152ce:	07d2      	lsls	r2, r2, #31
 80152d0:	d501      	bpl.n	80152d6 <_printf_float+0x12e>
 80152d2:	3301      	adds	r3, #1
 80152d4:	6123      	str	r3, [r4, #16]
 80152d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d0a6      	beq.n	801522c <_printf_float+0x84>
 80152de:	232d      	movs	r3, #45	@ 0x2d
 80152e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80152e4:	e7a2      	b.n	801522c <_printf_float+0x84>
 80152e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80152ea:	d1c4      	bne.n	8015276 <_printf_float+0xce>
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d1c2      	bne.n	8015276 <_printf_float+0xce>
 80152f0:	2301      	movs	r3, #1
 80152f2:	e7bf      	b.n	8015274 <_printf_float+0xcc>
 80152f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80152f8:	d9db      	bls.n	80152b2 <_printf_float+0x10a>
 80152fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80152fe:	d118      	bne.n	8015332 <_printf_float+0x18a>
 8015300:	2900      	cmp	r1, #0
 8015302:	6863      	ldr	r3, [r4, #4]
 8015304:	dd0b      	ble.n	801531e <_printf_float+0x176>
 8015306:	6121      	str	r1, [r4, #16]
 8015308:	b913      	cbnz	r3, 8015310 <_printf_float+0x168>
 801530a:	6822      	ldr	r2, [r4, #0]
 801530c:	07d0      	lsls	r0, r2, #31
 801530e:	d502      	bpl.n	8015316 <_printf_float+0x16e>
 8015310:	3301      	adds	r3, #1
 8015312:	440b      	add	r3, r1
 8015314:	6123      	str	r3, [r4, #16]
 8015316:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015318:	f04f 0a00 	mov.w	sl, #0
 801531c:	e7db      	b.n	80152d6 <_printf_float+0x12e>
 801531e:	b913      	cbnz	r3, 8015326 <_printf_float+0x17e>
 8015320:	6822      	ldr	r2, [r4, #0]
 8015322:	07d2      	lsls	r2, r2, #31
 8015324:	d501      	bpl.n	801532a <_printf_float+0x182>
 8015326:	3302      	adds	r3, #2
 8015328:	e7f4      	b.n	8015314 <_printf_float+0x16c>
 801532a:	2301      	movs	r3, #1
 801532c:	e7f2      	b.n	8015314 <_printf_float+0x16c>
 801532e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015334:	4299      	cmp	r1, r3
 8015336:	db05      	blt.n	8015344 <_printf_float+0x19c>
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	6121      	str	r1, [r4, #16]
 801533c:	07d8      	lsls	r0, r3, #31
 801533e:	d5ea      	bpl.n	8015316 <_printf_float+0x16e>
 8015340:	1c4b      	adds	r3, r1, #1
 8015342:	e7e7      	b.n	8015314 <_printf_float+0x16c>
 8015344:	2900      	cmp	r1, #0
 8015346:	bfd4      	ite	le
 8015348:	f1c1 0202 	rsble	r2, r1, #2
 801534c:	2201      	movgt	r2, #1
 801534e:	4413      	add	r3, r2
 8015350:	e7e0      	b.n	8015314 <_printf_float+0x16c>
 8015352:	6823      	ldr	r3, [r4, #0]
 8015354:	055a      	lsls	r2, r3, #21
 8015356:	d407      	bmi.n	8015368 <_printf_float+0x1c0>
 8015358:	6923      	ldr	r3, [r4, #16]
 801535a:	4642      	mov	r2, r8
 801535c:	4631      	mov	r1, r6
 801535e:	4628      	mov	r0, r5
 8015360:	47b8      	blx	r7
 8015362:	3001      	adds	r0, #1
 8015364:	d12a      	bne.n	80153bc <_printf_float+0x214>
 8015366:	e76b      	b.n	8015240 <_printf_float+0x98>
 8015368:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801536c:	f240 80e0 	bls.w	8015530 <_printf_float+0x388>
 8015370:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015374:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537c:	d133      	bne.n	80153e6 <_printf_float+0x23e>
 801537e:	4a38      	ldr	r2, [pc, #224]	@ (8015460 <_printf_float+0x2b8>)
 8015380:	2301      	movs	r3, #1
 8015382:	4631      	mov	r1, r6
 8015384:	4628      	mov	r0, r5
 8015386:	47b8      	blx	r7
 8015388:	3001      	adds	r0, #1
 801538a:	f43f af59 	beq.w	8015240 <_printf_float+0x98>
 801538e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015392:	4543      	cmp	r3, r8
 8015394:	db02      	blt.n	801539c <_printf_float+0x1f4>
 8015396:	6823      	ldr	r3, [r4, #0]
 8015398:	07d8      	lsls	r0, r3, #31
 801539a:	d50f      	bpl.n	80153bc <_printf_float+0x214>
 801539c:	9b05      	ldr	r3, [sp, #20]
 801539e:	465a      	mov	r2, fp
 80153a0:	4631      	mov	r1, r6
 80153a2:	4628      	mov	r0, r5
 80153a4:	47b8      	blx	r7
 80153a6:	3001      	adds	r0, #1
 80153a8:	f43f af4a 	beq.w	8015240 <_printf_float+0x98>
 80153ac:	f04f 0900 	mov.w	r9, #0
 80153b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80153b4:	f104 0a1a 	add.w	sl, r4, #26
 80153b8:	45c8      	cmp	r8, r9
 80153ba:	dc09      	bgt.n	80153d0 <_printf_float+0x228>
 80153bc:	6823      	ldr	r3, [r4, #0]
 80153be:	079b      	lsls	r3, r3, #30
 80153c0:	f100 8107 	bmi.w	80155d2 <_printf_float+0x42a>
 80153c4:	68e0      	ldr	r0, [r4, #12]
 80153c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153c8:	4298      	cmp	r0, r3
 80153ca:	bfb8      	it	lt
 80153cc:	4618      	movlt	r0, r3
 80153ce:	e739      	b.n	8015244 <_printf_float+0x9c>
 80153d0:	2301      	movs	r3, #1
 80153d2:	4652      	mov	r2, sl
 80153d4:	4631      	mov	r1, r6
 80153d6:	4628      	mov	r0, r5
 80153d8:	47b8      	blx	r7
 80153da:	3001      	adds	r0, #1
 80153dc:	f43f af30 	beq.w	8015240 <_printf_float+0x98>
 80153e0:	f109 0901 	add.w	r9, r9, #1
 80153e4:	e7e8      	b.n	80153b8 <_printf_float+0x210>
 80153e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	dc3b      	bgt.n	8015464 <_printf_float+0x2bc>
 80153ec:	4a1c      	ldr	r2, [pc, #112]	@ (8015460 <_printf_float+0x2b8>)
 80153ee:	2301      	movs	r3, #1
 80153f0:	4631      	mov	r1, r6
 80153f2:	4628      	mov	r0, r5
 80153f4:	47b8      	blx	r7
 80153f6:	3001      	adds	r0, #1
 80153f8:	f43f af22 	beq.w	8015240 <_printf_float+0x98>
 80153fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015400:	ea59 0303 	orrs.w	r3, r9, r3
 8015404:	d102      	bne.n	801540c <_printf_float+0x264>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	07d9      	lsls	r1, r3, #31
 801540a:	d5d7      	bpl.n	80153bc <_printf_float+0x214>
 801540c:	9b05      	ldr	r3, [sp, #20]
 801540e:	465a      	mov	r2, fp
 8015410:	4631      	mov	r1, r6
 8015412:	4628      	mov	r0, r5
 8015414:	47b8      	blx	r7
 8015416:	3001      	adds	r0, #1
 8015418:	f43f af12 	beq.w	8015240 <_printf_float+0x98>
 801541c:	f04f 0a00 	mov.w	sl, #0
 8015420:	f104 0b1a 	add.w	fp, r4, #26
 8015424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015426:	425b      	negs	r3, r3
 8015428:	4553      	cmp	r3, sl
 801542a:	dc01      	bgt.n	8015430 <_printf_float+0x288>
 801542c:	464b      	mov	r3, r9
 801542e:	e794      	b.n	801535a <_printf_float+0x1b2>
 8015430:	2301      	movs	r3, #1
 8015432:	465a      	mov	r2, fp
 8015434:	4631      	mov	r1, r6
 8015436:	4628      	mov	r0, r5
 8015438:	47b8      	blx	r7
 801543a:	3001      	adds	r0, #1
 801543c:	f43f af00 	beq.w	8015240 <_printf_float+0x98>
 8015440:	f10a 0a01 	add.w	sl, sl, #1
 8015444:	e7ee      	b.n	8015424 <_printf_float+0x27c>
 8015446:	bf00      	nop
 8015448:	ffffffff 	.word	0xffffffff
 801544c:	7fefffff 	.word	0x7fefffff
 8015450:	0801ec94 	.word	0x0801ec94
 8015454:	0801ec90 	.word	0x0801ec90
 8015458:	0801ec9c 	.word	0x0801ec9c
 801545c:	0801ec98 	.word	0x0801ec98
 8015460:	0801eca0 	.word	0x0801eca0
 8015464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015466:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801546a:	4553      	cmp	r3, sl
 801546c:	bfa8      	it	ge
 801546e:	4653      	movge	r3, sl
 8015470:	2b00      	cmp	r3, #0
 8015472:	4699      	mov	r9, r3
 8015474:	dc37      	bgt.n	80154e6 <_printf_float+0x33e>
 8015476:	2300      	movs	r3, #0
 8015478:	9307      	str	r3, [sp, #28]
 801547a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801547e:	f104 021a 	add.w	r2, r4, #26
 8015482:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015484:	9907      	ldr	r1, [sp, #28]
 8015486:	9306      	str	r3, [sp, #24]
 8015488:	eba3 0309 	sub.w	r3, r3, r9
 801548c:	428b      	cmp	r3, r1
 801548e:	dc31      	bgt.n	80154f4 <_printf_float+0x34c>
 8015490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015492:	459a      	cmp	sl, r3
 8015494:	dc3b      	bgt.n	801550e <_printf_float+0x366>
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	07da      	lsls	r2, r3, #31
 801549a:	d438      	bmi.n	801550e <_printf_float+0x366>
 801549c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801549e:	ebaa 0903 	sub.w	r9, sl, r3
 80154a2:	9b06      	ldr	r3, [sp, #24]
 80154a4:	ebaa 0303 	sub.w	r3, sl, r3
 80154a8:	4599      	cmp	r9, r3
 80154aa:	bfa8      	it	ge
 80154ac:	4699      	movge	r9, r3
 80154ae:	f1b9 0f00 	cmp.w	r9, #0
 80154b2:	dc34      	bgt.n	801551e <_printf_float+0x376>
 80154b4:	f04f 0800 	mov.w	r8, #0
 80154b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80154bc:	f104 0b1a 	add.w	fp, r4, #26
 80154c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154c2:	ebaa 0303 	sub.w	r3, sl, r3
 80154c6:	eba3 0309 	sub.w	r3, r3, r9
 80154ca:	4543      	cmp	r3, r8
 80154cc:	f77f af76 	ble.w	80153bc <_printf_float+0x214>
 80154d0:	2301      	movs	r3, #1
 80154d2:	465a      	mov	r2, fp
 80154d4:	4631      	mov	r1, r6
 80154d6:	4628      	mov	r0, r5
 80154d8:	47b8      	blx	r7
 80154da:	3001      	adds	r0, #1
 80154dc:	f43f aeb0 	beq.w	8015240 <_printf_float+0x98>
 80154e0:	f108 0801 	add.w	r8, r8, #1
 80154e4:	e7ec      	b.n	80154c0 <_printf_float+0x318>
 80154e6:	4642      	mov	r2, r8
 80154e8:	4631      	mov	r1, r6
 80154ea:	4628      	mov	r0, r5
 80154ec:	47b8      	blx	r7
 80154ee:	3001      	adds	r0, #1
 80154f0:	d1c1      	bne.n	8015476 <_printf_float+0x2ce>
 80154f2:	e6a5      	b.n	8015240 <_printf_float+0x98>
 80154f4:	2301      	movs	r3, #1
 80154f6:	4631      	mov	r1, r6
 80154f8:	4628      	mov	r0, r5
 80154fa:	9206      	str	r2, [sp, #24]
 80154fc:	47b8      	blx	r7
 80154fe:	3001      	adds	r0, #1
 8015500:	f43f ae9e 	beq.w	8015240 <_printf_float+0x98>
 8015504:	9b07      	ldr	r3, [sp, #28]
 8015506:	9a06      	ldr	r2, [sp, #24]
 8015508:	3301      	adds	r3, #1
 801550a:	9307      	str	r3, [sp, #28]
 801550c:	e7b9      	b.n	8015482 <_printf_float+0x2da>
 801550e:	9b05      	ldr	r3, [sp, #20]
 8015510:	465a      	mov	r2, fp
 8015512:	4631      	mov	r1, r6
 8015514:	4628      	mov	r0, r5
 8015516:	47b8      	blx	r7
 8015518:	3001      	adds	r0, #1
 801551a:	d1bf      	bne.n	801549c <_printf_float+0x2f4>
 801551c:	e690      	b.n	8015240 <_printf_float+0x98>
 801551e:	9a06      	ldr	r2, [sp, #24]
 8015520:	464b      	mov	r3, r9
 8015522:	4442      	add	r2, r8
 8015524:	4631      	mov	r1, r6
 8015526:	4628      	mov	r0, r5
 8015528:	47b8      	blx	r7
 801552a:	3001      	adds	r0, #1
 801552c:	d1c2      	bne.n	80154b4 <_printf_float+0x30c>
 801552e:	e687      	b.n	8015240 <_printf_float+0x98>
 8015530:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015534:	f1b9 0f01 	cmp.w	r9, #1
 8015538:	dc01      	bgt.n	801553e <_printf_float+0x396>
 801553a:	07db      	lsls	r3, r3, #31
 801553c:	d536      	bpl.n	80155ac <_printf_float+0x404>
 801553e:	2301      	movs	r3, #1
 8015540:	4642      	mov	r2, r8
 8015542:	4631      	mov	r1, r6
 8015544:	4628      	mov	r0, r5
 8015546:	47b8      	blx	r7
 8015548:	3001      	adds	r0, #1
 801554a:	f43f ae79 	beq.w	8015240 <_printf_float+0x98>
 801554e:	9b05      	ldr	r3, [sp, #20]
 8015550:	465a      	mov	r2, fp
 8015552:	4631      	mov	r1, r6
 8015554:	4628      	mov	r0, r5
 8015556:	47b8      	blx	r7
 8015558:	3001      	adds	r0, #1
 801555a:	f43f ae71 	beq.w	8015240 <_printf_float+0x98>
 801555e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556a:	f109 39ff 	add.w	r9, r9, #4294967295
 801556e:	d018      	beq.n	80155a2 <_printf_float+0x3fa>
 8015570:	464b      	mov	r3, r9
 8015572:	f108 0201 	add.w	r2, r8, #1
 8015576:	4631      	mov	r1, r6
 8015578:	4628      	mov	r0, r5
 801557a:	47b8      	blx	r7
 801557c:	3001      	adds	r0, #1
 801557e:	d10c      	bne.n	801559a <_printf_float+0x3f2>
 8015580:	e65e      	b.n	8015240 <_printf_float+0x98>
 8015582:	2301      	movs	r3, #1
 8015584:	465a      	mov	r2, fp
 8015586:	4631      	mov	r1, r6
 8015588:	4628      	mov	r0, r5
 801558a:	47b8      	blx	r7
 801558c:	3001      	adds	r0, #1
 801558e:	f43f ae57 	beq.w	8015240 <_printf_float+0x98>
 8015592:	f108 0801 	add.w	r8, r8, #1
 8015596:	45c8      	cmp	r8, r9
 8015598:	dbf3      	blt.n	8015582 <_printf_float+0x3da>
 801559a:	4653      	mov	r3, sl
 801559c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80155a0:	e6dc      	b.n	801535c <_printf_float+0x1b4>
 80155a2:	f04f 0800 	mov.w	r8, #0
 80155a6:	f104 0b1a 	add.w	fp, r4, #26
 80155aa:	e7f4      	b.n	8015596 <_printf_float+0x3ee>
 80155ac:	2301      	movs	r3, #1
 80155ae:	4642      	mov	r2, r8
 80155b0:	e7e1      	b.n	8015576 <_printf_float+0x3ce>
 80155b2:	2301      	movs	r3, #1
 80155b4:	464a      	mov	r2, r9
 80155b6:	4631      	mov	r1, r6
 80155b8:	4628      	mov	r0, r5
 80155ba:	47b8      	blx	r7
 80155bc:	3001      	adds	r0, #1
 80155be:	f43f ae3f 	beq.w	8015240 <_printf_float+0x98>
 80155c2:	f108 0801 	add.w	r8, r8, #1
 80155c6:	68e3      	ldr	r3, [r4, #12]
 80155c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80155ca:	1a5b      	subs	r3, r3, r1
 80155cc:	4543      	cmp	r3, r8
 80155ce:	dcf0      	bgt.n	80155b2 <_printf_float+0x40a>
 80155d0:	e6f8      	b.n	80153c4 <_printf_float+0x21c>
 80155d2:	f04f 0800 	mov.w	r8, #0
 80155d6:	f104 0919 	add.w	r9, r4, #25
 80155da:	e7f4      	b.n	80155c6 <_printf_float+0x41e>

080155dc <_printf_common>:
 80155dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155e0:	4616      	mov	r6, r2
 80155e2:	4698      	mov	r8, r3
 80155e4:	688a      	ldr	r2, [r1, #8]
 80155e6:	690b      	ldr	r3, [r1, #16]
 80155e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80155ec:	4293      	cmp	r3, r2
 80155ee:	bfb8      	it	lt
 80155f0:	4613      	movlt	r3, r2
 80155f2:	6033      	str	r3, [r6, #0]
 80155f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80155f8:	4607      	mov	r7, r0
 80155fa:	460c      	mov	r4, r1
 80155fc:	b10a      	cbz	r2, 8015602 <_printf_common+0x26>
 80155fe:	3301      	adds	r3, #1
 8015600:	6033      	str	r3, [r6, #0]
 8015602:	6823      	ldr	r3, [r4, #0]
 8015604:	0699      	lsls	r1, r3, #26
 8015606:	bf42      	ittt	mi
 8015608:	6833      	ldrmi	r3, [r6, #0]
 801560a:	3302      	addmi	r3, #2
 801560c:	6033      	strmi	r3, [r6, #0]
 801560e:	6825      	ldr	r5, [r4, #0]
 8015610:	f015 0506 	ands.w	r5, r5, #6
 8015614:	d106      	bne.n	8015624 <_printf_common+0x48>
 8015616:	f104 0a19 	add.w	sl, r4, #25
 801561a:	68e3      	ldr	r3, [r4, #12]
 801561c:	6832      	ldr	r2, [r6, #0]
 801561e:	1a9b      	subs	r3, r3, r2
 8015620:	42ab      	cmp	r3, r5
 8015622:	dc26      	bgt.n	8015672 <_printf_common+0x96>
 8015624:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015628:	6822      	ldr	r2, [r4, #0]
 801562a:	3b00      	subs	r3, #0
 801562c:	bf18      	it	ne
 801562e:	2301      	movne	r3, #1
 8015630:	0692      	lsls	r2, r2, #26
 8015632:	d42b      	bmi.n	801568c <_printf_common+0xb0>
 8015634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015638:	4641      	mov	r1, r8
 801563a:	4638      	mov	r0, r7
 801563c:	47c8      	blx	r9
 801563e:	3001      	adds	r0, #1
 8015640:	d01e      	beq.n	8015680 <_printf_common+0xa4>
 8015642:	6823      	ldr	r3, [r4, #0]
 8015644:	6922      	ldr	r2, [r4, #16]
 8015646:	f003 0306 	and.w	r3, r3, #6
 801564a:	2b04      	cmp	r3, #4
 801564c:	bf02      	ittt	eq
 801564e:	68e5      	ldreq	r5, [r4, #12]
 8015650:	6833      	ldreq	r3, [r6, #0]
 8015652:	1aed      	subeq	r5, r5, r3
 8015654:	68a3      	ldr	r3, [r4, #8]
 8015656:	bf0c      	ite	eq
 8015658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801565c:	2500      	movne	r5, #0
 801565e:	4293      	cmp	r3, r2
 8015660:	bfc4      	itt	gt
 8015662:	1a9b      	subgt	r3, r3, r2
 8015664:	18ed      	addgt	r5, r5, r3
 8015666:	2600      	movs	r6, #0
 8015668:	341a      	adds	r4, #26
 801566a:	42b5      	cmp	r5, r6
 801566c:	d11a      	bne.n	80156a4 <_printf_common+0xc8>
 801566e:	2000      	movs	r0, #0
 8015670:	e008      	b.n	8015684 <_printf_common+0xa8>
 8015672:	2301      	movs	r3, #1
 8015674:	4652      	mov	r2, sl
 8015676:	4641      	mov	r1, r8
 8015678:	4638      	mov	r0, r7
 801567a:	47c8      	blx	r9
 801567c:	3001      	adds	r0, #1
 801567e:	d103      	bne.n	8015688 <_printf_common+0xac>
 8015680:	f04f 30ff 	mov.w	r0, #4294967295
 8015684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015688:	3501      	adds	r5, #1
 801568a:	e7c6      	b.n	801561a <_printf_common+0x3e>
 801568c:	18e1      	adds	r1, r4, r3
 801568e:	1c5a      	adds	r2, r3, #1
 8015690:	2030      	movs	r0, #48	@ 0x30
 8015692:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015696:	4422      	add	r2, r4
 8015698:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801569c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80156a0:	3302      	adds	r3, #2
 80156a2:	e7c7      	b.n	8015634 <_printf_common+0x58>
 80156a4:	2301      	movs	r3, #1
 80156a6:	4622      	mov	r2, r4
 80156a8:	4641      	mov	r1, r8
 80156aa:	4638      	mov	r0, r7
 80156ac:	47c8      	blx	r9
 80156ae:	3001      	adds	r0, #1
 80156b0:	d0e6      	beq.n	8015680 <_printf_common+0xa4>
 80156b2:	3601      	adds	r6, #1
 80156b4:	e7d9      	b.n	801566a <_printf_common+0x8e>
	...

080156b8 <_printf_i>:
 80156b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156bc:	7e0f      	ldrb	r7, [r1, #24]
 80156be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80156c0:	2f78      	cmp	r7, #120	@ 0x78
 80156c2:	4691      	mov	r9, r2
 80156c4:	4680      	mov	r8, r0
 80156c6:	460c      	mov	r4, r1
 80156c8:	469a      	mov	sl, r3
 80156ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80156ce:	d807      	bhi.n	80156e0 <_printf_i+0x28>
 80156d0:	2f62      	cmp	r7, #98	@ 0x62
 80156d2:	d80a      	bhi.n	80156ea <_printf_i+0x32>
 80156d4:	2f00      	cmp	r7, #0
 80156d6:	f000 80d1 	beq.w	801587c <_printf_i+0x1c4>
 80156da:	2f58      	cmp	r7, #88	@ 0x58
 80156dc:	f000 80b8 	beq.w	8015850 <_printf_i+0x198>
 80156e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80156e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80156e8:	e03a      	b.n	8015760 <_printf_i+0xa8>
 80156ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80156ee:	2b15      	cmp	r3, #21
 80156f0:	d8f6      	bhi.n	80156e0 <_printf_i+0x28>
 80156f2:	a101      	add	r1, pc, #4	@ (adr r1, 80156f8 <_printf_i+0x40>)
 80156f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80156f8:	08015751 	.word	0x08015751
 80156fc:	08015765 	.word	0x08015765
 8015700:	080156e1 	.word	0x080156e1
 8015704:	080156e1 	.word	0x080156e1
 8015708:	080156e1 	.word	0x080156e1
 801570c:	080156e1 	.word	0x080156e1
 8015710:	08015765 	.word	0x08015765
 8015714:	080156e1 	.word	0x080156e1
 8015718:	080156e1 	.word	0x080156e1
 801571c:	080156e1 	.word	0x080156e1
 8015720:	080156e1 	.word	0x080156e1
 8015724:	08015863 	.word	0x08015863
 8015728:	0801578f 	.word	0x0801578f
 801572c:	0801581d 	.word	0x0801581d
 8015730:	080156e1 	.word	0x080156e1
 8015734:	080156e1 	.word	0x080156e1
 8015738:	08015885 	.word	0x08015885
 801573c:	080156e1 	.word	0x080156e1
 8015740:	0801578f 	.word	0x0801578f
 8015744:	080156e1 	.word	0x080156e1
 8015748:	080156e1 	.word	0x080156e1
 801574c:	08015825 	.word	0x08015825
 8015750:	6833      	ldr	r3, [r6, #0]
 8015752:	1d1a      	adds	r2, r3, #4
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	6032      	str	r2, [r6, #0]
 8015758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801575c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015760:	2301      	movs	r3, #1
 8015762:	e09c      	b.n	801589e <_printf_i+0x1e6>
 8015764:	6833      	ldr	r3, [r6, #0]
 8015766:	6820      	ldr	r0, [r4, #0]
 8015768:	1d19      	adds	r1, r3, #4
 801576a:	6031      	str	r1, [r6, #0]
 801576c:	0606      	lsls	r6, r0, #24
 801576e:	d501      	bpl.n	8015774 <_printf_i+0xbc>
 8015770:	681d      	ldr	r5, [r3, #0]
 8015772:	e003      	b.n	801577c <_printf_i+0xc4>
 8015774:	0645      	lsls	r5, r0, #25
 8015776:	d5fb      	bpl.n	8015770 <_printf_i+0xb8>
 8015778:	f9b3 5000 	ldrsh.w	r5, [r3]
 801577c:	2d00      	cmp	r5, #0
 801577e:	da03      	bge.n	8015788 <_printf_i+0xd0>
 8015780:	232d      	movs	r3, #45	@ 0x2d
 8015782:	426d      	negs	r5, r5
 8015784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015788:	4858      	ldr	r0, [pc, #352]	@ (80158ec <_printf_i+0x234>)
 801578a:	230a      	movs	r3, #10
 801578c:	e011      	b.n	80157b2 <_printf_i+0xfa>
 801578e:	6821      	ldr	r1, [r4, #0]
 8015790:	6833      	ldr	r3, [r6, #0]
 8015792:	0608      	lsls	r0, r1, #24
 8015794:	f853 5b04 	ldr.w	r5, [r3], #4
 8015798:	d402      	bmi.n	80157a0 <_printf_i+0xe8>
 801579a:	0649      	lsls	r1, r1, #25
 801579c:	bf48      	it	mi
 801579e:	b2ad      	uxthmi	r5, r5
 80157a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80157a2:	4852      	ldr	r0, [pc, #328]	@ (80158ec <_printf_i+0x234>)
 80157a4:	6033      	str	r3, [r6, #0]
 80157a6:	bf14      	ite	ne
 80157a8:	230a      	movne	r3, #10
 80157aa:	2308      	moveq	r3, #8
 80157ac:	2100      	movs	r1, #0
 80157ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80157b2:	6866      	ldr	r6, [r4, #4]
 80157b4:	60a6      	str	r6, [r4, #8]
 80157b6:	2e00      	cmp	r6, #0
 80157b8:	db05      	blt.n	80157c6 <_printf_i+0x10e>
 80157ba:	6821      	ldr	r1, [r4, #0]
 80157bc:	432e      	orrs	r6, r5
 80157be:	f021 0104 	bic.w	r1, r1, #4
 80157c2:	6021      	str	r1, [r4, #0]
 80157c4:	d04b      	beq.n	801585e <_printf_i+0x1a6>
 80157c6:	4616      	mov	r6, r2
 80157c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80157cc:	fb03 5711 	mls	r7, r3, r1, r5
 80157d0:	5dc7      	ldrb	r7, [r0, r7]
 80157d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80157d6:	462f      	mov	r7, r5
 80157d8:	42bb      	cmp	r3, r7
 80157da:	460d      	mov	r5, r1
 80157dc:	d9f4      	bls.n	80157c8 <_printf_i+0x110>
 80157de:	2b08      	cmp	r3, #8
 80157e0:	d10b      	bne.n	80157fa <_printf_i+0x142>
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	07df      	lsls	r7, r3, #31
 80157e6:	d508      	bpl.n	80157fa <_printf_i+0x142>
 80157e8:	6923      	ldr	r3, [r4, #16]
 80157ea:	6861      	ldr	r1, [r4, #4]
 80157ec:	4299      	cmp	r1, r3
 80157ee:	bfde      	ittt	le
 80157f0:	2330      	movle	r3, #48	@ 0x30
 80157f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80157f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80157fa:	1b92      	subs	r2, r2, r6
 80157fc:	6122      	str	r2, [r4, #16]
 80157fe:	f8cd a000 	str.w	sl, [sp]
 8015802:	464b      	mov	r3, r9
 8015804:	aa03      	add	r2, sp, #12
 8015806:	4621      	mov	r1, r4
 8015808:	4640      	mov	r0, r8
 801580a:	f7ff fee7 	bl	80155dc <_printf_common>
 801580e:	3001      	adds	r0, #1
 8015810:	d14a      	bne.n	80158a8 <_printf_i+0x1f0>
 8015812:	f04f 30ff 	mov.w	r0, #4294967295
 8015816:	b004      	add	sp, #16
 8015818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801581c:	6823      	ldr	r3, [r4, #0]
 801581e:	f043 0320 	orr.w	r3, r3, #32
 8015822:	6023      	str	r3, [r4, #0]
 8015824:	4832      	ldr	r0, [pc, #200]	@ (80158f0 <_printf_i+0x238>)
 8015826:	2778      	movs	r7, #120	@ 0x78
 8015828:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801582c:	6823      	ldr	r3, [r4, #0]
 801582e:	6831      	ldr	r1, [r6, #0]
 8015830:	061f      	lsls	r7, r3, #24
 8015832:	f851 5b04 	ldr.w	r5, [r1], #4
 8015836:	d402      	bmi.n	801583e <_printf_i+0x186>
 8015838:	065f      	lsls	r7, r3, #25
 801583a:	bf48      	it	mi
 801583c:	b2ad      	uxthmi	r5, r5
 801583e:	6031      	str	r1, [r6, #0]
 8015840:	07d9      	lsls	r1, r3, #31
 8015842:	bf44      	itt	mi
 8015844:	f043 0320 	orrmi.w	r3, r3, #32
 8015848:	6023      	strmi	r3, [r4, #0]
 801584a:	b11d      	cbz	r5, 8015854 <_printf_i+0x19c>
 801584c:	2310      	movs	r3, #16
 801584e:	e7ad      	b.n	80157ac <_printf_i+0xf4>
 8015850:	4826      	ldr	r0, [pc, #152]	@ (80158ec <_printf_i+0x234>)
 8015852:	e7e9      	b.n	8015828 <_printf_i+0x170>
 8015854:	6823      	ldr	r3, [r4, #0]
 8015856:	f023 0320 	bic.w	r3, r3, #32
 801585a:	6023      	str	r3, [r4, #0]
 801585c:	e7f6      	b.n	801584c <_printf_i+0x194>
 801585e:	4616      	mov	r6, r2
 8015860:	e7bd      	b.n	80157de <_printf_i+0x126>
 8015862:	6833      	ldr	r3, [r6, #0]
 8015864:	6825      	ldr	r5, [r4, #0]
 8015866:	6961      	ldr	r1, [r4, #20]
 8015868:	1d18      	adds	r0, r3, #4
 801586a:	6030      	str	r0, [r6, #0]
 801586c:	062e      	lsls	r6, r5, #24
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	d501      	bpl.n	8015876 <_printf_i+0x1be>
 8015872:	6019      	str	r1, [r3, #0]
 8015874:	e002      	b.n	801587c <_printf_i+0x1c4>
 8015876:	0668      	lsls	r0, r5, #25
 8015878:	d5fb      	bpl.n	8015872 <_printf_i+0x1ba>
 801587a:	8019      	strh	r1, [r3, #0]
 801587c:	2300      	movs	r3, #0
 801587e:	6123      	str	r3, [r4, #16]
 8015880:	4616      	mov	r6, r2
 8015882:	e7bc      	b.n	80157fe <_printf_i+0x146>
 8015884:	6833      	ldr	r3, [r6, #0]
 8015886:	1d1a      	adds	r2, r3, #4
 8015888:	6032      	str	r2, [r6, #0]
 801588a:	681e      	ldr	r6, [r3, #0]
 801588c:	6862      	ldr	r2, [r4, #4]
 801588e:	2100      	movs	r1, #0
 8015890:	4630      	mov	r0, r6
 8015892:	f7ea fd25 	bl	80002e0 <memchr>
 8015896:	b108      	cbz	r0, 801589c <_printf_i+0x1e4>
 8015898:	1b80      	subs	r0, r0, r6
 801589a:	6060      	str	r0, [r4, #4]
 801589c:	6863      	ldr	r3, [r4, #4]
 801589e:	6123      	str	r3, [r4, #16]
 80158a0:	2300      	movs	r3, #0
 80158a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80158a6:	e7aa      	b.n	80157fe <_printf_i+0x146>
 80158a8:	6923      	ldr	r3, [r4, #16]
 80158aa:	4632      	mov	r2, r6
 80158ac:	4649      	mov	r1, r9
 80158ae:	4640      	mov	r0, r8
 80158b0:	47d0      	blx	sl
 80158b2:	3001      	adds	r0, #1
 80158b4:	d0ad      	beq.n	8015812 <_printf_i+0x15a>
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	079b      	lsls	r3, r3, #30
 80158ba:	d413      	bmi.n	80158e4 <_printf_i+0x22c>
 80158bc:	68e0      	ldr	r0, [r4, #12]
 80158be:	9b03      	ldr	r3, [sp, #12]
 80158c0:	4298      	cmp	r0, r3
 80158c2:	bfb8      	it	lt
 80158c4:	4618      	movlt	r0, r3
 80158c6:	e7a6      	b.n	8015816 <_printf_i+0x15e>
 80158c8:	2301      	movs	r3, #1
 80158ca:	4632      	mov	r2, r6
 80158cc:	4649      	mov	r1, r9
 80158ce:	4640      	mov	r0, r8
 80158d0:	47d0      	blx	sl
 80158d2:	3001      	adds	r0, #1
 80158d4:	d09d      	beq.n	8015812 <_printf_i+0x15a>
 80158d6:	3501      	adds	r5, #1
 80158d8:	68e3      	ldr	r3, [r4, #12]
 80158da:	9903      	ldr	r1, [sp, #12]
 80158dc:	1a5b      	subs	r3, r3, r1
 80158de:	42ab      	cmp	r3, r5
 80158e0:	dcf2      	bgt.n	80158c8 <_printf_i+0x210>
 80158e2:	e7eb      	b.n	80158bc <_printf_i+0x204>
 80158e4:	2500      	movs	r5, #0
 80158e6:	f104 0619 	add.w	r6, r4, #25
 80158ea:	e7f5      	b.n	80158d8 <_printf_i+0x220>
 80158ec:	0801eca2 	.word	0x0801eca2
 80158f0:	0801ecb3 	.word	0x0801ecb3

080158f4 <std>:
 80158f4:	2300      	movs	r3, #0
 80158f6:	b510      	push	{r4, lr}
 80158f8:	4604      	mov	r4, r0
 80158fa:	e9c0 3300 	strd	r3, r3, [r0]
 80158fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015902:	6083      	str	r3, [r0, #8]
 8015904:	8181      	strh	r1, [r0, #12]
 8015906:	6643      	str	r3, [r0, #100]	@ 0x64
 8015908:	81c2      	strh	r2, [r0, #14]
 801590a:	6183      	str	r3, [r0, #24]
 801590c:	4619      	mov	r1, r3
 801590e:	2208      	movs	r2, #8
 8015910:	305c      	adds	r0, #92	@ 0x5c
 8015912:	f000 f9ab 	bl	8015c6c <memset>
 8015916:	4b0d      	ldr	r3, [pc, #52]	@ (801594c <std+0x58>)
 8015918:	6263      	str	r3, [r4, #36]	@ 0x24
 801591a:	4b0d      	ldr	r3, [pc, #52]	@ (8015950 <std+0x5c>)
 801591c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801591e:	4b0d      	ldr	r3, [pc, #52]	@ (8015954 <std+0x60>)
 8015920:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015922:	4b0d      	ldr	r3, [pc, #52]	@ (8015958 <std+0x64>)
 8015924:	6323      	str	r3, [r4, #48]	@ 0x30
 8015926:	4b0d      	ldr	r3, [pc, #52]	@ (801595c <std+0x68>)
 8015928:	6224      	str	r4, [r4, #32]
 801592a:	429c      	cmp	r4, r3
 801592c:	d006      	beq.n	801593c <std+0x48>
 801592e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015932:	4294      	cmp	r4, r2
 8015934:	d002      	beq.n	801593c <std+0x48>
 8015936:	33d0      	adds	r3, #208	@ 0xd0
 8015938:	429c      	cmp	r4, r3
 801593a:	d105      	bne.n	8015948 <std+0x54>
 801593c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015944:	f000 ba6c 	b.w	8015e20 <__retarget_lock_init_recursive>
 8015948:	bd10      	pop	{r4, pc}
 801594a:	bf00      	nop
 801594c:	08015abd 	.word	0x08015abd
 8015950:	08015adf 	.word	0x08015adf
 8015954:	08015b17 	.word	0x08015b17
 8015958:	08015b3b 	.word	0x08015b3b
 801595c:	24005aa0 	.word	0x24005aa0

08015960 <stdio_exit_handler>:
 8015960:	4a02      	ldr	r2, [pc, #8]	@ (801596c <stdio_exit_handler+0xc>)
 8015962:	4903      	ldr	r1, [pc, #12]	@ (8015970 <stdio_exit_handler+0x10>)
 8015964:	4803      	ldr	r0, [pc, #12]	@ (8015974 <stdio_exit_handler+0x14>)
 8015966:	f000 b869 	b.w	8015a3c <_fwalk_sglue>
 801596a:	bf00      	nop
 801596c:	240000a8 	.word	0x240000a8
 8015970:	080176c1 	.word	0x080176c1
 8015974:	240000b8 	.word	0x240000b8

08015978 <cleanup_stdio>:
 8015978:	6841      	ldr	r1, [r0, #4]
 801597a:	4b0c      	ldr	r3, [pc, #48]	@ (80159ac <cleanup_stdio+0x34>)
 801597c:	4299      	cmp	r1, r3
 801597e:	b510      	push	{r4, lr}
 8015980:	4604      	mov	r4, r0
 8015982:	d001      	beq.n	8015988 <cleanup_stdio+0x10>
 8015984:	f001 fe9c 	bl	80176c0 <_fflush_r>
 8015988:	68a1      	ldr	r1, [r4, #8]
 801598a:	4b09      	ldr	r3, [pc, #36]	@ (80159b0 <cleanup_stdio+0x38>)
 801598c:	4299      	cmp	r1, r3
 801598e:	d002      	beq.n	8015996 <cleanup_stdio+0x1e>
 8015990:	4620      	mov	r0, r4
 8015992:	f001 fe95 	bl	80176c0 <_fflush_r>
 8015996:	68e1      	ldr	r1, [r4, #12]
 8015998:	4b06      	ldr	r3, [pc, #24]	@ (80159b4 <cleanup_stdio+0x3c>)
 801599a:	4299      	cmp	r1, r3
 801599c:	d004      	beq.n	80159a8 <cleanup_stdio+0x30>
 801599e:	4620      	mov	r0, r4
 80159a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a4:	f001 be8c 	b.w	80176c0 <_fflush_r>
 80159a8:	bd10      	pop	{r4, pc}
 80159aa:	bf00      	nop
 80159ac:	24005aa0 	.word	0x24005aa0
 80159b0:	24005b08 	.word	0x24005b08
 80159b4:	24005b70 	.word	0x24005b70

080159b8 <global_stdio_init.part.0>:
 80159b8:	b510      	push	{r4, lr}
 80159ba:	4b0b      	ldr	r3, [pc, #44]	@ (80159e8 <global_stdio_init.part.0+0x30>)
 80159bc:	4c0b      	ldr	r4, [pc, #44]	@ (80159ec <global_stdio_init.part.0+0x34>)
 80159be:	4a0c      	ldr	r2, [pc, #48]	@ (80159f0 <global_stdio_init.part.0+0x38>)
 80159c0:	601a      	str	r2, [r3, #0]
 80159c2:	4620      	mov	r0, r4
 80159c4:	2200      	movs	r2, #0
 80159c6:	2104      	movs	r1, #4
 80159c8:	f7ff ff94 	bl	80158f4 <std>
 80159cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159d0:	2201      	movs	r2, #1
 80159d2:	2109      	movs	r1, #9
 80159d4:	f7ff ff8e 	bl	80158f4 <std>
 80159d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159dc:	2202      	movs	r2, #2
 80159de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159e2:	2112      	movs	r1, #18
 80159e4:	f7ff bf86 	b.w	80158f4 <std>
 80159e8:	24005bd8 	.word	0x24005bd8
 80159ec:	24005aa0 	.word	0x24005aa0
 80159f0:	08015961 	.word	0x08015961

080159f4 <__sfp_lock_acquire>:
 80159f4:	4801      	ldr	r0, [pc, #4]	@ (80159fc <__sfp_lock_acquire+0x8>)
 80159f6:	f000 ba14 	b.w	8015e22 <__retarget_lock_acquire_recursive>
 80159fa:	bf00      	nop
 80159fc:	24005be1 	.word	0x24005be1

08015a00 <__sfp_lock_release>:
 8015a00:	4801      	ldr	r0, [pc, #4]	@ (8015a08 <__sfp_lock_release+0x8>)
 8015a02:	f000 ba0f 	b.w	8015e24 <__retarget_lock_release_recursive>
 8015a06:	bf00      	nop
 8015a08:	24005be1 	.word	0x24005be1

08015a0c <__sinit>:
 8015a0c:	b510      	push	{r4, lr}
 8015a0e:	4604      	mov	r4, r0
 8015a10:	f7ff fff0 	bl	80159f4 <__sfp_lock_acquire>
 8015a14:	6a23      	ldr	r3, [r4, #32]
 8015a16:	b11b      	cbz	r3, 8015a20 <__sinit+0x14>
 8015a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a1c:	f7ff bff0 	b.w	8015a00 <__sfp_lock_release>
 8015a20:	4b04      	ldr	r3, [pc, #16]	@ (8015a34 <__sinit+0x28>)
 8015a22:	6223      	str	r3, [r4, #32]
 8015a24:	4b04      	ldr	r3, [pc, #16]	@ (8015a38 <__sinit+0x2c>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d1f5      	bne.n	8015a18 <__sinit+0xc>
 8015a2c:	f7ff ffc4 	bl	80159b8 <global_stdio_init.part.0>
 8015a30:	e7f2      	b.n	8015a18 <__sinit+0xc>
 8015a32:	bf00      	nop
 8015a34:	08015979 	.word	0x08015979
 8015a38:	24005bd8 	.word	0x24005bd8

08015a3c <_fwalk_sglue>:
 8015a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a40:	4607      	mov	r7, r0
 8015a42:	4688      	mov	r8, r1
 8015a44:	4614      	mov	r4, r2
 8015a46:	2600      	movs	r6, #0
 8015a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8015a50:	d505      	bpl.n	8015a5e <_fwalk_sglue+0x22>
 8015a52:	6824      	ldr	r4, [r4, #0]
 8015a54:	2c00      	cmp	r4, #0
 8015a56:	d1f7      	bne.n	8015a48 <_fwalk_sglue+0xc>
 8015a58:	4630      	mov	r0, r6
 8015a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a5e:	89ab      	ldrh	r3, [r5, #12]
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d907      	bls.n	8015a74 <_fwalk_sglue+0x38>
 8015a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a68:	3301      	adds	r3, #1
 8015a6a:	d003      	beq.n	8015a74 <_fwalk_sglue+0x38>
 8015a6c:	4629      	mov	r1, r5
 8015a6e:	4638      	mov	r0, r7
 8015a70:	47c0      	blx	r8
 8015a72:	4306      	orrs	r6, r0
 8015a74:	3568      	adds	r5, #104	@ 0x68
 8015a76:	e7e9      	b.n	8015a4c <_fwalk_sglue+0x10>

08015a78 <siprintf>:
 8015a78:	b40e      	push	{r1, r2, r3}
 8015a7a:	b510      	push	{r4, lr}
 8015a7c:	b09d      	sub	sp, #116	@ 0x74
 8015a7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015a80:	9002      	str	r0, [sp, #8]
 8015a82:	9006      	str	r0, [sp, #24]
 8015a84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015a88:	480a      	ldr	r0, [pc, #40]	@ (8015ab4 <siprintf+0x3c>)
 8015a8a:	9107      	str	r1, [sp, #28]
 8015a8c:	9104      	str	r1, [sp, #16]
 8015a8e:	490a      	ldr	r1, [pc, #40]	@ (8015ab8 <siprintf+0x40>)
 8015a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a94:	9105      	str	r1, [sp, #20]
 8015a96:	2400      	movs	r4, #0
 8015a98:	a902      	add	r1, sp, #8
 8015a9a:	6800      	ldr	r0, [r0, #0]
 8015a9c:	9301      	str	r3, [sp, #4]
 8015a9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015aa0:	f001 fc8e 	bl	80173c0 <_svfiprintf_r>
 8015aa4:	9b02      	ldr	r3, [sp, #8]
 8015aa6:	701c      	strb	r4, [r3, #0]
 8015aa8:	b01d      	add	sp, #116	@ 0x74
 8015aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aae:	b003      	add	sp, #12
 8015ab0:	4770      	bx	lr
 8015ab2:	bf00      	nop
 8015ab4:	240000b4 	.word	0x240000b4
 8015ab8:	ffff0208 	.word	0xffff0208

08015abc <__sread>:
 8015abc:	b510      	push	{r4, lr}
 8015abe:	460c      	mov	r4, r1
 8015ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ac4:	f000 f95e 	bl	8015d84 <_read_r>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	bfab      	itete	ge
 8015acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015ace:	89a3      	ldrhlt	r3, [r4, #12]
 8015ad0:	181b      	addge	r3, r3, r0
 8015ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015ad6:	bfac      	ite	ge
 8015ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015ada:	81a3      	strhlt	r3, [r4, #12]
 8015adc:	bd10      	pop	{r4, pc}

08015ade <__swrite>:
 8015ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae2:	461f      	mov	r7, r3
 8015ae4:	898b      	ldrh	r3, [r1, #12]
 8015ae6:	05db      	lsls	r3, r3, #23
 8015ae8:	4605      	mov	r5, r0
 8015aea:	460c      	mov	r4, r1
 8015aec:	4616      	mov	r6, r2
 8015aee:	d505      	bpl.n	8015afc <__swrite+0x1e>
 8015af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af4:	2302      	movs	r3, #2
 8015af6:	2200      	movs	r2, #0
 8015af8:	f000 f932 	bl	8015d60 <_lseek_r>
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015b06:	81a3      	strh	r3, [r4, #12]
 8015b08:	4632      	mov	r2, r6
 8015b0a:	463b      	mov	r3, r7
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b12:	f000 b949 	b.w	8015da8 <_write_r>

08015b16 <__sseek>:
 8015b16:	b510      	push	{r4, lr}
 8015b18:	460c      	mov	r4, r1
 8015b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b1e:	f000 f91f 	bl	8015d60 <_lseek_r>
 8015b22:	1c43      	adds	r3, r0, #1
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	bf15      	itete	ne
 8015b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015b32:	81a3      	strheq	r3, [r4, #12]
 8015b34:	bf18      	it	ne
 8015b36:	81a3      	strhne	r3, [r4, #12]
 8015b38:	bd10      	pop	{r4, pc}

08015b3a <__sclose>:
 8015b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b3e:	f000 b8a1 	b.w	8015c84 <_close_r>

08015b42 <__swbuf_r>:
 8015b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b44:	460e      	mov	r6, r1
 8015b46:	4614      	mov	r4, r2
 8015b48:	4605      	mov	r5, r0
 8015b4a:	b118      	cbz	r0, 8015b54 <__swbuf_r+0x12>
 8015b4c:	6a03      	ldr	r3, [r0, #32]
 8015b4e:	b90b      	cbnz	r3, 8015b54 <__swbuf_r+0x12>
 8015b50:	f7ff ff5c 	bl	8015a0c <__sinit>
 8015b54:	69a3      	ldr	r3, [r4, #24]
 8015b56:	60a3      	str	r3, [r4, #8]
 8015b58:	89a3      	ldrh	r3, [r4, #12]
 8015b5a:	071a      	lsls	r2, r3, #28
 8015b5c:	d501      	bpl.n	8015b62 <__swbuf_r+0x20>
 8015b5e:	6923      	ldr	r3, [r4, #16]
 8015b60:	b943      	cbnz	r3, 8015b74 <__swbuf_r+0x32>
 8015b62:	4621      	mov	r1, r4
 8015b64:	4628      	mov	r0, r5
 8015b66:	f000 f82b 	bl	8015bc0 <__swsetup_r>
 8015b6a:	b118      	cbz	r0, 8015b74 <__swbuf_r+0x32>
 8015b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8015b70:	4638      	mov	r0, r7
 8015b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	6922      	ldr	r2, [r4, #16]
 8015b78:	1a98      	subs	r0, r3, r2
 8015b7a:	6963      	ldr	r3, [r4, #20]
 8015b7c:	b2f6      	uxtb	r6, r6
 8015b7e:	4283      	cmp	r3, r0
 8015b80:	4637      	mov	r7, r6
 8015b82:	dc05      	bgt.n	8015b90 <__swbuf_r+0x4e>
 8015b84:	4621      	mov	r1, r4
 8015b86:	4628      	mov	r0, r5
 8015b88:	f001 fd9a 	bl	80176c0 <_fflush_r>
 8015b8c:	2800      	cmp	r0, #0
 8015b8e:	d1ed      	bne.n	8015b6c <__swbuf_r+0x2a>
 8015b90:	68a3      	ldr	r3, [r4, #8]
 8015b92:	3b01      	subs	r3, #1
 8015b94:	60a3      	str	r3, [r4, #8]
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	1c5a      	adds	r2, r3, #1
 8015b9a:	6022      	str	r2, [r4, #0]
 8015b9c:	701e      	strb	r6, [r3, #0]
 8015b9e:	6962      	ldr	r2, [r4, #20]
 8015ba0:	1c43      	adds	r3, r0, #1
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d004      	beq.n	8015bb0 <__swbuf_r+0x6e>
 8015ba6:	89a3      	ldrh	r3, [r4, #12]
 8015ba8:	07db      	lsls	r3, r3, #31
 8015baa:	d5e1      	bpl.n	8015b70 <__swbuf_r+0x2e>
 8015bac:	2e0a      	cmp	r6, #10
 8015bae:	d1df      	bne.n	8015b70 <__swbuf_r+0x2e>
 8015bb0:	4621      	mov	r1, r4
 8015bb2:	4628      	mov	r0, r5
 8015bb4:	f001 fd84 	bl	80176c0 <_fflush_r>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d0d9      	beq.n	8015b70 <__swbuf_r+0x2e>
 8015bbc:	e7d6      	b.n	8015b6c <__swbuf_r+0x2a>
	...

08015bc0 <__swsetup_r>:
 8015bc0:	b538      	push	{r3, r4, r5, lr}
 8015bc2:	4b29      	ldr	r3, [pc, #164]	@ (8015c68 <__swsetup_r+0xa8>)
 8015bc4:	4605      	mov	r5, r0
 8015bc6:	6818      	ldr	r0, [r3, #0]
 8015bc8:	460c      	mov	r4, r1
 8015bca:	b118      	cbz	r0, 8015bd4 <__swsetup_r+0x14>
 8015bcc:	6a03      	ldr	r3, [r0, #32]
 8015bce:	b90b      	cbnz	r3, 8015bd4 <__swsetup_r+0x14>
 8015bd0:	f7ff ff1c 	bl	8015a0c <__sinit>
 8015bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd8:	0719      	lsls	r1, r3, #28
 8015bda:	d422      	bmi.n	8015c22 <__swsetup_r+0x62>
 8015bdc:	06da      	lsls	r2, r3, #27
 8015bde:	d407      	bmi.n	8015bf0 <__swsetup_r+0x30>
 8015be0:	2209      	movs	r2, #9
 8015be2:	602a      	str	r2, [r5, #0]
 8015be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015be8:	81a3      	strh	r3, [r4, #12]
 8015bea:	f04f 30ff 	mov.w	r0, #4294967295
 8015bee:	e033      	b.n	8015c58 <__swsetup_r+0x98>
 8015bf0:	0758      	lsls	r0, r3, #29
 8015bf2:	d512      	bpl.n	8015c1a <__swsetup_r+0x5a>
 8015bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015bf6:	b141      	cbz	r1, 8015c0a <__swsetup_r+0x4a>
 8015bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015bfc:	4299      	cmp	r1, r3
 8015bfe:	d002      	beq.n	8015c06 <__swsetup_r+0x46>
 8015c00:	4628      	mov	r0, r5
 8015c02:	f000 ff07 	bl	8016a14 <_free_r>
 8015c06:	2300      	movs	r3, #0
 8015c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c0a:	89a3      	ldrh	r3, [r4, #12]
 8015c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015c10:	81a3      	strh	r3, [r4, #12]
 8015c12:	2300      	movs	r3, #0
 8015c14:	6063      	str	r3, [r4, #4]
 8015c16:	6923      	ldr	r3, [r4, #16]
 8015c18:	6023      	str	r3, [r4, #0]
 8015c1a:	89a3      	ldrh	r3, [r4, #12]
 8015c1c:	f043 0308 	orr.w	r3, r3, #8
 8015c20:	81a3      	strh	r3, [r4, #12]
 8015c22:	6923      	ldr	r3, [r4, #16]
 8015c24:	b94b      	cbnz	r3, 8015c3a <__swsetup_r+0x7a>
 8015c26:	89a3      	ldrh	r3, [r4, #12]
 8015c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015c30:	d003      	beq.n	8015c3a <__swsetup_r+0x7a>
 8015c32:	4621      	mov	r1, r4
 8015c34:	4628      	mov	r0, r5
 8015c36:	f001 fd91 	bl	801775c <__smakebuf_r>
 8015c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c3e:	f013 0201 	ands.w	r2, r3, #1
 8015c42:	d00a      	beq.n	8015c5a <__swsetup_r+0x9a>
 8015c44:	2200      	movs	r2, #0
 8015c46:	60a2      	str	r2, [r4, #8]
 8015c48:	6962      	ldr	r2, [r4, #20]
 8015c4a:	4252      	negs	r2, r2
 8015c4c:	61a2      	str	r2, [r4, #24]
 8015c4e:	6922      	ldr	r2, [r4, #16]
 8015c50:	b942      	cbnz	r2, 8015c64 <__swsetup_r+0xa4>
 8015c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015c56:	d1c5      	bne.n	8015be4 <__swsetup_r+0x24>
 8015c58:	bd38      	pop	{r3, r4, r5, pc}
 8015c5a:	0799      	lsls	r1, r3, #30
 8015c5c:	bf58      	it	pl
 8015c5e:	6962      	ldrpl	r2, [r4, #20]
 8015c60:	60a2      	str	r2, [r4, #8]
 8015c62:	e7f4      	b.n	8015c4e <__swsetup_r+0x8e>
 8015c64:	2000      	movs	r0, #0
 8015c66:	e7f7      	b.n	8015c58 <__swsetup_r+0x98>
 8015c68:	240000b4 	.word	0x240000b4

08015c6c <memset>:
 8015c6c:	4402      	add	r2, r0
 8015c6e:	4603      	mov	r3, r0
 8015c70:	4293      	cmp	r3, r2
 8015c72:	d100      	bne.n	8015c76 <memset+0xa>
 8015c74:	4770      	bx	lr
 8015c76:	f803 1b01 	strb.w	r1, [r3], #1
 8015c7a:	e7f9      	b.n	8015c70 <memset+0x4>

08015c7c <_localeconv_r>:
 8015c7c:	4800      	ldr	r0, [pc, #0]	@ (8015c80 <_localeconv_r+0x4>)
 8015c7e:	4770      	bx	lr
 8015c80:	240001f4 	.word	0x240001f4

08015c84 <_close_r>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	4d06      	ldr	r5, [pc, #24]	@ (8015ca0 <_close_r+0x1c>)
 8015c88:	2300      	movs	r3, #0
 8015c8a:	4604      	mov	r4, r0
 8015c8c:	4608      	mov	r0, r1
 8015c8e:	602b      	str	r3, [r5, #0]
 8015c90:	f7ee f840 	bl	8003d14 <_close>
 8015c94:	1c43      	adds	r3, r0, #1
 8015c96:	d102      	bne.n	8015c9e <_close_r+0x1a>
 8015c98:	682b      	ldr	r3, [r5, #0]
 8015c9a:	b103      	cbz	r3, 8015c9e <_close_r+0x1a>
 8015c9c:	6023      	str	r3, [r4, #0]
 8015c9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ca0:	24005bdc 	.word	0x24005bdc

08015ca4 <_reclaim_reent>:
 8015ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8015d5c <_reclaim_reent+0xb8>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	4283      	cmp	r3, r0
 8015caa:	b570      	push	{r4, r5, r6, lr}
 8015cac:	4604      	mov	r4, r0
 8015cae:	d053      	beq.n	8015d58 <_reclaim_reent+0xb4>
 8015cb0:	69c3      	ldr	r3, [r0, #28]
 8015cb2:	b31b      	cbz	r3, 8015cfc <_reclaim_reent+0x58>
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	b163      	cbz	r3, 8015cd2 <_reclaim_reent+0x2e>
 8015cb8:	2500      	movs	r5, #0
 8015cba:	69e3      	ldr	r3, [r4, #28]
 8015cbc:	68db      	ldr	r3, [r3, #12]
 8015cbe:	5959      	ldr	r1, [r3, r5]
 8015cc0:	b9b1      	cbnz	r1, 8015cf0 <_reclaim_reent+0x4c>
 8015cc2:	3504      	adds	r5, #4
 8015cc4:	2d80      	cmp	r5, #128	@ 0x80
 8015cc6:	d1f8      	bne.n	8015cba <_reclaim_reent+0x16>
 8015cc8:	69e3      	ldr	r3, [r4, #28]
 8015cca:	4620      	mov	r0, r4
 8015ccc:	68d9      	ldr	r1, [r3, #12]
 8015cce:	f000 fea1 	bl	8016a14 <_free_r>
 8015cd2:	69e3      	ldr	r3, [r4, #28]
 8015cd4:	6819      	ldr	r1, [r3, #0]
 8015cd6:	b111      	cbz	r1, 8015cde <_reclaim_reent+0x3a>
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f000 fe9b 	bl	8016a14 <_free_r>
 8015cde:	69e3      	ldr	r3, [r4, #28]
 8015ce0:	689d      	ldr	r5, [r3, #8]
 8015ce2:	b15d      	cbz	r5, 8015cfc <_reclaim_reent+0x58>
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	682d      	ldr	r5, [r5, #0]
 8015cea:	f000 fe93 	bl	8016a14 <_free_r>
 8015cee:	e7f8      	b.n	8015ce2 <_reclaim_reent+0x3e>
 8015cf0:	680e      	ldr	r6, [r1, #0]
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f000 fe8e 	bl	8016a14 <_free_r>
 8015cf8:	4631      	mov	r1, r6
 8015cfa:	e7e1      	b.n	8015cc0 <_reclaim_reent+0x1c>
 8015cfc:	6961      	ldr	r1, [r4, #20]
 8015cfe:	b111      	cbz	r1, 8015d06 <_reclaim_reent+0x62>
 8015d00:	4620      	mov	r0, r4
 8015d02:	f000 fe87 	bl	8016a14 <_free_r>
 8015d06:	69e1      	ldr	r1, [r4, #28]
 8015d08:	b111      	cbz	r1, 8015d10 <_reclaim_reent+0x6c>
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f000 fe82 	bl	8016a14 <_free_r>
 8015d10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015d12:	b111      	cbz	r1, 8015d1a <_reclaim_reent+0x76>
 8015d14:	4620      	mov	r0, r4
 8015d16:	f000 fe7d 	bl	8016a14 <_free_r>
 8015d1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d1c:	b111      	cbz	r1, 8015d24 <_reclaim_reent+0x80>
 8015d1e:	4620      	mov	r0, r4
 8015d20:	f000 fe78 	bl	8016a14 <_free_r>
 8015d24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015d26:	b111      	cbz	r1, 8015d2e <_reclaim_reent+0x8a>
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f000 fe73 	bl	8016a14 <_free_r>
 8015d2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015d30:	b111      	cbz	r1, 8015d38 <_reclaim_reent+0x94>
 8015d32:	4620      	mov	r0, r4
 8015d34:	f000 fe6e 	bl	8016a14 <_free_r>
 8015d38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015d3a:	b111      	cbz	r1, 8015d42 <_reclaim_reent+0x9e>
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	f000 fe69 	bl	8016a14 <_free_r>
 8015d42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015d44:	b111      	cbz	r1, 8015d4c <_reclaim_reent+0xa8>
 8015d46:	4620      	mov	r0, r4
 8015d48:	f000 fe64 	bl	8016a14 <_free_r>
 8015d4c:	6a23      	ldr	r3, [r4, #32]
 8015d4e:	b11b      	cbz	r3, 8015d58 <_reclaim_reent+0xb4>
 8015d50:	4620      	mov	r0, r4
 8015d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d56:	4718      	bx	r3
 8015d58:	bd70      	pop	{r4, r5, r6, pc}
 8015d5a:	bf00      	nop
 8015d5c:	240000b4 	.word	0x240000b4

08015d60 <_lseek_r>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	4d07      	ldr	r5, [pc, #28]	@ (8015d80 <_lseek_r+0x20>)
 8015d64:	4604      	mov	r4, r0
 8015d66:	4608      	mov	r0, r1
 8015d68:	4611      	mov	r1, r2
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	602a      	str	r2, [r5, #0]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	f7ed fff7 	bl	8003d62 <_lseek>
 8015d74:	1c43      	adds	r3, r0, #1
 8015d76:	d102      	bne.n	8015d7e <_lseek_r+0x1e>
 8015d78:	682b      	ldr	r3, [r5, #0]
 8015d7a:	b103      	cbz	r3, 8015d7e <_lseek_r+0x1e>
 8015d7c:	6023      	str	r3, [r4, #0]
 8015d7e:	bd38      	pop	{r3, r4, r5, pc}
 8015d80:	24005bdc 	.word	0x24005bdc

08015d84 <_read_r>:
 8015d84:	b538      	push	{r3, r4, r5, lr}
 8015d86:	4d07      	ldr	r5, [pc, #28]	@ (8015da4 <_read_r+0x20>)
 8015d88:	4604      	mov	r4, r0
 8015d8a:	4608      	mov	r0, r1
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	2200      	movs	r2, #0
 8015d90:	602a      	str	r2, [r5, #0]
 8015d92:	461a      	mov	r2, r3
 8015d94:	f7ed ff85 	bl	8003ca2 <_read>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d102      	bne.n	8015da2 <_read_r+0x1e>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <_read_r+0x1e>
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	bd38      	pop	{r3, r4, r5, pc}
 8015da4:	24005bdc 	.word	0x24005bdc

08015da8 <_write_r>:
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	4d07      	ldr	r5, [pc, #28]	@ (8015dc8 <_write_r+0x20>)
 8015dac:	4604      	mov	r4, r0
 8015dae:	4608      	mov	r0, r1
 8015db0:	4611      	mov	r1, r2
 8015db2:	2200      	movs	r2, #0
 8015db4:	602a      	str	r2, [r5, #0]
 8015db6:	461a      	mov	r2, r3
 8015db8:	f7ed ff90 	bl	8003cdc <_write>
 8015dbc:	1c43      	adds	r3, r0, #1
 8015dbe:	d102      	bne.n	8015dc6 <_write_r+0x1e>
 8015dc0:	682b      	ldr	r3, [r5, #0]
 8015dc2:	b103      	cbz	r3, 8015dc6 <_write_r+0x1e>
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	bd38      	pop	{r3, r4, r5, pc}
 8015dc8:	24005bdc 	.word	0x24005bdc

08015dcc <__errno>:
 8015dcc:	4b01      	ldr	r3, [pc, #4]	@ (8015dd4 <__errno+0x8>)
 8015dce:	6818      	ldr	r0, [r3, #0]
 8015dd0:	4770      	bx	lr
 8015dd2:	bf00      	nop
 8015dd4:	240000b4 	.word	0x240000b4

08015dd8 <__libc_init_array>:
 8015dd8:	b570      	push	{r4, r5, r6, lr}
 8015dda:	4d0d      	ldr	r5, [pc, #52]	@ (8015e10 <__libc_init_array+0x38>)
 8015ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8015e14 <__libc_init_array+0x3c>)
 8015dde:	1b64      	subs	r4, r4, r5
 8015de0:	10a4      	asrs	r4, r4, #2
 8015de2:	2600      	movs	r6, #0
 8015de4:	42a6      	cmp	r6, r4
 8015de6:	d109      	bne.n	8015dfc <__libc_init_array+0x24>
 8015de8:	4d0b      	ldr	r5, [pc, #44]	@ (8015e18 <__libc_init_array+0x40>)
 8015dea:	4c0c      	ldr	r4, [pc, #48]	@ (8015e1c <__libc_init_array+0x44>)
 8015dec:	f001 ff64 	bl	8017cb8 <_init>
 8015df0:	1b64      	subs	r4, r4, r5
 8015df2:	10a4      	asrs	r4, r4, #2
 8015df4:	2600      	movs	r6, #0
 8015df6:	42a6      	cmp	r6, r4
 8015df8:	d105      	bne.n	8015e06 <__libc_init_array+0x2e>
 8015dfa:	bd70      	pop	{r4, r5, r6, pc}
 8015dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e00:	4798      	blx	r3
 8015e02:	3601      	adds	r6, #1
 8015e04:	e7ee      	b.n	8015de4 <__libc_init_array+0xc>
 8015e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e0a:	4798      	blx	r3
 8015e0c:	3601      	adds	r6, #1
 8015e0e:	e7f2      	b.n	8015df6 <__libc_init_array+0x1e>
 8015e10:	0801f00c 	.word	0x0801f00c
 8015e14:	0801f00c 	.word	0x0801f00c
 8015e18:	0801f00c 	.word	0x0801f00c
 8015e1c:	0801f010 	.word	0x0801f010

08015e20 <__retarget_lock_init_recursive>:
 8015e20:	4770      	bx	lr

08015e22 <__retarget_lock_acquire_recursive>:
 8015e22:	4770      	bx	lr

08015e24 <__retarget_lock_release_recursive>:
 8015e24:	4770      	bx	lr

08015e26 <memcpy>:
 8015e26:	440a      	add	r2, r1
 8015e28:	4291      	cmp	r1, r2
 8015e2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e2e:	d100      	bne.n	8015e32 <memcpy+0xc>
 8015e30:	4770      	bx	lr
 8015e32:	b510      	push	{r4, lr}
 8015e34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e3c:	4291      	cmp	r1, r2
 8015e3e:	d1f9      	bne.n	8015e34 <memcpy+0xe>
 8015e40:	bd10      	pop	{r4, pc}

08015e42 <quorem>:
 8015e42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e46:	6903      	ldr	r3, [r0, #16]
 8015e48:	690c      	ldr	r4, [r1, #16]
 8015e4a:	42a3      	cmp	r3, r4
 8015e4c:	4607      	mov	r7, r0
 8015e4e:	db7e      	blt.n	8015f4e <quorem+0x10c>
 8015e50:	3c01      	subs	r4, #1
 8015e52:	f101 0814 	add.w	r8, r1, #20
 8015e56:	00a3      	lsls	r3, r4, #2
 8015e58:	f100 0514 	add.w	r5, r0, #20
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015e62:	9301      	str	r3, [sp, #4]
 8015e64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015e68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8015e78:	d32e      	bcc.n	8015ed8 <quorem+0x96>
 8015e7a:	f04f 0a00 	mov.w	sl, #0
 8015e7e:	46c4      	mov	ip, r8
 8015e80:	46ae      	mov	lr, r5
 8015e82:	46d3      	mov	fp, sl
 8015e84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015e88:	b298      	uxth	r0, r3
 8015e8a:	fb06 a000 	mla	r0, r6, r0, sl
 8015e8e:	0c02      	lsrs	r2, r0, #16
 8015e90:	0c1b      	lsrs	r3, r3, #16
 8015e92:	fb06 2303 	mla	r3, r6, r3, r2
 8015e96:	f8de 2000 	ldr.w	r2, [lr]
 8015e9a:	b280      	uxth	r0, r0
 8015e9c:	b292      	uxth	r2, r2
 8015e9e:	1a12      	subs	r2, r2, r0
 8015ea0:	445a      	add	r2, fp
 8015ea2:	f8de 0000 	ldr.w	r0, [lr]
 8015ea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015eb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015eb4:	b292      	uxth	r2, r2
 8015eb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015eba:	45e1      	cmp	r9, ip
 8015ebc:	f84e 2b04 	str.w	r2, [lr], #4
 8015ec0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015ec4:	d2de      	bcs.n	8015e84 <quorem+0x42>
 8015ec6:	9b00      	ldr	r3, [sp, #0]
 8015ec8:	58eb      	ldr	r3, [r5, r3]
 8015eca:	b92b      	cbnz	r3, 8015ed8 <quorem+0x96>
 8015ecc:	9b01      	ldr	r3, [sp, #4]
 8015ece:	3b04      	subs	r3, #4
 8015ed0:	429d      	cmp	r5, r3
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	d32f      	bcc.n	8015f36 <quorem+0xf4>
 8015ed6:	613c      	str	r4, [r7, #16]
 8015ed8:	4638      	mov	r0, r7
 8015eda:	f001 f90d 	bl	80170f8 <__mcmp>
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	db25      	blt.n	8015f2e <quorem+0xec>
 8015ee2:	4629      	mov	r1, r5
 8015ee4:	2000      	movs	r0, #0
 8015ee6:	f858 2b04 	ldr.w	r2, [r8], #4
 8015eea:	f8d1 c000 	ldr.w	ip, [r1]
 8015eee:	fa1f fe82 	uxth.w	lr, r2
 8015ef2:	fa1f f38c 	uxth.w	r3, ip
 8015ef6:	eba3 030e 	sub.w	r3, r3, lr
 8015efa:	4403      	add	r3, r0
 8015efc:	0c12      	lsrs	r2, r2, #16
 8015efe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015f02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f0c:	45c1      	cmp	r9, r8
 8015f0e:	f841 3b04 	str.w	r3, [r1], #4
 8015f12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015f16:	d2e6      	bcs.n	8015ee6 <quorem+0xa4>
 8015f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f20:	b922      	cbnz	r2, 8015f2c <quorem+0xea>
 8015f22:	3b04      	subs	r3, #4
 8015f24:	429d      	cmp	r5, r3
 8015f26:	461a      	mov	r2, r3
 8015f28:	d30b      	bcc.n	8015f42 <quorem+0x100>
 8015f2a:	613c      	str	r4, [r7, #16]
 8015f2c:	3601      	adds	r6, #1
 8015f2e:	4630      	mov	r0, r6
 8015f30:	b003      	add	sp, #12
 8015f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f36:	6812      	ldr	r2, [r2, #0]
 8015f38:	3b04      	subs	r3, #4
 8015f3a:	2a00      	cmp	r2, #0
 8015f3c:	d1cb      	bne.n	8015ed6 <quorem+0x94>
 8015f3e:	3c01      	subs	r4, #1
 8015f40:	e7c6      	b.n	8015ed0 <quorem+0x8e>
 8015f42:	6812      	ldr	r2, [r2, #0]
 8015f44:	3b04      	subs	r3, #4
 8015f46:	2a00      	cmp	r2, #0
 8015f48:	d1ef      	bne.n	8015f2a <quorem+0xe8>
 8015f4a:	3c01      	subs	r4, #1
 8015f4c:	e7ea      	b.n	8015f24 <quorem+0xe2>
 8015f4e:	2000      	movs	r0, #0
 8015f50:	e7ee      	b.n	8015f30 <quorem+0xee>
 8015f52:	0000      	movs	r0, r0
 8015f54:	0000      	movs	r0, r0
	...

08015f58 <_dtoa_r>:
 8015f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5c:	ed2d 8b02 	vpush	{d8}
 8015f60:	69c7      	ldr	r7, [r0, #28]
 8015f62:	b091      	sub	sp, #68	@ 0x44
 8015f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015f68:	ec55 4b10 	vmov	r4, r5, d0
 8015f6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8015f6e:	9107      	str	r1, [sp, #28]
 8015f70:	4681      	mov	r9, r0
 8015f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f74:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f76:	b97f      	cbnz	r7, 8015f98 <_dtoa_r+0x40>
 8015f78:	2010      	movs	r0, #16
 8015f7a:	f000 fd95 	bl	8016aa8 <malloc>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	f8c9 001c 	str.w	r0, [r9, #28]
 8015f84:	b920      	cbnz	r0, 8015f90 <_dtoa_r+0x38>
 8015f86:	4ba0      	ldr	r3, [pc, #640]	@ (8016208 <_dtoa_r+0x2b0>)
 8015f88:	21ef      	movs	r1, #239	@ 0xef
 8015f8a:	48a0      	ldr	r0, [pc, #640]	@ (801620c <_dtoa_r+0x2b4>)
 8015f8c:	f001 fc6e 	bl	801786c <__assert_func>
 8015f90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015f94:	6007      	str	r7, [r0, #0]
 8015f96:	60c7      	str	r7, [r0, #12]
 8015f98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015f9c:	6819      	ldr	r1, [r3, #0]
 8015f9e:	b159      	cbz	r1, 8015fb8 <_dtoa_r+0x60>
 8015fa0:	685a      	ldr	r2, [r3, #4]
 8015fa2:	604a      	str	r2, [r1, #4]
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	4093      	lsls	r3, r2
 8015fa8:	608b      	str	r3, [r1, #8]
 8015faa:	4648      	mov	r0, r9
 8015fac:	f000 fe72 	bl	8016c94 <_Bfree>
 8015fb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	601a      	str	r2, [r3, #0]
 8015fb8:	1e2b      	subs	r3, r5, #0
 8015fba:	bfbb      	ittet	lt
 8015fbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015fc0:	9303      	strlt	r3, [sp, #12]
 8015fc2:	2300      	movge	r3, #0
 8015fc4:	2201      	movlt	r2, #1
 8015fc6:	bfac      	ite	ge
 8015fc8:	6033      	strge	r3, [r6, #0]
 8015fca:	6032      	strlt	r2, [r6, #0]
 8015fcc:	4b90      	ldr	r3, [pc, #576]	@ (8016210 <_dtoa_r+0x2b8>)
 8015fce:	9e03      	ldr	r6, [sp, #12]
 8015fd0:	43b3      	bics	r3, r6
 8015fd2:	d110      	bne.n	8015ff6 <_dtoa_r+0x9e>
 8015fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015fd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015fda:	6013      	str	r3, [r2, #0]
 8015fdc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015fe0:	4323      	orrs	r3, r4
 8015fe2:	f000 84e6 	beq.w	80169b2 <_dtoa_r+0xa5a>
 8015fe6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015fe8:	4f8a      	ldr	r7, [pc, #552]	@ (8016214 <_dtoa_r+0x2bc>)
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f000 84e8 	beq.w	80169c0 <_dtoa_r+0xa68>
 8015ff0:	1cfb      	adds	r3, r7, #3
 8015ff2:	f000 bce3 	b.w	80169bc <_dtoa_r+0xa64>
 8015ff6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015ffa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016002:	d10a      	bne.n	801601a <_dtoa_r+0xc2>
 8016004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016006:	2301      	movs	r3, #1
 8016008:	6013      	str	r3, [r2, #0]
 801600a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801600c:	b113      	cbz	r3, 8016014 <_dtoa_r+0xbc>
 801600e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016010:	4b81      	ldr	r3, [pc, #516]	@ (8016218 <_dtoa_r+0x2c0>)
 8016012:	6013      	str	r3, [r2, #0]
 8016014:	4f81      	ldr	r7, [pc, #516]	@ (801621c <_dtoa_r+0x2c4>)
 8016016:	f000 bcd3 	b.w	80169c0 <_dtoa_r+0xa68>
 801601a:	aa0e      	add	r2, sp, #56	@ 0x38
 801601c:	a90f      	add	r1, sp, #60	@ 0x3c
 801601e:	4648      	mov	r0, r9
 8016020:	eeb0 0b48 	vmov.f64	d0, d8
 8016024:	f001 f918 	bl	8017258 <__d2b>
 8016028:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801602c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801602e:	9001      	str	r0, [sp, #4]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d045      	beq.n	80160c0 <_dtoa_r+0x168>
 8016034:	eeb0 7b48 	vmov.f64	d7, d8
 8016038:	ee18 1a90 	vmov	r1, s17
 801603c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016040:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8016044:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016048:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801604c:	2500      	movs	r5, #0
 801604e:	ee07 1a90 	vmov	s15, r1
 8016052:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016056:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80161f0 <_dtoa_r+0x298>
 801605a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801605e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80161f8 <_dtoa_r+0x2a0>
 8016062:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016066:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016200 <_dtoa_r+0x2a8>
 801606a:	ee07 3a90 	vmov	s15, r3
 801606e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016072:	eeb0 7b46 	vmov.f64	d7, d6
 8016076:	eea4 7b05 	vfma.f64	d7, d4, d5
 801607a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801607e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016086:	ee16 8a90 	vmov	r8, s13
 801608a:	d508      	bpl.n	801609e <_dtoa_r+0x146>
 801608c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016090:	eeb4 6b47 	vcmp.f64	d6, d7
 8016094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016098:	bf18      	it	ne
 801609a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801609e:	f1b8 0f16 	cmp.w	r8, #22
 80160a2:	d82b      	bhi.n	80160fc <_dtoa_r+0x1a4>
 80160a4:	495e      	ldr	r1, [pc, #376]	@ (8016220 <_dtoa_r+0x2c8>)
 80160a6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80160aa:	ed91 7b00 	vldr	d7, [r1]
 80160ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80160b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b6:	d501      	bpl.n	80160bc <_dtoa_r+0x164>
 80160b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80160bc:	2100      	movs	r1, #0
 80160be:	e01e      	b.n	80160fe <_dtoa_r+0x1a6>
 80160c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160c2:	4413      	add	r3, r2
 80160c4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80160c8:	2920      	cmp	r1, #32
 80160ca:	bfc1      	itttt	gt
 80160cc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80160d0:	408e      	lslgt	r6, r1
 80160d2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80160d6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80160da:	bfd6      	itet	le
 80160dc:	f1c1 0120 	rsble	r1, r1, #32
 80160e0:	4331      	orrgt	r1, r6
 80160e2:	fa04 f101 	lslle.w	r1, r4, r1
 80160e6:	ee07 1a90 	vmov	s15, r1
 80160ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80160ee:	3b01      	subs	r3, #1
 80160f0:	ee17 1a90 	vmov	r1, s15
 80160f4:	2501      	movs	r5, #1
 80160f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80160fa:	e7a8      	b.n	801604e <_dtoa_r+0xf6>
 80160fc:	2101      	movs	r1, #1
 80160fe:	1ad2      	subs	r2, r2, r3
 8016100:	1e53      	subs	r3, r2, #1
 8016102:	9306      	str	r3, [sp, #24]
 8016104:	bf45      	ittet	mi
 8016106:	f1c2 0301 	rsbmi	r3, r2, #1
 801610a:	9304      	strmi	r3, [sp, #16]
 801610c:	2300      	movpl	r3, #0
 801610e:	2300      	movmi	r3, #0
 8016110:	bf4c      	ite	mi
 8016112:	9306      	strmi	r3, [sp, #24]
 8016114:	9304      	strpl	r3, [sp, #16]
 8016116:	f1b8 0f00 	cmp.w	r8, #0
 801611a:	910c      	str	r1, [sp, #48]	@ 0x30
 801611c:	db18      	blt.n	8016150 <_dtoa_r+0x1f8>
 801611e:	9b06      	ldr	r3, [sp, #24]
 8016120:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8016124:	4443      	add	r3, r8
 8016126:	9306      	str	r3, [sp, #24]
 8016128:	2300      	movs	r3, #0
 801612a:	9a07      	ldr	r2, [sp, #28]
 801612c:	2a09      	cmp	r2, #9
 801612e:	d845      	bhi.n	80161bc <_dtoa_r+0x264>
 8016130:	2a05      	cmp	r2, #5
 8016132:	bfc4      	itt	gt
 8016134:	3a04      	subgt	r2, #4
 8016136:	9207      	strgt	r2, [sp, #28]
 8016138:	9a07      	ldr	r2, [sp, #28]
 801613a:	f1a2 0202 	sub.w	r2, r2, #2
 801613e:	bfcc      	ite	gt
 8016140:	2400      	movgt	r4, #0
 8016142:	2401      	movle	r4, #1
 8016144:	2a03      	cmp	r2, #3
 8016146:	d844      	bhi.n	80161d2 <_dtoa_r+0x27a>
 8016148:	e8df f002 	tbb	[pc, r2]
 801614c:	0b173634 	.word	0x0b173634
 8016150:	9b04      	ldr	r3, [sp, #16]
 8016152:	2200      	movs	r2, #0
 8016154:	eba3 0308 	sub.w	r3, r3, r8
 8016158:	9304      	str	r3, [sp, #16]
 801615a:	920a      	str	r2, [sp, #40]	@ 0x28
 801615c:	f1c8 0300 	rsb	r3, r8, #0
 8016160:	e7e3      	b.n	801612a <_dtoa_r+0x1d2>
 8016162:	2201      	movs	r2, #1
 8016164:	9208      	str	r2, [sp, #32]
 8016166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016168:	eb08 0b02 	add.w	fp, r8, r2
 801616c:	f10b 0a01 	add.w	sl, fp, #1
 8016170:	4652      	mov	r2, sl
 8016172:	2a01      	cmp	r2, #1
 8016174:	bfb8      	it	lt
 8016176:	2201      	movlt	r2, #1
 8016178:	e006      	b.n	8016188 <_dtoa_r+0x230>
 801617a:	2201      	movs	r2, #1
 801617c:	9208      	str	r2, [sp, #32]
 801617e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016180:	2a00      	cmp	r2, #0
 8016182:	dd29      	ble.n	80161d8 <_dtoa_r+0x280>
 8016184:	4693      	mov	fp, r2
 8016186:	4692      	mov	sl, r2
 8016188:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801618c:	2100      	movs	r1, #0
 801618e:	2004      	movs	r0, #4
 8016190:	f100 0614 	add.w	r6, r0, #20
 8016194:	4296      	cmp	r6, r2
 8016196:	d926      	bls.n	80161e6 <_dtoa_r+0x28e>
 8016198:	6079      	str	r1, [r7, #4]
 801619a:	4648      	mov	r0, r9
 801619c:	9305      	str	r3, [sp, #20]
 801619e:	f000 fd39 	bl	8016c14 <_Balloc>
 80161a2:	9b05      	ldr	r3, [sp, #20]
 80161a4:	4607      	mov	r7, r0
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d13e      	bne.n	8016228 <_dtoa_r+0x2d0>
 80161aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016224 <_dtoa_r+0x2cc>)
 80161ac:	4602      	mov	r2, r0
 80161ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80161b2:	e6ea      	b.n	8015f8a <_dtoa_r+0x32>
 80161b4:	2200      	movs	r2, #0
 80161b6:	e7e1      	b.n	801617c <_dtoa_r+0x224>
 80161b8:	2200      	movs	r2, #0
 80161ba:	e7d3      	b.n	8016164 <_dtoa_r+0x20c>
 80161bc:	2401      	movs	r4, #1
 80161be:	2200      	movs	r2, #0
 80161c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80161c4:	f04f 3bff 	mov.w	fp, #4294967295
 80161c8:	2100      	movs	r1, #0
 80161ca:	46da      	mov	sl, fp
 80161cc:	2212      	movs	r2, #18
 80161ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80161d0:	e7da      	b.n	8016188 <_dtoa_r+0x230>
 80161d2:	2201      	movs	r2, #1
 80161d4:	9208      	str	r2, [sp, #32]
 80161d6:	e7f5      	b.n	80161c4 <_dtoa_r+0x26c>
 80161d8:	f04f 0b01 	mov.w	fp, #1
 80161dc:	46da      	mov	sl, fp
 80161de:	465a      	mov	r2, fp
 80161e0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80161e4:	e7d0      	b.n	8016188 <_dtoa_r+0x230>
 80161e6:	3101      	adds	r1, #1
 80161e8:	0040      	lsls	r0, r0, #1
 80161ea:	e7d1      	b.n	8016190 <_dtoa_r+0x238>
 80161ec:	f3af 8000 	nop.w
 80161f0:	636f4361 	.word	0x636f4361
 80161f4:	3fd287a7 	.word	0x3fd287a7
 80161f8:	8b60c8b3 	.word	0x8b60c8b3
 80161fc:	3fc68a28 	.word	0x3fc68a28
 8016200:	509f79fb 	.word	0x509f79fb
 8016204:	3fd34413 	.word	0x3fd34413
 8016208:	0801ecd1 	.word	0x0801ecd1
 801620c:	0801ece8 	.word	0x0801ece8
 8016210:	7ff00000 	.word	0x7ff00000
 8016214:	0801eccd 	.word	0x0801eccd
 8016218:	0801eca1 	.word	0x0801eca1
 801621c:	0801eca0 	.word	0x0801eca0
 8016220:	0801ee38 	.word	0x0801ee38
 8016224:	0801ed40 	.word	0x0801ed40
 8016228:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801622c:	f1ba 0f0e 	cmp.w	sl, #14
 8016230:	6010      	str	r0, [r2, #0]
 8016232:	d86e      	bhi.n	8016312 <_dtoa_r+0x3ba>
 8016234:	2c00      	cmp	r4, #0
 8016236:	d06c      	beq.n	8016312 <_dtoa_r+0x3ba>
 8016238:	f1b8 0f00 	cmp.w	r8, #0
 801623c:	f340 80b4 	ble.w	80163a8 <_dtoa_r+0x450>
 8016240:	4ac8      	ldr	r2, [pc, #800]	@ (8016564 <_dtoa_r+0x60c>)
 8016242:	f008 010f 	and.w	r1, r8, #15
 8016246:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801624a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801624e:	ed92 7b00 	vldr	d7, [r2]
 8016252:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016256:	f000 809b 	beq.w	8016390 <_dtoa_r+0x438>
 801625a:	4ac3      	ldr	r2, [pc, #780]	@ (8016568 <_dtoa_r+0x610>)
 801625c:	ed92 6b08 	vldr	d6, [r2, #32]
 8016260:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016264:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016268:	f001 010f 	and.w	r1, r1, #15
 801626c:	2203      	movs	r2, #3
 801626e:	48be      	ldr	r0, [pc, #760]	@ (8016568 <_dtoa_r+0x610>)
 8016270:	2900      	cmp	r1, #0
 8016272:	f040 808f 	bne.w	8016394 <_dtoa_r+0x43c>
 8016276:	ed9d 6b02 	vldr	d6, [sp, #8]
 801627a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801627e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016282:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016288:	2900      	cmp	r1, #0
 801628a:	f000 80b3 	beq.w	80163f4 <_dtoa_r+0x49c>
 801628e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016292:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629a:	f140 80ab 	bpl.w	80163f4 <_dtoa_r+0x49c>
 801629e:	f1ba 0f00 	cmp.w	sl, #0
 80162a2:	f000 80a7 	beq.w	80163f4 <_dtoa_r+0x49c>
 80162a6:	f1bb 0f00 	cmp.w	fp, #0
 80162aa:	dd30      	ble.n	801630e <_dtoa_r+0x3b6>
 80162ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80162b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80162b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80162b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80162bc:	9105      	str	r1, [sp, #20]
 80162be:	3201      	adds	r2, #1
 80162c0:	465c      	mov	r4, fp
 80162c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80162c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80162ca:	ee07 2a90 	vmov	s15, r2
 80162ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80162d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80162d6:	ee15 2a90 	vmov	r2, s11
 80162da:	ec51 0b15 	vmov	r0, r1, d5
 80162de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80162e2:	2c00      	cmp	r4, #0
 80162e4:	f040 808a 	bne.w	80163fc <_dtoa_r+0x4a4>
 80162e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80162ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80162f0:	ec41 0b17 	vmov	d7, r0, r1
 80162f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80162f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fc:	f300 826a 	bgt.w	80167d4 <_dtoa_r+0x87c>
 8016300:	eeb1 7b47 	vneg.f64	d7, d7
 8016304:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801630c:	d423      	bmi.n	8016356 <_dtoa_r+0x3fe>
 801630e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016312:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016314:	2a00      	cmp	r2, #0
 8016316:	f2c0 8129 	blt.w	801656c <_dtoa_r+0x614>
 801631a:	f1b8 0f0e 	cmp.w	r8, #14
 801631e:	f300 8125 	bgt.w	801656c <_dtoa_r+0x614>
 8016322:	4b90      	ldr	r3, [pc, #576]	@ (8016564 <_dtoa_r+0x60c>)
 8016324:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016328:	ed93 6b00 	vldr	d6, [r3]
 801632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801632e:	2b00      	cmp	r3, #0
 8016330:	f280 80c8 	bge.w	80164c4 <_dtoa_r+0x56c>
 8016334:	f1ba 0f00 	cmp.w	sl, #0
 8016338:	f300 80c4 	bgt.w	80164c4 <_dtoa_r+0x56c>
 801633c:	d10b      	bne.n	8016356 <_dtoa_r+0x3fe>
 801633e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016342:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016346:	ed9d 7b02 	vldr	d7, [sp, #8]
 801634a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016352:	f2c0 823c 	blt.w	80167ce <_dtoa_r+0x876>
 8016356:	2400      	movs	r4, #0
 8016358:	4625      	mov	r5, r4
 801635a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801635c:	43db      	mvns	r3, r3
 801635e:	9305      	str	r3, [sp, #20]
 8016360:	463e      	mov	r6, r7
 8016362:	f04f 0800 	mov.w	r8, #0
 8016366:	4621      	mov	r1, r4
 8016368:	4648      	mov	r0, r9
 801636a:	f000 fc93 	bl	8016c94 <_Bfree>
 801636e:	2d00      	cmp	r5, #0
 8016370:	f000 80a2 	beq.w	80164b8 <_dtoa_r+0x560>
 8016374:	f1b8 0f00 	cmp.w	r8, #0
 8016378:	d005      	beq.n	8016386 <_dtoa_r+0x42e>
 801637a:	45a8      	cmp	r8, r5
 801637c:	d003      	beq.n	8016386 <_dtoa_r+0x42e>
 801637e:	4641      	mov	r1, r8
 8016380:	4648      	mov	r0, r9
 8016382:	f000 fc87 	bl	8016c94 <_Bfree>
 8016386:	4629      	mov	r1, r5
 8016388:	4648      	mov	r0, r9
 801638a:	f000 fc83 	bl	8016c94 <_Bfree>
 801638e:	e093      	b.n	80164b8 <_dtoa_r+0x560>
 8016390:	2202      	movs	r2, #2
 8016392:	e76c      	b.n	801626e <_dtoa_r+0x316>
 8016394:	07cc      	lsls	r4, r1, #31
 8016396:	d504      	bpl.n	80163a2 <_dtoa_r+0x44a>
 8016398:	ed90 6b00 	vldr	d6, [r0]
 801639c:	3201      	adds	r2, #1
 801639e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80163a2:	1049      	asrs	r1, r1, #1
 80163a4:	3008      	adds	r0, #8
 80163a6:	e763      	b.n	8016270 <_dtoa_r+0x318>
 80163a8:	d022      	beq.n	80163f0 <_dtoa_r+0x498>
 80163aa:	f1c8 0100 	rsb	r1, r8, #0
 80163ae:	4a6d      	ldr	r2, [pc, #436]	@ (8016564 <_dtoa_r+0x60c>)
 80163b0:	f001 000f 	and.w	r0, r1, #15
 80163b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80163b8:	ed92 7b00 	vldr	d7, [r2]
 80163bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80163c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163c4:	4868      	ldr	r0, [pc, #416]	@ (8016568 <_dtoa_r+0x610>)
 80163c6:	1109      	asrs	r1, r1, #4
 80163c8:	2400      	movs	r4, #0
 80163ca:	2202      	movs	r2, #2
 80163cc:	b929      	cbnz	r1, 80163da <_dtoa_r+0x482>
 80163ce:	2c00      	cmp	r4, #0
 80163d0:	f43f af57 	beq.w	8016282 <_dtoa_r+0x32a>
 80163d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163d8:	e753      	b.n	8016282 <_dtoa_r+0x32a>
 80163da:	07ce      	lsls	r6, r1, #31
 80163dc:	d505      	bpl.n	80163ea <_dtoa_r+0x492>
 80163de:	ed90 6b00 	vldr	d6, [r0]
 80163e2:	3201      	adds	r2, #1
 80163e4:	2401      	movs	r4, #1
 80163e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80163ea:	1049      	asrs	r1, r1, #1
 80163ec:	3008      	adds	r0, #8
 80163ee:	e7ed      	b.n	80163cc <_dtoa_r+0x474>
 80163f0:	2202      	movs	r2, #2
 80163f2:	e746      	b.n	8016282 <_dtoa_r+0x32a>
 80163f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80163f8:	4654      	mov	r4, sl
 80163fa:	e762      	b.n	80162c2 <_dtoa_r+0x36a>
 80163fc:	4a59      	ldr	r2, [pc, #356]	@ (8016564 <_dtoa_r+0x60c>)
 80163fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8016402:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016406:	9a08      	ldr	r2, [sp, #32]
 8016408:	ec41 0b17 	vmov	d7, r0, r1
 801640c:	443c      	add	r4, r7
 801640e:	b34a      	cbz	r2, 8016464 <_dtoa_r+0x50c>
 8016410:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8016414:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8016418:	463e      	mov	r6, r7
 801641a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801641e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016422:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016426:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801642a:	ee14 2a90 	vmov	r2, s9
 801642e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016432:	3230      	adds	r2, #48	@ 0x30
 8016434:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016438:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016440:	f806 2b01 	strb.w	r2, [r6], #1
 8016444:	d438      	bmi.n	80164b8 <_dtoa_r+0x560>
 8016446:	ee32 5b46 	vsub.f64	d5, d2, d6
 801644a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801644e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016452:	d46e      	bmi.n	8016532 <_dtoa_r+0x5da>
 8016454:	42a6      	cmp	r6, r4
 8016456:	f43f af5a 	beq.w	801630e <_dtoa_r+0x3b6>
 801645a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801645e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016462:	e7e0      	b.n	8016426 <_dtoa_r+0x4ce>
 8016464:	4621      	mov	r1, r4
 8016466:	463e      	mov	r6, r7
 8016468:	ee27 7b04 	vmul.f64	d7, d7, d4
 801646c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016470:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016474:	ee14 2a90 	vmov	r2, s9
 8016478:	3230      	adds	r2, #48	@ 0x30
 801647a:	f806 2b01 	strb.w	r2, [r6], #1
 801647e:	42a6      	cmp	r6, r4
 8016480:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016484:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016488:	d119      	bne.n	80164be <_dtoa_r+0x566>
 801648a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801648e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016492:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649a:	dc4a      	bgt.n	8016532 <_dtoa_r+0x5da>
 801649c:	ee35 5b47 	vsub.f64	d5, d5, d7
 80164a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80164a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a8:	f57f af31 	bpl.w	801630e <_dtoa_r+0x3b6>
 80164ac:	460e      	mov	r6, r1
 80164ae:	3901      	subs	r1, #1
 80164b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80164b4:	2b30      	cmp	r3, #48	@ 0x30
 80164b6:	d0f9      	beq.n	80164ac <_dtoa_r+0x554>
 80164b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80164bc:	e027      	b.n	801650e <_dtoa_r+0x5b6>
 80164be:	ee26 6b03 	vmul.f64	d6, d6, d3
 80164c2:	e7d5      	b.n	8016470 <_dtoa_r+0x518>
 80164c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80164c8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80164cc:	463e      	mov	r6, r7
 80164ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80164d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80164d6:	ee15 3a10 	vmov	r3, s10
 80164da:	3330      	adds	r3, #48	@ 0x30
 80164dc:	f806 3b01 	strb.w	r3, [r6], #1
 80164e0:	1bf3      	subs	r3, r6, r7
 80164e2:	459a      	cmp	sl, r3
 80164e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80164e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80164ec:	d132      	bne.n	8016554 <_dtoa_r+0x5fc>
 80164ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80164f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80164f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fa:	dc18      	bgt.n	801652e <_dtoa_r+0x5d6>
 80164fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8016500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016504:	d103      	bne.n	801650e <_dtoa_r+0x5b6>
 8016506:	ee15 3a10 	vmov	r3, s10
 801650a:	07db      	lsls	r3, r3, #31
 801650c:	d40f      	bmi.n	801652e <_dtoa_r+0x5d6>
 801650e:	9901      	ldr	r1, [sp, #4]
 8016510:	4648      	mov	r0, r9
 8016512:	f000 fbbf 	bl	8016c94 <_Bfree>
 8016516:	2300      	movs	r3, #0
 8016518:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801651a:	7033      	strb	r3, [r6, #0]
 801651c:	f108 0301 	add.w	r3, r8, #1
 8016520:	6013      	str	r3, [r2, #0]
 8016522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016524:	2b00      	cmp	r3, #0
 8016526:	f000 824b 	beq.w	80169c0 <_dtoa_r+0xa68>
 801652a:	601e      	str	r6, [r3, #0]
 801652c:	e248      	b.n	80169c0 <_dtoa_r+0xa68>
 801652e:	f8cd 8014 	str.w	r8, [sp, #20]
 8016532:	4633      	mov	r3, r6
 8016534:	461e      	mov	r6, r3
 8016536:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801653a:	2a39      	cmp	r2, #57	@ 0x39
 801653c:	d106      	bne.n	801654c <_dtoa_r+0x5f4>
 801653e:	429f      	cmp	r7, r3
 8016540:	d1f8      	bne.n	8016534 <_dtoa_r+0x5dc>
 8016542:	9a05      	ldr	r2, [sp, #20]
 8016544:	3201      	adds	r2, #1
 8016546:	9205      	str	r2, [sp, #20]
 8016548:	2230      	movs	r2, #48	@ 0x30
 801654a:	703a      	strb	r2, [r7, #0]
 801654c:	781a      	ldrb	r2, [r3, #0]
 801654e:	3201      	adds	r2, #1
 8016550:	701a      	strb	r2, [r3, #0]
 8016552:	e7b1      	b.n	80164b8 <_dtoa_r+0x560>
 8016554:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801655c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016560:	d1b5      	bne.n	80164ce <_dtoa_r+0x576>
 8016562:	e7d4      	b.n	801650e <_dtoa_r+0x5b6>
 8016564:	0801ee38 	.word	0x0801ee38
 8016568:	0801ee10 	.word	0x0801ee10
 801656c:	9908      	ldr	r1, [sp, #32]
 801656e:	2900      	cmp	r1, #0
 8016570:	f000 80e9 	beq.w	8016746 <_dtoa_r+0x7ee>
 8016574:	9907      	ldr	r1, [sp, #28]
 8016576:	2901      	cmp	r1, #1
 8016578:	f300 80cb 	bgt.w	8016712 <_dtoa_r+0x7ba>
 801657c:	2d00      	cmp	r5, #0
 801657e:	f000 80c4 	beq.w	801670a <_dtoa_r+0x7b2>
 8016582:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016586:	9e04      	ldr	r6, [sp, #16]
 8016588:	461c      	mov	r4, r3
 801658a:	9305      	str	r3, [sp, #20]
 801658c:	9b04      	ldr	r3, [sp, #16]
 801658e:	4413      	add	r3, r2
 8016590:	9304      	str	r3, [sp, #16]
 8016592:	9b06      	ldr	r3, [sp, #24]
 8016594:	2101      	movs	r1, #1
 8016596:	4413      	add	r3, r2
 8016598:	4648      	mov	r0, r9
 801659a:	9306      	str	r3, [sp, #24]
 801659c:	f000 fc2e 	bl	8016dfc <__i2b>
 80165a0:	9b05      	ldr	r3, [sp, #20]
 80165a2:	4605      	mov	r5, r0
 80165a4:	b166      	cbz	r6, 80165c0 <_dtoa_r+0x668>
 80165a6:	9a06      	ldr	r2, [sp, #24]
 80165a8:	2a00      	cmp	r2, #0
 80165aa:	dd09      	ble.n	80165c0 <_dtoa_r+0x668>
 80165ac:	42b2      	cmp	r2, r6
 80165ae:	9904      	ldr	r1, [sp, #16]
 80165b0:	bfa8      	it	ge
 80165b2:	4632      	movge	r2, r6
 80165b4:	1a89      	subs	r1, r1, r2
 80165b6:	9104      	str	r1, [sp, #16]
 80165b8:	9906      	ldr	r1, [sp, #24]
 80165ba:	1ab6      	subs	r6, r6, r2
 80165bc:	1a8a      	subs	r2, r1, r2
 80165be:	9206      	str	r2, [sp, #24]
 80165c0:	b30b      	cbz	r3, 8016606 <_dtoa_r+0x6ae>
 80165c2:	9a08      	ldr	r2, [sp, #32]
 80165c4:	2a00      	cmp	r2, #0
 80165c6:	f000 80c5 	beq.w	8016754 <_dtoa_r+0x7fc>
 80165ca:	2c00      	cmp	r4, #0
 80165cc:	f000 80bf 	beq.w	801674e <_dtoa_r+0x7f6>
 80165d0:	4629      	mov	r1, r5
 80165d2:	4622      	mov	r2, r4
 80165d4:	4648      	mov	r0, r9
 80165d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80165d8:	f000 fcc8 	bl	8016f6c <__pow5mult>
 80165dc:	9a01      	ldr	r2, [sp, #4]
 80165de:	4601      	mov	r1, r0
 80165e0:	4605      	mov	r5, r0
 80165e2:	4648      	mov	r0, r9
 80165e4:	f000 fc20 	bl	8016e28 <__multiply>
 80165e8:	9901      	ldr	r1, [sp, #4]
 80165ea:	9005      	str	r0, [sp, #20]
 80165ec:	4648      	mov	r0, r9
 80165ee:	f000 fb51 	bl	8016c94 <_Bfree>
 80165f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80165f4:	1b1b      	subs	r3, r3, r4
 80165f6:	f000 80b0 	beq.w	801675a <_dtoa_r+0x802>
 80165fa:	9905      	ldr	r1, [sp, #20]
 80165fc:	461a      	mov	r2, r3
 80165fe:	4648      	mov	r0, r9
 8016600:	f000 fcb4 	bl	8016f6c <__pow5mult>
 8016604:	9001      	str	r0, [sp, #4]
 8016606:	2101      	movs	r1, #1
 8016608:	4648      	mov	r0, r9
 801660a:	f000 fbf7 	bl	8016dfc <__i2b>
 801660e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016610:	4604      	mov	r4, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	f000 81da 	beq.w	80169cc <_dtoa_r+0xa74>
 8016618:	461a      	mov	r2, r3
 801661a:	4601      	mov	r1, r0
 801661c:	4648      	mov	r0, r9
 801661e:	f000 fca5 	bl	8016f6c <__pow5mult>
 8016622:	9b07      	ldr	r3, [sp, #28]
 8016624:	2b01      	cmp	r3, #1
 8016626:	4604      	mov	r4, r0
 8016628:	f300 80a0 	bgt.w	801676c <_dtoa_r+0x814>
 801662c:	9b02      	ldr	r3, [sp, #8]
 801662e:	2b00      	cmp	r3, #0
 8016630:	f040 8096 	bne.w	8016760 <_dtoa_r+0x808>
 8016634:	9b03      	ldr	r3, [sp, #12]
 8016636:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801663a:	2a00      	cmp	r2, #0
 801663c:	f040 8092 	bne.w	8016764 <_dtoa_r+0x80c>
 8016640:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016644:	0d12      	lsrs	r2, r2, #20
 8016646:	0512      	lsls	r2, r2, #20
 8016648:	2a00      	cmp	r2, #0
 801664a:	f000 808d 	beq.w	8016768 <_dtoa_r+0x810>
 801664e:	9b04      	ldr	r3, [sp, #16]
 8016650:	3301      	adds	r3, #1
 8016652:	9304      	str	r3, [sp, #16]
 8016654:	9b06      	ldr	r3, [sp, #24]
 8016656:	3301      	adds	r3, #1
 8016658:	9306      	str	r3, [sp, #24]
 801665a:	2301      	movs	r3, #1
 801665c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801665e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016660:	2b00      	cmp	r3, #0
 8016662:	f000 81b9 	beq.w	80169d8 <_dtoa_r+0xa80>
 8016666:	6922      	ldr	r2, [r4, #16]
 8016668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801666c:	6910      	ldr	r0, [r2, #16]
 801666e:	f000 fb79 	bl	8016d64 <__hi0bits>
 8016672:	f1c0 0020 	rsb	r0, r0, #32
 8016676:	9b06      	ldr	r3, [sp, #24]
 8016678:	4418      	add	r0, r3
 801667a:	f010 001f 	ands.w	r0, r0, #31
 801667e:	f000 8081 	beq.w	8016784 <_dtoa_r+0x82c>
 8016682:	f1c0 0220 	rsb	r2, r0, #32
 8016686:	2a04      	cmp	r2, #4
 8016688:	dd73      	ble.n	8016772 <_dtoa_r+0x81a>
 801668a:	9b04      	ldr	r3, [sp, #16]
 801668c:	f1c0 001c 	rsb	r0, r0, #28
 8016690:	4403      	add	r3, r0
 8016692:	9304      	str	r3, [sp, #16]
 8016694:	9b06      	ldr	r3, [sp, #24]
 8016696:	4406      	add	r6, r0
 8016698:	4403      	add	r3, r0
 801669a:	9306      	str	r3, [sp, #24]
 801669c:	9b04      	ldr	r3, [sp, #16]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	dd05      	ble.n	80166ae <_dtoa_r+0x756>
 80166a2:	9901      	ldr	r1, [sp, #4]
 80166a4:	461a      	mov	r2, r3
 80166a6:	4648      	mov	r0, r9
 80166a8:	f000 fcba 	bl	8017020 <__lshift>
 80166ac:	9001      	str	r0, [sp, #4]
 80166ae:	9b06      	ldr	r3, [sp, #24]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	dd05      	ble.n	80166c0 <_dtoa_r+0x768>
 80166b4:	4621      	mov	r1, r4
 80166b6:	461a      	mov	r2, r3
 80166b8:	4648      	mov	r0, r9
 80166ba:	f000 fcb1 	bl	8017020 <__lshift>
 80166be:	4604      	mov	r4, r0
 80166c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d060      	beq.n	8016788 <_dtoa_r+0x830>
 80166c6:	9801      	ldr	r0, [sp, #4]
 80166c8:	4621      	mov	r1, r4
 80166ca:	f000 fd15 	bl	80170f8 <__mcmp>
 80166ce:	2800      	cmp	r0, #0
 80166d0:	da5a      	bge.n	8016788 <_dtoa_r+0x830>
 80166d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80166d6:	9305      	str	r3, [sp, #20]
 80166d8:	9901      	ldr	r1, [sp, #4]
 80166da:	2300      	movs	r3, #0
 80166dc:	220a      	movs	r2, #10
 80166de:	4648      	mov	r0, r9
 80166e0:	f000 fafa 	bl	8016cd8 <__multadd>
 80166e4:	9b08      	ldr	r3, [sp, #32]
 80166e6:	9001      	str	r0, [sp, #4]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	f000 8177 	beq.w	80169dc <_dtoa_r+0xa84>
 80166ee:	4629      	mov	r1, r5
 80166f0:	2300      	movs	r3, #0
 80166f2:	220a      	movs	r2, #10
 80166f4:	4648      	mov	r0, r9
 80166f6:	f000 faef 	bl	8016cd8 <__multadd>
 80166fa:	f1bb 0f00 	cmp.w	fp, #0
 80166fe:	4605      	mov	r5, r0
 8016700:	dc6e      	bgt.n	80167e0 <_dtoa_r+0x888>
 8016702:	9b07      	ldr	r3, [sp, #28]
 8016704:	2b02      	cmp	r3, #2
 8016706:	dc48      	bgt.n	801679a <_dtoa_r+0x842>
 8016708:	e06a      	b.n	80167e0 <_dtoa_r+0x888>
 801670a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801670c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016710:	e739      	b.n	8016586 <_dtoa_r+0x62e>
 8016712:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016716:	42a3      	cmp	r3, r4
 8016718:	db07      	blt.n	801672a <_dtoa_r+0x7d2>
 801671a:	f1ba 0f00 	cmp.w	sl, #0
 801671e:	eba3 0404 	sub.w	r4, r3, r4
 8016722:	db0b      	blt.n	801673c <_dtoa_r+0x7e4>
 8016724:	9e04      	ldr	r6, [sp, #16]
 8016726:	4652      	mov	r2, sl
 8016728:	e72f      	b.n	801658a <_dtoa_r+0x632>
 801672a:	1ae2      	subs	r2, r4, r3
 801672c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801672e:	9e04      	ldr	r6, [sp, #16]
 8016730:	4413      	add	r3, r2
 8016732:	930a      	str	r3, [sp, #40]	@ 0x28
 8016734:	4652      	mov	r2, sl
 8016736:	4623      	mov	r3, r4
 8016738:	2400      	movs	r4, #0
 801673a:	e726      	b.n	801658a <_dtoa_r+0x632>
 801673c:	9a04      	ldr	r2, [sp, #16]
 801673e:	eba2 060a 	sub.w	r6, r2, sl
 8016742:	2200      	movs	r2, #0
 8016744:	e721      	b.n	801658a <_dtoa_r+0x632>
 8016746:	9e04      	ldr	r6, [sp, #16]
 8016748:	9d08      	ldr	r5, [sp, #32]
 801674a:	461c      	mov	r4, r3
 801674c:	e72a      	b.n	80165a4 <_dtoa_r+0x64c>
 801674e:	9a01      	ldr	r2, [sp, #4]
 8016750:	9205      	str	r2, [sp, #20]
 8016752:	e752      	b.n	80165fa <_dtoa_r+0x6a2>
 8016754:	9901      	ldr	r1, [sp, #4]
 8016756:	461a      	mov	r2, r3
 8016758:	e751      	b.n	80165fe <_dtoa_r+0x6a6>
 801675a:	9b05      	ldr	r3, [sp, #20]
 801675c:	9301      	str	r3, [sp, #4]
 801675e:	e752      	b.n	8016606 <_dtoa_r+0x6ae>
 8016760:	2300      	movs	r3, #0
 8016762:	e77b      	b.n	801665c <_dtoa_r+0x704>
 8016764:	9b02      	ldr	r3, [sp, #8]
 8016766:	e779      	b.n	801665c <_dtoa_r+0x704>
 8016768:	920b      	str	r2, [sp, #44]	@ 0x2c
 801676a:	e778      	b.n	801665e <_dtoa_r+0x706>
 801676c:	2300      	movs	r3, #0
 801676e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016770:	e779      	b.n	8016666 <_dtoa_r+0x70e>
 8016772:	d093      	beq.n	801669c <_dtoa_r+0x744>
 8016774:	9b04      	ldr	r3, [sp, #16]
 8016776:	321c      	adds	r2, #28
 8016778:	4413      	add	r3, r2
 801677a:	9304      	str	r3, [sp, #16]
 801677c:	9b06      	ldr	r3, [sp, #24]
 801677e:	4416      	add	r6, r2
 8016780:	4413      	add	r3, r2
 8016782:	e78a      	b.n	801669a <_dtoa_r+0x742>
 8016784:	4602      	mov	r2, r0
 8016786:	e7f5      	b.n	8016774 <_dtoa_r+0x81c>
 8016788:	f1ba 0f00 	cmp.w	sl, #0
 801678c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016790:	46d3      	mov	fp, sl
 8016792:	dc21      	bgt.n	80167d8 <_dtoa_r+0x880>
 8016794:	9b07      	ldr	r3, [sp, #28]
 8016796:	2b02      	cmp	r3, #2
 8016798:	dd1e      	ble.n	80167d8 <_dtoa_r+0x880>
 801679a:	f1bb 0f00 	cmp.w	fp, #0
 801679e:	f47f addc 	bne.w	801635a <_dtoa_r+0x402>
 80167a2:	4621      	mov	r1, r4
 80167a4:	465b      	mov	r3, fp
 80167a6:	2205      	movs	r2, #5
 80167a8:	4648      	mov	r0, r9
 80167aa:	f000 fa95 	bl	8016cd8 <__multadd>
 80167ae:	4601      	mov	r1, r0
 80167b0:	4604      	mov	r4, r0
 80167b2:	9801      	ldr	r0, [sp, #4]
 80167b4:	f000 fca0 	bl	80170f8 <__mcmp>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	f77f adce 	ble.w	801635a <_dtoa_r+0x402>
 80167be:	463e      	mov	r6, r7
 80167c0:	2331      	movs	r3, #49	@ 0x31
 80167c2:	f806 3b01 	strb.w	r3, [r6], #1
 80167c6:	9b05      	ldr	r3, [sp, #20]
 80167c8:	3301      	adds	r3, #1
 80167ca:	9305      	str	r3, [sp, #20]
 80167cc:	e5c9      	b.n	8016362 <_dtoa_r+0x40a>
 80167ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80167d2:	4654      	mov	r4, sl
 80167d4:	4625      	mov	r5, r4
 80167d6:	e7f2      	b.n	80167be <_dtoa_r+0x866>
 80167d8:	9b08      	ldr	r3, [sp, #32]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	f000 8102 	beq.w	80169e4 <_dtoa_r+0xa8c>
 80167e0:	2e00      	cmp	r6, #0
 80167e2:	dd05      	ble.n	80167f0 <_dtoa_r+0x898>
 80167e4:	4629      	mov	r1, r5
 80167e6:	4632      	mov	r2, r6
 80167e8:	4648      	mov	r0, r9
 80167ea:	f000 fc19 	bl	8017020 <__lshift>
 80167ee:	4605      	mov	r5, r0
 80167f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d058      	beq.n	80168a8 <_dtoa_r+0x950>
 80167f6:	6869      	ldr	r1, [r5, #4]
 80167f8:	4648      	mov	r0, r9
 80167fa:	f000 fa0b 	bl	8016c14 <_Balloc>
 80167fe:	4606      	mov	r6, r0
 8016800:	b928      	cbnz	r0, 801680e <_dtoa_r+0x8b6>
 8016802:	4b82      	ldr	r3, [pc, #520]	@ (8016a0c <_dtoa_r+0xab4>)
 8016804:	4602      	mov	r2, r0
 8016806:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801680a:	f7ff bbbe 	b.w	8015f8a <_dtoa_r+0x32>
 801680e:	692a      	ldr	r2, [r5, #16]
 8016810:	3202      	adds	r2, #2
 8016812:	0092      	lsls	r2, r2, #2
 8016814:	f105 010c 	add.w	r1, r5, #12
 8016818:	300c      	adds	r0, #12
 801681a:	f7ff fb04 	bl	8015e26 <memcpy>
 801681e:	2201      	movs	r2, #1
 8016820:	4631      	mov	r1, r6
 8016822:	4648      	mov	r0, r9
 8016824:	f000 fbfc 	bl	8017020 <__lshift>
 8016828:	1c7b      	adds	r3, r7, #1
 801682a:	9304      	str	r3, [sp, #16]
 801682c:	eb07 030b 	add.w	r3, r7, fp
 8016830:	9309      	str	r3, [sp, #36]	@ 0x24
 8016832:	9b02      	ldr	r3, [sp, #8]
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	46a8      	mov	r8, r5
 801683a:	9308      	str	r3, [sp, #32]
 801683c:	4605      	mov	r5, r0
 801683e:	9b04      	ldr	r3, [sp, #16]
 8016840:	9801      	ldr	r0, [sp, #4]
 8016842:	4621      	mov	r1, r4
 8016844:	f103 3bff 	add.w	fp, r3, #4294967295
 8016848:	f7ff fafb 	bl	8015e42 <quorem>
 801684c:	4641      	mov	r1, r8
 801684e:	9002      	str	r0, [sp, #8]
 8016850:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016854:	9801      	ldr	r0, [sp, #4]
 8016856:	f000 fc4f 	bl	80170f8 <__mcmp>
 801685a:	462a      	mov	r2, r5
 801685c:	9006      	str	r0, [sp, #24]
 801685e:	4621      	mov	r1, r4
 8016860:	4648      	mov	r0, r9
 8016862:	f000 fc65 	bl	8017130 <__mdiff>
 8016866:	68c2      	ldr	r2, [r0, #12]
 8016868:	4606      	mov	r6, r0
 801686a:	b9fa      	cbnz	r2, 80168ac <_dtoa_r+0x954>
 801686c:	4601      	mov	r1, r0
 801686e:	9801      	ldr	r0, [sp, #4]
 8016870:	f000 fc42 	bl	80170f8 <__mcmp>
 8016874:	4602      	mov	r2, r0
 8016876:	4631      	mov	r1, r6
 8016878:	4648      	mov	r0, r9
 801687a:	920a      	str	r2, [sp, #40]	@ 0x28
 801687c:	f000 fa0a 	bl	8016c94 <_Bfree>
 8016880:	9b07      	ldr	r3, [sp, #28]
 8016882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016884:	9e04      	ldr	r6, [sp, #16]
 8016886:	ea42 0103 	orr.w	r1, r2, r3
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	4319      	orrs	r1, r3
 801688e:	d10f      	bne.n	80168b0 <_dtoa_r+0x958>
 8016890:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016894:	d028      	beq.n	80168e8 <_dtoa_r+0x990>
 8016896:	9b06      	ldr	r3, [sp, #24]
 8016898:	2b00      	cmp	r3, #0
 801689a:	dd02      	ble.n	80168a2 <_dtoa_r+0x94a>
 801689c:	9b02      	ldr	r3, [sp, #8]
 801689e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80168a2:	f88b a000 	strb.w	sl, [fp]
 80168a6:	e55e      	b.n	8016366 <_dtoa_r+0x40e>
 80168a8:	4628      	mov	r0, r5
 80168aa:	e7bd      	b.n	8016828 <_dtoa_r+0x8d0>
 80168ac:	2201      	movs	r2, #1
 80168ae:	e7e2      	b.n	8016876 <_dtoa_r+0x91e>
 80168b0:	9b06      	ldr	r3, [sp, #24]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	db04      	blt.n	80168c0 <_dtoa_r+0x968>
 80168b6:	9907      	ldr	r1, [sp, #28]
 80168b8:	430b      	orrs	r3, r1
 80168ba:	9908      	ldr	r1, [sp, #32]
 80168bc:	430b      	orrs	r3, r1
 80168be:	d120      	bne.n	8016902 <_dtoa_r+0x9aa>
 80168c0:	2a00      	cmp	r2, #0
 80168c2:	ddee      	ble.n	80168a2 <_dtoa_r+0x94a>
 80168c4:	9901      	ldr	r1, [sp, #4]
 80168c6:	2201      	movs	r2, #1
 80168c8:	4648      	mov	r0, r9
 80168ca:	f000 fba9 	bl	8017020 <__lshift>
 80168ce:	4621      	mov	r1, r4
 80168d0:	9001      	str	r0, [sp, #4]
 80168d2:	f000 fc11 	bl	80170f8 <__mcmp>
 80168d6:	2800      	cmp	r0, #0
 80168d8:	dc03      	bgt.n	80168e2 <_dtoa_r+0x98a>
 80168da:	d1e2      	bne.n	80168a2 <_dtoa_r+0x94a>
 80168dc:	f01a 0f01 	tst.w	sl, #1
 80168e0:	d0df      	beq.n	80168a2 <_dtoa_r+0x94a>
 80168e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80168e6:	d1d9      	bne.n	801689c <_dtoa_r+0x944>
 80168e8:	2339      	movs	r3, #57	@ 0x39
 80168ea:	f88b 3000 	strb.w	r3, [fp]
 80168ee:	4633      	mov	r3, r6
 80168f0:	461e      	mov	r6, r3
 80168f2:	3b01      	subs	r3, #1
 80168f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80168f8:	2a39      	cmp	r2, #57	@ 0x39
 80168fa:	d052      	beq.n	80169a2 <_dtoa_r+0xa4a>
 80168fc:	3201      	adds	r2, #1
 80168fe:	701a      	strb	r2, [r3, #0]
 8016900:	e531      	b.n	8016366 <_dtoa_r+0x40e>
 8016902:	2a00      	cmp	r2, #0
 8016904:	dd07      	ble.n	8016916 <_dtoa_r+0x9be>
 8016906:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801690a:	d0ed      	beq.n	80168e8 <_dtoa_r+0x990>
 801690c:	f10a 0301 	add.w	r3, sl, #1
 8016910:	f88b 3000 	strb.w	r3, [fp]
 8016914:	e527      	b.n	8016366 <_dtoa_r+0x40e>
 8016916:	9b04      	ldr	r3, [sp, #16]
 8016918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801691a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801691e:	4293      	cmp	r3, r2
 8016920:	d029      	beq.n	8016976 <_dtoa_r+0xa1e>
 8016922:	9901      	ldr	r1, [sp, #4]
 8016924:	2300      	movs	r3, #0
 8016926:	220a      	movs	r2, #10
 8016928:	4648      	mov	r0, r9
 801692a:	f000 f9d5 	bl	8016cd8 <__multadd>
 801692e:	45a8      	cmp	r8, r5
 8016930:	9001      	str	r0, [sp, #4]
 8016932:	f04f 0300 	mov.w	r3, #0
 8016936:	f04f 020a 	mov.w	r2, #10
 801693a:	4641      	mov	r1, r8
 801693c:	4648      	mov	r0, r9
 801693e:	d107      	bne.n	8016950 <_dtoa_r+0x9f8>
 8016940:	f000 f9ca 	bl	8016cd8 <__multadd>
 8016944:	4680      	mov	r8, r0
 8016946:	4605      	mov	r5, r0
 8016948:	9b04      	ldr	r3, [sp, #16]
 801694a:	3301      	adds	r3, #1
 801694c:	9304      	str	r3, [sp, #16]
 801694e:	e776      	b.n	801683e <_dtoa_r+0x8e6>
 8016950:	f000 f9c2 	bl	8016cd8 <__multadd>
 8016954:	4629      	mov	r1, r5
 8016956:	4680      	mov	r8, r0
 8016958:	2300      	movs	r3, #0
 801695a:	220a      	movs	r2, #10
 801695c:	4648      	mov	r0, r9
 801695e:	f000 f9bb 	bl	8016cd8 <__multadd>
 8016962:	4605      	mov	r5, r0
 8016964:	e7f0      	b.n	8016948 <_dtoa_r+0x9f0>
 8016966:	f1bb 0f00 	cmp.w	fp, #0
 801696a:	bfcc      	ite	gt
 801696c:	465e      	movgt	r6, fp
 801696e:	2601      	movle	r6, #1
 8016970:	443e      	add	r6, r7
 8016972:	f04f 0800 	mov.w	r8, #0
 8016976:	9901      	ldr	r1, [sp, #4]
 8016978:	2201      	movs	r2, #1
 801697a:	4648      	mov	r0, r9
 801697c:	f000 fb50 	bl	8017020 <__lshift>
 8016980:	4621      	mov	r1, r4
 8016982:	9001      	str	r0, [sp, #4]
 8016984:	f000 fbb8 	bl	80170f8 <__mcmp>
 8016988:	2800      	cmp	r0, #0
 801698a:	dcb0      	bgt.n	80168ee <_dtoa_r+0x996>
 801698c:	d102      	bne.n	8016994 <_dtoa_r+0xa3c>
 801698e:	f01a 0f01 	tst.w	sl, #1
 8016992:	d1ac      	bne.n	80168ee <_dtoa_r+0x996>
 8016994:	4633      	mov	r3, r6
 8016996:	461e      	mov	r6, r3
 8016998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801699c:	2a30      	cmp	r2, #48	@ 0x30
 801699e:	d0fa      	beq.n	8016996 <_dtoa_r+0xa3e>
 80169a0:	e4e1      	b.n	8016366 <_dtoa_r+0x40e>
 80169a2:	429f      	cmp	r7, r3
 80169a4:	d1a4      	bne.n	80168f0 <_dtoa_r+0x998>
 80169a6:	9b05      	ldr	r3, [sp, #20]
 80169a8:	3301      	adds	r3, #1
 80169aa:	9305      	str	r3, [sp, #20]
 80169ac:	2331      	movs	r3, #49	@ 0x31
 80169ae:	703b      	strb	r3, [r7, #0]
 80169b0:	e4d9      	b.n	8016366 <_dtoa_r+0x40e>
 80169b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80169b4:	4f16      	ldr	r7, [pc, #88]	@ (8016a10 <_dtoa_r+0xab8>)
 80169b6:	b11b      	cbz	r3, 80169c0 <_dtoa_r+0xa68>
 80169b8:	f107 0308 	add.w	r3, r7, #8
 80169bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80169be:	6013      	str	r3, [r2, #0]
 80169c0:	4638      	mov	r0, r7
 80169c2:	b011      	add	sp, #68	@ 0x44
 80169c4:	ecbd 8b02 	vpop	{d8}
 80169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169cc:	9b07      	ldr	r3, [sp, #28]
 80169ce:	2b01      	cmp	r3, #1
 80169d0:	f77f ae2c 	ble.w	801662c <_dtoa_r+0x6d4>
 80169d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80169d8:	2001      	movs	r0, #1
 80169da:	e64c      	b.n	8016676 <_dtoa_r+0x71e>
 80169dc:	f1bb 0f00 	cmp.w	fp, #0
 80169e0:	f77f aed8 	ble.w	8016794 <_dtoa_r+0x83c>
 80169e4:	463e      	mov	r6, r7
 80169e6:	9801      	ldr	r0, [sp, #4]
 80169e8:	4621      	mov	r1, r4
 80169ea:	f7ff fa2a 	bl	8015e42 <quorem>
 80169ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80169f2:	f806 ab01 	strb.w	sl, [r6], #1
 80169f6:	1bf2      	subs	r2, r6, r7
 80169f8:	4593      	cmp	fp, r2
 80169fa:	ddb4      	ble.n	8016966 <_dtoa_r+0xa0e>
 80169fc:	9901      	ldr	r1, [sp, #4]
 80169fe:	2300      	movs	r3, #0
 8016a00:	220a      	movs	r2, #10
 8016a02:	4648      	mov	r0, r9
 8016a04:	f000 f968 	bl	8016cd8 <__multadd>
 8016a08:	9001      	str	r0, [sp, #4]
 8016a0a:	e7ec      	b.n	80169e6 <_dtoa_r+0xa8e>
 8016a0c:	0801ed40 	.word	0x0801ed40
 8016a10:	0801ecc4 	.word	0x0801ecc4

08016a14 <_free_r>:
 8016a14:	b538      	push	{r3, r4, r5, lr}
 8016a16:	4605      	mov	r5, r0
 8016a18:	2900      	cmp	r1, #0
 8016a1a:	d041      	beq.n	8016aa0 <_free_r+0x8c>
 8016a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a20:	1f0c      	subs	r4, r1, #4
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	bfb8      	it	lt
 8016a26:	18e4      	addlt	r4, r4, r3
 8016a28:	f000 f8e8 	bl	8016bfc <__malloc_lock>
 8016a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8016aa4 <_free_r+0x90>)
 8016a2e:	6813      	ldr	r3, [r2, #0]
 8016a30:	b933      	cbnz	r3, 8016a40 <_free_r+0x2c>
 8016a32:	6063      	str	r3, [r4, #4]
 8016a34:	6014      	str	r4, [r2, #0]
 8016a36:	4628      	mov	r0, r5
 8016a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a3c:	f000 b8e4 	b.w	8016c08 <__malloc_unlock>
 8016a40:	42a3      	cmp	r3, r4
 8016a42:	d908      	bls.n	8016a56 <_free_r+0x42>
 8016a44:	6820      	ldr	r0, [r4, #0]
 8016a46:	1821      	adds	r1, r4, r0
 8016a48:	428b      	cmp	r3, r1
 8016a4a:	bf01      	itttt	eq
 8016a4c:	6819      	ldreq	r1, [r3, #0]
 8016a4e:	685b      	ldreq	r3, [r3, #4]
 8016a50:	1809      	addeq	r1, r1, r0
 8016a52:	6021      	streq	r1, [r4, #0]
 8016a54:	e7ed      	b.n	8016a32 <_free_r+0x1e>
 8016a56:	461a      	mov	r2, r3
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	b10b      	cbz	r3, 8016a60 <_free_r+0x4c>
 8016a5c:	42a3      	cmp	r3, r4
 8016a5e:	d9fa      	bls.n	8016a56 <_free_r+0x42>
 8016a60:	6811      	ldr	r1, [r2, #0]
 8016a62:	1850      	adds	r0, r2, r1
 8016a64:	42a0      	cmp	r0, r4
 8016a66:	d10b      	bne.n	8016a80 <_free_r+0x6c>
 8016a68:	6820      	ldr	r0, [r4, #0]
 8016a6a:	4401      	add	r1, r0
 8016a6c:	1850      	adds	r0, r2, r1
 8016a6e:	4283      	cmp	r3, r0
 8016a70:	6011      	str	r1, [r2, #0]
 8016a72:	d1e0      	bne.n	8016a36 <_free_r+0x22>
 8016a74:	6818      	ldr	r0, [r3, #0]
 8016a76:	685b      	ldr	r3, [r3, #4]
 8016a78:	6053      	str	r3, [r2, #4]
 8016a7a:	4408      	add	r0, r1
 8016a7c:	6010      	str	r0, [r2, #0]
 8016a7e:	e7da      	b.n	8016a36 <_free_r+0x22>
 8016a80:	d902      	bls.n	8016a88 <_free_r+0x74>
 8016a82:	230c      	movs	r3, #12
 8016a84:	602b      	str	r3, [r5, #0]
 8016a86:	e7d6      	b.n	8016a36 <_free_r+0x22>
 8016a88:	6820      	ldr	r0, [r4, #0]
 8016a8a:	1821      	adds	r1, r4, r0
 8016a8c:	428b      	cmp	r3, r1
 8016a8e:	bf04      	itt	eq
 8016a90:	6819      	ldreq	r1, [r3, #0]
 8016a92:	685b      	ldreq	r3, [r3, #4]
 8016a94:	6063      	str	r3, [r4, #4]
 8016a96:	bf04      	itt	eq
 8016a98:	1809      	addeq	r1, r1, r0
 8016a9a:	6021      	streq	r1, [r4, #0]
 8016a9c:	6054      	str	r4, [r2, #4]
 8016a9e:	e7ca      	b.n	8016a36 <_free_r+0x22>
 8016aa0:	bd38      	pop	{r3, r4, r5, pc}
 8016aa2:	bf00      	nop
 8016aa4:	24005be8 	.word	0x24005be8

08016aa8 <malloc>:
 8016aa8:	4b02      	ldr	r3, [pc, #8]	@ (8016ab4 <malloc+0xc>)
 8016aaa:	4601      	mov	r1, r0
 8016aac:	6818      	ldr	r0, [r3, #0]
 8016aae:	f000 b825 	b.w	8016afc <_malloc_r>
 8016ab2:	bf00      	nop
 8016ab4:	240000b4 	.word	0x240000b4

08016ab8 <sbrk_aligned>:
 8016ab8:	b570      	push	{r4, r5, r6, lr}
 8016aba:	4e0f      	ldr	r6, [pc, #60]	@ (8016af8 <sbrk_aligned+0x40>)
 8016abc:	460c      	mov	r4, r1
 8016abe:	6831      	ldr	r1, [r6, #0]
 8016ac0:	4605      	mov	r5, r0
 8016ac2:	b911      	cbnz	r1, 8016aca <sbrk_aligned+0x12>
 8016ac4:	f000 fec2 	bl	801784c <_sbrk_r>
 8016ac8:	6030      	str	r0, [r6, #0]
 8016aca:	4621      	mov	r1, r4
 8016acc:	4628      	mov	r0, r5
 8016ace:	f000 febd 	bl	801784c <_sbrk_r>
 8016ad2:	1c43      	adds	r3, r0, #1
 8016ad4:	d103      	bne.n	8016ade <sbrk_aligned+0x26>
 8016ad6:	f04f 34ff 	mov.w	r4, #4294967295
 8016ada:	4620      	mov	r0, r4
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
 8016ade:	1cc4      	adds	r4, r0, #3
 8016ae0:	f024 0403 	bic.w	r4, r4, #3
 8016ae4:	42a0      	cmp	r0, r4
 8016ae6:	d0f8      	beq.n	8016ada <sbrk_aligned+0x22>
 8016ae8:	1a21      	subs	r1, r4, r0
 8016aea:	4628      	mov	r0, r5
 8016aec:	f000 feae 	bl	801784c <_sbrk_r>
 8016af0:	3001      	adds	r0, #1
 8016af2:	d1f2      	bne.n	8016ada <sbrk_aligned+0x22>
 8016af4:	e7ef      	b.n	8016ad6 <sbrk_aligned+0x1e>
 8016af6:	bf00      	nop
 8016af8:	24005be4 	.word	0x24005be4

08016afc <_malloc_r>:
 8016afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b00:	1ccd      	adds	r5, r1, #3
 8016b02:	f025 0503 	bic.w	r5, r5, #3
 8016b06:	3508      	adds	r5, #8
 8016b08:	2d0c      	cmp	r5, #12
 8016b0a:	bf38      	it	cc
 8016b0c:	250c      	movcc	r5, #12
 8016b0e:	2d00      	cmp	r5, #0
 8016b10:	4606      	mov	r6, r0
 8016b12:	db01      	blt.n	8016b18 <_malloc_r+0x1c>
 8016b14:	42a9      	cmp	r1, r5
 8016b16:	d904      	bls.n	8016b22 <_malloc_r+0x26>
 8016b18:	230c      	movs	r3, #12
 8016b1a:	6033      	str	r3, [r6, #0]
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016bf8 <_malloc_r+0xfc>
 8016b26:	f000 f869 	bl	8016bfc <__malloc_lock>
 8016b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8016b2e:	461c      	mov	r4, r3
 8016b30:	bb44      	cbnz	r4, 8016b84 <_malloc_r+0x88>
 8016b32:	4629      	mov	r1, r5
 8016b34:	4630      	mov	r0, r6
 8016b36:	f7ff ffbf 	bl	8016ab8 <sbrk_aligned>
 8016b3a:	1c43      	adds	r3, r0, #1
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	d158      	bne.n	8016bf2 <_malloc_r+0xf6>
 8016b40:	f8d8 4000 	ldr.w	r4, [r8]
 8016b44:	4627      	mov	r7, r4
 8016b46:	2f00      	cmp	r7, #0
 8016b48:	d143      	bne.n	8016bd2 <_malloc_r+0xd6>
 8016b4a:	2c00      	cmp	r4, #0
 8016b4c:	d04b      	beq.n	8016be6 <_malloc_r+0xea>
 8016b4e:	6823      	ldr	r3, [r4, #0]
 8016b50:	4639      	mov	r1, r7
 8016b52:	4630      	mov	r0, r6
 8016b54:	eb04 0903 	add.w	r9, r4, r3
 8016b58:	f000 fe78 	bl	801784c <_sbrk_r>
 8016b5c:	4581      	cmp	r9, r0
 8016b5e:	d142      	bne.n	8016be6 <_malloc_r+0xea>
 8016b60:	6821      	ldr	r1, [r4, #0]
 8016b62:	1a6d      	subs	r5, r5, r1
 8016b64:	4629      	mov	r1, r5
 8016b66:	4630      	mov	r0, r6
 8016b68:	f7ff ffa6 	bl	8016ab8 <sbrk_aligned>
 8016b6c:	3001      	adds	r0, #1
 8016b6e:	d03a      	beq.n	8016be6 <_malloc_r+0xea>
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	442b      	add	r3, r5
 8016b74:	6023      	str	r3, [r4, #0]
 8016b76:	f8d8 3000 	ldr.w	r3, [r8]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	bb62      	cbnz	r2, 8016bd8 <_malloc_r+0xdc>
 8016b7e:	f8c8 7000 	str.w	r7, [r8]
 8016b82:	e00f      	b.n	8016ba4 <_malloc_r+0xa8>
 8016b84:	6822      	ldr	r2, [r4, #0]
 8016b86:	1b52      	subs	r2, r2, r5
 8016b88:	d420      	bmi.n	8016bcc <_malloc_r+0xd0>
 8016b8a:	2a0b      	cmp	r2, #11
 8016b8c:	d917      	bls.n	8016bbe <_malloc_r+0xc2>
 8016b8e:	1961      	adds	r1, r4, r5
 8016b90:	42a3      	cmp	r3, r4
 8016b92:	6025      	str	r5, [r4, #0]
 8016b94:	bf18      	it	ne
 8016b96:	6059      	strne	r1, [r3, #4]
 8016b98:	6863      	ldr	r3, [r4, #4]
 8016b9a:	bf08      	it	eq
 8016b9c:	f8c8 1000 	streq.w	r1, [r8]
 8016ba0:	5162      	str	r2, [r4, r5]
 8016ba2:	604b      	str	r3, [r1, #4]
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f000 f82f 	bl	8016c08 <__malloc_unlock>
 8016baa:	f104 000b 	add.w	r0, r4, #11
 8016bae:	1d23      	adds	r3, r4, #4
 8016bb0:	f020 0007 	bic.w	r0, r0, #7
 8016bb4:	1ac2      	subs	r2, r0, r3
 8016bb6:	bf1c      	itt	ne
 8016bb8:	1a1b      	subne	r3, r3, r0
 8016bba:	50a3      	strne	r3, [r4, r2]
 8016bbc:	e7af      	b.n	8016b1e <_malloc_r+0x22>
 8016bbe:	6862      	ldr	r2, [r4, #4]
 8016bc0:	42a3      	cmp	r3, r4
 8016bc2:	bf0c      	ite	eq
 8016bc4:	f8c8 2000 	streq.w	r2, [r8]
 8016bc8:	605a      	strne	r2, [r3, #4]
 8016bca:	e7eb      	b.n	8016ba4 <_malloc_r+0xa8>
 8016bcc:	4623      	mov	r3, r4
 8016bce:	6864      	ldr	r4, [r4, #4]
 8016bd0:	e7ae      	b.n	8016b30 <_malloc_r+0x34>
 8016bd2:	463c      	mov	r4, r7
 8016bd4:	687f      	ldr	r7, [r7, #4]
 8016bd6:	e7b6      	b.n	8016b46 <_malloc_r+0x4a>
 8016bd8:	461a      	mov	r2, r3
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	42a3      	cmp	r3, r4
 8016bde:	d1fb      	bne.n	8016bd8 <_malloc_r+0xdc>
 8016be0:	2300      	movs	r3, #0
 8016be2:	6053      	str	r3, [r2, #4]
 8016be4:	e7de      	b.n	8016ba4 <_malloc_r+0xa8>
 8016be6:	230c      	movs	r3, #12
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	4630      	mov	r0, r6
 8016bec:	f000 f80c 	bl	8016c08 <__malloc_unlock>
 8016bf0:	e794      	b.n	8016b1c <_malloc_r+0x20>
 8016bf2:	6005      	str	r5, [r0, #0]
 8016bf4:	e7d6      	b.n	8016ba4 <_malloc_r+0xa8>
 8016bf6:	bf00      	nop
 8016bf8:	24005be8 	.word	0x24005be8

08016bfc <__malloc_lock>:
 8016bfc:	4801      	ldr	r0, [pc, #4]	@ (8016c04 <__malloc_lock+0x8>)
 8016bfe:	f7ff b910 	b.w	8015e22 <__retarget_lock_acquire_recursive>
 8016c02:	bf00      	nop
 8016c04:	24005be0 	.word	0x24005be0

08016c08 <__malloc_unlock>:
 8016c08:	4801      	ldr	r0, [pc, #4]	@ (8016c10 <__malloc_unlock+0x8>)
 8016c0a:	f7ff b90b 	b.w	8015e24 <__retarget_lock_release_recursive>
 8016c0e:	bf00      	nop
 8016c10:	24005be0 	.word	0x24005be0

08016c14 <_Balloc>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	69c6      	ldr	r6, [r0, #28]
 8016c18:	4604      	mov	r4, r0
 8016c1a:	460d      	mov	r5, r1
 8016c1c:	b976      	cbnz	r6, 8016c3c <_Balloc+0x28>
 8016c1e:	2010      	movs	r0, #16
 8016c20:	f7ff ff42 	bl	8016aa8 <malloc>
 8016c24:	4602      	mov	r2, r0
 8016c26:	61e0      	str	r0, [r4, #28]
 8016c28:	b920      	cbnz	r0, 8016c34 <_Balloc+0x20>
 8016c2a:	4b18      	ldr	r3, [pc, #96]	@ (8016c8c <_Balloc+0x78>)
 8016c2c:	4818      	ldr	r0, [pc, #96]	@ (8016c90 <_Balloc+0x7c>)
 8016c2e:	216b      	movs	r1, #107	@ 0x6b
 8016c30:	f000 fe1c 	bl	801786c <__assert_func>
 8016c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016c38:	6006      	str	r6, [r0, #0]
 8016c3a:	60c6      	str	r6, [r0, #12]
 8016c3c:	69e6      	ldr	r6, [r4, #28]
 8016c3e:	68f3      	ldr	r3, [r6, #12]
 8016c40:	b183      	cbz	r3, 8016c64 <_Balloc+0x50>
 8016c42:	69e3      	ldr	r3, [r4, #28]
 8016c44:	68db      	ldr	r3, [r3, #12]
 8016c46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016c4a:	b9b8      	cbnz	r0, 8016c7c <_Balloc+0x68>
 8016c4c:	2101      	movs	r1, #1
 8016c4e:	fa01 f605 	lsl.w	r6, r1, r5
 8016c52:	1d72      	adds	r2, r6, #5
 8016c54:	0092      	lsls	r2, r2, #2
 8016c56:	4620      	mov	r0, r4
 8016c58:	f000 fe26 	bl	80178a8 <_calloc_r>
 8016c5c:	b160      	cbz	r0, 8016c78 <_Balloc+0x64>
 8016c5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016c62:	e00e      	b.n	8016c82 <_Balloc+0x6e>
 8016c64:	2221      	movs	r2, #33	@ 0x21
 8016c66:	2104      	movs	r1, #4
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f000 fe1d 	bl	80178a8 <_calloc_r>
 8016c6e:	69e3      	ldr	r3, [r4, #28]
 8016c70:	60f0      	str	r0, [r6, #12]
 8016c72:	68db      	ldr	r3, [r3, #12]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d1e4      	bne.n	8016c42 <_Balloc+0x2e>
 8016c78:	2000      	movs	r0, #0
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	6802      	ldr	r2, [r0, #0]
 8016c7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c82:	2300      	movs	r3, #0
 8016c84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016c88:	e7f7      	b.n	8016c7a <_Balloc+0x66>
 8016c8a:	bf00      	nop
 8016c8c:	0801ecd1 	.word	0x0801ecd1
 8016c90:	0801ed51 	.word	0x0801ed51

08016c94 <_Bfree>:
 8016c94:	b570      	push	{r4, r5, r6, lr}
 8016c96:	69c6      	ldr	r6, [r0, #28]
 8016c98:	4605      	mov	r5, r0
 8016c9a:	460c      	mov	r4, r1
 8016c9c:	b976      	cbnz	r6, 8016cbc <_Bfree+0x28>
 8016c9e:	2010      	movs	r0, #16
 8016ca0:	f7ff ff02 	bl	8016aa8 <malloc>
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	61e8      	str	r0, [r5, #28]
 8016ca8:	b920      	cbnz	r0, 8016cb4 <_Bfree+0x20>
 8016caa:	4b09      	ldr	r3, [pc, #36]	@ (8016cd0 <_Bfree+0x3c>)
 8016cac:	4809      	ldr	r0, [pc, #36]	@ (8016cd4 <_Bfree+0x40>)
 8016cae:	218f      	movs	r1, #143	@ 0x8f
 8016cb0:	f000 fddc 	bl	801786c <__assert_func>
 8016cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016cb8:	6006      	str	r6, [r0, #0]
 8016cba:	60c6      	str	r6, [r0, #12]
 8016cbc:	b13c      	cbz	r4, 8016cce <_Bfree+0x3a>
 8016cbe:	69eb      	ldr	r3, [r5, #28]
 8016cc0:	6862      	ldr	r2, [r4, #4]
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016cc8:	6021      	str	r1, [r4, #0]
 8016cca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016cce:	bd70      	pop	{r4, r5, r6, pc}
 8016cd0:	0801ecd1 	.word	0x0801ecd1
 8016cd4:	0801ed51 	.word	0x0801ed51

08016cd8 <__multadd>:
 8016cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cdc:	690d      	ldr	r5, [r1, #16]
 8016cde:	4607      	mov	r7, r0
 8016ce0:	460c      	mov	r4, r1
 8016ce2:	461e      	mov	r6, r3
 8016ce4:	f101 0c14 	add.w	ip, r1, #20
 8016ce8:	2000      	movs	r0, #0
 8016cea:	f8dc 3000 	ldr.w	r3, [ip]
 8016cee:	b299      	uxth	r1, r3
 8016cf0:	fb02 6101 	mla	r1, r2, r1, r6
 8016cf4:	0c1e      	lsrs	r6, r3, #16
 8016cf6:	0c0b      	lsrs	r3, r1, #16
 8016cf8:	fb02 3306 	mla	r3, r2, r6, r3
 8016cfc:	b289      	uxth	r1, r1
 8016cfe:	3001      	adds	r0, #1
 8016d00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016d04:	4285      	cmp	r5, r0
 8016d06:	f84c 1b04 	str.w	r1, [ip], #4
 8016d0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016d0e:	dcec      	bgt.n	8016cea <__multadd+0x12>
 8016d10:	b30e      	cbz	r6, 8016d56 <__multadd+0x7e>
 8016d12:	68a3      	ldr	r3, [r4, #8]
 8016d14:	42ab      	cmp	r3, r5
 8016d16:	dc19      	bgt.n	8016d4c <__multadd+0x74>
 8016d18:	6861      	ldr	r1, [r4, #4]
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	3101      	adds	r1, #1
 8016d1e:	f7ff ff79 	bl	8016c14 <_Balloc>
 8016d22:	4680      	mov	r8, r0
 8016d24:	b928      	cbnz	r0, 8016d32 <__multadd+0x5a>
 8016d26:	4602      	mov	r2, r0
 8016d28:	4b0c      	ldr	r3, [pc, #48]	@ (8016d5c <__multadd+0x84>)
 8016d2a:	480d      	ldr	r0, [pc, #52]	@ (8016d60 <__multadd+0x88>)
 8016d2c:	21ba      	movs	r1, #186	@ 0xba
 8016d2e:	f000 fd9d 	bl	801786c <__assert_func>
 8016d32:	6922      	ldr	r2, [r4, #16]
 8016d34:	3202      	adds	r2, #2
 8016d36:	f104 010c 	add.w	r1, r4, #12
 8016d3a:	0092      	lsls	r2, r2, #2
 8016d3c:	300c      	adds	r0, #12
 8016d3e:	f7ff f872 	bl	8015e26 <memcpy>
 8016d42:	4621      	mov	r1, r4
 8016d44:	4638      	mov	r0, r7
 8016d46:	f7ff ffa5 	bl	8016c94 <_Bfree>
 8016d4a:	4644      	mov	r4, r8
 8016d4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016d50:	3501      	adds	r5, #1
 8016d52:	615e      	str	r6, [r3, #20]
 8016d54:	6125      	str	r5, [r4, #16]
 8016d56:	4620      	mov	r0, r4
 8016d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d5c:	0801ed40 	.word	0x0801ed40
 8016d60:	0801ed51 	.word	0x0801ed51

08016d64 <__hi0bits>:
 8016d64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016d68:	4603      	mov	r3, r0
 8016d6a:	bf36      	itet	cc
 8016d6c:	0403      	lslcc	r3, r0, #16
 8016d6e:	2000      	movcs	r0, #0
 8016d70:	2010      	movcc	r0, #16
 8016d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016d76:	bf3c      	itt	cc
 8016d78:	021b      	lslcc	r3, r3, #8
 8016d7a:	3008      	addcc	r0, #8
 8016d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016d80:	bf3c      	itt	cc
 8016d82:	011b      	lslcc	r3, r3, #4
 8016d84:	3004      	addcc	r0, #4
 8016d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d8a:	bf3c      	itt	cc
 8016d8c:	009b      	lslcc	r3, r3, #2
 8016d8e:	3002      	addcc	r0, #2
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	db05      	blt.n	8016da0 <__hi0bits+0x3c>
 8016d94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016d98:	f100 0001 	add.w	r0, r0, #1
 8016d9c:	bf08      	it	eq
 8016d9e:	2020      	moveq	r0, #32
 8016da0:	4770      	bx	lr

08016da2 <__lo0bits>:
 8016da2:	6803      	ldr	r3, [r0, #0]
 8016da4:	4602      	mov	r2, r0
 8016da6:	f013 0007 	ands.w	r0, r3, #7
 8016daa:	d00b      	beq.n	8016dc4 <__lo0bits+0x22>
 8016dac:	07d9      	lsls	r1, r3, #31
 8016dae:	d421      	bmi.n	8016df4 <__lo0bits+0x52>
 8016db0:	0798      	lsls	r0, r3, #30
 8016db2:	bf49      	itett	mi
 8016db4:	085b      	lsrmi	r3, r3, #1
 8016db6:	089b      	lsrpl	r3, r3, #2
 8016db8:	2001      	movmi	r0, #1
 8016dba:	6013      	strmi	r3, [r2, #0]
 8016dbc:	bf5c      	itt	pl
 8016dbe:	6013      	strpl	r3, [r2, #0]
 8016dc0:	2002      	movpl	r0, #2
 8016dc2:	4770      	bx	lr
 8016dc4:	b299      	uxth	r1, r3
 8016dc6:	b909      	cbnz	r1, 8016dcc <__lo0bits+0x2a>
 8016dc8:	0c1b      	lsrs	r3, r3, #16
 8016dca:	2010      	movs	r0, #16
 8016dcc:	b2d9      	uxtb	r1, r3
 8016dce:	b909      	cbnz	r1, 8016dd4 <__lo0bits+0x32>
 8016dd0:	3008      	adds	r0, #8
 8016dd2:	0a1b      	lsrs	r3, r3, #8
 8016dd4:	0719      	lsls	r1, r3, #28
 8016dd6:	bf04      	itt	eq
 8016dd8:	091b      	lsreq	r3, r3, #4
 8016dda:	3004      	addeq	r0, #4
 8016ddc:	0799      	lsls	r1, r3, #30
 8016dde:	bf04      	itt	eq
 8016de0:	089b      	lsreq	r3, r3, #2
 8016de2:	3002      	addeq	r0, #2
 8016de4:	07d9      	lsls	r1, r3, #31
 8016de6:	d403      	bmi.n	8016df0 <__lo0bits+0x4e>
 8016de8:	085b      	lsrs	r3, r3, #1
 8016dea:	f100 0001 	add.w	r0, r0, #1
 8016dee:	d003      	beq.n	8016df8 <__lo0bits+0x56>
 8016df0:	6013      	str	r3, [r2, #0]
 8016df2:	4770      	bx	lr
 8016df4:	2000      	movs	r0, #0
 8016df6:	4770      	bx	lr
 8016df8:	2020      	movs	r0, #32
 8016dfa:	4770      	bx	lr

08016dfc <__i2b>:
 8016dfc:	b510      	push	{r4, lr}
 8016dfe:	460c      	mov	r4, r1
 8016e00:	2101      	movs	r1, #1
 8016e02:	f7ff ff07 	bl	8016c14 <_Balloc>
 8016e06:	4602      	mov	r2, r0
 8016e08:	b928      	cbnz	r0, 8016e16 <__i2b+0x1a>
 8016e0a:	4b05      	ldr	r3, [pc, #20]	@ (8016e20 <__i2b+0x24>)
 8016e0c:	4805      	ldr	r0, [pc, #20]	@ (8016e24 <__i2b+0x28>)
 8016e0e:	f240 1145 	movw	r1, #325	@ 0x145
 8016e12:	f000 fd2b 	bl	801786c <__assert_func>
 8016e16:	2301      	movs	r3, #1
 8016e18:	6144      	str	r4, [r0, #20]
 8016e1a:	6103      	str	r3, [r0, #16]
 8016e1c:	bd10      	pop	{r4, pc}
 8016e1e:	bf00      	nop
 8016e20:	0801ed40 	.word	0x0801ed40
 8016e24:	0801ed51 	.word	0x0801ed51

08016e28 <__multiply>:
 8016e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e2c:	4617      	mov	r7, r2
 8016e2e:	690a      	ldr	r2, [r1, #16]
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	429a      	cmp	r2, r3
 8016e34:	bfa8      	it	ge
 8016e36:	463b      	movge	r3, r7
 8016e38:	4689      	mov	r9, r1
 8016e3a:	bfa4      	itt	ge
 8016e3c:	460f      	movge	r7, r1
 8016e3e:	4699      	movge	r9, r3
 8016e40:	693d      	ldr	r5, [r7, #16]
 8016e42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	6879      	ldr	r1, [r7, #4]
 8016e4a:	eb05 060a 	add.w	r6, r5, sl
 8016e4e:	42b3      	cmp	r3, r6
 8016e50:	b085      	sub	sp, #20
 8016e52:	bfb8      	it	lt
 8016e54:	3101      	addlt	r1, #1
 8016e56:	f7ff fedd 	bl	8016c14 <_Balloc>
 8016e5a:	b930      	cbnz	r0, 8016e6a <__multiply+0x42>
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	4b41      	ldr	r3, [pc, #260]	@ (8016f64 <__multiply+0x13c>)
 8016e60:	4841      	ldr	r0, [pc, #260]	@ (8016f68 <__multiply+0x140>)
 8016e62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016e66:	f000 fd01 	bl	801786c <__assert_func>
 8016e6a:	f100 0414 	add.w	r4, r0, #20
 8016e6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016e72:	4623      	mov	r3, r4
 8016e74:	2200      	movs	r2, #0
 8016e76:	4573      	cmp	r3, lr
 8016e78:	d320      	bcc.n	8016ebc <__multiply+0x94>
 8016e7a:	f107 0814 	add.w	r8, r7, #20
 8016e7e:	f109 0114 	add.w	r1, r9, #20
 8016e82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016e86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016e8a:	9302      	str	r3, [sp, #8]
 8016e8c:	1beb      	subs	r3, r5, r7
 8016e8e:	3b15      	subs	r3, #21
 8016e90:	f023 0303 	bic.w	r3, r3, #3
 8016e94:	3304      	adds	r3, #4
 8016e96:	3715      	adds	r7, #21
 8016e98:	42bd      	cmp	r5, r7
 8016e9a:	bf38      	it	cc
 8016e9c:	2304      	movcc	r3, #4
 8016e9e:	9301      	str	r3, [sp, #4]
 8016ea0:	9b02      	ldr	r3, [sp, #8]
 8016ea2:	9103      	str	r1, [sp, #12]
 8016ea4:	428b      	cmp	r3, r1
 8016ea6:	d80c      	bhi.n	8016ec2 <__multiply+0x9a>
 8016ea8:	2e00      	cmp	r6, #0
 8016eaa:	dd03      	ble.n	8016eb4 <__multiply+0x8c>
 8016eac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d055      	beq.n	8016f60 <__multiply+0x138>
 8016eb4:	6106      	str	r6, [r0, #16]
 8016eb6:	b005      	add	sp, #20
 8016eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebc:	f843 2b04 	str.w	r2, [r3], #4
 8016ec0:	e7d9      	b.n	8016e76 <__multiply+0x4e>
 8016ec2:	f8b1 a000 	ldrh.w	sl, [r1]
 8016ec6:	f1ba 0f00 	cmp.w	sl, #0
 8016eca:	d01f      	beq.n	8016f0c <__multiply+0xe4>
 8016ecc:	46c4      	mov	ip, r8
 8016ece:	46a1      	mov	r9, r4
 8016ed0:	2700      	movs	r7, #0
 8016ed2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016ed6:	f8d9 3000 	ldr.w	r3, [r9]
 8016eda:	fa1f fb82 	uxth.w	fp, r2
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	fb0a 330b 	mla	r3, sl, fp, r3
 8016ee4:	443b      	add	r3, r7
 8016ee6:	f8d9 7000 	ldr.w	r7, [r9]
 8016eea:	0c12      	lsrs	r2, r2, #16
 8016eec:	0c3f      	lsrs	r7, r7, #16
 8016eee:	fb0a 7202 	mla	r2, sl, r2, r7
 8016ef2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016efc:	4565      	cmp	r5, ip
 8016efe:	f849 3b04 	str.w	r3, [r9], #4
 8016f02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016f06:	d8e4      	bhi.n	8016ed2 <__multiply+0xaa>
 8016f08:	9b01      	ldr	r3, [sp, #4]
 8016f0a:	50e7      	str	r7, [r4, r3]
 8016f0c:	9b03      	ldr	r3, [sp, #12]
 8016f0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016f12:	3104      	adds	r1, #4
 8016f14:	f1b9 0f00 	cmp.w	r9, #0
 8016f18:	d020      	beq.n	8016f5c <__multiply+0x134>
 8016f1a:	6823      	ldr	r3, [r4, #0]
 8016f1c:	4647      	mov	r7, r8
 8016f1e:	46a4      	mov	ip, r4
 8016f20:	f04f 0a00 	mov.w	sl, #0
 8016f24:	f8b7 b000 	ldrh.w	fp, [r7]
 8016f28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016f2c:	fb09 220b 	mla	r2, r9, fp, r2
 8016f30:	4452      	add	r2, sl
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f38:	f84c 3b04 	str.w	r3, [ip], #4
 8016f3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8016f40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016f44:	f8bc 3000 	ldrh.w	r3, [ip]
 8016f48:	fb09 330a 	mla	r3, r9, sl, r3
 8016f4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016f50:	42bd      	cmp	r5, r7
 8016f52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016f56:	d8e5      	bhi.n	8016f24 <__multiply+0xfc>
 8016f58:	9a01      	ldr	r2, [sp, #4]
 8016f5a:	50a3      	str	r3, [r4, r2]
 8016f5c:	3404      	adds	r4, #4
 8016f5e:	e79f      	b.n	8016ea0 <__multiply+0x78>
 8016f60:	3e01      	subs	r6, #1
 8016f62:	e7a1      	b.n	8016ea8 <__multiply+0x80>
 8016f64:	0801ed40 	.word	0x0801ed40
 8016f68:	0801ed51 	.word	0x0801ed51

08016f6c <__pow5mult>:
 8016f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f70:	4615      	mov	r5, r2
 8016f72:	f012 0203 	ands.w	r2, r2, #3
 8016f76:	4607      	mov	r7, r0
 8016f78:	460e      	mov	r6, r1
 8016f7a:	d007      	beq.n	8016f8c <__pow5mult+0x20>
 8016f7c:	4c25      	ldr	r4, [pc, #148]	@ (8017014 <__pow5mult+0xa8>)
 8016f7e:	3a01      	subs	r2, #1
 8016f80:	2300      	movs	r3, #0
 8016f82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016f86:	f7ff fea7 	bl	8016cd8 <__multadd>
 8016f8a:	4606      	mov	r6, r0
 8016f8c:	10ad      	asrs	r5, r5, #2
 8016f8e:	d03d      	beq.n	801700c <__pow5mult+0xa0>
 8016f90:	69fc      	ldr	r4, [r7, #28]
 8016f92:	b97c      	cbnz	r4, 8016fb4 <__pow5mult+0x48>
 8016f94:	2010      	movs	r0, #16
 8016f96:	f7ff fd87 	bl	8016aa8 <malloc>
 8016f9a:	4602      	mov	r2, r0
 8016f9c:	61f8      	str	r0, [r7, #28]
 8016f9e:	b928      	cbnz	r0, 8016fac <__pow5mult+0x40>
 8016fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8017018 <__pow5mult+0xac>)
 8016fa2:	481e      	ldr	r0, [pc, #120]	@ (801701c <__pow5mult+0xb0>)
 8016fa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016fa8:	f000 fc60 	bl	801786c <__assert_func>
 8016fac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016fb0:	6004      	str	r4, [r0, #0]
 8016fb2:	60c4      	str	r4, [r0, #12]
 8016fb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016fb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016fbc:	b94c      	cbnz	r4, 8016fd2 <__pow5mult+0x66>
 8016fbe:	f240 2171 	movw	r1, #625	@ 0x271
 8016fc2:	4638      	mov	r0, r7
 8016fc4:	f7ff ff1a 	bl	8016dfc <__i2b>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	f8c8 0008 	str.w	r0, [r8, #8]
 8016fce:	4604      	mov	r4, r0
 8016fd0:	6003      	str	r3, [r0, #0]
 8016fd2:	f04f 0900 	mov.w	r9, #0
 8016fd6:	07eb      	lsls	r3, r5, #31
 8016fd8:	d50a      	bpl.n	8016ff0 <__pow5mult+0x84>
 8016fda:	4631      	mov	r1, r6
 8016fdc:	4622      	mov	r2, r4
 8016fde:	4638      	mov	r0, r7
 8016fe0:	f7ff ff22 	bl	8016e28 <__multiply>
 8016fe4:	4631      	mov	r1, r6
 8016fe6:	4680      	mov	r8, r0
 8016fe8:	4638      	mov	r0, r7
 8016fea:	f7ff fe53 	bl	8016c94 <_Bfree>
 8016fee:	4646      	mov	r6, r8
 8016ff0:	106d      	asrs	r5, r5, #1
 8016ff2:	d00b      	beq.n	801700c <__pow5mult+0xa0>
 8016ff4:	6820      	ldr	r0, [r4, #0]
 8016ff6:	b938      	cbnz	r0, 8017008 <__pow5mult+0x9c>
 8016ff8:	4622      	mov	r2, r4
 8016ffa:	4621      	mov	r1, r4
 8016ffc:	4638      	mov	r0, r7
 8016ffe:	f7ff ff13 	bl	8016e28 <__multiply>
 8017002:	6020      	str	r0, [r4, #0]
 8017004:	f8c0 9000 	str.w	r9, [r0]
 8017008:	4604      	mov	r4, r0
 801700a:	e7e4      	b.n	8016fd6 <__pow5mult+0x6a>
 801700c:	4630      	mov	r0, r6
 801700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017012:	bf00      	nop
 8017014:	0801ee04 	.word	0x0801ee04
 8017018:	0801ecd1 	.word	0x0801ecd1
 801701c:	0801ed51 	.word	0x0801ed51

08017020 <__lshift>:
 8017020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017024:	460c      	mov	r4, r1
 8017026:	6849      	ldr	r1, [r1, #4]
 8017028:	6923      	ldr	r3, [r4, #16]
 801702a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801702e:	68a3      	ldr	r3, [r4, #8]
 8017030:	4607      	mov	r7, r0
 8017032:	4691      	mov	r9, r2
 8017034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017038:	f108 0601 	add.w	r6, r8, #1
 801703c:	42b3      	cmp	r3, r6
 801703e:	db0b      	blt.n	8017058 <__lshift+0x38>
 8017040:	4638      	mov	r0, r7
 8017042:	f7ff fde7 	bl	8016c14 <_Balloc>
 8017046:	4605      	mov	r5, r0
 8017048:	b948      	cbnz	r0, 801705e <__lshift+0x3e>
 801704a:	4602      	mov	r2, r0
 801704c:	4b28      	ldr	r3, [pc, #160]	@ (80170f0 <__lshift+0xd0>)
 801704e:	4829      	ldr	r0, [pc, #164]	@ (80170f4 <__lshift+0xd4>)
 8017050:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017054:	f000 fc0a 	bl	801786c <__assert_func>
 8017058:	3101      	adds	r1, #1
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	e7ee      	b.n	801703c <__lshift+0x1c>
 801705e:	2300      	movs	r3, #0
 8017060:	f100 0114 	add.w	r1, r0, #20
 8017064:	f100 0210 	add.w	r2, r0, #16
 8017068:	4618      	mov	r0, r3
 801706a:	4553      	cmp	r3, sl
 801706c:	db33      	blt.n	80170d6 <__lshift+0xb6>
 801706e:	6920      	ldr	r0, [r4, #16]
 8017070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017074:	f104 0314 	add.w	r3, r4, #20
 8017078:	f019 091f 	ands.w	r9, r9, #31
 801707c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017084:	d02b      	beq.n	80170de <__lshift+0xbe>
 8017086:	f1c9 0e20 	rsb	lr, r9, #32
 801708a:	468a      	mov	sl, r1
 801708c:	2200      	movs	r2, #0
 801708e:	6818      	ldr	r0, [r3, #0]
 8017090:	fa00 f009 	lsl.w	r0, r0, r9
 8017094:	4310      	orrs	r0, r2
 8017096:	f84a 0b04 	str.w	r0, [sl], #4
 801709a:	f853 2b04 	ldr.w	r2, [r3], #4
 801709e:	459c      	cmp	ip, r3
 80170a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80170a4:	d8f3      	bhi.n	801708e <__lshift+0x6e>
 80170a6:	ebac 0304 	sub.w	r3, ip, r4
 80170aa:	3b15      	subs	r3, #21
 80170ac:	f023 0303 	bic.w	r3, r3, #3
 80170b0:	3304      	adds	r3, #4
 80170b2:	f104 0015 	add.w	r0, r4, #21
 80170b6:	4560      	cmp	r0, ip
 80170b8:	bf88      	it	hi
 80170ba:	2304      	movhi	r3, #4
 80170bc:	50ca      	str	r2, [r1, r3]
 80170be:	b10a      	cbz	r2, 80170c4 <__lshift+0xa4>
 80170c0:	f108 0602 	add.w	r6, r8, #2
 80170c4:	3e01      	subs	r6, #1
 80170c6:	4638      	mov	r0, r7
 80170c8:	612e      	str	r6, [r5, #16]
 80170ca:	4621      	mov	r1, r4
 80170cc:	f7ff fde2 	bl	8016c94 <_Bfree>
 80170d0:	4628      	mov	r0, r5
 80170d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80170da:	3301      	adds	r3, #1
 80170dc:	e7c5      	b.n	801706a <__lshift+0x4a>
 80170de:	3904      	subs	r1, #4
 80170e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80170e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80170e8:	459c      	cmp	ip, r3
 80170ea:	d8f9      	bhi.n	80170e0 <__lshift+0xc0>
 80170ec:	e7ea      	b.n	80170c4 <__lshift+0xa4>
 80170ee:	bf00      	nop
 80170f0:	0801ed40 	.word	0x0801ed40
 80170f4:	0801ed51 	.word	0x0801ed51

080170f8 <__mcmp>:
 80170f8:	690a      	ldr	r2, [r1, #16]
 80170fa:	4603      	mov	r3, r0
 80170fc:	6900      	ldr	r0, [r0, #16]
 80170fe:	1a80      	subs	r0, r0, r2
 8017100:	b530      	push	{r4, r5, lr}
 8017102:	d10e      	bne.n	8017122 <__mcmp+0x2a>
 8017104:	3314      	adds	r3, #20
 8017106:	3114      	adds	r1, #20
 8017108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801710c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017118:	4295      	cmp	r5, r2
 801711a:	d003      	beq.n	8017124 <__mcmp+0x2c>
 801711c:	d205      	bcs.n	801712a <__mcmp+0x32>
 801711e:	f04f 30ff 	mov.w	r0, #4294967295
 8017122:	bd30      	pop	{r4, r5, pc}
 8017124:	42a3      	cmp	r3, r4
 8017126:	d3f3      	bcc.n	8017110 <__mcmp+0x18>
 8017128:	e7fb      	b.n	8017122 <__mcmp+0x2a>
 801712a:	2001      	movs	r0, #1
 801712c:	e7f9      	b.n	8017122 <__mcmp+0x2a>
	...

08017130 <__mdiff>:
 8017130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017134:	4689      	mov	r9, r1
 8017136:	4606      	mov	r6, r0
 8017138:	4611      	mov	r1, r2
 801713a:	4648      	mov	r0, r9
 801713c:	4614      	mov	r4, r2
 801713e:	f7ff ffdb 	bl	80170f8 <__mcmp>
 8017142:	1e05      	subs	r5, r0, #0
 8017144:	d112      	bne.n	801716c <__mdiff+0x3c>
 8017146:	4629      	mov	r1, r5
 8017148:	4630      	mov	r0, r6
 801714a:	f7ff fd63 	bl	8016c14 <_Balloc>
 801714e:	4602      	mov	r2, r0
 8017150:	b928      	cbnz	r0, 801715e <__mdiff+0x2e>
 8017152:	4b3f      	ldr	r3, [pc, #252]	@ (8017250 <__mdiff+0x120>)
 8017154:	f240 2137 	movw	r1, #567	@ 0x237
 8017158:	483e      	ldr	r0, [pc, #248]	@ (8017254 <__mdiff+0x124>)
 801715a:	f000 fb87 	bl	801786c <__assert_func>
 801715e:	2301      	movs	r3, #1
 8017160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017164:	4610      	mov	r0, r2
 8017166:	b003      	add	sp, #12
 8017168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716c:	bfbc      	itt	lt
 801716e:	464b      	movlt	r3, r9
 8017170:	46a1      	movlt	r9, r4
 8017172:	4630      	mov	r0, r6
 8017174:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017178:	bfba      	itte	lt
 801717a:	461c      	movlt	r4, r3
 801717c:	2501      	movlt	r5, #1
 801717e:	2500      	movge	r5, #0
 8017180:	f7ff fd48 	bl	8016c14 <_Balloc>
 8017184:	4602      	mov	r2, r0
 8017186:	b918      	cbnz	r0, 8017190 <__mdiff+0x60>
 8017188:	4b31      	ldr	r3, [pc, #196]	@ (8017250 <__mdiff+0x120>)
 801718a:	f240 2145 	movw	r1, #581	@ 0x245
 801718e:	e7e3      	b.n	8017158 <__mdiff+0x28>
 8017190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017194:	6926      	ldr	r6, [r4, #16]
 8017196:	60c5      	str	r5, [r0, #12]
 8017198:	f109 0310 	add.w	r3, r9, #16
 801719c:	f109 0514 	add.w	r5, r9, #20
 80171a0:	f104 0e14 	add.w	lr, r4, #20
 80171a4:	f100 0b14 	add.w	fp, r0, #20
 80171a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80171ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80171b0:	9301      	str	r3, [sp, #4]
 80171b2:	46d9      	mov	r9, fp
 80171b4:	f04f 0c00 	mov.w	ip, #0
 80171b8:	9b01      	ldr	r3, [sp, #4]
 80171ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80171be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80171c2:	9301      	str	r3, [sp, #4]
 80171c4:	fa1f f38a 	uxth.w	r3, sl
 80171c8:	4619      	mov	r1, r3
 80171ca:	b283      	uxth	r3, r0
 80171cc:	1acb      	subs	r3, r1, r3
 80171ce:	0c00      	lsrs	r0, r0, #16
 80171d0:	4463      	add	r3, ip
 80171d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80171d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80171da:	b29b      	uxth	r3, r3
 80171dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80171e0:	4576      	cmp	r6, lr
 80171e2:	f849 3b04 	str.w	r3, [r9], #4
 80171e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80171ea:	d8e5      	bhi.n	80171b8 <__mdiff+0x88>
 80171ec:	1b33      	subs	r3, r6, r4
 80171ee:	3b15      	subs	r3, #21
 80171f0:	f023 0303 	bic.w	r3, r3, #3
 80171f4:	3415      	adds	r4, #21
 80171f6:	3304      	adds	r3, #4
 80171f8:	42a6      	cmp	r6, r4
 80171fa:	bf38      	it	cc
 80171fc:	2304      	movcc	r3, #4
 80171fe:	441d      	add	r5, r3
 8017200:	445b      	add	r3, fp
 8017202:	461e      	mov	r6, r3
 8017204:	462c      	mov	r4, r5
 8017206:	4544      	cmp	r4, r8
 8017208:	d30e      	bcc.n	8017228 <__mdiff+0xf8>
 801720a:	f108 0103 	add.w	r1, r8, #3
 801720e:	1b49      	subs	r1, r1, r5
 8017210:	f021 0103 	bic.w	r1, r1, #3
 8017214:	3d03      	subs	r5, #3
 8017216:	45a8      	cmp	r8, r5
 8017218:	bf38      	it	cc
 801721a:	2100      	movcc	r1, #0
 801721c:	440b      	add	r3, r1
 801721e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017222:	b191      	cbz	r1, 801724a <__mdiff+0x11a>
 8017224:	6117      	str	r7, [r2, #16]
 8017226:	e79d      	b.n	8017164 <__mdiff+0x34>
 8017228:	f854 1b04 	ldr.w	r1, [r4], #4
 801722c:	46e6      	mov	lr, ip
 801722e:	0c08      	lsrs	r0, r1, #16
 8017230:	fa1c fc81 	uxtah	ip, ip, r1
 8017234:	4471      	add	r1, lr
 8017236:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801723a:	b289      	uxth	r1, r1
 801723c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017240:	f846 1b04 	str.w	r1, [r6], #4
 8017244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017248:	e7dd      	b.n	8017206 <__mdiff+0xd6>
 801724a:	3f01      	subs	r7, #1
 801724c:	e7e7      	b.n	801721e <__mdiff+0xee>
 801724e:	bf00      	nop
 8017250:	0801ed40 	.word	0x0801ed40
 8017254:	0801ed51 	.word	0x0801ed51

08017258 <__d2b>:
 8017258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801725c:	460f      	mov	r7, r1
 801725e:	2101      	movs	r1, #1
 8017260:	ec59 8b10 	vmov	r8, r9, d0
 8017264:	4616      	mov	r6, r2
 8017266:	f7ff fcd5 	bl	8016c14 <_Balloc>
 801726a:	4604      	mov	r4, r0
 801726c:	b930      	cbnz	r0, 801727c <__d2b+0x24>
 801726e:	4602      	mov	r2, r0
 8017270:	4b23      	ldr	r3, [pc, #140]	@ (8017300 <__d2b+0xa8>)
 8017272:	4824      	ldr	r0, [pc, #144]	@ (8017304 <__d2b+0xac>)
 8017274:	f240 310f 	movw	r1, #783	@ 0x30f
 8017278:	f000 faf8 	bl	801786c <__assert_func>
 801727c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017284:	b10d      	cbz	r5, 801728a <__d2b+0x32>
 8017286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801728a:	9301      	str	r3, [sp, #4]
 801728c:	f1b8 0300 	subs.w	r3, r8, #0
 8017290:	d023      	beq.n	80172da <__d2b+0x82>
 8017292:	4668      	mov	r0, sp
 8017294:	9300      	str	r3, [sp, #0]
 8017296:	f7ff fd84 	bl	8016da2 <__lo0bits>
 801729a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801729e:	b1d0      	cbz	r0, 80172d6 <__d2b+0x7e>
 80172a0:	f1c0 0320 	rsb	r3, r0, #32
 80172a4:	fa02 f303 	lsl.w	r3, r2, r3
 80172a8:	430b      	orrs	r3, r1
 80172aa:	40c2      	lsrs	r2, r0
 80172ac:	6163      	str	r3, [r4, #20]
 80172ae:	9201      	str	r2, [sp, #4]
 80172b0:	9b01      	ldr	r3, [sp, #4]
 80172b2:	61a3      	str	r3, [r4, #24]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	bf0c      	ite	eq
 80172b8:	2201      	moveq	r2, #1
 80172ba:	2202      	movne	r2, #2
 80172bc:	6122      	str	r2, [r4, #16]
 80172be:	b1a5      	cbz	r5, 80172ea <__d2b+0x92>
 80172c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80172c4:	4405      	add	r5, r0
 80172c6:	603d      	str	r5, [r7, #0]
 80172c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80172cc:	6030      	str	r0, [r6, #0]
 80172ce:	4620      	mov	r0, r4
 80172d0:	b003      	add	sp, #12
 80172d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172d6:	6161      	str	r1, [r4, #20]
 80172d8:	e7ea      	b.n	80172b0 <__d2b+0x58>
 80172da:	a801      	add	r0, sp, #4
 80172dc:	f7ff fd61 	bl	8016da2 <__lo0bits>
 80172e0:	9b01      	ldr	r3, [sp, #4]
 80172e2:	6163      	str	r3, [r4, #20]
 80172e4:	3020      	adds	r0, #32
 80172e6:	2201      	movs	r2, #1
 80172e8:	e7e8      	b.n	80172bc <__d2b+0x64>
 80172ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80172ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80172f2:	6038      	str	r0, [r7, #0]
 80172f4:	6918      	ldr	r0, [r3, #16]
 80172f6:	f7ff fd35 	bl	8016d64 <__hi0bits>
 80172fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80172fe:	e7e5      	b.n	80172cc <__d2b+0x74>
 8017300:	0801ed40 	.word	0x0801ed40
 8017304:	0801ed51 	.word	0x0801ed51

08017308 <__ssputs_r>:
 8017308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801730c:	688e      	ldr	r6, [r1, #8]
 801730e:	461f      	mov	r7, r3
 8017310:	42be      	cmp	r6, r7
 8017312:	680b      	ldr	r3, [r1, #0]
 8017314:	4682      	mov	sl, r0
 8017316:	460c      	mov	r4, r1
 8017318:	4690      	mov	r8, r2
 801731a:	d82d      	bhi.n	8017378 <__ssputs_r+0x70>
 801731c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017324:	d026      	beq.n	8017374 <__ssputs_r+0x6c>
 8017326:	6965      	ldr	r5, [r4, #20]
 8017328:	6909      	ldr	r1, [r1, #16]
 801732a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801732e:	eba3 0901 	sub.w	r9, r3, r1
 8017332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017336:	1c7b      	adds	r3, r7, #1
 8017338:	444b      	add	r3, r9
 801733a:	106d      	asrs	r5, r5, #1
 801733c:	429d      	cmp	r5, r3
 801733e:	bf38      	it	cc
 8017340:	461d      	movcc	r5, r3
 8017342:	0553      	lsls	r3, r2, #21
 8017344:	d527      	bpl.n	8017396 <__ssputs_r+0x8e>
 8017346:	4629      	mov	r1, r5
 8017348:	f7ff fbd8 	bl	8016afc <_malloc_r>
 801734c:	4606      	mov	r6, r0
 801734e:	b360      	cbz	r0, 80173aa <__ssputs_r+0xa2>
 8017350:	6921      	ldr	r1, [r4, #16]
 8017352:	464a      	mov	r2, r9
 8017354:	f7fe fd67 	bl	8015e26 <memcpy>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801735e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	6126      	str	r6, [r4, #16]
 8017366:	6165      	str	r5, [r4, #20]
 8017368:	444e      	add	r6, r9
 801736a:	eba5 0509 	sub.w	r5, r5, r9
 801736e:	6026      	str	r6, [r4, #0]
 8017370:	60a5      	str	r5, [r4, #8]
 8017372:	463e      	mov	r6, r7
 8017374:	42be      	cmp	r6, r7
 8017376:	d900      	bls.n	801737a <__ssputs_r+0x72>
 8017378:	463e      	mov	r6, r7
 801737a:	6820      	ldr	r0, [r4, #0]
 801737c:	4632      	mov	r2, r6
 801737e:	4641      	mov	r1, r8
 8017380:	f000 fa28 	bl	80177d4 <memmove>
 8017384:	68a3      	ldr	r3, [r4, #8]
 8017386:	1b9b      	subs	r3, r3, r6
 8017388:	60a3      	str	r3, [r4, #8]
 801738a:	6823      	ldr	r3, [r4, #0]
 801738c:	4433      	add	r3, r6
 801738e:	6023      	str	r3, [r4, #0]
 8017390:	2000      	movs	r0, #0
 8017392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017396:	462a      	mov	r2, r5
 8017398:	f000 faac 	bl	80178f4 <_realloc_r>
 801739c:	4606      	mov	r6, r0
 801739e:	2800      	cmp	r0, #0
 80173a0:	d1e0      	bne.n	8017364 <__ssputs_r+0x5c>
 80173a2:	6921      	ldr	r1, [r4, #16]
 80173a4:	4650      	mov	r0, sl
 80173a6:	f7ff fb35 	bl	8016a14 <_free_r>
 80173aa:	230c      	movs	r3, #12
 80173ac:	f8ca 3000 	str.w	r3, [sl]
 80173b0:	89a3      	ldrh	r3, [r4, #12]
 80173b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173b6:	81a3      	strh	r3, [r4, #12]
 80173b8:	f04f 30ff 	mov.w	r0, #4294967295
 80173bc:	e7e9      	b.n	8017392 <__ssputs_r+0x8a>
	...

080173c0 <_svfiprintf_r>:
 80173c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c4:	4698      	mov	r8, r3
 80173c6:	898b      	ldrh	r3, [r1, #12]
 80173c8:	061b      	lsls	r3, r3, #24
 80173ca:	b09d      	sub	sp, #116	@ 0x74
 80173cc:	4607      	mov	r7, r0
 80173ce:	460d      	mov	r5, r1
 80173d0:	4614      	mov	r4, r2
 80173d2:	d510      	bpl.n	80173f6 <_svfiprintf_r+0x36>
 80173d4:	690b      	ldr	r3, [r1, #16]
 80173d6:	b973      	cbnz	r3, 80173f6 <_svfiprintf_r+0x36>
 80173d8:	2140      	movs	r1, #64	@ 0x40
 80173da:	f7ff fb8f 	bl	8016afc <_malloc_r>
 80173de:	6028      	str	r0, [r5, #0]
 80173e0:	6128      	str	r0, [r5, #16]
 80173e2:	b930      	cbnz	r0, 80173f2 <_svfiprintf_r+0x32>
 80173e4:	230c      	movs	r3, #12
 80173e6:	603b      	str	r3, [r7, #0]
 80173e8:	f04f 30ff 	mov.w	r0, #4294967295
 80173ec:	b01d      	add	sp, #116	@ 0x74
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	2340      	movs	r3, #64	@ 0x40
 80173f4:	616b      	str	r3, [r5, #20]
 80173f6:	2300      	movs	r3, #0
 80173f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80173fa:	2320      	movs	r3, #32
 80173fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017400:	f8cd 800c 	str.w	r8, [sp, #12]
 8017404:	2330      	movs	r3, #48	@ 0x30
 8017406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80175a4 <_svfiprintf_r+0x1e4>
 801740a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801740e:	f04f 0901 	mov.w	r9, #1
 8017412:	4623      	mov	r3, r4
 8017414:	469a      	mov	sl, r3
 8017416:	f813 2b01 	ldrb.w	r2, [r3], #1
 801741a:	b10a      	cbz	r2, 8017420 <_svfiprintf_r+0x60>
 801741c:	2a25      	cmp	r2, #37	@ 0x25
 801741e:	d1f9      	bne.n	8017414 <_svfiprintf_r+0x54>
 8017420:	ebba 0b04 	subs.w	fp, sl, r4
 8017424:	d00b      	beq.n	801743e <_svfiprintf_r+0x7e>
 8017426:	465b      	mov	r3, fp
 8017428:	4622      	mov	r2, r4
 801742a:	4629      	mov	r1, r5
 801742c:	4638      	mov	r0, r7
 801742e:	f7ff ff6b 	bl	8017308 <__ssputs_r>
 8017432:	3001      	adds	r0, #1
 8017434:	f000 80a7 	beq.w	8017586 <_svfiprintf_r+0x1c6>
 8017438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801743a:	445a      	add	r2, fp
 801743c:	9209      	str	r2, [sp, #36]	@ 0x24
 801743e:	f89a 3000 	ldrb.w	r3, [sl]
 8017442:	2b00      	cmp	r3, #0
 8017444:	f000 809f 	beq.w	8017586 <_svfiprintf_r+0x1c6>
 8017448:	2300      	movs	r3, #0
 801744a:	f04f 32ff 	mov.w	r2, #4294967295
 801744e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017452:	f10a 0a01 	add.w	sl, sl, #1
 8017456:	9304      	str	r3, [sp, #16]
 8017458:	9307      	str	r3, [sp, #28]
 801745a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801745e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017460:	4654      	mov	r4, sl
 8017462:	2205      	movs	r2, #5
 8017464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017468:	484e      	ldr	r0, [pc, #312]	@ (80175a4 <_svfiprintf_r+0x1e4>)
 801746a:	f7e8 ff39 	bl	80002e0 <memchr>
 801746e:	9a04      	ldr	r2, [sp, #16]
 8017470:	b9d8      	cbnz	r0, 80174aa <_svfiprintf_r+0xea>
 8017472:	06d0      	lsls	r0, r2, #27
 8017474:	bf44      	itt	mi
 8017476:	2320      	movmi	r3, #32
 8017478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801747c:	0711      	lsls	r1, r2, #28
 801747e:	bf44      	itt	mi
 8017480:	232b      	movmi	r3, #43	@ 0x2b
 8017482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017486:	f89a 3000 	ldrb.w	r3, [sl]
 801748a:	2b2a      	cmp	r3, #42	@ 0x2a
 801748c:	d015      	beq.n	80174ba <_svfiprintf_r+0xfa>
 801748e:	9a07      	ldr	r2, [sp, #28]
 8017490:	4654      	mov	r4, sl
 8017492:	2000      	movs	r0, #0
 8017494:	f04f 0c0a 	mov.w	ip, #10
 8017498:	4621      	mov	r1, r4
 801749a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801749e:	3b30      	subs	r3, #48	@ 0x30
 80174a0:	2b09      	cmp	r3, #9
 80174a2:	d94b      	bls.n	801753c <_svfiprintf_r+0x17c>
 80174a4:	b1b0      	cbz	r0, 80174d4 <_svfiprintf_r+0x114>
 80174a6:	9207      	str	r2, [sp, #28]
 80174a8:	e014      	b.n	80174d4 <_svfiprintf_r+0x114>
 80174aa:	eba0 0308 	sub.w	r3, r0, r8
 80174ae:	fa09 f303 	lsl.w	r3, r9, r3
 80174b2:	4313      	orrs	r3, r2
 80174b4:	9304      	str	r3, [sp, #16]
 80174b6:	46a2      	mov	sl, r4
 80174b8:	e7d2      	b.n	8017460 <_svfiprintf_r+0xa0>
 80174ba:	9b03      	ldr	r3, [sp, #12]
 80174bc:	1d19      	adds	r1, r3, #4
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	9103      	str	r1, [sp, #12]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	bfbb      	ittet	lt
 80174c6:	425b      	neglt	r3, r3
 80174c8:	f042 0202 	orrlt.w	r2, r2, #2
 80174cc:	9307      	strge	r3, [sp, #28]
 80174ce:	9307      	strlt	r3, [sp, #28]
 80174d0:	bfb8      	it	lt
 80174d2:	9204      	strlt	r2, [sp, #16]
 80174d4:	7823      	ldrb	r3, [r4, #0]
 80174d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80174d8:	d10a      	bne.n	80174f0 <_svfiprintf_r+0x130>
 80174da:	7863      	ldrb	r3, [r4, #1]
 80174dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80174de:	d132      	bne.n	8017546 <_svfiprintf_r+0x186>
 80174e0:	9b03      	ldr	r3, [sp, #12]
 80174e2:	1d1a      	adds	r2, r3, #4
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	9203      	str	r2, [sp, #12]
 80174e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174ec:	3402      	adds	r4, #2
 80174ee:	9305      	str	r3, [sp, #20]
 80174f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80175b4 <_svfiprintf_r+0x1f4>
 80174f4:	7821      	ldrb	r1, [r4, #0]
 80174f6:	2203      	movs	r2, #3
 80174f8:	4650      	mov	r0, sl
 80174fa:	f7e8 fef1 	bl	80002e0 <memchr>
 80174fe:	b138      	cbz	r0, 8017510 <_svfiprintf_r+0x150>
 8017500:	9b04      	ldr	r3, [sp, #16]
 8017502:	eba0 000a 	sub.w	r0, r0, sl
 8017506:	2240      	movs	r2, #64	@ 0x40
 8017508:	4082      	lsls	r2, r0
 801750a:	4313      	orrs	r3, r2
 801750c:	3401      	adds	r4, #1
 801750e:	9304      	str	r3, [sp, #16]
 8017510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017514:	4824      	ldr	r0, [pc, #144]	@ (80175a8 <_svfiprintf_r+0x1e8>)
 8017516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801751a:	2206      	movs	r2, #6
 801751c:	f7e8 fee0 	bl	80002e0 <memchr>
 8017520:	2800      	cmp	r0, #0
 8017522:	d036      	beq.n	8017592 <_svfiprintf_r+0x1d2>
 8017524:	4b21      	ldr	r3, [pc, #132]	@ (80175ac <_svfiprintf_r+0x1ec>)
 8017526:	bb1b      	cbnz	r3, 8017570 <_svfiprintf_r+0x1b0>
 8017528:	9b03      	ldr	r3, [sp, #12]
 801752a:	3307      	adds	r3, #7
 801752c:	f023 0307 	bic.w	r3, r3, #7
 8017530:	3308      	adds	r3, #8
 8017532:	9303      	str	r3, [sp, #12]
 8017534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017536:	4433      	add	r3, r6
 8017538:	9309      	str	r3, [sp, #36]	@ 0x24
 801753a:	e76a      	b.n	8017412 <_svfiprintf_r+0x52>
 801753c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017540:	460c      	mov	r4, r1
 8017542:	2001      	movs	r0, #1
 8017544:	e7a8      	b.n	8017498 <_svfiprintf_r+0xd8>
 8017546:	2300      	movs	r3, #0
 8017548:	3401      	adds	r4, #1
 801754a:	9305      	str	r3, [sp, #20]
 801754c:	4619      	mov	r1, r3
 801754e:	f04f 0c0a 	mov.w	ip, #10
 8017552:	4620      	mov	r0, r4
 8017554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017558:	3a30      	subs	r2, #48	@ 0x30
 801755a:	2a09      	cmp	r2, #9
 801755c:	d903      	bls.n	8017566 <_svfiprintf_r+0x1a6>
 801755e:	2b00      	cmp	r3, #0
 8017560:	d0c6      	beq.n	80174f0 <_svfiprintf_r+0x130>
 8017562:	9105      	str	r1, [sp, #20]
 8017564:	e7c4      	b.n	80174f0 <_svfiprintf_r+0x130>
 8017566:	fb0c 2101 	mla	r1, ip, r1, r2
 801756a:	4604      	mov	r4, r0
 801756c:	2301      	movs	r3, #1
 801756e:	e7f0      	b.n	8017552 <_svfiprintf_r+0x192>
 8017570:	ab03      	add	r3, sp, #12
 8017572:	9300      	str	r3, [sp, #0]
 8017574:	462a      	mov	r2, r5
 8017576:	4b0e      	ldr	r3, [pc, #56]	@ (80175b0 <_svfiprintf_r+0x1f0>)
 8017578:	a904      	add	r1, sp, #16
 801757a:	4638      	mov	r0, r7
 801757c:	f7fd fe14 	bl	80151a8 <_printf_float>
 8017580:	1c42      	adds	r2, r0, #1
 8017582:	4606      	mov	r6, r0
 8017584:	d1d6      	bne.n	8017534 <_svfiprintf_r+0x174>
 8017586:	89ab      	ldrh	r3, [r5, #12]
 8017588:	065b      	lsls	r3, r3, #25
 801758a:	f53f af2d 	bmi.w	80173e8 <_svfiprintf_r+0x28>
 801758e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017590:	e72c      	b.n	80173ec <_svfiprintf_r+0x2c>
 8017592:	ab03      	add	r3, sp, #12
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	462a      	mov	r2, r5
 8017598:	4b05      	ldr	r3, [pc, #20]	@ (80175b0 <_svfiprintf_r+0x1f0>)
 801759a:	a904      	add	r1, sp, #16
 801759c:	4638      	mov	r0, r7
 801759e:	f7fe f88b 	bl	80156b8 <_printf_i>
 80175a2:	e7ed      	b.n	8017580 <_svfiprintf_r+0x1c0>
 80175a4:	0801edaa 	.word	0x0801edaa
 80175a8:	0801edb4 	.word	0x0801edb4
 80175ac:	080151a9 	.word	0x080151a9
 80175b0:	08017309 	.word	0x08017309
 80175b4:	0801edb0 	.word	0x0801edb0

080175b8 <__sflush_r>:
 80175b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175c0:	0716      	lsls	r6, r2, #28
 80175c2:	4605      	mov	r5, r0
 80175c4:	460c      	mov	r4, r1
 80175c6:	d454      	bmi.n	8017672 <__sflush_r+0xba>
 80175c8:	684b      	ldr	r3, [r1, #4]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	dc02      	bgt.n	80175d4 <__sflush_r+0x1c>
 80175ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	dd48      	ble.n	8017666 <__sflush_r+0xae>
 80175d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175d6:	2e00      	cmp	r6, #0
 80175d8:	d045      	beq.n	8017666 <__sflush_r+0xae>
 80175da:	2300      	movs	r3, #0
 80175dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175e0:	682f      	ldr	r7, [r5, #0]
 80175e2:	6a21      	ldr	r1, [r4, #32]
 80175e4:	602b      	str	r3, [r5, #0]
 80175e6:	d030      	beq.n	801764a <__sflush_r+0x92>
 80175e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175ea:	89a3      	ldrh	r3, [r4, #12]
 80175ec:	0759      	lsls	r1, r3, #29
 80175ee:	d505      	bpl.n	80175fc <__sflush_r+0x44>
 80175f0:	6863      	ldr	r3, [r4, #4]
 80175f2:	1ad2      	subs	r2, r2, r3
 80175f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175f6:	b10b      	cbz	r3, 80175fc <__sflush_r+0x44>
 80175f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175fa:	1ad2      	subs	r2, r2, r3
 80175fc:	2300      	movs	r3, #0
 80175fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017600:	6a21      	ldr	r1, [r4, #32]
 8017602:	4628      	mov	r0, r5
 8017604:	47b0      	blx	r6
 8017606:	1c43      	adds	r3, r0, #1
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	d106      	bne.n	801761a <__sflush_r+0x62>
 801760c:	6829      	ldr	r1, [r5, #0]
 801760e:	291d      	cmp	r1, #29
 8017610:	d82b      	bhi.n	801766a <__sflush_r+0xb2>
 8017612:	4a2a      	ldr	r2, [pc, #168]	@ (80176bc <__sflush_r+0x104>)
 8017614:	40ca      	lsrs	r2, r1
 8017616:	07d6      	lsls	r6, r2, #31
 8017618:	d527      	bpl.n	801766a <__sflush_r+0xb2>
 801761a:	2200      	movs	r2, #0
 801761c:	6062      	str	r2, [r4, #4]
 801761e:	04d9      	lsls	r1, r3, #19
 8017620:	6922      	ldr	r2, [r4, #16]
 8017622:	6022      	str	r2, [r4, #0]
 8017624:	d504      	bpl.n	8017630 <__sflush_r+0x78>
 8017626:	1c42      	adds	r2, r0, #1
 8017628:	d101      	bne.n	801762e <__sflush_r+0x76>
 801762a:	682b      	ldr	r3, [r5, #0]
 801762c:	b903      	cbnz	r3, 8017630 <__sflush_r+0x78>
 801762e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017632:	602f      	str	r7, [r5, #0]
 8017634:	b1b9      	cbz	r1, 8017666 <__sflush_r+0xae>
 8017636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801763a:	4299      	cmp	r1, r3
 801763c:	d002      	beq.n	8017644 <__sflush_r+0x8c>
 801763e:	4628      	mov	r0, r5
 8017640:	f7ff f9e8 	bl	8016a14 <_free_r>
 8017644:	2300      	movs	r3, #0
 8017646:	6363      	str	r3, [r4, #52]	@ 0x34
 8017648:	e00d      	b.n	8017666 <__sflush_r+0xae>
 801764a:	2301      	movs	r3, #1
 801764c:	4628      	mov	r0, r5
 801764e:	47b0      	blx	r6
 8017650:	4602      	mov	r2, r0
 8017652:	1c50      	adds	r0, r2, #1
 8017654:	d1c9      	bne.n	80175ea <__sflush_r+0x32>
 8017656:	682b      	ldr	r3, [r5, #0]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d0c6      	beq.n	80175ea <__sflush_r+0x32>
 801765c:	2b1d      	cmp	r3, #29
 801765e:	d001      	beq.n	8017664 <__sflush_r+0xac>
 8017660:	2b16      	cmp	r3, #22
 8017662:	d11e      	bne.n	80176a2 <__sflush_r+0xea>
 8017664:	602f      	str	r7, [r5, #0]
 8017666:	2000      	movs	r0, #0
 8017668:	e022      	b.n	80176b0 <__sflush_r+0xf8>
 801766a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801766e:	b21b      	sxth	r3, r3
 8017670:	e01b      	b.n	80176aa <__sflush_r+0xf2>
 8017672:	690f      	ldr	r7, [r1, #16]
 8017674:	2f00      	cmp	r7, #0
 8017676:	d0f6      	beq.n	8017666 <__sflush_r+0xae>
 8017678:	0793      	lsls	r3, r2, #30
 801767a:	680e      	ldr	r6, [r1, #0]
 801767c:	bf08      	it	eq
 801767e:	694b      	ldreq	r3, [r1, #20]
 8017680:	600f      	str	r7, [r1, #0]
 8017682:	bf18      	it	ne
 8017684:	2300      	movne	r3, #0
 8017686:	eba6 0807 	sub.w	r8, r6, r7
 801768a:	608b      	str	r3, [r1, #8]
 801768c:	f1b8 0f00 	cmp.w	r8, #0
 8017690:	dde9      	ble.n	8017666 <__sflush_r+0xae>
 8017692:	6a21      	ldr	r1, [r4, #32]
 8017694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017696:	4643      	mov	r3, r8
 8017698:	463a      	mov	r2, r7
 801769a:	4628      	mov	r0, r5
 801769c:	47b0      	blx	r6
 801769e:	2800      	cmp	r0, #0
 80176a0:	dc08      	bgt.n	80176b4 <__sflush_r+0xfc>
 80176a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176aa:	81a3      	strh	r3, [r4, #12]
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b4:	4407      	add	r7, r0
 80176b6:	eba8 0800 	sub.w	r8, r8, r0
 80176ba:	e7e7      	b.n	801768c <__sflush_r+0xd4>
 80176bc:	20400001 	.word	0x20400001

080176c0 <_fflush_r>:
 80176c0:	b538      	push	{r3, r4, r5, lr}
 80176c2:	690b      	ldr	r3, [r1, #16]
 80176c4:	4605      	mov	r5, r0
 80176c6:	460c      	mov	r4, r1
 80176c8:	b913      	cbnz	r3, 80176d0 <_fflush_r+0x10>
 80176ca:	2500      	movs	r5, #0
 80176cc:	4628      	mov	r0, r5
 80176ce:	bd38      	pop	{r3, r4, r5, pc}
 80176d0:	b118      	cbz	r0, 80176da <_fflush_r+0x1a>
 80176d2:	6a03      	ldr	r3, [r0, #32]
 80176d4:	b90b      	cbnz	r3, 80176da <_fflush_r+0x1a>
 80176d6:	f7fe f999 	bl	8015a0c <__sinit>
 80176da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d0f3      	beq.n	80176ca <_fflush_r+0xa>
 80176e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176e4:	07d0      	lsls	r0, r2, #31
 80176e6:	d404      	bmi.n	80176f2 <_fflush_r+0x32>
 80176e8:	0599      	lsls	r1, r3, #22
 80176ea:	d402      	bmi.n	80176f2 <_fflush_r+0x32>
 80176ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176ee:	f7fe fb98 	bl	8015e22 <__retarget_lock_acquire_recursive>
 80176f2:	4628      	mov	r0, r5
 80176f4:	4621      	mov	r1, r4
 80176f6:	f7ff ff5f 	bl	80175b8 <__sflush_r>
 80176fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80176fc:	07da      	lsls	r2, r3, #31
 80176fe:	4605      	mov	r5, r0
 8017700:	d4e4      	bmi.n	80176cc <_fflush_r+0xc>
 8017702:	89a3      	ldrh	r3, [r4, #12]
 8017704:	059b      	lsls	r3, r3, #22
 8017706:	d4e1      	bmi.n	80176cc <_fflush_r+0xc>
 8017708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801770a:	f7fe fb8b 	bl	8015e24 <__retarget_lock_release_recursive>
 801770e:	e7dd      	b.n	80176cc <_fflush_r+0xc>

08017710 <__swhatbuf_r>:
 8017710:	b570      	push	{r4, r5, r6, lr}
 8017712:	460c      	mov	r4, r1
 8017714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017718:	2900      	cmp	r1, #0
 801771a:	b096      	sub	sp, #88	@ 0x58
 801771c:	4615      	mov	r5, r2
 801771e:	461e      	mov	r6, r3
 8017720:	da0d      	bge.n	801773e <__swhatbuf_r+0x2e>
 8017722:	89a3      	ldrh	r3, [r4, #12]
 8017724:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017728:	f04f 0100 	mov.w	r1, #0
 801772c:	bf14      	ite	ne
 801772e:	2340      	movne	r3, #64	@ 0x40
 8017730:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017734:	2000      	movs	r0, #0
 8017736:	6031      	str	r1, [r6, #0]
 8017738:	602b      	str	r3, [r5, #0]
 801773a:	b016      	add	sp, #88	@ 0x58
 801773c:	bd70      	pop	{r4, r5, r6, pc}
 801773e:	466a      	mov	r2, sp
 8017740:	f000 f862 	bl	8017808 <_fstat_r>
 8017744:	2800      	cmp	r0, #0
 8017746:	dbec      	blt.n	8017722 <__swhatbuf_r+0x12>
 8017748:	9901      	ldr	r1, [sp, #4]
 801774a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801774e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017752:	4259      	negs	r1, r3
 8017754:	4159      	adcs	r1, r3
 8017756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801775a:	e7eb      	b.n	8017734 <__swhatbuf_r+0x24>

0801775c <__smakebuf_r>:
 801775c:	898b      	ldrh	r3, [r1, #12]
 801775e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017760:	079d      	lsls	r5, r3, #30
 8017762:	4606      	mov	r6, r0
 8017764:	460c      	mov	r4, r1
 8017766:	d507      	bpl.n	8017778 <__smakebuf_r+0x1c>
 8017768:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801776c:	6023      	str	r3, [r4, #0]
 801776e:	6123      	str	r3, [r4, #16]
 8017770:	2301      	movs	r3, #1
 8017772:	6163      	str	r3, [r4, #20]
 8017774:	b003      	add	sp, #12
 8017776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017778:	ab01      	add	r3, sp, #4
 801777a:	466a      	mov	r2, sp
 801777c:	f7ff ffc8 	bl	8017710 <__swhatbuf_r>
 8017780:	9f00      	ldr	r7, [sp, #0]
 8017782:	4605      	mov	r5, r0
 8017784:	4639      	mov	r1, r7
 8017786:	4630      	mov	r0, r6
 8017788:	f7ff f9b8 	bl	8016afc <_malloc_r>
 801778c:	b948      	cbnz	r0, 80177a2 <__smakebuf_r+0x46>
 801778e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017792:	059a      	lsls	r2, r3, #22
 8017794:	d4ee      	bmi.n	8017774 <__smakebuf_r+0x18>
 8017796:	f023 0303 	bic.w	r3, r3, #3
 801779a:	f043 0302 	orr.w	r3, r3, #2
 801779e:	81a3      	strh	r3, [r4, #12]
 80177a0:	e7e2      	b.n	8017768 <__smakebuf_r+0xc>
 80177a2:	89a3      	ldrh	r3, [r4, #12]
 80177a4:	6020      	str	r0, [r4, #0]
 80177a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177aa:	81a3      	strh	r3, [r4, #12]
 80177ac:	9b01      	ldr	r3, [sp, #4]
 80177ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80177b2:	b15b      	cbz	r3, 80177cc <__smakebuf_r+0x70>
 80177b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80177b8:	4630      	mov	r0, r6
 80177ba:	f000 f837 	bl	801782c <_isatty_r>
 80177be:	b128      	cbz	r0, 80177cc <__smakebuf_r+0x70>
 80177c0:	89a3      	ldrh	r3, [r4, #12]
 80177c2:	f023 0303 	bic.w	r3, r3, #3
 80177c6:	f043 0301 	orr.w	r3, r3, #1
 80177ca:	81a3      	strh	r3, [r4, #12]
 80177cc:	89a3      	ldrh	r3, [r4, #12]
 80177ce:	431d      	orrs	r5, r3
 80177d0:	81a5      	strh	r5, [r4, #12]
 80177d2:	e7cf      	b.n	8017774 <__smakebuf_r+0x18>

080177d4 <memmove>:
 80177d4:	4288      	cmp	r0, r1
 80177d6:	b510      	push	{r4, lr}
 80177d8:	eb01 0402 	add.w	r4, r1, r2
 80177dc:	d902      	bls.n	80177e4 <memmove+0x10>
 80177de:	4284      	cmp	r4, r0
 80177e0:	4623      	mov	r3, r4
 80177e2:	d807      	bhi.n	80177f4 <memmove+0x20>
 80177e4:	1e43      	subs	r3, r0, #1
 80177e6:	42a1      	cmp	r1, r4
 80177e8:	d008      	beq.n	80177fc <memmove+0x28>
 80177ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177f2:	e7f8      	b.n	80177e6 <memmove+0x12>
 80177f4:	4402      	add	r2, r0
 80177f6:	4601      	mov	r1, r0
 80177f8:	428a      	cmp	r2, r1
 80177fa:	d100      	bne.n	80177fe <memmove+0x2a>
 80177fc:	bd10      	pop	{r4, pc}
 80177fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017806:	e7f7      	b.n	80177f8 <memmove+0x24>

08017808 <_fstat_r>:
 8017808:	b538      	push	{r3, r4, r5, lr}
 801780a:	4d07      	ldr	r5, [pc, #28]	@ (8017828 <_fstat_r+0x20>)
 801780c:	2300      	movs	r3, #0
 801780e:	4604      	mov	r4, r0
 8017810:	4608      	mov	r0, r1
 8017812:	4611      	mov	r1, r2
 8017814:	602b      	str	r3, [r5, #0]
 8017816:	f7ec fa89 	bl	8003d2c <_fstat>
 801781a:	1c43      	adds	r3, r0, #1
 801781c:	d102      	bne.n	8017824 <_fstat_r+0x1c>
 801781e:	682b      	ldr	r3, [r5, #0]
 8017820:	b103      	cbz	r3, 8017824 <_fstat_r+0x1c>
 8017822:	6023      	str	r3, [r4, #0]
 8017824:	bd38      	pop	{r3, r4, r5, pc}
 8017826:	bf00      	nop
 8017828:	24005bdc 	.word	0x24005bdc

0801782c <_isatty_r>:
 801782c:	b538      	push	{r3, r4, r5, lr}
 801782e:	4d06      	ldr	r5, [pc, #24]	@ (8017848 <_isatty_r+0x1c>)
 8017830:	2300      	movs	r3, #0
 8017832:	4604      	mov	r4, r0
 8017834:	4608      	mov	r0, r1
 8017836:	602b      	str	r3, [r5, #0]
 8017838:	f7ec fa88 	bl	8003d4c <_isatty>
 801783c:	1c43      	adds	r3, r0, #1
 801783e:	d102      	bne.n	8017846 <_isatty_r+0x1a>
 8017840:	682b      	ldr	r3, [r5, #0]
 8017842:	b103      	cbz	r3, 8017846 <_isatty_r+0x1a>
 8017844:	6023      	str	r3, [r4, #0]
 8017846:	bd38      	pop	{r3, r4, r5, pc}
 8017848:	24005bdc 	.word	0x24005bdc

0801784c <_sbrk_r>:
 801784c:	b538      	push	{r3, r4, r5, lr}
 801784e:	4d06      	ldr	r5, [pc, #24]	@ (8017868 <_sbrk_r+0x1c>)
 8017850:	2300      	movs	r3, #0
 8017852:	4604      	mov	r4, r0
 8017854:	4608      	mov	r0, r1
 8017856:	602b      	str	r3, [r5, #0]
 8017858:	f7ec fa90 	bl	8003d7c <_sbrk>
 801785c:	1c43      	adds	r3, r0, #1
 801785e:	d102      	bne.n	8017866 <_sbrk_r+0x1a>
 8017860:	682b      	ldr	r3, [r5, #0]
 8017862:	b103      	cbz	r3, 8017866 <_sbrk_r+0x1a>
 8017864:	6023      	str	r3, [r4, #0]
 8017866:	bd38      	pop	{r3, r4, r5, pc}
 8017868:	24005bdc 	.word	0x24005bdc

0801786c <__assert_func>:
 801786c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801786e:	4614      	mov	r4, r2
 8017870:	461a      	mov	r2, r3
 8017872:	4b09      	ldr	r3, [pc, #36]	@ (8017898 <__assert_func+0x2c>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	4605      	mov	r5, r0
 8017878:	68d8      	ldr	r0, [r3, #12]
 801787a:	b14c      	cbz	r4, 8017890 <__assert_func+0x24>
 801787c:	4b07      	ldr	r3, [pc, #28]	@ (801789c <__assert_func+0x30>)
 801787e:	9100      	str	r1, [sp, #0]
 8017880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017884:	4906      	ldr	r1, [pc, #24]	@ (80178a0 <__assert_func+0x34>)
 8017886:	462b      	mov	r3, r5
 8017888:	f000 f870 	bl	801796c <fiprintf>
 801788c:	f000 f880 	bl	8017990 <abort>
 8017890:	4b04      	ldr	r3, [pc, #16]	@ (80178a4 <__assert_func+0x38>)
 8017892:	461c      	mov	r4, r3
 8017894:	e7f3      	b.n	801787e <__assert_func+0x12>
 8017896:	bf00      	nop
 8017898:	240000b4 	.word	0x240000b4
 801789c:	0801edc5 	.word	0x0801edc5
 80178a0:	0801edd2 	.word	0x0801edd2
 80178a4:	0801ee00 	.word	0x0801ee00

080178a8 <_calloc_r>:
 80178a8:	b570      	push	{r4, r5, r6, lr}
 80178aa:	fba1 5402 	umull	r5, r4, r1, r2
 80178ae:	b934      	cbnz	r4, 80178be <_calloc_r+0x16>
 80178b0:	4629      	mov	r1, r5
 80178b2:	f7ff f923 	bl	8016afc <_malloc_r>
 80178b6:	4606      	mov	r6, r0
 80178b8:	b928      	cbnz	r0, 80178c6 <_calloc_r+0x1e>
 80178ba:	4630      	mov	r0, r6
 80178bc:	bd70      	pop	{r4, r5, r6, pc}
 80178be:	220c      	movs	r2, #12
 80178c0:	6002      	str	r2, [r0, #0]
 80178c2:	2600      	movs	r6, #0
 80178c4:	e7f9      	b.n	80178ba <_calloc_r+0x12>
 80178c6:	462a      	mov	r2, r5
 80178c8:	4621      	mov	r1, r4
 80178ca:	f7fe f9cf 	bl	8015c6c <memset>
 80178ce:	e7f4      	b.n	80178ba <_calloc_r+0x12>

080178d0 <__ascii_mbtowc>:
 80178d0:	b082      	sub	sp, #8
 80178d2:	b901      	cbnz	r1, 80178d6 <__ascii_mbtowc+0x6>
 80178d4:	a901      	add	r1, sp, #4
 80178d6:	b142      	cbz	r2, 80178ea <__ascii_mbtowc+0x1a>
 80178d8:	b14b      	cbz	r3, 80178ee <__ascii_mbtowc+0x1e>
 80178da:	7813      	ldrb	r3, [r2, #0]
 80178dc:	600b      	str	r3, [r1, #0]
 80178de:	7812      	ldrb	r2, [r2, #0]
 80178e0:	1e10      	subs	r0, r2, #0
 80178e2:	bf18      	it	ne
 80178e4:	2001      	movne	r0, #1
 80178e6:	b002      	add	sp, #8
 80178e8:	4770      	bx	lr
 80178ea:	4610      	mov	r0, r2
 80178ec:	e7fb      	b.n	80178e6 <__ascii_mbtowc+0x16>
 80178ee:	f06f 0001 	mvn.w	r0, #1
 80178f2:	e7f8      	b.n	80178e6 <__ascii_mbtowc+0x16>

080178f4 <_realloc_r>:
 80178f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178f8:	4607      	mov	r7, r0
 80178fa:	4614      	mov	r4, r2
 80178fc:	460d      	mov	r5, r1
 80178fe:	b921      	cbnz	r1, 801790a <_realloc_r+0x16>
 8017900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017904:	4611      	mov	r1, r2
 8017906:	f7ff b8f9 	b.w	8016afc <_malloc_r>
 801790a:	b92a      	cbnz	r2, 8017918 <_realloc_r+0x24>
 801790c:	f7ff f882 	bl	8016a14 <_free_r>
 8017910:	4625      	mov	r5, r4
 8017912:	4628      	mov	r0, r5
 8017914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017918:	f000 f841 	bl	801799e <_malloc_usable_size_r>
 801791c:	4284      	cmp	r4, r0
 801791e:	4606      	mov	r6, r0
 8017920:	d802      	bhi.n	8017928 <_realloc_r+0x34>
 8017922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017926:	d8f4      	bhi.n	8017912 <_realloc_r+0x1e>
 8017928:	4621      	mov	r1, r4
 801792a:	4638      	mov	r0, r7
 801792c:	f7ff f8e6 	bl	8016afc <_malloc_r>
 8017930:	4680      	mov	r8, r0
 8017932:	b908      	cbnz	r0, 8017938 <_realloc_r+0x44>
 8017934:	4645      	mov	r5, r8
 8017936:	e7ec      	b.n	8017912 <_realloc_r+0x1e>
 8017938:	42b4      	cmp	r4, r6
 801793a:	4622      	mov	r2, r4
 801793c:	4629      	mov	r1, r5
 801793e:	bf28      	it	cs
 8017940:	4632      	movcs	r2, r6
 8017942:	f7fe fa70 	bl	8015e26 <memcpy>
 8017946:	4629      	mov	r1, r5
 8017948:	4638      	mov	r0, r7
 801794a:	f7ff f863 	bl	8016a14 <_free_r>
 801794e:	e7f1      	b.n	8017934 <_realloc_r+0x40>

08017950 <__ascii_wctomb>:
 8017950:	4603      	mov	r3, r0
 8017952:	4608      	mov	r0, r1
 8017954:	b141      	cbz	r1, 8017968 <__ascii_wctomb+0x18>
 8017956:	2aff      	cmp	r2, #255	@ 0xff
 8017958:	d904      	bls.n	8017964 <__ascii_wctomb+0x14>
 801795a:	228a      	movs	r2, #138	@ 0x8a
 801795c:	601a      	str	r2, [r3, #0]
 801795e:	f04f 30ff 	mov.w	r0, #4294967295
 8017962:	4770      	bx	lr
 8017964:	700a      	strb	r2, [r1, #0]
 8017966:	2001      	movs	r0, #1
 8017968:	4770      	bx	lr
	...

0801796c <fiprintf>:
 801796c:	b40e      	push	{r1, r2, r3}
 801796e:	b503      	push	{r0, r1, lr}
 8017970:	4601      	mov	r1, r0
 8017972:	ab03      	add	r3, sp, #12
 8017974:	4805      	ldr	r0, [pc, #20]	@ (801798c <fiprintf+0x20>)
 8017976:	f853 2b04 	ldr.w	r2, [r3], #4
 801797a:	6800      	ldr	r0, [r0, #0]
 801797c:	9301      	str	r3, [sp, #4]
 801797e:	f000 f83f 	bl	8017a00 <_vfiprintf_r>
 8017982:	b002      	add	sp, #8
 8017984:	f85d eb04 	ldr.w	lr, [sp], #4
 8017988:	b003      	add	sp, #12
 801798a:	4770      	bx	lr
 801798c:	240000b4 	.word	0x240000b4

08017990 <abort>:
 8017990:	b508      	push	{r3, lr}
 8017992:	2006      	movs	r0, #6
 8017994:	f000 f974 	bl	8017c80 <raise>
 8017998:	2001      	movs	r0, #1
 801799a:	f7ec f977 	bl	8003c8c <_exit>

0801799e <_malloc_usable_size_r>:
 801799e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179a2:	1f18      	subs	r0, r3, #4
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	bfbc      	itt	lt
 80179a8:	580b      	ldrlt	r3, [r1, r0]
 80179aa:	18c0      	addlt	r0, r0, r3
 80179ac:	4770      	bx	lr

080179ae <__sfputc_r>:
 80179ae:	6893      	ldr	r3, [r2, #8]
 80179b0:	3b01      	subs	r3, #1
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	b410      	push	{r4}
 80179b6:	6093      	str	r3, [r2, #8]
 80179b8:	da08      	bge.n	80179cc <__sfputc_r+0x1e>
 80179ba:	6994      	ldr	r4, [r2, #24]
 80179bc:	42a3      	cmp	r3, r4
 80179be:	db01      	blt.n	80179c4 <__sfputc_r+0x16>
 80179c0:	290a      	cmp	r1, #10
 80179c2:	d103      	bne.n	80179cc <__sfputc_r+0x1e>
 80179c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179c8:	f7fe b8bb 	b.w	8015b42 <__swbuf_r>
 80179cc:	6813      	ldr	r3, [r2, #0]
 80179ce:	1c58      	adds	r0, r3, #1
 80179d0:	6010      	str	r0, [r2, #0]
 80179d2:	7019      	strb	r1, [r3, #0]
 80179d4:	4608      	mov	r0, r1
 80179d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179da:	4770      	bx	lr

080179dc <__sfputs_r>:
 80179dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179de:	4606      	mov	r6, r0
 80179e0:	460f      	mov	r7, r1
 80179e2:	4614      	mov	r4, r2
 80179e4:	18d5      	adds	r5, r2, r3
 80179e6:	42ac      	cmp	r4, r5
 80179e8:	d101      	bne.n	80179ee <__sfputs_r+0x12>
 80179ea:	2000      	movs	r0, #0
 80179ec:	e007      	b.n	80179fe <__sfputs_r+0x22>
 80179ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179f2:	463a      	mov	r2, r7
 80179f4:	4630      	mov	r0, r6
 80179f6:	f7ff ffda 	bl	80179ae <__sfputc_r>
 80179fa:	1c43      	adds	r3, r0, #1
 80179fc:	d1f3      	bne.n	80179e6 <__sfputs_r+0xa>
 80179fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017a00 <_vfiprintf_r>:
 8017a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a04:	460d      	mov	r5, r1
 8017a06:	b09d      	sub	sp, #116	@ 0x74
 8017a08:	4614      	mov	r4, r2
 8017a0a:	4698      	mov	r8, r3
 8017a0c:	4606      	mov	r6, r0
 8017a0e:	b118      	cbz	r0, 8017a18 <_vfiprintf_r+0x18>
 8017a10:	6a03      	ldr	r3, [r0, #32]
 8017a12:	b90b      	cbnz	r3, 8017a18 <_vfiprintf_r+0x18>
 8017a14:	f7fd fffa 	bl	8015a0c <__sinit>
 8017a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a1a:	07d9      	lsls	r1, r3, #31
 8017a1c:	d405      	bmi.n	8017a2a <_vfiprintf_r+0x2a>
 8017a1e:	89ab      	ldrh	r3, [r5, #12]
 8017a20:	059a      	lsls	r2, r3, #22
 8017a22:	d402      	bmi.n	8017a2a <_vfiprintf_r+0x2a>
 8017a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a26:	f7fe f9fc 	bl	8015e22 <__retarget_lock_acquire_recursive>
 8017a2a:	89ab      	ldrh	r3, [r5, #12]
 8017a2c:	071b      	lsls	r3, r3, #28
 8017a2e:	d501      	bpl.n	8017a34 <_vfiprintf_r+0x34>
 8017a30:	692b      	ldr	r3, [r5, #16]
 8017a32:	b99b      	cbnz	r3, 8017a5c <_vfiprintf_r+0x5c>
 8017a34:	4629      	mov	r1, r5
 8017a36:	4630      	mov	r0, r6
 8017a38:	f7fe f8c2 	bl	8015bc0 <__swsetup_r>
 8017a3c:	b170      	cbz	r0, 8017a5c <_vfiprintf_r+0x5c>
 8017a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a40:	07dc      	lsls	r4, r3, #31
 8017a42:	d504      	bpl.n	8017a4e <_vfiprintf_r+0x4e>
 8017a44:	f04f 30ff 	mov.w	r0, #4294967295
 8017a48:	b01d      	add	sp, #116	@ 0x74
 8017a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4e:	89ab      	ldrh	r3, [r5, #12]
 8017a50:	0598      	lsls	r0, r3, #22
 8017a52:	d4f7      	bmi.n	8017a44 <_vfiprintf_r+0x44>
 8017a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a56:	f7fe f9e5 	bl	8015e24 <__retarget_lock_release_recursive>
 8017a5a:	e7f3      	b.n	8017a44 <_vfiprintf_r+0x44>
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a60:	2320      	movs	r3, #32
 8017a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a6a:	2330      	movs	r3, #48	@ 0x30
 8017a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017c1c <_vfiprintf_r+0x21c>
 8017a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017a74:	f04f 0901 	mov.w	r9, #1
 8017a78:	4623      	mov	r3, r4
 8017a7a:	469a      	mov	sl, r3
 8017a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a80:	b10a      	cbz	r2, 8017a86 <_vfiprintf_r+0x86>
 8017a82:	2a25      	cmp	r2, #37	@ 0x25
 8017a84:	d1f9      	bne.n	8017a7a <_vfiprintf_r+0x7a>
 8017a86:	ebba 0b04 	subs.w	fp, sl, r4
 8017a8a:	d00b      	beq.n	8017aa4 <_vfiprintf_r+0xa4>
 8017a8c:	465b      	mov	r3, fp
 8017a8e:	4622      	mov	r2, r4
 8017a90:	4629      	mov	r1, r5
 8017a92:	4630      	mov	r0, r6
 8017a94:	f7ff ffa2 	bl	80179dc <__sfputs_r>
 8017a98:	3001      	adds	r0, #1
 8017a9a:	f000 80a7 	beq.w	8017bec <_vfiprintf_r+0x1ec>
 8017a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017aa0:	445a      	add	r2, fp
 8017aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	f000 809f 	beq.w	8017bec <_vfiprintf_r+0x1ec>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ab8:	f10a 0a01 	add.w	sl, sl, #1
 8017abc:	9304      	str	r3, [sp, #16]
 8017abe:	9307      	str	r3, [sp, #28]
 8017ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ac6:	4654      	mov	r4, sl
 8017ac8:	2205      	movs	r2, #5
 8017aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ace:	4853      	ldr	r0, [pc, #332]	@ (8017c1c <_vfiprintf_r+0x21c>)
 8017ad0:	f7e8 fc06 	bl	80002e0 <memchr>
 8017ad4:	9a04      	ldr	r2, [sp, #16]
 8017ad6:	b9d8      	cbnz	r0, 8017b10 <_vfiprintf_r+0x110>
 8017ad8:	06d1      	lsls	r1, r2, #27
 8017ada:	bf44      	itt	mi
 8017adc:	2320      	movmi	r3, #32
 8017ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ae2:	0713      	lsls	r3, r2, #28
 8017ae4:	bf44      	itt	mi
 8017ae6:	232b      	movmi	r3, #43	@ 0x2b
 8017ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017aec:	f89a 3000 	ldrb.w	r3, [sl]
 8017af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017af2:	d015      	beq.n	8017b20 <_vfiprintf_r+0x120>
 8017af4:	9a07      	ldr	r2, [sp, #28]
 8017af6:	4654      	mov	r4, sl
 8017af8:	2000      	movs	r0, #0
 8017afa:	f04f 0c0a 	mov.w	ip, #10
 8017afe:	4621      	mov	r1, r4
 8017b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b04:	3b30      	subs	r3, #48	@ 0x30
 8017b06:	2b09      	cmp	r3, #9
 8017b08:	d94b      	bls.n	8017ba2 <_vfiprintf_r+0x1a2>
 8017b0a:	b1b0      	cbz	r0, 8017b3a <_vfiprintf_r+0x13a>
 8017b0c:	9207      	str	r2, [sp, #28]
 8017b0e:	e014      	b.n	8017b3a <_vfiprintf_r+0x13a>
 8017b10:	eba0 0308 	sub.w	r3, r0, r8
 8017b14:	fa09 f303 	lsl.w	r3, r9, r3
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	9304      	str	r3, [sp, #16]
 8017b1c:	46a2      	mov	sl, r4
 8017b1e:	e7d2      	b.n	8017ac6 <_vfiprintf_r+0xc6>
 8017b20:	9b03      	ldr	r3, [sp, #12]
 8017b22:	1d19      	adds	r1, r3, #4
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	9103      	str	r1, [sp, #12]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	bfbb      	ittet	lt
 8017b2c:	425b      	neglt	r3, r3
 8017b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8017b32:	9307      	strge	r3, [sp, #28]
 8017b34:	9307      	strlt	r3, [sp, #28]
 8017b36:	bfb8      	it	lt
 8017b38:	9204      	strlt	r2, [sp, #16]
 8017b3a:	7823      	ldrb	r3, [r4, #0]
 8017b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b3e:	d10a      	bne.n	8017b56 <_vfiprintf_r+0x156>
 8017b40:	7863      	ldrb	r3, [r4, #1]
 8017b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b44:	d132      	bne.n	8017bac <_vfiprintf_r+0x1ac>
 8017b46:	9b03      	ldr	r3, [sp, #12]
 8017b48:	1d1a      	adds	r2, r3, #4
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	9203      	str	r2, [sp, #12]
 8017b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b52:	3402      	adds	r4, #2
 8017b54:	9305      	str	r3, [sp, #20]
 8017b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017c2c <_vfiprintf_r+0x22c>
 8017b5a:	7821      	ldrb	r1, [r4, #0]
 8017b5c:	2203      	movs	r2, #3
 8017b5e:	4650      	mov	r0, sl
 8017b60:	f7e8 fbbe 	bl	80002e0 <memchr>
 8017b64:	b138      	cbz	r0, 8017b76 <_vfiprintf_r+0x176>
 8017b66:	9b04      	ldr	r3, [sp, #16]
 8017b68:	eba0 000a 	sub.w	r0, r0, sl
 8017b6c:	2240      	movs	r2, #64	@ 0x40
 8017b6e:	4082      	lsls	r2, r0
 8017b70:	4313      	orrs	r3, r2
 8017b72:	3401      	adds	r4, #1
 8017b74:	9304      	str	r3, [sp, #16]
 8017b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b7a:	4829      	ldr	r0, [pc, #164]	@ (8017c20 <_vfiprintf_r+0x220>)
 8017b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017b80:	2206      	movs	r2, #6
 8017b82:	f7e8 fbad 	bl	80002e0 <memchr>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d03f      	beq.n	8017c0a <_vfiprintf_r+0x20a>
 8017b8a:	4b26      	ldr	r3, [pc, #152]	@ (8017c24 <_vfiprintf_r+0x224>)
 8017b8c:	bb1b      	cbnz	r3, 8017bd6 <_vfiprintf_r+0x1d6>
 8017b8e:	9b03      	ldr	r3, [sp, #12]
 8017b90:	3307      	adds	r3, #7
 8017b92:	f023 0307 	bic.w	r3, r3, #7
 8017b96:	3308      	adds	r3, #8
 8017b98:	9303      	str	r3, [sp, #12]
 8017b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b9c:	443b      	add	r3, r7
 8017b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ba0:	e76a      	b.n	8017a78 <_vfiprintf_r+0x78>
 8017ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ba6:	460c      	mov	r4, r1
 8017ba8:	2001      	movs	r0, #1
 8017baa:	e7a8      	b.n	8017afe <_vfiprintf_r+0xfe>
 8017bac:	2300      	movs	r3, #0
 8017bae:	3401      	adds	r4, #1
 8017bb0:	9305      	str	r3, [sp, #20]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	f04f 0c0a 	mov.w	ip, #10
 8017bb8:	4620      	mov	r0, r4
 8017bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bbe:	3a30      	subs	r2, #48	@ 0x30
 8017bc0:	2a09      	cmp	r2, #9
 8017bc2:	d903      	bls.n	8017bcc <_vfiprintf_r+0x1cc>
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d0c6      	beq.n	8017b56 <_vfiprintf_r+0x156>
 8017bc8:	9105      	str	r1, [sp, #20]
 8017bca:	e7c4      	b.n	8017b56 <_vfiprintf_r+0x156>
 8017bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bd0:	4604      	mov	r4, r0
 8017bd2:	2301      	movs	r3, #1
 8017bd4:	e7f0      	b.n	8017bb8 <_vfiprintf_r+0x1b8>
 8017bd6:	ab03      	add	r3, sp, #12
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	462a      	mov	r2, r5
 8017bdc:	4b12      	ldr	r3, [pc, #72]	@ (8017c28 <_vfiprintf_r+0x228>)
 8017bde:	a904      	add	r1, sp, #16
 8017be0:	4630      	mov	r0, r6
 8017be2:	f7fd fae1 	bl	80151a8 <_printf_float>
 8017be6:	4607      	mov	r7, r0
 8017be8:	1c78      	adds	r0, r7, #1
 8017bea:	d1d6      	bne.n	8017b9a <_vfiprintf_r+0x19a>
 8017bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017bee:	07d9      	lsls	r1, r3, #31
 8017bf0:	d405      	bmi.n	8017bfe <_vfiprintf_r+0x1fe>
 8017bf2:	89ab      	ldrh	r3, [r5, #12]
 8017bf4:	059a      	lsls	r2, r3, #22
 8017bf6:	d402      	bmi.n	8017bfe <_vfiprintf_r+0x1fe>
 8017bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017bfa:	f7fe f913 	bl	8015e24 <__retarget_lock_release_recursive>
 8017bfe:	89ab      	ldrh	r3, [r5, #12]
 8017c00:	065b      	lsls	r3, r3, #25
 8017c02:	f53f af1f 	bmi.w	8017a44 <_vfiprintf_r+0x44>
 8017c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c08:	e71e      	b.n	8017a48 <_vfiprintf_r+0x48>
 8017c0a:	ab03      	add	r3, sp, #12
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	462a      	mov	r2, r5
 8017c10:	4b05      	ldr	r3, [pc, #20]	@ (8017c28 <_vfiprintf_r+0x228>)
 8017c12:	a904      	add	r1, sp, #16
 8017c14:	4630      	mov	r0, r6
 8017c16:	f7fd fd4f 	bl	80156b8 <_printf_i>
 8017c1a:	e7e4      	b.n	8017be6 <_vfiprintf_r+0x1e6>
 8017c1c:	0801edaa 	.word	0x0801edaa
 8017c20:	0801edb4 	.word	0x0801edb4
 8017c24:	080151a9 	.word	0x080151a9
 8017c28:	080179dd 	.word	0x080179dd
 8017c2c:	0801edb0 	.word	0x0801edb0

08017c30 <_raise_r>:
 8017c30:	291f      	cmp	r1, #31
 8017c32:	b538      	push	{r3, r4, r5, lr}
 8017c34:	4605      	mov	r5, r0
 8017c36:	460c      	mov	r4, r1
 8017c38:	d904      	bls.n	8017c44 <_raise_r+0x14>
 8017c3a:	2316      	movs	r3, #22
 8017c3c:	6003      	str	r3, [r0, #0]
 8017c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c42:	bd38      	pop	{r3, r4, r5, pc}
 8017c44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017c46:	b112      	cbz	r2, 8017c4e <_raise_r+0x1e>
 8017c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c4c:	b94b      	cbnz	r3, 8017c62 <_raise_r+0x32>
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f000 f830 	bl	8017cb4 <_getpid_r>
 8017c54:	4622      	mov	r2, r4
 8017c56:	4601      	mov	r1, r0
 8017c58:	4628      	mov	r0, r5
 8017c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c5e:	f000 b817 	b.w	8017c90 <_kill_r>
 8017c62:	2b01      	cmp	r3, #1
 8017c64:	d00a      	beq.n	8017c7c <_raise_r+0x4c>
 8017c66:	1c59      	adds	r1, r3, #1
 8017c68:	d103      	bne.n	8017c72 <_raise_r+0x42>
 8017c6a:	2316      	movs	r3, #22
 8017c6c:	6003      	str	r3, [r0, #0]
 8017c6e:	2001      	movs	r0, #1
 8017c70:	e7e7      	b.n	8017c42 <_raise_r+0x12>
 8017c72:	2100      	movs	r1, #0
 8017c74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017c78:	4620      	mov	r0, r4
 8017c7a:	4798      	blx	r3
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	e7e0      	b.n	8017c42 <_raise_r+0x12>

08017c80 <raise>:
 8017c80:	4b02      	ldr	r3, [pc, #8]	@ (8017c8c <raise+0xc>)
 8017c82:	4601      	mov	r1, r0
 8017c84:	6818      	ldr	r0, [r3, #0]
 8017c86:	f7ff bfd3 	b.w	8017c30 <_raise_r>
 8017c8a:	bf00      	nop
 8017c8c:	240000b4 	.word	0x240000b4

08017c90 <_kill_r>:
 8017c90:	b538      	push	{r3, r4, r5, lr}
 8017c92:	4d07      	ldr	r5, [pc, #28]	@ (8017cb0 <_kill_r+0x20>)
 8017c94:	2300      	movs	r3, #0
 8017c96:	4604      	mov	r4, r0
 8017c98:	4608      	mov	r0, r1
 8017c9a:	4611      	mov	r1, r2
 8017c9c:	602b      	str	r3, [r5, #0]
 8017c9e:	f7eb ffe5 	bl	8003c6c <_kill>
 8017ca2:	1c43      	adds	r3, r0, #1
 8017ca4:	d102      	bne.n	8017cac <_kill_r+0x1c>
 8017ca6:	682b      	ldr	r3, [r5, #0]
 8017ca8:	b103      	cbz	r3, 8017cac <_kill_r+0x1c>
 8017caa:	6023      	str	r3, [r4, #0]
 8017cac:	bd38      	pop	{r3, r4, r5, pc}
 8017cae:	bf00      	nop
 8017cb0:	24005bdc 	.word	0x24005bdc

08017cb4 <_getpid_r>:
 8017cb4:	f7eb bfd2 	b.w	8003c5c <_getpid>

08017cb8 <_init>:
 8017cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cba:	bf00      	nop
 8017cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cbe:	bc08      	pop	{r3}
 8017cc0:	469e      	mov	lr, r3
 8017cc2:	4770      	bx	lr

08017cc4 <_fini>:
 8017cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc6:	bf00      	nop
 8017cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cca:	bc08      	pop	{r3}
 8017ccc:	469e      	mov	lr, r3
 8017cce:	4770      	bx	lr
