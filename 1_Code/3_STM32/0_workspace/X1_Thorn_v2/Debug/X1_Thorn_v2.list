
X1_Thorn_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e78  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08009118  08009118  0000a118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080094c4  080094c4  0000a4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080094cc  080094cc  0000a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080094d0  080094d0  0000a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080094d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000041c  240001d8  080096ac  0000b1d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240005f4  080096ac  0000b5f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e32e  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004be8  00000000  00000000  00039534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00019f44  00000000  00000000  0003e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001670  00000000  00000000  00058060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002905  00000000  00000000  000596d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000059d1  00000000  00000000  0005bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034cfa  00000000  00000000  000619a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f45a  00000000  00000000  000966a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00215afa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005034  00000000  00000000  00215b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  0021ab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009100 	.word	0x08009100

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009100 	.word	0x08009100

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <HAL_UART_RxCpltCallback>:
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <HAL_UART_RxCpltCallback+0x90>)
 80006be:	4298      	cmp	r0, r3
 80006c0:	d000      	beq.n	80006c4 <HAL_UART_RxCpltCallback+0x8>
 80006c2:	4770      	bx	lr
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);

        // 2) State machine
        switch (frame_state)
 80006c4:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <HAL_UART_RxCpltCallback+0x94>)
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 80006c6:	6801      	ldr	r1, [r0, #0]
 80006c8:	2008      	movs	r0, #8
        switch (frame_state)
 80006ca:	7813      	ldrb	r3, [r2, #0]
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 80006cc:	6208      	str	r0, [r1, #32]
        switch (frame_state)
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d02b      	beq.n	800072a <HAL_UART_RxCpltCallback+0x6e>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d009      	beq.n	80006ea <HAL_UART_RxCpltCallback+0x2e>
 80006d6:	b91b      	cbnz	r3, 80006e0 <HAL_UART_RxCpltCallback+0x24>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <HAL_UART_RxCpltCallback+0x98>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b55      	cmp	r3, #85	@ 0x55
 80006de:	d031      	beq.n	8000744 <HAL_UART_RxCpltCallback+0x88>
                }
                break;
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	491c      	ldr	r1, [pc, #112]	@ (8000754 <HAL_UART_RxCpltCallback+0x98>)
 80006e4:	4819      	ldr	r0, [pc, #100]	@ (800074c <HAL_UART_RxCpltCallback+0x90>)
 80006e6:	f004 bf9f 	b.w	8005628 <HAL_UART_Receive_IT>
{
 80006ea:	b410      	push	{r4}
                collect_buf[collect_count++] = rx_byte;
 80006ec:	481a      	ldr	r0, [pc, #104]	@ (8000758 <HAL_UART_RxCpltCallback+0x9c>)
 80006ee:	4c19      	ldr	r4, [pc, #100]	@ (8000754 <HAL_UART_RxCpltCallback+0x98>)
 80006f0:	7803      	ldrb	r3, [r0, #0]
 80006f2:	491a      	ldr	r1, [pc, #104]	@ (800075c <HAL_UART_RxCpltCallback+0xa0>)
 80006f4:	7824      	ldrb	r4, [r4, #0]
 80006f6:	54cc      	strb	r4, [r1, r3]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2db      	uxtb	r3, r3
                if (collect_count >= sizeof(collect_buf))
 80006fc:	2b13      	cmp	r3, #19
                collect_buf[collect_count++] = rx_byte;
 80006fe:	7003      	strb	r3, [r0, #0]
                if (collect_count >= sizeof(collect_buf))
 8000700:	d90c      	bls.n	800071c <HAL_UART_RxCpltCallback+0x60>
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000702:	468c      	mov	ip, r1
                    uart_data_ready = true;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <HAL_UART_RxCpltCallback+0xa4>)
 8000706:	2101      	movs	r1, #1
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000708:	4c16      	ldr	r4, [pc, #88]	@ (8000764 <HAL_UART_RxCpltCallback+0xa8>)
                    uart_data_ready = true;
 800070a:	7019      	strb	r1, [r3, #0]
                    frame_state = SYNC_WAIT_1;
 800070c:	2300      	movs	r3, #0
 800070e:	7013      	strb	r3, [r2, #0]
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000710:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	f8dc 3000 	ldr.w	r3, [ip]
 800071a:	6023      	str	r3, [r4, #0]
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	490d      	ldr	r1, [pc, #52]	@ (8000754 <HAL_UART_RxCpltCallback+0x98>)
 8000720:	480a      	ldr	r0, [pc, #40]	@ (800074c <HAL_UART_RxCpltCallback+0x90>)
    }
}
 8000722:	f85d 4b04 	ldr.w	r4, [sp], #4
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000726:	f004 bf7f 	b.w	8005628 <HAL_UART_Receive_IT>
                if (rx_byte == 0xAA)
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_UART_RxCpltCallback+0x98>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2baa      	cmp	r3, #170	@ 0xaa
 8000730:	d002      	beq.n	8000738 <HAL_UART_RxCpltCallback+0x7c>
                    frame_state = SYNC_WAIT_1; // false alarm, restart
 8000732:	2300      	movs	r3, #0
 8000734:	7013      	strb	r3, [r2, #0]
 8000736:	e7d3      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x24>
                    frame_state = SYNC_COLLECT;
 8000738:	2002      	movs	r0, #2
                    collect_count = 0;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <HAL_UART_RxCpltCallback+0x9c>)
 800073c:	2100      	movs	r1, #0
                    frame_state = SYNC_COLLECT;
 800073e:	7010      	strb	r0, [r2, #0]
                    collect_count = 0;
 8000740:	7019      	strb	r1, [r3, #0]
 8000742:	e7cd      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x24>
                    frame_state = SYNC_WAIT_2;
 8000744:	2301      	movs	r3, #1
 8000746:	7013      	strb	r3, [r2, #0]
 8000748:	e7ca      	b.n	80006e0 <HAL_UART_RxCpltCallback+0x24>
 800074a:	bf00      	nop
 800074c:	24000410 	.word	0x24000410
 8000750:	24000208 	.word	0x24000208
 8000754:	2400020a 	.word	0x2400020a
 8000758:	24000209 	.word	0x24000209
 800075c:	240001f4 	.word	0x240001f4
 8000760:	24000220 	.word	0x24000220
 8000764:	2400020c 	.word	0x2400020c

08000768 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 8000768:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <HAL_UART_ErrorCallback+0x1c>)
 800076a:	4290      	cmp	r0, r2
 800076c:	d000      	beq.n	8000770 <HAL_UART_ErrorCallback+0x8>
 800076e:	4770      	bx	lr
{
 8000770:	b410      	push	{r4}
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8000772:	6803      	ldr	r3, [r0, #0]
 8000774:	2408      	movs	r4, #8
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	4903      	ldr	r1, [pc, #12]	@ (8000788 <HAL_UART_ErrorCallback+0x20>)
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 800077a:	621c      	str	r4, [r3, #32]
    }
}
 800077c:	f85d 4b04 	ldr.w	r4, [sp], #4
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000780:	f004 bf52 	b.w	8005628 <HAL_UART_Receive_IT>
 8000784:	24000410 	.word	0x24000410
 8000788:	2400020a 	.word	0x2400020a

0800078c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800078c:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800078e:	481d      	ldr	r0, [pc, #116]	@ (8000804 <MX_ADC3_Init+0x78>)
{
 8000790:	b088      	sub	sp, #32
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	2300      	movs	r3, #0
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8000794:	2201      	movs	r2, #1
  hadc3.Instance = ADC3;
 8000796:	4c1c      	ldr	r4, [pc, #112]	@ (8000808 <MX_ADC3_Init+0x7c>)
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	2104      	movs	r1, #4
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	9301      	str	r3, [sp, #4]
  hadc3.Instance = ADC3;
 800079c:	6004      	str	r4, [r0, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	6101      	str	r1, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007a0:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 80007a2:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007a6:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007a8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80007ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b6:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007be:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80007c2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007c6:	f001 f8c3 	bl	8001950 <HAL_ADC_Init>
 80007ca:	b9a0      	cbnz	r0, 80007f6 <MX_ADC3_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007cc:	480f      	ldr	r0, [pc, #60]	@ (800080c <MX_ADC3_Init+0x80>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ce:	2206      	movs	r2, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007d0:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d2:	f240 74ff 	movw	r4, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d6:	a901      	add	r1, sp, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 80007d8:	f88d 301d 	strb.w	r3, [sp, #29]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007dc:	e9cd 0201 	strd	r0, r2, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e0:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_ADC3_Init+0x78>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  sConfig.Offset = 0;
 80007e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ec:	f000 fdf2 	bl	80013d4 <HAL_ADC_ConfigChannel>
 80007f0:	b920      	cbnz	r0, 80007fc <MX_ADC3_Init+0x70>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f2:	b008      	add	sp, #32
 80007f4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80007f6:	f000 f9c1 	bl	8000b7c <Error_Handler>
 80007fa:	e7e7      	b.n	80007cc <MX_ADC3_Init+0x40>
    Error_Handler();
 80007fc:	f000 f9be 	bl	8000b7c <Error_Handler>
}
 8000800:	b008      	add	sp, #32
 8000802:	bd10      	pop	{r4, pc}
 8000804:	24000224 	.word	0x24000224
 8000808:	58026000 	.word	0x58026000
 800080c:	cb840000 	.word	0xcb840000

08000810 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b510      	push	{r4, lr}
 8000812:	b0b2      	sub	sp, #200	@ 0xc8
 8000814:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000816:	22c0      	movs	r2, #192	@ 0xc0
 8000818:	2100      	movs	r1, #0
 800081a:	a802      	add	r0, sp, #8
 800081c:	f006 fff6 	bl	800780c <memset>
  if(adcHandle->Instance==ADC3)
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <HAL_ADC_MspInit+0x80>)
 8000822:	6822      	ldr	r2, [r4, #0]
 8000824:	429a      	cmp	r2, r3
 8000826:	d001      	beq.n	800082c <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000828:	b032      	add	sp, #200	@ 0xc8
 800082a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082c:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000880 <HAL_ADC_MspInit+0x70>
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8000830:	2306      	movs	r3, #6
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8000832:	2128      	movs	r1, #40	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000834:	2201      	movs	r2, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8000838:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800083a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 800083c:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800083e:	ed8d 7b02 	vstr	d7, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000842:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8000888 <HAL_ADC_MspInit+0x78>
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000846:	e9cd 1305 	strd	r1, r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800084a:	2320      	movs	r3, #32
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800084c:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000850:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000852:	f002 fe21 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	b970      	cbnz	r0, 8000876 <HAL_ADC_MspInit+0x66>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_ADC_MspInit+0x84>)
 800085a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800085e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000862:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	9b01      	ldr	r3, [sp, #4]
}
 8000872:	b032      	add	sp, #200	@ 0xc8
 8000874:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000876:	f000 f981 	bl	8000b7c <Error_Handler>
 800087a:	e7ed      	b.n	8000858 <HAL_ADC_MspInit+0x48>
 800087c:	f3af 8000 	nop.w
 8000880:	00080000 	.word	0x00080000
 8000884:	00000000 	.word	0x00000000
 8000888:	00000002 	.word	0x00000002
 800088c:	00000080 	.word	0x00000080
 8000890:	58026000 	.word	0x58026000
 8000894:	58024400 	.word	0x58024400

08000898 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000898:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	4b39      	ldr	r3, [pc, #228]	@ (8000980 <MX_GPIO_Init+0xe8>)
{
 800089c:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 80008a0:	4d38      	ldr	r5, [pc, #224]	@ (8000984 <MX_GPIO_Init+0xec>)
 80008a2:	2108      	movs	r1, #8
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2601      	movs	r6, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 80008a8:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80008ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008b6:	f042 0210 	orr.w	r2, r2, #16
 80008ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80008be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008c2:	f002 0210 	and.w	r2, r2, #16
 80008c6:	9201      	str	r2, [sp, #4]
 80008c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008ce:	f042 0204 	orr.w	r2, r2, #4
 80008d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80008d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008da:	f002 0204 	and.w	r2, r2, #4
 80008de:	9202      	str	r2, [sp, #8]
 80008e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008ea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80008ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008f2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80008f6:	9203      	str	r2, [sp, #12]
 80008f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008fe:	f042 0202 	orr.w	r2, r2, #2
 8000902:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000906:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800090a:	f002 0202 	and.w	r2, r2, #2
 800090e:	9204      	str	r2, [sp, #16]
 8000910:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000916:	f042 0201 	orr.w	r2, r2, #1
 800091a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800091e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	9305      	str	r3, [sp, #20]
 800092a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800092c:	f001 fe14 	bl	8002558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	4628      	mov	r0, r5
 8000934:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000938:	f001 fe0e 	bl	8002558 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = E3_Pin;
 800093c:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 800093e:	a906      	add	r1, sp, #24
 8000940:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = E3_Pin;
 8000942:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 800094a:	f001 fbff 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800094e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000952:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000954:	a906      	add	r1, sp, #24
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_GPIO_Init+0xf0>)
  GPIO_InitStruct.Pin = KEY_Pin;
 8000958:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095c:	2302      	movs	r3, #2
 800095e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000960:	f001 fbf4 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8000964:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	a906      	add	r1, sp, #24
 800096a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800096c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	f001 fbe9 	bl	800214c <HAL_GPIO_Init>

}
 800097a:	b00c      	add	sp, #48	@ 0x30
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	bf00      	nop
 8000980:	58024400 	.word	0x58024400
 8000984:	58021000 	.word	0x58021000
 8000988:	58020800 	.word	0x58020800

0800098c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800098c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800098e:	4817      	ldr	r0, [pc, #92]	@ (80009ec <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x307075B1;
 8000990:	2300      	movs	r3, #0
 8000992:	4917      	ldr	r1, [pc, #92]	@ (80009f0 <MX_I2C2_Init+0x64>)
 8000994:	2401      	movs	r4, #1
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_I2C2_Init+0x68>)
 8000998:	6203      	str	r3, [r0, #32]
 800099a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 800099e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009a2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a6:	f001 fddb 	bl	8002560 <HAL_I2C_Init>
 80009aa:	b950      	cbnz	r0, 80009c2 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <MX_I2C2_Init+0x60>)
 80009b0:	f001 fe30 	bl	8002614 <HAL_I2CEx_ConfigAnalogFilter>
 80009b4:	b968      	cbnz	r0, 80009d2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_I2C2_Init+0x60>)
 80009ba:	f001 fe55 	bl	8002668 <HAL_I2CEx_ConfigDigitalFilter>
 80009be:	b980      	cbnz	r0, 80009e2 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009c2:	f000 f8db 	bl	8000b7c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_I2C2_Init+0x60>)
 80009ca:	f001 fe23 	bl	8002614 <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d0f1      	beq.n	80009b6 <MX_I2C2_Init+0x2a>
    Error_Handler();
 80009d2:	f000 f8d3 	bl	8000b7c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_I2C2_Init+0x60>)
 80009da:	f001 fe45 	bl	8002668 <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d0ee      	beq.n	80009c0 <MX_I2C2_Init+0x34>
}
 80009e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80009e6:	f000 b8c9 	b.w	8000b7c <Error_Handler>
 80009ea:	bf00      	nop
 80009ec:	24000288 	.word	0x24000288
 80009f0:	40005800 	.word	0x40005800
 80009f4:	307075b1 	.word	0x307075b1

080009f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f8:	b510      	push	{r4, lr}
 80009fa:	b0b8      	sub	sp, #224	@ 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	2100      	movs	r1, #0
{
 80009fe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	22c0      	movs	r2, #192	@ 0xc0
 8000a02:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	9106      	str	r1, [sp, #24]
 8000a06:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000a0a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0e:	f006 fefd 	bl	800780c <memset>
  if(i2cHandle->Instance==I2C2)
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_I2C_MspInit+0x98>)
 8000a14:	6822      	ldr	r2, [r4, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d001      	beq.n	8000a1e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a1a:	b038      	add	sp, #224	@ 0xe0
 8000a1c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a1e:	2208      	movs	r2, #8
 8000a20:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a22:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a24:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a28:	f002 fd36 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	bb40      	cbnz	r0, 8000a80 <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4c19      	ldr	r4, [pc, #100]	@ (8000a94 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a30:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	a902      	add	r1, sp, #8
 8000a34:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000a42:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a46:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a48:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a4e:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8000a88 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a56:	2302      	movs	r3, #2
 8000a58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f001 fb74 	bl	800214c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a64:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8000a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a6c:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8000a70:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8000a74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	9b01      	ldr	r3, [sp, #4]
}
 8000a7c:	b038      	add	sp, #224	@ 0xe0
 8000a7e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000a80:	f000 f87c 	bl	8000b7c <Error_Handler>
 8000a84:	e7d3      	b.n	8000a2e <HAL_I2C_MspInit+0x36>
 8000a86:	bf00      	nop
 8000a88:	00000c00 	.word	0x00000c00
 8000a8c:	00000012 	.word	0x00000012
 8000a90:	40005800 	.word	0x40005800
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020400 	.word	0x58020400

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa0:	224c      	movs	r2, #76	@ 0x4c
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	a80a      	add	r0, sp, #40	@ 0x28
 8000aa6:	f006 feb1 	bl	800780c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	a802      	add	r0, sp, #8
 8000ab0:	f006 feac 	bl	800780c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f001 fe03 	bl	80026c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aba:	4a24      	ldr	r2, [pc, #144]	@ (8000b4c <SystemClock_Config+0xb0>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <SystemClock_Config+0xb4>)
 8000ac0:	9101      	str	r1, [sp, #4]
 8000ac2:	6991      	ldr	r1, [r2, #24]
 8000ac4:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000ac8:	6191      	str	r1, [r2, #24]
 8000aca:	6991      	ldr	r1, [r2, #24]
 8000acc:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8000ad0:	9101      	str	r1, [sp, #4]
 8000ad2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ad4:	f041 0101 	orr.w	r1, r1, #1
 8000ad8:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae4:	6993      	ldr	r3, [r2, #24]
 8000ae6:	049b      	lsls	r3, r3, #18
 8000ae8:	d5fc      	bpl.n	8000ae4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aea:	2001      	movs	r0, #1
 8000aec:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af2:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000af4:	2408      	movs	r4, #8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000af8:	941a      	str	r4, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afa:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000afe:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b02:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b04:	21c0      	movs	r1, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b06:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0a:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b0e:	9116      	str	r1, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b10:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f001 fe6a 	bl	80027ec <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b108      	cbz	r0, 8000b20 <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	213f      	movs	r1, #63	@ 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b22:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2103      	movs	r1, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b30:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	9103      	str	r1, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b34:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b36:	e9cd 4205 	strd	r4, r2, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b3e:	f002 f9d1 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000b42:	b108      	cbz	r0, 8000b48 <SystemClock_Config+0xac>
 8000b44:	b672      	cpsid	i
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <SystemClock_Config+0xaa>
}
 8000b48:	b01e      	add	sp, #120	@ 0x78
 8000b4a:	bd10      	pop	{r4, pc}
 8000b4c:	58024800 	.word	0x58024800
 8000b50:	58000400 	.word	0x58000400

08000b54 <main>:
{
 8000b54:	b508      	push	{r3, lr}
  HAL_Init();
 8000b56:	f000 fbe3 	bl	8001320 <HAL_Init>
  SystemClock_Config();
 8000b5a:	f7ff ff9f 	bl	8000a9c <SystemClock_Config>
  MX_GPIO_Init();
 8000b5e:	f7ff fe9b 	bl	8000898 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000b62:	f000 f80d 	bl	8000b80 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b66:	f000 f9b7 	bl	8000ed8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b6a:	f7ff fe0f 	bl	800078c <MX_ADC3_Init>
  MX_TIM17_Init();
 8000b6e:	f000 fa4f 	bl	8001010 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000b72:	f7ff ff0b 	bl	800098c <MX_I2C2_Init>
  MX_UART5_Init();
 8000b76:	f000 fadf 	bl	8001138 <MX_UART5_Init>
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <main+0x26>

08000b7c <Error_Handler>:
 8000b7c:	b672      	cpsid	i
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <Error_Handler+0x2>

08000b80 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000b80:	b510      	push	{r4, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000b82:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  hspi4.Instance = SPI4;
 8000b88:	4c15      	ldr	r4, [pc, #84]	@ (8000be0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000b8a:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	2300      	movs	r3, #0
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000b90:	6081      	str	r1, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b92:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b96:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b98:	6143      	str	r3, [r0, #20]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	e9c0 4200 	strd	r4, r2, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9e:	2207      	movs	r2, #7
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ba0:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba4:	60c2      	str	r2, [r0, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000baa:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8000bb2:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bb6:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bba:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bbe:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bc2:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc6:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bca:	f003 ff29 	bl	8004a20 <HAL_SPI_Init>
 8000bce:	b900      	cbnz	r0, 8000bd2 <MX_SPI4_Init+0x52>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bd0:	bd10      	pop	{r4, pc}
 8000bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000bd6:	f7ff bfd1 	b.w	8000b7c <Error_Handler>
 8000bda:	bf00      	nop
 8000bdc:	240002e0 	.word	0x240002e0
 8000be0:	40013400 	.word	0x40013400
 8000be4:	00000000 	.word	0x00000000

08000be8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000be8:	b510      	push	{r4, lr}
 8000bea:	b0b8      	sub	sp, #224	@ 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	2100      	movs	r1, #0
{
 8000bee:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	22c0      	movs	r2, #192	@ 0xc0
 8000bf2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	9106      	str	r1, [sp, #24]
 8000bf6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000bfa:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfe:	f006 fe05 	bl	800780c <memset>
  if(spiHandle->Instance==SPI4)
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <HAL_SPI_MspInit+0xa0>)
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_SPI_MspInit+0x26>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000c0a:	b038      	add	sp, #224	@ 0xe0
 8000c0c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000c0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c12:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f002 fc3d 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	bb40      	cbnz	r0, 8000c72 <HAL_SPI_MspInit+0x8a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000c22:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	a902      	add	r1, sp, #8
 8000c26:	481a      	ldr	r0, [pc, #104]	@ (8000c90 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c28:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000c30:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c44:	f042 0210 	orr.w	r2, r2, #16
 8000c48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000c50:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000c56:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8000c78 <HAL_SPI_MspInit+0x90>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000c5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c62:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8000c80 <HAL_SPI_MspInit+0x98>
 8000c66:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	f001 fa6f 	bl	800214c <HAL_GPIO_Init>
}
 8000c6e:	b038      	add	sp, #224	@ 0xe0
 8000c70:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000c72:	f7ff ff83 	bl	8000b7c <Error_Handler>
 8000c76:	e7d3      	b.n	8000c20 <HAL_SPI_MspInit+0x38>
 8000c78:	00005000 	.word	0x00005000
 8000c7c:	00000002 	.word	0x00000002
 8000c80:	00000000 	.word	0x00000000
 8000c84:	00000002 	.word	0x00000002
 8000c88:	40013400 	.word	0x40013400
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58021000 	.word	0x58021000

08000c94 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_MspInit+0x48>)
 8000c96:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000c9a:	f042 0202 	orr.w	r2, r2, #2
{
 8000c9e:	b500      	push	{lr}
 8000ca0:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000ca6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000caa:	f002 0202 	and.w	r2, r2, #2
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	9a00      	ldr	r2, [sp, #0]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000cb2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cba:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	9b01      	ldr	r3, [sp, #4]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000cca:	f000 fb7b 	bl	80013c4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000cce:	2002      	movs	r0, #2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	b003      	add	sp, #12
 8000cd2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000cd6:	f000 bb6b 	b.w	80013b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8000cda:	bf00      	nop
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler>
 8000ce2:	bf00      	nop

08000ce4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <HardFault_Handler>
 8000ce6:	bf00      	nop

08000ce8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler>
 8000cea:	bf00      	nop

08000cec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <BusFault_Handler>
 8000cee:	bf00      	nop

08000cf0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler>
 8000cf2:	bf00      	nop

08000cf4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 bb3e 	b.w	8001380 <HAL_IncTick>

08000d04 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d04:	4801      	ldr	r0, [pc, #4]	@ (8000d0c <UART5_IRQHandler+0x8>)
 8000d06:	f004 bd63 	b.w	80057d0 <HAL_UART_IRQHandler>
 8000d0a:	bf00      	nop
 8000d0c:	24000410 	.word	0x24000410

08000d10 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000d10:	2001      	movs	r0, #1
 8000d12:	4770      	bx	lr

08000d14 <_kill>:

int _kill(int pid, int sig)
{
 8000d14:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d16:	f006 fddb 	bl	80078d0 <__errno>
 8000d1a:	2216      	movs	r2, #22
 8000d1c:	4603      	mov	r3, r0
  return -1;
}
 8000d1e:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	bd08      	pop	{r3, pc}
 8000d26:	bf00      	nop

08000d28 <_exit>:

void _exit (int status)
{
 8000d28:	b508      	push	{r3, lr}
  errno = EINVAL;
 8000d2a:	f006 fdd1 	bl	80078d0 <__errno>
 8000d2e:	2316      	movs	r3, #22
 8000d30:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000d32:	e7fe      	b.n	8000d32 <_exit+0xa>

08000d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	1e16      	subs	r6, r2, #0
 8000d38:	dd07      	ble.n	8000d4a <_read+0x16>
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	42a5      	cmp	r5, r4
 8000d48:	d1f9      	bne.n	8000d3e <_read+0xa>
  }

  return len;
}
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	bf00      	nop

08000d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d50:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	1e16      	subs	r6, r2, #0
 8000d54:	dd07      	ble.n	8000d66 <_write+0x16>
 8000d56:	460c      	mov	r4, r1
 8000d58:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000d5a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000d5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	42a5      	cmp	r5, r4
 8000d64:	d1f9      	bne.n	8000d5a <_write+0xa>
  }
  return len;
}
 8000d66:	4630      	mov	r0, r6
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
 8000d6a:	bf00      	nop

08000d6c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000d78:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000d7a:	604b      	str	r3, [r1, #4]
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000d80:	2001      	movs	r0, #1
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000d84:	2000      	movs	r0, #0
 8000d86:	4770      	bx	lr

08000d88 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <_sbrk+0x38>)
{
 8000d8a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000d8e:	6808      	ldr	r0, [r1, #0]
{
 8000d90:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d92:	4c0d      	ldr	r4, [pc, #52]	@ (8000dc8 <_sbrk+0x40>)
 8000d94:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000d96:	b120      	cbz	r0, 8000da2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d98:	4403      	add	r3, r0
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d807      	bhi.n	8000dae <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d9e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000da0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000da2:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <_sbrk+0x44>)
 8000da4:	4620      	mov	r0, r4
 8000da6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000da8:	4403      	add	r3, r0
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d9f7      	bls.n	8000d9e <_sbrk+0x16>
    errno = ENOMEM;
 8000dae:	f006 fd8f 	bl	80078d0 <__errno>
 8000db2:	220c      	movs	r2, #12
 8000db4:	4603      	mov	r3, r0
    return (void *)-1;
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000368 	.word	0x24000368
 8000dc4:	24080000 	.word	0x24080000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	240005f8 	.word	0x240005f8

08000dd0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd0:	4930      	ldr	r1, [pc, #192]	@ (8000e94 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dd2:	4a31      	ldr	r2, [pc, #196]	@ (8000e98 <SystemInit+0xc8>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000ddc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de2:	6813      	ldr	r3, [r2, #0]
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	d805      	bhi.n	8000df8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f023 030f 	bic.w	r3, r3, #15
 8000df2:	f043 0307 	orr.w	r3, r3, #7
 8000df6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dfa:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dfc:	4a28      	ldr	r2, [pc, #160]	@ (8000ea0 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
 8000dfe:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e00:	4825      	ldr	r0, [pc, #148]	@ (8000e98 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
 8000e02:	f041 0101 	orr.w	r1, r1, #1
 8000e06:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000e08:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000e0a:	6819      	ldr	r1, [r3, #0]
 8000e0c:	400a      	ands	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e10:	6803      	ldr	r3, [r0, #0]
 8000e12:	0719      	lsls	r1, r3, #28
 8000e14:	d505      	bpl.n	8000e22 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e16:	6803      	ldr	r3, [r0, #0]
 8000e18:	f023 030f 	bic.w	r3, r3, #15
 8000e1c:	f043 0307 	orr.w	r3, r3, #7
 8000e20:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <SystemInit+0xcc>)
 8000e24:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e26:	491f      	ldr	r1, [pc, #124]	@ (8000ea4 <SystemInit+0xd4>)
  RCC->PLLCFGR = 0x01FF0000;
 8000e28:	481f      	ldr	r0, [pc, #124]	@ (8000ea8 <SystemInit+0xd8>)
  RCC->PLLCKSELR = 0x02020200;
 8000e2a:	4c20      	ldr	r4, [pc, #128]	@ (8000eac <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
 8000e2c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000e2e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000e30:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000e32:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000e34:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000e36:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e3a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e3e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e42:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e44:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
 8000e46:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000e4a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000e4c:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	f36f 030f 	bfc	r3, #0, #16
 8000e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e58:	d203      	bcs.n	8000e62 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <SystemInit+0xe4>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <SystemInit+0xcc>)
 8000e64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000e68:	04d2      	lsls	r2, r2, #19
 8000e6a:	d40f      	bmi.n	8000e8c <SystemInit+0xbc>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e70:	f243 00d2 	movw	r0, #12498	@ 0x30d2
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <SystemInit+0xe8>)
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e7a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e7e:	6008      	str	r0, [r1, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e80:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000e84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e88:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	52002000 	.word	0x52002000
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ea4:	01010280 	.word	0x01010280
 8000ea8:	01ff0000 	.word	0x01ff0000
 8000eac:	02020200 	.word	0x02020200
 8000eb0:	5c001000 	.word	0x5c001000
 8000eb4:	51008000 	.word	0x51008000
 8000eb8:	52004000 	.word	0x52004000

08000ebc <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <ExitRun0Mode+0x14>)
 8000ebe:	68d3      	ldr	r3, [r2, #12]
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ec6:	6853      	ldr	r3, [r2, #4]
 8000ec8:	049b      	lsls	r3, r3, #18
 8000eca:	d5fc      	bpl.n	8000ec6 <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	58024800 	.word	0x58024800
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ed8:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eda:	2400      	movs	r4, #0
{
 8000edc:	b0a1      	sub	sp, #132	@ 0x84
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	222c      	movs	r2, #44	@ 0x2c

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee0:	4d47      	ldr	r5, [pc, #284]	@ (8001000 <MX_TIM1_Init+0x128>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	a814      	add	r0, sp, #80	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee6:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee8:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8000ef2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8000ef6:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efa:	f006 fc87 	bl	800780c <memset>
  htim1.Init.Prescaler = 12-1;
 8000efe:	230b      	movs	r3, #11
 8000f00:	4a40      	ldr	r2, [pc, #256]	@ (8001004 <MX_TIM1_Init+0x12c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f02:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8000f06:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 12-1;
 8000f08:	e9c5 2300 	strd	r2, r3, [r5]
  htim1.Init.Period = 1000-1;
 8000f0c:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim1.Init.RepetitionCounter = 0;
 8000f10:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 1000-1;
 8000f14:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f16:	f004 f825 	bl	8004f64 <HAL_TIM_PWM_Init>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d13e      	bne.n	8000f9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2200      	movs	r2, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f22:	a902      	add	r1, sp, #8
 8000f24:	4836      	ldr	r0, [pc, #216]	@ (8001000 <MX_TIM1_Init+0x128>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2e:	f004 fadb 	bl	80054e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d13b      	bne.n	8000fae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2260      	movs	r2, #96	@ 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f38:	2008      	movs	r0, #8
  sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3c:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	920c      	str	r2, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f40:	2204      	movs	r2, #4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f42:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f44:	482e      	ldr	r0, [pc, #184]	@ (8001000 <MX_TIM1_Init+0x128>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f46:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8000fe8 <MX_TIM1_Init+0x110>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f54:	f004 f9ae 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	bb30      	cbnz	r0, 8000fa8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f5a:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f60:	a914      	add	r1, sp, #80	@ 0x50
 8000f62:	4827      	ldr	r0, [pc, #156]	@ (8001000 <MX_TIM1_Init+0x128>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f64:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f66:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8000ff0 <MX_TIM1_Init+0x118>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6a:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f6e:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f72:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f76:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f7a:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7e:	f004 fb0d 	bl	800559c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f82:	b970      	cbnz	r0, 8000fa2 <MX_TIM1_Init+0xca>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <MX_TIM1_Init+0x12c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8000f88:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	930a      	str	r3, [sp, #40]	@ 0x28
  if(timHandle->Instance==TIM1)
 8000f8c:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000f92:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8000f96:	d00d      	beq.n	8000fb4 <MX_TIM1_Init+0xdc>
}
 8000f98:	b021      	add	sp, #132	@ 0x84
 8000f9a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f9c:	f7ff fdee 	bl	8000b7c <Error_Handler>
 8000fa0:	e7bd      	b.n	8000f1e <MX_TIM1_Init+0x46>
    Error_Handler();
 8000fa2:	f7ff fdeb 	bl	8000b7c <Error_Handler>
 8000fa6:	e7ed      	b.n	8000f84 <MX_TIM1_Init+0xac>
    Error_Handler();
 8000fa8:	f7ff fde8 	bl	8000b7c <Error_Handler>
 8000fac:	e7d5      	b.n	8000f5a <MX_TIM1_Init+0x82>
    Error_Handler();
 8000fae:	f7ff fde5 	bl	8000b7c <Error_Handler>
 8000fb2:	e7c0      	b.n	8000f36 <MX_TIM1_Init+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_TIM1_Init+0x130>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb6:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	a906      	add	r1, sp, #24
 8000fba:	4814      	ldr	r0, [pc, #80]	@ (800100c <MX_TIM1_Init+0x134>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fc0:	f042 0210 	orr.w	r2, r2, #16
 8000fc4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fcc:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8000ff8 <MX_TIM1_Init+0x120>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fda:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fde:	f001 f8b5 	bl	800214c <HAL_GPIO_Init>
}
 8000fe2:	b021      	add	sp, #132	@ 0x84
 8000fe4:	bd30      	pop	{r4, r5, pc}
 8000fe6:	bf00      	nop
	...
 8000ff0:	02000000 	.word	0x02000000
 8000ff4:	00000000 	.word	0x00000000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	00000002 	.word	0x00000002
 8001000:	240003c0 	.word	0x240003c0
 8001004:	40010000 	.word	0x40010000
 8001008:	58024400 	.word	0x58024400
 800100c:	58021000 	.word	0x58021000

08001010 <MX_TIM17_Init>:
{
 8001010:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	2400      	movs	r4, #0
{
 8001014:	b094      	sub	sp, #80	@ 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001016:	222c      	movs	r2, #44	@ 0x2c
 8001018:	4621      	mov	r1, r4
 800101a:	a808      	add	r0, sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101c:	9406      	str	r4, [sp, #24]
 800101e:	e9cd 4400 	strd	r4, r4, [sp]
 8001022:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001026:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102a:	f006 fbef 	bl	800780c <memset>
  htim17.Instance = TIM17;
 800102e:	4826      	ldr	r0, [pc, #152]	@ (80010c8 <MX_TIM17_Init+0xb8>)
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_TIM17_Init+0xbc>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	6084      	str	r4, [r0, #8]
  htim17.Instance = TIM17;
 8001034:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 239;
 8001036:	23ef      	movs	r3, #239	@ 0xef
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	6104      	str	r4, [r0, #16]
  htim17.Init.Prescaler = 239;
 800103a:	6043      	str	r3, [r0, #4]
  htim17.Init.Period = 9999;
 800103c:	f242 730f 	movw	r3, #9999	@ 0x270f
  htim17.Init.RepetitionCounter = 0;
 8001040:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim17.Init.Period = 9999;
 8001044:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001046:	f003 fe3f 	bl	8004cc8 <HAL_TIM_Base_Init>
 800104a:	bb20      	cbnz	r0, 8001096 <MX_TIM17_Init+0x86>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800104c:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <MX_TIM17_Init+0xb8>)
 800104e:	f003 fee3 	bl	8004e18 <HAL_TIM_OC_Init>
 8001052:	bb38      	cbnz	r0, 80010a4 <MX_TIM17_Init+0x94>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001054:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001056:	4669      	mov	r1, sp
 8001058:	481b      	ldr	r0, [pc, #108]	@ (80010c8 <MX_TIM17_Init+0xb8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105a:	9206      	str	r2, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80010b8 <MX_TIM17_Init+0xa8>
  sConfigOC.Pulse = 0;
 8001060:	e9cd 2200 	strd	r2, r2, [sp]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001064:	e9cd 2202 	strd	r2, r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001068:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106c:	f004 f862 	bl	8005134 <HAL_TIM_OC_ConfigChannel>
 8001070:	b9f8      	cbnz	r0, 80010b2 <MX_TIM17_Init+0xa2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001072:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001074:	a908      	add	r1, sp, #32
 8001076:	4814      	ldr	r0, [pc, #80]	@ (80010c8 <MX_TIM17_Init+0xb8>)
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001078:	930e      	str	r3, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107a:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80010c0 <MX_TIM17_Init+0xb0>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001080:	e9cd 3308 	strd	r3, r3, [sp, #32]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001084:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001088:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800108c:	f004 fa86 	bl	800559c <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	b958      	cbnz	r0, 80010aa <MX_TIM17_Init+0x9a>
}
 8001092:	b014      	add	sp, #80	@ 0x50
 8001094:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001096:	f7ff fd71 	bl	8000b7c <Error_Handler>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800109a:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <MX_TIM17_Init+0xb8>)
 800109c:	f003 febc 	bl	8004e18 <HAL_TIM_OC_Init>
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d0d7      	beq.n	8001054 <MX_TIM17_Init+0x44>
    Error_Handler();
 80010a4:	f7ff fd6a 	bl	8000b7c <Error_Handler>
 80010a8:	e7d4      	b.n	8001054 <MX_TIM17_Init+0x44>
    Error_Handler();
 80010aa:	f7ff fd67 	bl	8000b7c <Error_Handler>
}
 80010ae:	b014      	add	sp, #80	@ 0x50
 80010b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80010b2:	f7ff fd63 	bl	8000b7c <Error_Handler>
 80010b6:	e7dc      	b.n	8001072 <MX_TIM17_Init+0x62>
	...
 80010c4:	00002000 	.word	0x00002000
 80010c8:	24000370 	.word	0x24000370
 80010cc:	40014800 	.word	0x40014800

080010d0 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_TIM_PWM_MspInit+0x2c>)
 80010d2:	6802      	ldr	r2, [r0, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d000      	beq.n	80010da <HAL_TIM_PWM_MspInit+0xa>
 80010d8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_TIM_PWM_MspInit+0x30>)
{
 80010dc:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80010e2:	f042 0201 	orr.w	r2, r2, #1
 80010e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80010ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	9b01      	ldr	r3, [sp, #4]
}
 80010f6:	b002      	add	sp, #8
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40010000 	.word	0x40010000
 8001100:	58024400 	.word	0x58024400

08001104 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM17)
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_TIM_Base_MspInit+0x2c>)
 8001106:	6802      	ldr	r2, [r0, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	d000      	beq.n	800110e <HAL_TIM_Base_MspInit+0xa>
 800110c:	4770      	bx	lr
    __HAL_RCC_TIM17_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_TIM_Base_MspInit+0x30>)
{
 8001110:	b082      	sub	sp, #8
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001112:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001116:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800111a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800111e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	9b01      	ldr	r3, [sp, #4]
}
 800112a:	b002      	add	sp, #8
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40014800 	.word	0x40014800
 8001134:	58024400 	.word	0x58024400

08001138 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001138:	b510      	push	{r4, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800113a:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <MX_UART5_Init+0x80>)
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800113c:	2300      	movs	r3, #0
  huart5.Instance = UART5;
 800113e:	4c1f      	ldr	r4, [pc, #124]	@ (80011bc <MX_UART5_Init+0x84>)
  huart5.Init.BaudRate = 115200;
 8001140:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001144:	220c      	movs	r2, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	6083      	str	r3, [r0, #8]
  huart5.Init.BaudRate = 115200;
 8001148:	e9c0 4100 	strd	r4, r1, [r0]
  huart5.Init.Parity = UART_PARITY_NONE;
 800114c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001150:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001154:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001158:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800115c:	f005 fb06 	bl	800676c <HAL_UART_Init>
 8001160:	b970      	cbnz	r0, 8001180 <MX_UART5_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <MX_UART5_Init+0x80>)
 8001166:	f005 fb59 	bl	800681c <HAL_UARTEx_SetTxFifoThreshold>
 800116a:	b988      	cbnz	r0, 8001190 <MX_UART5_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_UART5_Init+0x80>)
 8001170:	f005 fb96 	bl	80068a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001174:	b9a0      	cbnz	r0, 80011a0 <MX_UART5_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001176:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <MX_UART5_Init+0x80>)
 8001178:	f005 fb32 	bl	80067e0 <HAL_UARTEx_DisableFifoMode>
 800117c:	b9b8      	cbnz	r0, 80011ae <MX_UART5_Init+0x76>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800117e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001180:	f7ff fcfc 	bl	8000b7c <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <MX_UART5_Init+0x80>)
 8001188:	f005 fb48 	bl	800681c <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	2800      	cmp	r0, #0
 800118e:	d0ed      	beq.n	800116c <MX_UART5_Init+0x34>
    Error_Handler();
 8001190:	f7ff fcf4 	bl	8000b7c <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001194:	2100      	movs	r1, #0
 8001196:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_UART5_Init+0x80>)
 8001198:	f005 fb82 	bl	80068a0 <HAL_UARTEx_SetRxFifoThreshold>
 800119c:	2800      	cmp	r0, #0
 800119e:	d0ea      	beq.n	8001176 <MX_UART5_Init+0x3e>
    Error_Handler();
 80011a0:	f7ff fcec 	bl	8000b7c <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_UART5_Init+0x80>)
 80011a6:	f005 fb1b 	bl	80067e0 <HAL_UARTEx_DisableFifoMode>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d0e7      	beq.n	800117e <MX_UART5_Init+0x46>
}
 80011ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80011b2:	f7ff bce3 	b.w	8000b7c <Error_Handler>
 80011b6:	bf00      	nop
 80011b8:	24000410 	.word	0x24000410
 80011bc:	40005000 	.word	0x40005000

080011c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b0b8      	sub	sp, #224	@ 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	2100      	movs	r1, #0
{
 80011c6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	22c0      	movs	r2, #192	@ 0xc0
 80011ca:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	9106      	str	r1, [sp, #24]
 80011ce:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80011d2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d6:	f006 fb19 	bl	800780c <memset>
  if(uartHandle->Instance==UART5)
 80011da:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <HAL_UART_MspInit+0xb0>)
 80011dc:	6822      	ldr	r2, [r4, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80011e2:	b038      	add	sp, #224	@ 0xe0
 80011e4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80011e6:	2202      	movs	r2, #2
 80011e8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80011ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f0:	f002 f952 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	bb80      	cbnz	r0, 8001258 <HAL_UART_MspInit+0x98>
    __HAL_RCC_UART5_CLK_ENABLE();
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80011f8:	240e      	movs	r4, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	a902      	add	r1, sp, #8
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80011fe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001202:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001206:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800120a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800120e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800121a:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800121e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001260 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800122a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001234:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8001268 <HAL_UART_MspInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800123c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f000 ff84 	bl	800214c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2035      	movs	r0, #53	@ 0x35
 8001248:	4611      	mov	r1, r2
 800124a:	f000 fc9f 	bl	8001b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800124e:	2035      	movs	r0, #53	@ 0x35
 8001250:	f000 fcd8 	bl	8001c04 <HAL_NVIC_EnableIRQ>
}
 8001254:	b038      	add	sp, #224	@ 0xe0
 8001256:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001258:	f7ff fc90 	bl	8000b7c <Error_Handler>
 800125c:	e7cb      	b.n	80011f6 <HAL_UART_MspInit+0x36>
 800125e:	bf00      	nop
 8001260:	00003000 	.word	0x00003000
 8001264:	00000002 	.word	0x00000002
	...
 8001270:	40005000 	.word	0x40005000
 8001274:	58024400 	.word	0x58024400
 8001278:	58020400 	.word	0x58020400

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012b8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001280:	f7ff fe1c 	bl	8000ebc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff fda4 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f006 fb15 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fc4f 	bl	8000b54 <main>
  bx  lr
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80012c4:	080094d4 	.word	0x080094d4
  ldr r2, =_sbss
 80012c8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80012cc:	240005f4 	.word	0x240005f4

080012d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC3_IRQHandler>
	...

080012d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_InitTick+0x40>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b90b      	cbnz	r3, 80012de <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80012dc:	4770      	bx	lr
{
 80012de:	b510      	push	{r4, lr}
 80012e0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <HAL_InitTick+0x44>)
 80012e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ec:	6810      	ldr	r0, [r2, #0]
 80012ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80012f2:	f000 fc95 	bl	8001c20 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	2c0f      	cmp	r4, #15
 80012f8:	d800      	bhi.n	80012fc <HAL_InitTick+0x28>
 80012fa:	b108      	cbz	r0, 8001300 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
}
 80012fe:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	4621      	mov	r1, r4
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 fc40 	bl	8001b8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_InitTick+0x48>)
 800130e:	2000      	movs	r0, #0
 8001310:	601c      	str	r4, [r3, #0]
}
 8001312:	bd10      	pop	{r4, pc}
 8001314:	24000008 	.word	0x24000008
 8001318:	24000004 	.word	0x24000004
 800131c:	2400000c 	.word	0x2400000c

08001320 <HAL_Init>:
{
 8001320:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001324:	4c12      	ldr	r4, [pc, #72]	@ (8001370 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001326:	f000 fc1f 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800132a:	f001 fd4d 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_Init+0x54>)
 8001330:	4911      	ldr	r1, [pc, #68]	@ (8001378 <HAL_Init+0x58>)
 8001332:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001334:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001336:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800133a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800133e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001340:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001342:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001348:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800134c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800134e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001352:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001354:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001356:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001358:	f7ff ffbc 	bl	80012d4 <HAL_InitTick>
 800135c:	b110      	cbz	r0, 8001364 <HAL_Init+0x44>
    return HAL_ERROR;
 800135e:	2401      	movs	r4, #1
}
 8001360:	4620      	mov	r0, r4
 8001362:	bd10      	pop	{r4, pc}
 8001364:	4604      	mov	r4, r0
  HAL_MspInit();
 8001366:	f7ff fc95 	bl	8000c94 <HAL_MspInit>
}
 800136a:	4620      	mov	r0, r4
 800136c:	bd10      	pop	{r4, pc}
 800136e:	bf00      	nop
 8001370:	24000000 	.word	0x24000000
 8001374:	58024400 	.word	0x58024400
 8001378:	08009118 	.word	0x08009118
 800137c:	24000004 	.word	0x24000004

08001380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001380:	4a03      	ldr	r2, [pc, #12]	@ (8001390 <HAL_IncTick+0x10>)
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <HAL_IncTick+0x14>)
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	440b      	add	r3, r1
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	240004a4 	.word	0x240004a4
 8001394:	24000008 	.word	0x24000008

08001398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001398:	4b01      	ldr	r3, [pc, #4]	@ (80013a0 <HAL_GetTick+0x8>)
 800139a:	6818      	ldr	r0, [r3, #0]
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	240004a4 	.word	0x240004a4

080013a4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80013a4:	4b01      	ldr	r3, [pc, #4]	@ (80013ac <HAL_GetREVID+0x8>)
 80013a6:	6818      	ldr	r0, [r3, #0]
}
 80013a8:	0c00      	lsrs	r0, r0, #16
 80013aa:	4770      	bx	lr
 80013ac:	5c001000 	.word	0x5c001000

080013b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80013b0:	4a03      	ldr	r2, [pc, #12]	@ (80013c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f023 0302 	bic.w	r3, r3, #2
 80013b8:	4303      	orrs	r3, r0
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	58003c00 	.word	0x58003c00

080013c4 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80013c4:	4a02      	ldr	r2, [pc, #8]	@ (80013d0 <HAL_SYSCFG_DisableVREFBUF+0xc>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	4770      	bx	lr
 80013d0:	58003c00 	.word	0x58003c00

080013d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013d4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80013d6:	2200      	movs	r2, #0
{
 80013d8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80013da:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80013e0:	2a01      	cmp	r2, #1
 80013e2:	f000 80ef 	beq.w	80015c4 <HAL_ADC_ConfigChannel+0x1f0>
 80013e6:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80013ec:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013f0:	6890      	ldr	r0, [r2, #8]
 80013f2:	0745      	lsls	r5, r0, #29
 80013f4:	d509      	bpl.n	800140a <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001406:	b002      	add	sp, #8
 8001408:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800140a:	680d      	ldr	r5, [r1, #0]
 800140c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800140e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001412:	db0d      	blt.n	8001430 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001414:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001418:	2e00      	cmp	r6, #0
 800141a:	f000 80c1 	beq.w	80015a0 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001422:	b115      	cbz	r5, 800142a <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001424:	fab5 f585 	clz	r5, r5
 8001428:	40ac      	lsls	r4, r5
 800142a:	69d5      	ldr	r5, [r2, #28]
 800142c:	432c      	orrs	r4, r5
 800142e:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001430:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001432:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001436:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800143a:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800143e:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001440:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001444:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001448:	fa0c fc04 	lsl.w	ip, ip, r4
 800144c:	40a0      	lsls	r0, r4
 800144e:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001452:	ea24 0c0c 	bic.w	ip, r4, ip
 8001456:	ea4c 0000 	orr.w	r0, ip, r0
 800145a:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800145e:	6890      	ldr	r0, [r2, #8]
 8001460:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001464:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001468:	0700      	lsls	r0, r0, #28
 800146a:	d542      	bpl.n	80014f2 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800146c:	6890      	ldr	r0, [r2, #8]
 800146e:	07c6      	lsls	r6, r0, #31
 8001470:	d43d      	bmi.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001472:	68cd      	ldr	r5, [r1, #12]
 8001474:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001476:	f005 0618 	and.w	r6, r5, #24
 800147a:	48a9      	ldr	r0, [pc, #676]	@ (8001720 <HAL_ADC_ConfigChannel+0x34c>)
 800147c:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001480:	40f0      	lsrs	r0, r6
 8001482:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8001486:	4020      	ands	r0, r4
 8001488:	ea21 0106 	bic.w	r1, r1, r6
 800148c:	4301      	orrs	r1, r0
 800148e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001492:	49a4      	ldr	r1, [pc, #656]	@ (8001724 <HAL_ADC_ConfigChannel+0x350>)
 8001494:	428d      	cmp	r5, r1
 8001496:	f000 808a 	beq.w	80015ae <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800149a:	2c00      	cmp	r4, #0
 800149c:	da27      	bge.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800149e:	49a2      	ldr	r1, [pc, #648]	@ (8001728 <HAL_ADC_ConfigChannel+0x354>)
 80014a0:	428a      	cmp	r2, r1
 80014a2:	f000 80bd 	beq.w	8001620 <HAL_ADC_ConfigChannel+0x24c>
 80014a6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80014aa:	428a      	cmp	r2, r1
 80014ac:	f000 80b8 	beq.w	8001620 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014b0:	489e      	ldr	r0, [pc, #632]	@ (800172c <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b2:	499f      	ldr	r1, [pc, #636]	@ (8001730 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014b4:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b6:	688d      	ldr	r5, [r1, #8]
 80014b8:	07ed      	lsls	r5, r5, #31
 80014ba:	d49c      	bmi.n	80013f6 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014bc:	4d9d      	ldr	r5, [pc, #628]	@ (8001734 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014be:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 80014c2:	42ac      	cmp	r4, r5
 80014c4:	f000 8156 	beq.w	8001774 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014c8:	4d9b      	ldr	r5, [pc, #620]	@ (8001738 <HAL_ADC_ConfigChannel+0x364>)
 80014ca:	42ac      	cmp	r4, r5
 80014cc:	f000 8118 	beq.w	8001700 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014d0:	4d9a      	ldr	r5, [pc, #616]	@ (800173c <HAL_ADC_ConfigChannel+0x368>)
 80014d2:	42ac      	cmp	r4, r5
 80014d4:	d10b      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80014d6:	0274      	lsls	r4, r6, #9
 80014d8:	d409      	bmi.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
 80014da:	428a      	cmp	r2, r1
 80014dc:	d107      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014de:	6882      	ldr	r2, [r0, #8]
 80014e0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80014e4:	ea42 020c 	orr.w	r2, r2, ip
 80014e8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80014ec:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ee:	2000      	movs	r0, #0
 80014f0:	e786      	b.n	8001400 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014f2:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014f4:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80014f8:	f04f 0e07 	mov.w	lr, #7
 80014fc:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014fe:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001500:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001504:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001508:	fa0e fe04 	lsl.w	lr, lr, r4
 800150c:	fa06 f404 	lsl.w	r4, r6, r4
 8001510:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001514:	ea20 000e 	bic.w	r0, r0, lr
 8001518:	4320      	orrs	r0, r4
 800151a:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800151e:	4888      	ldr	r0, [pc, #544]	@ (8001740 <HAL_ADC_ConfigChannel+0x36c>)
 8001520:	694d      	ldr	r5, [r1, #20]
 8001522:	6800      	ldr	r0, [r0, #0]
 8001524:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001528:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800152c:	68d0      	ldr	r0, [r2, #12]
 800152e:	d039      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1d0>
 8001530:	f010 0f10 	tst.w	r0, #16
 8001534:	68d0      	ldr	r0, [r2, #12]
 8001536:	d035      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1d0>
 8001538:	0840      	lsrs	r0, r0, #1
 800153a:	f000 0008 	and.w	r0, r0, #8
 800153e:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001540:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001542:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001544:	2e04      	cmp	r6, #4
 8001546:	d040      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001548:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 800154c:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001550:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001554:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001558:	4320      	orrs	r0, r4
 800155a:	4328      	orrs	r0, r5
 800155c:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001560:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	690d      	ldr	r5, [r1, #16]
 8001564:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001568:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 800156c:	fab4 f484 	clz	r4, r4
 8001570:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001574:	0964      	lsrs	r4, r4, #5
 8001576:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 800157a:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800157e:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001580:	690d      	ldr	r5, [r1, #16]
 8001582:	f1a0 0001 	sub.w	r0, r0, #1
 8001586:	6914      	ldr	r4, [r2, #16]
 8001588:	f005 051f 	and.w	r5, r5, #31
 800158c:	fab0 f080 	clz	r0, r0
 8001590:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001594:	0940      	lsrs	r0, r0, #5
 8001596:	02c0      	lsls	r0, r0, #11
 8001598:	40a8      	lsls	r0, r5
 800159a:	4320      	orrs	r0, r4
 800159c:	6110      	str	r0, [r2, #16]
}
 800159e:	e765      	b.n	800146c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80015a0:	4084      	lsls	r4, r0
 80015a2:	e742      	b.n	800142a <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015a4:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80015a8:	0040      	lsls	r0, r0, #1
 80015aa:	4085      	lsls	r5, r0
 80015ac:	e7c8      	b.n	8001540 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80015ae:	495e      	ldr	r1, [pc, #376]	@ (8001728 <HAL_ADC_ConfigChannel+0x354>)
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d07a      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x2d6>
 80015b4:	4963      	ldr	r1, [pc, #396]	@ (8001744 <HAL_ADC_ConfigChannel+0x370>)
 80015b6:	428a      	cmp	r2, r1
 80015b8:	d040      	beq.n	800163c <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80015ba:	69d1      	ldr	r1, [r2, #28]
 80015bc:	f041 0101 	orr.w	r1, r1, #1
 80015c0:	61d1      	str	r1, [r2, #28]
}
 80015c2:	e76a      	b.n	800149a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80015c4:	2002      	movs	r0, #2
}
 80015c6:	b002      	add	sp, #8
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ca:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80015cc:	0684      	lsls	r4, r0, #26
 80015ce:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80015d2:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 80015d6:	d014      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015d8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80015da:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015de:	4284      	cmp	r4, r0
 80015e0:	d019      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015e2:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80015e4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015e8:	4284      	cmp	r4, r0
 80015ea:	d00f      	beq.n	800160c <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015ec:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80015ee:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80015f2:	4284      	cmp	r4, r0
 80015f4:	f47f af3a 	bne.w	800146c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80015f8:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80015fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015fe:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001600:	e734      	b.n	800146c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001602:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001604:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001608:	6610      	str	r0, [r2, #96]	@ 0x60
 800160a:	e7e5      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800160c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800160e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001612:	6690      	str	r0, [r2, #104]	@ 0x68
 8001614:	e7ea      	b.n	80015ec <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001616:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001618:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800161c:	6650      	str	r0, [r2, #100]	@ 0x64
 800161e:	e7e0      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001620:	4949      	ldr	r1, [pc, #292]	@ (8001748 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001622:	4a41      	ldr	r2, [pc, #260]	@ (8001728 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001624:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001626:	6892      	ldr	r2, [r2, #8]
 8001628:	f012 0f01 	tst.w	r2, #1
 800162c:	4a45      	ldr	r2, [pc, #276]	@ (8001744 <HAL_ADC_ConfigChannel+0x370>)
 800162e:	6892      	ldr	r2, [r2, #8]
 8001630:	f47f aee1 	bne.w	80013f6 <HAL_ADC_ConfigChannel+0x22>
 8001634:	07d2      	lsls	r2, r2, #31
 8001636:	f53f aede 	bmi.w	80013f6 <HAL_ADC_ConfigChannel+0x22>
 800163a:	e758      	b.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800163c:	4943      	ldr	r1, [pc, #268]	@ (800174c <HAL_ADC_ConfigChannel+0x378>)
 800163e:	428c      	cmp	r4, r1
 8001640:	d058      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x320>
 8001642:	4943      	ldr	r1, [pc, #268]	@ (8001750 <HAL_ADC_ConfigChannel+0x37c>)
 8001644:	428c      	cmp	r4, r1
 8001646:	d057      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x324>
 8001648:	4942      	ldr	r1, [pc, #264]	@ (8001754 <HAL_ADC_ConfigChannel+0x380>)
 800164a:	428c      	cmp	r4, r1
 800164c:	f000 80b5 	beq.w	80017ba <HAL_ADC_ConfigChannel+0x3e6>
 8001650:	4941      	ldr	r1, [pc, #260]	@ (8001758 <HAL_ADC_ConfigChannel+0x384>)
 8001652:	428c      	cmp	r4, r1
 8001654:	f000 80b3 	beq.w	80017be <HAL_ADC_ConfigChannel+0x3ea>
 8001658:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800165c:	3110      	adds	r1, #16
 800165e:	428c      	cmp	r4, r1
 8001660:	f000 80af 	beq.w	80017c2 <HAL_ADC_ConfigChannel+0x3ee>
 8001664:	493d      	ldr	r1, [pc, #244]	@ (800175c <HAL_ADC_ConfigChannel+0x388>)
 8001666:	428c      	cmp	r4, r1
 8001668:	f000 80ad 	beq.w	80017c6 <HAL_ADC_ConfigChannel+0x3f2>
 800166c:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001670:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001674:	428c      	cmp	r4, r1
 8001676:	f000 80a8 	beq.w	80017ca <HAL_ADC_ConfigChannel+0x3f6>
 800167a:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800167e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001682:	428c      	cmp	r4, r1
 8001684:	f000 80a3 	beq.w	80017ce <HAL_ADC_ConfigChannel+0x3fa>
 8001688:	4935      	ldr	r1, [pc, #212]	@ (8001760 <HAL_ADC_ConfigChannel+0x38c>)
 800168a:	428c      	cmp	r4, r1
 800168c:	d195      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x1e6>
 800168e:	4935      	ldr	r1, [pc, #212]	@ (8001764 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001694:	2900      	cmp	r1, #0
 8001696:	d031      	beq.n	80016fc <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001698:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f101 	lsl.w	r1, r0, r1
 80016a2:	69d0      	ldr	r0, [r2, #28]
 80016a4:	4301      	orrs	r1, r0
 80016a6:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016a8:	e721      	b.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80016aa:	4928      	ldr	r1, [pc, #160]	@ (800174c <HAL_ADC_ConfigChannel+0x378>)
 80016ac:	428c      	cmp	r4, r1
 80016ae:	d021      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0x320>
 80016b0:	4927      	ldr	r1, [pc, #156]	@ (8001750 <HAL_ADC_ConfigChannel+0x37c>)
 80016b2:	428c      	cmp	r4, r1
 80016b4:	d020      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0x324>
 80016b6:	4927      	ldr	r1, [pc, #156]	@ (8001754 <HAL_ADC_ConfigChannel+0x380>)
 80016b8:	428c      	cmp	r4, r1
 80016ba:	d07e      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x3e6>
 80016bc:	4926      	ldr	r1, [pc, #152]	@ (8001758 <HAL_ADC_ConfigChannel+0x384>)
 80016be:	428c      	cmp	r4, r1
 80016c0:	d07d      	beq.n	80017be <HAL_ADC_ConfigChannel+0x3ea>
 80016c2:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80016c6:	3110      	adds	r1, #16
 80016c8:	428c      	cmp	r4, r1
 80016ca:	d07a      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x3ee>
 80016cc:	4923      	ldr	r1, [pc, #140]	@ (800175c <HAL_ADC_ConfigChannel+0x388>)
 80016ce:	428c      	cmp	r4, r1
 80016d0:	d079      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x3f2>
 80016d2:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80016d6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80016da:	428c      	cmp	r4, r1
 80016dc:	d075      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x3f6>
 80016de:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80016e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80016e6:	428c      	cmp	r4, r1
 80016e8:	d071      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x3fa>
 80016ea:	491f      	ldr	r1, [pc, #124]	@ (8001768 <HAL_ADC_ConfigChannel+0x394>)
 80016ec:	428c      	cmp	r4, r1
 80016ee:	d1cb      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x2b4>
 80016f0:	491e      	ldr	r1, [pc, #120]	@ (800176c <HAL_ADC_ConfigChannel+0x398>)
 80016f2:	e7cd      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80016f4:	2101      	movs	r1, #1
 80016f6:	e7cb      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80016f8:	491d      	ldr	r1, [pc, #116]	@ (8001770 <HAL_ADC_ConfigChannel+0x39c>)
 80016fa:	e7c9      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80016fc:	2101      	movs	r1, #1
 80016fe:	e7d0      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001700:	01f5      	lsls	r5, r6, #7
 8001702:	f53f aef4 	bmi.w	80014ee <HAL_ADC_ConfigChannel+0x11a>
 8001706:	428a      	cmp	r2, r1
 8001708:	f47f aef1 	bne.w	80014ee <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	6882      	ldr	r2, [r0, #8]
 800170e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001712:	ea42 020c 	orr.w	r2, r2, ip
 8001716:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800171a:	6082      	str	r2, [r0, #8]
}
 800171c:	e6e7      	b.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
 800171e:	bf00      	nop
 8001720:	000fffff 	.word	0x000fffff
 8001724:	47ff0000 	.word	0x47ff0000
 8001728:	40022000 	.word	0x40022000
 800172c:	58026300 	.word	0x58026300
 8001730:	58026000 	.word	0x58026000
 8001734:	cb840000 	.word	0xcb840000
 8001738:	c7520000 	.word	0xc7520000
 800173c:	cfb80000 	.word	0xcfb80000
 8001740:	5c001000 	.word	0x5c001000
 8001744:	40022100 	.word	0x40022100
 8001748:	40022300 	.word	0x40022300
 800174c:	04300002 	.word	0x04300002
 8001750:	08600004 	.word	0x08600004
 8001754:	0c900008 	.word	0x0c900008
 8001758:	10c00010 	.word	0x10c00010
 800175c:	2a000400 	.word	0x2a000400
 8001760:	4b840000 	.word	0x4b840000
 8001764:	4fb80000 	.word	0x4fb80000
 8001768:	43210000 	.word	0x43210000
 800176c:	47520000 	.word	0x47520000
 8001770:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001774:	0236      	lsls	r6, r6, #8
 8001776:	f53f aeba 	bmi.w	80014ee <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800177a:	428a      	cmp	r2, r1
 800177c:	f47f aeb7 	bne.w	80014ee <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001780:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001782:	4914      	ldr	r1, [pc, #80]	@ (80017d4 <HAL_ADC_ConfigChannel+0x400>)
 8001784:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001788:	ea42 020c 	orr.w	r2, r2, ip
 800178c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001790:	6082      	str	r2, [r0, #8]
 8001792:	680a      	ldr	r2, [r1, #0]
 8001794:	4910      	ldr	r1, [pc, #64]	@ (80017d8 <HAL_ADC_ConfigChannel+0x404>)
 8001796:	0992      	lsrs	r2, r2, #6
 8001798:	fba1 1202 	umull	r1, r2, r1, r2
 800179c:	0992      	lsrs	r2, r2, #6
 800179e:	3201      	adds	r2, #1
 80017a0:	0052      	lsls	r2, r2, #1
 80017a2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80017a4:	9a01      	ldr	r2, [sp, #4]
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	f43f aea1 	beq.w	80014ee <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 80017ac:	9a01      	ldr	r2, [sp, #4]
 80017ae:	3a01      	subs	r2, #1
 80017b0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80017b2:	9a01      	ldr	r2, [sp, #4]
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d1f9      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x3d8>
 80017b8:	e699      	b.n	80014ee <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <HAL_ADC_ConfigChannel+0x408>)
 80017bc:	e768      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017be:	4908      	ldr	r1, [pc, #32]	@ (80017e0 <HAL_ADC_ConfigChannel+0x40c>)
 80017c0:	e766      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017c2:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <HAL_ADC_ConfigChannel+0x410>)
 80017c4:	e764      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <HAL_ADC_ConfigChannel+0x414>)
 80017c8:	e762      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <HAL_ADC_ConfigChannel+0x418>)
 80017cc:	e760      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <HAL_ADC_ConfigChannel+0x41c>)
 80017d0:	e75e      	b.n	8001690 <HAL_ADC_ConfigChannel+0x2bc>
 80017d2:	bf00      	nop
 80017d4:	24000004 	.word	0x24000004
 80017d8:	053e2d63 	.word	0x053e2d63
 80017dc:	1d500080 	.word	0x1d500080
 80017e0:	21800100 	.word	0x21800100
 80017e4:	25b00200 	.word	0x25b00200
 80017e8:	2e300800 	.word	0x2e300800
 80017ec:	32601000 	.word	0x32601000
 80017f0:	36902000 	.word	0x36902000

080017f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80017f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80017f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001934 <ADC_ConfigureBoostMode+0x140>)
{
 80017f8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80017fa:	6803      	ldr	r3, [r0, #0]
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d024      	beq.n	800184a <ADC_ConfigureBoostMode+0x56>
 8001800:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001804:	4293      	cmp	r3, r2
 8001806:	d020      	beq.n	800184a <ADC_ConfigureBoostMode+0x56>
 8001808:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <ADC_ConfigureBoostMode+0x144>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001810:	d020      	beq.n	8001854 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001812:	f001 fc91 	bl	8003138 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001816:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001818:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800181a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800181e:	d06d      	beq.n	80018fc <ADC_ConfigureBoostMode+0x108>
 8001820:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001824:	d072      	beq.n	800190c <ADC_ConfigureBoostMode+0x118>
 8001826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182a:	d067      	beq.n	80018fc <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800182c:	f7ff fdba 	bl	80013a4 <HAL_GetREVID>
 8001830:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001834:	4298      	cmp	r0, r3
 8001836:	d82d      	bhi.n	8001894 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8001838:	4a40      	ldr	r2, [pc, #256]	@ (800193c <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800183a:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 800183c:	4295      	cmp	r5, r2
 800183e:	d947      	bls.n	80018d0 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001846:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001848:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <ADC_ConfigureBoostMode+0x14c>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001852:	d1de      	bne.n	8001812 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001854:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001858:	2100      	movs	r1, #0
 800185a:	f002 ff41 	bl	80046e0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800185e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001860:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001862:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001866:	d04d      	beq.n	8001904 <ADC_ConfigureBoostMode+0x110>
 8001868:	d825      	bhi.n	80018b6 <ADC_ConfigureBoostMode+0xc2>
 800186a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800186e:	d04b      	beq.n	8001908 <ADC_ConfigureBoostMode+0x114>
 8001870:	d84e      	bhi.n	8001910 <ADC_ConfigureBoostMode+0x11c>
 8001872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001876:	d008      	beq.n	800188a <ADC_ConfigureBoostMode+0x96>
 8001878:	d855      	bhi.n	8001926 <ADC_ConfigureBoostMode+0x132>
 800187a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800187e:	d004      	beq.n	800188a <ADC_ConfigureBoostMode+0x96>
 8001880:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001884:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001888:	d1d0      	bne.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001892:	e7cb      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8001894:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001896:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8001898:	4295      	cmp	r5, r2
 800189a:	d923      	bls.n	80018e4 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 800189c:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <ADC_ConfigureBoostMode+0x154>)
 800189e:	4295      	cmp	r5, r2
 80018a0:	d925      	bls.n	80018ee <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 80018a2:	4a2a      	ldr	r2, [pc, #168]	@ (800194c <ADC_ConfigureBoostMode+0x158>)
 80018a4:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80018a6:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 80018a8:	d839      	bhi.n	800191e <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80018aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80018ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018b2:	609a      	str	r2, [r3, #8]
}
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80018b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80018ba:	d02e      	beq.n	800191a <ADC_ConfigureBoostMode+0x126>
 80018bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80018c0:	d1b4      	bne.n	800182c <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80018c2:	f7ff fd6f 	bl	80013a4 <HAL_GetREVID>
 80018c6:	f241 0303 	movw	r3, #4099	@ 0x1003
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d805      	bhi.n	80018da <ADC_ConfigureBoostMode+0xe6>
 80018ce:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80018da:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <ADC_ConfigureBoostMode+0x150>)
 80018dc:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	d304      	bcc.n	80018ee <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80018ea:	609a      	str	r2, [r3, #8]
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80018f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018f8:	609a      	str	r2, [r3, #8]
}
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001902:	e793      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8001904:	0985      	lsrs	r5, r0, #6
        break;
 8001906:	e791      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8001908:	0905      	lsrs	r5, r0, #4
        break;
 800190a:	e78f      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 800190c:	0885      	lsrs	r5, r0, #2
        break;
 800190e:	e78d      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8001910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001914:	d18a      	bne.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8001916:	0945      	lsrs	r5, r0, #5
        break;
 8001918:	e788      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 800191a:	09c5      	lsrs	r5, r0, #7
        break;
 800191c:	e786      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800191e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001922:	609a      	str	r2, [r3, #8]
}
 8001924:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8001926:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800192a:	d0ae      	beq.n	800188a <ADC_ConfigureBoostMode+0x96>
 800192c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001930:	d0ab      	beq.n	800188a <ADC_ConfigureBoostMode+0x96>
 8001932:	e77b      	b.n	800182c <ADC_ConfigureBoostMode+0x38>
 8001934:	40022000 	.word	0x40022000
 8001938:	58026300 	.word	0x58026300
 800193c:	01312d00 	.word	0x01312d00
 8001940:	40022300 	.word	0x40022300
 8001944:	00bebc21 	.word	0x00bebc21
 8001948:	017d7841 	.word	0x017d7841
 800194c:	02faf081 	.word	0x02faf081

08001950 <HAL_ADC_Init>:
{
 8001950:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001952:	2300      	movs	r3, #0
{
 8001954:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001956:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001958:	2800      	cmp	r0, #0
 800195a:	f000 80a9 	beq.w	8001ab0 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800195e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8001960:	4604      	mov	r4, r0
 8001962:	2d00      	cmp	r5, #0
 8001964:	f000 80aa 	beq.w	8001abc <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001968:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800196a:	6893      	ldr	r3, [r2, #8]
 800196c:	009d      	lsls	r5, r3, #2
 800196e:	d503      	bpl.n	8001978 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001970:	6891      	ldr	r1, [r2, #8]
 8001972:	4b71      	ldr	r3, [pc, #452]	@ (8001b38 <HAL_ADC_Init+0x1e8>)
 8001974:	400b      	ands	r3, r1
 8001976:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001978:	6893      	ldr	r3, [r2, #8]
 800197a:	00d8      	lsls	r0, r3, #3
 800197c:	d416      	bmi.n	80019ac <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800197e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <HAL_ADC_Init+0x1ec>)
 8001980:	496f      	ldr	r1, [pc, #444]	@ (8001b40 <HAL_ADC_Init+0x1f0>)
 8001982:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001984:	6890      	ldr	r0, [r2, #8]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	fba1 1303 	umull	r1, r3, r1, r3
 800198c:	496d      	ldr	r1, [pc, #436]	@ (8001b44 <HAL_ADC_Init+0x1f4>)
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	4001      	ands	r1, r0
 8001992:	3301      	adds	r3, #1
 8001994:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001998:	6091      	str	r1, [r2, #8]
 800199a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800199c:	9b01      	ldr	r3, [sp, #4]
 800199e:	b12b      	cbz	r3, 80019ac <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019ac:	6893      	ldr	r3, [r2, #8]
 80019ae:	00d9      	lsls	r1, r3, #3
 80019b0:	f100 8082 	bmi.w	8001ab8 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80019b6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019c0:	432b      	orrs	r3, r5
 80019c2:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019c4:	6893      	ldr	r3, [r2, #8]
 80019c6:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019cc:	d16c      	bne.n	8001aa8 <HAL_ADC_Init+0x158>
 80019ce:	06db      	lsls	r3, r3, #27
 80019d0:	d46a      	bmi.n	8001aa8 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019de:	6893      	ldr	r3, [r2, #8]
 80019e0:	07de      	lsls	r6, r3, #31
 80019e2:	d40c      	bmi.n	80019fe <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019e4:	4b58      	ldr	r3, [pc, #352]	@ (8001b48 <HAL_ADC_Init+0x1f8>)
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f000 8081 	beq.w	8001aee <HAL_ADC_Init+0x19e>
 80019ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d07c      	beq.n	8001aee <HAL_ADC_Init+0x19e>
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <HAL_ADC_Init+0x1fc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	07d9      	lsls	r1, r3, #31
 80019fa:	f140 808a 	bpl.w	8001b12 <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80019fe:	f7ff fcd1 	bl	80013a4 <HAL_GetREVID>
 8001a02:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001a06:	68a1      	ldr	r1, [r4, #8]
 8001a08:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a0a:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a0c:	d85c      	bhi.n	8001ac8 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0e:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a12:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a14:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001a16:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a22:	6a23      	ldr	r3, [r4, #32]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001a2c:	b123      	cbz	r3, 8001a38 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a2e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a32:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a34:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a36:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	4945      	ldr	r1, [pc, #276]	@ (8001b50 <HAL_ADC_Init+0x200>)
 8001a3c:	68d8      	ldr	r0, [r3, #12]
 8001a3e:	4001      	ands	r1, r0
 8001a40:	4311      	orrs	r1, r2
 8001a42:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a4a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a4c:	d11c      	bne.n	8001a88 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a4e:	0712      	lsls	r2, r2, #28
 8001a50:	d41a      	bmi.n	8001a88 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a52:	68d8      	ldr	r0, [r3, #12]
 8001a54:	4a3f      	ldr	r2, [pc, #252]	@ (8001b54 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a56:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a58:	4002      	ands	r2, r0
 8001a5a:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001a5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001a60:	430a      	orrs	r2, r1
 8001a62:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001a64:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d054      	beq.n	8001b16 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a74:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001a76:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a7a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001a82:	f7ff feb7 	bl	80017f4 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a86:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a88:	68e2      	ldr	r2, [r4, #12]
 8001a8a:	2a01      	cmp	r2, #1
 8001a8c:	d027      	beq.n	8001ade <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a90:	f022 020f 	bic.w	r2, r2, #15
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a96:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8001a98:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001ab0:	2501      	movs	r5, #1
}
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e783      	b.n	80019c4 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8001abc:	f7fe fea8 	bl	8000810 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001ac6:	e74f      	b.n	8001968 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ac8:	2910      	cmp	r1, #16
 8001aca:	d1a0      	bne.n	8001a0e <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001acc:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ace:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ad0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ad4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	f042 021c 	orr.w	r2, r2, #28
 8001adc:	e79f      	b.n	8001a1e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ade:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ae0:	69a2      	ldr	r2, [r4, #24]
 8001ae2:	f021 010f 	bic.w	r1, r1, #15
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aec:	e7d3      	b.n	8001a96 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_ADC_Init+0x1f8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f013 0f01 	tst.w	r3, #1
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_ADC_Init+0x208>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	d180      	bne.n	80019fe <HAL_ADC_Init+0xae>
 8001afc:	07d8      	lsls	r0, r3, #31
 8001afe:	f53f af7e 	bmi.w	80019fe <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b02:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b04:	6893      	ldr	r3, [r2, #8]
 8001b06:	6861      	ldr	r1, [r4, #4]
 8001b08:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6093      	str	r3, [r2, #8]
}
 8001b10:	e775      	b.n	80019fe <HAL_ADC_Init+0xae>
 8001b12:	4a13      	ldr	r2, [pc, #76]	@ (8001b60 <HAL_ADC_Init+0x210>)
 8001b14:	e7f6      	b.n	8001b04 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b16:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001b1a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001b1c:	3901      	subs	r1, #1
 8001b1e:	6918      	ldr	r0, [r3, #16]
 8001b20:	4332      	orrs	r2, r6
 8001b22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	490e      	ldr	r1, [pc, #56]	@ (8001b64 <HAL_ADC_Init+0x214>)
 8001b2c:	4001      	ands	r1, r0
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	e79d      	b.n	8001a74 <HAL_ADC_Init+0x124>
 8001b38:	5fffffc0 	.word	0x5fffffc0
 8001b3c:	24000004 	.word	0x24000004
 8001b40:	053e2d63 	.word	0x053e2d63
 8001b44:	6fffffc0 	.word	0x6fffffc0
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	58026000 	.word	0x58026000
 8001b50:	fff0c003 	.word	0xfff0c003
 8001b54:	ffffbffc 	.word	0xffffbffc
 8001b58:	40022100 	.word	0x40022100
 8001b5c:	40022300 	.word	0x40022300
 8001b60:	58026300 	.word	0x58026300
 8001b64:	fc00f81e 	.word	0xfc00f81e

08001b68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b72:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b78:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001b7e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001b80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	05fa0000 	.word	0x05fa0000

08001b8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_NVIC_SetPriority+0x6c>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b96:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9e:	f1be 0f04 	cmp.w	lr, #4
 8001ba2:	bf28      	it	cs
 8001ba4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba8:	f1bc 0f06 	cmp.w	ip, #6
 8001bac:	d91a      	bls.n	8001be4 <HAL_NVIC_SetPriority+0x58>
 8001bae:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	fa03 f30c 	lsl.w	r3, r3, ip
 8001bba:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	fa03 f30e 	lsl.w	r3, r3, lr
 8001bc8:	ea21 0303 	bic.w	r3, r1, r3
 8001bcc:	fa03 f30c 	lsl.w	r3, r3, ip
 8001bd0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001bd8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001bda:	db06      	blt.n	8001bea <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_NVIC_SetPriority+0x70>)
 8001bde:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	4694      	mov	ip, r2
 8001be8:	e7e9      	b.n	8001bbe <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	f000 000f 	and.w	r0, r0, #15
 8001bee:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <HAL_NVIC_SetPriority+0x74>)
 8001bf0:	5413      	strb	r3, [r2, r0]
 8001bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	e000e400 	.word	0xe000e400
 8001c00:	e000ed14 	.word	0xe000ed14

08001c04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c04:	2800      	cmp	r0, #0
 8001c06:	db07      	blt.n	8001c18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f000 011f 	and.w	r1, r0, #31
 8001c0e:	4a03      	ldr	r2, [pc, #12]	@ (8001c1c <HAL_NVIC_EnableIRQ+0x18>)
 8001c10:	0940      	lsrs	r0, r0, #5
 8001c12:	408b      	lsls	r3, r1
 8001c14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	1e43      	subs	r3, r0, #1
 8001c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c26:	d301      	bcc.n	8001c2c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c28:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c2a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	4905      	ldr	r1, [pc, #20]	@ (8001c48 <HAL_SYSTICK_Config+0x28>)
 8001c34:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c38:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fba2 	bl	8001398 <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c54:	2c00      	cmp	r4, #0
 8001c56:	d06d      	beq.n	8001d34 <HAL_DMA_Abort+0xe8>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d164      	bne.n	8001d2a <HAL_DMA_Abort+0xde>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c60:	6825      	ldr	r5, [r4, #0]
 8001c62:	4606      	mov	r6, r0
 8001c64:	4bad      	ldr	r3, [pc, #692]	@ (8001f1c <HAL_DMA_Abort+0x2d0>)
 8001c66:	429d      	cmp	r5, r3
 8001c68:	d066      	beq.n	8001d38 <HAL_DMA_Abort+0xec>
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	429d      	cmp	r5, r3
 8001c6e:	d063      	beq.n	8001d38 <HAL_DMA_Abort+0xec>
 8001c70:	3318      	adds	r3, #24
 8001c72:	429d      	cmp	r5, r3
 8001c74:	f000 80f3 	beq.w	8001e5e <HAL_DMA_Abort+0x212>
 8001c78:	3318      	adds	r3, #24
 8001c7a:	429d      	cmp	r5, r3
 8001c7c:	f000 811a 	beq.w	8001eb4 <HAL_DMA_Abort+0x268>
 8001c80:	3318      	adds	r3, #24
 8001c82:	429d      	cmp	r5, r3
 8001c84:	f000 8125 	beq.w	8001ed2 <HAL_DMA_Abort+0x286>
 8001c88:	3318      	adds	r3, #24
 8001c8a:	429d      	cmp	r5, r3
 8001c8c:	f000 80ff 	beq.w	8001e8e <HAL_DMA_Abort+0x242>
 8001c90:	3318      	adds	r3, #24
 8001c92:	429d      	cmp	r5, r3
 8001c94:	f000 812e 	beq.w	8001ef4 <HAL_DMA_Abort+0x2a8>
 8001c98:	3318      	adds	r3, #24
 8001c9a:	429d      	cmp	r5, r3
 8001c9c:	f000 814a 	beq.w	8001f34 <HAL_DMA_Abort+0x2e8>
 8001ca0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001ca4:	429d      	cmp	r5, r3
 8001ca6:	f000 8158 	beq.w	8001f5a <HAL_DMA_Abort+0x30e>
 8001caa:	3318      	adds	r3, #24
 8001cac:	429d      	cmp	r5, r3
 8001cae:	f000 8163 	beq.w	8001f78 <HAL_DMA_Abort+0x32c>
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	429d      	cmp	r5, r3
 8001cb6:	f000 816e 	beq.w	8001f96 <HAL_DMA_Abort+0x34a>
 8001cba:	3318      	adds	r3, #24
 8001cbc:	429d      	cmp	r5, r3
 8001cbe:	f000 816c 	beq.w	8001f9a <HAL_DMA_Abort+0x34e>
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	429d      	cmp	r5, r3
 8001cc6:	f000 816a 	beq.w	8001f9e <HAL_DMA_Abort+0x352>
 8001cca:	3318      	adds	r3, #24
 8001ccc:	429d      	cmp	r5, r3
 8001cce:	f000 8168 	beq.w	8001fa2 <HAL_DMA_Abort+0x356>
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	f000 8168 	beq.w	8001faa <HAL_DMA_Abort+0x35e>
 8001cda:	3318      	adds	r3, #24
 8001cdc:	429d      	cmp	r5, r3
 8001cde:	f000 8162 	beq.w	8001fa6 <HAL_DMA_Abort+0x35a>
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ce2:	682b      	ldr	r3, [r5, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8001f20 <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ce6:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cea:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cec:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cee:	f000 80bf 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001cf2:	4b8c      	ldr	r3, [pc, #560]	@ (8001f24 <HAL_DMA_Abort+0x2d8>)
 8001cf4:	429d      	cmp	r5, r3
 8001cf6:	f000 80bb 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001cfa:	3314      	adds	r3, #20
 8001cfc:	429d      	cmp	r5, r3
 8001cfe:	f000 80b7 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001d02:	3314      	adds	r3, #20
 8001d04:	429d      	cmp	r5, r3
 8001d06:	f000 80b3 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	429d      	cmp	r5, r3
 8001d0e:	f000 80af 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001d12:	3314      	adds	r3, #20
 8001d14:	429d      	cmp	r5, r3
 8001d16:	f000 80ab 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001d1a:	3314      	adds	r3, #20
 8001d1c:	429d      	cmp	r5, r3
 8001d1e:	f000 80a7 	beq.w	8001e70 <HAL_DMA_Abort+0x224>
 8001d22:	3314      	adds	r3, #20
 8001d24:	429d      	cmp	r5, r3
 8001d26:	d114      	bne.n	8001d52 <HAL_DMA_Abort+0x106>
 8001d28:	e0a2      	b.n	8001e70 <HAL_DMA_Abort+0x224>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2a:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 8001d2c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001d30:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d38:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d3a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d3c:	f023 031e 	bic.w	r3, r3, #30
 8001d40:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d42:	696b      	ldr	r3, [r5, #20]
 8001d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d48:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	602b      	str	r3, [r5, #0]
 8001d5a:	e005      	b.n	8001d68 <HAL_DMA_Abort+0x11c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5c:	f7ff fb1c 	bl	8001398 <HAL_GetTick>
 8001d60:	1b83      	subs	r3, r0, r6
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	f200 808a 	bhi.w	8001e7c <HAL_DMA_Abort+0x230>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	07db      	lsls	r3, r3, #31
 8001d6c:	d4f6      	bmi.n	8001d5c <HAL_DMA_Abort+0x110>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	496a      	ldr	r1, [pc, #424]	@ (8001f1c <HAL_DMA_Abort+0x2d0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d72:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d74:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d78:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d7c:	d05e      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d7e:	3118      	adds	r1, #24
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d05b      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d84:	3118      	adds	r1, #24
 8001d86:	428b      	cmp	r3, r1
 8001d88:	d058      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d8a:	3118      	adds	r1, #24
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d055      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d90:	3118      	adds	r1, #24
 8001d92:	428b      	cmp	r3, r1
 8001d94:	d052      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d96:	3118      	adds	r1, #24
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d04f      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001d9c:	3118      	adds	r1, #24
 8001d9e:	428b      	cmp	r3, r1
 8001da0:	d04c      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001da2:	3118      	adds	r1, #24
 8001da4:	428b      	cmp	r3, r1
 8001da6:	d049      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001da8:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d045      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001db0:	3118      	adds	r1, #24
 8001db2:	428b      	cmp	r3, r1
 8001db4:	d042      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001db6:	3118      	adds	r1, #24
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d03f      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001dbc:	3118      	adds	r1, #24
 8001dbe:	428b      	cmp	r3, r1
 8001dc0:	d03c      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001dc2:	3118      	adds	r1, #24
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d039      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001dc8:	3118      	adds	r1, #24
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d036      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001dce:	3118      	adds	r1, #24
 8001dd0:	428b      	cmp	r3, r1
 8001dd2:	d033      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
 8001dd4:	3118      	adds	r1, #24
 8001dd6:	428b      	cmp	r3, r1
 8001dd8:	d030      	beq.n	8001e3c <HAL_DMA_Abort+0x1f0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dde:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_DMA_Abort+0x2d8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001de0:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de2:	484f      	ldr	r0, [pc, #316]	@ (8001f20 <HAL_DMA_Abort+0x2d4>)
 8001de4:	4950      	ldr	r1, [pc, #320]	@ (8001f28 <HAL_DMA_Abort+0x2dc>)
 8001de6:	4283      	cmp	r3, r0
 8001de8:	bf18      	it	ne
 8001dea:	4293      	cmpne	r3, r2
 8001dec:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8001df0:	bf0c      	ite	eq
 8001df2:	2201      	moveq	r2, #1
 8001df4:	2200      	movne	r2, #0
 8001df6:	428b      	cmp	r3, r1
 8001df8:	bf08      	it	eq
 8001dfa:	f042 0201 	orreq.w	r2, r2, #1
 8001dfe:	3128      	adds	r1, #40	@ 0x28
 8001e00:	4283      	cmp	r3, r0
 8001e02:	bf08      	it	eq
 8001e04:	f042 0201 	orreq.w	r2, r2, #1
 8001e08:	3028      	adds	r0, #40	@ 0x28
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	bf08      	it	eq
 8001e0e:	f042 0201 	orreq.w	r2, r2, #1
 8001e12:	3128      	adds	r1, #40	@ 0x28
 8001e14:	4283      	cmp	r3, r0
 8001e16:	bf08      	it	eq
 8001e18:	f042 0201 	orreq.w	r2, r2, #1
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	bf08      	it	eq
 8001e20:	f042 0201 	orreq.w	r2, r2, #1
 8001e24:	b96a      	cbnz	r2, 8001e42 <HAL_DMA_Abort+0x1f6>
 8001e26:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <HAL_DMA_Abort+0x2e0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00a      	beq.n	8001e42 <HAL_DMA_Abort+0x1f6>
    __HAL_UNLOCK(hdma);
 8001e2c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	2201      	movs	r2, #1
  return HAL_OK;
 8001e30:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001e32:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e36:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e3c:	233f      	movs	r3, #63	@ 0x3f
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8001e42:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e44:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8001e48:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ee      	beq.n	8001e2c <HAL_DMA_Abort+0x1e0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e4e:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e50:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e58:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e5a:	6048      	str	r0, [r1, #4]
 8001e5c:	e7e6      	b.n	8001e2c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_DMA_Abort+0x2e4>)
 8001e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e62:	f022 021e 	bic.w	r2, r2, #30
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e70:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e7a:	e76a      	b.n	8001d52 <HAL_DMA_Abort+0x106>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7c:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e7e:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8001e80:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e82:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 8001e84:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e88:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8001e8c:	e752      	b.n	8001d34 <HAL_DMA_Abort+0xe8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_DMA_Abort+0x2e4>)
 8001e90:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e94:	f022 021e 	bic.w	r2, r2, #30
 8001e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e9c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ea8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	e74e      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <HAL_DMA_Abort+0x2e4>)
 8001eb6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001eb8:	f022 021e 	bic.w	r2, r2, #30
 8001ebc:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ebe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ec4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ec6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	e73f      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_DMA_Abort+0x2e4>)
 8001ed4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ed6:	f022 021e 	bic.w	r2, r2, #30
 8001eda:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001edc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ee8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ef0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	e72e      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <HAL_DMA_Abort+0x2e4>)
 8001ef6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001efa:	f022 021e 	bic.w	r2, r2, #30
 8001efe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f02:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8001f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f0a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f0e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001f10:	6813      	ldr	r3, [r2, #0]
 8001f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f16:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f18:	e71b      	b.n	8001d52 <HAL_DMA_Abort+0x106>
 8001f1a:	bf00      	nop
 8001f1c:	40020010 	.word	0x40020010
 8001f20:	58025408 	.word	0x58025408
 8001f24:	5802541c 	.word	0x5802541c
 8001f28:	58025430 	.word	0x58025430
 8001f2c:	58025494 	.word	0x58025494
 8001f30:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f34:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <HAL_DMA_Abort+0x364>)
 8001f36:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001f3a:	f022 021e 	bic.w	r2, r2, #30
 8001f3e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f42:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8001f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f4e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f56:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f58:	e6fb      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	f022 021e 	bic.w	r2, r2, #30
 8001f62:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f6c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001f6e:	6813      	ldr	r3, [r2, #0]
 8001f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f76:	e6ec      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f78:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7c:	f022 021e 	bic.w	r2, r2, #30
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f88:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f92:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f94:	e6dd      	b.n	8001d52 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001f98:	e762      	b.n	8001e60 <HAL_DMA_Abort+0x214>
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001f9c:	e78b      	b.n	8001eb6 <HAL_DMA_Abort+0x26a>
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001fa0:	e798      	b.n	8001ed4 <HAL_DMA_Abort+0x288>
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001fa4:	e774      	b.n	8001e90 <HAL_DMA_Abort+0x244>
 8001fa6:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001fa8:	e7c5      	b.n	8001f36 <HAL_DMA_Abort+0x2ea>
 8001faa:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <HAL_DMA_Abort+0x368>)
 8001fac:	e7a3      	b.n	8001ef6 <HAL_DMA_Abort+0x2aa>
 8001fae:	bf00      	nop
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d062      	beq.n	8002082 <HAL_DMA_Abort_IT+0xca>
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbe:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d159      	bne.n	800207a <HAL_DMA_Abort_IT+0xc2>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fc6:	6802      	ldr	r2, [r0, #0]
 8001fc8:	4b57      	ldr	r3, [pc, #348]	@ (8002128 <HAL_DMA_Abort_IT+0x170>)
 8001fca:	4c58      	ldr	r4, [pc, #352]	@ (800212c <HAL_DMA_Abort_IT+0x174>)
 8001fcc:	4958      	ldr	r1, [pc, #352]	@ (8002130 <HAL_DMA_Abort_IT+0x178>)
 8001fce:	42a2      	cmp	r2, r4
 8001fd0:	bf18      	it	ne
 8001fd2:	429a      	cmpne	r2, r3
 8001fd4:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	428a      	cmp	r2, r1
 8001fe0:	bf08      	it	eq
 8001fe2:	f043 0301 	orreq.w	r3, r3, #1
 8001fe6:	3130      	adds	r1, #48	@ 0x30
 8001fe8:	42a2      	cmp	r2, r4
 8001fea:	bf08      	it	eq
 8001fec:	f043 0301 	orreq.w	r3, r3, #1
 8001ff0:	3430      	adds	r4, #48	@ 0x30
 8001ff2:	428a      	cmp	r2, r1
 8001ff4:	bf08      	it	eq
 8001ff6:	f043 0301 	orreq.w	r3, r3, #1
 8001ffa:	3130      	adds	r1, #48	@ 0x30
 8001ffc:	42a2      	cmp	r2, r4
 8001ffe:	bf08      	it	eq
 8002000:	f043 0301 	orreq.w	r3, r3, #1
 8002004:	3430      	adds	r4, #48	@ 0x30
 8002006:	428a      	cmp	r2, r1
 8002008:	bf08      	it	eq
 800200a:	f043 0301 	orreq.w	r3, r3, #1
 800200e:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 8002012:	42a2      	cmp	r2, r4
 8002014:	bf08      	it	eq
 8002016:	f043 0301 	orreq.w	r3, r3, #1
 800201a:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 800201e:	428a      	cmp	r2, r1
 8002020:	bf08      	it	eq
 8002022:	f043 0301 	orreq.w	r3, r3, #1
 8002026:	3130      	adds	r1, #48	@ 0x30
 8002028:	42a2      	cmp	r2, r4
 800202a:	bf08      	it	eq
 800202c:	f043 0301 	orreq.w	r3, r3, #1
 8002030:	3430      	adds	r4, #48	@ 0x30
 8002032:	428a      	cmp	r2, r1
 8002034:	bf08      	it	eq
 8002036:	f043 0301 	orreq.w	r3, r3, #1
 800203a:	3130      	adds	r1, #48	@ 0x30
 800203c:	42a2      	cmp	r2, r4
 800203e:	bf08      	it	eq
 8002040:	f043 0301 	orreq.w	r3, r3, #1
 8002044:	3430      	adds	r4, #48	@ 0x30
 8002046:	428a      	cmp	r2, r1
 8002048:	bf08      	it	eq
 800204a:	f043 0301 	orreq.w	r3, r3, #1
 800204e:	3130      	adds	r1, #48	@ 0x30
 8002050:	42a2      	cmp	r2, r4
 8002052:	bf08      	it	eq
 8002054:	f043 0301 	orreq.w	r3, r3, #1
 8002058:	428a      	cmp	r2, r1
 800205a:	bf08      	it	eq
 800205c:	f043 0301 	orreq.w	r3, r3, #1
 8002060:	b913      	cbnz	r3, 8002068 <HAL_DMA_Abort_IT+0xb0>
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <HAL_DMA_Abort_IT+0x17c>)
 8002064:	429a      	cmp	r2, r3
 8002066:	d10e      	bne.n	8002086 <HAL_DMA_Abort_IT+0xce>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002068:	2304      	movs	r3, #4
 800206a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8002076:	2000      	movs	r0, #0
}
 8002078:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800207e:	2001      	movs	r0, #1
}
 8002080:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002082:	2001      	movs	r0, #1
}
 8002084:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002086:	4b2c      	ldr	r3, [pc, #176]	@ (8002138 <HAL_DMA_Abort_IT+0x180>)
 8002088:	4d2c      	ldr	r5, [pc, #176]	@ (800213c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800208a:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800208c:	42aa      	cmp	r2, r5
 800208e:	bf18      	it	ne
 8002090:	429a      	cmpne	r2, r3
 8002092:	4c2b      	ldr	r4, [pc, #172]	@ (8002140 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002094:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002098:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020a2:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020a4:	42a2      	cmp	r2, r4
 80020a6:	bf08      	it	eq
 80020a8:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80020ac:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ae:	3428      	adds	r4, #40	@ 0x28
 80020b0:	42aa      	cmp	r2, r5
 80020b2:	bf08      	it	eq
 80020b4:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80020b8:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020bc:	42a2      	cmp	r2, r4
 80020be:	bf08      	it	eq
 80020c0:	f043 0301 	orreq.w	r3, r3, #1
 80020c4:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80020c6:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020c8:	42a2      	cmp	r2, r4
 80020ca:	bf08      	it	eq
 80020cc:	f043 0301 	orreq.w	r3, r3, #1
 80020d0:	491c      	ldr	r1, [pc, #112]	@ (8002144 <HAL_DMA_Abort_IT+0x18c>)
 80020d2:	428a      	cmp	r2, r1
 80020d4:	bf08      	it	eq
 80020d6:	f043 0301 	orreq.w	r3, r3, #1
 80020da:	b913      	cbnz	r3, 80020e2 <HAL_DMA_Abort_IT+0x12a>
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_DMA_Abort_IT+0x190>)
 80020de:	429a      	cmp	r2, r3
 80020e0:	d117      	bne.n	8002112 <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020e2:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020e6:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ea:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020ec:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020f4:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f6:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020f8:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80020fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020fc:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8002100:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002102:	b133      	cbz	r3, 8002112 <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002104:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002106:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800210a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800210e:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002110:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8002112:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8002114:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8002116:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8002118:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800211c:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0a8      	beq.n	8002076 <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 8002124:	4798      	blx	r3
 8002126:	e7a6      	b.n	8002076 <HAL_DMA_Abort_IT+0xbe>
 8002128:	40020010 	.word	0x40020010
 800212c:	40020028 	.word	0x40020028
 8002130:	40020040 	.word	0x40020040
 8002134:	400204b8 	.word	0x400204b8
 8002138:	5802541c 	.word	0x5802541c
 800213c:	58025408 	.word	0x58025408
 8002140:	58025430 	.word	0x58025430
 8002144:	58025480 	.word	0x58025480
 8002148:	58025494 	.word	0x58025494

0800214c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800214c:	680b      	ldr	r3, [r1, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 81dc 	beq.w	800250c <HAL_GPIO_Init+0x3c0>
 8002154:	4ab4      	ldr	r2, [pc, #720]	@ (8002428 <HAL_GPIO_Init+0x2dc>)
 8002156:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8002158:	f04f 0200 	mov.w	r2, #0
{
 800215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002160:	f04f 0b01 	mov.w	fp, #1
{
 8002164:	b085      	sub	sp, #20
 8002166:	f000 8105 	beq.w	8002374 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216a:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800216e:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002170:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8002174:	9b00      	ldr	r3, [sp, #0]
 8002176:	ea1c 0a03 	ands.w	sl, ip, r3
 800217a:	f000 814b 	beq.w	8002414 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800217e:	684d      	ldr	r5, [r1, #4]
 8002180:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002182:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002188:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002190:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002192:	f1b8 0f01 	cmp.w	r8, #1
 8002196:	f240 815d 	bls.w	8002454 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219a:	2f03      	cmp	r7, #3
 800219c:	f040 81cf 	bne.w	800253e <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 80021a4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021aa:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ae:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 80021b2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b4:	f000 812e 	beq.w	8002414 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4e9c      	ldr	r6, [pc, #624]	@ (800242c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ba:	f002 0703 	and.w	r7, r2, #3
 80021be:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c0:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021c4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ca:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ce:	4b98      	ldr	r3, [pc, #608]	@ (8002430 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d0:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 80021d4:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 80021d8:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021dc:	4298      	cmp	r0, r3
 80021de:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	f004 0402 	and.w	r4, r4, #2
 80021e6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80021ea:	9403      	str	r4, [sp, #12]
 80021ec:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80021ee:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021f0:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021f4:	f000 8178 	beq.w	80024e8 <HAL_GPIO_Init+0x39c>
 80021f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002434 <HAL_GPIO_Init+0x2e8>)
 80021fa:	4298      	cmp	r0, r3
 80021fc:	f000 80de 	beq.w	80023bc <HAL_GPIO_Init+0x270>
 8002200:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8002438 <HAL_GPIO_Init+0x2ec>
 8002204:	4560      	cmp	r0, ip
 8002206:	f000 817b 	beq.w	8002500 <HAL_GPIO_Init+0x3b4>
 800220a:	f8df c230 	ldr.w	ip, [pc, #560]	@ 800243c <HAL_GPIO_Init+0x2f0>
 800220e:	4560      	cmp	r0, ip
 8002210:	f000 817d 	beq.w	800250e <HAL_GPIO_Init+0x3c2>
 8002214:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8002440 <HAL_GPIO_Init+0x2f4>
 8002218:	4560      	cmp	r0, ip
 800221a:	f000 816b 	beq.w	80024f4 <HAL_GPIO_Init+0x3a8>
 800221e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8002444 <HAL_GPIO_Init+0x2f8>
 8002222:	4560      	cmp	r0, ip
 8002224:	f000 8179 	beq.w	800251a <HAL_GPIO_Init+0x3ce>
 8002228:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8002448 <HAL_GPIO_Init+0x2fc>
 800222c:	4560      	cmp	r0, ip
 800222e:	f000 817a 	beq.w	8002526 <HAL_GPIO_Init+0x3da>
 8002232:	f8df c218 	ldr.w	ip, [pc, #536]	@ 800244c <HAL_GPIO_Init+0x300>
 8002236:	4560      	cmp	r0, ip
 8002238:	f000 817b 	beq.w	8002532 <HAL_GPIO_Init+0x3e6>
 800223c:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8002450 <HAL_GPIO_Init+0x304>
 8002240:	4560      	cmp	r0, ip
 8002242:	bf0c      	ite	eq
 8002244:	f04f 0c09 	moveq.w	ip, #9
 8002248:	f04f 0c0a 	movne.w	ip, #10
 800224c:	fa0c f707 	lsl.w	r7, ip, r7
 8002250:	433c      	orrs	r4, r7
 8002252:	e0b8      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8002254:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002258:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225c:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002260:	fa06 f807 	lsl.w	r8, r6, r7
 8002264:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002268:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002270:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002278:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227c:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8002280:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8002284:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002288:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800228a:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228e:	fa06 fe07 	lsl.w	lr, r6, r7
 8002292:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8002296:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	d117      	bne.n	80022cc <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800229c:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022a0:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80022a2:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80022aa:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ae:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 80022b2:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022b6:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b8:	260f      	movs	r6, #15
 80022ba:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022be:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c0:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022c4:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80022c8:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80022ce:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022d4:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80022dc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022de:	d045      	beq.n	800236c <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e0:	4f52      	ldr	r7, [pc, #328]	@ (800242c <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022e2:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80022e8:	f044 0402 	orr.w	r4, r4, #2
 80022ec:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 80022f0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80022f4:	f022 0703 	bic.w	r7, r2, #3
 80022f8:	f004 0402 	and.w	r4, r4, #2
 80022fc:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8002300:	9403      	str	r4, [sp, #12]
 8002302:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002306:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002308:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800230c:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002310:	00a4      	lsls	r4, r4, #2
 8002312:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002318:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 800231e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8002322:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8002326:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002328:	f100 80d2 	bmi.w	80024d0 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 800232c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800232e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8002332:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8002334:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002336:	02ae      	lsls	r6, r5, #10
 8002338:	f100 80d3 	bmi.w	80024e2 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 800233c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800233e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8002342:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002344:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002348:	03ae      	lsls	r6, r5, #14
 800234a:	f100 80c7 	bmi.w	80024dc <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 800234e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002350:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002354:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002356:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800235a:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800235e:	f100 80ba 	bmi.w	80024d6 <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8002362:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002364:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8002368:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 800236c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	fa33 f402 	lsrs.w	r4, r3, r2
 8002372:	d055      	beq.n	8002420 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002374:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8002378:	ea13 0c0e 	ands.w	ip, r3, lr
 800237c:	d0f6      	beq.n	800236c <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800237e:	684d      	ldr	r5, [r1, #4]
 8002380:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002382:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002384:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002388:	fa06 f807 	lsl.w	r8, r6, r7
 800238c:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002390:	f104 38ff 	add.w	r8, r4, #4294967295
 8002394:	f1b8 0f01 	cmp.w	r8, #1
 8002398:	f67f af5c 	bls.w	8002254 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	2c03      	cmp	r4, #3
 800239e:	d095      	beq.n	80022cc <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 80023a0:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8002428 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a4:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 80023a6:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023aa:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ae:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b2:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 80023b6:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	e787      	b.n	80022cc <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023bc:	f04f 0c02 	mov.w	ip, #2
 80023c0:	fa0c f707 	lsl.w	r7, ip, r7
 80023c4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c6:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c8:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80023ca:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80023ce:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 80023d2:	bf4c      	ite	mi
 80023d4:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 80023d8:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023da:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 80023dc:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 80023e0:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 80023e4:	bf54      	ite	pl
 80023e6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80023e8:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ec:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80023ee:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80023f2:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80023f6:	bf54      	ite	pl
 80023f8:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80023fa:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fe:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002400:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002404:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002408:	bf54      	ite	pl
 800240a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800240c:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8002410:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8002414:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002416:	9b00      	ldr	r3, [sp, #0]
 8002418:	fa33 f402 	lsrs.w	r4, r3, r2
 800241c:	f47f aea8 	bne.w	8002170 <HAL_GPIO_Init+0x24>
  }
}
 8002420:	b005      	add	sp, #20
 8002422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002426:	bf00      	nop
 8002428:	58020000 	.word	0x58020000
 800242c:	58024400 	.word	0x58024400
 8002430:	58020400 	.word	0x58020400
 8002434:	58020800 	.word	0x58020800
 8002438:	58020c00 	.word	0x58020c00
 800243c:	58021000 	.word	0x58021000
 8002440:	58021400 	.word	0x58021400
 8002444:	58021800 	.word	0x58021800
 8002448:	58021c00 	.word	0x58021c00
 800244c:	58022000 	.word	0x58022000
 8002450:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8002454:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800245c:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002460:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002464:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002466:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800246a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246e:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002472:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247a:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247e:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8002482:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002486:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 800248a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800248e:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002492:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002496:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	f47f ae81 	bne.w	80021a0 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800249e:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024a2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80024a4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80024ac:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024b0:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024b8:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024ba:	230f      	movs	r3, #15
 80024bc:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024c0:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024c2:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024c6:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 80024ca:	f8c8 c020 	str.w	ip, [r8, #32]
 80024ce:	e667      	b.n	80021a0 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80024d0:	ea44 040c 	orr.w	r4, r4, ip
 80024d4:	e72b      	b.n	800232e <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 80024d6:	ea44 040c 	orr.w	r4, r4, ip
 80024da:	e743      	b.n	8002364 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 80024dc:	ea4c 0404 	orr.w	r4, ip, r4
 80024e0:	e736      	b.n	8002350 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 80024e2:	ea44 040c 	orr.w	r4, r4, ip
 80024e6:	e72a      	b.n	800233e <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024e8:	f04f 0c01 	mov.w	ip, #1
 80024ec:	fa0c f707 	lsl.w	r7, ip, r7
 80024f0:	433c      	orrs	r4, r7
 80024f2:	e768      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 80024f4:	f04f 0c05 	mov.w	ip, #5
 80024f8:	fa0c f707 	lsl.w	r7, ip, r7
 80024fc:	433c      	orrs	r4, r7
 80024fe:	e762      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 8002500:	f04f 0c03 	mov.w	ip, #3
 8002504:	fa0c f707 	lsl.w	r7, ip, r7
 8002508:	433c      	orrs	r4, r7
 800250a:	e75c      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 800250c:	4770      	bx	lr
 800250e:	f04f 0c04 	mov.w	ip, #4
 8002512:	fa0c f707 	lsl.w	r7, ip, r7
 8002516:	433c      	orrs	r4, r7
 8002518:	e755      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 800251a:	f04f 0c06 	mov.w	ip, #6
 800251e:	fa0c f707 	lsl.w	r7, ip, r7
 8002522:	433c      	orrs	r4, r7
 8002524:	e74f      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 8002526:	f04f 0c07 	mov.w	ip, #7
 800252a:	fa0c f707 	lsl.w	r7, ip, r7
 800252e:	433c      	orrs	r4, r7
 8002530:	e749      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
 8002532:	f04f 0c08 	mov.w	ip, #8
 8002536:	fa0c f707 	lsl.w	r7, ip, r7
 800253a:	433c      	orrs	r4, r7
 800253c:	e743      	b.n	80023c6 <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 800253e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002542:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002544:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002548:	fa03 fc04 	lsl.w	ip, r3, r4
 800254c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002550:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	e624      	b.n	80021a0 <HAL_GPIO_Init+0x54>
 8002556:	bf00      	nop

08002558 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	b902      	cbnz	r2, 800255c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800255a:	0409      	lsls	r1, r1, #16
 800255c:	6181      	str	r1, [r0, #24]
  }
}
 800255e:	4770      	bx	lr

08002560 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	d053      	beq.n	800260c <HAL_I2C_Init+0xac>
{
 8002564:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002566:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800256a:	4604      	mov	r4, r0
 800256c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002570:	2b00      	cmp	r3, #0
 8002572:	d046      	beq.n	8002602 <HAL_I2C_Init+0xa2>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002576:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002578:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800257a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800257e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002586:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800258c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800258e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002590:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002592:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002598:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259a:	d009      	beq.n	80025b0 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259c:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025a0:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e006      	b.n	80025be <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025b0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80025b4:	6099      	str	r1, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025be:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c4:	4912      	ldr	r1, [pc, #72]	@ (8002610 <HAL_I2C_Init+0xb0>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025c6:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c8:	4301      	orrs	r1, r0
 80025ca:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80025d2:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025d4:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d8:	4302      	orrs	r2, r0
 80025da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025de:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e2:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e6:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80025e8:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ea:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	f041 0101 	orr.w	r1, r1, #1
 80025f2:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fa:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 8002600:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002602:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002606:	f7fe f9f7 	bl	80009f8 <HAL_I2C_MspInit>
 800260a:	e7b3      	b.n	8002574 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800260c:	2001      	movs	r0, #1
}
 800260e:	4770      	bx	lr
 8002610:	02008000 	.word	0x02008000

08002614 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002614:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002618:	2a20      	cmp	r2, #32
 800261a:	d123      	bne.n	8002664 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800261c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002620:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002624:	4603      	mov	r3, r0
 8002626:	2a01      	cmp	r2, #1
 8002628:	d01c      	beq.n	8002664 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800262a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	2024      	movs	r0, #36	@ 0x24
{
 800262e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8002638:	6810      	ldr	r0, [r2, #0]
 800263a:	f020 0001 	bic.w	r0, r0, #1
 800263e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002640:	6810      	ldr	r0, [r2, #0]
 8002642:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002646:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002648:	6810      	ldr	r0, [r2, #0]
 800264a:	4301      	orrs	r1, r0

    return HAL_OK;
 800264c:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 800264e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	f041 0101 	orr.w	r1, r1, #1
 8002656:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800265c:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002660:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002664:	2002      	movs	r0, #2
}
 8002666:	4770      	bx	lr

08002668 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800266c:	2a20      	cmp	r2, #32
 800266e:	d122      	bne.n	80026b6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8002670:	4603      	mov	r3, r0
{
 8002672:	b500      	push	{lr}
 8002674:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002678:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800267c:	2a01      	cmp	r2, #1
 800267e:	d01c      	beq.n	80026ba <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002680:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002682:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002684:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800268c:	6810      	ldr	r0, [r2, #0]
 800268e:	f020 0001 	bic.w	r0, r0, #1
 8002692:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002694:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002696:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 800269a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800269e:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 80026a0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	f041 0101 	orr.w	r1, r1, #1
 80026a8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80026ae:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80026b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80026b6:	2002      	movs	r0, #2
}
 80026b8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80026ba:	2002      	movs	r0, #2
}
 80026bc:	f85d fb04 	ldr.w	pc, [sp], #4

080026c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026c0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026c2:	4c10      	ldr	r4, [pc, #64]	@ (8002704 <HAL_PWREx_ConfigSupply+0x44>)
 80026c4:	68e3      	ldr	r3, [r4, #12]
 80026c6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026ca:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026cc:	d105      	bne.n	80026da <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	1a18      	subs	r0, r3, r0
 80026d4:	bf18      	it	ne
 80026d6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80026d8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026da:	f023 0307 	bic.w	r3, r3, #7
 80026de:	4303      	orrs	r3, r0
 80026e0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80026e2:	f7fe fe59 	bl	8001398 <HAL_GetTick>
 80026e6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e8:	e005      	b.n	80026f6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026ea:	f7fe fe55 	bl	8001398 <HAL_GetTick>
 80026ee:	1b40      	subs	r0, r0, r5
 80026f0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80026f4:	d804      	bhi.n	8002700 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	049b      	lsls	r3, r3, #18
 80026fa:	d5f6      	bpl.n	80026ea <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80026fc:	2000      	movs	r0, #0
}
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
}
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	58024800 	.word	0x58024800

08002708 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002708:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800270a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800270c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800270e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002710:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002712:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002718:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800271c:	d036      	beq.n	800278c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800271e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002722:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002726:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800272a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800272e:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8002732:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002738:	ee06 2a90 	vmov	s13, r2
 800273c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8002740:	d002      	beq.n	8002748 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002742:	2902      	cmp	r1, #2
 8002744:	d042      	beq.n	80027cc <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002746:	b319      	cbz	r1, 8002790 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002748:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80027dc <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800274c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002766:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800276a:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002776:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002778:	ee07 3a10 	vmov	s14, r3
 800277c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002780:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002784:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002788:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800278c:	bc30      	pop	{r4, r5}
 800278e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	0692      	lsls	r2, r2, #26
 8002794:	d51d      	bpl.n	80027d2 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002796:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002798:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800279c:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027a0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027a8:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	ee06 2a10 	vmov	s12, r2
 80027b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80027ba:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80027be:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80027c2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80027c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ca:	e7d0      	b.n	800276e <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80027e4 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80027d0:	e7bc      	b.n	800274c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80027e8 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80027d6:	e7b9      	b.n	800274c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80027d8:	58024400 	.word	0x58024400
 80027dc:	4a742400 	.word	0x4a742400
 80027e0:	03d09000 	.word	0x03d09000
 80027e4:	4bbebc20 	.word	0x4bbebc20
 80027e8:	4c742400 	.word	0x4c742400

080027ec <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f000 82e7 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x5d4>
{
 80027f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	4604      	mov	r4, r0
 80027f8:	07d9      	lsls	r1, r3, #31
 80027fa:	d52e      	bpl.n	800285a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fc:	4997      	ldr	r1, [pc, #604]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80027fe:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002806:	2a10      	cmp	r2, #16
 8002808:	f000 80ee 	beq.w	80029e8 <HAL_RCC_OscConfig+0x1fc>
 800280c:	2a18      	cmp	r2, #24
 800280e:	f000 80e6 	beq.w	80029de <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002818:	f000 8111 	beq.w	8002a3e <HAL_RCC_OscConfig+0x252>
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8167 	beq.w	8002af0 <HAL_RCC_OscConfig+0x304>
 8002822:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002826:	4b8d      	ldr	r3, [pc, #564]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f000 8288 	beq.w	8002d3e <HAL_RCC_OscConfig+0x552>
 800282e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800283a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283c:	f7fe fdac 	bl	8001398 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002840:	4e86      	ldr	r6, [pc, #536]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002842:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002844:	e005      	b.n	8002852 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002846:	f7fe fda7 	bl	8001398 <HAL_GetTick>
 800284a:	1b40      	subs	r0, r0, r5
 800284c:	2864      	cmp	r0, #100	@ 0x64
 800284e:	f200 814d 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002852:	6833      	ldr	r3, [r6, #0]
 8002854:	039b      	lsls	r3, r3, #14
 8002856:	d5f6      	bpl.n	8002846 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	079d      	lsls	r5, r3, #30
 800285c:	d470      	bmi.n	8002940 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800285e:	06d9      	lsls	r1, r3, #27
 8002860:	d533      	bpl.n	80028ca <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4a7e      	ldr	r2, [pc, #504]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002864:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002866:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002868:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800286c:	2b08      	cmp	r3, #8
 800286e:	f000 80cb 	beq.w	8002a08 <HAL_RCC_OscConfig+0x21c>
 8002872:	2b18      	cmp	r3, #24
 8002874:	f000 80c3 	beq.w	80029fe <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002878:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800287a:	4d78      	ldr	r5, [pc, #480]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 816f 	beq.w	8002b60 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800288a:	f7fe fd85 	bl	8001398 <HAL_GetTick>
 800288e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002890:	e005      	b.n	800289e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002892:	f7fe fd81 	bl	8001398 <HAL_GetTick>
 8002896:	1b80      	subs	r0, r0, r6
 8002898:	2802      	cmp	r0, #2
 800289a:	f200 8127 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	05db      	lsls	r3, r3, #23
 80028a2:	d5f6      	bpl.n	8002892 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a4:	f7fe fd7e 	bl	80013a4 <HAL_GetREVID>
 80028a8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80028ac:	4298      	cmp	r0, r3
 80028ae:	f200 8267 	bhi.w	8002d80 <HAL_RCC_OscConfig+0x594>
 80028b2:	6a22      	ldr	r2, [r4, #32]
 80028b4:	686b      	ldr	r3, [r5, #4]
 80028b6:	2a20      	cmp	r2, #32
 80028b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028bc:	bf0c      	ite	eq
 80028be:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80028c6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	071d      	lsls	r5, r3, #28
 80028cc:	d516      	bpl.n	80028fc <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ce:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80028d0:	4d62      	ldr	r5, [pc, #392]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8122 	beq.w	8002b1c <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80028d8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd5a 	bl	8001398 <HAL_GetTick>
 80028e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe fd56 	bl	8001398 <HAL_GetTick>
 80028ec:	1b80      	subs	r0, r0, r6
 80028ee:	2802      	cmp	r0, #2
 80028f0:	f200 80fc 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028f4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80028f6:	0798      	lsls	r0, r3, #30
 80028f8:	d5f6      	bpl.n	80028e8 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	069a      	lsls	r2, r3, #26
 80028fe:	d516      	bpl.n	800292e <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002900:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002902:	4d56      	ldr	r5, [pc, #344]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 811a 	beq.w	8002b3e <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002910:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002912:	f7fe fd41 	bl	8001398 <HAL_GetTick>
 8002916:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002918:	e005      	b.n	8002926 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291a:	f7fe fd3d 	bl	8001398 <HAL_GetTick>
 800291e:	1b80      	subs	r0, r0, r6
 8002920:	2802      	cmp	r0, #2
 8002922:	f200 80e3 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	049f      	lsls	r7, r3, #18
 800292a:	d5f6      	bpl.n	800291a <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	0759      	lsls	r1, r3, #29
 8002930:	f100 808b 	bmi.w	8002a4a <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 80bf 	bne.w	8002aba <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 800293c:	2000      	movs	r0, #0
}
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002940:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002942:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002944:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002946:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800294a:	d12d      	bne.n	80029a8 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800294e:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0759      	lsls	r1, r3, #29
 8002954:	d501      	bpl.n	800295a <HAL_RCC_OscConfig+0x16e>
 8002956:	2a00      	cmp	r2, #0
 8002958:	d04f      	beq.n	80029fa <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800295a:	4d40      	ldr	r5, [pc, #256]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	f023 0319 	bic.w	r3, r3, #25
 8002962:	4313      	orrs	r3, r2
 8002964:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002966:	f7fe fd17 	bl	8001398 <HAL_GetTick>
 800296a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296c:	e005      	b.n	800297a <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fd13 	bl	8001398 <HAL_GetTick>
 8002972:	1b80      	subs	r0, r0, r6
 8002974:	2802      	cmp	r0, #2
 8002976:	f200 80b9 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	075b      	lsls	r3, r3, #29
 800297e:	d5f6      	bpl.n	800296e <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	f7fe fd10 	bl	80013a4 <HAL_GetREVID>
 8002984:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002988:	4298      	cmp	r0, r3
 800298a:	f200 8110 	bhi.w	8002bae <HAL_RCC_OscConfig+0x3c2>
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	686b      	ldr	r3, [r5, #4]
 8002992:	2a40      	cmp	r2, #64	@ 0x40
 8002994:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002998:	bf0c      	ite	eq
 800299a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800299e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80029a2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	e75a      	b.n	800285e <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a8:	2b18      	cmp	r3, #24
 80029aa:	f000 80fc 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029ae:	4d2b      	ldr	r5, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029b2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	f000 80e5 	beq.w	8002b84 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029ba:	f023 0319 	bic.w	r3, r3, #25
 80029be:	4313      	orrs	r3, r2
 80029c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029c2:	f7fe fce9 	bl	8001398 <HAL_GetTick>
 80029c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c8:	e005      	b.n	80029d6 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe fce5 	bl	8001398 <HAL_GetTick>
 80029ce:	1b80      	subs	r0, r0, r6
 80029d0:	2802      	cmp	r0, #2
 80029d2:	f200 808b 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d6:	682b      	ldr	r3, [r5, #0]
 80029d8:	075f      	lsls	r7, r3, #29
 80029da:	d5f6      	bpl.n	80029ca <HAL_RCC_OscConfig+0x1de>
 80029dc:	e7d0      	b.n	8002980 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029de:	f001 0103 	and.w	r1, r1, #3
 80029e2:	2902      	cmp	r1, #2
 80029e4:	f47f af15 	bne.w	8002812 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	0392      	lsls	r2, r2, #14
 80029ee:	f57f af34 	bpl.w	800285a <HAL_RCC_OscConfig+0x6e>
 80029f2:	6862      	ldr	r2, [r4, #4]
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f47f af30 	bne.w	800285a <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
}
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029fe:	f002 0203 	and.w	r2, r2, #3
 8002a02:	2a01      	cmp	r2, #1
 8002a04:	f47f af38 	bne.w	8002878 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	05da      	lsls	r2, r3, #23
 8002a0e:	d502      	bpl.n	8002a16 <HAL_RCC_OscConfig+0x22a>
 8002a10:	69e3      	ldr	r3, [r4, #28]
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d1f1      	bne.n	80029fa <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a16:	f7fe fcc5 	bl	80013a4 <HAL_GetREVID>
 8002a1a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002a1e:	4298      	cmp	r0, r3
 8002a20:	f200 80ce 	bhi.w	8002bc0 <HAL_RCC_OscConfig+0x3d4>
 8002a24:	6a22      	ldr	r2, [r4, #32]
 8002a26:	2a20      	cmp	r2, #32
 8002a28:	f000 81b9 	beq.w	8002d9e <HAL_RCC_OscConfig+0x5b2>
 8002a2c:	490b      	ldr	r1, [pc, #44]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a2e:	684b      	ldr	r3, [r1, #4]
 8002a30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a34:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002a38:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	e745      	b.n	80028ca <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a48:	e6f8      	b.n	800283c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002a4a:	4d05      	ldr	r5, [pc, #20]	@ (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002a54:	f7fe fca0 	bl	8001398 <HAL_GetTick>
 8002a58:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x282>
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe fc98 	bl	8001398 <HAL_GetTick>
 8002a68:	1b80      	subs	r0, r0, r6
 8002a6a:	2864      	cmp	r0, #100	@ 0x64
 8002a6c:	d83e      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	05da      	lsls	r2, r3, #23
 8002a72:	d5f7      	bpl.n	8002a64 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	68a3      	ldr	r3, [r4, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	f000 818b 	beq.w	8002d92 <HAL_RCC_OscConfig+0x5a6>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8166 	beq.w	8002d4e <HAL_RCC_OscConfig+0x562>
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	4b85      	ldr	r3, [pc, #532]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
 8002a86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a88:	f000 8192 	beq.w	8002db0 <HAL_RCC_OscConfig+0x5c4>
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a94:	f022 0204 	bic.w	r2, r2, #4
 8002a98:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fc7d 	bl	8001398 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9e:	4e7f      	ldr	r6, [pc, #508]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002aa4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa6:	e004      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fc76 	bl	8001398 <HAL_GetTick>
 8002aac:	1b40      	subs	r0, r0, r5
 8002aae:	42b8      	cmp	r0, r7
 8002ab0:	d81c      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002ab4:	079b      	lsls	r3, r3, #30
 8002ab6:	d5f7      	bpl.n	8002aa8 <HAL_RCC_OscConfig+0x2bc>
 8002ab8:	e73c      	b.n	8002934 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aba:	4d78      	ldr	r5, [pc, #480]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
 8002abc:	692a      	ldr	r2, [r5, #16]
 8002abe:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002ac2:	2a18      	cmp	r2, #24
 8002ac4:	f000 80ee 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad2:	d07f      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fc60 	bl	8001398 <HAL_GetTick>
 8002ad8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ada:	682b      	ldr	r3, [r5, #0]
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	f57f af2d 	bpl.w	800293c <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fc59 	bl	8001398 <HAL_GetTick>
 8002ae6:	1b00      	subs	r0, r0, r4
 8002ae8:	2802      	cmp	r0, #2
 8002aea:	d9f6      	bls.n	8002ada <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
}
 8002aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	4d6a      	ldr	r5, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af8:	602b      	str	r3, [r5, #0]
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b02:	f7fe fc49 	bl	8001398 <HAL_GetTick>
 8002b06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b08:	e004      	b.n	8002b14 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fc45 	bl	8001398 <HAL_GetTick>
 8002b0e:	1b80      	subs	r0, r0, r6
 8002b10:	2864      	cmp	r0, #100	@ 0x64
 8002b12:	d8eb      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	039f      	lsls	r7, r3, #14
 8002b18:	d4f7      	bmi.n	8002b0a <HAL_RCC_OscConfig+0x31e>
 8002b1a:	e69d      	b.n	8002858 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002b24:	f7fe fc38 	bl	8001398 <HAL_GetTick>
 8002b28:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2a:	e004      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fc34 	bl	8001398 <HAL_GetTick>
 8002b30:	1b80      	subs	r0, r0, r6
 8002b32:	2802      	cmp	r0, #2
 8002b34:	d8da      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b36:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002b38:	0799      	lsls	r1, r3, #30
 8002b3a:	d4f7      	bmi.n	8002b2c <HAL_RCC_OscConfig+0x340>
 8002b3c:	e6dd      	b.n	80028fa <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b44:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b46:	f7fe fc27 	bl	8001398 <HAL_GetTick>
 8002b4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4e:	f7fe fc23 	bl	8001398 <HAL_GetTick>
 8002b52:	1b80      	subs	r0, r0, r6
 8002b54:	2802      	cmp	r0, #2
 8002b56:	d8c9      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	0498      	lsls	r0, r3, #18
 8002b5c:	d4f7      	bmi.n	8002b4e <HAL_RCC_OscConfig+0x362>
 8002b5e:	e6e5      	b.n	800292c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b68:	f7fe fc16 	bl	8001398 <HAL_GetTick>
 8002b6c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b6e:	e004      	b.n	8002b7a <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b70:	f7fe fc12 	bl	8001398 <HAL_GetTick>
 8002b74:	1b80      	subs	r0, r0, r6
 8002b76:	2802      	cmp	r0, #2
 8002b78:	d8b8      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	05df      	lsls	r7, r3, #23
 8002b7e:	d4f7      	bmi.n	8002b70 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	e6a2      	b.n	80028ca <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fc05 	bl	8001398 <HAL_GetTick>
 8002b8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b90:	e004      	b.n	8002b9c <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fc01 	bl	8001398 <HAL_GetTick>
 8002b96:	1b80      	subs	r0, r0, r6
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d8a7      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	0758      	lsls	r0, r3, #29
 8002ba0:	d4f7      	bmi.n	8002b92 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	e65b      	b.n	800285e <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ba6:	0790      	lsls	r0, r2, #30
 8002ba8:	f47f af01 	bne.w	80029ae <HAL_RCC_OscConfig+0x1c2>
 8002bac:	e6ce      	b.n	800294c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	686b      	ldr	r3, [r5, #4]
 8002bb0:	6922      	ldr	r2, [r4, #16]
 8002bb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002bb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bba:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	e64e      	b.n	800285e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc0:	4a36      	ldr	r2, [pc, #216]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
 8002bc2:	6a21      	ldr	r1, [r4, #32]
 8002bc4:	68d3      	ldr	r3, [r2, #12]
 8002bc6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002bca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002bce:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	e67a      	b.n	80028ca <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fbe0 	bl	8001398 <HAL_GetTick>
 8002bd8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bda:	e004      	b.n	8002be6 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe fbdc 	bl	8001398 <HAL_GetTick>
 8002be0:	1b80      	subs	r0, r0, r6
 8002be2:	2802      	cmp	r0, #2
 8002be4:	d882      	bhi.n	8002aec <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	0199      	lsls	r1, r3, #6
 8002bea:	d4f7      	bmi.n	8002bdc <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bec:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002bee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <HAL_RCC_OscConfig+0x4b4>)
 8002bf0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002bf8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002bfc:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002bfe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002c00:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8002c04:	3901      	subs	r1, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	0412      	lsls	r2, r2, #16
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	0612      	lsls	r2, r2, #24
 8002c22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002c26:	4313      	orrs	r3, r2
 8002c28:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c32:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002c34:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002c36:	f36f 03cf 	bfc	r3, #3, #13
 8002c3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c3e:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c40:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c44:	f023 030c 	bic.w	r3, r3, #12
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c4c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c4e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	4313      	orrs	r3, r2
 8002c56:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c58:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c60:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c66:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c68:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c6e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c70:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c80:	f7fe fb8a 	bl	8001398 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c84:	4d05      	ldr	r5, [pc, #20]	@ (8002c9c <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 8002c86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	019a      	lsls	r2, r3, #6
 8002c8c:	f53f ae56 	bmi.w	800293c <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fb82 	bl	8001398 <HAL_GetTick>
 8002c94:	1b00      	subs	r0, r0, r4
 8002c96:	2802      	cmp	r0, #2
 8002c98:	d9f6      	bls.n	8002c88 <HAL_RCC_OscConfig+0x49c>
 8002c9a:	e727      	b.n	8002aec <HAL_RCC_OscConfig+0x300>
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca4:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ca6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ca8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	f43f aea6 	beq.w	80029fa <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	f47f aea0 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cba:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f47f ae9a 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cc8:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002ccc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	f47f ae93 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cd6:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002cda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f47f ae8c 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ce4:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f47f ae85 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cf0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002cf2:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002cf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf8:	4298      	cmp	r0, r3
 8002cfa:	f47f ae7e 	bne.w	80029fa <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cfe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d00:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d02:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f43f ae18 	beq.w	800293c <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <HAL_RCC_OscConfig+0x5d8>)
 8002d0e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002d16:	f7fe fb3f 	bl	8001398 <HAL_GetTick>
 8002d1a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d1c:	f7fe fb3c 	bl	8001398 <HAL_GetTick>
 8002d20:	42a8      	cmp	r0, r5
 8002d22:	d0fb      	beq.n	8002d1c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <HAL_RCC_OscConfig+0x5d8>)
 8002d26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002d28:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002d2a:	f36f 03cf 	bfc	r3, #3, #13
 8002d2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d32:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d34:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d3c:	e5fe      	b.n	800293c <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d4a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	e576      	b.n	800283c <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	4d1d      	ldr	r5, [pc, #116]	@ (8002dc4 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	672b      	str	r3, [r5, #112]	@ 0x70
 8002d5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002d64:	f7fe fb18 	bl	8001398 <HAL_GetTick>
 8002d68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fb14 	bl	8001398 <HAL_GetTick>
 8002d70:	1b80      	subs	r0, r0, r6
 8002d72:	42b8      	cmp	r0, r7
 8002d74:	f63f aeba 	bhi.w	8002aec <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d78:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002d7a:	0798      	lsls	r0, r3, #30
 8002d7c:	d4f6      	bmi.n	8002d6c <HAL_RCC_OscConfig+0x580>
 8002d7e:	e5d9      	b.n	8002934 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d80:	68eb      	ldr	r3, [r5, #12]
 8002d82:	6a22      	ldr	r2, [r4, #32]
 8002d84:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002d88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d8c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	e59b      	b.n	80028ca <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d92:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <HAL_RCC_OscConfig+0x5d8>)
 8002d94:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9c:	e67d      	b.n	8002a9a <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d9e:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <HAL_RCC_OscConfig+0x5d8>)
 8002da0:	6853      	ldr	r3, [r2, #4]
 8002da2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002da6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002daa:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	e58c      	b.n	80028ca <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	f042 0204 	orr.w	r2, r2, #4
 8002db4:	671a      	str	r2, [r3, #112]	@ 0x70
 8002db6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbe:	e66c      	b.n	8002a9a <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
}
 8002dc2:	4770      	bx	lr
 8002dc4:	58024400 	.word	0x58024400

08002dc8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002dca:	6913      	ldr	r3, [r2, #16]
 8002dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d04f      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0xac>
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x26>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d14d      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	0699      	lsls	r1, r3, #26
 8002de0:	d54c      	bpl.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	4839      	ldr	r0, [pc, #228]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8002de6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002dea:	40d8      	lsrs	r0, r3
 8002dec:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8002df0:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002df2:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002df4:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8002df6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dfa:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dfc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002e00:	d036      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e02:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e06:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e0a:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e0e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e12:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 8002e16:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1c:	ee06 3a90 	vmov	s13, r3
 8002e20:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x64>
 8002e26:	2902      	cmp	r1, #2
 8002e28:	d048      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0xf4>
 8002e2a:	b349      	cbz	r1, 8002e80 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002ed0 <HAL_RCC_GetSysClockFreq+0x108>
 8002e30:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002e34:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a10 	vmov	s14, r3
 8002e3e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002e42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e46:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002e4a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002e4e:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e52:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002e5a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6c:	ee17 0a90 	vmov	r0, s15
}
 8002e70:	bc30      	pop	{r4, r5}
 8002e72:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e74:	4817      	ldr	r0, [pc, #92]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e76:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8002e78:	4817      	ldr	r0, [pc, #92]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e7a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e7c:	4813      	ldr	r0, [pc, #76]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x104>)
}
 8002e7e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e80:	6813      	ldr	r3, [r2, #0]
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	d51d      	bpl.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e86:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e88:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002e8c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e8e:	490f      	ldr	r1, [pc, #60]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8002e90:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e98:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e9a:	ee07 3a10 	vmov	s14, r3
 8002e9e:	ee06 1a10 	vmov	s12, r1
 8002ea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ea6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002eaa:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002eae:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002eb2:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8002eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eba:	e7ca      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ebc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002edc <HAL_RCC_GetSysClockFreq+0x114>
 8002ec0:	e7b6      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002ee0 <HAL_RCC_GetSysClockFreq+0x118>
 8002ec6:	e7b3      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x68>
 8002ec8:	58024400 	.word	0x58024400
 8002ecc:	03d09000 	.word	0x03d09000
 8002ed0:	4a742400 	.word	0x4a742400
 8002ed4:	017d7840 	.word	0x017d7840
 8002ed8:	003d0900 	.word	0x003d0900
 8002edc:	4bbebc20 	.word	0x4bbebc20
 8002ee0:	4c742400 	.word	0x4c742400

08002ee4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	f000 810e 	beq.w	8003106 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eea:	4a8d      	ldr	r2, [pc, #564]	@ (8003120 <HAL_RCC_ClockConfig+0x23c>)
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	428b      	cmp	r3, r1
{
 8002ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef8:	4604      	mov	r4, r0
 8002efa:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002efc:	d20c      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	f023 030f 	bic.w	r3, r3, #15
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	6813      	ldr	r3, [r2, #0]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
}
 8002f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	0758      	lsls	r0, r3, #29
 8002f1c:	d50b      	bpl.n	8002f36 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f1e:	4981      	ldr	r1, [pc, #516]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	6920      	ldr	r0, [r4, #16]
 8002f22:	698a      	ldr	r2, [r1, #24]
 8002f24:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f28:	4290      	cmp	r0, r2
 8002f2a:	d904      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f2c:	698a      	ldr	r2, [r1, #24]
 8002f2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f32:	4302      	orrs	r2, r0
 8002f34:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f36:	0719      	lsls	r1, r3, #28
 8002f38:	d50b      	bpl.n	8002f52 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f3a:	497a      	ldr	r1, [pc, #488]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	6960      	ldr	r0, [r4, #20]
 8002f3e:	69ca      	ldr	r2, [r1, #28]
 8002f40:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f44:	4290      	cmp	r0, r2
 8002f46:	d904      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f48:	69ca      	ldr	r2, [r1, #28]
 8002f4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f4e:	4302      	orrs	r2, r0
 8002f50:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f52:	06da      	lsls	r2, r3, #27
 8002f54:	d50b      	bpl.n	8002f6e <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f56:	4973      	ldr	r1, [pc, #460]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	69a0      	ldr	r0, [r4, #24]
 8002f5a:	69ca      	ldr	r2, [r1, #28]
 8002f5c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002f60:	4290      	cmp	r0, r2
 8002f62:	d904      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	69ca      	ldr	r2, [r1, #28]
 8002f66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f6a:	4302      	orrs	r2, r0
 8002f6c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f6e:	069f      	lsls	r7, r3, #26
 8002f70:	d50b      	bpl.n	8002f8a <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f72:	496c      	ldr	r1, [pc, #432]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	69e0      	ldr	r0, [r4, #28]
 8002f76:	6a0a      	ldr	r2, [r1, #32]
 8002f78:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d904      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f80:	6a0a      	ldr	r2, [r1, #32]
 8002f82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f86:	4302      	orrs	r2, r0
 8002f88:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8a:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8c:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	f140 80ab 	bpl.w	80030ea <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f94:	4e63      	ldr	r6, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002f96:	68e0      	ldr	r0, [r4, #12]
 8002f98:	69b1      	ldr	r1, [r6, #24]
 8002f9a:	f001 010f 	and.w	r1, r1, #15
 8002f9e:	4288      	cmp	r0, r1
 8002fa0:	d904      	bls.n	8002fac <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa2:	69b1      	ldr	r1, [r6, #24]
 8002fa4:	f021 010f 	bic.w	r1, r1, #15
 8002fa8:	4301      	orrs	r1, r0
 8002faa:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d030      	beq.n	8003012 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8002fb2:	68a1      	ldr	r1, [r4, #8]
 8002fb4:	6993      	ldr	r3, [r2, #24]
 8002fb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	2902      	cmp	r1, #2
 8002fc4:	f000 80a1 	beq.w	800310a <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	2903      	cmp	r1, #3
 8002fca:	f000 8098 	beq.w	80030fe <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fce:	2901      	cmp	r1, #1
 8002fd0:	f000 80a1 	beq.w	8003116 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd4:	075f      	lsls	r7, r3, #29
 8002fd6:	d59c      	bpl.n	8002f12 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd8:	4e52      	ldr	r6, [pc, #328]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fda:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fde:	6933      	ldr	r3, [r6, #16]
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f9d6 	bl	8001398 <HAL_GetTick>
 8002fec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e005      	b.n	8002ffc <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe f9d2 	bl	8001398 <HAL_GetTick>
 8002ff4:	1bc0      	subs	r0, r0, r7
 8002ff6:	4540      	cmp	r0, r8
 8002ff8:	f200 808b 	bhi.w	8003112 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffc:	6933      	ldr	r3, [r6, #16]
 8002ffe:	6862      	ldr	r2, [r4, #4]
 8003000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003004:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003008:	d1f2      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	079e      	lsls	r6, r3, #30
 800300e:	d506      	bpl.n	800301e <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	4944      	ldr	r1, [pc, #272]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8003014:	698a      	ldr	r2, [r1, #24]
 8003016:	f002 020f 	and.w	r2, r2, #15
 800301a:	4290      	cmp	r0, r2
 800301c:	d369      	bcc.n	80030f2 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301e:	4940      	ldr	r1, [pc, #256]	@ (8003120 <HAL_RCC_ClockConfig+0x23c>)
 8003020:	680a      	ldr	r2, [r1, #0]
 8003022:	f002 020f 	and.w	r2, r2, #15
 8003026:	42aa      	cmp	r2, r5
 8003028:	d90a      	bls.n	8003040 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	680a      	ldr	r2, [r1, #0]
 800302c:	f022 020f 	bic.w	r2, r2, #15
 8003030:	432a      	orrs	r2, r5
 8003032:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003034:	680a      	ldr	r2, [r1, #0]
 8003036:	f002 020f 	and.w	r2, r2, #15
 800303a:	42aa      	cmp	r2, r5
 800303c:	f47f af69 	bne.w	8002f12 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003040:	0758      	lsls	r0, r3, #29
 8003042:	d50b      	bpl.n	800305c <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8003046:	6920      	ldr	r0, [r4, #16]
 8003048:	698a      	ldr	r2, [r1, #24]
 800304a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800304e:	4290      	cmp	r0, r2
 8003050:	d204      	bcs.n	800305c <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003052:	698a      	ldr	r2, [r1, #24]
 8003054:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003058:	4302      	orrs	r2, r0
 800305a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	0719      	lsls	r1, r3, #28
 800305e:	d50b      	bpl.n	8003078 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003060:	4930      	ldr	r1, [pc, #192]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 8003062:	6960      	ldr	r0, [r4, #20]
 8003064:	69ca      	ldr	r2, [r1, #28]
 8003066:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800306a:	4290      	cmp	r0, r2
 800306c:	d204      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800306e:	69ca      	ldr	r2, [r1, #28]
 8003070:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003074:	4302      	orrs	r2, r0
 8003076:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	06da      	lsls	r2, r3, #27
 800307a:	d50b      	bpl.n	8003094 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800307c:	4929      	ldr	r1, [pc, #164]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 800307e:	69a0      	ldr	r0, [r4, #24]
 8003080:	69ca      	ldr	r2, [r1, #28]
 8003082:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003086:	4290      	cmp	r0, r2
 8003088:	d204      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800308a:	69ca      	ldr	r2, [r1, #28]
 800308c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003090:	4302      	orrs	r2, r0
 8003092:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	d50b      	bpl.n	80030b0 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 800309a:	69e1      	ldr	r1, [r4, #28]
 800309c:	6a13      	ldr	r3, [r2, #32]
 800309e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a2:	4299      	cmp	r1, r3
 80030a4:	d204      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030a6:	6a13      	ldr	r3, [r2, #32]
 80030a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b0:	f7ff fe8a 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_RCC_ClockConfig+0x240>)
 80030b6:	4603      	mov	r3, r0
 80030b8:	481b      	ldr	r0, [pc, #108]	@ (8003128 <HAL_RCC_ClockConfig+0x244>)
 80030ba:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030bc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030be:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80030c2:	4d1a      	ldr	r5, [pc, #104]	@ (800312c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c4:	f002 020f 	and.w	r2, r2, #15
 80030c8:	4c19      	ldr	r4, [pc, #100]	@ (8003130 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ca:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030cc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ce:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80030d2:	4818      	ldr	r0, [pc, #96]	@ (8003134 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030d8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80030da:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80030dc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030de:	40d3      	lsrs	r3, r2
 80030e0:	6023      	str	r3, [r4, #0]
}
 80030e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80030e6:	f7fe b8f5 	b.w	80012d4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	f47f af60 	bne.w	8002fb0 <HAL_RCC_ClockConfig+0xcc>
 80030f0:	e795      	b.n	800301e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f2:	698a      	ldr	r2, [r1, #24]
 80030f4:	f022 020f 	bic.w	r2, r2, #15
 80030f8:	4302      	orrs	r2, r0
 80030fa:	618a      	str	r2, [r1, #24]
 80030fc:	e78f      	b.n	800301e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	f53f af6a 	bmi.w	8002fd8 <HAL_RCC_ClockConfig+0xf4>
 8003104:	e705      	b.n	8002f12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003106:	2001      	movs	r0, #1
}
 8003108:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310a:	0398      	lsls	r0, r3, #14
 800310c:	f53f af64 	bmi.w	8002fd8 <HAL_RCC_ClockConfig+0xf4>
 8003110:	e6ff      	b.n	8002f12 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
 8003114:	e6fe      	b.n	8002f14 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003116:	05db      	lsls	r3, r3, #23
 8003118:	f53f af5e 	bmi.w	8002fd8 <HAL_RCC_ClockConfig+0xf4>
 800311c:	e6f9      	b.n	8002f12 <HAL_RCC_ClockConfig+0x2e>
 800311e:	bf00      	nop
 8003120:	52002000 	.word	0x52002000
 8003124:	58024400 	.word	0x58024400
 8003128:	08009118 	.word	0x08009118
 800312c:	24000004 	.word	0x24000004
 8003130:	24000000 	.word	0x24000000
 8003134:	2400000c 	.word	0x2400000c

08003138 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003138:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	6913      	ldr	r3, [r2, #16]
 800313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003142:	2b10      	cmp	r3, #16
 8003144:	d024      	beq.n	8003190 <HAL_RCC_GetHCLKFreq+0x58>
 8003146:	2b18      	cmp	r3, #24
 8003148:	d009      	beq.n	800315e <HAL_RCC_GetHCLKFreq+0x26>
 800314a:	bb1b      	cbnz	r3, 8003194 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	d522      	bpl.n	8003198 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x68>)
 8003156:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800315a:	40d3      	lsrs	r3, r2
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetHCLKFreq+0x2c>
 800315e:	f7ff fad3 	bl	8002708 <HAL_RCC_GetSysClockFreq.part.0>
 8003162:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003164:	490d      	ldr	r1, [pc, #52]	@ (800319c <HAL_RCC_GetHCLKFreq+0x64>)
 8003166:	480f      	ldr	r0, [pc, #60]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003168:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800316a:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800316c:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003170:	4c0d      	ldr	r4, [pc, #52]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x70>)
 8003172:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003176:	4d0d      	ldr	r5, [pc, #52]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003178:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800317a:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800317c:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003180:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003184:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003186:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800318a:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800318c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800318e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x78>)
 8003192:	e7e7      	b.n	8003164 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8003194:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003196:	e7e5      	b.n	8003164 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003198:	4b01      	ldr	r3, [pc, #4]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x68>)
 800319a:	e7e3      	b.n	8003164 <HAL_RCC_GetHCLKFreq+0x2c>
 800319c:	58024400 	.word	0x58024400
 80031a0:	03d09000 	.word	0x03d09000
 80031a4:	08009118 	.word	0x08009118
 80031a8:	24000000 	.word	0x24000000
 80031ac:	24000004 	.word	0x24000004
 80031b0:	017d7840 	.word	0x017d7840
 80031b4:	003d0900 	.word	0x003d0900

080031b8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b8:	4a1c      	ldr	r2, [pc, #112]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ba:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031bc:	6913      	ldr	r3, [r2, #16]
 80031be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d02b      	beq.n	800321e <HAL_RCC_GetPCLK1Freq+0x66>
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d009      	beq.n	80031de <HAL_RCC_GetPCLK1Freq+0x26>
 80031ca:	bb53      	cbnz	r3, 8003222 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	d529      	bpl.n	8003226 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x78>)
 80031d6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80031da:	40d3      	lsrs	r3, r2
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetPCLK1Freq+0x2c>
 80031de:	f7ff fa93 	bl	8002708 <HAL_RCC_GetSysClockFreq.part.0>
 80031e2:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031e4:	4a11      	ldr	r2, [pc, #68]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x74>)
 80031e6:	4913      	ldr	r1, [pc, #76]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80031e8:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80031ea:	4d13      	ldr	r5, [pc, #76]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031ec:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f0:	4c12      	ldr	r4, [pc, #72]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031f2:	5c08      	ldrb	r0, [r1, r0]
 80031f4:	f000 001f 	and.w	r0, r0, #31
 80031f8:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031fa:	6990      	ldr	r0, [r2, #24]
 80031fc:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003200:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003202:	5c08      	ldrb	r0, [r1, r0]
 8003204:	f000 001f 	and.w	r0, r0, #31
 8003208:	40c3      	lsrs	r3, r0
 800320a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800320c:	69d2      	ldr	r2, [r2, #28]
 800320e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003212:	5c88      	ldrb	r0, [r1, r2]
 8003214:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003218:	fa23 f000 	lsr.w	r0, r3, r0
 800321c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x88>)
 8003220:	e7e0      	b.n	80031e4 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8003222:	4b08      	ldr	r3, [pc, #32]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003224:	e7de      	b.n	80031e4 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003226:	4b02      	ldr	r3, [pc, #8]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x78>)
 8003228:	e7dc      	b.n	80031e4 <HAL_RCC_GetPCLK1Freq+0x2c>
 800322a:	bf00      	nop
 800322c:	58024400 	.word	0x58024400
 8003230:	03d09000 	.word	0x03d09000
 8003234:	08009118 	.word	0x08009118
 8003238:	24000004 	.word	0x24000004
 800323c:	24000000 	.word	0x24000000
 8003240:	017d7840 	.word	0x017d7840
 8003244:	003d0900 	.word	0x003d0900

08003248 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003248:	4a1c      	ldr	r2, [pc, #112]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324c:	6913      	ldr	r3, [r2, #16]
 800324e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003252:	2b10      	cmp	r3, #16
 8003254:	d02b      	beq.n	80032ae <HAL_RCC_GetPCLK2Freq+0x66>
 8003256:	2b18      	cmp	r3, #24
 8003258:	d009      	beq.n	800326e <HAL_RCC_GetPCLK2Freq+0x26>
 800325a:	bb53      	cbnz	r3, 80032b2 <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	069b      	lsls	r3, r3, #26
 8003260:	d529      	bpl.n	80032b6 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	4b16      	ldr	r3, [pc, #88]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x78>)
 8003266:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800326a:	40d3      	lsrs	r3, r2
 800326c:	e002      	b.n	8003274 <HAL_RCC_GetPCLK2Freq+0x2c>
 800326e:	f7ff fa4b 	bl	8002708 <HAL_RCC_GetSysClockFreq.part.0>
 8003272:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003274:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x74>)
 8003276:	4913      	ldr	r1, [pc, #76]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003278:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 800327a:	4d13      	ldr	r5, [pc, #76]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800327c:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003280:	4c12      	ldr	r4, [pc, #72]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003282:	5c08      	ldrb	r0, [r1, r0]
 8003284:	f000 001f 	and.w	r0, r0, #31
 8003288:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800328a:	6990      	ldr	r0, [r2, #24]
 800328c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003290:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003292:	5c08      	ldrb	r0, [r1, r0]
 8003294:	f000 001f 	and.w	r0, r0, #31
 8003298:	40c3      	lsrs	r3, r0
 800329a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800329c:	69d2      	ldr	r2, [r2, #28]
 800329e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80032a2:	5c88      	ldrb	r0, [r1, r2]
 80032a4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032a8:	fa23 f000 	lsr.w	r0, r3, r0
 80032ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x88>)
 80032b0:	e7e0      	b.n	8003274 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80032b4:	e7de      	b.n	8003274 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b6:	4b02      	ldr	r3, [pc, #8]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x78>)
 80032b8:	e7dc      	b.n	8003274 <HAL_RCC_GetPCLK2Freq+0x2c>
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	03d09000 	.word	0x03d09000
 80032c4:	08009118 	.word	0x08009118
 80032c8:	24000004 	.word	0x24000004
 80032cc:	24000000 	.word	0x24000000
 80032d0:	017d7840 	.word	0x017d7840
 80032d4:	003d0900 	.word	0x003d0900

080032d8 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80032da:	4c36      	ldr	r4, [pc, #216]	@ (80033b4 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80032dc:	4606      	mov	r6, r0
 80032de:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fe f856 	bl	8001398 <HAL_GetTick>
 80032ec:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032ee:	e004      	b.n	80032fa <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80032f0:	f7fe f852 	bl	8001398 <HAL_GetTick>
 80032f4:	1b40      	subs	r0, r0, r5
 80032f6:	2802      	cmp	r0, #2
 80032f8:	d856      	bhi.n	80033a8 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	011a      	lsls	r2, r3, #4
 80032fe:	d4f7      	bmi.n	80032f0 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003300:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003302:	6832      	ldr	r2, [r6, #0]
 8003304:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003308:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800330c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800330e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003312:	3b01      	subs	r3, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	0412      	lsls	r2, r2, #16
 800331a:	b29b      	uxth	r3, r3
 800331c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003320:	4313      	orrs	r3, r2
 8003322:	6872      	ldr	r2, [r6, #4]
 8003324:	3a01      	subs	r2, #1
 8003326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332a:	4313      	orrs	r3, r2
 800332c:	6932      	ldr	r2, [r6, #16]
 800332e:	3a01      	subs	r2, #1
 8003330:	0612      	lsls	r2, r2, #24
 8003332:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003336:	4313      	orrs	r3, r2
 8003338:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800333a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800333c:	6972      	ldr	r2, [r6, #20]
 800333e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003342:	4313      	orrs	r3, r2
 8003344:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003346:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003348:	69b2      	ldr	r2, [r6, #24]
 800334a:	f023 0320 	bic.w	r3, r3, #32
 800334e:	4313      	orrs	r3, r2
 8003350:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003352:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003354:	f023 0310 	bic.w	r3, r3, #16
 8003358:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800335a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800335c:	69f2      	ldr	r2, [r6, #28]
 800335e:	f36f 03cf 	bfc	r3, #3, #13
 8003362:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003366:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003368:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003370:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003372:	b1df      	cbz	r7, 80033ac <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003374:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003376:	bf0c      	ite	eq
 8003378:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800337c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003380:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003382:	4c0c      	ldr	r4, [pc, #48]	@ (80033b4 <RCCEx_PLL2_Config.part.0+0xdc>)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800338a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fe f804 	bl	8001398 <HAL_GetTick>
 8003390:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003392:	e004      	b.n	800339e <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003394:	f7fe f800 	bl	8001398 <HAL_GetTick>
 8003398:	1b40      	subs	r0, r0, r5
 800339a:	2802      	cmp	r0, #2
 800339c:	d804      	bhi.n	80033a8 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	d5f7      	bpl.n	8003394 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80033a8:	2003      	movs	r0, #3
}
 80033aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80033ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033b2:	e7e6      	b.n	8003382 <RCCEx_PLL2_Config.part.0+0xaa>
 80033b4:	58024400 	.word	0x58024400

080033b8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80033ba:	4c36      	ldr	r4, [pc, #216]	@ (8003494 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80033bc:	4606      	mov	r6, r0
 80033be:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd ffe6 	bl	8001398 <HAL_GetTick>
 80033cc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033ce:	e004      	b.n	80033da <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80033d0:	f7fd ffe2 	bl	8001398 <HAL_GetTick>
 80033d4:	1b40      	subs	r0, r0, r5
 80033d6:	2802      	cmp	r0, #2
 80033d8:	d856      	bhi.n	8003488 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	009a      	lsls	r2, r3, #2
 80033de:	d4f7      	bmi.n	80033d0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80033e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033e2:	6832      	ldr	r2, [r6, #0]
 80033e4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80033e8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80033ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033ee:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	3a01      	subs	r2, #1
 80033f6:	025b      	lsls	r3, r3, #9
 80033f8:	0412      	lsls	r2, r2, #16
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003400:	4313      	orrs	r3, r2
 8003402:	6872      	ldr	r2, [r6, #4]
 8003404:	3a01      	subs	r2, #1
 8003406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800340a:	4313      	orrs	r3, r2
 800340c:	6932      	ldr	r2, [r6, #16]
 800340e:	3a01      	subs	r2, #1
 8003410:	0612      	lsls	r2, r2, #24
 8003412:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003416:	4313      	orrs	r3, r2
 8003418:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800341a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800341c:	6972      	ldr	r2, [r6, #20]
 800341e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003422:	4313      	orrs	r3, r2
 8003424:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003426:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003428:	69b2      	ldr	r2, [r6, #24]
 800342a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800342e:	4313      	orrs	r3, r2
 8003430:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003432:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003438:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800343a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800343c:	69f2      	ldr	r2, [r6, #28]
 800343e:	f36f 03cf 	bfc	r3, #3, #13
 8003442:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003446:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003448:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800344a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003450:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003452:	b1df      	cbz	r7, 800348c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003454:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003456:	bf0c      	ite	eq
 8003458:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800345c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003460:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003462:	4c0c      	ldr	r4, [pc, #48]	@ (8003494 <RCCEx_PLL3_Config.part.0+0xdc>)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fd ff94 	bl	8001398 <HAL_GetTick>
 8003470:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003472:	e004      	b.n	800347e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003474:	f7fd ff90 	bl	8001398 <HAL_GetTick>
 8003478:	1b40      	subs	r0, r0, r5
 800347a:	2802      	cmp	r0, #2
 800347c:	d804      	bhi.n	8003488 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	d5f7      	bpl.n	8003474 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003484:	2000      	movs	r0, #0
}
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003488:	2003      	movs	r0, #3
}
 800348a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800348c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003492:	e7e6      	b.n	8003462 <RCCEx_PLL3_Config.part.0+0xaa>
 8003494:	58024400 	.word	0x58024400

08003498 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800349c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80034a0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034a2:	011d      	lsls	r5, r3, #4
 80034a4:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 80034a8:	d524      	bpl.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80034aa:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80034ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80034b0:	f000 85df 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80034b4:	f200 86a8 	bhi.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80034b8:	2900      	cmp	r1, #0
 80034ba:	f000 85f6 	beq.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc12>
 80034be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80034c2:	f040 86a5 	bne.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034c6:	49a9      	ldr	r1, [pc, #676]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80034ca:	f001 0103 	and.w	r1, r1, #3
 80034ce:	2903      	cmp	r1, #3
 80034d0:	f000 869e 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80034d4:	2102      	movs	r1, #2
 80034d6:	3008      	adds	r0, #8
 80034d8:	f7ff fefe 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80034dc:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80034e2:	b93e      	cbnz	r6, 80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034e4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80034e6:	4da1      	ldr	r5, [pc, #644]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e8:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ea:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80034ec:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80034f0:	4301      	orrs	r1, r0
 80034f2:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f4:	05d8      	lsls	r0, r3, #23
 80034f6:	d50a      	bpl.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 80034f8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80034fa:	2904      	cmp	r1, #4
 80034fc:	d806      	bhi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003502:	03ff      	.short	0x03ff
 8003504:	0582056d 	.word	0x0582056d
 8003508:	04040404 	.word	0x04040404
      status = ret;
 800350c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800350e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003510:	0599      	lsls	r1, r3, #22
 8003512:	d524      	bpl.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003514:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003516:	2980      	cmp	r1, #128	@ 0x80
 8003518:	f000 854b 	beq.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800351c:	f200 8687 	bhi.w	800422e <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8003520:	2900      	cmp	r1, #0
 8003522:	f000 85bb 	beq.w	800409c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8003526:	2940      	cmp	r1, #64	@ 0x40
 8003528:	f040 8688 	bne.w	800423c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800352c:	498f      	ldr	r1, [pc, #572]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800352e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003530:	f001 0103 	and.w	r1, r1, #3
 8003534:	2903      	cmp	r1, #3
 8003536:	f000 8681 	beq.w	800423c <HAL_RCCEx_PeriphCLKConfig+0xda4>
 800353a:	2100      	movs	r1, #0
 800353c:	f104 0008 	add.w	r0, r4, #8
 8003540:	f7ff feca 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003544:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003546:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800354a:	2d00      	cmp	r5, #0
 800354c:	f040 8543 	bne.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003550:	4f86      	ldr	r7, [pc, #536]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003552:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003554:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003556:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800355a:	4301      	orrs	r1, r0
 800355c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800355e:	055f      	lsls	r7, r3, #21
 8003560:	d528      	bpl.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003562:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003566:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800356a:	f000 855c 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800356e:	f200 8652 	bhi.w	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8003572:	2900      	cmp	r1, #0
 8003574:	f000 858b 	beq.w	800408e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003578:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800357c:	f040 8653 	bne.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003580:	497a      	ldr	r1, [pc, #488]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003582:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003584:	f001 0103 	and.w	r1, r1, #3
 8003588:	2903      	cmp	r1, #3
 800358a:	f000 864c 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800358e:	2100      	movs	r1, #0
 8003590:	f104 0008 	add.w	r0, r4, #8
 8003594:	f7ff fea0 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003598:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800359a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800359e:	2d00      	cmp	r5, #0
 80035a0:	f040 8553 	bne.w	800404a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035a4:	4f71      	ldr	r7, [pc, #452]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80035aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80035ac:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 80035b0:	4301      	orrs	r1, r0
 80035b2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035b4:	0518      	lsls	r0, r3, #20
 80035b6:	d528      	bpl.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 80035b8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80035bc:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80035c0:	f000 8546 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 80035c4:	f200 8614 	bhi.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80035c8:	2900      	cmp	r1, #0
 80035ca:	f000 84d6 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xae2>
 80035ce:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80035d2:	f040 8615 	bne.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035d6:	4965      	ldr	r1, [pc, #404]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80035da:	f001 0103 	and.w	r1, r1, #3
 80035de:	2903      	cmp	r1, #3
 80035e0:	f000 860e 	beq.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80035e4:	2100      	movs	r1, #0
 80035e6:	f104 0008 	add.w	r0, r4, #8
 80035ea:	f7ff fe75 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80035ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	f040 84c8 	bne.w	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035fa:	4f5c      	ldr	r7, [pc, #368]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035fc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8003600:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003602:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003606:	4301      	orrs	r1, r0
 8003608:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800360a:	0199      	lsls	r1, r3, #6
 800360c:	d518      	bpl.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 800360e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003610:	2920      	cmp	r1, #32
 8003612:	f000 8434 	beq.w	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8003616:	f200 8615 	bhi.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800361a:	b139      	cbz	r1, 800362c <HAL_RCCEx_PeriphCLKConfig+0x194>
 800361c:	2910      	cmp	r1, #16
 800361e:	f040 8614 	bne.w	800424a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4852      	ldr	r0, [pc, #328]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003624:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003626:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800362a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800362c:	2d00      	cmp	r5, #0
 800362e:	f040 83bf 	bne.w	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003632:	4f4e      	ldr	r7, [pc, #312]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003634:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003636:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003638:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800363c:	4301      	orrs	r1, r0
 800363e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003640:	04df      	lsls	r7, r3, #19
 8003642:	d526      	bpl.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003644:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003646:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800364a:	f000 84a1 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800364e:	f200 85c3 	bhi.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8003652:	2900      	cmp	r1, #0
 8003654:	f000 8486 	beq.w	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003658:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800365c:	f040 85c4 	bne.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003660:	4942      	ldr	r1, [pc, #264]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003662:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003664:	f001 0103 	and.w	r1, r1, #3
 8003668:	2903      	cmp	r1, #3
 800366a:	f000 85bd 	beq.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800366e:	2100      	movs	r1, #0
 8003670:	f104 0008 	add.w	r0, r4, #8
 8003674:	f7ff fe30 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003678:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800367a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800367e:	2d00      	cmp	r5, #0
 8003680:	f040 8478 	bne.w	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003684:	4f39      	ldr	r7, [pc, #228]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003686:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003688:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800368a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800368e:	4301      	orrs	r1, r0
 8003690:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003692:	0498      	lsls	r0, r3, #18
 8003694:	d524      	bpl.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003696:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003698:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800369c:	f000 8415 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80036a0:	f200 8556 	bhi.w	8004150 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80036a4:	b191      	cbz	r1, 80036cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036a6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80036aa:	f040 855b 	bne.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ae:	492f      	ldr	r1, [pc, #188]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80036b2:	f001 0103 	and.w	r1, r1, #3
 80036b6:	2903      	cmp	r1, #3
 80036b8:	f000 8554 	beq.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80036bc:	2101      	movs	r1, #1
 80036be:	f104 0008 	add.w	r0, r4, #8
 80036c2:	f7ff fe09 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80036c6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	f040 838f 	bne.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036d2:	4f26      	ldr	r7, [pc, #152]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80036d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80036d8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80036dc:	4301      	orrs	r1, r0
 80036de:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036e0:	0459      	lsls	r1, r3, #17
 80036e2:	d526      	bpl.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80036e4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80036e8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80036ec:	f000 8426 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80036f0:	f200 854a 	bhi.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 80036f4:	b191      	cbz	r1, 800371c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80036f6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80036fa:	f040 854f 	bne.w	800419c <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036fe:	491b      	ldr	r1, [pc, #108]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003700:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003702:	f001 0103 	and.w	r1, r1, #3
 8003706:	2903      	cmp	r1, #3
 8003708:	f000 8548 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0xd04>
 800370c:	2101      	movs	r1, #1
 800370e:	f104 0008 	add.w	r0, r4, #8
 8003712:	f7ff fde1 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003716:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003718:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800371c:	2d00      	cmp	r5, #0
 800371e:	f040 835b 	bne.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003722:	4f12      	ldr	r7, [pc, #72]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003724:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8003728:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800372a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800372e:	4301      	orrs	r1, r0
 8003730:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003732:	041f      	lsls	r7, r3, #16
 8003734:	d50d      	bpl.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8003736:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003738:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800373c:	f000 8260 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8003740:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003744:	f000 8591 	beq.w	800426a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003748:	2900      	cmp	r1, #0
 800374a:	f000 825e 	beq.w	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 800374e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8003750:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003752:	01d8      	lsls	r0, r3, #7
 8003754:	d515      	bpl.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8003756:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003758:	2903      	cmp	r1, #3
 800375a:	f200 85b4 	bhi.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800375e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003762:	000c      	.short	0x000c
 8003764:	03a10007 	.word	0x03a10007
 8003768:	000c      	.short	0x000c
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4836      	ldr	r0, [pc, #216]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8003772:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003774:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003778:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800377a:	2d00      	cmp	r5, #0
 800377c:	f000 831a 	beq.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8003780:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003782:	0259      	lsls	r1, r3, #9
 8003784:	f100 827a 	bmi.w	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003788:	07df      	lsls	r7, r3, #31
 800378a:	d52f      	bpl.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 800378c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800378e:	2928      	cmp	r1, #40	@ 0x28
 8003790:	d82a      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003792:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003796:	0257      	.short	0x0257
 8003798:	00290029 	.word	0x00290029
 800379c:	00290029 	.word	0x00290029
 80037a0:	00290029 	.word	0x00290029
 80037a4:	02480029 	.word	0x02480029
 80037a8:	00290029 	.word	0x00290029
 80037ac:	00290029 	.word	0x00290029
 80037b0:	00290029 	.word	0x00290029
 80037b4:	04b90029 	.word	0x04b90029
 80037b8:	00290029 	.word	0x00290029
 80037bc:	00290029 	.word	0x00290029
 80037c0:	00290029 	.word	0x00290029
 80037c4:	02570029 	.word	0x02570029
 80037c8:	00290029 	.word	0x00290029
 80037cc:	00290029 	.word	0x00290029
 80037d0:	00290029 	.word	0x00290029
 80037d4:	02570029 	.word	0x02570029
 80037d8:	00290029 	.word	0x00290029
 80037dc:	00290029 	.word	0x00290029
 80037e0:	00290029 	.word	0x00290029
 80037e4:	02570029 	.word	0x02570029
      status = ret;
 80037e8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80037ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037ec:	0798      	lsls	r0, r3, #30
 80037ee:	d51e      	bpl.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037f0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80037f2:	2905      	cmp	r1, #5
 80037f4:	f200 8550 	bhi.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80037f8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80037fc:	00060015 	.word	0x00060015
 8003800:	00150471 	.word	0x00150471
 8003804:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003808:	4910      	ldr	r1, [pc, #64]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800380a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800380c:	f001 0103 	and.w	r1, r1, #3
 8003810:	2903      	cmp	r1, #3
 8003812:	f000 8541 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8003816:	2101      	movs	r1, #1
 8003818:	f104 0008 	add.w	r0, r4, #8
 800381c:	f7ff fd5c 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003820:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003822:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003826:	2d00      	cmp	r5, #0
 8003828:	f000 82cc 	beq.w	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 800382c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800382e:	0759      	lsls	r1, r3, #29
 8003830:	d521      	bpl.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003832:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8003836:	2905      	cmp	r1, #5
 8003838:	f200 852a 	bhi.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800383c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003840:	00080017 	.word	0x00080017
 8003844:	0017043c 	.word	0x0017043c
 8003848:	00170017 	.word	0x00170017
 800384c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003850:	49ae      	ldr	r1, [pc, #696]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003852:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003854:	f001 0103 	and.w	r1, r1, #3
 8003858:	2903      	cmp	r1, #3
 800385a:	f000 8519 	beq.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800385e:	2101      	movs	r1, #1
 8003860:	f104 0008 	add.w	r0, r4, #8
 8003864:	f7ff fd38 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003868:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800386a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800386e:	2d00      	cmp	r5, #0
 8003870:	f000 82c2 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8003874:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003876:	069f      	lsls	r7, r3, #26
 8003878:	d526      	bpl.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800387a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800387e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003882:	f000 82c6 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003886:	f200 8455 	bhi.w	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800388a:	b191      	cbz	r1, 80038b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800388c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003890:	f040 845a 	bne.w	8004148 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003894:	499d      	ldr	r1, [pc, #628]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003896:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003898:	f001 0103 	and.w	r1, r1, #3
 800389c:	2903      	cmp	r1, #3
 800389e:	f000 8453 	beq.w	8004148 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 80038a2:	2100      	movs	r1, #0
 80038a4:	f104 0008 	add.w	r0, r4, #8
 80038a8:	f7ff fd16 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80038ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	f040 828e 	bne.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038b8:	4f94      	ldr	r7, [pc, #592]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80038ba:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80038be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038c0:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80038c4:	4301      	orrs	r1, r0
 80038c6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038c8:	0658      	lsls	r0, r3, #25
 80038ca:	d526      	bpl.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038cc:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80038d0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80038d4:	f000 82af 	beq.w	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80038d8:	f200 8464 	bhi.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038dc:	b191      	cbz	r1, 8003904 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80038de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80038e2:	f040 8469 	bne.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038e6:	4989      	ldr	r1, [pc, #548]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80038e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80038ea:	f001 0103 	and.w	r1, r1, #3
 80038ee:	2903      	cmp	r1, #3
 80038f0:	f000 8462 	beq.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80038f4:	2100      	movs	r1, #0
 80038f6:	f104 0008 	add.w	r0, r4, #8
 80038fa:	f7ff fced 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80038fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003900:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003904:	2d00      	cmp	r5, #0
 8003906:	f040 8269 	bne.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390a:	4f80      	ldr	r7, [pc, #512]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800390c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8003910:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003912:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8003916:	4301      	orrs	r1, r0
 8003918:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800391a:	0619      	lsls	r1, r3, #24
 800391c:	d526      	bpl.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800391e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8003922:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003926:	f000 8298 	beq.w	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800392a:	f200 841f 	bhi.w	800416c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 800392e:	b191      	cbz	r1, 8003956 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003930:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003934:	f040 8424 	bne.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003938:	4974      	ldr	r1, [pc, #464]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800393a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800393c:	f001 0103 	and.w	r1, r1, #3
 8003940:	2903      	cmp	r1, #3
 8003942:	f000 841d 	beq.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003946:	2100      	movs	r1, #0
 8003948:	f104 0008 	add.w	r0, r4, #8
 800394c:	f7ff fcc4 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003950:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003952:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003956:	2d00      	cmp	r5, #0
 8003958:	f040 8244 	bne.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800395c:	4f6b      	ldr	r7, [pc, #428]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800395e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8003962:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003964:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003968:	4301      	orrs	r1, r0
 800396a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800396c:	071f      	lsls	r7, r3, #28
 800396e:	d50b      	bpl.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003970:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003974:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003978:	f000 81d4 	beq.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800397c:	4f63      	ldr	r7, [pc, #396]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800397e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003980:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003984:	4301      	orrs	r1, r0
 8003986:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003988:	06d8      	lsls	r0, r3, #27
 800398a:	d50b      	bpl.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800398c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8003990:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8003994:	f000 81db 	beq.w	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003998:	4f5c      	ldr	r7, [pc, #368]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800399a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800399c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80039a0:	4301      	orrs	r1, r0
 80039a2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	0319      	lsls	r1, r3, #12
 80039a6:	d524      	bpl.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 80039a8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80039ac:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80039b0:	f000 82b1 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80039b4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80039b8:	d010      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x544>
 80039ba:	2900      	cmp	r1, #0
 80039bc:	f040 8130 	bne.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039c0:	4852      	ldr	r0, [pc, #328]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80039c2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80039c4:	f000 0003 	and.w	r0, r0, #3
 80039c8:	2803      	cmp	r0, #3
 80039ca:	f000 8129 	beq.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x788>
 80039ce:	f104 0008 	add.w	r0, r4, #8
 80039d2:	f7ff fc81 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 80039d6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039dc:	2d00      	cmp	r5, #0
 80039de:	f040 81ff 	bne.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e2:	4f4a      	ldr	r7, [pc, #296]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80039e4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80039e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039ea:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80039ee:	4301      	orrs	r1, r0
 80039f0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039f2:	035f      	lsls	r7, r3, #13
 80039f4:	d50f      	bpl.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80039f6:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80039fa:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80039fe:	f000 8277 	beq.w	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003a02:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8003a06:	f000 812d 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8003a0a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003a0e:	f000 8124 	beq.w	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 8003a12:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8003a14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a16:	03d8      	lsls	r0, r3, #15
 8003a18:	d520      	bpl.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003a1a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	f000 81aa 	beq.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8003a22:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003a26:	f040 80e8 	bne.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a2a:	4938      	ldr	r1, [pc, #224]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003a2c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003a2e:	f001 0103 	and.w	r1, r1, #3
 8003a32:	2903      	cmp	r1, #3
 8003a34:	f000 80e1 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x762>
 8003a38:	2102      	movs	r1, #2
 8003a3a:	f104 0008 	add.w	r0, r4, #8
 8003a3e:	f7ff fc4b 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003a42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	f040 819c 	bne.w	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a4e:	4f2f      	ldr	r7, [pc, #188]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003a50:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003a52:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a54:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003a58:	4301      	orrs	r1, r0
 8003a5a:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a5c:	0099      	lsls	r1, r3, #2
 8003a5e:	d50e      	bpl.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a60:	492a      	ldr	r1, [pc, #168]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003a62:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003a64:	f001 0103 	and.w	r1, r1, #3
 8003a68:	2903      	cmp	r1, #3
 8003a6a:	d007      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003a72:	f7ff fca1 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a7a:	b100      	cbz	r0, 8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8003a7c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a7e:	039f      	lsls	r7, r3, #14
 8003a80:	f100 80ab 	bmi.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8003a84:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a86:	02d8      	lsls	r0, r3, #11
 8003a88:	d506      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a8a:	4820      	ldr	r0, [pc, #128]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003a8c:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8003a8e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003a90:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003a94:	4331      	orrs	r1, r6
 8003a96:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a98:	00d9      	lsls	r1, r3, #3
 8003a9a:	d507      	bpl.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a9c:	481b      	ldr	r0, [pc, #108]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003a9e:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8003aa2:	6901      	ldr	r1, [r0, #16]
 8003aa4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003aa8:	4331      	orrs	r1, r6
 8003aaa:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aac:	029f      	lsls	r7, r3, #10
 8003aae:	d506      	bpl.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab0:	4816      	ldr	r0, [pc, #88]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003ab2:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8003ab4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003ab6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003aba:	4331      	orrs	r1, r6
 8003abc:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003abe:	005e      	lsls	r6, r3, #1
 8003ac0:	d509      	bpl.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ac2:	4912      	ldr	r1, [pc, #72]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003ac4:	6908      	ldr	r0, [r1, #16]
 8003ac6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8003aca:	6108      	str	r0, [r1, #16]
 8003acc:	6908      	ldr	r0, [r1, #16]
 8003ace:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8003ad2:	4330      	orrs	r0, r6
 8003ad4:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da06      	bge.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ada:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003adc:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8003ade:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003ae0:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003ae4:	4331      	orrs	r1, r6
 8003ae6:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ae8:	0218      	lsls	r0, r3, #8
 8003aea:	d507      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aec:	4907      	ldr	r1, [pc, #28]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003aee:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8003af2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8003af4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003af8:	4303      	orrs	r3, r0
 8003afa:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003afc:	07d1      	lsls	r1, r2, #31
 8003afe:	d511      	bpl.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b00:	4b02      	ldr	r3, [pc, #8]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	e001      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	f000 835c 	beq.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8003b14:	2100      	movs	r1, #0
 8003b16:	f104 0008 	add.w	r0, r4, #8
 8003b1a:	f7ff fbdd 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b1e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b20:	b100      	cbz	r0, 8003b24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b22:	4605      	mov	r5, r0
 8003b24:	0793      	lsls	r3, r2, #30
 8003b26:	d50e      	bpl.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b28:	4baf      	ldr	r3, [pc, #700]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	f000 834d 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003b36:	2101      	movs	r1, #1
 8003b38:	f104 0008 	add.w	r0, r4, #8
 8003b3c:	f7ff fbcc 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b40:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b42:	b100      	cbz	r0, 8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b44:	4605      	mov	r5, r0
 8003b46:	0757      	lsls	r7, r2, #29
 8003b48:	d50e      	bpl.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b4a:	4ba7      	ldr	r3, [pc, #668]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	f000 833e 	beq.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8003b58:	2102      	movs	r1, #2
 8003b5a:	f104 0008 	add.w	r0, r4, #8
 8003b5e:	f7ff fbbb 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b62:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b64:	b100      	cbz	r0, 8003b68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b66:	4605      	mov	r5, r0
 8003b68:	0716      	lsls	r6, r2, #28
 8003b6a:	d50e      	bpl.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b6c:	4b9e      	ldr	r3, [pc, #632]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	f000 8323 	beq.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003b80:	f7ff fc1a 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b84:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b86:	b100      	cbz	r0, 8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b88:	4605      	mov	r5, r0
 8003b8a:	06d0      	lsls	r0, r2, #27
 8003b8c:	d50f      	bpl.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b8e:	4b96      	ldr	r3, [pc, #600]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f000 8314 	beq.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ba2:	f7ff fc09 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	f040 8359 	bne.w	800425e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bac:	6862      	ldr	r2, [r4, #4]
 8003bae:	0693      	lsls	r3, r2, #26
 8003bb0:	d50e      	bpl.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	f000 82b7 	beq.w	800412e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003bc6:	f7ff fbf7 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 82af 	bne.w	800412e <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8003bd0:	1e28      	subs	r0, r5, #0
 8003bd2:	bf18      	it	ne
 8003bd4:	2001      	movne	r0, #1
}
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8003bda:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003bde:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003be2:	f000 80d2 	beq.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003be6:	f240 8110 	bls.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003bea:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8003bee:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003bf2:	f000 80cf 	beq.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003bf6:	2501      	movs	r5, #1
 8003bf8:	e745      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8003bfa:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8003bfc:	4635      	mov	r5, r6
 8003bfe:	e72d      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c00:	4879      	ldr	r0, [pc, #484]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c02:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c04:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c08:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	f040 80ce 	bne.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c10:	4f75      	ldr	r7, [pc, #468]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c12:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003c14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c16:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003c1a:	4301      	orrs	r1, r0
 8003c1c:	6539      	str	r1, [r7, #80]	@ 0x50
 8003c1e:	e598      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8003c20:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8003c22:	4635      	mov	r5, r6
 8003c24:	e6e5      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c26:	4970      	ldr	r1, [pc, #448]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c28:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c2a:	f001 0103 	and.w	r1, r1, #3
 8003c2e:	2903      	cmp	r1, #3
 8003c30:	f43f adda 	beq.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003c34:	2101      	movs	r1, #1
 8003c36:	f104 0008 	add.w	r0, r4, #8
 8003c3a:	f7ff fb4d 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003c3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c40:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c44:	2d00      	cmp	r5, #0
 8003c46:	f040 80d5 	bne.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c4a:	4f67      	ldr	r7, [pc, #412]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c4c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003c4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c50:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8003c54:	4301      	orrs	r1, r0
 8003c56:	6579      	str	r1, [r7, #84]	@ 0x54
 8003c58:	e5c8      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5a:	4863      	ldr	r0, [pc, #396]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c5c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c5e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c62:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	f040 809f 	bne.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6a:	4f5f      	ldr	r7, [pc, #380]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003c6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8003c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c72:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003c76:	4301      	orrs	r1, r0
 8003c78:	6579      	str	r1, [r7, #84]	@ 0x54
 8003c7a:	e6cc      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4f5b      	ldr	r7, [pc, #364]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c84:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003c86:	f7fd fb87 	bl	8001398 <HAL_GetTick>
 8003c8a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8c:	e006      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fd fb83 	bl	8001398 <HAL_GetTick>
 8003c92:	eba0 0008 	sub.w	r0, r0, r8
 8003c96:	2864      	cmp	r0, #100	@ 0x64
 8003c98:	f200 82db 	bhi.w	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	05da      	lsls	r2, r3, #23
 8003ca0:	d5f5      	bpl.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	f040 82d6 	bne.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003caa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8003cae:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003cb0:	4059      	eors	r1, r3
 8003cb2:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cba:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003cc4:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003cc8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003ccc:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8003cce:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd4:	f000 82fb 	beq.w	80042ce <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cd8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003cdc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003ce0:	f000 8309 	beq.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8003ce4:	4940      	ldr	r1, [pc, #256]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003ce6:	690a      	ldr	r2, [r1, #16]
 8003ce8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003cec:	610a      	str	r2, [r1, #16]
 8003cee:	483e      	ldr	r0, [pc, #248]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003cf0:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003cf4:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8003cf6:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfc:	6701      	str	r1, [r0, #112]	@ 0x70
 8003cfe:	e543      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d00:	4839      	ldr	r0, [pc, #228]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d02:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d04:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003d08:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003d0a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	f040 8177 	bne.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d12:	4f35      	ldr	r7, [pc, #212]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d18:	f021 0107 	bic.w	r1, r1, #7
 8003d1c:	4301      	orrs	r1, r0
 8003d1e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003d20:	f7ff bbf6 	b.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d24:	4930      	ldr	r1, [pc, #192]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d26:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d28:	f001 0103 	and.w	r1, r1, #3
 8003d2c:	2903      	cmp	r1, #3
 8003d2e:	f000 82ba 	beq.w	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8003d32:	2102      	movs	r1, #2
 8003d34:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d38:	f7ff fb3e 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	f000 82b5 	beq.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d42:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8003d46:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d48:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d4c:	e616      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d4e:	4926      	ldr	r1, [pc, #152]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d50:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d52:	f001 0103 	and.w	r1, r1, #3
 8003d56:	2903      	cmp	r1, #3
 8003d58:	f000 82a2 	beq.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d62:	f7ff fb29 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d66:	2800      	cmp	r0, #0
 8003d68:	f040 82a6 	bne.w	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d6c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d74:	e610      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d76:	481c      	ldr	r0, [pc, #112]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d78:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003d7a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003d7e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	f43f ae64 	beq.w	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8003d86:	462e      	mov	r6, r5
 8003d88:	e668      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8a:	4f17      	ldr	r7, [pc, #92]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d8e:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003d92:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	f47f ae76 	bne.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9a:	4d13      	ldr	r5, [pc, #76]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003d9c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8003d9e:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003da2:	4301      	orrs	r1, r0
 8003da4:	6569      	str	r1, [r5, #84]	@ 0x54
 8003da6:	e66d      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8003da8:	462e      	mov	r6, r5
 8003daa:	e634      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8003dac:	462e      	mov	r6, r5
 8003dae:	e4d0      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8003db0:	462e      	mov	r6, r5
 8003db2:	e445      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003db4:	4f0c      	ldr	r7, [pc, #48]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003db6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003db8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003dba:	f021 0103 	bic.w	r1, r1, #3
 8003dbe:	4301      	orrs	r1, r0
 8003dc0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003dc2:	e4de      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dc4:	4f08      	ldr	r7, [pc, #32]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8003dc6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dca:	f021 0107 	bic.w	r1, r1, #7
 8003dce:	4301      	orrs	r1, r0
 8003dd0:	6579      	str	r1, [r7, #84]	@ 0x54
 8003dd2:	e52c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8003dd4:	462e      	mov	r6, r5
 8003dd6:	e577      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8003dd8:	462e      	mov	r6, r5
 8003dda:	e4aa      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8003ddc:	462e      	mov	r6, r5
 8003dde:	e59c      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8003de0:	462e      	mov	r6, r5
 8003de2:	e606      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8003de4:	462e      	mov	r6, r5
 8003de6:	e5c1      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58024800 	.word	0x58024800
      status = ret;
 8003df0:	462e      	mov	r6, r5
 8003df2:	e475      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8003df4:	462e      	mov	r6, r5
 8003df6:	e4f9      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df8:	4fc2      	ldr	r7, [pc, #776]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003dfa:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8003dfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003e00:	f021 0107 	bic.w	r1, r1, #7
 8003e04:	4301      	orrs	r1, r0
 8003e06:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e08:	e535      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8003e0a:	2900      	cmp	r1, #0
 8003e0c:	f47f aef3 	bne.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8003e10:	e7c0      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e12:	49bc      	ldr	r1, [pc, #752]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003e14:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e16:	f001 0103 	and.w	r1, r1, #3
 8003e1a:	2903      	cmp	r1, #3
 8003e1c:	f000 8194 	beq.w	8004148 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8003e20:	2102      	movs	r1, #2
 8003e22:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e26:	f7ff fac7 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003e2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	d1cf      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8003e34:	e540      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e36:	49b3      	ldr	r1, [pc, #716]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003e38:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e3a:	f001 0103 	and.w	r1, r1, #3
 8003e3e:	2903      	cmp	r1, #3
 8003e40:	f000 81ba 	beq.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003e44:	2102      	movs	r1, #2
 8003e46:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e4a:	f7ff fab5 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003e4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	d1c1      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003e58:	e557      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e5a:	49aa      	ldr	r1, [pc, #680]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003e5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e5e:	f001 0103 	and.w	r1, r1, #3
 8003e62:	2903      	cmp	r1, #3
 8003e64:	f000 818c 	beq.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003e68:	2102      	movs	r1, #2
 8003e6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e6e:	f7ff faa3 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003e72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e74:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	d1b3      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8003e7c:	e56e      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e7e:	49a1      	ldr	r1, [pc, #644]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003e80:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e82:	f001 0103 	and.w	r1, r1, #3
 8003e86:	2903      	cmp	r1, #3
 8003e88:	f000 81df 	beq.w	800424a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	f104 0008 	add.w	r0, r4, #8
 8003e92:	f7ff fa21 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003e96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e98:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	d187      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8003ea0:	f7ff bbc7 	b.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea4:	4997      	ldr	r1, [pc, #604]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003ea6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ea8:	f001 0103 	and.w	r1, r1, #3
 8003eac:	2903      	cmp	r1, #3
 8003eae:	f000 820a 	beq.w	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	f104 0008 	add.w	r0, r4, #8
 8003eb8:	f7ff fa0e 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003ebc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	f47f ac5c 	bne.w	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003ec8:	e774      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eca:	498e      	ldr	r1, [pc, #568]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003ecc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ece:	f001 0103 	and.w	r1, r1, #3
 8003ed2:	2903      	cmp	r1, #3
 8003ed4:	f000 8146 	beq.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003ed8:	2101      	movs	r1, #1
 8003eda:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ede:	f7ff fa6b 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003ee2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ee4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	d181      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8003eec:	f7ff bbf1 	b.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ef0:	4984      	ldr	r1, [pc, #528]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003ef2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ef4:	f001 0103 	and.w	r1, r1, #3
 8003ef8:	2903      	cmp	r1, #3
 8003efa:	f43f ad8a 	beq.w	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003efe:	2101      	movs	r1, #1
 8003f00:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f04:	f7ff fa58 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003f08:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	f47f af4a 	bne.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003f14:	e6a9      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f16:	497b      	ldr	r1, [pc, #492]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003f18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f1a:	f001 0103 	and.w	r1, r1, #3
 8003f1e:	2903      	cmp	r1, #3
 8003f20:	f43f ae7e 	beq.w	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8003f24:	2102      	movs	r1, #2
 8003f26:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f2a:	f7ff fa45 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003f2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	f47f af53 	bne.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8003f3a:	e552      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f3c:	4971      	ldr	r1, [pc, #452]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003f3e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f40:	f001 0103 	and.w	r1, r1, #3
 8003f44:	2903      	cmp	r1, #3
 8003f46:	f000 8129 	beq.w	800419c <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f50:	f7ff fa32 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003f54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	f47f af3c 	bne.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003f60:	f7ff bbdf 	b.w	8003722 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f64:	4867      	ldr	r0, [pc, #412]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003f66:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003f68:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003f6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	f43f ab88 	beq.w	8003684 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8003f74:	462e      	mov	r6, r5
 8003f76:	f7ff bb8c 	b.w	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7a:	4862      	ldr	r0, [pc, #392]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003f7c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003f7e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003f82:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	f43f ab38 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8003f8a:	462e      	mov	r6, r5
 8003f8c:	f7ff bb3d 	b.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f90:	495c      	ldr	r1, [pc, #368]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003f92:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f94:	f001 0103 	and.w	r1, r1, #3
 8003f98:	2903      	cmp	r1, #3
 8003f9a:	f000 8125 	beq.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003fa4:	f7ff fa08 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003fa8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003faa:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8003fae:	f7ff bb66 	b.w	800367e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fb2:	4954      	ldr	r1, [pc, #336]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003fb4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003fb6:	f001 0103 	and.w	r1, r1, #3
 8003fba:	2903      	cmp	r1, #3
 8003fbc:	f000 813e 	beq.w	800423c <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003fc6:	f7ff f9f7 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8003fca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fcc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	f43f aabd 	beq.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8003fd6:	462e      	mov	r6, r5
 8003fd8:	f7ff bac1 	b.w	800355e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fdc:	4949      	ldr	r1, [pc, #292]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8003fde:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003fe0:	f001 0103 	and.w	r1, r1, #3
 8003fe4:	2903      	cmp	r1, #3
 8003fe6:	f43f aa91 	beq.w	800350c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fea:	2100      	movs	r1, #0
 8003fec:	f104 0008 	add.w	r0, r4, #8
 8003ff0:	f7ff f972 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8003ff4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	f43f ae89 	beq.w	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8004000:	462e      	mov	r6, r5
 8004002:	f7ff ba85 	b.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004006:	493f      	ldr	r1, [pc, #252]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004008:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800400a:	f001 0103 	and.w	r1, r1, #3
 800400e:	2903      	cmp	r1, #3
 8004010:	f43f aa7c 	beq.w	800350c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004014:	2100      	movs	r1, #0
 8004016:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800401a:	f7ff f9cd 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 800401e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004020:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004024:	e672      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004026:	4937      	ldr	r1, [pc, #220]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004028:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800402a:	f001 0103 	and.w	r1, r1, #3
 800402e:	2903      	cmp	r1, #3
 8004030:	f000 80f9 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004034:	2100      	movs	r1, #0
 8004036:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800403a:	f7ff f9bd 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 800403e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004040:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004044:	2d00      	cmp	r5, #0
 8004046:	f43f aaad 	beq.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 800404a:	462e      	mov	r6, r5
 800404c:	f7ff bab2 	b.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004050:	492c      	ldr	r1, [pc, #176]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004052:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004054:	f001 0103 	and.w	r1, r1, #3
 8004058:	2903      	cmp	r1, #3
 800405a:	f000 80d1 	beq.w	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 800405e:	2100      	movs	r1, #0
 8004060:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004064:	f7ff f9a8 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8004068:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800406a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800406e:	f7ff bac1 	b.w	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004072:	4924      	ldr	r1, [pc, #144]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004074:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004076:	f001 0103 	and.w	r1, r1, #3
 800407a:	2903      	cmp	r1, #3
 800407c:	f000 80c8 	beq.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004080:	2102      	movs	r1, #2
 8004082:	3028      	adds	r0, #40	@ 0x28
 8004084:	f7ff f998 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8004088:	4606      	mov	r6, r0
        break;
 800408a:	f7ff ba28 	b.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408e:	481d      	ldr	r0, [pc, #116]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004090:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004092:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004096:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8004098:	f7ff ba81 	b.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409c:	4819      	ldr	r0, [pc, #100]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800409e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80040a0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80040a4:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 80040a6:	f7ff ba50 	b.w	800354a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040aa:	4d16      	ldr	r5, [pc, #88]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80040ac:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80040ae:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80040b2:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 80040b4:	f7ff ba17 	b.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040b8:	4912      	ldr	r1, [pc, #72]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80040ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040bc:	f001 0103 	and.w	r1, r1, #3
 80040c0:	2903      	cmp	r1, #3
 80040c2:	f000 80e5 	beq.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80040c6:	2101      	movs	r1, #1
 80040c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80040cc:	f7ff f974 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 80040d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	f47f abcc 	bne.w	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80040dc:	e68c      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040de:	4909      	ldr	r1, [pc, #36]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80040e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040e2:	f001 0103 	and.w	r1, r1, #3
 80040e6:	2903      	cmp	r1, #3
 80040e8:	f000 80d6 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80040ec:	2101      	movs	r1, #1
 80040ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80040f2:	f7ff f961 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 80040f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	f47f ab95 	bne.w	800382c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004102:	e65f      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8004104:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004108:	4983      	ldr	r1, [pc, #524]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 800410a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800410c:	f001 0103 	and.w	r1, r1, #3
 8004110:	2903      	cmp	r1, #3
 8004112:	f43f ab69 	beq.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004116:	2101      	movs	r1, #1
 8004118:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800411c:	f7ff f94c 	bl	80033b8 <RCCEx_PLL3_Config.part.0>
 8004120:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004122:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004126:	2d00      	cmp	r5, #0
 8004128:	f47f ae64 	bne.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800412c:	e58d      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 800412e:	2001      	movs	r0, #1
}
 8004130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004134:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8004138:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800413c:	f43f abb9 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004140:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004144:	f43f abb5 	beq.w	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8004148:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800414a:	4635      	mov	r5, r6
 800414c:	f7ff bbbc 	b.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004150:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8004154:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8004158:	f43f aab8 	beq.w	80036cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 800415c:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8004160:	f43f aab4 	beq.w	80036cc <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8004164:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004166:	4635      	mov	r5, r6
 8004168:	f7ff baba 	b.w	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800416c:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8004170:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004174:	f43f abef 	beq.w	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004178:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800417c:	f43f abeb 	beq.w	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8004180:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004182:	4635      	mov	r5, r6
 8004184:	f7ff bbf2 	b.w	800396c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004188:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800418c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004190:	f43f aac4 	beq.w	800371c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004194:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8004198:	f43f aac0 	beq.w	800371c <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 800419c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800419e:	4635      	mov	r5, r6
 80041a0:	f7ff bac7 	b.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041a4:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 80041a8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80041ac:	f43f abaa 	beq.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80041b0:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 80041b4:	f43f aba6 	beq.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 80041b8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80041ba:	4635      	mov	r5, r6
 80041bc:	f7ff bbad 	b.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 80041c0:	2501      	movs	r5, #1
 80041c2:	e4e2      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041c4:	0691      	lsls	r1, r2, #26
 80041c6:	d5b2      	bpl.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 80041c8:	2501      	movs	r5, #1
 80041ca:	e4f2      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 80041cc:	2501      	movs	r5, #1
 80041ce:	e4a9      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80041d0:	2501      	movs	r5, #1
 80041d2:	e4b8      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80041d4:	2501      	movs	r5, #1
 80041d6:	e4c7      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80041d8:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80041dc:	f43f aa4f 	beq.w	800367e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 80041e0:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80041e4:	f43f aa4b 	beq.w	800367e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 80041e8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80041ea:	4635      	mov	r5, r6
 80041ec:	f7ff ba51 	b.w	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 80041f0:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80041f4:	f43f a9fe 	beq.w	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80041f8:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80041fc:	f43f a9fa 	beq.w	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8004200:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004202:	4635      	mov	r5, r6
 8004204:	f7ff ba01 	b.w	800360a <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004208:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800420c:	f43f a96b 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8004210:	2601      	movs	r6, #1
 8004212:	f7ff b96f 	b.w	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004216:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 800421a:	f43f a9c0 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800421e:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004222:	f43f a9bc 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8004226:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004228:	4635      	mov	r5, r6
 800422a:	f7ff b9c3 	b.w	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 800422e:	29c0      	cmp	r1, #192	@ 0xc0
 8004230:	f43f a98b 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8004234:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004238:	f43f a987 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 800423c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800423e:	4635      	mov	r5, r6
 8004240:	f7ff b98d 	b.w	800355e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8004244:	2930      	cmp	r1, #48	@ 0x30
 8004246:	f43f a9f1 	beq.w	800362c <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 800424a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800424c:	4635      	mov	r5, r6
 800424e:	f7ff b9f7 	b.w	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 8004252:	2503      	movs	r5, #3
      status = ret;
 8004254:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004256:	e9d4 3200 	ldrd	r3, r2, [r4]
 800425a:	f7ff ba95 	b.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	069a      	lsls	r2, r3, #26
 8004262:	f57f af64 	bpl.w	800412e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004266:	4605      	mov	r5, r0
 8004268:	e4a3      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800426a:	492b      	ldr	r1, [pc, #172]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 800426c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800426e:	f001 0103 	and.w	r1, r1, #3
 8004272:	2903      	cmp	r1, #3
 8004274:	f43f aa6b 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004278:	2101      	movs	r1, #1
 800427a:	f104 0008 	add.w	r0, r4, #8
 800427e:	f7ff f82b 	bl	80032d8 <RCCEx_PLL2_Config.part.0>
 8004282:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004284:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004288:	2d00      	cmp	r5, #0
 800428a:	f47f ad8f 	bne.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x914>
 800428e:	e4bf      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 8004290:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004292:	4635      	mov	r5, r6
 8004294:	f7ff baef 	b.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8004298:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800429a:	4635      	mov	r5, r6
 800429c:	f7ff bac7 	b.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 80042a0:	2601      	movs	r6, #1
 80042a2:	f7ff bb79 	b.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 80042a6:	2601      	movs	r6, #1
 80042a8:	f7ff bb68 	b.w	800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042ac:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80042b4:	f7ff bb62 	b.w	800397c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 80042bc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80042c2:	f7ff bb69 	b.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 80042c6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80042c8:	4635      	mov	r5, r6
 80042ca:	f7ff ba5a 	b.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 80042ce:	f7fd f863 	bl	8001398 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d2:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8004318 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 80042d6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd f85b 	bl	8001398 <HAL_GetTick>
 80042e2:	1bc0      	subs	r0, r0, r7
 80042e4:	4548      	cmp	r0, r9
 80042e6:	d810      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80042ec:	079b      	lsls	r3, r3, #30
 80042ee:	d5f6      	bpl.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80042f4:	e4f0      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80042f6:	4808      	ldr	r0, [pc, #32]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80042f8:	4a08      	ldr	r2, [pc, #32]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 80042fa:	6901      	ldr	r1, [r0, #16]
 80042fc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004300:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004304:	430a      	orrs	r2, r1
 8004306:	6102      	str	r2, [r0, #16]
 8004308:	e4f1      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 800430a:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800430c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004310:	4635      	mov	r5, r6
 8004312:	f7ff ba39 	b.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8004316:	bf00      	nop
 8004318:	58024400 	.word	0x58024400
 800431c:	00ffffcf 	.word	0x00ffffcf

08004320 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004320:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004322:	f7fe ff09 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8004326:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004328:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	f003 031f 	and.w	r3, r3, #31
}
 8004336:	40d8      	lsrs	r0, r3
 8004338:	bd08      	pop	{r3, pc}
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
 8004340:	08009118 	.word	0x08009118

08004344 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004344:	4a47      	ldr	r2, [pc, #284]	@ (8004464 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8004346:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004348:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800434a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800434c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800434e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004352:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004356:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8004358:	d05b      	beq.n	8004412 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800435a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800435e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004362:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004366:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800436a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800436e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004374:	ee06 1a90 	vmov	s13, r1
 8004378:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800437c:	d003      	beq.n	8004386 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800437e:	2c02      	cmp	r4, #2
 8004380:	d06a      	beq.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8004382:	2c00      	cmp	r4, #0
 8004384:	d04a      	beq.n	800441c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004386:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800438a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800438e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800439c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80043a8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80043ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80043ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80043b2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80043b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80043b8:	ee07 3a10 	vmov	s14, r3
 80043bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80043c0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80043c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80043c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80043ce:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80043d2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80043d4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80043d8:	ee07 3a10 	vmov	s14, r3
 80043dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80043e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043e8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80043ec:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80043f0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80043f2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80043f6:	ee06 3a90 	vmov	s13, r3
 80043fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80043fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004402:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004406:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800440a:	ee17 3a90 	vmov	r3, s15
 800440e:	6083      	str	r3, [r0, #8]
}
 8004410:	4770      	bx	lr
 8004412:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004414:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004418:	6083      	str	r3, [r0, #8]
}
 800441a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	d51d      	bpl.n	800445e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004422:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004424:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004428:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800442a:	4910      	ldr	r1, [pc, #64]	@ (800446c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800442c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004434:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	ee06 1a10 	vmov	s12, r1
 800443e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004442:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004446:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800444a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800444e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004456:	e7a9      	b.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004458:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800445c:	e795      	b.n	800438a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800445e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8004462:	e792      	b.n	800438a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004464:	58024400 	.word	0x58024400
 8004468:	4a742400 	.word	0x4a742400
 800446c:	03d09000 	.word	0x03d09000
 8004470:	4bbebc20 	.word	0x4bbebc20
 8004474:	4c742400 	.word	0x4c742400

08004478 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004478:	4a47      	ldr	r2, [pc, #284]	@ (8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800447a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800447c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800447e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004480:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8004482:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004486:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800448a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800448c:	d05b      	beq.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800448e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004492:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004496:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800449a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800449e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80044a2:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044a8:	ee06 1a90 	vmov	s13, r1
 80044ac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80044b2:	2c02      	cmp	r4, #2
 80044b4:	d06a      	beq.n	800458c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	d04a      	beq.n	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044ba:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800459c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80044be:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80044c2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80044c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80044d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80044dc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80044e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80044e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80044e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80044ec:	ee07 3a10 	vmov	s14, r3
 80044f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80044f4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004502:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004506:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004508:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800450c:	ee07 3a10 	vmov	s14, r3
 8004510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004514:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004518:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800451c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004520:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004524:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004526:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800452a:	ee06 3a90 	vmov	s13, r3
 800452e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004532:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004536:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800453a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800453e:	ee17 3a90 	vmov	r3, s15
 8004542:	6083      	str	r3, [r0, #8]
}
 8004544:	4770      	bx	lr
 8004546:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004548:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800454c:	6083      	str	r3, [r0, #8]
}
 800454e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004550:	6813      	ldr	r3, [r2, #0]
 8004552:	069b      	lsls	r3, r3, #26
 8004554:	d51d      	bpl.n	8004592 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004556:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004558:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800455c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800455e:	4910      	ldr	r1, [pc, #64]	@ (80045a0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004560:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004564:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004568:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	ee06 1a10 	vmov	s12, r1
 8004572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004576:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800457a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800457e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004582:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800458a:	e7a9      	b.n	80044e0 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800458c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004590:	e795      	b.n	80044be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004592:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8004596:	e792      	b.n	80044be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8004598:	58024400 	.word	0x58024400
 800459c:	4a742400 	.word	0x4a742400
 80045a0:	03d09000 	.word	0x03d09000
 80045a4:	4bbebc20 	.word	0x4bbebc20
 80045a8:	4c742400 	.word	0x4c742400

080045ac <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ac:	4a47      	ldr	r2, [pc, #284]	@ (80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80045ae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80045b2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80045b4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80045b6:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80045ba:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045be:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80045c0:	d05b      	beq.n	800467a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045c2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80045c6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ca:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ce:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045d2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80045d6:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045dc:	ee06 1a90 	vmov	s13, r1
 80045e0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80045e4:	d04e      	beq.n	8004684 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80045e6:	2c02      	cmp	r4, #2
 80045e8:	d06d      	beq.n	80046c6 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d04d      	beq.n	800468a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ee:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80045f2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80045f6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004610:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004614:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8004616:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800461a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800461c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004620:	ee07 3a10 	vmov	s14, r3
 8004624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004628:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800462a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800462e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004632:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004636:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800463a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800463c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004640:	ee07 3a10 	vmov	s14, r3
 8004644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004648:	ee37 7a06 	vadd.f32	s14, s14, s12
 800464c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004650:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004654:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004658:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800465a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800465e:	ee06 3a90 	vmov	s13, r3
 8004662:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004666:	ee76 6a86 	vadd.f32	s13, s13, s12
 800466a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800466e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004672:	ee17 3a90 	vmov	r3, s15
 8004676:	6083      	str	r3, [r0, #8]
}
 8004678:	4770      	bx	lr
 800467a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800467c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004680:	6083      	str	r3, [r0, #8]
}
 8004682:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004684:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8004688:	e7b3      	b.n	80045f2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	d5ae      	bpl.n	80045ee <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004690:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004692:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004696:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004698:	490f      	ldr	r1, [pc, #60]	@ (80046d8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 800469a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	ee06 1a10 	vmov	s12, r1
 80046ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80046b4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80046b8:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80046bc:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80046c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046c4:	e7a6      	b.n	8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80046dc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80046ca:	e792      	b.n	80045f2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80046cc:	58024400 	.word	0x58024400
 80046d0:	4c742400 	.word	0x4c742400
 80046d4:	4a742400 	.word	0x4a742400
 80046d8:	03d09000 	.word	0x03d09000
 80046dc:	4bbebc20 	.word	0x4bbebc20

080046e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046e0:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80046e4:	430b      	orrs	r3, r1
{
 80046e6:	b500      	push	{lr}
 80046e8:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046ea:	d04c      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80046ec:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80046f0:	430b      	orrs	r3, r1
 80046f2:	d036      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80046f4:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80046f8:	430b      	orrs	r3, r1
 80046fa:	d06c      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80046fc:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004700:	430b      	orrs	r3, r1
 8004702:	d04b      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004704:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8004708:	430b      	orrs	r3, r1
 800470a:	f000 80b6 	beq.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800470e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8004712:	430b      	orrs	r3, r1
 8004714:	f000 80ec 	beq.w	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004718:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800471c:	430b      	orrs	r3, r1
 800471e:	d069      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004720:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8004724:	430b      	orrs	r3, r1
 8004726:	f000 80d6 	beq.w	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800472a:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800472e:	430b      	orrs	r3, r1
 8004730:	f000 8109 	beq.w	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004734:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8004738:	4308      	orrs	r0, r1
 800473a:	d120      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800473c:	4a95      	ldr	r2, [pc, #596]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800473e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004740:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8004744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004748:	f000 80aa 	beq.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004750:	f000 8116 	beq.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004754:	b99b      	cbnz	r3, 800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004756:	6810      	ldr	r0, [r2, #0]
 8004758:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800475c:	d047      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800475e:	488e      	ldr	r0, [pc, #568]	@ (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8004760:	e045      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004762:	4a8c      	ldr	r2, [pc, #560]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004764:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004766:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800476a:	2b80      	cmp	r3, #128	@ 0x80
 800476c:	f000 8093 	beq.w	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004770:	f240 808b 	bls.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004774:	2bc0      	cmp	r3, #192	@ 0xc0
 8004776:	d039      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477c:	d05c      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 800477e:	2000      	movs	r0, #0
}
 8004780:	b005      	add	sp, #20
 8004782:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004786:	4b83      	ldr	r3, [pc, #524]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800478e:	2b04      	cmp	r3, #4
 8004790:	d8f5      	bhi.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8004792:	e8df f003 	tbb	[pc, r3]
 8004796:	3c68      	.short	0x3c68
 8004798:	2b46      	.short	0x2b46
 800479a:	50          	.byte	0x50
 800479b:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800479c:	4a7d      	ldr	r2, [pc, #500]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800479e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80047a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80047a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047a8:	d075      	beq.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80047aa:	d96e      	bls.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80047ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047b0:	d01c      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80047b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047b6:	d1e2      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047b8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047ba:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80047bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047c0:	0752      	lsls	r2, r2, #29
 80047c2:	d541      	bpl.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d13f      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047c8:	4b72      	ldr	r3, [pc, #456]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047ca:	4874      	ldr	r0, [pc, #464]	@ (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80047d2:	40d8      	lsrs	r0, r3
 80047d4:	e00b      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80047d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80047da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047e2:	d058      	beq.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80047e4:	d951      	bls.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80047e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80047ea:	d15e      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 80047ec:	486c      	ldr	r0, [pc, #432]	@ (80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80047ee:	b005      	add	sp, #20
 80047f0:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80047f4:	4a67      	ldr	r2, [pc, #412]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047f6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80047f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	f000 80df 	beq.w	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8004804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004808:	d0d6      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1b7      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800480e:	4b61      	ldr	r3, [pc, #388]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004816:	d0ea      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004818:	a801      	add	r0, sp, #4
 800481a:	f7ff fd93 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800481e:	9801      	ldr	r0, [sp, #4]
 8004820:	e7e5      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004822:	4b5c      	ldr	r3, [pc, #368]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800482a:	d0e0      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482c:	a801      	add	r0, sp, #4
 800482e:	f7ff fe23 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004832:	9801      	ldr	r0, [sp, #4]
 8004834:	e7db      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004836:	4a57      	ldr	r2, [pc, #348]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004838:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800483a:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800483c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004840:	0749      	lsls	r1, r1, #29
 8004842:	d501      	bpl.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d038      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004848:	4a52      	ldr	r2, [pc, #328]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	05d0      	lsls	r0, r2, #23
 800484e:	d502      	bpl.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004854:	d067      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004856:	4a4f      	ldr	r2, [pc, #316]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	0391      	lsls	r1, r2, #14
 800485c:	d58f      	bpl.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004862:	d18c      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8004864:	e77b      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004866:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800486e:	d0be      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004870:	a801      	add	r0, sp, #4
 8004872:	f7ff fe9b 	bl	80045ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004876:	9802      	ldr	r0, [sp, #8]
 8004878:	e7b9      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800487a:	4a46      	ldr	r2, [pc, #280]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800487c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800487e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004886:	d006      	beq.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8004888:	d81d      	bhi.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800488a:	b14b      	cbz	r3, 80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800488c:	6810      	ldr	r0, [r2, #0]
 800488e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004892:	d0ac      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004894:	e7c0      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004896:	6810      	ldr	r0, [r2, #0]
 8004898:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800489c:	d0a7      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800489e:	e7c5      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048a0:	6810      	ldr	r0, [r2, #0]
 80048a2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80048a6:	d0a2      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80048a8:	e7e2      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 80048aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ae:	d0c3      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80048b0:	e765      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b2:	6810      	ldr	r0, [r2, #0]
 80048b4:	f010 0004 	ands.w	r0, r0, #4
 80048b8:	d099      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	4837      	ldr	r0, [pc, #220]	@ (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048c2:	40d8      	lsrs	r0, r3
 80048c4:	e793      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80048c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048ca:	d08f      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80048cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d0:	f43f af72 	beq.w	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80048d4:	e753      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80048d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80048da:	03d2      	lsls	r2, r2, #15
 80048dc:	d5c4      	bpl.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80048e4:	d083      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e6:	a801      	add	r0, sp, #4
 80048e8:	f7ff fd2c 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80048ec:	9803      	ldr	r0, [sp, #12]
 80048ee:	e77e      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80048f0:	4a28      	ldr	r2, [pc, #160]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80048f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80048f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048fc:	d0d9      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80048fe:	d814      	bhi.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d03c      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800490a:	d04f      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800490c:	2b00      	cmp	r3, #0
 800490e:	f47f af36 	bne.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8004912:	b005      	add	sp, #20
 8004914:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fe bc4e 	b.w	80031b8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800491c:	6810      	ldr	r0, [r2, #0]
 800491e:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004922:	f43f af64 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8004926:	481f      	ldr	r0, [pc, #124]	@ (80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004928:	e761      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800492a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800492e:	d0f5      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8004930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004934:	f47f af23 	bne.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004938:	4b16      	ldr	r3, [pc, #88]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004940:	f43f af55 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004944:	e70b      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800494e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004952:	d04e      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8004954:	d83f      	bhi.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495a:	d043      	beq.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800495c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004960:	d024      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8004962:	2b00      	cmp	r3, #0
 8004964:	f47f af0b 	bne.w	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004968:	f7fe fbe6 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 800496c:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800496e:	4a0e      	ldr	r2, [pc, #56]	@ (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004976:	5cd3      	ldrb	r3, [r2, r3]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	40d8      	lsrs	r0, r3
        break;
 800497e:	e736      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004980:	6810      	ldr	r0, [r2, #0]
 8004982:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004986:	f43f af32 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800498a:	a801      	add	r0, sp, #4
 800498c:	f7ff fcda 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004990:	9802      	ldr	r0, [sp, #8]
 8004992:	e72c      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004994:	58024400 	.word	0x58024400
 8004998:	017d7840 	.word	0x017d7840
 800499c:	03d09000 	.word	0x03d09000
 80049a0:	00bb8000 	.word	0x00bb8000
 80049a4:	003d0900 	.word	0x003d0900
 80049a8:	08009118 	.word	0x08009118
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80049b4:	f43f af1b 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049b8:	a801      	add	r0, sp, #4
 80049ba:	f7ff fd5d 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80049be:	9802      	ldr	r0, [sp, #8]
 80049c0:	e715      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049c2:	6810      	ldr	r0, [r2, #0]
 80049c4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80049c8:	f43f af11 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049cc:	a801      	add	r0, sp, #4
 80049ce:	f7ff fd53 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80049d2:	9803      	ldr	r0, [sp, #12]
 80049d4:	e70b      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049da:	d016      	beq.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80049dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049e0:	d0aa      	beq.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80049e2:	e6cc      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80049ec:	f43f aeff 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80049f0:	e7cb      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f010 0004 	ands.w	r0, r0, #4
 80049fa:	f43f aef8 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4806      	ldr	r0, [pc, #24]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004a02:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004a06:	40d8      	lsrs	r0, r3
 8004a08:	e6f1      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004a0a:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004a12:	f43f aeec 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004a16:	e786      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	03d09000 	.word	0x03d09000

08004a20 <HAL_SPI_Init>:
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f000 80c5 	beq.w	8004bb0 <HAL_SPI_Init+0x190>
{
 8004a26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a2a:	4604      	mov	r4, r0
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a2c:	4b66      	ldr	r3, [pc, #408]	@ (8004bc8 <HAL_SPI_Init+0x1a8>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a2e:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a30:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004a32:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a34:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a36:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004a38:	d016      	beq.n	8004a68 <HAL_SPI_Init+0x48>
 8004a3a:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d012      	beq.n	8004a68 <HAL_SPI_Init+0x48>
 8004a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a46:	429a      	cmp	r2, r3
 8004a48:	f000 80aa 	beq.w	8004ba0 <HAL_SPI_Init+0x180>
 8004a4c:	290f      	cmp	r1, #15
 8004a4e:	d808      	bhi.n	8004a62 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a50:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004a52:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a56:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8004a58:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8004a5a:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d90a      	bls.n	8004a78 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 8004a62:	2001      	movs	r0, #1
}
 8004a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a68:	4b57      	ldr	r3, [pc, #348]	@ (8004bc8 <HAL_SPI_Init+0x1a8>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a6a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d06e      	beq.n	8004b4e <HAL_SPI_Init+0x12e>
 8004a70:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d06a      	beq.n	8004b4e <HAL_SPI_Init+0x12e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a78:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8004a7c:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8082 	beq.w	8004b8a <HAL_SPI_Init+0x16a>
 8004a86:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a8a:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a8c:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a8e:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8004a92:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004a96:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004aa2:	6893      	ldr	r3, [r2, #8]
 8004aa4:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004aa8:	69a3      	ldr	r3, [r4, #24]
 8004aaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aae:	d058      	beq.n	8004b62 <HAL_SPI_Init+0x142>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004ab0:	f1b9 0f00 	cmp.w	r9, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_SPI_Init+0x9a>
 8004ab6:	2906      	cmp	r1, #6
 8004ab8:	d860      	bhi.n	8004b7c <HAL_SPI_Init+0x15c>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004aba:	6817      	ldr	r7, [r2, #0]
 8004abc:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8004ac0:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ac2:	4303      	orrs	r3, r0
 8004ac4:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ac6:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004aca:	ea43 030e 	orr.w	r3, r3, lr
 8004ace:	433b      	orrs	r3, r7
 8004ad0:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8004ad2:	433b      	orrs	r3, r7
 8004ad4:	6927      	ldr	r7, [r4, #16]
 8004ad6:	433b      	orrs	r3, r7
 8004ad8:	6967      	ldr	r7, [r4, #20]
 8004ada:	433b      	orrs	r3, r7
 8004adc:	6a27      	ldr	r7, [r4, #32]
 8004ade:	433b      	orrs	r3, r7
 8004ae0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8004ae2:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ae4:	69e7      	ldr	r7, [r4, #28]
 8004ae6:	4339      	orrs	r1, r7
 8004ae8:	4329      	orrs	r1, r5
 8004aea:	ea41 010c 	orr.w	r1, r1, ip
 8004aee:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004af0:	68a1      	ldr	r1, [r4, #8]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004af6:	430b      	orrs	r3, r1
 8004af8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004afa:	430b      	orrs	r3, r1
 8004afc:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004afe:	b9c0      	cbnz	r0, 8004b32 <HAL_SPI_Init+0x112>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8004b06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004b0a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004b0c:	6893      	ldr	r3, [r2, #8]
 8004b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b16:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b18:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b20:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004b22:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b24:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8004b28:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 8004b2a:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b32:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004b3a:	f1b9 0f00 	cmp.w	r9, #0
 8004b3e:	d0ef      	beq.n	8004b20 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004b40:	68d3      	ldr	r3, [r2, #12]
 8004b42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004b44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	60d3      	str	r3, [r2, #12]
 8004b4c:	e7e8      	b.n	8004b20 <HAL_SPI_Init+0x100>
  data_size = (data_size + 7UL) / 8UL;
 8004b4e:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b52:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8004b54:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8004b56:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d98c      	bls.n	8004a78 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e780      	b.n	8004a64 <HAL_SPI_Init+0x44>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b62:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8004b66:	d025      	beq.n	8004bb4 <HAL_SPI_Init+0x194>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1a1      	bne.n	8004ab0 <HAL_SPI_Init+0x90>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004b6c:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 8004b70:	d1a3      	bne.n	8004aba <HAL_SPI_Init+0x9a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004b72:	6817      	ldr	r7, [r2, #0]
 8004b74:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8004b78:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004b7a:	e79e      	b.n	8004aba <HAL_SPI_Init+0x9a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004b7c:	6817      	ldr	r7, [r2, #0]
 8004b7e:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8004b80:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8004b84:	4337      	orrs	r7, r6
 8004b86:	6017      	str	r7, [r2, #0]
 8004b88:	e79b      	b.n	8004ac2 <HAL_SPI_Init+0xa2>
    HAL_SPI_MspInit(hspi);
 8004b8a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004b8c:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8004b90:	f7fc f82a 	bl	8000be8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004b94:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004b96:	68e1      	ldr	r1, [r4, #12]
 8004b98:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8004b9c:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004b9e:	e774      	b.n	8004a8a <HAL_SPI_Init+0x6a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ba0:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004ba2:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ba6:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8004ba8:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8004baa:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bae:	e7d4      	b.n	8004b5a <HAL_SPI_Init+0x13a>
    return HAL_ERROR;
 8004bb0:	2001      	movs	r0, #1
}
 8004bb2:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bb4:	f1be 0f00 	cmp.w	lr, #0
 8004bb8:	f47f af7d 	bne.w	8004ab6 <HAL_SPI_Init+0x96>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004bbc:	6817      	ldr	r7, [r2, #0]
 8004bbe:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8004bc2:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004bc4:	e777      	b.n	8004ab6 <HAL_SPI_Init+0x96>
 8004bc6:	bf00      	nop
 8004bc8:	40013000 	.word	0x40013000

08004bcc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bcc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bd0:	f023 0302 	bic.w	r3, r3, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
{
 8004bd8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	6202      	str	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bdc:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <TIM_OC1_SetConfig+0x70>)
  tmpcr2 =  TIMx->CR2;
 8004bde:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004be0:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004be4:	680d      	ldr	r5, [r1, #0]
 8004be6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004be8:	688d      	ldr	r5, [r1, #8]
 8004bea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bec:	4d14      	ldr	r5, [pc, #80]	@ (8004c40 <TIM_OC1_SetConfig+0x74>)
 8004bee:	42a8      	cmp	r0, r5
 8004bf0:	d00e      	beq.n	8004c10 <TIM_OC1_SetConfig+0x44>
 8004bf2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004bf6:	42a8      	cmp	r0, r5
 8004bf8:	d00a      	beq.n	8004c10 <TIM_OC1_SetConfig+0x44>
 8004bfa:	4e12      	ldr	r6, [pc, #72]	@ (8004c44 <TIM_OC1_SetConfig+0x78>)
 8004bfc:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8004c00:	42a8      	cmp	r0, r5
 8004c02:	bf18      	it	ne
 8004c04:	42b0      	cmpne	r0, r6
 8004c06:	d003      	beq.n	8004c10 <TIM_OC1_SetConfig+0x44>
 8004c08:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c0c:	42a8      	cmp	r0, r5
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c10:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c12:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c16:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004c1a:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c1c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c20:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c24:	ea46 0c05 	orr.w	ip, r6, r5
 8004c28:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004c30:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004c32:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c34:	6203      	str	r3, [r0, #32]
}
 8004c36:	bc70      	pop	{r4, r5, r6}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	fffeff8c 	.word	0xfffeff8c
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40014000 	.word	0x40014000

08004c48 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c48:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8004c54:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c56:	6202      	str	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c58:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <TIM_OC3_SetConfig+0x74>)
  tmpcr2 =  TIMx->CR2;
 8004c5a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c5c:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c5e:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	680d      	ldr	r5, [r1, #0]
 8004c62:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c64:	688d      	ldr	r5, [r1, #8]
 8004c66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c6a:	4d15      	ldr	r5, [pc, #84]	@ (8004cc0 <TIM_OC3_SetConfig+0x78>)
 8004c6c:	42a8      	cmp	r0, r5
 8004c6e:	d00f      	beq.n	8004c90 <TIM_OC3_SetConfig+0x48>
 8004c70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c74:	42a8      	cmp	r0, r5
 8004c76:	d00b      	beq.n	8004c90 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	4e12      	ldr	r6, [pc, #72]	@ (8004cc4 <TIM_OC3_SetConfig+0x7c>)
 8004c7a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8004c7e:	42a8      	cmp	r0, r5
 8004c80:	bf18      	it	ne
 8004c82:	42b0      	cmpne	r0, r6
 8004c84:	d00b      	beq.n	8004c9e <TIM_OC3_SetConfig+0x56>
 8004c86:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c8a:	42a8      	cmp	r0, r5
 8004c8c:	d10f      	bne.n	8004cae <TIM_OC3_SetConfig+0x66>
 8004c8e:	e006      	b.n	8004c9e <TIM_OC3_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c94:	68cd      	ldr	r5, [r1, #12]
 8004c96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c9e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8004ca6:	ea46 0c05 	orr.w	ip, r6, r5
 8004caa:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004cb0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004cb2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004cb4:	63c1      	str	r1, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	6203      	str	r3, [r0, #32]
}
 8004cb8:	bc70      	pop	{r4, r5, r6}
 8004cba:	4770      	bx	lr
 8004cbc:	fffeff8c 	.word	0xfffeff8c
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40014000 	.word	0x40014000

08004cc8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f000 8095 	beq.w	8004df8 <HAL_TIM_Base_Init+0x130>
{
 8004cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8087 	beq.w	8004dee <HAL_TIM_Base_Init+0x126>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce0:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce2:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce4:	4945      	ldr	r1, [pc, #276]	@ (8004dfc <HAL_TIM_Base_Init+0x134>)
 8004ce6:	4d46      	ldr	r5, [pc, #280]	@ (8004e00 <HAL_TIM_Base_Init+0x138>)
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8004cf8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfa:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfe:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d06:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 8004d0a:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d0c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004d10:	d01f      	beq.n	8004d52 <HAL_TIM_Base_Init+0x8a>
 8004d12:	b9f1      	cbnz	r1, 8004d52 <HAL_TIM_Base_Init+0x8a>
 8004d14:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8004e10 <HAL_TIM_Base_Init+0x148>
 8004d18:	4563      	cmp	r3, ip
 8004d1a:	d050      	beq.n	8004dbe <HAL_TIM_Base_Init+0xf6>
 8004d1c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004d20:	4563      	cmp	r3, ip
 8004d22:	d04c      	beq.n	8004dbe <HAL_TIM_Base_Init+0xf6>
 8004d24:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004d28:	4563      	cmp	r3, ip
 8004d2a:	d012      	beq.n	8004d52 <HAL_TIM_Base_Init+0x8a>
 8004d2c:	f1be 0f00 	cmp.w	lr, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d32:	4d34      	ldr	r5, [pc, #208]	@ (8004e04 <HAL_TIM_Base_Init+0x13c>)
 8004d34:	4934      	ldr	r1, [pc, #208]	@ (8004e08 <HAL_TIM_Base_Init+0x140>)
 8004d36:	428b      	cmp	r3, r1
 8004d38:	bf18      	it	ne
 8004d3a:	42ab      	cmpne	r3, r5
 8004d3c:	d043      	beq.n	8004dc6 <HAL_TIM_Base_Init+0xfe>
 8004d3e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d42:	428b      	cmp	r3, r1
 8004d44:	d03f      	beq.n	8004dc6 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4a:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d4c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4e:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d50:	e014      	b.n	8004d7c <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8004d52:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d58:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5e:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d60:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d6e:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d70:	b911      	cbnz	r1, 8004d78 <HAL_TIM_Base_Init+0xb0>
 8004d72:	f1be 0f00 	cmp.w	lr, #0
 8004d76:	d02f      	beq.n	8004dd8 <HAL_TIM_Base_Init+0x110>
    TIMx->RCR = Structure->RepetitionCounter;
 8004d78:	6962      	ldr	r2, [r4, #20]
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d7c:	6819      	ldr	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004d7e:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d80:	f041 0104 	orr.w	r1, r1, #4
 8004d84:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004d86:	615a      	str	r2, [r3, #20]
  TIMx->CR1 = tmpcr1;
 8004d88:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004d8a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8c:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8004d94:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8004d98:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8004d9c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8004da0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8004da4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8004dac:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8004db0:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8004db4:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8004dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004dc2:	68a1      	ldr	r1, [r4, #8]
 8004dc4:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dce:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dd6:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd8:	490c      	ldr	r1, [pc, #48]	@ (8004e0c <HAL_TIM_Base_Init+0x144>)
 8004dda:	4a0a      	ldr	r2, [pc, #40]	@ (8004e04 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bf18      	it	ne
 8004de0:	428b      	cmpne	r3, r1
 8004de2:	d0c9      	beq.n	8004d78 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d0c5      	beq.n	8004d78 <HAL_TIM_Base_Init+0xb0>
 8004dec:	e7c6      	b.n	8004d7c <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8004dee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004df2:	f7fc f987 	bl	8001104 <HAL_TIM_Base_MspInit>
 8004df6:	e773      	b.n	8004ce0 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8004df8:	2001      	movs	r0, #1
}
 8004dfa:	4770      	bx	lr
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40000400 	.word	0x40000400

08004e14 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	f000 8095 	beq.w	8004f48 <HAL_TIM_OC_Init+0x130>
{
 8004e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e20:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e24:	4604      	mov	r4, r0
 8004e26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8087 	beq.w	8004f3e <HAL_TIM_OC_Init+0x126>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e30:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e32:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	4945      	ldr	r1, [pc, #276]	@ (8004f4c <HAL_TIM_OC_Init+0x134>)
 8004e36:	4d46      	ldr	r5, [pc, #280]	@ (8004f50 <HAL_TIM_OC_Init+0x138>)
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3c:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8004e48:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e4a:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4e:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e50:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e54:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e56:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 8004e5a:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004e60:	d01f      	beq.n	8004ea2 <HAL_TIM_OC_Init+0x8a>
 8004e62:	b9f1      	cbnz	r1, 8004ea2 <HAL_TIM_OC_Init+0x8a>
 8004e64:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8004f60 <HAL_TIM_OC_Init+0x148>
 8004e68:	4563      	cmp	r3, ip
 8004e6a:	d050      	beq.n	8004f0e <HAL_TIM_OC_Init+0xf6>
 8004e6c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004e70:	4563      	cmp	r3, ip
 8004e72:	d04c      	beq.n	8004f0e <HAL_TIM_OC_Init+0xf6>
 8004e74:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004e78:	4563      	cmp	r3, ip
 8004e7a:	d012      	beq.n	8004ea2 <HAL_TIM_OC_Init+0x8a>
 8004e7c:	f1be 0f00 	cmp.w	lr, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_TIM_OC_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e82:	4d34      	ldr	r5, [pc, #208]	@ (8004f54 <HAL_TIM_OC_Init+0x13c>)
 8004e84:	4934      	ldr	r1, [pc, #208]	@ (8004f58 <HAL_TIM_OC_Init+0x140>)
 8004e86:	428b      	cmp	r3, r1
 8004e88:	bf18      	it	ne
 8004e8a:	42ab      	cmpne	r3, r5
 8004e8c:	d043      	beq.n	8004f16 <HAL_TIM_OC_Init+0xfe>
 8004e8e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d03f      	beq.n	8004f16 <HAL_TIM_OC_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9a:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9e:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	e014      	b.n	8004ecc <HAL_TIM_OC_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8004ea2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea8:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004eac:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eae:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ebe:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	b911      	cbnz	r1, 8004ec8 <HAL_TIM_OC_Init+0xb0>
 8004ec2:	f1be 0f00 	cmp.w	lr, #0
 8004ec6:	d02f      	beq.n	8004f28 <HAL_TIM_OC_Init+0x110>
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec8:	6962      	ldr	r2, [r4, #20]
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ecc:	6819      	ldr	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004ece:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ed0:	f041 0104 	orr.w	r1, r1, #4
 8004ed4:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004ed6:	615a      	str	r2, [r3, #20]
  TIMx->CR1 = tmpcr1;
 8004ed8:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004eda:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004edc:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8004ee4:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8004ee8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8004eec:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8004ef0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8004ef4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8004efc:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8004f00:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8004f04:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f12:	68a1      	ldr	r1, [r4, #8]
 8004f14:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f18:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1c:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8004f20:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f26:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f28:	490c      	ldr	r1, [pc, #48]	@ (8004f5c <HAL_TIM_OC_Init+0x144>)
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <HAL_TIM_OC_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf18      	it	ne
 8004f30:	428b      	cmpne	r3, r1
 8004f32:	d0c9      	beq.n	8004ec8 <HAL_TIM_OC_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d0c5      	beq.n	8004ec8 <HAL_TIM_OC_Init+0xb0>
 8004f3c:	e7c6      	b.n	8004ecc <HAL_TIM_OC_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004f42:	f7ff ff67 	bl	8004e14 <HAL_TIM_OC_MspInit>
 8004f46:	e773      	b.n	8004e30 <HAL_TIM_OC_Init+0x18>
    return HAL_ERROR;
 8004f48:	2001      	movs	r0, #1
}
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800
 8004f60:	40000400 	.word	0x40000400

08004f64 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f000 8095 	beq.w	8005094 <HAL_TIM_PWM_Init+0x130>
{
 8004f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f70:	4604      	mov	r4, r0
 8004f72:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8087 	beq.w	800508a <HAL_TIM_PWM_Init+0x126>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f80:	4945      	ldr	r1, [pc, #276]	@ (8005098 <HAL_TIM_PWM_Init+0x134>)
 8004f82:	4d46      	ldr	r5, [pc, #280]	@ (800509c <HAL_TIM_PWM_Init+0x138>)
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f88:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f90:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8004f94:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f96:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9a:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa0:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa2:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 8004fa6:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004fac:	d01f      	beq.n	8004fee <HAL_TIM_PWM_Init+0x8a>
 8004fae:	b9f1      	cbnz	r1, 8004fee <HAL_TIM_PWM_Init+0x8a>
 8004fb0:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80050ac <HAL_TIM_PWM_Init+0x148>
 8004fb4:	4563      	cmp	r3, ip
 8004fb6:	d050      	beq.n	800505a <HAL_TIM_PWM_Init+0xf6>
 8004fb8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004fbc:	4563      	cmp	r3, ip
 8004fbe:	d04c      	beq.n	800505a <HAL_TIM_PWM_Init+0xf6>
 8004fc0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004fc4:	4563      	cmp	r3, ip
 8004fc6:	d012      	beq.n	8004fee <HAL_TIM_PWM_Init+0x8a>
 8004fc8:	f1be 0f00 	cmp.w	lr, #0
 8004fcc:	d10f      	bne.n	8004fee <HAL_TIM_PWM_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fce:	4d34      	ldr	r5, [pc, #208]	@ (80050a0 <HAL_TIM_PWM_Init+0x13c>)
 8004fd0:	4934      	ldr	r1, [pc, #208]	@ (80050a4 <HAL_TIM_PWM_Init+0x140>)
 8004fd2:	428b      	cmp	r3, r1
 8004fd4:	bf18      	it	ne
 8004fd6:	42ab      	cmpne	r3, r5
 8004fd8:	d043      	beq.n	8005062 <HAL_TIM_PWM_Init+0xfe>
 8004fda:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d03f      	beq.n	8005062 <HAL_TIM_PWM_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe6:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fea:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fec:	e014      	b.n	8005018 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8004fee:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffa:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ffc:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005002:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800500a:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	b911      	cbnz	r1, 8005014 <HAL_TIM_PWM_Init+0xb0>
 800500e:	f1be 0f00 	cmp.w	lr, #0
 8005012:	d02f      	beq.n	8005074 <HAL_TIM_PWM_Init+0x110>
    TIMx->RCR = Structure->RepetitionCounter;
 8005014:	6962      	ldr	r2, [r4, #20]
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005018:	6819      	ldr	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 800501a:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800501c:	f041 0104 	orr.w	r1, r1, #4
 8005020:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005022:	615a      	str	r2, [r3, #20]
  TIMx->CR1 = tmpcr1;
 8005024:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8005026:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8005030:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8005034:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8005038:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 800503c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8005040:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8005048:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 800504c:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8005050:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005054:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800505a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800505e:	68a1      	ldr	r1, [r4, #8]
 8005060:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005064:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005068:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800506c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005072:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005074:	490c      	ldr	r1, [pc, #48]	@ (80050a8 <HAL_TIM_PWM_Init+0x144>)
 8005076:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <HAL_TIM_PWM_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005078:	4293      	cmp	r3, r2
 800507a:	bf18      	it	ne
 800507c:	428b      	cmpne	r3, r1
 800507e:	d0c9      	beq.n	8005014 <HAL_TIM_PWM_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005080:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005084:	4293      	cmp	r3, r2
 8005086:	d0c5      	beq.n	8005014 <HAL_TIM_PWM_Init+0xb0>
 8005088:	e7c6      	b.n	8005018 <HAL_TIM_PWM_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 800508a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800508e:	f7fc f81f 	bl	80010d0 <HAL_TIM_PWM_MspInit>
 8005092:	e773      	b.n	8004f7c <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8005094:	2001      	movs	r0, #1
}
 8005096:	4770      	bx	lr
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	40000400 	.word	0x40000400

080050b0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80050b0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b2:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 80050b4:	f023 0320 	bic.w	r3, r3, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b8:	f022 0210 	bic.w	r2, r2, #16
{
 80050bc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050be:	6202      	str	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c0:	4a19      	ldr	r2, [pc, #100]	@ (8005128 <TIM_OC2_SetConfig+0x78>)
  tmpcr2 =  TIMx->CR2;
 80050c2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80050c4:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	680d      	ldr	r5, [r1, #0]
 80050ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ce:	688d      	ldr	r5, [r1, #8]
 80050d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d4:	4d15      	ldr	r5, [pc, #84]	@ (800512c <TIM_OC2_SetConfig+0x7c>)
 80050d6:	42a8      	cmp	r0, r5
 80050d8:	d00f      	beq.n	80050fa <TIM_OC2_SetConfig+0x4a>
 80050da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050de:	42a8      	cmp	r0, r5
 80050e0:	d00b      	beq.n	80050fa <TIM_OC2_SetConfig+0x4a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	4e13      	ldr	r6, [pc, #76]	@ (8005130 <TIM_OC2_SetConfig+0x80>)
 80050e4:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 80050e8:	42a8      	cmp	r0, r5
 80050ea:	bf18      	it	ne
 80050ec:	42b0      	cmpne	r0, r6
 80050ee:	d00b      	beq.n	8005108 <TIM_OC2_SetConfig+0x58>
 80050f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050f4:	42a8      	cmp	r0, r5
 80050f6:	d10f      	bne.n	8005118 <TIM_OC2_SetConfig+0x68>
 80050f8:	e006      	b.n	8005108 <TIM_OC2_SetConfig+0x58>
    tmpccer &= ~TIM_CCER_CC2NP;
 80050fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050fe:	68cd      	ldr	r5, [r1, #12]
 8005100:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800510c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005110:	ea46 0c05 	orr.w	ip, r6, r5
 8005114:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005118:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800511a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800511c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800511e:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005120:	6203      	str	r3, [r0, #32]
}
 8005122:	bc70      	pop	{r4, r5, r6}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	feff8cff 	.word	0xfeff8cff
 800512c:	40010000 	.word	0x40010000
 8005130:	40014000 	.word	0x40014000

08005134 <HAL_TIM_OC_ConfigChannel>:
{
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005136:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	f000 80ae 	beq.w	800529c <HAL_TIM_OC_ConfigChannel+0x168>
 8005140:	4604      	mov	r4, r0
  switch (Channel)
 8005142:	2a14      	cmp	r2, #20
 8005144:	d80c      	bhi.n	8005160 <HAL_TIM_OC_ConfigChannel+0x2c>
 8005146:	e8df f002 	tbb	[pc, r2]
 800514a:	0b3f      	.short	0x0b3f
 800514c:	0b440b0b 	.word	0x0b440b0b
 8005150:	0b480b0b 	.word	0x0b480b0b
 8005154:	0b4c0b0b 	.word	0x0b4c0b0b
 8005158:	0b7b0b0b 	.word	0x0b7b0b0b
 800515c:	0b0b      	.short	0x0b0b
 800515e:	10          	.byte	0x10
 800515f:	00          	.byte	0x00
 8005160:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005162:	2300      	movs	r3, #0
 8005164:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800516a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516c:	6a1a      	ldr	r2, [r3, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800516e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005170:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005174:	f420 1080 	bic.w	r0, r0, #1048576	@ 0x100000
 8005178:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800517a:	4849      	ldr	r0, [pc, #292]	@ (80052a0 <HAL_TIM_OC_ConfigChannel+0x16c>)
  tmpcr2 =  TIMx->CR2;
 800517c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800517e:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005180:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005182:	680e      	ldr	r6, [r1, #0]
 8005184:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005188:	688e      	ldr	r6, [r1, #8]
 800518a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	4e45      	ldr	r6, [pc, #276]	@ (80052a4 <HAL_TIM_OC_ConfigChannel+0x170>)
 8005190:	42b3      	cmp	r3, r6
 8005192:	d00e      	beq.n	80051b2 <HAL_TIM_OC_ConfigChannel+0x7e>
 8005194:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005198:	42b3      	cmp	r3, r6
 800519a:	d00a      	beq.n	80051b2 <HAL_TIM_OC_ConfigChannel+0x7e>
 800519c:	4f42      	ldr	r7, [pc, #264]	@ (80052a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 800519e:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 80051a2:	42b3      	cmp	r3, r6
 80051a4:	bf18      	it	ne
 80051a6:	42bb      	cmpne	r3, r7
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_OC_ConfigChannel+0x7e>
 80051aa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80051ae:	42b3      	cmp	r3, r6
 80051b0:	d104      	bne.n	80051bc <HAL_TIM_OC_ConfigChannel+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051b2:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051b6:	694e      	ldr	r6, [r1, #20]
 80051b8:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051bc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051be:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80051c0:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80051c2:	65d9      	str	r1, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	e002      	b.n	80051ce <HAL_TIM_OC_ConfigChannel+0x9a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c8:	6800      	ldr	r0, [r0, #0]
 80051ca:	f7ff fcff 	bl	8004bcc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2000      	movs	r0, #0
 80051d0:	e7c7      	b.n	8005162 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	f7ff ff6c 	bl	80050b0 <TIM_OC2_SetConfig>
      break;
 80051d8:	e7f9      	b.n	80051ce <HAL_TIM_OC_ConfigChannel+0x9a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	f7ff fd34 	bl	8004c48 <TIM_OC3_SetConfig>
      break;
 80051e0:	e7f5      	b.n	80051ce <HAL_TIM_OC_ConfigChannel+0x9a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051e2:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 80051e4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e6:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ec:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80051f0:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f2:	482e      	ldr	r0, [pc, #184]	@ (80052ac <HAL_TIM_OC_ConfigChannel+0x178>)
  tmpcr2 =  TIMx->CR2;
 80051f4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051f6:	69de      	ldr	r6, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f8:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fa:	680e      	ldr	r6, [r1, #0]
 80051fc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005200:	688e      	ldr	r6, [r1, #8]
 8005202:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	4e27      	ldr	r6, [pc, #156]	@ (80052a4 <HAL_TIM_OC_ConfigChannel+0x170>)
 8005208:	42b3      	cmp	r3, r6
 800520a:	d00e      	beq.n	800522a <HAL_TIM_OC_ConfigChannel+0xf6>
 800520c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005210:	42b3      	cmp	r3, r6
 8005212:	d00a      	beq.n	800522a <HAL_TIM_OC_ConfigChannel+0xf6>
 8005214:	4f24      	ldr	r7, [pc, #144]	@ (80052a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 8005216:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800521a:	42b3      	cmp	r3, r6
 800521c:	bf18      	it	ne
 800521e:	42bb      	cmpne	r3, r7
 8005220:	d003      	beq.n	800522a <HAL_TIM_OC_ConfigChannel+0xf6>
 8005222:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005226:	42b3      	cmp	r3, r6
 8005228:	d104      	bne.n	8005234 <HAL_TIM_OC_ConfigChannel+0x100>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800522a:	f425 4580 	bic.w	r5, r5, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522e:	694e      	ldr	r6, [r1, #20]
 8005230:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8005234:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005236:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005238:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800523a:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	e7c6      	b.n	80051ce <HAL_TIM_OC_ConfigChannel+0x9a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005240:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 8005242:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005244:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~TIM_CCER_CC5P;
 8005246:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800524a:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800524e:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005250:	4817      	ldr	r0, [pc, #92]	@ (80052b0 <HAL_TIM_OC_ConfigChannel+0x17c>)
  tmpcr2 =  TIMx->CR2;
 8005252:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005254:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005256:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8005258:	680e      	ldr	r6, [r1, #0]
 800525a:	4330      	orrs	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800525c:	688e      	ldr	r6, [r1, #8]
 800525e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	4e10      	ldr	r6, [pc, #64]	@ (80052a4 <HAL_TIM_OC_ConfigChannel+0x170>)
 8005264:	42b3      	cmp	r3, r6
 8005266:	d00e      	beq.n	8005286 <HAL_TIM_OC_ConfigChannel+0x152>
 8005268:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800526c:	42b3      	cmp	r3, r6
 800526e:	d00a      	beq.n	8005286 <HAL_TIM_OC_ConfigChannel+0x152>
 8005270:	4f0d      	ldr	r7, [pc, #52]	@ (80052a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 8005272:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8005276:	42b3      	cmp	r3, r6
 8005278:	bf18      	it	ne
 800527a:	42bb      	cmpne	r3, r7
 800527c:	d003      	beq.n	8005286 <HAL_TIM_OC_ConfigChannel+0x152>
 800527e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005282:	42b3      	cmp	r3, r6
 8005284:	d104      	bne.n	8005290 <HAL_TIM_OC_ConfigChannel+0x15c>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005286:	f425 3580 	bic.w	r5, r5, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800528a:	694e      	ldr	r6, [r1, #20]
 800528c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8005290:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005292:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005294:	6558      	str	r0, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005296:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	e798      	b.n	80051ce <HAL_TIM_OC_ConfigChannel+0x9a>
  __HAL_LOCK(htim);
 800529c:	2002      	movs	r0, #2
}
 800529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a0:	feff8fff 	.word	0xfeff8fff
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40014000 	.word	0x40014000
 80052ac:	feff8cff 	.word	0xfeff8cff
 80052b0:	fffeff8f 	.word	0xfffeff8f

080052b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80052b6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f000 8107 	beq.w	80054ce <HAL_TIM_PWM_ConfigChannel+0x21a>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80052ca:	2a14      	cmp	r2, #20
 80052cc:	d816      	bhi.n	80052fc <HAL_TIM_PWM_ConfigChannel+0x48>
 80052ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80052d2:	0056      	.short	0x0056
 80052d4:	00150015 	.word	0x00150015
 80052d8:	00670015 	.word	0x00670015
 80052dc:	00150015 	.word	0x00150015
 80052e0:	00780015 	.word	0x00780015
 80052e4:	00150015 	.word	0x00150015
 80052e8:	00880015 	.word	0x00880015
 80052ec:	00150015 	.word	0x00150015
 80052f0:	00c40015 	.word	0x00c40015
 80052f4:	00150015 	.word	0x00150015
 80052f8:	001a0015 	.word	0x001a0015
 80052fc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80052fe:	2300      	movs	r3, #0
 8005300:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005306:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 8005308:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800530a:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800530c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005310:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8005314:	6219      	str	r1, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005316:	496f      	ldr	r1, [pc, #444]	@ (80054d4 <HAL_TIM_PWM_ConfigChannel+0x220>)
  tmpcr2 =  TIMx->CR2;
 8005318:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800531a:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800531c:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800531e:	682e      	ldr	r6, [r5, #0]
 8005320:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005324:	68ae      	ldr	r6, [r5, #8]
 8005326:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	4e6b      	ldr	r6, [pc, #428]	@ (80054d8 <HAL_TIM_PWM_ConfigChannel+0x224>)
 800532c:	42b3      	cmp	r3, r6
 800532e:	d00e      	beq.n	800534e <HAL_TIM_PWM_ConfigChannel+0x9a>
 8005330:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005334:	42b3      	cmp	r3, r6
 8005336:	d00a      	beq.n	800534e <HAL_TIM_PWM_ConfigChannel+0x9a>
 8005338:	4f68      	ldr	r7, [pc, #416]	@ (80054dc <HAL_TIM_PWM_ConfigChannel+0x228>)
 800533a:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800533e:	42b3      	cmp	r3, r6
 8005340:	bf18      	it	ne
 8005342:	42bb      	cmpne	r3, r7
 8005344:	d003      	beq.n	800534e <HAL_TIM_PWM_ConfigChannel+0x9a>
 8005346:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800534a:	42b3      	cmp	r3, r6
 800534c:	d104      	bne.n	8005358 <HAL_TIM_PWM_ConfigChannel+0xa4>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800534e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005352:	696e      	ldr	r6, [r5, #20]
 8005354:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005358:	6058      	str	r0, [r3, #4]
  TIMx->CCR6 = OC_Config->Pulse;
 800535a:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 800535c:	6559      	str	r1, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800535e:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8005360:	65d8      	str	r0, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 8005362:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800536c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800536e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005376:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800537a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800537c:	e00e      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800537e:	6800      	ldr	r0, [r0, #0]
 8005380:	f7ff fc24 	bl	8004bcc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005384:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005386:	6983      	ldr	r3, [r0, #24]
 8005388:	f043 0308 	orr.w	r3, r3, #8
 800538c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538e:	6983      	ldr	r3, [r0, #24]
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2000      	movs	r0, #0
 800539e:	e7ae      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x4a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a0:	6800      	ldr	r0, [r0, #0]
 80053a2:	f7ff fe85 	bl	80050b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a6:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a8:	6983      	ldr	r3, [r0, #24]
 80053aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053ae:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b0:	6983      	ldr	r3, [r0, #24]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053b6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053b8:	6983      	ldr	r3, [r0, #24]
 80053ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053be:	6183      	str	r3, [r0, #24]
      break;
 80053c0:	e7ec      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c2:	6800      	ldr	r0, [r0, #0]
 80053c4:	f7ff fc40 	bl	8004c48 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053c8:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ca:	69c3      	ldr	r3, [r0, #28]
 80053cc:	f043 0308 	orr.w	r3, r3, #8
 80053d0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d2:	69c3      	ldr	r3, [r0, #28]
 80053d4:	f023 0304 	bic.w	r3, r3, #4
 80053d8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053da:	69c3      	ldr	r3, [r0, #28]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61c3      	str	r3, [r0, #28]
      break;
 80053e0:	e7dc      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e2:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 80053e4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e6:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~TIM_CCER_CC4P;
 80053e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ec:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80053f0:	6219      	str	r1, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f2:	493b      	ldr	r1, [pc, #236]	@ (80054e0 <HAL_TIM_PWM_ConfigChannel+0x22c>)
  tmpcr2 =  TIMx->CR2;
 80053f4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80053f6:	69de      	ldr	r6, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f8:	4031      	ands	r1, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053fa:	682e      	ldr	r6, [r5, #0]
 80053fc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005400:	68ae      	ldr	r6, [r5, #8]
 8005402:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	4e34      	ldr	r6, [pc, #208]	@ (80054d8 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8005408:	42b3      	cmp	r3, r6
 800540a:	d00e      	beq.n	800542a <HAL_TIM_PWM_ConfigChannel+0x176>
 800540c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005410:	42b3      	cmp	r3, r6
 8005412:	d00a      	beq.n	800542a <HAL_TIM_PWM_ConfigChannel+0x176>
 8005414:	4f31      	ldr	r7, [pc, #196]	@ (80054dc <HAL_TIM_PWM_ConfigChannel+0x228>)
 8005416:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800541a:	42b3      	cmp	r3, r6
 800541c:	bf18      	it	ne
 800541e:	42bb      	cmpne	r3, r7
 8005420:	d003      	beq.n	800542a <HAL_TIM_PWM_ConfigChannel+0x176>
 8005422:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005426:	42b3      	cmp	r3, r6
 8005428:	d104      	bne.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x180>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800542a:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800542e:	696e      	ldr	r6, [r5, #20]
 8005430:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8005434:	6058      	str	r0, [r3, #4]
  TIMx->CCR4 = OC_Config->Pulse;
 8005436:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005438:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800543a:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 800543c:	6418      	str	r0, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800543e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800544e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005450:	69da      	ldr	r2, [r3, #28]
 8005452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005456:	61da      	str	r2, [r3, #28]
      break;
 8005458:	e7a0      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800545a:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 800545c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545e:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~TIM_CCER_CC5P;
 8005460:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005464:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005468:	6219      	str	r1, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800546a:	491e      	ldr	r1, [pc, #120]	@ (80054e4 <HAL_TIM_PWM_ConfigChannel+0x230>)
  tmpcr2 =  TIMx->CR2;
 800546c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800546e:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005470:	4031      	ands	r1, r6
  tmpccmrx |= OC_Config->OCMode;
 8005472:	682e      	ldr	r6, [r5, #0]
 8005474:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005476:	68ae      	ldr	r6, [r5, #8]
 8005478:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547c:	4e16      	ldr	r6, [pc, #88]	@ (80054d8 <HAL_TIM_PWM_ConfigChannel+0x224>)
 800547e:	42b3      	cmp	r3, r6
 8005480:	d00e      	beq.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8005482:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005486:	42b3      	cmp	r3, r6
 8005488:	d00a      	beq.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800548a:	4f14      	ldr	r7, [pc, #80]	@ (80054dc <HAL_TIM_PWM_ConfigChannel+0x228>)
 800548c:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8005490:	42b3      	cmp	r3, r6
 8005492:	bf18      	it	ne
 8005494:	42bb      	cmpne	r3, r7
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 8005498:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800549c:	42b3      	cmp	r3, r6
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_ConfigChannel+0x1f6>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054a0:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054a4:	696e      	ldr	r6, [r5, #20]
 80054a6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80054aa:	6058      	str	r0, [r3, #4]
  TIMx->CCR5 = OC_Config->Pulse;
 80054ac:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 80054ae:	6559      	str	r1, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054b0:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 80054b2:	6598      	str	r0, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 80054b4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054c0:	f022 0204 	bic.w	r2, r2, #4
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054c8:	430a      	orrs	r2, r1
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054cc:	e766      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0xe8>
  __HAL_LOCK(htim);
 80054ce:	2002      	movs	r0, #2
}
 80054d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d2:	bf00      	nop
 80054d4:	feff8fff 	.word	0xfeff8fff
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40014000 	.word	0x40014000
 80054e0:	feff8cff 	.word	0xfeff8cff
 80054e4:	fffeff8f 	.word	0xfffeff8f

080054e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d04b      	beq.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f0:	6803      	ldr	r3, [r0, #0]
 80054f2:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	2002      	movs	r0, #2
{
 80054f6:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054f8:	4d24      	ldr	r5, [pc, #144]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80054fa:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054fe:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005500:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005502:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005504:	d029      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005506:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800550a:	42ab      	cmp	r3, r5
 800550c:	d025      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550e:	4d20      	ldr	r5, [pc, #128]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005510:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005514:	42ab      	cmp	r3, r5
 8005516:	bf18      	it	ne
 8005518:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 800551c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005520:	bf0c      	ite	eq
 8005522:	f04f 0c01 	moveq.w	ip, #1
 8005526:	f04f 0c00 	movne.w	ip, #0
 800552a:	42ab      	cmp	r3, r5
 800552c:	bf08      	it	eq
 800552e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005532:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005536:	42ab      	cmp	r3, r5
 8005538:	bf08      	it	eq
 800553a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553e:	680d      	ldr	r5, [r1, #0]
 8005540:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005542:	4d14      	ldr	r5, [pc, #80]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8005544:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005546:	42ab      	cmp	r3, r5
 8005548:	bf14      	ite	ne
 800554a:	4660      	movne	r0, ip
 800554c:	f04c 0001 	orreq.w	r0, ip, #1
 8005550:	b960      	cbnz	r0, 800556c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005552:	4811      	ldr	r0, [pc, #68]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005554:	4283      	cmp	r3, r0
 8005556:	d009      	beq.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005558:	e00d      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800555a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800555c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005560:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005562:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800556a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556e:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005572:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005574:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005576:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005578:	2101      	movs	r1, #1

  return HAL_OK;
 800557a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800557c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005580:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005584:	bc30      	pop	{r4, r5}
 8005586:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005588:	2002      	movs	r0, #2
}
 800558a:	4770      	bx	lr
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40001800 	.word	0x40001800
 8005598:	40014000 	.word	0x40014000

0800559c <HAL_TIMEx_ConfigBreakDeadTime>:
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800559c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d03d      	beq.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a4:	4602      	mov	r2, r0
 80055a6:	6848      	ldr	r0, [r1, #4]
{
 80055a8:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055aa:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055b4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055bc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055c2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055c4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055cc:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055d4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055da:	4303      	orrs	r3, r0
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055dc:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055de:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80055e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055e6:	4c0f      	ldr	r4, [pc, #60]	@ (8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80055e8:	42a0      	cmp	r0, r4
 80055ea:	d00b      	beq.n	8005604 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80055ec:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d007      	beq.n	8005604 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80055f4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80055f6:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80055f8:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80055fc:	4608      	mov	r0, r1
}
 80055fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005602:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005604:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005606:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800560a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800560e:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005616:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005618:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800561c:	430b      	orrs	r3, r1
 800561e:	e7e9      	b.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005620:	2002      	movs	r0, #2
}
 8005622:	4770      	bx	lr
 8005624:	40010000 	.word	0x40010000

08005628 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005628:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800562c:	2b20      	cmp	r3, #32
 800562e:	d15d      	bne.n	80056ec <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	2900      	cmp	r1, #0
 8005632:	d060      	beq.n	80056f6 <HAL_UART_Receive_IT+0xce>
{
 8005634:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8005636:	fab2 f482 	clz	r4, r2
 800563a:	0964      	lsrs	r4, r4, #5
 800563c:	2a00      	cmp	r2, #0
 800563e:	d057      	beq.n	80056f0 <HAL_UART_Receive_IT+0xc8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005640:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	66c4      	str	r4, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005644:	4c57      	ldr	r4, [pc, #348]	@ (80057a4 <HAL_UART_Receive_IT+0x17c>)
 8005646:	42a3      	cmp	r3, r4
 8005648:	d002      	beq.n	8005650 <HAL_UART_Receive_IT+0x28>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800564a:	685c      	ldr	r4, [r3, #4]
 800564c:	0224      	lsls	r4, r4, #8
 800564e:	d43c      	bmi.n	80056ca <HAL_UART_Receive_IT+0xa2>
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
 8005650:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8005652:	2400      	movs	r4, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005654:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8005656:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 800565a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 800565e:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005662:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8005664:	d066      	beq.n	8005734 <HAL_UART_Receive_IT+0x10c>
 8005666:	2900      	cmp	r1, #0
 8005668:	d147      	bne.n	80056fa <HAL_UART_Receive_IT+0xd2>
 800566a:	6901      	ldr	r1, [r0, #16]
 800566c:	2900      	cmp	r1, #0
 800566e:	bf0c      	ite	eq
 8005670:	24ff      	moveq	r4, #255	@ 0xff
 8005672:	247f      	movne	r4, #127	@ 0x7f

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8005676:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567a:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800567e:	2122      	movs	r1, #34	@ 0x22
 8005680:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f103 0108 	add.w	r1, r3, #8
 8005688:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	f041 0101 	orr.w	r1, r1, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	f103 0508 	add.w	r5, r3, #8
 8005694:	e845 1400 	strex	r4, r1, [r5]
 8005698:	2c00      	cmp	r4, #0
 800569a:	d1f3      	bne.n	8005684 <HAL_UART_Receive_IT+0x5c>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800569c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569e:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056a0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a4:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056a6:	d04c      	beq.n	8005742 <HAL_UART_Receive_IT+0x11a>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80056ac:	d02e      	beq.n	800570c <HAL_UART_Receive_IT+0xe4>
 80056ae:	4a3e      	ldr	r2, [pc, #248]	@ (80057a8 <HAL_UART_Receive_IT+0x180>)
 80056b0:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056b2:	b374      	cbz	r4, 8005712 <HAL_UART_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80056b8:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	e843 2100 	strex	r1, r2, [r3]
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d1f7      	bne.n	80056b4 <HAL_UART_Receive_IT+0x8c>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80056c4:	2000      	movs	r0, #0
}
 80056c6:	bc30      	pop	{r4, r5}
 80056c8:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056ce:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	e843 4500 	strex	r5, r4, [r3]
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d0ba      	beq.n	8005650 <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	e853 4f00 	ldrex	r4, [r3]
 80056de:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	e843 4500 	strex	r5, r4, [r3]
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	d1ef      	bne.n	80056ca <HAL_UART_Receive_IT+0xa2>
 80056ea:	e7b1      	b.n	8005650 <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
 80056ec:	2002      	movs	r0, #2
 80056ee:	4770      	bx	lr
      return HAL_ERROR;
 80056f0:	2001      	movs	r0, #1
}
 80056f2:	bc30      	pop	{r4, r5}
 80056f4:	4770      	bx	lr
      return HAL_ERROR;
 80056f6:	2001      	movs	r0, #1
}
 80056f8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80056fa:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80056fe:	d1b9      	bne.n	8005674 <HAL_UART_Receive_IT+0x4c>
 8005700:	6901      	ldr	r1, [r0, #16]
 8005702:	2900      	cmp	r1, #0
 8005704:	bf0c      	ite	eq
 8005706:	247f      	moveq	r4, #127	@ 0x7f
 8005708:	243f      	movne	r4, #63	@ 0x3f
 800570a:	e7b3      	b.n	8005674 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	bb84      	cbnz	r4, 8005770 <HAL_UART_Receive_IT+0x148>
 800570e:	4a27      	ldr	r2, [pc, #156]	@ (80057ac <HAL_UART_Receive_IT+0x184>)
 8005710:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005716:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	e843 2100 	strex	r1, r2, [r3]
 800571e:	2900      	cmp	r1, #0
 8005720:	d0d0      	beq.n	80056c4 <HAL_UART_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	e853 2f00 	ldrex	r2, [r3]
 8005726:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	e843 2100 	strex	r1, r2, [r3]
 800572e:	2900      	cmp	r1, #0
 8005730:	d1ef      	bne.n	8005712 <HAL_UART_Receive_IT+0xea>
 8005732:	e7c7      	b.n	80056c4 <HAL_UART_Receive_IT+0x9c>
  UART_MASK_COMPUTATION(huart);
 8005734:	6901      	ldr	r1, [r0, #16]
 8005736:	f240 14ff 	movw	r4, #511	@ 0x1ff
 800573a:	2900      	cmp	r1, #0
 800573c:	bf18      	it	ne
 800573e:	24ff      	movne	r4, #255	@ 0xff
 8005740:	e798      	b.n	8005674 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005742:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 8005746:	4291      	cmp	r1, r2
 8005748:	d8ae      	bhi.n	80056a8 <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800574a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800574e:	d012      	beq.n	8005776 <HAL_UART_Receive_IT+0x14e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005750:	4a17      	ldr	r2, [pc, #92]	@ (80057b0 <HAL_UART_Receive_IT+0x188>)
 8005752:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005754:	b994      	cbnz	r4, 800577c <HAL_UART_Receive_IT+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800575e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	f103 0008 	add.w	r0, r3, #8
 8005766:	e840 2100 	strex	r1, r2, [r0]
 800576a:	2900      	cmp	r1, #0
 800576c:	d1f3      	bne.n	8005756 <HAL_UART_Receive_IT+0x12e>
 800576e:	e7a9      	b.n	80056c4 <HAL_UART_Receive_IT+0x9c>
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <HAL_UART_Receive_IT+0x180>)
 8005772:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005774:	e79e      	b.n	80056b4 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	b194      	cbz	r4, 800579e <HAL_UART_Receive_IT+0x176>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005778:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <HAL_UART_Receive_IT+0x188>)
 800577a:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	e843 2100 	strex	r1, r2, [r3]
 8005788:	2900      	cmp	r1, #0
 800578a:	d0e4      	beq.n	8005756 <HAL_UART_Receive_IT+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	e853 2f00 	ldrex	r2, [r3]
 8005790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	e843 2100 	strex	r1, r2, [r3]
 8005798:	2900      	cmp	r1, #0
 800579a:	d1ef      	bne.n	800577c <HAL_UART_Receive_IT+0x154>
 800579c:	e7db      	b.n	8005756 <HAL_UART_Receive_IT+0x12e>
 800579e:	4a05      	ldr	r2, [pc, #20]	@ (80057b4 <HAL_UART_Receive_IT+0x18c>)
 80057a0:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057a2:	e7d8      	b.n	8005756 <HAL_UART_Receive_IT+0x12e>
 80057a4:	58000c00 	.word	0x58000c00
 80057a8:	08005c5d 	.word	0x08005c5d
 80057ac:	08005c15 	.word	0x08005c15
 80057b0:	08005ca1 	.word	0x08005ca1
 80057b4:	08005ec9 	.word	0x08005ec9

080057b8 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057be:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c6:	f7fa ffcf 	bl	8000768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bd08      	pop	{r3, pc}

080057cc <HAL_UARTEx_RxEventCallback>:
}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057d0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057d2:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057d6:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 80057d8:	ea12 0f0c 	tst.w	r2, ip
{
 80057dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057de:	681d      	ldr	r5, [r3, #0]
{
 80057e0:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057e2:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 80057e4:	d145      	bne.n	8005872 <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e6:	0696      	lsls	r6, r2, #26
 80057e8:	d507      	bpl.n	80057fa <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ea:	f005 0c20 	and.w	ip, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057ee:	f001 5680 	and.w	r6, r1, #268435456	@ 0x10000000
 80057f2:	ea5c 0c06 	orrs.w	ip, ip, r6
 80057f6:	f040 812a 	bne.w	8005a4e <HAL_UART_IRQHandler+0x27e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fa:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80057fc:	2801      	cmp	r0, #1
 80057fe:	f000 80cd 	beq.w	800599c <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005802:	02d0      	lsls	r0, r2, #11
 8005804:	d41d      	bmi.n	8005842 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005806:	0610      	lsls	r0, r2, #24
 8005808:	d506      	bpl.n	8005818 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800580a:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800580e:	f005 0080 	and.w	r0, r5, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005812:	4308      	orrs	r0, r1
 8005814:	f040 8122 	bne.w	8005a5c <HAL_UART_IRQHandler+0x28c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005818:	0651      	lsls	r1, r2, #25
 800581a:	d51c      	bpl.n	8005856 <HAL_UART_IRQHandler+0x86>
 800581c:	066e      	lsls	r6, r5, #25
 800581e:	d51a      	bpl.n	8005856 <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	e843 2100 	strex	r1, r2, [r3]
 800582c:	2900      	cmp	r1, #0
 800582e:	d1f7      	bne.n	8005820 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005830:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005832:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005834:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8005836:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 800583a:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 800583c:	f7ff ffbc 	bl	80057b8 <HAL_UART_TxCpltCallback>
}
 8005840:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005842:	024e      	lsls	r6, r1, #9
 8005844:	d5df      	bpl.n	8005806 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005846:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800584a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005852:	f000 bfbf 	b.w	80067d4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005856:	0210      	lsls	r0, r2, #8
 8005858:	d502      	bpl.n	8005860 <HAL_UART_IRQHandler+0x90>
 800585a:	0069      	lsls	r1, r5, #1
 800585c:	f100 813d 	bmi.w	8005ada <HAL_UART_IRQHandler+0x30a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005860:	01d3      	lsls	r3, r2, #7
 8005862:	d5ed      	bpl.n	8005840 <HAL_UART_IRQHandler+0x70>
 8005864:	2d00      	cmp	r5, #0
 8005866:	daeb      	bge.n	8005840 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005868:	4620      	mov	r0, r4
}
 800586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800586e:	f000 bfb3 	b.w	80067d8 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005872:	48b9      	ldr	r0, [pc, #740]	@ (8005b58 <HAL_UART_IRQHandler+0x388>)
 8005874:	4008      	ands	r0, r1
 8005876:	f040 8125 	bne.w	8005ac4 <HAL_UART_IRQHandler+0x2f4>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800587a:	4eb8      	ldr	r6, [pc, #736]	@ (8005b5c <HAL_UART_IRQHandler+0x38c>)
 800587c:	4235      	tst	r5, r6
 800587e:	d0bc      	beq.n	80057fa <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005880:	07d6      	lsls	r6, r2, #31
 8005882:	d51a      	bpl.n	80058ba <HAL_UART_IRQHandler+0xea>
 8005884:	05ee      	lsls	r6, r5, #23
 8005886:	f140 8103 	bpl.w	8005a90 <HAL_UART_IRQHandler+0x2c0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800588a:	2601      	movs	r6, #1
 800588c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588e:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8005892:	f046 0601 	orr.w	r6, r6, #1
 8005896:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589a:	0796      	lsls	r6, r2, #30
 800589c:	f140 80fb 	bpl.w	8005a96 <HAL_UART_IRQHandler+0x2c6>
 80058a0:	07ce      	lsls	r6, r1, #31
 80058a2:	d50a      	bpl.n	80058ba <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058a4:	2602      	movs	r6, #2
 80058a6:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a8:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80058ac:	f046 0604 	orr.w	r6, r6, #4
 80058b0:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	0756      	lsls	r6, r2, #29
 80058b6:	f100 80f4 	bmi.w	8005aa2 <HAL_UART_IRQHandler+0x2d2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058ba:	0716      	lsls	r6, r2, #28
 80058bc:	d50b      	bpl.n	80058d6 <HAL_UART_IRQHandler+0x106>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058be:	f005 0620 	and.w	r6, r5, #32
 80058c2:	4306      	orrs	r6, r0
 80058c4:	d007      	beq.n	80058d6 <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c6:	2008      	movs	r0, #8
 80058c8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ca:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80058ce:	f040 0008 	orr.w	r0, r0, #8
 80058d2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058d6:	0510      	lsls	r0, r2, #20
 80058d8:	d50a      	bpl.n	80058f0 <HAL_UART_IRQHandler+0x120>
 80058da:	016e      	lsls	r6, r5, #5
 80058dc:	d508      	bpl.n	80058f0 <HAL_UART_IRQHandler+0x120>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80058e2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058e4:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80058e8:	f040 0020 	orr.w	r0, r0, #32
 80058ec:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d0a3      	beq.n	8005840 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058f8:	0690      	lsls	r0, r2, #26
 80058fa:	d506      	bpl.n	800590a <HAL_UART_IRQHandler+0x13a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058fc:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005900:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8005904:	430d      	orrs	r5, r1
 8005906:	f040 80d5 	bne.w	8005ab4 <HAL_UART_IRQHandler+0x2e4>
      errorcode = huart->ErrorCode;
 800590a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800590e:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005910:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005914:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005918:	ea52 0501 	orrs.w	r5, r2, r1
 800591c:	f000 80e2 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x314>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005924:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	e843 2100 	strex	r1, r2, [r3]
 800592c:	2900      	cmp	r1, #0
 800592e:	d1f7      	bne.n	8005920 <HAL_UART_IRQHandler+0x150>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005930:	488b      	ldr	r0, [pc, #556]	@ (8005b60 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	f103 0208 	add.w	r2, r3, #8
 8005936:	e852 2f00 	ldrex	r2, [r2]
 800593a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	f103 0508 	add.w	r5, r3, #8
 8005940:	e845 2100 	strex	r1, r2, [r5]
 8005944:	2900      	cmp	r1, #0
 8005946:	d1f4      	bne.n	8005932 <HAL_UART_IRQHandler+0x162>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005948:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800594a:	2a01      	cmp	r2, #1
 800594c:	f000 808e 	beq.w	8005a6c <HAL_UART_IRQHandler+0x29c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005952:	2120      	movs	r1, #32
 8005954:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800595c:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595e:	064a      	lsls	r2, r1, #25
 8005960:	f140 80b7 	bpl.w	8005ad2 <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	f103 0208 	add.w	r2, r3, #8
 8005968:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	f103 0008 	add.w	r0, r3, #8
 8005974:	e840 2100 	strex	r1, r2, [r0]
 8005978:	2900      	cmp	r1, #0
 800597a:	d1f3      	bne.n	8005964 <HAL_UART_IRQHandler+0x194>
          if (huart->hdmarx != NULL)
 800597c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005980:	2800      	cmp	r0, #0
 8005982:	f000 80a6 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005986:	4b77      	ldr	r3, [pc, #476]	@ (8005b64 <HAL_UART_IRQHandler+0x394>)
 8005988:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800598a:	f7fc fb15 	bl	8001fb8 <HAL_DMA_Abort_IT>
 800598e:	2800      	cmp	r0, #0
 8005990:	f43f af56 	beq.w	8005840 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005994:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005998:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800599a:	e05c      	b.n	8005a56 <HAL_UART_IRQHandler+0x286>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800599c:	06d6      	lsls	r6, r2, #27
 800599e:	f57f af30 	bpl.w	8005802 <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059a2:	06e8      	lsls	r0, r5, #27
 80059a4:	f57f af2d 	bpl.w	8005802 <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059a8:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059aa:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ae:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	0656      	lsls	r6, r2, #25
 80059b4:	f140 809c 	bpl.w	8005af0 <HAL_UART_IRQHandler+0x320>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059b8:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80059bc:	6801      	ldr	r1, [r0, #0]
 80059be:	6849      	ldr	r1, [r1, #4]
 80059c0:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80059c2:	2900      	cmp	r1, #0
 80059c4:	f000 80d0 	beq.w	8005b68 <HAL_UART_IRQHandler+0x398>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059c8:	42a9      	cmp	r1, r5
 80059ca:	f080 80cd 	bcs.w	8005b68 <HAL_UART_IRQHandler+0x398>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ce:	69c2      	ldr	r2, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 80059d0:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059d4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80059d8:	d02f      	beq.n	8005a3a <HAL_UART_IRQHandler+0x26a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	e843 2100 	strex	r1, r2, [r3]
 80059e6:	2900      	cmp	r1, #0
 80059e8:	d1f7      	bne.n	80059da <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	f103 0208 	add.w	r2, r3, #8
 80059ee:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	f103 0508 	add.w	r5, r3, #8
 80059fa:	e845 2100 	strex	r1, r2, [r5]
 80059fe:	2900      	cmp	r1, #0
 8005a00:	d1f3      	bne.n	80059ea <HAL_UART_IRQHandler+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	f103 0208 	add.w	r2, r3, #8
 8005a06:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	f103 0508 	add.w	r5, r3, #8
 8005a12:	e845 2100 	strex	r1, r2, [r5]
 8005a16:	2900      	cmp	r1, #0
 8005a18:	d1f3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x232>
          huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a26:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	e843 2100 	strex	r1, r2, [r3]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d1f7      	bne.n	8005a22 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a32:	f7fc f90b 	bl	8001c4c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a36:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a3a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a3c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a3e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a40:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8005a44:	1a69      	subs	r1, r5, r1
 8005a46:	b289      	uxth	r1, r1
 8005a48:	f7ff fec0 	bl	80057cc <HAL_UARTEx_RxEventCallback>
}
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005a4e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f43f aef5 	beq.w	8005840 <HAL_UART_IRQHandler+0x70>
}
 8005a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a5a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 8005a5c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f43f aeee 	beq.w	8005840 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8005a64:	4620      	mov	r0, r4
}
 8005a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005a6a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	e843 2100 	strex	r1, r2, [r3]
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	f43f af69 	beq.w	8005950 <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	e853 2f00 	ldrex	r2, [r3]
 8005a82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	e843 2100 	strex	r1, r2, [r3]
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d1ee      	bne.n	8005a6c <HAL_UART_IRQHandler+0x29c>
 8005a8e:	e75f      	b.n	8005950 <HAL_UART_IRQHandler+0x180>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a90:	0796      	lsls	r6, r2, #30
 8005a92:	f53f af12 	bmi.w	80058ba <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a96:	0756      	lsls	r6, r2, #29
 8005a98:	f57f af0f 	bpl.w	80058ba <HAL_UART_IRQHandler+0xea>
 8005a9c:	07ce      	lsls	r6, r1, #31
 8005a9e:	f57f af0c 	bpl.w	80058ba <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aa2:	2604      	movs	r6, #4
 8005aa4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa6:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8005aaa:	f046 0602 	orr.w	r6, r6, #2
 8005aae:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8005ab2:	e702      	b.n	80058ba <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 8005ab4:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	f43f af27 	beq.w	800590a <HAL_UART_IRQHandler+0x13a>
          huart->RxISR(huart);
 8005abc:	4620      	mov	r0, r4
 8005abe:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	e722      	b.n	800590a <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ac4:	07d6      	lsls	r6, r2, #31
 8005ac6:	f57f aee8 	bpl.w	800589a <HAL_UART_IRQHandler+0xca>
 8005aca:	05ee      	lsls	r6, r5, #23
 8005acc:	f57f aee5 	bpl.w	800589a <HAL_UART_IRQHandler+0xca>
 8005ad0:	e6db      	b.n	800588a <HAL_UART_IRQHandler+0xba>
            HAL_UART_ErrorCallback(huart);
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7fa fe48 	bl	8000768 <HAL_UART_ErrorCallback>
}
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ada:	4620      	mov	r0, r4
}
 8005adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ae0:	f000 be7c 	b.w	80067dc <HAL_UARTEx_TxFifoEmptyCallback>
        HAL_UART_ErrorCallback(huart);
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7fa fe3f 	bl	8000768 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8005af4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af8:	1a6d      	subs	r5, r5, r1
      if ((huart->RxXferCount > 0U)
 8005afa:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005afc:	b2a9      	uxth	r1, r5
          && (nb_rx_data > 0U))
 8005afe:	2900      	cmp	r1, #0
 8005b00:	f43f ae9e 	beq.w	8005840 <HAL_UART_IRQHandler+0x70>
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	f43f ae9b 	beq.w	8005840 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b0e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	e843 2000 	strex	r0, r2, [r3]
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d1f7      	bne.n	8005b0a <HAL_UART_IRQHandler+0x33a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b1a:	4d11      	ldr	r5, [pc, #68]	@ (8005b60 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f103 0208 	add.w	r2, r3, #8
 8005b20:	e852 2f00 	ldrex	r2, [r2]
 8005b24:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	f103 0608 	add.w	r6, r3, #8
 8005b2a:	e846 2000 	strex	r0, r2, [r6]
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d1f4      	bne.n	8005b1c <HAL_UART_IRQHandler+0x34c>
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8005b34:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b36:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	e843 2000 	strex	r0, r2, [r3]
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1f7      	bne.n	8005b3c <HAL_UART_IRQHandler+0x36c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b4c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b4e:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b50:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b52:	f7ff fe3b 	bl	80057cc <HAL_UARTEx_RxEventCallback>
}
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	10000001 	.word	0x10000001
 8005b5c:	04000120 	.word	0x04000120
 8005b60:	effffffe 	.word	0xeffffffe
 8005b64:	080057bd 	.word	0x080057bd
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b68:	42a9      	cmp	r1, r5
 8005b6a:	f47f ae69 	bne.w	8005840 <HAL_UART_IRQHandler+0x70>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005b6e:	69c3      	ldr	r3, [r0, #28]
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b74:	d0ea      	beq.n	8005b4c <HAL_UART_IRQHandler+0x37c>
}
 8005b76:	bd70      	pop	{r4, r5, r6, pc}

08005b78 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005b78:	6803      	ldr	r3, [r0, #0]
 8005b7a:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b80:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	e843 2100 	strex	r1, r2, [r3]
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d1f7      	bne.n	8005b7c <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	f103 0208 	add.w	r2, r3, #8
 8005b90:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b94:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	f103 0408 	add.w	r4, r3, #8
 8005b9c:	e844 2100 	strex	r1, r2, [r4]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d1f3      	bne.n	8005b8c <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c10 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8005ba8:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005baa:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8005bac:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bb2:	d002      	beq.n	8005bba <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	0211      	lsls	r1, r2, #8
 8005bb8:	d416      	bmi.n	8005be8 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bba:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	d124      	bne.n	8005c0a <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	e843 2100 	strex	r1, r2, [r3]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	d1f7      	bne.n	8005bc4 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	06d2      	lsls	r2, r2, #27
 8005bd8:	d501      	bpl.n	8005bde <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bda:	2210      	movs	r2, #16
 8005bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bde:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8005be2:	f7ff fdf3 	bl	80057cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005be6:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bec:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	e843 2100 	strex	r1, r2, [r3]
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d0e0      	beq.n	8005bba <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	e853 2f00 	ldrex	r2, [r3]
 8005bfc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	e843 2100 	strex	r1, r2, [r3]
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d1ef      	bne.n	8005be8 <UART_RxISR_16BIT.part.0+0x70>
 8005c08:	e7d7      	b.n	8005bba <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 8005c0a:	f7fa fd57 	bl	80006bc <HAL_UART_RxCpltCallback>
}
 8005c0e:	bd10      	pop	{r4, pc}
 8005c10:	58000c00 	.word	0x58000c00

08005c14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c14:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c16:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8005c1a:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1e:	2c22      	cmp	r4, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c20:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c22:	d006      	beq.n	8005c32 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c24:	6993      	ldr	r3, [r2, #24]
 8005c26:	f043 0308 	orr.w	r3, r3, #8
 8005c2a:	6193      	str	r3, [r2, #24]
  }
}
 8005c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c30:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c34:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8005c36:	4011      	ands	r1, r2
 8005c38:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8005c3c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 8005c40:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005c42:	3a01      	subs	r2, #1
 8005c44:	b292      	uxth	r2, r2
 8005c46:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005c4a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1eb      	bne.n	8005c2c <UART_RxISR_16BIT+0x18>
}
 8005c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c58:	f7ff bf8e 	b.w	8005b78 <UART_RxISR_16BIT.part.0>

08005c5c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c5c:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8005c60:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c64:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c66:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c68:	d004      	beq.n	8005c74 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c6a:	6993      	ldr	r3, [r2, #24]
 8005c6c:	f043 0308 	orr.w	r3, r3, #8
 8005c70:	6193      	str	r3, [r2, #24]
}
 8005c72:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c76:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005c78:	ea02 020c 	and.w	r2, r2, ip
 8005c7c:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8005c7e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 8005c82:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005c84:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8005c86:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8005c88:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005c8a:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8005c8c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8005c90:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1eb      	bne.n	8005c72 <UART_RxISR_8BIT+0x16>
 8005c9a:	f7ff bf6d 	b.w	8005b78 <UART_RxISR_16BIT.part.0>
 8005c9e:	bf00      	nop

08005ca0 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ca0:	6803      	ldr	r3, [r0, #0]
{
 8005ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ca6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ca8:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005caa:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cac:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8005cb0:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cb4:	2a22      	cmp	r2, #34	@ 0x22
 8005cb6:	d005      	beq.n	8005cc4 <UART_RxISR_8BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	f042 0208 	orr.w	r2, r2, #8
 8005cbe:	619a      	str	r2, [r3, #24]
  }
}
 8005cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cc4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8005cc8:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cca:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cce:	f007 0701 	and.w	r7, r7, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80d8 	beq.w	8005e88 <UART_RxISR_8BIT_FIFOEN+0x1e8>
 8005cd8:	2f00      	cmp	r7, #0
 8005cda:	f000 80a3 	beq.w	8005e24 <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ce0:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ce2:	f04f 0802 	mov.w	r8, #2
 8005ce6:	e004      	b.n	8005cf2 <UART_RxISR_8BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8005ce8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d03e      	beq.n	8005d70 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cf2:	06ab      	lsls	r3, r5, #26
 8005cf4:	d573      	bpl.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cf6:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cf8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cfc:	ea03 0309 	and.w	r3, r3, r9
 8005d00:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8005d02:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d06:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 8005d08:	3a01      	subs	r2, #1
      huart->pRxBuffPtr++;
 8005d0a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005d0c:	b292      	uxth	r2, r2
      huart->pRxBuffPtr++;
 8005d0e:	3101      	adds	r1, #1
      huart->RxXferCount--;
 8005d10:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d14:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8005d16:	65a1      	str	r1, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d18:	0768      	lsls	r0, r5, #29
 8005d1a:	d0e5      	beq.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d1c:	07e9      	lsls	r1, r5, #31
 8005d1e:	d50a      	bpl.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x96>
 8005d20:	f1ba 0f00 	cmp.w	sl, #0
 8005d24:	d007      	beq.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d26:	2201      	movs	r2, #1
 8005d28:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d2a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d36:	07aa      	lsls	r2, r5, #30
 8005d38:	d507      	bpl.n	8005d4a <UART_RxISR_8BIT_FIFOEN+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d3a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d3e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005d42:	f042 0204 	orr.w	r2, r2, #4
 8005d46:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d4a:	0768      	lsls	r0, r5, #29
 8005d4c:	d506      	bpl.n	8005d5c <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d4e:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d50:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d5c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0c1      	beq.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7fa fcff 	bl	8000768 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6a:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8005d6e:	e7bb      	b.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x48>
 8005d70:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	e843 2100 	strex	r1, r2, [r3]
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	d1f7      	bne.n	8005d72 <UART_RxISR_8BIT_FIFOEN+0xd2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	484e      	ldr	r0, [pc, #312]	@ (8005ebc <UART_RxISR_8BIT_FIFOEN+0x21c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	e852 2f00 	ldrex	r2, [r2]
 8005d8c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	f103 0508 	add.w	r5, r3, #8
 8005d92:	e845 2100 	strex	r1, r2, [r5]
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d1f4      	bne.n	8005d84 <UART_RxISR_8BIT_FIFOEN+0xe4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d9a:	4a49      	ldr	r2, [pc, #292]	@ (8005ec0 <UART_RxISR_8BIT_FIFOEN+0x220>)
        huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8005d9e:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005da0:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da6:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005da8:	d002      	beq.n	8005db0 <UART_RxISR_8BIT_FIFOEN+0x110>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	0211      	lsls	r1, r2, #8
 8005dae:	d46f      	bmi.n	8005e90 <UART_RxISR_8BIT_FIFOEN+0x1f0>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005db2:	2a01      	cmp	r2, #1
 8005db4:	d17d      	bne.n	8005eb2 <UART_RxISR_8BIT_FIFOEN+0x212>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	2200      	movs	r2, #0
 8005db8:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	e843 2100 	strex	r1, r2, [r3]
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	d1f7      	bne.n	8005dba <UART_RxISR_8BIT_FIFOEN+0x11a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	06d2      	lsls	r2, r2, #27
 8005dce:	d501      	bpl.n	8005dd4 <UART_RxISR_8BIT_FIFOEN+0x134>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fcf7 	bl	80057cc <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8005dde:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005de2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f43f af6b 	beq.w	8005cc0 <UART_RxISR_8BIT_FIFOEN+0x20>
 8005dea:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8005dee:	429a      	cmp	r2, r3
 8005df0:	f67f af66 	bls.w	8005cc0 <UART_RxISR_8BIT_FIFOEN+0x20>
 8005df4:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	f103 0208 	add.w	r2, r3, #8
 8005dfa:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dfe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	f103 0008 	add.w	r0, r3, #8
 8005e06:	e840 2100 	strex	r1, r2, [r0]
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d1f3      	bne.n	8005df6 <UART_RxISR_8BIT_FIFOEN+0x156>
      huart->RxISR = UART_RxISR_8BIT;
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <UART_RxISR_8BIT_FIFOEN+0x224>)
 8005e10:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e16:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	e843 2100 	strex	r1, r2, [r3]
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d1f7      	bne.n	8005e12 <UART_RxISR_8BIT_FIFOEN+0x172>
 8005e22:	e74d      	b.n	8005cc0 <UART_RxISR_8BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e24:	2601      	movs	r6, #1
 8005e26:	e004      	b.n	8005e32 <UART_RxISR_8BIT_FIFOEN+0x192>
      if (huart->RxXferCount == 0U)
 8005e28:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d09e      	beq.n	8005d70 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e32:	06a8      	lsls	r0, r5, #26
 8005e34:	d5d3      	bpl.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e36:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e38:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e3c:	ea03 0309 	and.w	r3, r3, r9
 8005e40:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8005e42:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 8005e46:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005e48:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8005e4a:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8005e4c:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 8005e4e:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005e50:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e58:	0769      	lsls	r1, r5, #29
 8005e5a:	d0e5      	beq.n	8005e28 <UART_RxISR_8BIT_FIFOEN+0x188>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e5c:	07ea      	lsls	r2, r5, #31
 8005e5e:	d509      	bpl.n	8005e74 <UART_RxISR_8BIT_FIFOEN+0x1d4>
 8005e60:	f1ba 0f00 	cmp.w	sl, #0
 8005e64:	d006      	beq.n	8005e74 <UART_RxISR_8BIT_FIFOEN+0x1d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e66:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e68:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e74:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0d5      	beq.n	8005e28 <UART_RxISR_8BIT_FIFOEN+0x188>
          HAL_UART_ErrorCallback(huart);
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7fa fc73 	bl	8000768 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 8005e86:	e7cf      	b.n	8005e28 <UART_RxISR_8BIT_FIFOEN+0x188>
    rxdatacount = huart->RxXferCount;
 8005e88:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e94:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	e843 2100 	strex	r1, r2, [r3]
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d087      	beq.n	8005db0 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	e853 2f00 	ldrex	r2, [r3]
 8005ea4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	e843 2100 	strex	r1, r2, [r3]
 8005eac:	2900      	cmp	r1, #0
 8005eae:	d1ef      	bne.n	8005e90 <UART_RxISR_8BIT_FIFOEN+0x1f0>
 8005eb0:	e77e      	b.n	8005db0 <UART_RxISR_8BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7fa fc02 	bl	80006bc <HAL_UART_RxCpltCallback>
 8005eb8:	e791      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x13e>
 8005eba:	bf00      	nop
 8005ebc:	effffffe 	.word	0xeffffffe
 8005ec0:	58000c00 	.word	0x58000c00
 8005ec4:	08005c5d 	.word	0x08005c5d

08005ec8 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ec8:	6803      	ldr	r3, [r0, #0]
{
 8005eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ece:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ed0:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ed2:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8005ed8:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005edc:	2a22      	cmp	r2, #34	@ 0x22
 8005ede:	d005      	beq.n	8005eec <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	619a      	str	r2, [r3, #24]
  }
}
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005eec:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8005ef0:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef2:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef6:	f007 0701 	and.w	r7, r7, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80d4 	beq.w	80060a8 <UART_RxISR_16BIT_FIFOEN+0x1e0>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	f000 80a1 	beq.w	8006048 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f08:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f0a:	f04f 0802 	mov.w	r8, #2
 8005f0e:	e004      	b.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8005f10:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d03c      	beq.n	8005f94 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f1a:	06ab      	lsls	r3, r5, #26
 8005f1c:	d571      	bpl.n	8006002 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f1e:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f20:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f24:	ea09 0202 	and.w	r2, r9, r2
 8005f28:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8005f2c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 8005f30:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8005f32:	3a01      	subs	r2, #1
 8005f34:	b292      	uxth	r2, r2
 8005f36:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f3a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f3c:	0768      	lsls	r0, r5, #29
 8005f3e:	d0e7      	beq.n	8005f10 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f40:	07e9      	lsls	r1, r5, #31
 8005f42:	d50a      	bpl.n	8005f5a <UART_RxISR_16BIT_FIFOEN+0x92>
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	d007      	beq.n	8005f5a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f4e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f5a:	07aa      	lsls	r2, r5, #30
 8005f5c:	d507      	bpl.n	8005f6e <UART_RxISR_16BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f5e:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f62:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8005f66:	f042 0204 	orr.w	r2, r2, #4
 8005f6a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6e:	0768      	lsls	r0, r5, #29
 8005f70:	d506      	bpl.n	8005f80 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f72:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005f78:	f043 0302 	orr.w	r3, r3, #2
 8005f7c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f80:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0c3      	beq.n	8005f10 <UART_RxISR_16BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7fa fbed 	bl	8000768 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8005f92:	e7bd      	b.n	8005f10 <UART_RxISR_16BIT_FIFOEN+0x48>
 8005f94:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	e843 2100 	strex	r1, r2, [r3]
 8005fa2:	2900      	cmp	r1, #0
 8005fa4:	d1f7      	bne.n	8005f96 <UART_RxISR_16BIT_FIFOEN+0xce>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fa6:	484d      	ldr	r0, [pc, #308]	@ (80060dc <UART_RxISR_16BIT_FIFOEN+0x214>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	f103 0208 	add.w	r2, r3, #8
 8005fac:	e852 2f00 	ldrex	r2, [r2]
 8005fb0:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f103 0508 	add.w	r5, r3, #8
 8005fb6:	e845 2100 	strex	r1, r2, [r5]
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d1f4      	bne.n	8005fa8 <UART_RxISR_16BIT_FIFOEN+0xe0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fbe:	4a48      	ldr	r2, [pc, #288]	@ (80060e0 <UART_RxISR_16BIT_FIFOEN+0x218>)
        huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8005fc2:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fc4:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fca:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fcc:	d002      	beq.n	8005fd4 <UART_RxISR_16BIT_FIFOEN+0x10c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	0211      	lsls	r1, r2, #8
 8005fd2:	d46d      	bmi.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005fd6:	2a01      	cmp	r2, #1
 8005fd8:	d17b      	bne.n	80060d2 <UART_RxISR_16BIT_FIFOEN+0x20a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	2200      	movs	r2, #0
 8005fdc:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	e843 2100 	strex	r1, r2, [r3]
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d1f7      	bne.n	8005fde <UART_RxISR_16BIT_FIFOEN+0x116>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	06d2      	lsls	r2, r2, #27
 8005ff2:	d501      	bpl.n	8005ff8 <UART_RxISR_16BIT_FIFOEN+0x130>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7ff fbe5 	bl	80057cc <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8006002:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006006:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006008:	2b00      	cmp	r3, #0
 800600a:	f43f af6d 	beq.w	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x20>
 800600e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8006012:	429a      	cmp	r2, r3
 8006014:	f67f af68 	bls.w	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x20>
 8006018:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	f103 0208 	add.w	r2, r3, #8
 800601e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006022:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	f103 0008 	add.w	r0, r3, #8
 800602a:	e840 2100 	strex	r1, r2, [r0]
 800602e:	2900      	cmp	r1, #0
 8006030:	d1f3      	bne.n	800601a <UART_RxISR_16BIT_FIFOEN+0x152>
      huart->RxISR = UART_RxISR_16BIT;
 8006032:	4a2c      	ldr	r2, [pc, #176]	@ (80060e4 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8006034:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800603a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	e843 2100 	strex	r1, r2, [r3]
 8006042:	2900      	cmp	r1, #0
 8006044:	d1f7      	bne.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x16e>
 8006046:	e74f      	b.n	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006048:	2601      	movs	r6, #1
 800604a:	e004      	b.n	8006056 <UART_RxISR_16BIT_FIFOEN+0x18e>
      if (huart->RxXferCount == 0U)
 800604c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d09e      	beq.n	8005f94 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006056:	06a8      	lsls	r0, r5, #26
 8006058:	d5d3      	bpl.n	8006002 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800605a:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800605c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800605e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8006060:	ea09 0101 	and.w	r1, r9, r1
 8006064:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8006068:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800606a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 800606e:	3a01      	subs	r2, #1
 8006070:	b292      	uxth	r2, r2
 8006072:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006076:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006078:	0769      	lsls	r1, r5, #29
 800607a:	d0e7      	beq.n	800604c <UART_RxISR_16BIT_FIFOEN+0x184>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800607c:	07ea      	lsls	r2, r5, #31
 800607e:	d509      	bpl.n	8006094 <UART_RxISR_16BIT_FIFOEN+0x1cc>
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	d006      	beq.n	8006094 <UART_RxISR_16BIT_FIFOEN+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006086:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006088:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006094:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0d7      	beq.n	800604c <UART_RxISR_16BIT_FIFOEN+0x184>
          HAL_UART_ErrorCallback(huart);
 800609c:	4620      	mov	r0, r4
 800609e:	f7fa fb63 	bl	8000768 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a2:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 80060a6:	e7d1      	b.n	800604c <UART_RxISR_16BIT_FIFOEN+0x184>
    rxdatacount = huart->RxXferCount;
 80060a8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060b4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	e843 2100 	strex	r1, r2, [r3]
 80060bc:	2900      	cmp	r1, #0
 80060be:	d089      	beq.n	8005fd4 <UART_RxISR_16BIT_FIFOEN+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	e853 2f00 	ldrex	r2, [r3]
 80060c4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	e843 2100 	strex	r1, r2, [r3]
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d1ef      	bne.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
 80060d0:	e780      	b.n	8005fd4 <UART_RxISR_16BIT_FIFOEN+0x10c>
          HAL_UART_RxCpltCallback(huart);
 80060d2:	4620      	mov	r0, r4
 80060d4:	f7fa faf2 	bl	80006bc <HAL_UART_RxCpltCallback>
 80060d8:	e793      	b.n	8006002 <UART_RxISR_16BIT_FIFOEN+0x13a>
 80060da:	bf00      	nop
 80060dc:	effffffe 	.word	0xeffffffe
 80060e0:	58000c00 	.word	0x58000c00
 80060e4:	08005c15 	.word	0x08005c15

080060e8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e8:	6901      	ldr	r1, [r0, #16]
 80060ea:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060ec:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ee:	430a      	orrs	r2, r1
{
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f6:	69c0      	ldr	r0, [r0, #28]
{
 80060f8:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060fa:	6961      	ldr	r1, [r4, #20]
 80060fc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060fe:	49a0      	ldr	r1, [pc, #640]	@ (8006380 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006100:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006102:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006104:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006106:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006108:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800610a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006112:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006114:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006116:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006118:	4a9a      	ldr	r2, [pc, #616]	@ (8006384 <UART_SetConfig+0x29c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	f000 8119 	beq.w	8006352 <UART_SetConfig+0x26a>
    tmpreg |= huart->Init.OneBitSampling;
 8006120:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006122:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006124:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006126:	4a98      	ldr	r2, [pc, #608]	@ (8006388 <UART_SetConfig+0x2a0>)
 8006128:	4032      	ands	r2, r6
 800612a:	4311      	orrs	r1, r2
 800612c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006130:	f022 020f 	bic.w	r2, r2, #15
 8006134:	432a      	orrs	r2, r5
 8006136:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006138:	4a94      	ldr	r2, [pc, #592]	@ (800638c <UART_SetConfig+0x2a4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d028      	beq.n	8006190 <UART_SetConfig+0xa8>
 800613e:	4a94      	ldr	r2, [pc, #592]	@ (8006390 <UART_SetConfig+0x2a8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01a      	beq.n	800617a <UART_SetConfig+0x92>
 8006144:	4a93      	ldr	r2, [pc, #588]	@ (8006394 <UART_SetConfig+0x2ac>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d017      	beq.n	800617a <UART_SetConfig+0x92>
 800614a:	4a93      	ldr	r2, [pc, #588]	@ (8006398 <UART_SetConfig+0x2b0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d014      	beq.n	800617a <UART_SetConfig+0x92>
 8006150:	4a92      	ldr	r2, [pc, #584]	@ (800639c <UART_SetConfig+0x2b4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d011      	beq.n	800617a <UART_SetConfig+0x92>
 8006156:	4a92      	ldr	r2, [pc, #584]	@ (80063a0 <UART_SetConfig+0x2b8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d019      	beq.n	8006190 <UART_SetConfig+0xa8>
 800615c:	4a91      	ldr	r2, [pc, #580]	@ (80063a4 <UART_SetConfig+0x2bc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <UART_SetConfig+0x92>
 8006162:	4a91      	ldr	r2, [pc, #580]	@ (80063a8 <UART_SetConfig+0x2c0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d008      	beq.n	800617a <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8006168:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800616a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800616c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8006170:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006172:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006174:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006176:	b006      	add	sp, #24
 8006178:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617a:	4b8c      	ldr	r3, [pc, #560]	@ (80063ac <UART_SetConfig+0x2c4>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	2b05      	cmp	r3, #5
 8006184:	d8f0      	bhi.n	8006168 <UART_SetConfig+0x80>
 8006186:	e8df f003 	tbb	[pc, r3]
 800618a:	7e9e      	.short	0x7e9e
 800618c:	785f9189 	.word	0x785f9189
 8006190:	4b86      	ldr	r3, [pc, #536]	@ (80063ac <UART_SetConfig+0x2c4>)
 8006192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006198:	2b28      	cmp	r3, #40	@ 0x28
 800619a:	d8e5      	bhi.n	8006168 <UART_SetConfig+0x80>
 800619c:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <UART_SetConfig+0xbc>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	08006321 	.word	0x08006321
 80061a8:	08006169 	.word	0x08006169
 80061ac:	08006169 	.word	0x08006169
 80061b0:	08006169 	.word	0x08006169
 80061b4:	08006169 	.word	0x08006169
 80061b8:	08006169 	.word	0x08006169
 80061bc:	08006169 	.word	0x08006169
 80061c0:	08006169 	.word	0x08006169
 80061c4:	08006287 	.word	0x08006287
 80061c8:	08006169 	.word	0x08006169
 80061cc:	08006169 	.word	0x08006169
 80061d0:	08006169 	.word	0x08006169
 80061d4:	08006169 	.word	0x08006169
 80061d8:	08006169 	.word	0x08006169
 80061dc:	08006169 	.word	0x08006169
 80061e0:	08006169 	.word	0x08006169
 80061e4:	0800629d 	.word	0x0800629d
 80061e8:	08006169 	.word	0x08006169
 80061ec:	08006169 	.word	0x08006169
 80061f0:	08006169 	.word	0x08006169
 80061f4:	08006169 	.word	0x08006169
 80061f8:	08006169 	.word	0x08006169
 80061fc:	08006169 	.word	0x08006169
 8006200:	08006169 	.word	0x08006169
 8006204:	080062ad 	.word	0x080062ad
 8006208:	08006169 	.word	0x08006169
 800620c:	08006169 	.word	0x08006169
 8006210:	08006169 	.word	0x08006169
 8006214:	08006169 	.word	0x08006169
 8006218:	08006169 	.word	0x08006169
 800621c:	08006169 	.word	0x08006169
 8006220:	08006169 	.word	0x08006169
 8006224:	08006249 	.word	0x08006249
 8006228:	08006169 	.word	0x08006169
 800622c:	08006169 	.word	0x08006169
 8006230:	08006169 	.word	0x08006169
 8006234:	08006169 	.word	0x08006169
 8006238:	08006169 	.word	0x08006169
 800623c:	08006169 	.word	0x08006169
 8006240:	08006169 	.word	0x08006169
 8006244:	0800627b 	.word	0x0800627b
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006248:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800624c:	4858      	ldr	r0, [pc, #352]	@ (80063b0 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624e:	d047      	beq.n	80062e0 <UART_SetConfig+0x1f8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006250:	4a58      	ldr	r2, [pc, #352]	@ (80063b4 <UART_SetConfig+0x2cc>)
 8006252:	6863      	ldr	r3, [r4, #4]
 8006254:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006258:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800625c:	fbb0 f0f1 	udiv	r0, r0, r1
 8006260:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006264:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006268:	f1a0 0310 	sub.w	r3, r0, #16
 800626c:	4293      	cmp	r3, r2
 800626e:	f63f af7b 	bhi.w	8006168 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8006276:	2000      	movs	r0, #0
 8006278:	e777      	b.n	800616a <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800627e:	d02f      	beq.n	80062e0 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) LSE_VALUE;
 8006280:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006284:	e7e4      	b.n	8006250 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006286:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800628a:	d022      	beq.n	80062d2 <UART_SetConfig+0x1ea>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800628c:	4668      	mov	r0, sp
 800628e:	f7fe f859 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006292:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006294:	2800      	cmp	r0, #0
 8006296:	d0ee      	beq.n	8006276 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006298:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800629a:	e7d9      	b.n	8006250 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80062a0:	d04f      	beq.n	8006342 <UART_SetConfig+0x25a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a2:	a803      	add	r0, sp, #12
 80062a4:	f7fe f8e8 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062a8:	9804      	ldr	r0, [sp, #16]
        break;
 80062aa:	e7f3      	b.n	8006294 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80062b0:	d03c      	beq.n	800632c <UART_SetConfig+0x244>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b2:	4b3e      	ldr	r3, [pc, #248]	@ (80063ac <UART_SetConfig+0x2c4>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	0691      	lsls	r1, r2, #26
 80062b8:	d52d      	bpl.n	8006316 <UART_SetConfig+0x22e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	483e      	ldr	r0, [pc, #248]	@ (80063b8 <UART_SetConfig+0x2d0>)
 80062be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80062c2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80062c4:	e7c4      	b.n	8006250 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80062ca:	d026      	beq.n	800631a <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fc ff74 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
        break;
 80062d0:	e7e0      	b.n	8006294 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d2:	4668      	mov	r0, sp
 80062d4:	f7fe f836 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80062da:	2800      	cmp	r0, #0
 80062dc:	d0cb      	beq.n	8006276 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062de:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80062e0:	4b34      	ldr	r3, [pc, #208]	@ (80063b4 <UART_SetConfig+0x2cc>)
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80062e8:	0853      	lsrs	r3, r2, #1
 80062ea:	fbb0 f0f1 	udiv	r0, r0, r1
 80062ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062fa:	f1a3 0210 	sub.w	r2, r3, #16
 80062fe:	428a      	cmp	r2, r1
 8006300:	f63f af32 	bhi.w	8006168 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006304:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006308:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800630c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006310:	4313      	orrs	r3, r2
 8006312:	60cb      	str	r3, [r1, #12]
 8006314:	e7af      	b.n	8006276 <UART_SetConfig+0x18e>
          pclk = (uint32_t) HSI_VALUE;
 8006316:	4828      	ldr	r0, [pc, #160]	@ (80063b8 <UART_SetConfig+0x2d0>)
 8006318:	e79a      	b.n	8006250 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800631a:	f7fc ff4d 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
        break;
 800631e:	e7dc      	b.n	80062da <UART_SetConfig+0x1f2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006320:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006324:	d012      	beq.n	800634c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006326:	f7fc ff8f 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
        break;
 800632a:	e7b3      	b.n	8006294 <UART_SetConfig+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632c:	4b1f      	ldr	r3, [pc, #124]	@ (80063ac <UART_SetConfig+0x2c4>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	0690      	lsls	r0, r2, #26
 8006332:	f140 808b 	bpl.w	800644c <UART_SetConfig+0x364>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	481f      	ldr	r0, [pc, #124]	@ (80063b8 <UART_SetConfig+0x2d0>)
 800633a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800633e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006340:	e7ce      	b.n	80062e0 <UART_SetConfig+0x1f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006342:	a803      	add	r0, sp, #12
 8006344:	f7fe f898 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006348:	9804      	ldr	r0, [sp, #16]
        break;
 800634a:	e7c6      	b.n	80062da <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7fc ff7c 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
        break;
 8006350:	e7c3      	b.n	80062da <UART_SetConfig+0x1f2>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006352:	6898      	ldr	r0, [r3, #8]
 8006354:	4a0c      	ldr	r2, [pc, #48]	@ (8006388 <UART_SetConfig+0x2a0>)
 8006356:	4002      	ands	r2, r0
 8006358:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635a:	4914      	ldr	r1, [pc, #80]	@ (80063ac <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800635c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800635e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006360:	f022 020f 	bic.w	r2, r2, #15
 8006364:	432a      	orrs	r2, r5
 8006366:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006368:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	f63f aefa 	bhi.w	8006168 <UART_SetConfig+0x80>
 8006374:	e8df f003 	tbb	[pc, r3]
 8006378:	224e575c 	.word	0x224e575c
 800637c:	5f62      	.short	0x5f62
 800637e:	bf00      	nop
 8006380:	cfff69f3 	.word	0xcfff69f3
 8006384:	58000c00 	.word	0x58000c00
 8006388:	11fff4ff 	.word	0x11fff4ff
 800638c:	40011000 	.word	0x40011000
 8006390:	40004400 	.word	0x40004400
 8006394:	40004800 	.word	0x40004800
 8006398:	40004c00 	.word	0x40004c00
 800639c:	40005000 	.word	0x40005000
 80063a0:	40011400 	.word	0x40011400
 80063a4:	40007800 	.word	0x40007800
 80063a8:	40007c00 	.word	0x40007c00
 80063ac:	58024400 	.word	0x58024400
 80063b0:	003d0900 	.word	0x003d0900
 80063b4:	08009128 	.word	0x08009128
 80063b8:	03d09000 	.word	0x03d09000
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063bc:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <UART_SetConfig+0x368>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	0692      	lsls	r2, r2, #26
 80063c2:	d43d      	bmi.n	8006440 <UART_SetConfig+0x358>
          pclk = (uint32_t) HSI_VALUE;
 80063c4:	4823      	ldr	r0, [pc, #140]	@ (8006454 <UART_SetConfig+0x36c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063c6:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <UART_SetConfig+0x370>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063ca:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ce:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063d2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063d6:	4299      	cmp	r1, r3
 80063d8:	f63f aec6 	bhi.w	8006168 <UART_SetConfig+0x80>
 80063dc:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80063e0:	f63f aec2 	bhi.w	8006168 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e4:	2300      	movs	r3, #0
 80063e6:	4619      	mov	r1, r3
 80063e8:	f7f9 ffd2 	bl	8000390 <__aeabi_uldivmod>
 80063ec:	4632      	mov	r2, r6
 80063ee:	0209      	lsls	r1, r1, #8
 80063f0:	0203      	lsls	r3, r0, #8
 80063f2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80063f6:	0870      	lsrs	r0, r6, #1
 80063f8:	1818      	adds	r0, r3, r0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f141 0100 	adc.w	r1, r1, #0
 8006402:	f7f9 ffc5 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006406:	4b15      	ldr	r3, [pc, #84]	@ (800645c <UART_SetConfig+0x374>)
 8006408:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800640c:	429a      	cmp	r2, r3
 800640e:	f63f aeab 	bhi.w	8006168 <UART_SetConfig+0x80>
 8006412:	e72e      	b.n	8006272 <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006414:	a803      	add	r0, sp, #12
 8006416:	f7fe f82f 	bl	8004478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800641a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800641c:	2800      	cmp	r0, #0
 800641e:	f43f af2a 	beq.w	8006276 <UART_SetConfig+0x18e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006422:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006424:	e7cf      	b.n	80063c6 <UART_SetConfig+0x2de>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006426:	4668      	mov	r0, sp
 8006428:	f7fd ff8c 	bl	8004344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800642c:	9801      	ldr	r0, [sp, #4]
        break;
 800642e:	e7f5      	b.n	800641c <UART_SetConfig+0x334>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006430:	f7fd ff76 	bl	8004320 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006434:	e7f2      	b.n	800641c <UART_SetConfig+0x334>
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800643a:	e7c4      	b.n	80063c6 <UART_SetConfig+0x2de>
        pclk = (uint32_t) CSI_VALUE;
 800643c:	4808      	ldr	r0, [pc, #32]	@ (8006460 <UART_SetConfig+0x378>)
 800643e:	e7c2      	b.n	80063c6 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4804      	ldr	r0, [pc, #16]	@ (8006454 <UART_SetConfig+0x36c>)
 8006444:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006448:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800644a:	e7bc      	b.n	80063c6 <UART_SetConfig+0x2de>
          pclk = (uint32_t) HSI_VALUE;
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <UART_SetConfig+0x36c>)
 800644e:	e747      	b.n	80062e0 <UART_SetConfig+0x1f8>
 8006450:	58024400 	.word	0x58024400
 8006454:	03d09000 	.word	0x03d09000
 8006458:	08009128 	.word	0x08009128
 800645c:	000ffcff 	.word	0x000ffcff
 8006460:	003d0900 	.word	0x003d0900

08006464 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006464:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006466:	071a      	lsls	r2, r3, #28
{
 8006468:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800646a:	d506      	bpl.n	800647a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646c:	6801      	ldr	r1, [r0, #0]
 800646e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006470:	684a      	ldr	r2, [r1, #4]
 8006472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006476:	4322      	orrs	r2, r4
 8006478:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800647a:	07dc      	lsls	r4, r3, #31
 800647c:	d506      	bpl.n	800648c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800647e:	6801      	ldr	r1, [r0, #0]
 8006480:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006482:	684a      	ldr	r2, [r1, #4]
 8006484:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006488:	4322      	orrs	r2, r4
 800648a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800648c:	0799      	lsls	r1, r3, #30
 800648e:	d506      	bpl.n	800649e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006490:	6801      	ldr	r1, [r0, #0]
 8006492:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006494:	684a      	ldr	r2, [r1, #4]
 8006496:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800649a:	4322      	orrs	r2, r4
 800649c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649e:	075a      	lsls	r2, r3, #29
 80064a0:	d506      	bpl.n	80064b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a2:	6801      	ldr	r1, [r0, #0]
 80064a4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80064a6:	684a      	ldr	r2, [r1, #4]
 80064a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064ac:	4322      	orrs	r2, r4
 80064ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064b0:	06dc      	lsls	r4, r3, #27
 80064b2:	d506      	bpl.n	80064c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064b4:	6801      	ldr	r1, [r0, #0]
 80064b6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80064b8:	688a      	ldr	r2, [r1, #8]
 80064ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064be:	4322      	orrs	r2, r4
 80064c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	0699      	lsls	r1, r3, #26
 80064c4:	d506      	bpl.n	80064d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c6:	6801      	ldr	r1, [r0, #0]
 80064c8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80064ca:	688a      	ldr	r2, [r1, #8]
 80064cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064d0:	4322      	orrs	r2, r4
 80064d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d4:	065a      	lsls	r2, r3, #25
 80064d6:	d50a      	bpl.n	80064ee <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d8:	6801      	ldr	r1, [r0, #0]
 80064da:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80064dc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064de:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80064e6:	ea42 0204 	orr.w	r2, r2, r4
 80064ea:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ec:	d00b      	beq.n	8006506 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ee:	061b      	lsls	r3, r3, #24
 80064f0:	d506      	bpl.n	8006500 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f2:	6802      	ldr	r2, [r0, #0]
 80064f4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80064f6:	6853      	ldr	r3, [r2, #4]
 80064f8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6053      	str	r3, [r2, #4]
}
 8006500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006504:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006506:	684a      	ldr	r2, [r1, #4]
 8006508:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800650a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800650e:	4322      	orrs	r2, r4
 8006510:	604a      	str	r2, [r1, #4]
 8006512:	e7ec      	b.n	80064ee <UART_AdvFeatureConfig+0x8a>

08006514 <UART_CheckIdleState>:
{
 8006514:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
{
 8006518:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800651e:	f7fa ff3b 	bl	8001398 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006522:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006524:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	071b      	lsls	r3, r3, #28
 800652a:	d40f      	bmi.n	800654c <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	0759      	lsls	r1, r3, #29
 8006530:	d431      	bmi.n	8006596 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006534:	2220      	movs	r2, #32
  return HAL_OK;
 8006536:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8006538:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800653c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006542:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8006544:	2300      	movs	r3, #0
 8006546:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800654a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654c:	69d3      	ldr	r3, [r2, #28]
 800654e:	0298      	lsls	r0, r3, #10
 8006550:	d4ec      	bmi.n	800652c <UART_CheckIdleState+0x18>
 8006552:	e00c      	b.n	800656e <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	0749      	lsls	r1, r1, #29
 800655a:	d505      	bpl.n	8006568 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655c:	69d9      	ldr	r1, [r3, #28]
 800655e:	0708      	lsls	r0, r1, #28
 8006560:	d44a      	bmi.n	80065f8 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006562:	69d9      	ldr	r1, [r3, #28]
 8006564:	0509      	lsls	r1, r1, #20
 8006566:	d475      	bmi.n	8006654 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	0298      	lsls	r0, r3, #10
 800656c:	d4de      	bmi.n	800652c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fa ff13 	bl	8001398 <HAL_GetTick>
 8006572:	1b43      	subs	r3, r0, r5
 8006574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006578:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	d3eb      	bcc.n	8006554 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	e843 2100 	strex	r1, r2, [r3]
 8006588:	2900      	cmp	r1, #0
 800658a:	d1f7      	bne.n	800657c <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800658c:	2320      	movs	r3, #32
 800658e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8006592:	2003      	movs	r0, #3
 8006594:	e7d6      	b.n	8006544 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	69d3      	ldr	r3, [r2, #28]
 8006598:	025b      	lsls	r3, r3, #9
 800659a:	d4ca      	bmi.n	8006532 <UART_CheckIdleState+0x1e>
 800659c:	e00d      	b.n	80065ba <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	0750      	lsls	r0, r2, #29
 80065a2:	d507      	bpl.n	80065b4 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	0711      	lsls	r1, r2, #28
 80065a8:	f100 8082 	bmi.w	80066b0 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	0512      	lsls	r2, r2, #20
 80065b0:	f100 80ac 	bmi.w	800670c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	025b      	lsls	r3, r3, #9
 80065b8:	d4bb      	bmi.n	8006532 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fa feed 	bl	8001398 <HAL_GetTick>
 80065be:	1b43      	subs	r3, r0, r5
 80065c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	d3ea      	bcc.n	800659e <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065cc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	e843 2100 	strex	r1, r2, [r3]
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d1f7      	bne.n	80065c8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	f103 0208 	add.w	r2, r3, #8
 80065dc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	f103 0008 	add.w	r0, r3, #8
 80065e8:	e840 2100 	strex	r1, r2, [r0]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d1f3      	bne.n	80065d8 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80065f0:	2320      	movs	r3, #32
 80065f2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80065f6:	e7cc      	b.n	8006592 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f8:	2208      	movs	r2, #8
 80065fa:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006600:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	e843 2100 	strex	r1, r2, [r3]
 8006608:	2900      	cmp	r1, #0
 800660a:	d1f7      	bne.n	80065fc <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800660c:	4856      	ldr	r0, [pc, #344]	@ (8006768 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	f103 0208 	add.w	r2, r3, #8
 8006612:	e852 2f00 	ldrex	r2, [r2]
 8006616:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	f103 0508 	add.w	r5, r3, #8
 800661c:	e845 2100 	strex	r1, r2, [r5]
 8006620:	2900      	cmp	r1, #0
 8006622:	d1f4      	bne.n	800660e <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006626:	2a01      	cmp	r2, #1
 8006628:	d00b      	beq.n	8006642 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800662e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006630:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006634:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006638:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800663c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8006640:	e79c      	b.n	800657c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	e843 2100 	strex	r1, r2, [r3]
 800664e:	2900      	cmp	r1, #0
 8006650:	d1f7      	bne.n	8006642 <UART_CheckIdleState+0x12e>
 8006652:	e7ea      	b.n	800662a <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006658:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800665e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	e843 2100 	strex	r1, r2, [r3]
 8006666:	2900      	cmp	r1, #0
 8006668:	d1f7      	bne.n	800665a <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800666a:	483f      	ldr	r0, [pc, #252]	@ (8006768 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	f103 0208 	add.w	r2, r3, #8
 8006670:	e852 2f00 	ldrex	r2, [r2]
 8006674:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	f103 0508 	add.w	r5, r3, #8
 800667a:	e845 2100 	strex	r1, r2, [r5]
 800667e:	2900      	cmp	r1, #0
 8006680:	d1f4      	bne.n	800666c <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006684:	2a01      	cmp	r2, #1
 8006686:	d00a      	beq.n	800669e <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800668a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800668c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800668e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8006692:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006698:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800669c:	e76e      	b.n	800657c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	e843 2100 	strex	r1, r2, [r3]
 80066aa:	2900      	cmp	r1, #0
 80066ac:	d1f7      	bne.n	800669e <UART_CheckIdleState+0x18a>
 80066ae:	e7eb      	b.n	8006688 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	e843 2100 	strex	r1, r2, [r3]
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d1f7      	bne.n	80066b4 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066c4:	4828      	ldr	r0, [pc, #160]	@ (8006768 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	f103 0208 	add.w	r2, r3, #8
 80066ca:	e852 2f00 	ldrex	r2, [r2]
 80066ce:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	f103 0508 	add.w	r5, r3, #8
 80066d4:	e845 2100 	strex	r1, r2, [r5]
 80066d8:	2900      	cmp	r1, #0
 80066da:	d1f4      	bne.n	80066c6 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80066de:	2a01      	cmp	r2, #1
 80066e0:	d00b      	beq.n	80066fa <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80066e4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066e6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80066ec:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ee:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80066f0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80066f8:	e766      	b.n	80065c8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	e843 2100 	strex	r1, r2, [r3]
 8006706:	2900      	cmp	r1, #0
 8006708:	d1f7      	bne.n	80066fa <UART_CheckIdleState+0x1e6>
 800670a:	e7ea      	b.n	80066e2 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006710:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006716:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	e843 2100 	strex	r1, r2, [r3]
 800671e:	2900      	cmp	r1, #0
 8006720:	d1f7      	bne.n	8006712 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006722:	4811      	ldr	r0, [pc, #68]	@ (8006768 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	f103 0208 	add.w	r2, r3, #8
 8006728:	e852 2f00 	ldrex	r2, [r2]
 800672c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	f103 0508 	add.w	r5, r3, #8
 8006732:	e845 2100 	strex	r1, r2, [r5]
 8006736:	2900      	cmp	r1, #0
 8006738:	d1f4      	bne.n	8006724 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800673c:	2a01      	cmp	r2, #1
 800673e:	d00a      	beq.n	8006756 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006740:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006744:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800674a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006750:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006754:	e738      	b.n	80065c8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	e843 2100 	strex	r1, r2, [r3]
 8006762:	2900      	cmp	r1, #0
 8006764:	d1f7      	bne.n	8006756 <UART_CheckIdleState+0x242>
 8006766:	e7eb      	b.n	8006740 <UART_CheckIdleState+0x22c>
 8006768:	effffffe 	.word	0xeffffffe

0800676c <HAL_UART_Init>:
  if (huart == NULL)
 800676c:	b380      	cbz	r0, 80067d0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800676e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006776:	b333      	cbz	r3, 80067c6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8006778:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800677c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800677e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800678a:	b9c1      	cbnz	r1, 80067be <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff fcab 	bl	80060e8 <UART_SetConfig>
 8006792:	2801      	cmp	r0, #1
 8006794:	d011      	beq.n	80067ba <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006796:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006798:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067a8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
}
 80067b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80067b4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80067b6:	f7ff bead 	b.w	8006514 <UART_CheckIdleState>
}
 80067ba:	2001      	movs	r0, #1
 80067bc:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff fe50 	bl	8006464 <UART_AdvFeatureConfig>
 80067c4:	e7e2      	b.n	800678c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80067c6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80067ca:	f7fa fcf9 	bl	80011c0 <HAL_UART_MspInit>
 80067ce:	e7d3      	b.n	8006778 <HAL_UART_Init+0xc>
}
 80067d0:	2001      	movs	r0, #1
 80067d2:	4770      	bx	lr

080067d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067e0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80067e4:	2a01      	cmp	r2, #1
 80067e6:	d017      	beq.n	8006818 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e8:	6802      	ldr	r2, [r0, #0]
 80067ea:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80067ec:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ee:	2100      	movs	r1, #0
{
 80067f0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80067f2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80067f6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80067fa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067fc:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8006800:	f024 0401 	bic.w	r4, r4, #1
 8006804:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006806:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006808:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800680a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800680c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006810:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8006814:	bc30      	pop	{r4, r5}
 8006816:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006818:	2002      	movs	r0, #2
}
 800681a:	4770      	bx	lr

0800681c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800681c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8006820:	2a01      	cmp	r2, #1
 8006822:	d037      	beq.n	8006894 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006824:	6802      	ldr	r2, [r0, #0]
 8006826:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006828:	2024      	movs	r0, #36	@ 0x24
{
 800682a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800682c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006830:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006832:	6810      	ldr	r0, [r2, #0]
 8006834:	f020 0001 	bic.w	r0, r0, #1
 8006838:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800683a:	6890      	ldr	r0, [r2, #8]
 800683c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8006840:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006842:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006844:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006846:	b310      	cbz	r0, 800688e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006848:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800684a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006850:	4911      	ldr	r1, [pc, #68]	@ (8006898 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006852:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8006856:	4d11      	ldr	r5, [pc, #68]	@ (800689c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006858:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006860:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006864:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8006866:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800686c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006870:	fbb1 f1f5 	udiv	r1, r1, r5
 8006874:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8006878:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800687a:	2100      	movs	r1, #0
 800687c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006880:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006882:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006884:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8006888:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 800688c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800688e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006890:	4608      	mov	r0, r1
 8006892:	e7ef      	b.n	8006874 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006894:	2002      	movs	r0, #2
}
 8006896:	4770      	bx	lr
 8006898:	08009148 	.word	0x08009148
 800689c:	08009140 	.word	0x08009140

080068a0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80068a0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80068a4:	2a01      	cmp	r2, #1
 80068a6:	d037      	beq.n	8006918 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a8:	6802      	ldr	r2, [r0, #0]
 80068aa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80068ac:	2024      	movs	r0, #36	@ 0x24
{
 80068ae:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b4:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80068b6:	6810      	ldr	r0, [r2, #0]
 80068b8:	f020 0001 	bic.w	r0, r0, #1
 80068bc:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068be:	6890      	ldr	r0, [r2, #8]
 80068c0:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80068c4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068c6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068c8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068ca:	b310      	cbz	r0, 8006912 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068cc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068ce:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068d0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068d4:	4911      	ldr	r1, [pc, #68]	@ (800691c <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068d6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 80068da:	4d11      	ldr	r5, [pc, #68]	@ (8006920 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068dc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068e0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80068e4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068e8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80068ea:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ee:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068f0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068f4:	fbb1 f1f5 	udiv	r1, r1, r5
 80068f8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80068fe:	2100      	movs	r1, #0
 8006900:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006904:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006906:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006908:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800690c:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8006910:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006912:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006914:	4608      	mov	r0, r1
 8006916:	e7ef      	b.n	80068f8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006918:	2002      	movs	r0, #2
}
 800691a:	4770      	bx	lr
 800691c:	08009148 	.word	0x08009148
 8006920:	08009140 	.word	0x08009140

08006924 <__assert_func>:
 8006924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006926:	4614      	mov	r4, r2
 8006928:	461a      	mov	r2, r3
 800692a:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <__assert_func+0x2c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4605      	mov	r5, r0
 8006930:	68d8      	ldr	r0, [r3, #12]
 8006932:	b14c      	cbz	r4, 8006948 <__assert_func+0x24>
 8006934:	4b07      	ldr	r3, [pc, #28]	@ (8006954 <__assert_func+0x30>)
 8006936:	9100      	str	r1, [sp, #0]
 8006938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800693c:	4906      	ldr	r1, [pc, #24]	@ (8006958 <__assert_func+0x34>)
 800693e:	462b      	mov	r3, r5
 8006940:	f000 fe5c 	bl	80075fc <fiprintf>
 8006944:	f000 ffff 	bl	8007946 <abort>
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__assert_func+0x38>)
 800694a:	461c      	mov	r4, r3
 800694c:	e7f3      	b.n	8006936 <__assert_func+0x12>
 800694e:	bf00      	nop
 8006950:	2400001c 	.word	0x2400001c
 8006954:	08009150 	.word	0x08009150
 8006958:	0800915d 	.word	0x0800915d
 800695c:	0800918b 	.word	0x0800918b

08006960 <_calloc_r>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	fba1 5402 	umull	r5, r4, r1, r2
 8006966:	b934      	cbnz	r4, 8006976 <_calloc_r+0x16>
 8006968:	4629      	mov	r1, r5
 800696a:	f000 f837 	bl	80069dc <_malloc_r>
 800696e:	4606      	mov	r6, r0
 8006970:	b928      	cbnz	r0, 800697e <_calloc_r+0x1e>
 8006972:	4630      	mov	r0, r6
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	220c      	movs	r2, #12
 8006978:	6002      	str	r2, [r0, #0]
 800697a:	2600      	movs	r6, #0
 800697c:	e7f9      	b.n	8006972 <_calloc_r+0x12>
 800697e:	462a      	mov	r2, r5
 8006980:	4621      	mov	r1, r4
 8006982:	f000 ff43 	bl	800780c <memset>
 8006986:	e7f4      	b.n	8006972 <_calloc_r+0x12>

08006988 <malloc>:
 8006988:	4b02      	ldr	r3, [pc, #8]	@ (8006994 <malloc+0xc>)
 800698a:	4601      	mov	r1, r0
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	f000 b825 	b.w	80069dc <_malloc_r>
 8006992:	bf00      	nop
 8006994:	2400001c 	.word	0x2400001c

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0f      	ldr	r6, [pc, #60]	@ (80069d8 <sbrk_aligned+0x40>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 ff72 	bl	800788c <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 ff6d 	bl	800788c <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d103      	bne.n	80069be <sbrk_aligned+0x26>
 80069b6:	f04f 34ff 	mov.w	r4, #4294967295
 80069ba:	4620      	mov	r0, r4
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	1cc4      	adds	r4, r0, #3
 80069c0:	f024 0403 	bic.w	r4, r4, #3
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d0f8      	beq.n	80069ba <sbrk_aligned+0x22>
 80069c8:	1a21      	subs	r1, r4, r0
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 ff5e 	bl	800788c <_sbrk_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1f2      	bne.n	80069ba <sbrk_aligned+0x22>
 80069d4:	e7ef      	b.n	80069b6 <sbrk_aligned+0x1e>
 80069d6:	bf00      	nop
 80069d8:	240004a8 	.word	0x240004a8

080069dc <_malloc_r>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	f025 0503 	bic.w	r5, r5, #3
 80069e6:	3508      	adds	r5, #8
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	bf38      	it	cc
 80069ec:	250c      	movcc	r5, #12
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	4606      	mov	r6, r0
 80069f2:	db01      	blt.n	80069f8 <_malloc_r+0x1c>
 80069f4:	42a9      	cmp	r1, r5
 80069f6:	d904      	bls.n	8006a02 <_malloc_r+0x26>
 80069f8:	230c      	movs	r3, #12
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ad8 <_malloc_r+0xfc>
 8006a06:	f000 f869 	bl	8006adc <__malloc_lock>
 8006a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0e:	461c      	mov	r4, r3
 8006a10:	bb44      	cbnz	r4, 8006a64 <_malloc_r+0x88>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7ff ffbf 	bl	8006998 <sbrk_aligned>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	d158      	bne.n	8006ad2 <_malloc_r+0xf6>
 8006a20:	f8d8 4000 	ldr.w	r4, [r8]
 8006a24:	4627      	mov	r7, r4
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d143      	bne.n	8006ab2 <_malloc_r+0xd6>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d04b      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	4639      	mov	r1, r7
 8006a32:	4630      	mov	r0, r6
 8006a34:	eb04 0903 	add.w	r9, r4, r3
 8006a38:	f000 ff28 	bl	800788c <_sbrk_r>
 8006a3c:	4581      	cmp	r9, r0
 8006a3e:	d142      	bne.n	8006ac6 <_malloc_r+0xea>
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	1a6d      	subs	r5, r5, r1
 8006a44:	4629      	mov	r1, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffa6 	bl	8006998 <sbrk_aligned>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d03a      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	442b      	add	r3, r5
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	bb62      	cbnz	r2, 8006ab8 <_malloc_r+0xdc>
 8006a5e:	f8c8 7000 	str.w	r7, [r8]
 8006a62:	e00f      	b.n	8006a84 <_malloc_r+0xa8>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	1b52      	subs	r2, r2, r5
 8006a68:	d420      	bmi.n	8006aac <_malloc_r+0xd0>
 8006a6a:	2a0b      	cmp	r2, #11
 8006a6c:	d917      	bls.n	8006a9e <_malloc_r+0xc2>
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	6025      	str	r5, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	6059      	strne	r1, [r3, #4]
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	bf08      	it	eq
 8006a7c:	f8c8 1000 	streq.w	r1, [r8]
 8006a80:	5162      	str	r2, [r4, r5]
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f82f 	bl	8006ae8 <__malloc_unlock>
 8006a8a:	f104 000b 	add.w	r0, r4, #11
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	f020 0007 	bic.w	r0, r0, #7
 8006a94:	1ac2      	subs	r2, r0, r3
 8006a96:	bf1c      	itt	ne
 8006a98:	1a1b      	subne	r3, r3, r0
 8006a9a:	50a3      	strne	r3, [r4, r2]
 8006a9c:	e7af      	b.n	80069fe <_malloc_r+0x22>
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	bf0c      	ite	eq
 8006aa4:	f8c8 2000 	streq.w	r2, [r8]
 8006aa8:	605a      	strne	r2, [r3, #4]
 8006aaa:	e7eb      	b.n	8006a84 <_malloc_r+0xa8>
 8006aac:	4623      	mov	r3, r4
 8006aae:	6864      	ldr	r4, [r4, #4]
 8006ab0:	e7ae      	b.n	8006a10 <_malloc_r+0x34>
 8006ab2:	463c      	mov	r4, r7
 8006ab4:	687f      	ldr	r7, [r7, #4]
 8006ab6:	e7b6      	b.n	8006a26 <_malloc_r+0x4a>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d1fb      	bne.n	8006ab8 <_malloc_r+0xdc>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e7de      	b.n	8006a84 <_malloc_r+0xa8>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f80c 	bl	8006ae8 <__malloc_unlock>
 8006ad0:	e794      	b.n	80069fc <_malloc_r+0x20>
 8006ad2:	6005      	str	r5, [r0, #0]
 8006ad4:	e7d6      	b.n	8006a84 <_malloc_r+0xa8>
 8006ad6:	bf00      	nop
 8006ad8:	240004ac 	.word	0x240004ac

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f000 bf22 	b.w	8007926 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	240005f0 	.word	0x240005f0

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f000 bf1d 	b.w	8007928 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	240005f0 	.word	0x240005f0

08006af4 <__cvt>:
 8006af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006af6:	ed2d 8b02 	vpush	{d8}
 8006afa:	eeb0 8b40 	vmov.f64	d8, d0
 8006afe:	b085      	sub	sp, #20
 8006b00:	4617      	mov	r7, r2
 8006b02:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006b04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b06:	ee18 2a90 	vmov	r2, s17
 8006b0a:	f025 0520 	bic.w	r5, r5, #32
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	bfb6      	itet	lt
 8006b12:	222d      	movlt	r2, #45	@ 0x2d
 8006b14:	2200      	movge	r2, #0
 8006b16:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b1a:	2d46      	cmp	r5, #70	@ 0x46
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	d004      	beq.n	8006b2c <__cvt+0x38>
 8006b22:	2d45      	cmp	r5, #69	@ 0x45
 8006b24:	d100      	bne.n	8006b28 <__cvt+0x34>
 8006b26:	3401      	adds	r4, #1
 8006b28:	2102      	movs	r1, #2
 8006b2a:	e000      	b.n	8006b2e <__cvt+0x3a>
 8006b2c:	2103      	movs	r1, #3
 8006b2e:	ab03      	add	r3, sp, #12
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	ab02      	add	r3, sp, #8
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4622      	mov	r2, r4
 8006b38:	4633      	mov	r3, r6
 8006b3a:	eeb0 0b48 	vmov.f64	d0, d8
 8006b3e:	f000 ff93 	bl	8007a68 <_dtoa_r>
 8006b42:	2d47      	cmp	r5, #71	@ 0x47
 8006b44:	d114      	bne.n	8006b70 <__cvt+0x7c>
 8006b46:	07fb      	lsls	r3, r7, #31
 8006b48:	d50a      	bpl.n	8006b60 <__cvt+0x6c>
 8006b4a:	1902      	adds	r2, r0, r4
 8006b4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b54:	bf08      	it	eq
 8006b56:	9203      	streq	r2, [sp, #12]
 8006b58:	2130      	movs	r1, #48	@ 0x30
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d319      	bcc.n	8006b94 <__cvt+0xa0>
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b64:	1a1b      	subs	r3, r3, r0
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	b005      	add	sp, #20
 8006b6a:	ecbd 8b02 	vpop	{d8}
 8006b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b70:	2d46      	cmp	r5, #70	@ 0x46
 8006b72:	eb00 0204 	add.w	r2, r0, r4
 8006b76:	d1e9      	bne.n	8006b4c <__cvt+0x58>
 8006b78:	7803      	ldrb	r3, [r0, #0]
 8006b7a:	2b30      	cmp	r3, #48	@ 0x30
 8006b7c:	d107      	bne.n	8006b8e <__cvt+0x9a>
 8006b7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b86:	bf1c      	itt	ne
 8006b88:	f1c4 0401 	rsbne	r4, r4, #1
 8006b8c:	6034      	strne	r4, [r6, #0]
 8006b8e:	6833      	ldr	r3, [r6, #0]
 8006b90:	441a      	add	r2, r3
 8006b92:	e7db      	b.n	8006b4c <__cvt+0x58>
 8006b94:	1c5c      	adds	r4, r3, #1
 8006b96:	9403      	str	r4, [sp, #12]
 8006b98:	7019      	strb	r1, [r3, #0]
 8006b9a:	e7de      	b.n	8006b5a <__cvt+0x66>

08006b9c <__exponent>:
 8006b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	bfba      	itte	lt
 8006ba2:	4249      	neglt	r1, r1
 8006ba4:	232d      	movlt	r3, #45	@ 0x2d
 8006ba6:	232b      	movge	r3, #43	@ 0x2b
 8006ba8:	2909      	cmp	r1, #9
 8006baa:	7002      	strb	r2, [r0, #0]
 8006bac:	7043      	strb	r3, [r0, #1]
 8006bae:	dd29      	ble.n	8006c04 <__exponent+0x68>
 8006bb0:	f10d 0307 	add.w	r3, sp, #7
 8006bb4:	461d      	mov	r5, r3
 8006bb6:	270a      	movs	r7, #10
 8006bb8:	461a      	mov	r2, r3
 8006bba:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bbe:	fb07 1416 	mls	r4, r7, r6, r1
 8006bc2:	3430      	adds	r4, #48	@ 0x30
 8006bc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bc8:	460c      	mov	r4, r1
 8006bca:	2c63      	cmp	r4, #99	@ 0x63
 8006bcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	dcf1      	bgt.n	8006bb8 <__exponent+0x1c>
 8006bd4:	3130      	adds	r1, #48	@ 0x30
 8006bd6:	1e94      	subs	r4, r2, #2
 8006bd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bdc:	1c41      	adds	r1, r0, #1
 8006bde:	4623      	mov	r3, r4
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	d30a      	bcc.n	8006bfa <__exponent+0x5e>
 8006be4:	f10d 0309 	add.w	r3, sp, #9
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	42ac      	cmp	r4, r5
 8006bec:	bf88      	it	hi
 8006bee:	2300      	movhi	r3, #0
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	4403      	add	r3, r0
 8006bf4:	1a18      	subs	r0, r3, r0
 8006bf6:	b003      	add	sp, #12
 8006bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c02:	e7ed      	b.n	8006be0 <__exponent+0x44>
 8006c04:	2330      	movs	r3, #48	@ 0x30
 8006c06:	3130      	adds	r1, #48	@ 0x30
 8006c08:	7083      	strb	r3, [r0, #2]
 8006c0a:	70c1      	strb	r1, [r0, #3]
 8006c0c:	1d03      	adds	r3, r0, #4
 8006c0e:	e7f1      	b.n	8006bf4 <__exponent+0x58>

08006c10 <_printf_float>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	b08d      	sub	sp, #52	@ 0x34
 8006c16:	460c      	mov	r4, r1
 8006c18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	461f      	mov	r7, r3
 8006c20:	4605      	mov	r5, r0
 8006c22:	f000 fdfb 	bl	800781c <_localeconv_r>
 8006c26:	f8d0 b000 	ldr.w	fp, [r0]
 8006c2a:	4658      	mov	r0, fp
 8006c2c:	f7f9 fba8 	bl	8000380 <strlen>
 8006c30:	2300      	movs	r3, #0
 8006c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c34:	f8d8 3000 	ldr.w	r3, [r8]
 8006c38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	9005      	str	r0, [sp, #20]
 8006c40:	3307      	adds	r3, #7
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	f103 0108 	add.w	r1, r3, #8
 8006c4a:	f8c8 1000 	str.w	r1, [r8]
 8006c4e:	ed93 0b00 	vldr	d0, [r3]
 8006c52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006eb0 <_printf_float+0x2a0>
 8006c56:	eeb0 7bc0 	vabs.f64	d7, d0
 8006c5a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006c66:	dd24      	ble.n	8006cb2 <_printf_float+0xa2>
 8006c68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	d502      	bpl.n	8006c78 <_printf_float+0x68>
 8006c72:	232d      	movs	r3, #45	@ 0x2d
 8006c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c78:	498f      	ldr	r1, [pc, #572]	@ (8006eb8 <_printf_float+0x2a8>)
 8006c7a:	4b90      	ldr	r3, [pc, #576]	@ (8006ebc <_printf_float+0x2ac>)
 8006c7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006c80:	bf8c      	ite	hi
 8006c82:	4688      	movhi	r8, r1
 8006c84:	4698      	movls	r8, r3
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	9700      	str	r7, [sp, #0]
 8006c96:	4633      	mov	r3, r6
 8006c98:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 f9d1 	bl	8007044 <_printf_common>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f040 8089 	bne.w	8006dba <_printf_float+0x1aa>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	b00d      	add	sp, #52	@ 0x34
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	eeb4 0b40 	vcmp.f64	d0, d0
 8006cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cba:	d709      	bvc.n	8006cd0 <_printf_float+0xc0>
 8006cbc:	ee10 3a90 	vmov	r3, s1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfbc      	itt	lt
 8006cc4:	232d      	movlt	r3, #45	@ 0x2d
 8006cc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cca:	497d      	ldr	r1, [pc, #500]	@ (8006ec0 <_printf_float+0x2b0>)
 8006ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec4 <_printf_float+0x2b4>)
 8006cce:	e7d5      	b.n	8006c7c <_printf_float+0x6c>
 8006cd0:	6863      	ldr	r3, [r4, #4]
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006cd8:	d139      	bne.n	8006d4e <_printf_float+0x13e>
 8006cda:	2306      	movs	r3, #6
 8006cdc:	6063      	str	r3, [r4, #4]
 8006cde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6022      	str	r2, [r4, #0]
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006cee:	ab09      	add	r3, sp, #36	@ 0x24
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	6861      	ldr	r1, [r4, #4]
 8006cf4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f7ff fefb 	bl	8006af4 <__cvt>
 8006cfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d04:	4680      	mov	r8, r0
 8006d06:	d129      	bne.n	8006d5c <_printf_float+0x14c>
 8006d08:	1cc8      	adds	r0, r1, #3
 8006d0a:	db02      	blt.n	8006d12 <_printf_float+0x102>
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	dd41      	ble.n	8006d96 <_printf_float+0x186>
 8006d12:	f1a9 0902 	sub.w	r9, r9, #2
 8006d16:	fa5f f989 	uxtb.w	r9, r9
 8006d1a:	3901      	subs	r1, #1
 8006d1c:	464a      	mov	r2, r9
 8006d1e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d24:	f7ff ff3a 	bl	8006b9c <__exponent>
 8006d28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d2a:	1813      	adds	r3, r2, r0
 8006d2c:	2a01      	cmp	r2, #1
 8006d2e:	4682      	mov	sl, r0
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	dc02      	bgt.n	8006d3a <_printf_float+0x12a>
 8006d34:	6822      	ldr	r2, [r4, #0]
 8006d36:	07d2      	lsls	r2, r2, #31
 8006d38:	d501      	bpl.n	8006d3e <_printf_float+0x12e>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0a6      	beq.n	8006c94 <_printf_float+0x84>
 8006d46:	232d      	movs	r3, #45	@ 0x2d
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4c:	e7a2      	b.n	8006c94 <_printf_float+0x84>
 8006d4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d52:	d1c4      	bne.n	8006cde <_printf_float+0xce>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1c2      	bne.n	8006cde <_printf_float+0xce>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7bf      	b.n	8006cdc <_printf_float+0xcc>
 8006d5c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d60:	d9db      	bls.n	8006d1a <_printf_float+0x10a>
 8006d62:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006d66:	d118      	bne.n	8006d9a <_printf_float+0x18a>
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	dd0b      	ble.n	8006d86 <_printf_float+0x176>
 8006d6e:	6121      	str	r1, [r4, #16]
 8006d70:	b913      	cbnz	r3, 8006d78 <_printf_float+0x168>
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	07d0      	lsls	r0, r2, #31
 8006d76:	d502      	bpl.n	8006d7e <_printf_float+0x16e>
 8006d78:	3301      	adds	r3, #1
 8006d7a:	440b      	add	r3, r1
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d80:	f04f 0a00 	mov.w	sl, #0
 8006d84:	e7db      	b.n	8006d3e <_printf_float+0x12e>
 8006d86:	b913      	cbnz	r3, 8006d8e <_printf_float+0x17e>
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	07d2      	lsls	r2, r2, #31
 8006d8c:	d501      	bpl.n	8006d92 <_printf_float+0x182>
 8006d8e:	3302      	adds	r3, #2
 8006d90:	e7f4      	b.n	8006d7c <_printf_float+0x16c>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7f2      	b.n	8006d7c <_printf_float+0x16c>
 8006d96:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	db05      	blt.n	8006dac <_printf_float+0x19c>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	6121      	str	r1, [r4, #16]
 8006da4:	07d8      	lsls	r0, r3, #31
 8006da6:	d5ea      	bpl.n	8006d7e <_printf_float+0x16e>
 8006da8:	1c4b      	adds	r3, r1, #1
 8006daa:	e7e7      	b.n	8006d7c <_printf_float+0x16c>
 8006dac:	2900      	cmp	r1, #0
 8006dae:	bfd4      	ite	le
 8006db0:	f1c1 0202 	rsble	r2, r1, #2
 8006db4:	2201      	movgt	r2, #1
 8006db6:	4413      	add	r3, r2
 8006db8:	e7e0      	b.n	8006d7c <_printf_float+0x16c>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	055a      	lsls	r2, r3, #21
 8006dbe:	d407      	bmi.n	8006dd0 <_printf_float+0x1c0>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	47b8      	blx	r7
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d12a      	bne.n	8006e24 <_printf_float+0x214>
 8006dce:	e76b      	b.n	8006ca8 <_printf_float+0x98>
 8006dd0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006dd4:	f240 80e0 	bls.w	8006f98 <_printf_float+0x388>
 8006dd8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006ddc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	d133      	bne.n	8006e4e <_printf_float+0x23e>
 8006de6:	4a38      	ldr	r2, [pc, #224]	@ (8006ec8 <_printf_float+0x2b8>)
 8006de8:	2301      	movs	r3, #1
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f af59 	beq.w	8006ca8 <_printf_float+0x98>
 8006df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dfa:	4543      	cmp	r3, r8
 8006dfc:	db02      	blt.n	8006e04 <_printf_float+0x1f4>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	07d8      	lsls	r0, r3, #31
 8006e02:	d50f      	bpl.n	8006e24 <_printf_float+0x214>
 8006e04:	9b05      	ldr	r3, [sp, #20]
 8006e06:	465a      	mov	r2, fp
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af4a 	beq.w	8006ca8 <_printf_float+0x98>
 8006e14:	f04f 0900 	mov.w	r9, #0
 8006e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e1c:	f104 0a1a 	add.w	sl, r4, #26
 8006e20:	45c8      	cmp	r8, r9
 8006e22:	dc09      	bgt.n	8006e38 <_printf_float+0x228>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	079b      	lsls	r3, r3, #30
 8006e28:	f100 8107 	bmi.w	800703a <_printf_float+0x42a>
 8006e2c:	68e0      	ldr	r0, [r4, #12]
 8006e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e30:	4298      	cmp	r0, r3
 8006e32:	bfb8      	it	lt
 8006e34:	4618      	movlt	r0, r3
 8006e36:	e739      	b.n	8006cac <_printf_float+0x9c>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af30 	beq.w	8006ca8 <_printf_float+0x98>
 8006e48:	f109 0901 	add.w	r9, r9, #1
 8006e4c:	e7e8      	b.n	8006e20 <_printf_float+0x210>
 8006e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dc3b      	bgt.n	8006ecc <_printf_float+0x2bc>
 8006e54:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec8 <_printf_float+0x2b8>)
 8006e56:	2301      	movs	r3, #1
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af22 	beq.w	8006ca8 <_printf_float+0x98>
 8006e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e68:	ea59 0303 	orrs.w	r3, r9, r3
 8006e6c:	d102      	bne.n	8006e74 <_printf_float+0x264>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	07d9      	lsls	r1, r3, #31
 8006e72:	d5d7      	bpl.n	8006e24 <_printf_float+0x214>
 8006e74:	9b05      	ldr	r3, [sp, #20]
 8006e76:	465a      	mov	r2, fp
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f af12 	beq.w	8006ca8 <_printf_float+0x98>
 8006e84:	f04f 0a00 	mov.w	sl, #0
 8006e88:	f104 0b1a 	add.w	fp, r4, #26
 8006e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8e:	425b      	negs	r3, r3
 8006e90:	4553      	cmp	r3, sl
 8006e92:	dc01      	bgt.n	8006e98 <_printf_float+0x288>
 8006e94:	464b      	mov	r3, r9
 8006e96:	e794      	b.n	8006dc2 <_printf_float+0x1b2>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	465a      	mov	r2, fp
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f af00 	beq.w	8006ca8 <_printf_float+0x98>
 8006ea8:	f10a 0a01 	add.w	sl, sl, #1
 8006eac:	e7ee      	b.n	8006e8c <_printf_float+0x27c>
 8006eae:	bf00      	nop
 8006eb0:	ffffffff 	.word	0xffffffff
 8006eb4:	7fefffff 	.word	0x7fefffff
 8006eb8:	08009190 	.word	0x08009190
 8006ebc:	0800918c 	.word	0x0800918c
 8006ec0:	08009198 	.word	0x08009198
 8006ec4:	08009194 	.word	0x08009194
 8006ec8:	0800919c 	.word	0x0800919c
 8006ecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ece:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ed2:	4553      	cmp	r3, sl
 8006ed4:	bfa8      	it	ge
 8006ed6:	4653      	movge	r3, sl
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	4699      	mov	r9, r3
 8006edc:	dc37      	bgt.n	8006f4e <_printf_float+0x33e>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee6:	f104 021a 	add.w	r2, r4, #26
 8006eea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eec:	9907      	ldr	r1, [sp, #28]
 8006eee:	9306      	str	r3, [sp, #24]
 8006ef0:	eba3 0309 	sub.w	r3, r3, r9
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	dc31      	bgt.n	8006f5c <_printf_float+0x34c>
 8006ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efa:	459a      	cmp	sl, r3
 8006efc:	dc3b      	bgt.n	8006f76 <_printf_float+0x366>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	07da      	lsls	r2, r3, #31
 8006f02:	d438      	bmi.n	8006f76 <_printf_float+0x366>
 8006f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f06:	ebaa 0903 	sub.w	r9, sl, r3
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f10:	4599      	cmp	r9, r3
 8006f12:	bfa8      	it	ge
 8006f14:	4699      	movge	r9, r3
 8006f16:	f1b9 0f00 	cmp.w	r9, #0
 8006f1a:	dc34      	bgt.n	8006f86 <_printf_float+0x376>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f24:	f104 0b1a 	add.w	fp, r4, #26
 8006f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2a:	ebaa 0303 	sub.w	r3, sl, r3
 8006f2e:	eba3 0309 	sub.w	r3, r3, r9
 8006f32:	4543      	cmp	r3, r8
 8006f34:	f77f af76 	ble.w	8006e24 <_printf_float+0x214>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	465a      	mov	r2, fp
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f aeb0 	beq.w	8006ca8 <_printf_float+0x98>
 8006f48:	f108 0801 	add.w	r8, r8, #1
 8006f4c:	e7ec      	b.n	8006f28 <_printf_float+0x318>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	d1c1      	bne.n	8006ede <_printf_float+0x2ce>
 8006f5a:	e6a5      	b.n	8006ca8 <_printf_float+0x98>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	9206      	str	r2, [sp, #24]
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f ae9e 	beq.w	8006ca8 <_printf_float+0x98>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	9a06      	ldr	r2, [sp, #24]
 8006f70:	3301      	adds	r3, #1
 8006f72:	9307      	str	r3, [sp, #28]
 8006f74:	e7b9      	b.n	8006eea <_printf_float+0x2da>
 8006f76:	9b05      	ldr	r3, [sp, #20]
 8006f78:	465a      	mov	r2, fp
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	d1bf      	bne.n	8006f04 <_printf_float+0x2f4>
 8006f84:	e690      	b.n	8006ca8 <_printf_float+0x98>
 8006f86:	9a06      	ldr	r2, [sp, #24]
 8006f88:	464b      	mov	r3, r9
 8006f8a:	4442      	add	r2, r8
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4628      	mov	r0, r5
 8006f90:	47b8      	blx	r7
 8006f92:	3001      	adds	r0, #1
 8006f94:	d1c2      	bne.n	8006f1c <_printf_float+0x30c>
 8006f96:	e687      	b.n	8006ca8 <_printf_float+0x98>
 8006f98:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006f9c:	f1b9 0f01 	cmp.w	r9, #1
 8006fa0:	dc01      	bgt.n	8006fa6 <_printf_float+0x396>
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d536      	bpl.n	8007014 <_printf_float+0x404>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae79 	beq.w	8006ca8 <_printf_float+0x98>
 8006fb6:	9b05      	ldr	r3, [sp, #20]
 8006fb8:	465a      	mov	r2, fp
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae71 	beq.w	8006ca8 <_printf_float+0x98>
 8006fc6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006fca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fd6:	d018      	beq.n	800700a <_printf_float+0x3fa>
 8006fd8:	464b      	mov	r3, r9
 8006fda:	f108 0201 	add.w	r2, r8, #1
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d10c      	bne.n	8007002 <_printf_float+0x3f2>
 8006fe8:	e65e      	b.n	8006ca8 <_printf_float+0x98>
 8006fea:	2301      	movs	r3, #1
 8006fec:	465a      	mov	r2, fp
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	f43f ae57 	beq.w	8006ca8 <_printf_float+0x98>
 8006ffa:	f108 0801 	add.w	r8, r8, #1
 8006ffe:	45c8      	cmp	r8, r9
 8007000:	dbf3      	blt.n	8006fea <_printf_float+0x3da>
 8007002:	4653      	mov	r3, sl
 8007004:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007008:	e6dc      	b.n	8006dc4 <_printf_float+0x1b4>
 800700a:	f04f 0800 	mov.w	r8, #0
 800700e:	f104 0b1a 	add.w	fp, r4, #26
 8007012:	e7f4      	b.n	8006ffe <_printf_float+0x3ee>
 8007014:	2301      	movs	r3, #1
 8007016:	4642      	mov	r2, r8
 8007018:	e7e1      	b.n	8006fde <_printf_float+0x3ce>
 800701a:	2301      	movs	r3, #1
 800701c:	464a      	mov	r2, r9
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	47b8      	blx	r7
 8007024:	3001      	adds	r0, #1
 8007026:	f43f ae3f 	beq.w	8006ca8 <_printf_float+0x98>
 800702a:	f108 0801 	add.w	r8, r8, #1
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007032:	1a5b      	subs	r3, r3, r1
 8007034:	4543      	cmp	r3, r8
 8007036:	dcf0      	bgt.n	800701a <_printf_float+0x40a>
 8007038:	e6f8      	b.n	8006e2c <_printf_float+0x21c>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	f104 0919 	add.w	r9, r4, #25
 8007042:	e7f4      	b.n	800702e <_printf_float+0x41e>

08007044 <_printf_common>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	4616      	mov	r6, r2
 800704a:	4698      	mov	r8, r3
 800704c:	688a      	ldr	r2, [r1, #8]
 800704e:	690b      	ldr	r3, [r1, #16]
 8007050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007054:	4293      	cmp	r3, r2
 8007056:	bfb8      	it	lt
 8007058:	4613      	movlt	r3, r2
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007060:	4607      	mov	r7, r0
 8007062:	460c      	mov	r4, r1
 8007064:	b10a      	cbz	r2, 800706a <_printf_common+0x26>
 8007066:	3301      	adds	r3, #1
 8007068:	6033      	str	r3, [r6, #0]
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	0699      	lsls	r1, r3, #26
 800706e:	bf42      	ittt	mi
 8007070:	6833      	ldrmi	r3, [r6, #0]
 8007072:	3302      	addmi	r3, #2
 8007074:	6033      	strmi	r3, [r6, #0]
 8007076:	6825      	ldr	r5, [r4, #0]
 8007078:	f015 0506 	ands.w	r5, r5, #6
 800707c:	d106      	bne.n	800708c <_printf_common+0x48>
 800707e:	f104 0a19 	add.w	sl, r4, #25
 8007082:	68e3      	ldr	r3, [r4, #12]
 8007084:	6832      	ldr	r2, [r6, #0]
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	42ab      	cmp	r3, r5
 800708a:	dc26      	bgt.n	80070da <_printf_common+0x96>
 800708c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	3b00      	subs	r3, #0
 8007094:	bf18      	it	ne
 8007096:	2301      	movne	r3, #1
 8007098:	0692      	lsls	r2, r2, #26
 800709a:	d42b      	bmi.n	80070f4 <_printf_common+0xb0>
 800709c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070a0:	4641      	mov	r1, r8
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c8      	blx	r9
 80070a6:	3001      	adds	r0, #1
 80070a8:	d01e      	beq.n	80070e8 <_printf_common+0xa4>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	6922      	ldr	r2, [r4, #16]
 80070ae:	f003 0306 	and.w	r3, r3, #6
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	bf02      	ittt	eq
 80070b6:	68e5      	ldreq	r5, [r4, #12]
 80070b8:	6833      	ldreq	r3, [r6, #0]
 80070ba:	1aed      	subeq	r5, r5, r3
 80070bc:	68a3      	ldr	r3, [r4, #8]
 80070be:	bf0c      	ite	eq
 80070c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c4:	2500      	movne	r5, #0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	bfc4      	itt	gt
 80070ca:	1a9b      	subgt	r3, r3, r2
 80070cc:	18ed      	addgt	r5, r5, r3
 80070ce:	2600      	movs	r6, #0
 80070d0:	341a      	adds	r4, #26
 80070d2:	42b5      	cmp	r5, r6
 80070d4:	d11a      	bne.n	800710c <_printf_common+0xc8>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e008      	b.n	80070ec <_printf_common+0xa8>
 80070da:	2301      	movs	r3, #1
 80070dc:	4652      	mov	r2, sl
 80070de:	4641      	mov	r1, r8
 80070e0:	4638      	mov	r0, r7
 80070e2:	47c8      	blx	r9
 80070e4:	3001      	adds	r0, #1
 80070e6:	d103      	bne.n	80070f0 <_printf_common+0xac>
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	3501      	adds	r5, #1
 80070f2:	e7c6      	b.n	8007082 <_printf_common+0x3e>
 80070f4:	18e1      	adds	r1, r4, r3
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	2030      	movs	r0, #48	@ 0x30
 80070fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070fe:	4422      	add	r2, r4
 8007100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007108:	3302      	adds	r3, #2
 800710a:	e7c7      	b.n	800709c <_printf_common+0x58>
 800710c:	2301      	movs	r3, #1
 800710e:	4622      	mov	r2, r4
 8007110:	4641      	mov	r1, r8
 8007112:	4638      	mov	r0, r7
 8007114:	47c8      	blx	r9
 8007116:	3001      	adds	r0, #1
 8007118:	d0e6      	beq.n	80070e8 <_printf_common+0xa4>
 800711a:	3601      	adds	r6, #1
 800711c:	e7d9      	b.n	80070d2 <_printf_common+0x8e>
	...

08007120 <_printf_i>:
 8007120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	7e0f      	ldrb	r7, [r1, #24]
 8007126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007128:	2f78      	cmp	r7, #120	@ 0x78
 800712a:	4691      	mov	r9, r2
 800712c:	4680      	mov	r8, r0
 800712e:	460c      	mov	r4, r1
 8007130:	469a      	mov	sl, r3
 8007132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007136:	d807      	bhi.n	8007148 <_printf_i+0x28>
 8007138:	2f62      	cmp	r7, #98	@ 0x62
 800713a:	d80a      	bhi.n	8007152 <_printf_i+0x32>
 800713c:	2f00      	cmp	r7, #0
 800713e:	f000 80d1 	beq.w	80072e4 <_printf_i+0x1c4>
 8007142:	2f58      	cmp	r7, #88	@ 0x58
 8007144:	f000 80b8 	beq.w	80072b8 <_printf_i+0x198>
 8007148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800714c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007150:	e03a      	b.n	80071c8 <_printf_i+0xa8>
 8007152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007156:	2b15      	cmp	r3, #21
 8007158:	d8f6      	bhi.n	8007148 <_printf_i+0x28>
 800715a:	a101      	add	r1, pc, #4	@ (adr r1, 8007160 <_printf_i+0x40>)
 800715c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071cd 	.word	0x080071cd
 8007168:	08007149 	.word	0x08007149
 800716c:	08007149 	.word	0x08007149
 8007170:	08007149 	.word	0x08007149
 8007174:	08007149 	.word	0x08007149
 8007178:	080071cd 	.word	0x080071cd
 800717c:	08007149 	.word	0x08007149
 8007180:	08007149 	.word	0x08007149
 8007184:	08007149 	.word	0x08007149
 8007188:	08007149 	.word	0x08007149
 800718c:	080072cb 	.word	0x080072cb
 8007190:	080071f7 	.word	0x080071f7
 8007194:	08007285 	.word	0x08007285
 8007198:	08007149 	.word	0x08007149
 800719c:	08007149 	.word	0x08007149
 80071a0:	080072ed 	.word	0x080072ed
 80071a4:	08007149 	.word	0x08007149
 80071a8:	080071f7 	.word	0x080071f7
 80071ac:	08007149 	.word	0x08007149
 80071b0:	08007149 	.word	0x08007149
 80071b4:	0800728d 	.word	0x0800728d
 80071b8:	6833      	ldr	r3, [r6, #0]
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6032      	str	r2, [r6, #0]
 80071c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071c8:	2301      	movs	r3, #1
 80071ca:	e09c      	b.n	8007306 <_printf_i+0x1e6>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	1d19      	adds	r1, r3, #4
 80071d2:	6031      	str	r1, [r6, #0]
 80071d4:	0606      	lsls	r6, r0, #24
 80071d6:	d501      	bpl.n	80071dc <_printf_i+0xbc>
 80071d8:	681d      	ldr	r5, [r3, #0]
 80071da:	e003      	b.n	80071e4 <_printf_i+0xc4>
 80071dc:	0645      	lsls	r5, r0, #25
 80071de:	d5fb      	bpl.n	80071d8 <_printf_i+0xb8>
 80071e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	da03      	bge.n	80071f0 <_printf_i+0xd0>
 80071e8:	232d      	movs	r3, #45	@ 0x2d
 80071ea:	426d      	negs	r5, r5
 80071ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f0:	4858      	ldr	r0, [pc, #352]	@ (8007354 <_printf_i+0x234>)
 80071f2:	230a      	movs	r3, #10
 80071f4:	e011      	b.n	800721a <_printf_i+0xfa>
 80071f6:	6821      	ldr	r1, [r4, #0]
 80071f8:	6833      	ldr	r3, [r6, #0]
 80071fa:	0608      	lsls	r0, r1, #24
 80071fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007200:	d402      	bmi.n	8007208 <_printf_i+0xe8>
 8007202:	0649      	lsls	r1, r1, #25
 8007204:	bf48      	it	mi
 8007206:	b2ad      	uxthmi	r5, r5
 8007208:	2f6f      	cmp	r7, #111	@ 0x6f
 800720a:	4852      	ldr	r0, [pc, #328]	@ (8007354 <_printf_i+0x234>)
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	bf14      	ite	ne
 8007210:	230a      	movne	r3, #10
 8007212:	2308      	moveq	r3, #8
 8007214:	2100      	movs	r1, #0
 8007216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800721a:	6866      	ldr	r6, [r4, #4]
 800721c:	60a6      	str	r6, [r4, #8]
 800721e:	2e00      	cmp	r6, #0
 8007220:	db05      	blt.n	800722e <_printf_i+0x10e>
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	432e      	orrs	r6, r5
 8007226:	f021 0104 	bic.w	r1, r1, #4
 800722a:	6021      	str	r1, [r4, #0]
 800722c:	d04b      	beq.n	80072c6 <_printf_i+0x1a6>
 800722e:	4616      	mov	r6, r2
 8007230:	fbb5 f1f3 	udiv	r1, r5, r3
 8007234:	fb03 5711 	mls	r7, r3, r1, r5
 8007238:	5dc7      	ldrb	r7, [r0, r7]
 800723a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800723e:	462f      	mov	r7, r5
 8007240:	42bb      	cmp	r3, r7
 8007242:	460d      	mov	r5, r1
 8007244:	d9f4      	bls.n	8007230 <_printf_i+0x110>
 8007246:	2b08      	cmp	r3, #8
 8007248:	d10b      	bne.n	8007262 <_printf_i+0x142>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	07df      	lsls	r7, r3, #31
 800724e:	d508      	bpl.n	8007262 <_printf_i+0x142>
 8007250:	6923      	ldr	r3, [r4, #16]
 8007252:	6861      	ldr	r1, [r4, #4]
 8007254:	4299      	cmp	r1, r3
 8007256:	bfde      	ittt	le
 8007258:	2330      	movle	r3, #48	@ 0x30
 800725a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800725e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007262:	1b92      	subs	r2, r2, r6
 8007264:	6122      	str	r2, [r4, #16]
 8007266:	f8cd a000 	str.w	sl, [sp]
 800726a:	464b      	mov	r3, r9
 800726c:	aa03      	add	r2, sp, #12
 800726e:	4621      	mov	r1, r4
 8007270:	4640      	mov	r0, r8
 8007272:	f7ff fee7 	bl	8007044 <_printf_common>
 8007276:	3001      	adds	r0, #1
 8007278:	d14a      	bne.n	8007310 <_printf_i+0x1f0>
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	b004      	add	sp, #16
 8007280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	f043 0320 	orr.w	r3, r3, #32
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	4832      	ldr	r0, [pc, #200]	@ (8007358 <_printf_i+0x238>)
 800728e:	2778      	movs	r7, #120	@ 0x78
 8007290:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	6831      	ldr	r1, [r6, #0]
 8007298:	061f      	lsls	r7, r3, #24
 800729a:	f851 5b04 	ldr.w	r5, [r1], #4
 800729e:	d402      	bmi.n	80072a6 <_printf_i+0x186>
 80072a0:	065f      	lsls	r7, r3, #25
 80072a2:	bf48      	it	mi
 80072a4:	b2ad      	uxthmi	r5, r5
 80072a6:	6031      	str	r1, [r6, #0]
 80072a8:	07d9      	lsls	r1, r3, #31
 80072aa:	bf44      	itt	mi
 80072ac:	f043 0320 	orrmi.w	r3, r3, #32
 80072b0:	6023      	strmi	r3, [r4, #0]
 80072b2:	b11d      	cbz	r5, 80072bc <_printf_i+0x19c>
 80072b4:	2310      	movs	r3, #16
 80072b6:	e7ad      	b.n	8007214 <_printf_i+0xf4>
 80072b8:	4826      	ldr	r0, [pc, #152]	@ (8007354 <_printf_i+0x234>)
 80072ba:	e7e9      	b.n	8007290 <_printf_i+0x170>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	e7f6      	b.n	80072b4 <_printf_i+0x194>
 80072c6:	4616      	mov	r6, r2
 80072c8:	e7bd      	b.n	8007246 <_printf_i+0x126>
 80072ca:	6833      	ldr	r3, [r6, #0]
 80072cc:	6825      	ldr	r5, [r4, #0]
 80072ce:	6961      	ldr	r1, [r4, #20]
 80072d0:	1d18      	adds	r0, r3, #4
 80072d2:	6030      	str	r0, [r6, #0]
 80072d4:	062e      	lsls	r6, r5, #24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	d501      	bpl.n	80072de <_printf_i+0x1be>
 80072da:	6019      	str	r1, [r3, #0]
 80072dc:	e002      	b.n	80072e4 <_printf_i+0x1c4>
 80072de:	0668      	lsls	r0, r5, #25
 80072e0:	d5fb      	bpl.n	80072da <_printf_i+0x1ba>
 80072e2:	8019      	strh	r1, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	4616      	mov	r6, r2
 80072ea:	e7bc      	b.n	8007266 <_printf_i+0x146>
 80072ec:	6833      	ldr	r3, [r6, #0]
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	6032      	str	r2, [r6, #0]
 80072f2:	681e      	ldr	r6, [r3, #0]
 80072f4:	6862      	ldr	r2, [r4, #4]
 80072f6:	2100      	movs	r1, #0
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7f8 fff1 	bl	80002e0 <memchr>
 80072fe:	b108      	cbz	r0, 8007304 <_printf_i+0x1e4>
 8007300:	1b80      	subs	r0, r0, r6
 8007302:	6060      	str	r0, [r4, #4]
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	2300      	movs	r3, #0
 800730a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800730e:	e7aa      	b.n	8007266 <_printf_i+0x146>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	4632      	mov	r2, r6
 8007314:	4649      	mov	r1, r9
 8007316:	4640      	mov	r0, r8
 8007318:	47d0      	blx	sl
 800731a:	3001      	adds	r0, #1
 800731c:	d0ad      	beq.n	800727a <_printf_i+0x15a>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	079b      	lsls	r3, r3, #30
 8007322:	d413      	bmi.n	800734c <_printf_i+0x22c>
 8007324:	68e0      	ldr	r0, [r4, #12]
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	4298      	cmp	r0, r3
 800732a:	bfb8      	it	lt
 800732c:	4618      	movlt	r0, r3
 800732e:	e7a6      	b.n	800727e <_printf_i+0x15e>
 8007330:	2301      	movs	r3, #1
 8007332:	4632      	mov	r2, r6
 8007334:	4649      	mov	r1, r9
 8007336:	4640      	mov	r0, r8
 8007338:	47d0      	blx	sl
 800733a:	3001      	adds	r0, #1
 800733c:	d09d      	beq.n	800727a <_printf_i+0x15a>
 800733e:	3501      	adds	r5, #1
 8007340:	68e3      	ldr	r3, [r4, #12]
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	1a5b      	subs	r3, r3, r1
 8007346:	42ab      	cmp	r3, r5
 8007348:	dcf2      	bgt.n	8007330 <_printf_i+0x210>
 800734a:	e7eb      	b.n	8007324 <_printf_i+0x204>
 800734c:	2500      	movs	r5, #0
 800734e:	f104 0619 	add.w	r6, r4, #25
 8007352:	e7f5      	b.n	8007340 <_printf_i+0x220>
 8007354:	0800919e 	.word	0x0800919e
 8007358:	080091af 	.word	0x080091af

0800735c <__sflush_r>:
 800735c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007364:	0716      	lsls	r6, r2, #28
 8007366:	4605      	mov	r5, r0
 8007368:	460c      	mov	r4, r1
 800736a:	d454      	bmi.n	8007416 <__sflush_r+0xba>
 800736c:	684b      	ldr	r3, [r1, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	dc02      	bgt.n	8007378 <__sflush_r+0x1c>
 8007372:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd48      	ble.n	800740a <__sflush_r+0xae>
 8007378:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800737a:	2e00      	cmp	r6, #0
 800737c:	d045      	beq.n	800740a <__sflush_r+0xae>
 800737e:	2300      	movs	r3, #0
 8007380:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007384:	682f      	ldr	r7, [r5, #0]
 8007386:	6a21      	ldr	r1, [r4, #32]
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	d030      	beq.n	80073ee <__sflush_r+0x92>
 800738c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	0759      	lsls	r1, r3, #29
 8007392:	d505      	bpl.n	80073a0 <__sflush_r+0x44>
 8007394:	6863      	ldr	r3, [r4, #4]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800739a:	b10b      	cbz	r3, 80073a0 <__sflush_r+0x44>
 800739c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073a4:	6a21      	ldr	r1, [r4, #32]
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b0      	blx	r6
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	d106      	bne.n	80073be <__sflush_r+0x62>
 80073b0:	6829      	ldr	r1, [r5, #0]
 80073b2:	291d      	cmp	r1, #29
 80073b4:	d82b      	bhi.n	800740e <__sflush_r+0xb2>
 80073b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007460 <__sflush_r+0x104>)
 80073b8:	40ca      	lsrs	r2, r1
 80073ba:	07d6      	lsls	r6, r2, #31
 80073bc:	d527      	bpl.n	800740e <__sflush_r+0xb2>
 80073be:	2200      	movs	r2, #0
 80073c0:	6062      	str	r2, [r4, #4]
 80073c2:	04d9      	lsls	r1, r3, #19
 80073c4:	6922      	ldr	r2, [r4, #16]
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	d504      	bpl.n	80073d4 <__sflush_r+0x78>
 80073ca:	1c42      	adds	r2, r0, #1
 80073cc:	d101      	bne.n	80073d2 <__sflush_r+0x76>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	b903      	cbnz	r3, 80073d4 <__sflush_r+0x78>
 80073d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80073d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073d6:	602f      	str	r7, [r5, #0]
 80073d8:	b1b9      	cbz	r1, 800740a <__sflush_r+0xae>
 80073da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073de:	4299      	cmp	r1, r3
 80073e0:	d002      	beq.n	80073e8 <__sflush_r+0x8c>
 80073e2:	4628      	mov	r0, r5
 80073e4:	f001 f89e 	bl	8008524 <_free_r>
 80073e8:	2300      	movs	r3, #0
 80073ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80073ec:	e00d      	b.n	800740a <__sflush_r+0xae>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b0      	blx	r6
 80073f4:	4602      	mov	r2, r0
 80073f6:	1c50      	adds	r0, r2, #1
 80073f8:	d1c9      	bne.n	800738e <__sflush_r+0x32>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0c6      	beq.n	800738e <__sflush_r+0x32>
 8007400:	2b1d      	cmp	r3, #29
 8007402:	d001      	beq.n	8007408 <__sflush_r+0xac>
 8007404:	2b16      	cmp	r3, #22
 8007406:	d11e      	bne.n	8007446 <__sflush_r+0xea>
 8007408:	602f      	str	r7, [r5, #0]
 800740a:	2000      	movs	r0, #0
 800740c:	e022      	b.n	8007454 <__sflush_r+0xf8>
 800740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007412:	b21b      	sxth	r3, r3
 8007414:	e01b      	b.n	800744e <__sflush_r+0xf2>
 8007416:	690f      	ldr	r7, [r1, #16]
 8007418:	2f00      	cmp	r7, #0
 800741a:	d0f6      	beq.n	800740a <__sflush_r+0xae>
 800741c:	0793      	lsls	r3, r2, #30
 800741e:	680e      	ldr	r6, [r1, #0]
 8007420:	bf08      	it	eq
 8007422:	694b      	ldreq	r3, [r1, #20]
 8007424:	600f      	str	r7, [r1, #0]
 8007426:	bf18      	it	ne
 8007428:	2300      	movne	r3, #0
 800742a:	eba6 0807 	sub.w	r8, r6, r7
 800742e:	608b      	str	r3, [r1, #8]
 8007430:	f1b8 0f00 	cmp.w	r8, #0
 8007434:	dde9      	ble.n	800740a <__sflush_r+0xae>
 8007436:	6a21      	ldr	r1, [r4, #32]
 8007438:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800743a:	4643      	mov	r3, r8
 800743c:	463a      	mov	r2, r7
 800743e:	4628      	mov	r0, r5
 8007440:	47b0      	blx	r6
 8007442:	2800      	cmp	r0, #0
 8007444:	dc08      	bgt.n	8007458 <__sflush_r+0xfc>
 8007446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007458:	4407      	add	r7, r0
 800745a:	eba8 0800 	sub.w	r8, r8, r0
 800745e:	e7e7      	b.n	8007430 <__sflush_r+0xd4>
 8007460:	20400001 	.word	0x20400001

08007464 <_fflush_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	690b      	ldr	r3, [r1, #16]
 8007468:	4605      	mov	r5, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b913      	cbnz	r3, 8007474 <_fflush_r+0x10>
 800746e:	2500      	movs	r5, #0
 8007470:	4628      	mov	r0, r5
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	b118      	cbz	r0, 800747e <_fflush_r+0x1a>
 8007476:	6a03      	ldr	r3, [r0, #32]
 8007478:	b90b      	cbnz	r3, 800747e <_fflush_r+0x1a>
 800747a:	f000 f8a7 	bl	80075cc <__sinit>
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f3      	beq.n	800746e <_fflush_r+0xa>
 8007486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007488:	07d0      	lsls	r0, r2, #31
 800748a:	d404      	bmi.n	8007496 <_fflush_r+0x32>
 800748c:	0599      	lsls	r1, r3, #22
 800748e:	d402      	bmi.n	8007496 <_fflush_r+0x32>
 8007490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007492:	f000 fa48 	bl	8007926 <__retarget_lock_acquire_recursive>
 8007496:	4628      	mov	r0, r5
 8007498:	4621      	mov	r1, r4
 800749a:	f7ff ff5f 	bl	800735c <__sflush_r>
 800749e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074a0:	07da      	lsls	r2, r3, #31
 80074a2:	4605      	mov	r5, r0
 80074a4:	d4e4      	bmi.n	8007470 <_fflush_r+0xc>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	059b      	lsls	r3, r3, #22
 80074aa:	d4e1      	bmi.n	8007470 <_fflush_r+0xc>
 80074ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ae:	f000 fa3b 	bl	8007928 <__retarget_lock_release_recursive>
 80074b2:	e7dd      	b.n	8007470 <_fflush_r+0xc>

080074b4 <std>:
 80074b4:	2300      	movs	r3, #0
 80074b6:	b510      	push	{r4, lr}
 80074b8:	4604      	mov	r4, r0
 80074ba:	e9c0 3300 	strd	r3, r3, [r0]
 80074be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074c2:	6083      	str	r3, [r0, #8]
 80074c4:	8181      	strh	r1, [r0, #12]
 80074c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80074c8:	81c2      	strh	r2, [r0, #14]
 80074ca:	6183      	str	r3, [r0, #24]
 80074cc:	4619      	mov	r1, r3
 80074ce:	2208      	movs	r2, #8
 80074d0:	305c      	adds	r0, #92	@ 0x5c
 80074d2:	f000 f99b 	bl	800780c <memset>
 80074d6:	4b0d      	ldr	r3, [pc, #52]	@ (800750c <std+0x58>)
 80074d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80074da:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <std+0x5c>)
 80074dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <std+0x60>)
 80074e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x64>)
 80074e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <std+0x68>)
 80074e8:	6224      	str	r4, [r4, #32]
 80074ea:	429c      	cmp	r4, r3
 80074ec:	d006      	beq.n	80074fc <std+0x48>
 80074ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074f2:	4294      	cmp	r4, r2
 80074f4:	d002      	beq.n	80074fc <std+0x48>
 80074f6:	33d0      	adds	r3, #208	@ 0xd0
 80074f8:	429c      	cmp	r4, r3
 80074fa:	d105      	bne.n	8007508 <std+0x54>
 80074fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007504:	f000 ba0e 	b.w	8007924 <__retarget_lock_init_recursive>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	bf00      	nop
 800750c:	0800765d 	.word	0x0800765d
 8007510:	0800767f 	.word	0x0800767f
 8007514:	080076b7 	.word	0x080076b7
 8007518:	080076db 	.word	0x080076db
 800751c:	240004b0 	.word	0x240004b0

08007520 <stdio_exit_handler>:
 8007520:	4a02      	ldr	r2, [pc, #8]	@ (800752c <stdio_exit_handler+0xc>)
 8007522:	4903      	ldr	r1, [pc, #12]	@ (8007530 <stdio_exit_handler+0x10>)
 8007524:	4803      	ldr	r0, [pc, #12]	@ (8007534 <stdio_exit_handler+0x14>)
 8007526:	f000 b87b 	b.w	8007620 <_fwalk_sglue>
 800752a:	bf00      	nop
 800752c:	24000010 	.word	0x24000010
 8007530:	08007465 	.word	0x08007465
 8007534:	24000020 	.word	0x24000020

08007538 <cleanup_stdio>:
 8007538:	6841      	ldr	r1, [r0, #4]
 800753a:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <cleanup_stdio+0x34>)
 800753c:	4299      	cmp	r1, r3
 800753e:	b510      	push	{r4, lr}
 8007540:	4604      	mov	r4, r0
 8007542:	d001      	beq.n	8007548 <cleanup_stdio+0x10>
 8007544:	f7ff ff8e 	bl	8007464 <_fflush_r>
 8007548:	68a1      	ldr	r1, [r4, #8]
 800754a:	4b09      	ldr	r3, [pc, #36]	@ (8007570 <cleanup_stdio+0x38>)
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <cleanup_stdio+0x1e>
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff ff87 	bl	8007464 <_fflush_r>
 8007556:	68e1      	ldr	r1, [r4, #12]
 8007558:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <cleanup_stdio+0x3c>)
 800755a:	4299      	cmp	r1, r3
 800755c:	d004      	beq.n	8007568 <cleanup_stdio+0x30>
 800755e:	4620      	mov	r0, r4
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007564:	f7ff bf7e 	b.w	8007464 <_fflush_r>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	240004b0 	.word	0x240004b0
 8007570:	24000518 	.word	0x24000518
 8007574:	24000580 	.word	0x24000580

08007578 <global_stdio_init.part.0>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <global_stdio_init.part.0+0x30>)
 800757c:	4c0b      	ldr	r4, [pc, #44]	@ (80075ac <global_stdio_init.part.0+0x34>)
 800757e:	4a0c      	ldr	r2, [pc, #48]	@ (80075b0 <global_stdio_init.part.0+0x38>)
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	4620      	mov	r0, r4
 8007584:	2200      	movs	r2, #0
 8007586:	2104      	movs	r1, #4
 8007588:	f7ff ff94 	bl	80074b4 <std>
 800758c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007590:	2201      	movs	r2, #1
 8007592:	2109      	movs	r1, #9
 8007594:	f7ff ff8e 	bl	80074b4 <std>
 8007598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800759c:	2202      	movs	r2, #2
 800759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff bf86 	b.w	80074b4 <std>
 80075a8:	240005e8 	.word	0x240005e8
 80075ac:	240004b0 	.word	0x240004b0
 80075b0:	08007521 	.word	0x08007521

080075b4 <__sfp_lock_acquire>:
 80075b4:	4801      	ldr	r0, [pc, #4]	@ (80075bc <__sfp_lock_acquire+0x8>)
 80075b6:	f000 b9b6 	b.w	8007926 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	240005f1 	.word	0x240005f1

080075c0 <__sfp_lock_release>:
 80075c0:	4801      	ldr	r0, [pc, #4]	@ (80075c8 <__sfp_lock_release+0x8>)
 80075c2:	f000 b9b1 	b.w	8007928 <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	240005f1 	.word	0x240005f1

080075cc <__sinit>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	f7ff fff0 	bl	80075b4 <__sfp_lock_acquire>
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b11b      	cbz	r3, 80075e0 <__sinit+0x14>
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	f7ff bff0 	b.w	80075c0 <__sfp_lock_release>
 80075e0:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <__sinit+0x28>)
 80075e2:	6223      	str	r3, [r4, #32]
 80075e4:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <__sinit+0x2c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f5      	bne.n	80075d8 <__sinit+0xc>
 80075ec:	f7ff ffc4 	bl	8007578 <global_stdio_init.part.0>
 80075f0:	e7f2      	b.n	80075d8 <__sinit+0xc>
 80075f2:	bf00      	nop
 80075f4:	08007539 	.word	0x08007539
 80075f8:	240005e8 	.word	0x240005e8

080075fc <fiprintf>:
 80075fc:	b40e      	push	{r1, r2, r3}
 80075fe:	b503      	push	{r0, r1, lr}
 8007600:	4601      	mov	r1, r0
 8007602:	ab03      	add	r3, sp, #12
 8007604:	4805      	ldr	r0, [pc, #20]	@ (800761c <fiprintf+0x20>)
 8007606:	f853 2b04 	ldr.w	r2, [r3], #4
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	f001 fb77 	bl	8008d00 <_vfiprintf_r>
 8007612:	b002      	add	sp, #8
 8007614:	f85d eb04 	ldr.w	lr, [sp], #4
 8007618:	b003      	add	sp, #12
 800761a:	4770      	bx	lr
 800761c:	2400001c 	.word	0x2400001c

08007620 <_fwalk_sglue>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4607      	mov	r7, r0
 8007626:	4688      	mov	r8, r1
 8007628:	4614      	mov	r4, r2
 800762a:	2600      	movs	r6, #0
 800762c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007630:	f1b9 0901 	subs.w	r9, r9, #1
 8007634:	d505      	bpl.n	8007642 <_fwalk_sglue+0x22>
 8007636:	6824      	ldr	r4, [r4, #0]
 8007638:	2c00      	cmp	r4, #0
 800763a:	d1f7      	bne.n	800762c <_fwalk_sglue+0xc>
 800763c:	4630      	mov	r0, r6
 800763e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d907      	bls.n	8007658 <_fwalk_sglue+0x38>
 8007648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800764c:	3301      	adds	r3, #1
 800764e:	d003      	beq.n	8007658 <_fwalk_sglue+0x38>
 8007650:	4629      	mov	r1, r5
 8007652:	4638      	mov	r0, r7
 8007654:	47c0      	blx	r8
 8007656:	4306      	orrs	r6, r0
 8007658:	3568      	adds	r5, #104	@ 0x68
 800765a:	e7e9      	b.n	8007630 <_fwalk_sglue+0x10>

0800765c <__sread>:
 800765c:	b510      	push	{r4, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	f000 f900 	bl	8007868 <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	bfab      	itete	ge
 800766c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800766e:	89a3      	ldrhlt	r3, [r4, #12]
 8007670:	181b      	addge	r3, r3, r0
 8007672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007676:	bfac      	ite	ge
 8007678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800767a:	81a3      	strhlt	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__swrite>:
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	461f      	mov	r7, r3
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d505      	bpl.n	800769c <__swrite+0x1e>
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	2302      	movs	r3, #2
 8007696:	2200      	movs	r2, #0
 8007698:	f000 f8d4 	bl	8007844 <_lseek_r>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f000 b8fb 	b.w	80078ac <_write_r>

080076b6 <__sseek>:
 80076b6:	b510      	push	{r4, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076be:	f000 f8c1 	bl	8007844 <_lseek_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	bf15      	itete	ne
 80076c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076d2:	81a3      	strheq	r3, [r4, #12]
 80076d4:	bf18      	it	ne
 80076d6:	81a3      	strhne	r3, [r4, #12]
 80076d8:	bd10      	pop	{r4, pc}

080076da <__sclose>:
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 b8a1 	b.w	8007824 <_close_r>

080076e2 <__swbuf_r>:
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	460e      	mov	r6, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	4605      	mov	r5, r0
 80076ea:	b118      	cbz	r0, 80076f4 <__swbuf_r+0x12>
 80076ec:	6a03      	ldr	r3, [r0, #32]
 80076ee:	b90b      	cbnz	r3, 80076f4 <__swbuf_r+0x12>
 80076f0:	f7ff ff6c 	bl	80075cc <__sinit>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	071a      	lsls	r2, r3, #28
 80076fc:	d501      	bpl.n	8007702 <__swbuf_r+0x20>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b943      	cbnz	r3, 8007714 <__swbuf_r+0x32>
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 f82b 	bl	8007760 <__swsetup_r>
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x32>
 800770c:	f04f 37ff 	mov.w	r7, #4294967295
 8007710:	4638      	mov	r0, r7
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	1a98      	subs	r0, r3, r2
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	b2f6      	uxtb	r6, r6
 800771e:	4283      	cmp	r3, r0
 8007720:	4637      	mov	r7, r6
 8007722:	dc05      	bgt.n	8007730 <__swbuf_r+0x4e>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f7ff fe9c 	bl	8007464 <_fflush_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	d1ed      	bne.n	800770c <__swbuf_r+0x2a>
 8007730:	68a3      	ldr	r3, [r4, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	701e      	strb	r6, [r3, #0]
 800773e:	6962      	ldr	r2, [r4, #20]
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	429a      	cmp	r2, r3
 8007744:	d004      	beq.n	8007750 <__swbuf_r+0x6e>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d5e1      	bpl.n	8007710 <__swbuf_r+0x2e>
 800774c:	2e0a      	cmp	r6, #10
 800774e:	d1df      	bne.n	8007710 <__swbuf_r+0x2e>
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f7ff fe86 	bl	8007464 <_fflush_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0d9      	beq.n	8007710 <__swbuf_r+0x2e>
 800775c:	e7d6      	b.n	800770c <__swbuf_r+0x2a>
	...

08007760 <__swsetup_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <__swsetup_r+0xa8>)
 8007764:	4605      	mov	r5, r0
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	460c      	mov	r4, r1
 800776a:	b118      	cbz	r0, 8007774 <__swsetup_r+0x14>
 800776c:	6a03      	ldr	r3, [r0, #32]
 800776e:	b90b      	cbnz	r3, 8007774 <__swsetup_r+0x14>
 8007770:	f7ff ff2c 	bl	80075cc <__sinit>
 8007774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	d422      	bmi.n	80077c2 <__swsetup_r+0x62>
 800777c:	06da      	lsls	r2, r3, #27
 800777e:	d407      	bmi.n	8007790 <__swsetup_r+0x30>
 8007780:	2209      	movs	r2, #9
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	e033      	b.n	80077f8 <__swsetup_r+0x98>
 8007790:	0758      	lsls	r0, r3, #29
 8007792:	d512      	bpl.n	80077ba <__swsetup_r+0x5a>
 8007794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007796:	b141      	cbz	r1, 80077aa <__swsetup_r+0x4a>
 8007798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800779c:	4299      	cmp	r1, r3
 800779e:	d002      	beq.n	80077a6 <__swsetup_r+0x46>
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 febf 	bl	8008524 <_free_r>
 80077a6:	2300      	movs	r3, #0
 80077a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	2300      	movs	r3, #0
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f043 0308 	orr.w	r3, r3, #8
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	b94b      	cbnz	r3, 80077da <__swsetup_r+0x7a>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d0:	d003      	beq.n	80077da <__swsetup_r+0x7a>
 80077d2:	4621      	mov	r1, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	f001 fbd1 	bl	8008f7c <__smakebuf_r>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	f013 0201 	ands.w	r2, r3, #1
 80077e2:	d00a      	beq.n	80077fa <__swsetup_r+0x9a>
 80077e4:	2200      	movs	r2, #0
 80077e6:	60a2      	str	r2, [r4, #8]
 80077e8:	6962      	ldr	r2, [r4, #20]
 80077ea:	4252      	negs	r2, r2
 80077ec:	61a2      	str	r2, [r4, #24]
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	b942      	cbnz	r2, 8007804 <__swsetup_r+0xa4>
 80077f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077f6:	d1c5      	bne.n	8007784 <__swsetup_r+0x24>
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	0799      	lsls	r1, r3, #30
 80077fc:	bf58      	it	pl
 80077fe:	6962      	ldrpl	r2, [r4, #20]
 8007800:	60a2      	str	r2, [r4, #8]
 8007802:	e7f4      	b.n	80077ee <__swsetup_r+0x8e>
 8007804:	2000      	movs	r0, #0
 8007806:	e7f7      	b.n	80077f8 <__swsetup_r+0x98>
 8007808:	2400001c 	.word	0x2400001c

0800780c <memset>:
 800780c:	4402      	add	r2, r0
 800780e:	4603      	mov	r3, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <_localeconv_r>:
 800781c:	4800      	ldr	r0, [pc, #0]	@ (8007820 <_localeconv_r+0x4>)
 800781e:	4770      	bx	lr
 8007820:	2400015c 	.word	0x2400015c

08007824 <_close_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d06      	ldr	r5, [pc, #24]	@ (8007840 <_close_r+0x1c>)
 8007828:	2300      	movs	r3, #0
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7f9 fa9c 	bl	8000d6c <_close>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_close_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_close_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	240005ec 	.word	0x240005ec

08007844 <_lseek_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	@ (8007864 <_lseek_r+0x20>)
 8007848:	4604      	mov	r4, r0
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	2200      	movs	r2, #0
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f7f9 fa96 	bl	8000d84 <_lseek>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_lseek_r+0x1e>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_lseek_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	240005ec 	.word	0x240005ec

08007868 <_read_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	@ (8007888 <_read_r+0x20>)
 800786c:	4604      	mov	r4, r0
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	2200      	movs	r2, #0
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7f9 fa5c 	bl	8000d34 <_read>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_read_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_read_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	240005ec 	.word	0x240005ec

0800788c <_sbrk_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d06      	ldr	r5, [pc, #24]	@ (80078a8 <_sbrk_r+0x1c>)
 8007890:	2300      	movs	r3, #0
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	f7f9 fa76 	bl	8000d88 <_sbrk>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_sbrk_r+0x1a>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_sbrk_r+0x1a>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	240005ec 	.word	0x240005ec

080078ac <_write_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	@ (80078cc <_write_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7f9 fa48 	bl	8000d50 <_write>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_write_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_write_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	240005ec 	.word	0x240005ec

080078d0 <__errno>:
 80078d0:	4b01      	ldr	r3, [pc, #4]	@ (80078d8 <__errno+0x8>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2400001c 	.word	0x2400001c

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4d0d      	ldr	r5, [pc, #52]	@ (8007914 <__libc_init_array+0x38>)
 80078e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007918 <__libc_init_array+0x3c>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	2600      	movs	r6, #0
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	4d0b      	ldr	r5, [pc, #44]	@ (800791c <__libc_init_array+0x40>)
 80078ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007920 <__libc_init_array+0x44>)
 80078f0:	f001 fc06 	bl	8009100 <_init>
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	2600      	movs	r6, #0
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	080094cc 	.word	0x080094cc
 8007918:	080094cc 	.word	0x080094cc
 800791c:	080094cc 	.word	0x080094cc
 8007920:	080094d0 	.word	0x080094d0

08007924 <__retarget_lock_init_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_acquire_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_release_recursive>:
 8007928:	4770      	bx	lr

0800792a <memcpy>:
 800792a:	440a      	add	r2, r1
 800792c:	4291      	cmp	r1, r2
 800792e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007932:	d100      	bne.n	8007936 <memcpy+0xc>
 8007934:	4770      	bx	lr
 8007936:	b510      	push	{r4, lr}
 8007938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007940:	4291      	cmp	r1, r2
 8007942:	d1f9      	bne.n	8007938 <memcpy+0xe>
 8007944:	bd10      	pop	{r4, pc}

08007946 <abort>:
 8007946:	b508      	push	{r3, lr}
 8007948:	2006      	movs	r0, #6
 800794a:	f001 fb7b 	bl	8009044 <raise>
 800794e:	2001      	movs	r0, #1
 8007950:	f7f9 f9ea 	bl	8000d28 <_exit>

08007954 <quorem>:
 8007954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	6903      	ldr	r3, [r0, #16]
 800795a:	690c      	ldr	r4, [r1, #16]
 800795c:	42a3      	cmp	r3, r4
 800795e:	4607      	mov	r7, r0
 8007960:	db7e      	blt.n	8007a60 <quorem+0x10c>
 8007962:	3c01      	subs	r4, #1
 8007964:	f101 0814 	add.w	r8, r1, #20
 8007968:	00a3      	lsls	r3, r4, #2
 800796a:	f100 0514 	add.w	r5, r0, #20
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800797a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800797e:	3301      	adds	r3, #1
 8007980:	429a      	cmp	r2, r3
 8007982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007986:	fbb2 f6f3 	udiv	r6, r2, r3
 800798a:	d32e      	bcc.n	80079ea <quorem+0x96>
 800798c:	f04f 0a00 	mov.w	sl, #0
 8007990:	46c4      	mov	ip, r8
 8007992:	46ae      	mov	lr, r5
 8007994:	46d3      	mov	fp, sl
 8007996:	f85c 3b04 	ldr.w	r3, [ip], #4
 800799a:	b298      	uxth	r0, r3
 800799c:	fb06 a000 	mla	r0, r6, r0, sl
 80079a0:	0c02      	lsrs	r2, r0, #16
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	fb06 2303 	mla	r3, r6, r3, r2
 80079a8:	f8de 2000 	ldr.w	r2, [lr]
 80079ac:	b280      	uxth	r0, r0
 80079ae:	b292      	uxth	r2, r2
 80079b0:	1a12      	subs	r2, r2, r0
 80079b2:	445a      	add	r2, fp
 80079b4:	f8de 0000 	ldr.w	r0, [lr]
 80079b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079bc:	b29b      	uxth	r3, r3
 80079be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079c6:	b292      	uxth	r2, r2
 80079c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079cc:	45e1      	cmp	r9, ip
 80079ce:	f84e 2b04 	str.w	r2, [lr], #4
 80079d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079d6:	d2de      	bcs.n	8007996 <quorem+0x42>
 80079d8:	9b00      	ldr	r3, [sp, #0]
 80079da:	58eb      	ldr	r3, [r5, r3]
 80079dc:	b92b      	cbnz	r3, 80079ea <quorem+0x96>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	3b04      	subs	r3, #4
 80079e2:	429d      	cmp	r5, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	d32f      	bcc.n	8007a48 <quorem+0xf4>
 80079e8:	613c      	str	r4, [r7, #16]
 80079ea:	4638      	mov	r0, r7
 80079ec:	f001 f856 	bl	8008a9c <__mcmp>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	db25      	blt.n	8007a40 <quorem+0xec>
 80079f4:	4629      	mov	r1, r5
 80079f6:	2000      	movs	r0, #0
 80079f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80079fc:	f8d1 c000 	ldr.w	ip, [r1]
 8007a00:	fa1f fe82 	uxth.w	lr, r2
 8007a04:	fa1f f38c 	uxth.w	r3, ip
 8007a08:	eba3 030e 	sub.w	r3, r3, lr
 8007a0c:	4403      	add	r3, r0
 8007a0e:	0c12      	lsrs	r2, r2, #16
 8007a10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a1e:	45c1      	cmp	r9, r8
 8007a20:	f841 3b04 	str.w	r3, [r1], #4
 8007a24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a28:	d2e6      	bcs.n	80079f8 <quorem+0xa4>
 8007a2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a32:	b922      	cbnz	r2, 8007a3e <quorem+0xea>
 8007a34:	3b04      	subs	r3, #4
 8007a36:	429d      	cmp	r5, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	d30b      	bcc.n	8007a54 <quorem+0x100>
 8007a3c:	613c      	str	r4, [r7, #16]
 8007a3e:	3601      	adds	r6, #1
 8007a40:	4630      	mov	r0, r6
 8007a42:	b003      	add	sp, #12
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	3b04      	subs	r3, #4
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	d1cb      	bne.n	80079e8 <quorem+0x94>
 8007a50:	3c01      	subs	r4, #1
 8007a52:	e7c6      	b.n	80079e2 <quorem+0x8e>
 8007a54:	6812      	ldr	r2, [r2, #0]
 8007a56:	3b04      	subs	r3, #4
 8007a58:	2a00      	cmp	r2, #0
 8007a5a:	d1ef      	bne.n	8007a3c <quorem+0xe8>
 8007a5c:	3c01      	subs	r4, #1
 8007a5e:	e7ea      	b.n	8007a36 <quorem+0xe2>
 8007a60:	2000      	movs	r0, #0
 8007a62:	e7ee      	b.n	8007a42 <quorem+0xee>
 8007a64:	0000      	movs	r0, r0
	...

08007a68 <_dtoa_r>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	ed2d 8b02 	vpush	{d8}
 8007a70:	69c7      	ldr	r7, [r0, #28]
 8007a72:	b091      	sub	sp, #68	@ 0x44
 8007a74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a78:	ec55 4b10 	vmov	r4, r5, d0
 8007a7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	4681      	mov	r9, r0
 8007a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a84:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a86:	b97f      	cbnz	r7, 8007aa8 <_dtoa_r+0x40>
 8007a88:	2010      	movs	r0, #16
 8007a8a:	f7fe ff7d 	bl	8006988 <malloc>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a94:	b920      	cbnz	r0, 8007aa0 <_dtoa_r+0x38>
 8007a96:	4ba0      	ldr	r3, [pc, #640]	@ (8007d18 <_dtoa_r+0x2b0>)
 8007a98:	21ef      	movs	r1, #239	@ 0xef
 8007a9a:	48a0      	ldr	r0, [pc, #640]	@ (8007d1c <_dtoa_r+0x2b4>)
 8007a9c:	f7fe ff42 	bl	8006924 <__assert_func>
 8007aa0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007aa4:	6007      	str	r7, [r0, #0]
 8007aa6:	60c7      	str	r7, [r0, #12]
 8007aa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	b159      	cbz	r1, 8007ac8 <_dtoa_r+0x60>
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	604a      	str	r2, [r1, #4]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4093      	lsls	r3, r2
 8007ab8:	608b      	str	r3, [r1, #8]
 8007aba:	4648      	mov	r0, r9
 8007abc:	f000 fdbc 	bl	8008638 <_Bfree>
 8007ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	1e2b      	subs	r3, r5, #0
 8007aca:	bfbb      	ittet	lt
 8007acc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ad0:	9303      	strlt	r3, [sp, #12]
 8007ad2:	2300      	movge	r3, #0
 8007ad4:	2201      	movlt	r2, #1
 8007ad6:	bfac      	ite	ge
 8007ad8:	6033      	strge	r3, [r6, #0]
 8007ada:	6032      	strlt	r2, [r6, #0]
 8007adc:	4b90      	ldr	r3, [pc, #576]	@ (8007d20 <_dtoa_r+0x2b8>)
 8007ade:	9e03      	ldr	r6, [sp, #12]
 8007ae0:	43b3      	bics	r3, r6
 8007ae2:	d110      	bne.n	8007b06 <_dtoa_r+0x9e>
 8007ae4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ae6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007af0:	4323      	orrs	r3, r4
 8007af2:	f000 84e6 	beq.w	80084c2 <_dtoa_r+0xa5a>
 8007af6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007af8:	4f8a      	ldr	r7, [pc, #552]	@ (8007d24 <_dtoa_r+0x2bc>)
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 84e8 	beq.w	80084d0 <_dtoa_r+0xa68>
 8007b00:	1cfb      	adds	r3, r7, #3
 8007b02:	f000 bce3 	b.w	80084cc <_dtoa_r+0xa64>
 8007b06:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007b0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	d10a      	bne.n	8007b2a <_dtoa_r+0xc2>
 8007b14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b16:	2301      	movs	r3, #1
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b1c:	b113      	cbz	r3, 8007b24 <_dtoa_r+0xbc>
 8007b1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007b20:	4b81      	ldr	r3, [pc, #516]	@ (8007d28 <_dtoa_r+0x2c0>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	4f81      	ldr	r7, [pc, #516]	@ (8007d2c <_dtoa_r+0x2c4>)
 8007b26:	f000 bcd3 	b.w	80084d0 <_dtoa_r+0xa68>
 8007b2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007b2c:	a90f      	add	r1, sp, #60	@ 0x3c
 8007b2e:	4648      	mov	r0, r9
 8007b30:	eeb0 0b48 	vmov.f64	d0, d8
 8007b34:	f001 f862 	bl	8008bfc <__d2b>
 8007b38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b3e:	9001      	str	r0, [sp, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d045      	beq.n	8007bd0 <_dtoa_r+0x168>
 8007b44:	eeb0 7b48 	vmov.f64	d7, d8
 8007b48:	ee18 1a90 	vmov	r1, s17
 8007b4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007b50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007b54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007b58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	ee07 1a90 	vmov	s15, r1
 8007b62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007b66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007d00 <_dtoa_r+0x298>
 8007b6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007d08 <_dtoa_r+0x2a0>
 8007b72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007b76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007d10 <_dtoa_r+0x2a8>
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007b82:	eeb0 7b46 	vmov.f64	d7, d6
 8007b86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007b8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007b8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	ee16 8a90 	vmov	r8, s13
 8007b9a:	d508      	bpl.n	8007bae <_dtoa_r+0x146>
 8007b9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ba0:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	bf18      	it	ne
 8007baa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007bae:	f1b8 0f16 	cmp.w	r8, #22
 8007bb2:	d82b      	bhi.n	8007c0c <_dtoa_r+0x1a4>
 8007bb4:	495e      	ldr	r1, [pc, #376]	@ (8007d30 <_dtoa_r+0x2c8>)
 8007bb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007bba:	ed91 7b00 	vldr	d7, [r1]
 8007bbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc6:	d501      	bpl.n	8007bcc <_dtoa_r+0x164>
 8007bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bcc:	2100      	movs	r1, #0
 8007bce:	e01e      	b.n	8007c0e <_dtoa_r+0x1a6>
 8007bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007bd8:	2920      	cmp	r1, #32
 8007bda:	bfc1      	itttt	gt
 8007bdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007be0:	408e      	lslgt	r6, r1
 8007be2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007be6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007bea:	bfd6      	itet	le
 8007bec:	f1c1 0120 	rsble	r1, r1, #32
 8007bf0:	4331      	orrgt	r1, r6
 8007bf2:	fa04 f101 	lslle.w	r1, r4, r1
 8007bf6:	ee07 1a90 	vmov	s15, r1
 8007bfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	ee17 1a90 	vmov	r1, s15
 8007c04:	2501      	movs	r5, #1
 8007c06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007c0a:	e7a8      	b.n	8007b5e <_dtoa_r+0xf6>
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	1e53      	subs	r3, r2, #1
 8007c12:	9306      	str	r3, [sp, #24]
 8007c14:	bf45      	ittet	mi
 8007c16:	f1c2 0301 	rsbmi	r3, r2, #1
 8007c1a:	9304      	strmi	r3, [sp, #16]
 8007c1c:	2300      	movpl	r3, #0
 8007c1e:	2300      	movmi	r3, #0
 8007c20:	bf4c      	ite	mi
 8007c22:	9306      	strmi	r3, [sp, #24]
 8007c24:	9304      	strpl	r3, [sp, #16]
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8007c2c:	db18      	blt.n	8007c60 <_dtoa_r+0x1f8>
 8007c2e:	9b06      	ldr	r3, [sp, #24]
 8007c30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007c34:	4443      	add	r3, r8
 8007c36:	9306      	str	r3, [sp, #24]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9a07      	ldr	r2, [sp, #28]
 8007c3c:	2a09      	cmp	r2, #9
 8007c3e:	d845      	bhi.n	8007ccc <_dtoa_r+0x264>
 8007c40:	2a05      	cmp	r2, #5
 8007c42:	bfc4      	itt	gt
 8007c44:	3a04      	subgt	r2, #4
 8007c46:	9207      	strgt	r2, [sp, #28]
 8007c48:	9a07      	ldr	r2, [sp, #28]
 8007c4a:	f1a2 0202 	sub.w	r2, r2, #2
 8007c4e:	bfcc      	ite	gt
 8007c50:	2400      	movgt	r4, #0
 8007c52:	2401      	movle	r4, #1
 8007c54:	2a03      	cmp	r2, #3
 8007c56:	d844      	bhi.n	8007ce2 <_dtoa_r+0x27a>
 8007c58:	e8df f002 	tbb	[pc, r2]
 8007c5c:	0b173634 	.word	0x0b173634
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	2200      	movs	r2, #0
 8007c64:	eba3 0308 	sub.w	r3, r3, r8
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c6c:	f1c8 0300 	rsb	r3, r8, #0
 8007c70:	e7e3      	b.n	8007c3a <_dtoa_r+0x1d2>
 8007c72:	2201      	movs	r2, #1
 8007c74:	9208      	str	r2, [sp, #32]
 8007c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c78:	eb08 0b02 	add.w	fp, r8, r2
 8007c7c:	f10b 0a01 	add.w	sl, fp, #1
 8007c80:	4652      	mov	r2, sl
 8007c82:	2a01      	cmp	r2, #1
 8007c84:	bfb8      	it	lt
 8007c86:	2201      	movlt	r2, #1
 8007c88:	e006      	b.n	8007c98 <_dtoa_r+0x230>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	9208      	str	r2, [sp, #32]
 8007c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd29      	ble.n	8007ce8 <_dtoa_r+0x280>
 8007c94:	4693      	mov	fp, r2
 8007c96:	4692      	mov	sl, r2
 8007c98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	2004      	movs	r0, #4
 8007ca0:	f100 0614 	add.w	r6, r0, #20
 8007ca4:	4296      	cmp	r6, r2
 8007ca6:	d926      	bls.n	8007cf6 <_dtoa_r+0x28e>
 8007ca8:	6079      	str	r1, [r7, #4]
 8007caa:	4648      	mov	r0, r9
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	f000 fc83 	bl	80085b8 <_Balloc>
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d13e      	bne.n	8007d38 <_dtoa_r+0x2d0>
 8007cba:	4b1e      	ldr	r3, [pc, #120]	@ (8007d34 <_dtoa_r+0x2cc>)
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cc2:	e6ea      	b.n	8007a9a <_dtoa_r+0x32>
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	e7e1      	b.n	8007c8c <_dtoa_r+0x224>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	e7d3      	b.n	8007c74 <_dtoa_r+0x20c>
 8007ccc:	2401      	movs	r4, #1
 8007cce:	2200      	movs	r2, #0
 8007cd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007cd4:	f04f 3bff 	mov.w	fp, #4294967295
 8007cd8:	2100      	movs	r1, #0
 8007cda:	46da      	mov	sl, fp
 8007cdc:	2212      	movs	r2, #18
 8007cde:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ce0:	e7da      	b.n	8007c98 <_dtoa_r+0x230>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	9208      	str	r2, [sp, #32]
 8007ce6:	e7f5      	b.n	8007cd4 <_dtoa_r+0x26c>
 8007ce8:	f04f 0b01 	mov.w	fp, #1
 8007cec:	46da      	mov	sl, fp
 8007cee:	465a      	mov	r2, fp
 8007cf0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007cf4:	e7d0      	b.n	8007c98 <_dtoa_r+0x230>
 8007cf6:	3101      	adds	r1, #1
 8007cf8:	0040      	lsls	r0, r0, #1
 8007cfa:	e7d1      	b.n	8007ca0 <_dtoa_r+0x238>
 8007cfc:	f3af 8000 	nop.w
 8007d00:	636f4361 	.word	0x636f4361
 8007d04:	3fd287a7 	.word	0x3fd287a7
 8007d08:	8b60c8b3 	.word	0x8b60c8b3
 8007d0c:	3fc68a28 	.word	0x3fc68a28
 8007d10:	509f79fb 	.word	0x509f79fb
 8007d14:	3fd34413 	.word	0x3fd34413
 8007d18:	080091cd 	.word	0x080091cd
 8007d1c:	080091e4 	.word	0x080091e4
 8007d20:	7ff00000 	.word	0x7ff00000
 8007d24:	080091c9 	.word	0x080091c9
 8007d28:	0800919d 	.word	0x0800919d
 8007d2c:	0800919c 	.word	0x0800919c
 8007d30:	080092f8 	.word	0x080092f8
 8007d34:	0800923c 	.word	0x0800923c
 8007d38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007d3c:	f1ba 0f0e 	cmp.w	sl, #14
 8007d40:	6010      	str	r0, [r2, #0]
 8007d42:	d86e      	bhi.n	8007e22 <_dtoa_r+0x3ba>
 8007d44:	2c00      	cmp	r4, #0
 8007d46:	d06c      	beq.n	8007e22 <_dtoa_r+0x3ba>
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	f340 80b4 	ble.w	8007eb8 <_dtoa_r+0x450>
 8007d50:	4ac8      	ldr	r2, [pc, #800]	@ (8008074 <_dtoa_r+0x60c>)
 8007d52:	f008 010f 	and.w	r1, r8, #15
 8007d56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007d5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007d5e:	ed92 7b00 	vldr	d7, [r2]
 8007d62:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007d66:	f000 809b 	beq.w	8007ea0 <_dtoa_r+0x438>
 8007d6a:	4ac3      	ldr	r2, [pc, #780]	@ (8008078 <_dtoa_r+0x610>)
 8007d6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007d70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007d74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007d78:	f001 010f 	and.w	r1, r1, #15
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	48be      	ldr	r0, [pc, #760]	@ (8008078 <_dtoa_r+0x610>)
 8007d80:	2900      	cmp	r1, #0
 8007d82:	f040 808f 	bne.w	8007ea4 <_dtoa_r+0x43c>
 8007d86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007d8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	f000 80b3 	beq.w	8007f04 <_dtoa_r+0x49c>
 8007d9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007da2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007daa:	f140 80ab 	bpl.w	8007f04 <_dtoa_r+0x49c>
 8007dae:	f1ba 0f00 	cmp.w	sl, #0
 8007db2:	f000 80a7 	beq.w	8007f04 <_dtoa_r+0x49c>
 8007db6:	f1bb 0f00 	cmp.w	fp, #0
 8007dba:	dd30      	ble.n	8007e1e <_dtoa_r+0x3b6>
 8007dbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007dc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007dc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007dc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8007dcc:	9105      	str	r1, [sp, #20]
 8007dce:	3201      	adds	r2, #1
 8007dd0:	465c      	mov	r4, fp
 8007dd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007dd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007dda:	ee07 2a90 	vmov	s15, r2
 8007dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007de2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007de6:	ee15 2a90 	vmov	r2, s11
 8007dea:	ec51 0b15 	vmov	r0, r1, d5
 8007dee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	f040 808a 	bne.w	8007f0c <_dtoa_r+0x4a4>
 8007df8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007dfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e00:	ec41 0b17 	vmov	d7, r0, r1
 8007e04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	f300 826a 	bgt.w	80082e4 <_dtoa_r+0x87c>
 8007e10:	eeb1 7b47 	vneg.f64	d7, d7
 8007e14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1c:	d423      	bmi.n	8007e66 <_dtoa_r+0x3fe>
 8007e1e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	f2c0 8129 	blt.w	800807c <_dtoa_r+0x614>
 8007e2a:	f1b8 0f0e 	cmp.w	r8, #14
 8007e2e:	f300 8125 	bgt.w	800807c <_dtoa_r+0x614>
 8007e32:	4b90      	ldr	r3, [pc, #576]	@ (8008074 <_dtoa_r+0x60c>)
 8007e34:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e38:	ed93 6b00 	vldr	d6, [r3]
 8007e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f280 80c8 	bge.w	8007fd4 <_dtoa_r+0x56c>
 8007e44:	f1ba 0f00 	cmp.w	sl, #0
 8007e48:	f300 80c4 	bgt.w	8007fd4 <_dtoa_r+0x56c>
 8007e4c:	d10b      	bne.n	8007e66 <_dtoa_r+0x3fe>
 8007e4e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007e52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007e56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	f2c0 823c 	blt.w	80082de <_dtoa_r+0x876>
 8007e66:	2400      	movs	r4, #0
 8007e68:	4625      	mov	r5, r4
 8007e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	463e      	mov	r6, r7
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	4621      	mov	r1, r4
 8007e78:	4648      	mov	r0, r9
 8007e7a:	f000 fbdd 	bl	8008638 <_Bfree>
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f000 80a2 	beq.w	8007fc8 <_dtoa_r+0x560>
 8007e84:	f1b8 0f00 	cmp.w	r8, #0
 8007e88:	d005      	beq.n	8007e96 <_dtoa_r+0x42e>
 8007e8a:	45a8      	cmp	r8, r5
 8007e8c:	d003      	beq.n	8007e96 <_dtoa_r+0x42e>
 8007e8e:	4641      	mov	r1, r8
 8007e90:	4648      	mov	r0, r9
 8007e92:	f000 fbd1 	bl	8008638 <_Bfree>
 8007e96:	4629      	mov	r1, r5
 8007e98:	4648      	mov	r0, r9
 8007e9a:	f000 fbcd 	bl	8008638 <_Bfree>
 8007e9e:	e093      	b.n	8007fc8 <_dtoa_r+0x560>
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	e76c      	b.n	8007d7e <_dtoa_r+0x316>
 8007ea4:	07cc      	lsls	r4, r1, #31
 8007ea6:	d504      	bpl.n	8007eb2 <_dtoa_r+0x44a>
 8007ea8:	ed90 6b00 	vldr	d6, [r0]
 8007eac:	3201      	adds	r2, #1
 8007eae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eb2:	1049      	asrs	r1, r1, #1
 8007eb4:	3008      	adds	r0, #8
 8007eb6:	e763      	b.n	8007d80 <_dtoa_r+0x318>
 8007eb8:	d022      	beq.n	8007f00 <_dtoa_r+0x498>
 8007eba:	f1c8 0100 	rsb	r1, r8, #0
 8007ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8008074 <_dtoa_r+0x60c>)
 8007ec0:	f001 000f 	and.w	r0, r1, #15
 8007ec4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ec8:	ed92 7b00 	vldr	d7, [r2]
 8007ecc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ed4:	4868      	ldr	r0, [pc, #416]	@ (8008078 <_dtoa_r+0x610>)
 8007ed6:	1109      	asrs	r1, r1, #4
 8007ed8:	2400      	movs	r4, #0
 8007eda:	2202      	movs	r2, #2
 8007edc:	b929      	cbnz	r1, 8007eea <_dtoa_r+0x482>
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	f43f af57 	beq.w	8007d92 <_dtoa_r+0x32a>
 8007ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ee8:	e753      	b.n	8007d92 <_dtoa_r+0x32a>
 8007eea:	07ce      	lsls	r6, r1, #31
 8007eec:	d505      	bpl.n	8007efa <_dtoa_r+0x492>
 8007eee:	ed90 6b00 	vldr	d6, [r0]
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	2401      	movs	r4, #1
 8007ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007efa:	1049      	asrs	r1, r1, #1
 8007efc:	3008      	adds	r0, #8
 8007efe:	e7ed      	b.n	8007edc <_dtoa_r+0x474>
 8007f00:	2202      	movs	r2, #2
 8007f02:	e746      	b.n	8007d92 <_dtoa_r+0x32a>
 8007f04:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f08:	4654      	mov	r4, sl
 8007f0a:	e762      	b.n	8007dd2 <_dtoa_r+0x36a>
 8007f0c:	4a59      	ldr	r2, [pc, #356]	@ (8008074 <_dtoa_r+0x60c>)
 8007f0e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007f12:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007f16:	9a08      	ldr	r2, [sp, #32]
 8007f18:	ec41 0b17 	vmov	d7, r0, r1
 8007f1c:	443c      	add	r4, r7
 8007f1e:	b34a      	cbz	r2, 8007f74 <_dtoa_r+0x50c>
 8007f20:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007f24:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007f28:	463e      	mov	r6, r7
 8007f2a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007f2e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f36:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f3a:	ee14 2a90 	vmov	r2, s9
 8007f3e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f42:	3230      	adds	r2, #48	@ 0x30
 8007f44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f50:	f806 2b01 	strb.w	r2, [r6], #1
 8007f54:	d438      	bmi.n	8007fc8 <_dtoa_r+0x560>
 8007f56:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007f5a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f62:	d46e      	bmi.n	8008042 <_dtoa_r+0x5da>
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	f43f af5a 	beq.w	8007e1e <_dtoa_r+0x3b6>
 8007f6a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007f6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007f72:	e7e0      	b.n	8007f36 <_dtoa_r+0x4ce>
 8007f74:	4621      	mov	r1, r4
 8007f76:	463e      	mov	r6, r7
 8007f78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f7c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007f80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007f84:	ee14 2a90 	vmov	r2, s9
 8007f88:	3230      	adds	r2, #48	@ 0x30
 8007f8a:	f806 2b01 	strb.w	r2, [r6], #1
 8007f8e:	42a6      	cmp	r6, r4
 8007f90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007f94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007f98:	d119      	bne.n	8007fce <_dtoa_r+0x566>
 8007f9a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007f9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007fa2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007faa:	dc4a      	bgt.n	8008042 <_dtoa_r+0x5da>
 8007fac:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007fb0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb8:	f57f af31 	bpl.w	8007e1e <_dtoa_r+0x3b6>
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	3901      	subs	r1, #1
 8007fc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fc4:	2b30      	cmp	r3, #48	@ 0x30
 8007fc6:	d0f9      	beq.n	8007fbc <_dtoa_r+0x554>
 8007fc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007fcc:	e027      	b.n	800801e <_dtoa_r+0x5b6>
 8007fce:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007fd2:	e7d5      	b.n	8007f80 <_dtoa_r+0x518>
 8007fd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fd8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007fdc:	463e      	mov	r6, r7
 8007fde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007fe2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007fe6:	ee15 3a10 	vmov	r3, s10
 8007fea:	3330      	adds	r3, #48	@ 0x30
 8007fec:	f806 3b01 	strb.w	r3, [r6], #1
 8007ff0:	1bf3      	subs	r3, r6, r7
 8007ff2:	459a      	cmp	sl, r3
 8007ff4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007ff8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007ffc:	d132      	bne.n	8008064 <_dtoa_r+0x5fc>
 8007ffe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008002:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	dc18      	bgt.n	800803e <_dtoa_r+0x5d6>
 800800c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008014:	d103      	bne.n	800801e <_dtoa_r+0x5b6>
 8008016:	ee15 3a10 	vmov	r3, s10
 800801a:	07db      	lsls	r3, r3, #31
 800801c:	d40f      	bmi.n	800803e <_dtoa_r+0x5d6>
 800801e:	9901      	ldr	r1, [sp, #4]
 8008020:	4648      	mov	r0, r9
 8008022:	f000 fb09 	bl	8008638 <_Bfree>
 8008026:	2300      	movs	r3, #0
 8008028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800802a:	7033      	strb	r3, [r6, #0]
 800802c:	f108 0301 	add.w	r3, r8, #1
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 824b 	beq.w	80084d0 <_dtoa_r+0xa68>
 800803a:	601e      	str	r6, [r3, #0]
 800803c:	e248      	b.n	80084d0 <_dtoa_r+0xa68>
 800803e:	f8cd 8014 	str.w	r8, [sp, #20]
 8008042:	4633      	mov	r3, r6
 8008044:	461e      	mov	r6, r3
 8008046:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800804a:	2a39      	cmp	r2, #57	@ 0x39
 800804c:	d106      	bne.n	800805c <_dtoa_r+0x5f4>
 800804e:	429f      	cmp	r7, r3
 8008050:	d1f8      	bne.n	8008044 <_dtoa_r+0x5dc>
 8008052:	9a05      	ldr	r2, [sp, #20]
 8008054:	3201      	adds	r2, #1
 8008056:	9205      	str	r2, [sp, #20]
 8008058:	2230      	movs	r2, #48	@ 0x30
 800805a:	703a      	strb	r2, [r7, #0]
 800805c:	781a      	ldrb	r2, [r3, #0]
 800805e:	3201      	adds	r2, #1
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	e7b1      	b.n	8007fc8 <_dtoa_r+0x560>
 8008064:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008070:	d1b5      	bne.n	8007fde <_dtoa_r+0x576>
 8008072:	e7d4      	b.n	800801e <_dtoa_r+0x5b6>
 8008074:	080092f8 	.word	0x080092f8
 8008078:	080092d0 	.word	0x080092d0
 800807c:	9908      	ldr	r1, [sp, #32]
 800807e:	2900      	cmp	r1, #0
 8008080:	f000 80e9 	beq.w	8008256 <_dtoa_r+0x7ee>
 8008084:	9907      	ldr	r1, [sp, #28]
 8008086:	2901      	cmp	r1, #1
 8008088:	f300 80cb 	bgt.w	8008222 <_dtoa_r+0x7ba>
 800808c:	2d00      	cmp	r5, #0
 800808e:	f000 80c4 	beq.w	800821a <_dtoa_r+0x7b2>
 8008092:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008096:	9e04      	ldr	r6, [sp, #16]
 8008098:	461c      	mov	r4, r3
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	4413      	add	r3, r2
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9b06      	ldr	r3, [sp, #24]
 80080a4:	2101      	movs	r1, #1
 80080a6:	4413      	add	r3, r2
 80080a8:	4648      	mov	r0, r9
 80080aa:	9306      	str	r3, [sp, #24]
 80080ac:	f000 fb78 	bl	80087a0 <__i2b>
 80080b0:	9b05      	ldr	r3, [sp, #20]
 80080b2:	4605      	mov	r5, r0
 80080b4:	b166      	cbz	r6, 80080d0 <_dtoa_r+0x668>
 80080b6:	9a06      	ldr	r2, [sp, #24]
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	dd09      	ble.n	80080d0 <_dtoa_r+0x668>
 80080bc:	42b2      	cmp	r2, r6
 80080be:	9904      	ldr	r1, [sp, #16]
 80080c0:	bfa8      	it	ge
 80080c2:	4632      	movge	r2, r6
 80080c4:	1a89      	subs	r1, r1, r2
 80080c6:	9104      	str	r1, [sp, #16]
 80080c8:	9906      	ldr	r1, [sp, #24]
 80080ca:	1ab6      	subs	r6, r6, r2
 80080cc:	1a8a      	subs	r2, r1, r2
 80080ce:	9206      	str	r2, [sp, #24]
 80080d0:	b30b      	cbz	r3, 8008116 <_dtoa_r+0x6ae>
 80080d2:	9a08      	ldr	r2, [sp, #32]
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	f000 80c5 	beq.w	8008264 <_dtoa_r+0x7fc>
 80080da:	2c00      	cmp	r4, #0
 80080dc:	f000 80bf 	beq.w	800825e <_dtoa_r+0x7f6>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4622      	mov	r2, r4
 80080e4:	4648      	mov	r0, r9
 80080e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e8:	f000 fc12 	bl	8008910 <__pow5mult>
 80080ec:	9a01      	ldr	r2, [sp, #4]
 80080ee:	4601      	mov	r1, r0
 80080f0:	4605      	mov	r5, r0
 80080f2:	4648      	mov	r0, r9
 80080f4:	f000 fb6a 	bl	80087cc <__multiply>
 80080f8:	9901      	ldr	r1, [sp, #4]
 80080fa:	9005      	str	r0, [sp, #20]
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fa9b 	bl	8008638 <_Bfree>
 8008102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008104:	1b1b      	subs	r3, r3, r4
 8008106:	f000 80b0 	beq.w	800826a <_dtoa_r+0x802>
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	461a      	mov	r2, r3
 800810e:	4648      	mov	r0, r9
 8008110:	f000 fbfe 	bl	8008910 <__pow5mult>
 8008114:	9001      	str	r0, [sp, #4]
 8008116:	2101      	movs	r1, #1
 8008118:	4648      	mov	r0, r9
 800811a:	f000 fb41 	bl	80087a0 <__i2b>
 800811e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008120:	4604      	mov	r4, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 81da 	beq.w	80084dc <_dtoa_r+0xa74>
 8008128:	461a      	mov	r2, r3
 800812a:	4601      	mov	r1, r0
 800812c:	4648      	mov	r0, r9
 800812e:	f000 fbef 	bl	8008910 <__pow5mult>
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	2b01      	cmp	r3, #1
 8008136:	4604      	mov	r4, r0
 8008138:	f300 80a0 	bgt.w	800827c <_dtoa_r+0x814>
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 8096 	bne.w	8008270 <_dtoa_r+0x808>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800814a:	2a00      	cmp	r2, #0
 800814c:	f040 8092 	bne.w	8008274 <_dtoa_r+0x80c>
 8008150:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008154:	0d12      	lsrs	r2, r2, #20
 8008156:	0512      	lsls	r2, r2, #20
 8008158:	2a00      	cmp	r2, #0
 800815a:	f000 808d 	beq.w	8008278 <_dtoa_r+0x810>
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	3301      	adds	r3, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	3301      	adds	r3, #1
 8008168:	9306      	str	r3, [sp, #24]
 800816a:	2301      	movs	r3, #1
 800816c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800816e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81b9 	beq.w	80084e8 <_dtoa_r+0xa80>
 8008176:	6922      	ldr	r2, [r4, #16]
 8008178:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800817c:	6910      	ldr	r0, [r2, #16]
 800817e:	f000 fac3 	bl	8008708 <__hi0bits>
 8008182:	f1c0 0020 	rsb	r0, r0, #32
 8008186:	9b06      	ldr	r3, [sp, #24]
 8008188:	4418      	add	r0, r3
 800818a:	f010 001f 	ands.w	r0, r0, #31
 800818e:	f000 8081 	beq.w	8008294 <_dtoa_r+0x82c>
 8008192:	f1c0 0220 	rsb	r2, r0, #32
 8008196:	2a04      	cmp	r2, #4
 8008198:	dd73      	ble.n	8008282 <_dtoa_r+0x81a>
 800819a:	9b04      	ldr	r3, [sp, #16]
 800819c:	f1c0 001c 	rsb	r0, r0, #28
 80081a0:	4403      	add	r3, r0
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	9b06      	ldr	r3, [sp, #24]
 80081a6:	4406      	add	r6, r0
 80081a8:	4403      	add	r3, r0
 80081aa:	9306      	str	r3, [sp, #24]
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd05      	ble.n	80081be <_dtoa_r+0x756>
 80081b2:	9901      	ldr	r1, [sp, #4]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4648      	mov	r0, r9
 80081b8:	f000 fc04 	bl	80089c4 <__lshift>
 80081bc:	9001      	str	r0, [sp, #4]
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dd05      	ble.n	80081d0 <_dtoa_r+0x768>
 80081c4:	4621      	mov	r1, r4
 80081c6:	461a      	mov	r2, r3
 80081c8:	4648      	mov	r0, r9
 80081ca:	f000 fbfb 	bl	80089c4 <__lshift>
 80081ce:	4604      	mov	r4, r0
 80081d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d060      	beq.n	8008298 <_dtoa_r+0x830>
 80081d6:	9801      	ldr	r0, [sp, #4]
 80081d8:	4621      	mov	r1, r4
 80081da:	f000 fc5f 	bl	8008a9c <__mcmp>
 80081de:	2800      	cmp	r0, #0
 80081e0:	da5a      	bge.n	8008298 <_dtoa_r+0x830>
 80081e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	9901      	ldr	r1, [sp, #4]
 80081ea:	2300      	movs	r3, #0
 80081ec:	220a      	movs	r2, #10
 80081ee:	4648      	mov	r0, r9
 80081f0:	f000 fa44 	bl	800867c <__multadd>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	9001      	str	r0, [sp, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8177 	beq.w	80084ec <_dtoa_r+0xa84>
 80081fe:	4629      	mov	r1, r5
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	4648      	mov	r0, r9
 8008206:	f000 fa39 	bl	800867c <__multadd>
 800820a:	f1bb 0f00 	cmp.w	fp, #0
 800820e:	4605      	mov	r5, r0
 8008210:	dc6e      	bgt.n	80082f0 <_dtoa_r+0x888>
 8008212:	9b07      	ldr	r3, [sp, #28]
 8008214:	2b02      	cmp	r3, #2
 8008216:	dc48      	bgt.n	80082aa <_dtoa_r+0x842>
 8008218:	e06a      	b.n	80082f0 <_dtoa_r+0x888>
 800821a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800821c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008220:	e739      	b.n	8008096 <_dtoa_r+0x62e>
 8008222:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008226:	42a3      	cmp	r3, r4
 8008228:	db07      	blt.n	800823a <_dtoa_r+0x7d2>
 800822a:	f1ba 0f00 	cmp.w	sl, #0
 800822e:	eba3 0404 	sub.w	r4, r3, r4
 8008232:	db0b      	blt.n	800824c <_dtoa_r+0x7e4>
 8008234:	9e04      	ldr	r6, [sp, #16]
 8008236:	4652      	mov	r2, sl
 8008238:	e72f      	b.n	800809a <_dtoa_r+0x632>
 800823a:	1ae2      	subs	r2, r4, r3
 800823c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800823e:	9e04      	ldr	r6, [sp, #16]
 8008240:	4413      	add	r3, r2
 8008242:	930a      	str	r3, [sp, #40]	@ 0x28
 8008244:	4652      	mov	r2, sl
 8008246:	4623      	mov	r3, r4
 8008248:	2400      	movs	r4, #0
 800824a:	e726      	b.n	800809a <_dtoa_r+0x632>
 800824c:	9a04      	ldr	r2, [sp, #16]
 800824e:	eba2 060a 	sub.w	r6, r2, sl
 8008252:	2200      	movs	r2, #0
 8008254:	e721      	b.n	800809a <_dtoa_r+0x632>
 8008256:	9e04      	ldr	r6, [sp, #16]
 8008258:	9d08      	ldr	r5, [sp, #32]
 800825a:	461c      	mov	r4, r3
 800825c:	e72a      	b.n	80080b4 <_dtoa_r+0x64c>
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	9205      	str	r2, [sp, #20]
 8008262:	e752      	b.n	800810a <_dtoa_r+0x6a2>
 8008264:	9901      	ldr	r1, [sp, #4]
 8008266:	461a      	mov	r2, r3
 8008268:	e751      	b.n	800810e <_dtoa_r+0x6a6>
 800826a:	9b05      	ldr	r3, [sp, #20]
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	e752      	b.n	8008116 <_dtoa_r+0x6ae>
 8008270:	2300      	movs	r3, #0
 8008272:	e77b      	b.n	800816c <_dtoa_r+0x704>
 8008274:	9b02      	ldr	r3, [sp, #8]
 8008276:	e779      	b.n	800816c <_dtoa_r+0x704>
 8008278:	920b      	str	r2, [sp, #44]	@ 0x2c
 800827a:	e778      	b.n	800816e <_dtoa_r+0x706>
 800827c:	2300      	movs	r3, #0
 800827e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008280:	e779      	b.n	8008176 <_dtoa_r+0x70e>
 8008282:	d093      	beq.n	80081ac <_dtoa_r+0x744>
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	321c      	adds	r2, #28
 8008288:	4413      	add	r3, r2
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	9b06      	ldr	r3, [sp, #24]
 800828e:	4416      	add	r6, r2
 8008290:	4413      	add	r3, r2
 8008292:	e78a      	b.n	80081aa <_dtoa_r+0x742>
 8008294:	4602      	mov	r2, r0
 8008296:	e7f5      	b.n	8008284 <_dtoa_r+0x81c>
 8008298:	f1ba 0f00 	cmp.w	sl, #0
 800829c:	f8cd 8014 	str.w	r8, [sp, #20]
 80082a0:	46d3      	mov	fp, sl
 80082a2:	dc21      	bgt.n	80082e8 <_dtoa_r+0x880>
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	dd1e      	ble.n	80082e8 <_dtoa_r+0x880>
 80082aa:	f1bb 0f00 	cmp.w	fp, #0
 80082ae:	f47f addc 	bne.w	8007e6a <_dtoa_r+0x402>
 80082b2:	4621      	mov	r1, r4
 80082b4:	465b      	mov	r3, fp
 80082b6:	2205      	movs	r2, #5
 80082b8:	4648      	mov	r0, r9
 80082ba:	f000 f9df 	bl	800867c <__multadd>
 80082be:	4601      	mov	r1, r0
 80082c0:	4604      	mov	r4, r0
 80082c2:	9801      	ldr	r0, [sp, #4]
 80082c4:	f000 fbea 	bl	8008a9c <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f77f adce 	ble.w	8007e6a <_dtoa_r+0x402>
 80082ce:	463e      	mov	r6, r7
 80082d0:	2331      	movs	r3, #49	@ 0x31
 80082d2:	f806 3b01 	strb.w	r3, [r6], #1
 80082d6:	9b05      	ldr	r3, [sp, #20]
 80082d8:	3301      	adds	r3, #1
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	e5c9      	b.n	8007e72 <_dtoa_r+0x40a>
 80082de:	f8cd 8014 	str.w	r8, [sp, #20]
 80082e2:	4654      	mov	r4, sl
 80082e4:	4625      	mov	r5, r4
 80082e6:	e7f2      	b.n	80082ce <_dtoa_r+0x866>
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 8102 	beq.w	80084f4 <_dtoa_r+0xa8c>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	dd05      	ble.n	8008300 <_dtoa_r+0x898>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4632      	mov	r2, r6
 80082f8:	4648      	mov	r0, r9
 80082fa:	f000 fb63 	bl	80089c4 <__lshift>
 80082fe:	4605      	mov	r5, r0
 8008300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d058      	beq.n	80083b8 <_dtoa_r+0x950>
 8008306:	6869      	ldr	r1, [r5, #4]
 8008308:	4648      	mov	r0, r9
 800830a:	f000 f955 	bl	80085b8 <_Balloc>
 800830e:	4606      	mov	r6, r0
 8008310:	b928      	cbnz	r0, 800831e <_dtoa_r+0x8b6>
 8008312:	4b82      	ldr	r3, [pc, #520]	@ (800851c <_dtoa_r+0xab4>)
 8008314:	4602      	mov	r2, r0
 8008316:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800831a:	f7ff bbbe 	b.w	8007a9a <_dtoa_r+0x32>
 800831e:	692a      	ldr	r2, [r5, #16]
 8008320:	3202      	adds	r2, #2
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	f105 010c 	add.w	r1, r5, #12
 8008328:	300c      	adds	r0, #12
 800832a:	f7ff fafe 	bl	800792a <memcpy>
 800832e:	2201      	movs	r2, #1
 8008330:	4631      	mov	r1, r6
 8008332:	4648      	mov	r0, r9
 8008334:	f000 fb46 	bl	80089c4 <__lshift>
 8008338:	1c7b      	adds	r3, r7, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	eb07 030b 	add.w	r3, r7, fp
 8008340:	9309      	str	r3, [sp, #36]	@ 0x24
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	46a8      	mov	r8, r5
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	4605      	mov	r5, r0
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	9801      	ldr	r0, [sp, #4]
 8008352:	4621      	mov	r1, r4
 8008354:	f103 3bff 	add.w	fp, r3, #4294967295
 8008358:	f7ff fafc 	bl	8007954 <quorem>
 800835c:	4641      	mov	r1, r8
 800835e:	9002      	str	r0, [sp, #8]
 8008360:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008364:	9801      	ldr	r0, [sp, #4]
 8008366:	f000 fb99 	bl	8008a9c <__mcmp>
 800836a:	462a      	mov	r2, r5
 800836c:	9006      	str	r0, [sp, #24]
 800836e:	4621      	mov	r1, r4
 8008370:	4648      	mov	r0, r9
 8008372:	f000 fbaf 	bl	8008ad4 <__mdiff>
 8008376:	68c2      	ldr	r2, [r0, #12]
 8008378:	4606      	mov	r6, r0
 800837a:	b9fa      	cbnz	r2, 80083bc <_dtoa_r+0x954>
 800837c:	4601      	mov	r1, r0
 800837e:	9801      	ldr	r0, [sp, #4]
 8008380:	f000 fb8c 	bl	8008a9c <__mcmp>
 8008384:	4602      	mov	r2, r0
 8008386:	4631      	mov	r1, r6
 8008388:	4648      	mov	r0, r9
 800838a:	920a      	str	r2, [sp, #40]	@ 0x28
 800838c:	f000 f954 	bl	8008638 <_Bfree>
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008394:	9e04      	ldr	r6, [sp, #16]
 8008396:	ea42 0103 	orr.w	r1, r2, r3
 800839a:	9b08      	ldr	r3, [sp, #32]
 800839c:	4319      	orrs	r1, r3
 800839e:	d10f      	bne.n	80083c0 <_dtoa_r+0x958>
 80083a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083a4:	d028      	beq.n	80083f8 <_dtoa_r+0x990>
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd02      	ble.n	80083b2 <_dtoa_r+0x94a>
 80083ac:	9b02      	ldr	r3, [sp, #8]
 80083ae:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80083b2:	f88b a000 	strb.w	sl, [fp]
 80083b6:	e55e      	b.n	8007e76 <_dtoa_r+0x40e>
 80083b8:	4628      	mov	r0, r5
 80083ba:	e7bd      	b.n	8008338 <_dtoa_r+0x8d0>
 80083bc:	2201      	movs	r2, #1
 80083be:	e7e2      	b.n	8008386 <_dtoa_r+0x91e>
 80083c0:	9b06      	ldr	r3, [sp, #24]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	db04      	blt.n	80083d0 <_dtoa_r+0x968>
 80083c6:	9907      	ldr	r1, [sp, #28]
 80083c8:	430b      	orrs	r3, r1
 80083ca:	9908      	ldr	r1, [sp, #32]
 80083cc:	430b      	orrs	r3, r1
 80083ce:	d120      	bne.n	8008412 <_dtoa_r+0x9aa>
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	ddee      	ble.n	80083b2 <_dtoa_r+0x94a>
 80083d4:	9901      	ldr	r1, [sp, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	4648      	mov	r0, r9
 80083da:	f000 faf3 	bl	80089c4 <__lshift>
 80083de:	4621      	mov	r1, r4
 80083e0:	9001      	str	r0, [sp, #4]
 80083e2:	f000 fb5b 	bl	8008a9c <__mcmp>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	dc03      	bgt.n	80083f2 <_dtoa_r+0x98a>
 80083ea:	d1e2      	bne.n	80083b2 <_dtoa_r+0x94a>
 80083ec:	f01a 0f01 	tst.w	sl, #1
 80083f0:	d0df      	beq.n	80083b2 <_dtoa_r+0x94a>
 80083f2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80083f6:	d1d9      	bne.n	80083ac <_dtoa_r+0x944>
 80083f8:	2339      	movs	r3, #57	@ 0x39
 80083fa:	f88b 3000 	strb.w	r3, [fp]
 80083fe:	4633      	mov	r3, r6
 8008400:	461e      	mov	r6, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008408:	2a39      	cmp	r2, #57	@ 0x39
 800840a:	d052      	beq.n	80084b2 <_dtoa_r+0xa4a>
 800840c:	3201      	adds	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e531      	b.n	8007e76 <_dtoa_r+0x40e>
 8008412:	2a00      	cmp	r2, #0
 8008414:	dd07      	ble.n	8008426 <_dtoa_r+0x9be>
 8008416:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800841a:	d0ed      	beq.n	80083f8 <_dtoa_r+0x990>
 800841c:	f10a 0301 	add.w	r3, sl, #1
 8008420:	f88b 3000 	strb.w	r3, [fp]
 8008424:	e527      	b.n	8007e76 <_dtoa_r+0x40e>
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800842a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800842e:	4293      	cmp	r3, r2
 8008430:	d029      	beq.n	8008486 <_dtoa_r+0xa1e>
 8008432:	9901      	ldr	r1, [sp, #4]
 8008434:	2300      	movs	r3, #0
 8008436:	220a      	movs	r2, #10
 8008438:	4648      	mov	r0, r9
 800843a:	f000 f91f 	bl	800867c <__multadd>
 800843e:	45a8      	cmp	r8, r5
 8008440:	9001      	str	r0, [sp, #4]
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	f04f 020a 	mov.w	r2, #10
 800844a:	4641      	mov	r1, r8
 800844c:	4648      	mov	r0, r9
 800844e:	d107      	bne.n	8008460 <_dtoa_r+0x9f8>
 8008450:	f000 f914 	bl	800867c <__multadd>
 8008454:	4680      	mov	r8, r0
 8008456:	4605      	mov	r5, r0
 8008458:	9b04      	ldr	r3, [sp, #16]
 800845a:	3301      	adds	r3, #1
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	e776      	b.n	800834e <_dtoa_r+0x8e6>
 8008460:	f000 f90c 	bl	800867c <__multadd>
 8008464:	4629      	mov	r1, r5
 8008466:	4680      	mov	r8, r0
 8008468:	2300      	movs	r3, #0
 800846a:	220a      	movs	r2, #10
 800846c:	4648      	mov	r0, r9
 800846e:	f000 f905 	bl	800867c <__multadd>
 8008472:	4605      	mov	r5, r0
 8008474:	e7f0      	b.n	8008458 <_dtoa_r+0x9f0>
 8008476:	f1bb 0f00 	cmp.w	fp, #0
 800847a:	bfcc      	ite	gt
 800847c:	465e      	movgt	r6, fp
 800847e:	2601      	movle	r6, #1
 8008480:	443e      	add	r6, r7
 8008482:	f04f 0800 	mov.w	r8, #0
 8008486:	9901      	ldr	r1, [sp, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	4648      	mov	r0, r9
 800848c:	f000 fa9a 	bl	80089c4 <__lshift>
 8008490:	4621      	mov	r1, r4
 8008492:	9001      	str	r0, [sp, #4]
 8008494:	f000 fb02 	bl	8008a9c <__mcmp>
 8008498:	2800      	cmp	r0, #0
 800849a:	dcb0      	bgt.n	80083fe <_dtoa_r+0x996>
 800849c:	d102      	bne.n	80084a4 <_dtoa_r+0xa3c>
 800849e:	f01a 0f01 	tst.w	sl, #1
 80084a2:	d1ac      	bne.n	80083fe <_dtoa_r+0x996>
 80084a4:	4633      	mov	r3, r6
 80084a6:	461e      	mov	r6, r3
 80084a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ac:	2a30      	cmp	r2, #48	@ 0x30
 80084ae:	d0fa      	beq.n	80084a6 <_dtoa_r+0xa3e>
 80084b0:	e4e1      	b.n	8007e76 <_dtoa_r+0x40e>
 80084b2:	429f      	cmp	r7, r3
 80084b4:	d1a4      	bne.n	8008400 <_dtoa_r+0x998>
 80084b6:	9b05      	ldr	r3, [sp, #20]
 80084b8:	3301      	adds	r3, #1
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	2331      	movs	r3, #49	@ 0x31
 80084be:	703b      	strb	r3, [r7, #0]
 80084c0:	e4d9      	b.n	8007e76 <_dtoa_r+0x40e>
 80084c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084c4:	4f16      	ldr	r7, [pc, #88]	@ (8008520 <_dtoa_r+0xab8>)
 80084c6:	b11b      	cbz	r3, 80084d0 <_dtoa_r+0xa68>
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	4638      	mov	r0, r7
 80084d2:	b011      	add	sp, #68	@ 0x44
 80084d4:	ecbd 8b02 	vpop	{d8}
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	f77f ae2c 	ble.w	800813c <_dtoa_r+0x6d4>
 80084e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084e8:	2001      	movs	r0, #1
 80084ea:	e64c      	b.n	8008186 <_dtoa_r+0x71e>
 80084ec:	f1bb 0f00 	cmp.w	fp, #0
 80084f0:	f77f aed8 	ble.w	80082a4 <_dtoa_r+0x83c>
 80084f4:	463e      	mov	r6, r7
 80084f6:	9801      	ldr	r0, [sp, #4]
 80084f8:	4621      	mov	r1, r4
 80084fa:	f7ff fa2b 	bl	8007954 <quorem>
 80084fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008502:	f806 ab01 	strb.w	sl, [r6], #1
 8008506:	1bf2      	subs	r2, r6, r7
 8008508:	4593      	cmp	fp, r2
 800850a:	ddb4      	ble.n	8008476 <_dtoa_r+0xa0e>
 800850c:	9901      	ldr	r1, [sp, #4]
 800850e:	2300      	movs	r3, #0
 8008510:	220a      	movs	r2, #10
 8008512:	4648      	mov	r0, r9
 8008514:	f000 f8b2 	bl	800867c <__multadd>
 8008518:	9001      	str	r0, [sp, #4]
 800851a:	e7ec      	b.n	80084f6 <_dtoa_r+0xa8e>
 800851c:	0800923c 	.word	0x0800923c
 8008520:	080091c0 	.word	0x080091c0

08008524 <_free_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4605      	mov	r5, r0
 8008528:	2900      	cmp	r1, #0
 800852a:	d041      	beq.n	80085b0 <_free_r+0x8c>
 800852c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008530:	1f0c      	subs	r4, r1, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfb8      	it	lt
 8008536:	18e4      	addlt	r4, r4, r3
 8008538:	f7fe fad0 	bl	8006adc <__malloc_lock>
 800853c:	4a1d      	ldr	r2, [pc, #116]	@ (80085b4 <_free_r+0x90>)
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	b933      	cbnz	r3, 8008550 <_free_r+0x2c>
 8008542:	6063      	str	r3, [r4, #4]
 8008544:	6014      	str	r4, [r2, #0]
 8008546:	4628      	mov	r0, r5
 8008548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800854c:	f7fe bacc 	b.w	8006ae8 <__malloc_unlock>
 8008550:	42a3      	cmp	r3, r4
 8008552:	d908      	bls.n	8008566 <_free_r+0x42>
 8008554:	6820      	ldr	r0, [r4, #0]
 8008556:	1821      	adds	r1, r4, r0
 8008558:	428b      	cmp	r3, r1
 800855a:	bf01      	itttt	eq
 800855c:	6819      	ldreq	r1, [r3, #0]
 800855e:	685b      	ldreq	r3, [r3, #4]
 8008560:	1809      	addeq	r1, r1, r0
 8008562:	6021      	streq	r1, [r4, #0]
 8008564:	e7ed      	b.n	8008542 <_free_r+0x1e>
 8008566:	461a      	mov	r2, r3
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	b10b      	cbz	r3, 8008570 <_free_r+0x4c>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d9fa      	bls.n	8008566 <_free_r+0x42>
 8008570:	6811      	ldr	r1, [r2, #0]
 8008572:	1850      	adds	r0, r2, r1
 8008574:	42a0      	cmp	r0, r4
 8008576:	d10b      	bne.n	8008590 <_free_r+0x6c>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	4401      	add	r1, r0
 800857c:	1850      	adds	r0, r2, r1
 800857e:	4283      	cmp	r3, r0
 8008580:	6011      	str	r1, [r2, #0]
 8008582:	d1e0      	bne.n	8008546 <_free_r+0x22>
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	6053      	str	r3, [r2, #4]
 800858a:	4408      	add	r0, r1
 800858c:	6010      	str	r0, [r2, #0]
 800858e:	e7da      	b.n	8008546 <_free_r+0x22>
 8008590:	d902      	bls.n	8008598 <_free_r+0x74>
 8008592:	230c      	movs	r3, #12
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	e7d6      	b.n	8008546 <_free_r+0x22>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	1821      	adds	r1, r4, r0
 800859c:	428b      	cmp	r3, r1
 800859e:	bf04      	itt	eq
 80085a0:	6819      	ldreq	r1, [r3, #0]
 80085a2:	685b      	ldreq	r3, [r3, #4]
 80085a4:	6063      	str	r3, [r4, #4]
 80085a6:	bf04      	itt	eq
 80085a8:	1809      	addeq	r1, r1, r0
 80085aa:	6021      	streq	r1, [r4, #0]
 80085ac:	6054      	str	r4, [r2, #4]
 80085ae:	e7ca      	b.n	8008546 <_free_r+0x22>
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
 80085b2:	bf00      	nop
 80085b4:	240004ac 	.word	0x240004ac

080085b8 <_Balloc>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	69c6      	ldr	r6, [r0, #28]
 80085bc:	4604      	mov	r4, r0
 80085be:	460d      	mov	r5, r1
 80085c0:	b976      	cbnz	r6, 80085e0 <_Balloc+0x28>
 80085c2:	2010      	movs	r0, #16
 80085c4:	f7fe f9e0 	bl	8006988 <malloc>
 80085c8:	4602      	mov	r2, r0
 80085ca:	61e0      	str	r0, [r4, #28]
 80085cc:	b920      	cbnz	r0, 80085d8 <_Balloc+0x20>
 80085ce:	4b18      	ldr	r3, [pc, #96]	@ (8008630 <_Balloc+0x78>)
 80085d0:	4818      	ldr	r0, [pc, #96]	@ (8008634 <_Balloc+0x7c>)
 80085d2:	216b      	movs	r1, #107	@ 0x6b
 80085d4:	f7fe f9a6 	bl	8006924 <__assert_func>
 80085d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085dc:	6006      	str	r6, [r0, #0]
 80085de:	60c6      	str	r6, [r0, #12]
 80085e0:	69e6      	ldr	r6, [r4, #28]
 80085e2:	68f3      	ldr	r3, [r6, #12]
 80085e4:	b183      	cbz	r3, 8008608 <_Balloc+0x50>
 80085e6:	69e3      	ldr	r3, [r4, #28]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ee:	b9b8      	cbnz	r0, 8008620 <_Balloc+0x68>
 80085f0:	2101      	movs	r1, #1
 80085f2:	fa01 f605 	lsl.w	r6, r1, r5
 80085f6:	1d72      	adds	r2, r6, #5
 80085f8:	0092      	lsls	r2, r2, #2
 80085fa:	4620      	mov	r0, r4
 80085fc:	f7fe f9b0 	bl	8006960 <_calloc_r>
 8008600:	b160      	cbz	r0, 800861c <_Balloc+0x64>
 8008602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008606:	e00e      	b.n	8008626 <_Balloc+0x6e>
 8008608:	2221      	movs	r2, #33	@ 0x21
 800860a:	2104      	movs	r1, #4
 800860c:	4620      	mov	r0, r4
 800860e:	f7fe f9a7 	bl	8006960 <_calloc_r>
 8008612:	69e3      	ldr	r3, [r4, #28]
 8008614:	60f0      	str	r0, [r6, #12]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e4      	bne.n	80085e6 <_Balloc+0x2e>
 800861c:	2000      	movs	r0, #0
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	6802      	ldr	r2, [r0, #0]
 8008622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008626:	2300      	movs	r3, #0
 8008628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800862c:	e7f7      	b.n	800861e <_Balloc+0x66>
 800862e:	bf00      	nop
 8008630:	080091cd 	.word	0x080091cd
 8008634:	0800924d 	.word	0x0800924d

08008638 <_Bfree>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	69c6      	ldr	r6, [r0, #28]
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	b976      	cbnz	r6, 8008660 <_Bfree+0x28>
 8008642:	2010      	movs	r0, #16
 8008644:	f7fe f9a0 	bl	8006988 <malloc>
 8008648:	4602      	mov	r2, r0
 800864a:	61e8      	str	r0, [r5, #28]
 800864c:	b920      	cbnz	r0, 8008658 <_Bfree+0x20>
 800864e:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <_Bfree+0x3c>)
 8008650:	4809      	ldr	r0, [pc, #36]	@ (8008678 <_Bfree+0x40>)
 8008652:	218f      	movs	r1, #143	@ 0x8f
 8008654:	f7fe f966 	bl	8006924 <__assert_func>
 8008658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800865c:	6006      	str	r6, [r0, #0]
 800865e:	60c6      	str	r6, [r0, #12]
 8008660:	b13c      	cbz	r4, 8008672 <_Bfree+0x3a>
 8008662:	69eb      	ldr	r3, [r5, #28]
 8008664:	6862      	ldr	r2, [r4, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800866c:	6021      	str	r1, [r4, #0]
 800866e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	080091cd 	.word	0x080091cd
 8008678:	0800924d 	.word	0x0800924d

0800867c <__multadd>:
 800867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008680:	690d      	ldr	r5, [r1, #16]
 8008682:	4607      	mov	r7, r0
 8008684:	460c      	mov	r4, r1
 8008686:	461e      	mov	r6, r3
 8008688:	f101 0c14 	add.w	ip, r1, #20
 800868c:	2000      	movs	r0, #0
 800868e:	f8dc 3000 	ldr.w	r3, [ip]
 8008692:	b299      	uxth	r1, r3
 8008694:	fb02 6101 	mla	r1, r2, r1, r6
 8008698:	0c1e      	lsrs	r6, r3, #16
 800869a:	0c0b      	lsrs	r3, r1, #16
 800869c:	fb02 3306 	mla	r3, r2, r6, r3
 80086a0:	b289      	uxth	r1, r1
 80086a2:	3001      	adds	r0, #1
 80086a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086a8:	4285      	cmp	r5, r0
 80086aa:	f84c 1b04 	str.w	r1, [ip], #4
 80086ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086b2:	dcec      	bgt.n	800868e <__multadd+0x12>
 80086b4:	b30e      	cbz	r6, 80086fa <__multadd+0x7e>
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	42ab      	cmp	r3, r5
 80086ba:	dc19      	bgt.n	80086f0 <__multadd+0x74>
 80086bc:	6861      	ldr	r1, [r4, #4]
 80086be:	4638      	mov	r0, r7
 80086c0:	3101      	adds	r1, #1
 80086c2:	f7ff ff79 	bl	80085b8 <_Balloc>
 80086c6:	4680      	mov	r8, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <__multadd+0x5a>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008700 <__multadd+0x84>)
 80086ce:	480d      	ldr	r0, [pc, #52]	@ (8008704 <__multadd+0x88>)
 80086d0:	21ba      	movs	r1, #186	@ 0xba
 80086d2:	f7fe f927 	bl	8006924 <__assert_func>
 80086d6:	6922      	ldr	r2, [r4, #16]
 80086d8:	3202      	adds	r2, #2
 80086da:	f104 010c 	add.w	r1, r4, #12
 80086de:	0092      	lsls	r2, r2, #2
 80086e0:	300c      	adds	r0, #12
 80086e2:	f7ff f922 	bl	800792a <memcpy>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ffa5 	bl	8008638 <_Bfree>
 80086ee:	4644      	mov	r4, r8
 80086f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086f4:	3501      	adds	r5, #1
 80086f6:	615e      	str	r6, [r3, #20]
 80086f8:	6125      	str	r5, [r4, #16]
 80086fa:	4620      	mov	r0, r4
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	0800923c 	.word	0x0800923c
 8008704:	0800924d 	.word	0x0800924d

08008708 <__hi0bits>:
 8008708:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800870c:	4603      	mov	r3, r0
 800870e:	bf36      	itet	cc
 8008710:	0403      	lslcc	r3, r0, #16
 8008712:	2000      	movcs	r0, #0
 8008714:	2010      	movcc	r0, #16
 8008716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800871a:	bf3c      	itt	cc
 800871c:	021b      	lslcc	r3, r3, #8
 800871e:	3008      	addcc	r0, #8
 8008720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008724:	bf3c      	itt	cc
 8008726:	011b      	lslcc	r3, r3, #4
 8008728:	3004      	addcc	r0, #4
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872e:	bf3c      	itt	cc
 8008730:	009b      	lslcc	r3, r3, #2
 8008732:	3002      	addcc	r0, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	db05      	blt.n	8008744 <__hi0bits+0x3c>
 8008738:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800873c:	f100 0001 	add.w	r0, r0, #1
 8008740:	bf08      	it	eq
 8008742:	2020      	moveq	r0, #32
 8008744:	4770      	bx	lr

08008746 <__lo0bits>:
 8008746:	6803      	ldr	r3, [r0, #0]
 8008748:	4602      	mov	r2, r0
 800874a:	f013 0007 	ands.w	r0, r3, #7
 800874e:	d00b      	beq.n	8008768 <__lo0bits+0x22>
 8008750:	07d9      	lsls	r1, r3, #31
 8008752:	d421      	bmi.n	8008798 <__lo0bits+0x52>
 8008754:	0798      	lsls	r0, r3, #30
 8008756:	bf49      	itett	mi
 8008758:	085b      	lsrmi	r3, r3, #1
 800875a:	089b      	lsrpl	r3, r3, #2
 800875c:	2001      	movmi	r0, #1
 800875e:	6013      	strmi	r3, [r2, #0]
 8008760:	bf5c      	itt	pl
 8008762:	6013      	strpl	r3, [r2, #0]
 8008764:	2002      	movpl	r0, #2
 8008766:	4770      	bx	lr
 8008768:	b299      	uxth	r1, r3
 800876a:	b909      	cbnz	r1, 8008770 <__lo0bits+0x2a>
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	2010      	movs	r0, #16
 8008770:	b2d9      	uxtb	r1, r3
 8008772:	b909      	cbnz	r1, 8008778 <__lo0bits+0x32>
 8008774:	3008      	adds	r0, #8
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	0719      	lsls	r1, r3, #28
 800877a:	bf04      	itt	eq
 800877c:	091b      	lsreq	r3, r3, #4
 800877e:	3004      	addeq	r0, #4
 8008780:	0799      	lsls	r1, r3, #30
 8008782:	bf04      	itt	eq
 8008784:	089b      	lsreq	r3, r3, #2
 8008786:	3002      	addeq	r0, #2
 8008788:	07d9      	lsls	r1, r3, #31
 800878a:	d403      	bmi.n	8008794 <__lo0bits+0x4e>
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	f100 0001 	add.w	r0, r0, #1
 8008792:	d003      	beq.n	800879c <__lo0bits+0x56>
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	4770      	bx	lr
 8008798:	2000      	movs	r0, #0
 800879a:	4770      	bx	lr
 800879c:	2020      	movs	r0, #32
 800879e:	4770      	bx	lr

080087a0 <__i2b>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	460c      	mov	r4, r1
 80087a4:	2101      	movs	r1, #1
 80087a6:	f7ff ff07 	bl	80085b8 <_Balloc>
 80087aa:	4602      	mov	r2, r0
 80087ac:	b928      	cbnz	r0, 80087ba <__i2b+0x1a>
 80087ae:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <__i2b+0x24>)
 80087b0:	4805      	ldr	r0, [pc, #20]	@ (80087c8 <__i2b+0x28>)
 80087b2:	f240 1145 	movw	r1, #325	@ 0x145
 80087b6:	f7fe f8b5 	bl	8006924 <__assert_func>
 80087ba:	2301      	movs	r3, #1
 80087bc:	6144      	str	r4, [r0, #20]
 80087be:	6103      	str	r3, [r0, #16]
 80087c0:	bd10      	pop	{r4, pc}
 80087c2:	bf00      	nop
 80087c4:	0800923c 	.word	0x0800923c
 80087c8:	0800924d 	.word	0x0800924d

080087cc <__multiply>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4617      	mov	r7, r2
 80087d2:	690a      	ldr	r2, [r1, #16]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	bfa8      	it	ge
 80087da:	463b      	movge	r3, r7
 80087dc:	4689      	mov	r9, r1
 80087de:	bfa4      	itt	ge
 80087e0:	460f      	movge	r7, r1
 80087e2:	4699      	movge	r9, r3
 80087e4:	693d      	ldr	r5, [r7, #16]
 80087e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	eb05 060a 	add.w	r6, r5, sl
 80087f2:	42b3      	cmp	r3, r6
 80087f4:	b085      	sub	sp, #20
 80087f6:	bfb8      	it	lt
 80087f8:	3101      	addlt	r1, #1
 80087fa:	f7ff fedd 	bl	80085b8 <_Balloc>
 80087fe:	b930      	cbnz	r0, 800880e <__multiply+0x42>
 8008800:	4602      	mov	r2, r0
 8008802:	4b41      	ldr	r3, [pc, #260]	@ (8008908 <__multiply+0x13c>)
 8008804:	4841      	ldr	r0, [pc, #260]	@ (800890c <__multiply+0x140>)
 8008806:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800880a:	f7fe f88b 	bl	8006924 <__assert_func>
 800880e:	f100 0414 	add.w	r4, r0, #20
 8008812:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008816:	4623      	mov	r3, r4
 8008818:	2200      	movs	r2, #0
 800881a:	4573      	cmp	r3, lr
 800881c:	d320      	bcc.n	8008860 <__multiply+0x94>
 800881e:	f107 0814 	add.w	r8, r7, #20
 8008822:	f109 0114 	add.w	r1, r9, #20
 8008826:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800882a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	1beb      	subs	r3, r5, r7
 8008832:	3b15      	subs	r3, #21
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	3304      	adds	r3, #4
 800883a:	3715      	adds	r7, #21
 800883c:	42bd      	cmp	r5, r7
 800883e:	bf38      	it	cc
 8008840:	2304      	movcc	r3, #4
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	9b02      	ldr	r3, [sp, #8]
 8008846:	9103      	str	r1, [sp, #12]
 8008848:	428b      	cmp	r3, r1
 800884a:	d80c      	bhi.n	8008866 <__multiply+0x9a>
 800884c:	2e00      	cmp	r6, #0
 800884e:	dd03      	ble.n	8008858 <__multiply+0x8c>
 8008850:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008854:	2b00      	cmp	r3, #0
 8008856:	d055      	beq.n	8008904 <__multiply+0x138>
 8008858:	6106      	str	r6, [r0, #16]
 800885a:	b005      	add	sp, #20
 800885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008860:	f843 2b04 	str.w	r2, [r3], #4
 8008864:	e7d9      	b.n	800881a <__multiply+0x4e>
 8008866:	f8b1 a000 	ldrh.w	sl, [r1]
 800886a:	f1ba 0f00 	cmp.w	sl, #0
 800886e:	d01f      	beq.n	80088b0 <__multiply+0xe4>
 8008870:	46c4      	mov	ip, r8
 8008872:	46a1      	mov	r9, r4
 8008874:	2700      	movs	r7, #0
 8008876:	f85c 2b04 	ldr.w	r2, [ip], #4
 800887a:	f8d9 3000 	ldr.w	r3, [r9]
 800887e:	fa1f fb82 	uxth.w	fp, r2
 8008882:	b29b      	uxth	r3, r3
 8008884:	fb0a 330b 	mla	r3, sl, fp, r3
 8008888:	443b      	add	r3, r7
 800888a:	f8d9 7000 	ldr.w	r7, [r9]
 800888e:	0c12      	lsrs	r2, r2, #16
 8008890:	0c3f      	lsrs	r7, r7, #16
 8008892:	fb0a 7202 	mla	r2, sl, r2, r7
 8008896:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800889a:	b29b      	uxth	r3, r3
 800889c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a0:	4565      	cmp	r5, ip
 80088a2:	f849 3b04 	str.w	r3, [r9], #4
 80088a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80088aa:	d8e4      	bhi.n	8008876 <__multiply+0xaa>
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	50e7      	str	r7, [r4, r3]
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088b6:	3104      	adds	r1, #4
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	d020      	beq.n	8008900 <__multiply+0x134>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	4647      	mov	r7, r8
 80088c2:	46a4      	mov	ip, r4
 80088c4:	f04f 0a00 	mov.w	sl, #0
 80088c8:	f8b7 b000 	ldrh.w	fp, [r7]
 80088cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80088d0:	fb09 220b 	mla	r2, r9, fp, r2
 80088d4:	4452      	add	r2, sl
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088dc:	f84c 3b04 	str.w	r3, [ip], #4
 80088e0:	f857 3b04 	ldr.w	r3, [r7], #4
 80088e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088e8:	f8bc 3000 	ldrh.w	r3, [ip]
 80088ec:	fb09 330a 	mla	r3, r9, sl, r3
 80088f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088f4:	42bd      	cmp	r5, r7
 80088f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088fa:	d8e5      	bhi.n	80088c8 <__multiply+0xfc>
 80088fc:	9a01      	ldr	r2, [sp, #4]
 80088fe:	50a3      	str	r3, [r4, r2]
 8008900:	3404      	adds	r4, #4
 8008902:	e79f      	b.n	8008844 <__multiply+0x78>
 8008904:	3e01      	subs	r6, #1
 8008906:	e7a1      	b.n	800884c <__multiply+0x80>
 8008908:	0800923c 	.word	0x0800923c
 800890c:	0800924d 	.word	0x0800924d

08008910 <__pow5mult>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	4615      	mov	r5, r2
 8008916:	f012 0203 	ands.w	r2, r2, #3
 800891a:	4607      	mov	r7, r0
 800891c:	460e      	mov	r6, r1
 800891e:	d007      	beq.n	8008930 <__pow5mult+0x20>
 8008920:	4c25      	ldr	r4, [pc, #148]	@ (80089b8 <__pow5mult+0xa8>)
 8008922:	3a01      	subs	r2, #1
 8008924:	2300      	movs	r3, #0
 8008926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800892a:	f7ff fea7 	bl	800867c <__multadd>
 800892e:	4606      	mov	r6, r0
 8008930:	10ad      	asrs	r5, r5, #2
 8008932:	d03d      	beq.n	80089b0 <__pow5mult+0xa0>
 8008934:	69fc      	ldr	r4, [r7, #28]
 8008936:	b97c      	cbnz	r4, 8008958 <__pow5mult+0x48>
 8008938:	2010      	movs	r0, #16
 800893a:	f7fe f825 	bl	8006988 <malloc>
 800893e:	4602      	mov	r2, r0
 8008940:	61f8      	str	r0, [r7, #28]
 8008942:	b928      	cbnz	r0, 8008950 <__pow5mult+0x40>
 8008944:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <__pow5mult+0xac>)
 8008946:	481e      	ldr	r0, [pc, #120]	@ (80089c0 <__pow5mult+0xb0>)
 8008948:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800894c:	f7fd ffea 	bl	8006924 <__assert_func>
 8008950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008954:	6004      	str	r4, [r0, #0]
 8008956:	60c4      	str	r4, [r0, #12]
 8008958:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800895c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008960:	b94c      	cbnz	r4, 8008976 <__pow5mult+0x66>
 8008962:	f240 2171 	movw	r1, #625	@ 0x271
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff ff1a 	bl	80087a0 <__i2b>
 800896c:	2300      	movs	r3, #0
 800896e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008972:	4604      	mov	r4, r0
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	f04f 0900 	mov.w	r9, #0
 800897a:	07eb      	lsls	r3, r5, #31
 800897c:	d50a      	bpl.n	8008994 <__pow5mult+0x84>
 800897e:	4631      	mov	r1, r6
 8008980:	4622      	mov	r2, r4
 8008982:	4638      	mov	r0, r7
 8008984:	f7ff ff22 	bl	80087cc <__multiply>
 8008988:	4631      	mov	r1, r6
 800898a:	4680      	mov	r8, r0
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff fe53 	bl	8008638 <_Bfree>
 8008992:	4646      	mov	r6, r8
 8008994:	106d      	asrs	r5, r5, #1
 8008996:	d00b      	beq.n	80089b0 <__pow5mult+0xa0>
 8008998:	6820      	ldr	r0, [r4, #0]
 800899a:	b938      	cbnz	r0, 80089ac <__pow5mult+0x9c>
 800899c:	4622      	mov	r2, r4
 800899e:	4621      	mov	r1, r4
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff ff13 	bl	80087cc <__multiply>
 80089a6:	6020      	str	r0, [r4, #0]
 80089a8:	f8c0 9000 	str.w	r9, [r0]
 80089ac:	4604      	mov	r4, r0
 80089ae:	e7e4      	b.n	800897a <__pow5mult+0x6a>
 80089b0:	4630      	mov	r0, r6
 80089b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b6:	bf00      	nop
 80089b8:	080092c4 	.word	0x080092c4
 80089bc:	080091cd 	.word	0x080091cd
 80089c0:	0800924d 	.word	0x0800924d

080089c4 <__lshift>:
 80089c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c8:	460c      	mov	r4, r1
 80089ca:	6849      	ldr	r1, [r1, #4]
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	4607      	mov	r7, r0
 80089d6:	4691      	mov	r9, r2
 80089d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089dc:	f108 0601 	add.w	r6, r8, #1
 80089e0:	42b3      	cmp	r3, r6
 80089e2:	db0b      	blt.n	80089fc <__lshift+0x38>
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff fde7 	bl	80085b8 <_Balloc>
 80089ea:	4605      	mov	r5, r0
 80089ec:	b948      	cbnz	r0, 8008a02 <__lshift+0x3e>
 80089ee:	4602      	mov	r2, r0
 80089f0:	4b28      	ldr	r3, [pc, #160]	@ (8008a94 <__lshift+0xd0>)
 80089f2:	4829      	ldr	r0, [pc, #164]	@ (8008a98 <__lshift+0xd4>)
 80089f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089f8:	f7fd ff94 	bl	8006924 <__assert_func>
 80089fc:	3101      	adds	r1, #1
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	e7ee      	b.n	80089e0 <__lshift+0x1c>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f100 0114 	add.w	r1, r0, #20
 8008a08:	f100 0210 	add.w	r2, r0, #16
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	4553      	cmp	r3, sl
 8008a10:	db33      	blt.n	8008a7a <__lshift+0xb6>
 8008a12:	6920      	ldr	r0, [r4, #16]
 8008a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a18:	f104 0314 	add.w	r3, r4, #20
 8008a1c:	f019 091f 	ands.w	r9, r9, #31
 8008a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a28:	d02b      	beq.n	8008a82 <__lshift+0xbe>
 8008a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a2e:	468a      	mov	sl, r1
 8008a30:	2200      	movs	r2, #0
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	fa00 f009 	lsl.w	r0, r0, r9
 8008a38:	4310      	orrs	r0, r2
 8008a3a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a42:	459c      	cmp	ip, r3
 8008a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a48:	d8f3      	bhi.n	8008a32 <__lshift+0x6e>
 8008a4a:	ebac 0304 	sub.w	r3, ip, r4
 8008a4e:	3b15      	subs	r3, #21
 8008a50:	f023 0303 	bic.w	r3, r3, #3
 8008a54:	3304      	adds	r3, #4
 8008a56:	f104 0015 	add.w	r0, r4, #21
 8008a5a:	4560      	cmp	r0, ip
 8008a5c:	bf88      	it	hi
 8008a5e:	2304      	movhi	r3, #4
 8008a60:	50ca      	str	r2, [r1, r3]
 8008a62:	b10a      	cbz	r2, 8008a68 <__lshift+0xa4>
 8008a64:	f108 0602 	add.w	r6, r8, #2
 8008a68:	3e01      	subs	r6, #1
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	612e      	str	r6, [r5, #16]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	f7ff fde2 	bl	8008638 <_Bfree>
 8008a74:	4628      	mov	r0, r5
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a7e:	3301      	adds	r3, #1
 8008a80:	e7c5      	b.n	8008a0e <__lshift+0x4a>
 8008a82:	3904      	subs	r1, #4
 8008a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a8c:	459c      	cmp	ip, r3
 8008a8e:	d8f9      	bhi.n	8008a84 <__lshift+0xc0>
 8008a90:	e7ea      	b.n	8008a68 <__lshift+0xa4>
 8008a92:	bf00      	nop
 8008a94:	0800923c 	.word	0x0800923c
 8008a98:	0800924d 	.word	0x0800924d

08008a9c <__mcmp>:
 8008a9c:	690a      	ldr	r2, [r1, #16]
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6900      	ldr	r0, [r0, #16]
 8008aa2:	1a80      	subs	r0, r0, r2
 8008aa4:	b530      	push	{r4, r5, lr}
 8008aa6:	d10e      	bne.n	8008ac6 <__mcmp+0x2a>
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	3114      	adds	r1, #20
 8008aac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ab4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ab8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008abc:	4295      	cmp	r5, r2
 8008abe:	d003      	beq.n	8008ac8 <__mcmp+0x2c>
 8008ac0:	d205      	bcs.n	8008ace <__mcmp+0x32>
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d3f3      	bcc.n	8008ab4 <__mcmp+0x18>
 8008acc:	e7fb      	b.n	8008ac6 <__mcmp+0x2a>
 8008ace:	2001      	movs	r0, #1
 8008ad0:	e7f9      	b.n	8008ac6 <__mcmp+0x2a>
	...

08008ad4 <__mdiff>:
 8008ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	4689      	mov	r9, r1
 8008ada:	4606      	mov	r6, r0
 8008adc:	4611      	mov	r1, r2
 8008ade:	4648      	mov	r0, r9
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	f7ff ffdb 	bl	8008a9c <__mcmp>
 8008ae6:	1e05      	subs	r5, r0, #0
 8008ae8:	d112      	bne.n	8008b10 <__mdiff+0x3c>
 8008aea:	4629      	mov	r1, r5
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff fd63 	bl	80085b8 <_Balloc>
 8008af2:	4602      	mov	r2, r0
 8008af4:	b928      	cbnz	r0, 8008b02 <__mdiff+0x2e>
 8008af6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf4 <__mdiff+0x120>)
 8008af8:	f240 2137 	movw	r1, #567	@ 0x237
 8008afc:	483e      	ldr	r0, [pc, #248]	@ (8008bf8 <__mdiff+0x124>)
 8008afe:	f7fd ff11 	bl	8006924 <__assert_func>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b08:	4610      	mov	r0, r2
 8008b0a:	b003      	add	sp, #12
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b10:	bfbc      	itt	lt
 8008b12:	464b      	movlt	r3, r9
 8008b14:	46a1      	movlt	r9, r4
 8008b16:	4630      	mov	r0, r6
 8008b18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b1c:	bfba      	itte	lt
 8008b1e:	461c      	movlt	r4, r3
 8008b20:	2501      	movlt	r5, #1
 8008b22:	2500      	movge	r5, #0
 8008b24:	f7ff fd48 	bl	80085b8 <_Balloc>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	b918      	cbnz	r0, 8008b34 <__mdiff+0x60>
 8008b2c:	4b31      	ldr	r3, [pc, #196]	@ (8008bf4 <__mdiff+0x120>)
 8008b2e:	f240 2145 	movw	r1, #581	@ 0x245
 8008b32:	e7e3      	b.n	8008afc <__mdiff+0x28>
 8008b34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b38:	6926      	ldr	r6, [r4, #16]
 8008b3a:	60c5      	str	r5, [r0, #12]
 8008b3c:	f109 0310 	add.w	r3, r9, #16
 8008b40:	f109 0514 	add.w	r5, r9, #20
 8008b44:	f104 0e14 	add.w	lr, r4, #20
 8008b48:	f100 0b14 	add.w	fp, r0, #20
 8008b4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	46d9      	mov	r9, fp
 8008b58:	f04f 0c00 	mov.w	ip, #0
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	fa1f f38a 	uxth.w	r3, sl
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	b283      	uxth	r3, r0
 8008b70:	1acb      	subs	r3, r1, r3
 8008b72:	0c00      	lsrs	r0, r0, #16
 8008b74:	4463      	add	r3, ip
 8008b76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b84:	4576      	cmp	r6, lr
 8008b86:	f849 3b04 	str.w	r3, [r9], #4
 8008b8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b8e:	d8e5      	bhi.n	8008b5c <__mdiff+0x88>
 8008b90:	1b33      	subs	r3, r6, r4
 8008b92:	3b15      	subs	r3, #21
 8008b94:	f023 0303 	bic.w	r3, r3, #3
 8008b98:	3415      	adds	r4, #21
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	bf38      	it	cc
 8008ba0:	2304      	movcc	r3, #4
 8008ba2:	441d      	add	r5, r3
 8008ba4:	445b      	add	r3, fp
 8008ba6:	461e      	mov	r6, r3
 8008ba8:	462c      	mov	r4, r5
 8008baa:	4544      	cmp	r4, r8
 8008bac:	d30e      	bcc.n	8008bcc <__mdiff+0xf8>
 8008bae:	f108 0103 	add.w	r1, r8, #3
 8008bb2:	1b49      	subs	r1, r1, r5
 8008bb4:	f021 0103 	bic.w	r1, r1, #3
 8008bb8:	3d03      	subs	r5, #3
 8008bba:	45a8      	cmp	r8, r5
 8008bbc:	bf38      	it	cc
 8008bbe:	2100      	movcc	r1, #0
 8008bc0:	440b      	add	r3, r1
 8008bc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bc6:	b191      	cbz	r1, 8008bee <__mdiff+0x11a>
 8008bc8:	6117      	str	r7, [r2, #16]
 8008bca:	e79d      	b.n	8008b08 <__mdiff+0x34>
 8008bcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bd0:	46e6      	mov	lr, ip
 8008bd2:	0c08      	lsrs	r0, r1, #16
 8008bd4:	fa1c fc81 	uxtah	ip, ip, r1
 8008bd8:	4471      	add	r1, lr
 8008bda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bde:	b289      	uxth	r1, r1
 8008be0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008be4:	f846 1b04 	str.w	r1, [r6], #4
 8008be8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bec:	e7dd      	b.n	8008baa <__mdiff+0xd6>
 8008bee:	3f01      	subs	r7, #1
 8008bf0:	e7e7      	b.n	8008bc2 <__mdiff+0xee>
 8008bf2:	bf00      	nop
 8008bf4:	0800923c 	.word	0x0800923c
 8008bf8:	0800924d 	.word	0x0800924d

08008bfc <__d2b>:
 8008bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	460f      	mov	r7, r1
 8008c02:	2101      	movs	r1, #1
 8008c04:	ec59 8b10 	vmov	r8, r9, d0
 8008c08:	4616      	mov	r6, r2
 8008c0a:	f7ff fcd5 	bl	80085b8 <_Balloc>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	b930      	cbnz	r0, 8008c20 <__d2b+0x24>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b23      	ldr	r3, [pc, #140]	@ (8008ca4 <__d2b+0xa8>)
 8008c16:	4824      	ldr	r0, [pc, #144]	@ (8008ca8 <__d2b+0xac>)
 8008c18:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c1c:	f7fd fe82 	bl	8006924 <__assert_func>
 8008c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c28:	b10d      	cbz	r5, 8008c2e <__d2b+0x32>
 8008c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	f1b8 0300 	subs.w	r3, r8, #0
 8008c34:	d023      	beq.n	8008c7e <__d2b+0x82>
 8008c36:	4668      	mov	r0, sp
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	f7ff fd84 	bl	8008746 <__lo0bits>
 8008c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c42:	b1d0      	cbz	r0, 8008c7a <__d2b+0x7e>
 8008c44:	f1c0 0320 	rsb	r3, r0, #32
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	40c2      	lsrs	r2, r0
 8008c50:	6163      	str	r3, [r4, #20]
 8008c52:	9201      	str	r2, [sp, #4]
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	61a3      	str	r3, [r4, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2201      	moveq	r2, #1
 8008c5e:	2202      	movne	r2, #2
 8008c60:	6122      	str	r2, [r4, #16]
 8008c62:	b1a5      	cbz	r5, 8008c8e <__d2b+0x92>
 8008c64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c68:	4405      	add	r5, r0
 8008c6a:	603d      	str	r5, [r7, #0]
 8008c6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c70:	6030      	str	r0, [r6, #0]
 8008c72:	4620      	mov	r0, r4
 8008c74:	b003      	add	sp, #12
 8008c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c7a:	6161      	str	r1, [r4, #20]
 8008c7c:	e7ea      	b.n	8008c54 <__d2b+0x58>
 8008c7e:	a801      	add	r0, sp, #4
 8008c80:	f7ff fd61 	bl	8008746 <__lo0bits>
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	3020      	adds	r0, #32
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	e7e8      	b.n	8008c60 <__d2b+0x64>
 8008c8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c96:	6038      	str	r0, [r7, #0]
 8008c98:	6918      	ldr	r0, [r3, #16]
 8008c9a:	f7ff fd35 	bl	8008708 <__hi0bits>
 8008c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca2:	e7e5      	b.n	8008c70 <__d2b+0x74>
 8008ca4:	0800923c 	.word	0x0800923c
 8008ca8:	0800924d 	.word	0x0800924d

08008cac <__sfputc_r>:
 8008cac:	6893      	ldr	r3, [r2, #8]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	b410      	push	{r4}
 8008cb4:	6093      	str	r3, [r2, #8]
 8008cb6:	da08      	bge.n	8008cca <__sfputc_r+0x1e>
 8008cb8:	6994      	ldr	r4, [r2, #24]
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	db01      	blt.n	8008cc2 <__sfputc_r+0x16>
 8008cbe:	290a      	cmp	r1, #10
 8008cc0:	d103      	bne.n	8008cca <__sfputc_r+0x1e>
 8008cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc6:	f7fe bd0c 	b.w	80076e2 <__swbuf_r>
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	1c58      	adds	r0, r3, #1
 8008cce:	6010      	str	r0, [r2, #0]
 8008cd0:	7019      	strb	r1, [r3, #0]
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <__sfputs_r>:
 8008cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	18d5      	adds	r5, r2, r3
 8008ce4:	42ac      	cmp	r4, r5
 8008ce6:	d101      	bne.n	8008cec <__sfputs_r+0x12>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e007      	b.n	8008cfc <__sfputs_r+0x22>
 8008cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf0:	463a      	mov	r2, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ffda 	bl	8008cac <__sfputc_r>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d1f3      	bne.n	8008ce4 <__sfputs_r+0xa>
 8008cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d00 <_vfiprintf_r>:
 8008d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	460d      	mov	r5, r1
 8008d06:	b09d      	sub	sp, #116	@ 0x74
 8008d08:	4614      	mov	r4, r2
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	b118      	cbz	r0, 8008d18 <_vfiprintf_r+0x18>
 8008d10:	6a03      	ldr	r3, [r0, #32]
 8008d12:	b90b      	cbnz	r3, 8008d18 <_vfiprintf_r+0x18>
 8008d14:	f7fe fc5a 	bl	80075cc <__sinit>
 8008d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d1a:	07d9      	lsls	r1, r3, #31
 8008d1c:	d405      	bmi.n	8008d2a <_vfiprintf_r+0x2a>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	059a      	lsls	r2, r3, #22
 8008d22:	d402      	bmi.n	8008d2a <_vfiprintf_r+0x2a>
 8008d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d26:	f7fe fdfe 	bl	8007926 <__retarget_lock_acquire_recursive>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	071b      	lsls	r3, r3, #28
 8008d2e:	d501      	bpl.n	8008d34 <_vfiprintf_r+0x34>
 8008d30:	692b      	ldr	r3, [r5, #16]
 8008d32:	b99b      	cbnz	r3, 8008d5c <_vfiprintf_r+0x5c>
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7fe fd12 	bl	8007760 <__swsetup_r>
 8008d3c:	b170      	cbz	r0, 8008d5c <_vfiprintf_r+0x5c>
 8008d3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d40:	07dc      	lsls	r4, r3, #31
 8008d42:	d504      	bpl.n	8008d4e <_vfiprintf_r+0x4e>
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	b01d      	add	sp, #116	@ 0x74
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	0598      	lsls	r0, r3, #22
 8008d52:	d4f7      	bmi.n	8008d44 <_vfiprintf_r+0x44>
 8008d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d56:	f7fe fde7 	bl	8007928 <__retarget_lock_release_recursive>
 8008d5a:	e7f3      	b.n	8008d44 <_vfiprintf_r+0x44>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d60:	2320      	movs	r3, #32
 8008d62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6a:	2330      	movs	r3, #48	@ 0x30
 8008d6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f1c <_vfiprintf_r+0x21c>
 8008d70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d74:	f04f 0901 	mov.w	r9, #1
 8008d78:	4623      	mov	r3, r4
 8008d7a:	469a      	mov	sl, r3
 8008d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d80:	b10a      	cbz	r2, 8008d86 <_vfiprintf_r+0x86>
 8008d82:	2a25      	cmp	r2, #37	@ 0x25
 8008d84:	d1f9      	bne.n	8008d7a <_vfiprintf_r+0x7a>
 8008d86:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8a:	d00b      	beq.n	8008da4 <_vfiprintf_r+0xa4>
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7ff ffa1 	bl	8008cda <__sfputs_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f000 80a7 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	445a      	add	r2, fp
 8008da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da4:	f89a 3000 	ldrb.w	r3, [sl]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 809f 	beq.w	8008eec <_vfiprintf_r+0x1ec>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db8:	f10a 0a01 	add.w	sl, sl, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2205      	movs	r2, #5
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4853      	ldr	r0, [pc, #332]	@ (8008f1c <_vfiprintf_r+0x21c>)
 8008dd0:	f7f7 fa86 	bl	80002e0 <memchr>
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	b9d8      	cbnz	r0, 8008e10 <_vfiprintf_r+0x110>
 8008dd8:	06d1      	lsls	r1, r2, #27
 8008dda:	bf44      	itt	mi
 8008ddc:	2320      	movmi	r3, #32
 8008dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de2:	0713      	lsls	r3, r2, #28
 8008de4:	bf44      	itt	mi
 8008de6:	232b      	movmi	r3, #43	@ 0x2b
 8008de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dec:	f89a 3000 	ldrb.w	r3, [sl]
 8008df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df2:	d015      	beq.n	8008e20 <_vfiprintf_r+0x120>
 8008df4:	9a07      	ldr	r2, [sp, #28]
 8008df6:	4654      	mov	r4, sl
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f04f 0c0a 	mov.w	ip, #10
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e04:	3b30      	subs	r3, #48	@ 0x30
 8008e06:	2b09      	cmp	r3, #9
 8008e08:	d94b      	bls.n	8008ea2 <_vfiprintf_r+0x1a2>
 8008e0a:	b1b0      	cbz	r0, 8008e3a <_vfiprintf_r+0x13a>
 8008e0c:	9207      	str	r2, [sp, #28]
 8008e0e:	e014      	b.n	8008e3a <_vfiprintf_r+0x13a>
 8008e10:	eba0 0308 	sub.w	r3, r0, r8
 8008e14:	fa09 f303 	lsl.w	r3, r9, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	46a2      	mov	sl, r4
 8008e1e:	e7d2      	b.n	8008dc6 <_vfiprintf_r+0xc6>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	1d19      	adds	r1, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	9103      	str	r1, [sp, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfbb      	ittet	lt
 8008e2c:	425b      	neglt	r3, r3
 8008e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e32:	9307      	strge	r3, [sp, #28]
 8008e34:	9307      	strlt	r3, [sp, #28]
 8008e36:	bfb8      	it	lt
 8008e38:	9204      	strlt	r2, [sp, #16]
 8008e3a:	7823      	ldrb	r3, [r4, #0]
 8008e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e3e:	d10a      	bne.n	8008e56 <_vfiprintf_r+0x156>
 8008e40:	7863      	ldrb	r3, [r4, #1]
 8008e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e44:	d132      	bne.n	8008eac <_vfiprintf_r+0x1ac>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	9203      	str	r2, [sp, #12]
 8008e4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e52:	3402      	adds	r4, #2
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f2c <_vfiprintf_r+0x22c>
 8008e5a:	7821      	ldrb	r1, [r4, #0]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7f7 fa3e 	bl	80002e0 <memchr>
 8008e64:	b138      	cbz	r0, 8008e76 <_vfiprintf_r+0x176>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	eba0 000a 	sub.w	r0, r0, sl
 8008e6c:	2240      	movs	r2, #64	@ 0x40
 8008e6e:	4082      	lsls	r2, r0
 8008e70:	4313      	orrs	r3, r2
 8008e72:	3401      	adds	r4, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7a:	4829      	ldr	r0, [pc, #164]	@ (8008f20 <_vfiprintf_r+0x220>)
 8008e7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e80:	2206      	movs	r2, #6
 8008e82:	f7f7 fa2d 	bl	80002e0 <memchr>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d03f      	beq.n	8008f0a <_vfiprintf_r+0x20a>
 8008e8a:	4b26      	ldr	r3, [pc, #152]	@ (8008f24 <_vfiprintf_r+0x224>)
 8008e8c:	bb1b      	cbnz	r3, 8008ed6 <_vfiprintf_r+0x1d6>
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	3307      	adds	r3, #7
 8008e92:	f023 0307 	bic.w	r3, r3, #7
 8008e96:	3308      	adds	r3, #8
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9c:	443b      	add	r3, r7
 8008e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea0:	e76a      	b.n	8008d78 <_vfiprintf_r+0x78>
 8008ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	e7a8      	b.n	8008dfe <_vfiprintf_r+0xfe>
 8008eac:	2300      	movs	r3, #0
 8008eae:	3401      	adds	r4, #1
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ebe:	3a30      	subs	r2, #48	@ 0x30
 8008ec0:	2a09      	cmp	r2, #9
 8008ec2:	d903      	bls.n	8008ecc <_vfiprintf_r+0x1cc>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c6      	beq.n	8008e56 <_vfiprintf_r+0x156>
 8008ec8:	9105      	str	r1, [sp, #20]
 8008eca:	e7c4      	b.n	8008e56 <_vfiprintf_r+0x156>
 8008ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e7f0      	b.n	8008eb8 <_vfiprintf_r+0x1b8>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4b12      	ldr	r3, [pc, #72]	@ (8008f28 <_vfiprintf_r+0x228>)
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7fd fe95 	bl	8006c10 <_printf_float>
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	1c78      	adds	r0, r7, #1
 8008eea:	d1d6      	bne.n	8008e9a <_vfiprintf_r+0x19a>
 8008eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eee:	07d9      	lsls	r1, r3, #31
 8008ef0:	d405      	bmi.n	8008efe <_vfiprintf_r+0x1fe>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	059a      	lsls	r2, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_vfiprintf_r+0x1fe>
 8008ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008efa:	f7fe fd15 	bl	8007928 <__retarget_lock_release_recursive>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af1f 	bmi.w	8008d44 <_vfiprintf_r+0x44>
 8008f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f08:	e71e      	b.n	8008d48 <_vfiprintf_r+0x48>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <_vfiprintf_r+0x228>)
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fe f903 	bl	8007120 <_printf_i>
 8008f1a:	e7e4      	b.n	8008ee6 <_vfiprintf_r+0x1e6>
 8008f1c:	080092a6 	.word	0x080092a6
 8008f20:	080092b0 	.word	0x080092b0
 8008f24:	08006c11 	.word	0x08006c11
 8008f28:	08008cdb 	.word	0x08008cdb
 8008f2c:	080092ac 	.word	0x080092ac

08008f30 <__swhatbuf_r>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	460c      	mov	r4, r1
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	b096      	sub	sp, #88	@ 0x58
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	461e      	mov	r6, r3
 8008f40:	da0d      	bge.n	8008f5e <__swhatbuf_r+0x2e>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f48:	f04f 0100 	mov.w	r1, #0
 8008f4c:	bf14      	ite	ne
 8008f4e:	2340      	movne	r3, #64	@ 0x40
 8008f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f54:	2000      	movs	r0, #0
 8008f56:	6031      	str	r1, [r6, #0]
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	b016      	add	sp, #88	@ 0x58
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	466a      	mov	r2, sp
 8008f60:	f000 f878 	bl	8009054 <_fstat_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	dbec      	blt.n	8008f42 <__swhatbuf_r+0x12>
 8008f68:	9901      	ldr	r1, [sp, #4]
 8008f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f72:	4259      	negs	r1, r3
 8008f74:	4159      	adcs	r1, r3
 8008f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f7a:	e7eb      	b.n	8008f54 <__swhatbuf_r+0x24>

08008f7c <__smakebuf_r>:
 8008f7c:	898b      	ldrh	r3, [r1, #12]
 8008f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f80:	079d      	lsls	r5, r3, #30
 8008f82:	4606      	mov	r6, r0
 8008f84:	460c      	mov	r4, r1
 8008f86:	d507      	bpl.n	8008f98 <__smakebuf_r+0x1c>
 8008f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	2301      	movs	r3, #1
 8008f92:	6163      	str	r3, [r4, #20]
 8008f94:	b003      	add	sp, #12
 8008f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f98:	ab01      	add	r3, sp, #4
 8008f9a:	466a      	mov	r2, sp
 8008f9c:	f7ff ffc8 	bl	8008f30 <__swhatbuf_r>
 8008fa0:	9f00      	ldr	r7, [sp, #0]
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7fd fd18 	bl	80069dc <_malloc_r>
 8008fac:	b948      	cbnz	r0, 8008fc2 <__smakebuf_r+0x46>
 8008fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb2:	059a      	lsls	r2, r3, #22
 8008fb4:	d4ee      	bmi.n	8008f94 <__smakebuf_r+0x18>
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	e7e2      	b.n	8008f88 <__smakebuf_r+0xc>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	6020      	str	r0, [r4, #0]
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fd2:	b15b      	cbz	r3, 8008fec <__smakebuf_r+0x70>
 8008fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f000 f84d 	bl	8009078 <_isatty_r>
 8008fde:	b128      	cbz	r0, 8008fec <__smakebuf_r+0x70>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	431d      	orrs	r5, r3
 8008ff0:	81a5      	strh	r5, [r4, #12]
 8008ff2:	e7cf      	b.n	8008f94 <__smakebuf_r+0x18>

08008ff4 <_raise_r>:
 8008ff4:	291f      	cmp	r1, #31
 8008ff6:	b538      	push	{r3, r4, r5, lr}
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	d904      	bls.n	8009008 <_raise_r+0x14>
 8008ffe:	2316      	movs	r3, #22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	f04f 30ff 	mov.w	r0, #4294967295
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800900a:	b112      	cbz	r2, 8009012 <_raise_r+0x1e>
 800900c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009010:	b94b      	cbnz	r3, 8009026 <_raise_r+0x32>
 8009012:	4628      	mov	r0, r5
 8009014:	f000 f852 	bl	80090bc <_getpid_r>
 8009018:	4622      	mov	r2, r4
 800901a:	4601      	mov	r1, r0
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009022:	f000 b839 	b.w	8009098 <_kill_r>
 8009026:	2b01      	cmp	r3, #1
 8009028:	d00a      	beq.n	8009040 <_raise_r+0x4c>
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	d103      	bne.n	8009036 <_raise_r+0x42>
 800902e:	2316      	movs	r3, #22
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	2001      	movs	r0, #1
 8009034:	e7e7      	b.n	8009006 <_raise_r+0x12>
 8009036:	2100      	movs	r1, #0
 8009038:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800903c:	4620      	mov	r0, r4
 800903e:	4798      	blx	r3
 8009040:	2000      	movs	r0, #0
 8009042:	e7e0      	b.n	8009006 <_raise_r+0x12>

08009044 <raise>:
 8009044:	4b02      	ldr	r3, [pc, #8]	@ (8009050 <raise+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f7ff bfd3 	b.w	8008ff4 <_raise_r>
 800904e:	bf00      	nop
 8009050:	2400001c 	.word	0x2400001c

08009054 <_fstat_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	@ (8009074 <_fstat_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f7f7 fe87 	bl	8000d74 <_fstat>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_fstat_r+0x1c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b103      	cbz	r3, 8009070 <_fstat_r+0x1c>
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	240005ec 	.word	0x240005ec

08009078 <_isatty_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	@ (8009094 <_isatty_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f7 fe7c 	bl	8000d80 <_isatty>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_isatty_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_isatty_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	240005ec 	.word	0x240005ec

08009098 <_kill_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	@ (80090b8 <_kill_r+0x20>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7f7 fe35 	bl	8000d14 <_kill>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d102      	bne.n	80090b4 <_kill_r+0x1c>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	b103      	cbz	r3, 80090b4 <_kill_r+0x1c>
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	240005ec 	.word	0x240005ec

080090bc <_getpid_r>:
 80090bc:	f7f7 be28 	b.w	8000d10 <_getpid>

080090c0 <__ascii_mbtowc>:
 80090c0:	b082      	sub	sp, #8
 80090c2:	b901      	cbnz	r1, 80090c6 <__ascii_mbtowc+0x6>
 80090c4:	a901      	add	r1, sp, #4
 80090c6:	b142      	cbz	r2, 80090da <__ascii_mbtowc+0x1a>
 80090c8:	b14b      	cbz	r3, 80090de <__ascii_mbtowc+0x1e>
 80090ca:	7813      	ldrb	r3, [r2, #0]
 80090cc:	600b      	str	r3, [r1, #0]
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	1e10      	subs	r0, r2, #0
 80090d2:	bf18      	it	ne
 80090d4:	2001      	movne	r0, #1
 80090d6:	b002      	add	sp, #8
 80090d8:	4770      	bx	lr
 80090da:	4610      	mov	r0, r2
 80090dc:	e7fb      	b.n	80090d6 <__ascii_mbtowc+0x16>
 80090de:	f06f 0001 	mvn.w	r0, #1
 80090e2:	e7f8      	b.n	80090d6 <__ascii_mbtowc+0x16>

080090e4 <__ascii_wctomb>:
 80090e4:	4603      	mov	r3, r0
 80090e6:	4608      	mov	r0, r1
 80090e8:	b141      	cbz	r1, 80090fc <__ascii_wctomb+0x18>
 80090ea:	2aff      	cmp	r2, #255	@ 0xff
 80090ec:	d904      	bls.n	80090f8 <__ascii_wctomb+0x14>
 80090ee:	228a      	movs	r2, #138	@ 0x8a
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	4770      	bx	lr
 80090f8:	700a      	strb	r2, [r1, #0]
 80090fa:	2001      	movs	r0, #1
 80090fc:	4770      	bx	lr
	...

08009100 <_init>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	bf00      	nop
 8009104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009106:	bc08      	pop	{r3}
 8009108:	469e      	mov	lr, r3
 800910a:	4770      	bx	lr

0800910c <_fini>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr
