
X1_Thorn_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da40  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800dce0  0800dce0  0000ece0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ddc0  0800ddc0  0000edc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ddc8  0800ddc8  0000edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ddcc  0800ddcc  0000edcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ddd0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d434  24000064  0800de34  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400d498  0800de34  0000f498  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d214  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000558c  00000000  00000000  0003c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020a0  00000000  00000000  00041838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000195d  00000000  00000000  000438d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000784e  00000000  00000000  00045235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d7ad  00000000  00000000  0004ca83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187b17  00000000  00000000  0007a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00201d47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008dbc  00000000  00000000  00201d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  0020ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dcc8 	.word	0x0800dcc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800dcc8 	.word	0x0800dcc8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a29      	ldr	r2, [pc, #164]	@ (80006bc <HAL_UART_RxCpltCallback+0xb0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d14b      	bne.n	80006b4 <HAL_UART_RxCpltCallback+0xa8>
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <HAL_UART_RxCpltCallback+0xb0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2208      	movs	r2, #8
 8000622:	621a      	str	r2, [r3, #32]

        // 2) State machine
        switch (frame_state)
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d01d      	beq.n	8000668 <HAL_UART_RxCpltCallback+0x5c>
 800062c:	2b02      	cmp	r3, #2
 800062e:	dc3c      	bgt.n	80006aa <HAL_UART_RxCpltCallback+0x9e>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <HAL_UART_RxCpltCallback+0x2e>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d008      	beq.n	800064a <HAL_UART_RxCpltCallback+0x3e>
 8000638:	e037      	b.n	80006aa <HAL_UART_RxCpltCallback+0x9e>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <HAL_UART_RxCpltCallback+0xb8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b55      	cmp	r3, #85	@ 0x55
 8000640:	d130      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x98>
                    frame_state = SYNC_WAIT_2;
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
                break;
 8000648:	e02c      	b.n	80006a4 <HAL_UART_RxCpltCallback+0x98>

            case SYNC_WAIT_2:
                if (rx_byte == 0xAA)
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <HAL_UART_RxCpltCallback+0xb8>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2baa      	cmp	r3, #170	@ 0xaa
 8000650:	d106      	bne.n	8000660 <HAL_UART_RxCpltCallback+0x54>
                {
                    frame_state = SYNC_COLLECT;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
                    collect_count = 0;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
                }
                else
                    frame_state = SYNC_WAIT_1; // false alarm, restart
                break;
 800065e:	e024      	b.n	80006aa <HAL_UART_RxCpltCallback+0x9e>
                    frame_state = SYNC_WAIT_1; // false alarm, restart
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
                break;
 8000666:	e020      	b.n	80006aa <HAL_UART_RxCpltCallback+0x9e>

            case SYNC_COLLECT:
                collect_buf[collect_count++] = rx_byte;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	b2d1      	uxtb	r1, r2
 8000670:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 8000672:	7011      	strb	r1, [r2, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_UART_RxCpltCallback+0xb8>)
 8000678:	7819      	ldrb	r1, [r3, #0]
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <HAL_UART_RxCpltCallback+0xc0>)
 800067c:	5499      	strb	r1, [r3, r2]
                if (collect_count >= sizeof(collect_buf))
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b13      	cmp	r3, #19
 8000684:	d910      	bls.n	80006a8 <HAL_UART_RxCpltCallback+0x9c>
                {
                    // got full payload: copy to floats
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <HAL_UART_RxCpltCallback+0xc4>)
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <HAL_UART_RxCpltCallback+0xc0>)
 800068a:	4614      	mov	r4, r2
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	682b      	ldr	r3, [r5, #0]
 8000694:	6023      	str	r3, [r4, #0]
                    uart_data_ready = true;
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_UART_RxCpltCallback+0xc8>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
                    // restart framing
                    frame_state = SYNC_WAIT_1;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006a2:	e001      	b.n	80006a8 <HAL_UART_RxCpltCallback+0x9c>
                break;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <HAL_UART_RxCpltCallback+0x9e>
                break;
 80006a8:	bf00      	nop
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	4905      	ldr	r1, [pc, #20]	@ (80006c4 <HAL_UART_RxCpltCallback+0xb8>)
 80006ae:	4803      	ldr	r0, [pc, #12]	@ (80006bc <HAL_UART_RxCpltCallback+0xb0>)
 80006b0:	f008 f8c4 	bl	800883c <HAL_UART_Receive_IT>
    }
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	240088d8 	.word	0x240088d8
 80006c0:	2400009a 	.word	0x2400009a
 80006c4:	24000098 	.word	0x24000098
 80006c8:	24000099 	.word	0x24000099
 80006cc:	2400009c 	.word	0x2400009c
 80006d0:	24000084 	.word	0x24000084
 80006d4:	24000080 	.word	0x24000080

080006d8 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_UART_ErrorCallback+0x2c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d108      	bne.n	80006fa <HAL_UART_ErrorCallback+0x22>
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_UART_ErrorCallback+0x2c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2208      	movs	r2, #8
 80006ee:	621a      	str	r2, [r3, #32]
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	4905      	ldr	r1, [pc, #20]	@ (8000708 <HAL_UART_ErrorCallback+0x30>)
 80006f4:	4803      	ldr	r0, [pc, #12]	@ (8000704 <HAL_UART_ErrorCallback+0x2c>)
 80006f6:	f008 f8a1 	bl	800883c <HAL_UART_Receive_IT>
    }
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	240088d8 	.word	0x240088d8
 8000708:	24000098 	.word	0x24000098

0800070c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000726:	4a2a      	ldr	r2, [pc, #168]	@ (80007d0 <MX_ADC3_Init+0xc4>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800072a:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000738:	2204      	movs	r2, #4
 800073a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000742:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800074a:	2201      	movs	r2, #1
 800074c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_ADC3_Init+0xc0>)
 800077c:	2201      	movs	r2, #1
 800077e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000780:	4812      	ldr	r0, [pc, #72]	@ (80007cc <MX_ADC3_Init+0xc0>)
 8000782:	f001 f9a7 	bl	8001ad4 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800078c:	f000 fa9c 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_ADC3_Init+0xc8>)
 8000792:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000794:	2306      	movs	r3, #6
 8000796:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a2:	2304      	movs	r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	@ (80007cc <MX_ADC3_Init+0xc0>)
 80007b4:	f001 fb30 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80007be:	f000 fa83 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	240000b0 	.word	0x240000b0
 80007d0:	58026000 	.word	0x58026000
 80007d4:	cb840000 	.word	0xcb840000

080007d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b4      	sub	sp, #208	@ 0xd0
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	22c0      	movs	r2, #192	@ 0xc0
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00d f989 	bl	800db00 <memset>
  if(adcHandle->Instance==ADC3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <HAL_ADC_MspInit+0x8c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d131      	bne.n	800085c <HAL_ADC_MspInit+0x84>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 6;
 8000804:	2306      	movs	r3, #6
 8000806:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8000808:	2328      	movs	r3, #40	@ 0x28
 800080a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800081c:	2320      	movs	r3, #32
 800081e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f892 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800083a:	f000 fa45 	bl	8000cc8 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_ADC_MspInit+0x90>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_ADC_MspInit+0x90>)
 8000846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_ADC_MspInit+0x90>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800085c:	bf00      	nop
 800085e:	37d0      	adds	r7, #208	@ 0xd0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	58026000 	.word	0x58026000
 8000868:	58024400 	.word	0x58024400

0800086c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <MX_FREERTOS_Init+0x38>)
 8000872:	2100      	movs	r1, #0
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_FREERTOS_Init+0x3c>)
 8000876:	f00a fbd1 	bl	800b01c <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_FREERTOS_Init+0x40>)
 800087e:	6013      	str	r3, [r2, #0]

  /* creation of MonitoringTask */
  MonitoringTaskHandle = osThreadNew(StartTask02, NULL, &MonitoringTask_attributes);
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <MX_FREERTOS_Init+0x44>)
 8000882:	2100      	movs	r1, #0
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <MX_FREERTOS_Init+0x48>)
 8000886:	f00a fbc9 	bl	800b01c <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <MX_FREERTOS_Init+0x4c>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of ESCTask */
  ESCTaskHandle = osThreadNew(StartTask03, NULL, &ESCTask_attributes);
 8000890:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <MX_FREERTOS_Init+0x50>)
 8000892:	2100      	movs	r1, #0
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <MX_FREERTOS_Init+0x54>)
 8000896:	f00a fbc1 	bl	800b01c <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <MX_FREERTOS_Init+0x58>)
 800089e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800dd1c 	.word	0x0800dd1c
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	24000114 	.word	0x24000114
 80008b0:	0800dd40 	.word	0x0800dd40
 80008b4:	080008d9 	.word	0x080008d9
 80008b8:	240081c0 	.word	0x240081c0
 80008bc:	0800dd64 	.word	0x0800dd64
 80008c0:	080008e9 	.word	0x080008e9
 80008c4:	2400846c 	.word	0x2400846c

080008c8 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f00a fc35 	bl	800b140 <osDelay>
 80008d6:	e7fb      	b.n	80008d0 <StartControlTask+0x8>

080008d8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f00a fc2d 	bl	800b140 <osDelay>
 80008e6:	e7fb      	b.n	80008e0 <StartTask02+0x8>

080008e8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f00a fc25 	bl	800b140 <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <StartTask03+0x8>

080008f8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b42      	ldr	r3, [pc, #264]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a40      	ldr	r2, [pc, #256]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093c:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	4a31      	ldr	r2, [pc, #196]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	4a2a      	ldr	r2, [pc, #168]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <MX_GPIO_Init+0x120>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_GPIO_Init+0x120>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_GPIO_Init+0x124>)
 80009aa:	f002 fe25 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80009b4:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <MX_GPIO_Init+0x124>)
 80009b6:	f002 fe1f 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0x124>)
 80009d2:	f002 fc61 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_GPIO_Init+0x128>)
 80009ec:	f002 fc54 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80009f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_GPIO_Init+0x124>)
 8000a0a:	f002 fc45 	bl	8003298 <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	58021000 	.word	0x58021000
 8000a20:	58020800 	.word	0x58020800

08000a24 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_I2C2_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <MX_I2C2_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a60:	f002 fde4 	bl	800362c <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 f92d 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a72:	f002 fe77 	bl	8003764 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 f924 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a84:	f002 feb9 	bl	80037fa <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f91b 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	24008718 	.word	0x24008718
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	307075b1 	.word	0x307075b1

08000aa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	22c0      	movs	r2, #192	@ 0xc0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00d f81b 	bl	800db00 <memset>
  if(i2cHandle->Instance==I2C2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a27      	ldr	r2, [pc, #156]	@ (8000b6c <HAL_I2C_MspInit+0xc8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d146      	bne.n	8000b62 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ad4:	f04f 0208 	mov.w	r2, #8
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 ff34 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000af6:	f000 f8e7 	bl	8000cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b32:	2304      	movs	r3, #4
 8000b34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <HAL_I2C_MspInit+0xd0>)
 8000b40:	f002 fbaa 	bl	8003298 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_I2C_MspInit+0xcc>)
 8000b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b62:	bf00      	nop
 8000b64:	37e8      	adds	r7, #232	@ 0xe8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	58024400 	.word	0x58024400
 8000b74:	58020400 	.word	0x58020400

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fd60 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f816 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f7ff feb8 	bl	80008f8 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000b88:	f000 f8a4 	bl	8000cd4 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b8c:	f000 fae8 	bl	8001160 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b90:	f7ff fdbc 	bl	800070c <MX_ADC3_Init>
  MX_TIM17_Init();
 8000b94:	f000 fb74 	bl	8001280 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000b98:	f7ff ff44 	bl	8000a24 <MX_I2C2_Init>
  MX_UART5_Init();
 8000b9c:	f000 fc66 	bl	800146c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ba0:	f00a f9f2 	bl	800af88 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ba4:	f7ff fe62 	bl	800086c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ba8:	f00a fa12 	bl	800afd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <main+0x34>

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09c      	sub	sp, #112	@ 0x70
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	224c      	movs	r2, #76	@ 0x4c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00c ff9e 	bl	800db00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c ff98 	bl	800db00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f002 fe5f 	bl	8003894 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b30      	ldr	r3, [pc, #192]	@ (8000c9c <SystemClock_Config+0xec>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a2f      	ldr	r2, [pc, #188]	@ (8000c9c <SystemClock_Config+0xec>)
 8000be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <SystemClock_Config+0xec>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <SystemClock_Config+0xf0>)
 8000bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca0 <SystemClock_Config+0xf0>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <SystemClock_Config+0xf0>)
 8000bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c08:	bf00      	nop
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <SystemClock_Config+0xec>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c16:	d1f8      	bne.n	8000c0a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c2e:	23c0      	movs	r3, #192	@ 0xc0
 8000c30:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fe5a 	bl	8003908 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c5a:	f000 f835 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	233f      	movs	r3, #63	@ 0x3f
 8000c60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c6e:	2340      	movs	r3, #64	@ 0x40
 8000c70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c72:	2340      	movs	r3, #64	@ 0x40
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c7c:	2340      	movs	r3, #64	@ 0x40
 8000c7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2104      	movs	r1, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fa99 	bl	80041bc <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c90:	f000 f81a 	bl	8000cc8 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3770      	adds	r7, #112	@ 0x70
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58024800 	.word	0x58024800
 8000ca0:	58000400 	.word	0x58000400

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cb6:	f000 fcff 	bl	80016b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40001000 	.word	0x40001000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000cd8:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000cda:	4a29      	ldr	r2, [pc, #164]	@ (8000d80 <MX_SPI4_Init+0xac>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000ce0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000ce8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000cec:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d02:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d06:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000d68:	f006 faf4 	bl	8007354 <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000d72:	f7ff ffa9 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400876c 	.word	0x2400876c
 8000d80:	40013400 	.word	0x40013400

08000d84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ba      	sub	sp, #232	@ 0xe8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22c0      	movs	r2, #192	@ 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00c feab 	bl	800db00 <memset>
  if(spiHandle->Instance==SPI4)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <HAL_SPI_MspInit+0xc4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d145      	bne.n	8000e40 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fdc5 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000dd4:	f7ff ff78 	bl	8000cc8 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dde:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000de0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000de4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_SPI_MspInit+0xc8>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000e14:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000e18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_SPI_MspInit+0xcc>)
 8000e3c:	f002 fa2c 	bl	8003298 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000e40:	bf00      	nop
 8000e42:	37e8      	adds	r7, #232	@ 0xe8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40013400 	.word	0x40013400
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58021000 	.word	0x58021000

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f06f 0001 	mvn.w	r0, #1
 8000e80:	f001 fc7e 	bl	8002780 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <HAL_MspInit+0x60>)
 8000e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000ea2:	f000 fc49 	bl	8001738 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f000 fc32 	bl	8001710 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	@ 0x40
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d827      	bhi.n	8000f16 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	2036      	movs	r0, #54	@ 0x36
 8000ecc:	f001 fc58 	bl	8002780 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed0:	2036      	movs	r0, #54	@ 0x36
 8000ed2:	f001 fc6f 	bl	80027b4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000ed6:	4a29      	ldr	r2, [pc, #164]	@ (8000f7c <HAL_InitTick+0xc4>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <HAL_InitTick+0xc8>)
 8000ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee2:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <HAL_InitTick+0xc8>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <HAL_InitTick+0xc8>)
 8000eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000efa:	f107 0210 	add.w	r2, r7, #16
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fce5 	bl	80048d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <HAL_InitTick+0x6a>
 8000f14:	e001      	b.n	8000f1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e02b      	b.n	8000f72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f1a:	f003 fcaf 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8000f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f20:	e004      	b.n	8000f2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f22:	f003 fcab 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8000f26:	4603      	mov	r3, r0
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f2e:	4a15      	ldr	r2, [pc, #84]	@ (8000f84 <HAL_InitTick+0xcc>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	0c9b      	lsrs	r3, r3, #18
 8000f36:	3b01      	subs	r3, #1
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f3c:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <HAL_InitTick+0xd4>)
 8000f3e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f48:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f5c:	f006 fb39 	bl	80075d2 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <HAL_InitTick+0xd0>)
 8000f68:	f006 fb8a 	bl	8007680 <HAL_TIM_Base_Start_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	e000      	b.n	8000f72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3740      	adds	r7, #64	@ 0x40
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	24000008 	.word	0x24000008
 8000f80:	58024400 	.word	0x58024400
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	240087f4 	.word	0x240087f4
 8000f8c:	40001000 	.word	0x40001000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <UART5_IRQHandler+0x10>)
 8000fce:	f007 fc81 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	240088d8 	.word	0x240088d8

08000fdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <TIM6_DAC_IRQHandler+0x10>)
 8000fe2:	f006 fc7d 	bl	80078e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240087f4 	.word	0x240087f4

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b43      	ldr	r3, [pc, #268]	@ (8001104 <SystemInit+0x114>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a42      	ldr	r2, [pc, #264]	@ (8001104 <SystemInit+0x114>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001004:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <SystemInit+0x118>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	2b06      	cmp	r3, #6
 800100e:	d807      	bhi.n	8001020 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001010:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <SystemInit+0x118>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 030f 	bic.w	r3, r3, #15
 8001018:	4a3b      	ldr	r2, [pc, #236]	@ (8001108 <SystemInit+0x118>)
 800101a:	f043 0307 	orr.w	r3, r3, #7
 800101e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001020:	4b3a      	ldr	r3, [pc, #232]	@ (800110c <SystemInit+0x11c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a39      	ldr	r2, [pc, #228]	@ (800110c <SystemInit+0x11c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800102c:	4b37      	ldr	r3, [pc, #220]	@ (800110c <SystemInit+0x11c>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001032:	4b36      	ldr	r3, [pc, #216]	@ (800110c <SystemInit+0x11c>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4935      	ldr	r1, [pc, #212]	@ (800110c <SystemInit+0x11c>)
 8001038:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <SystemInit+0x120>)
 800103a:	4013      	ands	r3, r2
 800103c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <SystemInit+0x118>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <SystemInit+0x118>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 030f 	bic.w	r3, r3, #15
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <SystemInit+0x118>)
 8001054:	f043 0307 	orr.w	r3, r3, #7
 8001058:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <SystemInit+0x11c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <SystemInit+0x11c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <SystemInit+0x11c>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <SystemInit+0x11c>)
 800106e:	4a29      	ldr	r2, [pc, #164]	@ (8001114 <SystemInit+0x124>)
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <SystemInit+0x11c>)
 8001074:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <SystemInit+0x128>)
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <SystemInit+0x11c>)
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <SystemInit+0x12c>)
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800107e:	4b23      	ldr	r3, [pc, #140]	@ (800110c <SystemInit+0x11c>)
 8001080:	2200      	movs	r2, #0
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <SystemInit+0x11c>)
 8001086:	4a25      	ldr	r2, [pc, #148]	@ (800111c <SystemInit+0x12c>)
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <SystemInit+0x11c>)
 800108c:	2200      	movs	r2, #0
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <SystemInit+0x11c>)
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <SystemInit+0x12c>)
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <SystemInit+0x11c>)
 8001098:	2200      	movs	r2, #0
 800109a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <SystemInit+0x11c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1a      	ldr	r2, [pc, #104]	@ (800110c <SystemInit+0x11c>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <SystemInit+0x11c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <SystemInit+0x130>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <SystemInit+0x134>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010ba:	d202      	bcs.n	80010c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <SystemInit+0x138>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <SystemInit+0x11c>)
 80010c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d113      	bne.n	80010f8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <SystemInit+0x11c>)
 80010d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010d6:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <SystemInit+0x11c>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <SystemInit+0x13c>)
 80010e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <SystemInit+0x11c>)
 80010ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ee:	4a07      	ldr	r2, [pc, #28]	@ (800110c <SystemInit+0x11c>)
 80010f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	52002000 	.word	0x52002000
 800110c:	58024400 	.word	0x58024400
 8001110:	eaf6ed7f 	.word	0xeaf6ed7f
 8001114:	02020200 	.word	0x02020200
 8001118:	01ff0000 	.word	0x01ff0000
 800111c:	01010280 	.word	0x01010280
 8001120:	5c001000 	.word	0x5c001000
 8001124:	ffff0000 	.word	0xffff0000
 8001128:	51008108 	.word	0x51008108
 800112c:	52004000 	.word	0x52004000

08001130 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <ExitRun0Mode+0x2c>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a08      	ldr	r2, [pc, #32]	@ (800115c <ExitRun0Mode+0x2c>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001140:	bf00      	nop
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <ExitRun0Mode+0x2c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f9      	beq.n	8001142 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	58024800 	.word	0x58024800

08001160 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	@ 0x58
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	222c      	movs	r2, #44	@ 0x2c
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00c fcb7 	bl	800db00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001192:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <MX_TIM1_Init+0x118>)
 8001194:	4a39      	ldr	r2, [pc, #228]	@ (800127c <MX_TIM1_Init+0x11c>)
 8001196:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8001198:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <MX_TIM1_Init+0x118>)
 800119a:	220b      	movs	r2, #11
 800119c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b36      	ldr	r3, [pc, #216]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80011a4:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b32      	ldr	r3, [pc, #200]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b2:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011be:	482e      	ldr	r0, [pc, #184]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011c0:	f006 fb37 	bl	8007832 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f7ff fd7d 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011de:	4619      	mov	r1, r3
 80011e0:	4825      	ldr	r0, [pc, #148]	@ (8001278 <MX_TIM1_Init+0x118>)
 80011e2:	f007 f9b1 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011ec:	f7ff fd6c 	bl	8000cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	@ 0x60
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80011fc:	2308      	movs	r3, #8
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4818      	ldr	r0, [pc, #96]	@ (8001278 <MX_TIM1_Init+0x118>)
 8001216:	f006 fce5 	bl	8007be4 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001220:	f7ff fd52 	bl	8000cc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	@ (8001278 <MX_TIM1_Init+0x118>)
 800125a:	f007 fa03 	bl	8008664 <HAL_TIMEx_ConfigBreakDeadTime>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001264:	f7ff fd30 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <MX_TIM1_Init+0x118>)
 800126a:	f000 f8c3 	bl	80013f4 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3758      	adds	r7, #88	@ 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	24008840 	.word	0x24008840
 800127c:	40010000 	.word	0x40010000

08001280 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b092      	sub	sp, #72	@ 0x48
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	222c      	movs	r2, #44	@ 0x2c
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00c fc2d 	bl	800db00 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001368 <MX_TIM17_Init+0xe8>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 239;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012ae:	22ef      	movs	r2, #239	@ 0xef
 80012b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012d4:	f006 f97d 	bl	80075d2 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80012de:	f7ff fcf3 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80012e2:	4820      	ldr	r0, [pc, #128]	@ (8001364 <MX_TIM17_Init+0xe4>)
 80012e4:	f006 fa44 	bl	8007770 <HAL_TIM_OC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80012ee:	f7ff fceb 	bl	8000cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <MX_TIM17_Init+0xe4>)
 8001318:	f006 fbea 	bl	8007af0 <HAL_TIM_OC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001322:	f7ff fcd1 	bl	8000cc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_TIM17_Init+0xe4>)
 800134e:	f007 f989 	bl	8008664 <HAL_TIMEx_ConfigBreakDeadTime>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001358:	f7ff fcb6 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3748      	adds	r7, #72	@ 0x48
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2400888c 	.word	0x2400888c
 8001368:	40014800 	.word	0x40014800

0800136c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10e      	bne.n	800139c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_TIM_PWM_MspInit+0x40>)
 8001390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40010000 	.word	0x40010000
 80013ac:	58024400 	.word	0x58024400

080013b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013d2:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40014800 	.word	0x40014800
 80013f0:	58024400 	.word	0x58024400

080013f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <HAL_TIM_MspPostInit+0x6c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d11f      	bne.n	8001456 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <HAL_TIM_MspPostInit+0x70>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_TIM_MspPostInit+0x70>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_TIM_MspPostInit+0x70>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001438:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001446:	2301      	movs	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	@ (8001468 <HAL_TIM_MspPostInit+0x74>)
 8001452:	f001 ff21 	bl	8003298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000
 8001464:	58024400 	.word	0x58024400
 8001468:	58021000 	.word	0x58021000

0800146c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_UART5_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <MX_UART5_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_UART5_Init+0x90>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_UART5_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_UART5_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_UART5_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_UART5_Init+0x90>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_UART5_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_UART5_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_UART5_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_UART5_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_UART5_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	@ (80014fc <MX_UART5_Init+0x90>)
 80014b6:	f007 f971 	bl	800879c <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80014c0:	f7ff fc02 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_UART5_Init+0x90>)
 80014c8:	f009 fc4f 	bl	800ad6a <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f7ff fbf9 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <MX_UART5_Init+0x90>)
 80014da:	f009 fc84 	bl	800ade6 <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f7ff fbf0 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_UART5_Init+0x90>)
 80014ea:	f009 fc05 	bl	800acf8 <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f7ff fbe8 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240088d8 	.word	0x240088d8
 8001500:	40005000 	.word	0x40005000

08001504 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0ba      	sub	sp, #232	@ 0xe8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	22c0      	movs	r2, #192	@ 0xc0
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00c faeb 	bl	800db00 <memset>
  if(uartHandle->Instance==UART5)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2b      	ldr	r2, [pc, #172]	@ (80015dc <HAL_UART_MspInit+0xd8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d14e      	bne.n	80015d2 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001534:	f04f 0202 	mov.w	r2, #2
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fa04 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001556:	f7ff fbb7 	bl	8000cc8 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001560:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 8001562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001566:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_UART_MspInit+0xdc>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001596:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800159a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80015b0:	230e      	movs	r3, #14
 80015b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <HAL_UART_MspInit+0xe0>)
 80015be:	f001 fe6b 	bl	8003298 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	2035      	movs	r0, #53	@ 0x35
 80015c8:	f001 f8da 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015cc:	2035      	movs	r0, #53	@ 0x35
 80015ce:	f001 f8f1 	bl	80027b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	37e8      	adds	r7, #232	@ 0xe8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40005000 	.word	0x40005000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58020400 	.word	0x58020400

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001624 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80015ec:	f7ff fda0 	bl	8001130 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f0:	f7ff fcfe 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f00c fad7 	bl	800dbcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff faab 	bl	8000b78 <main>
  bx  lr
 8001622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001628:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800162c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001630:	0800ddd0 	.word	0x0800ddd0
  ldr r2, =_sbss
 8001634:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001638:	2400d498 	.word	0x2400d498

0800163c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC3_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f001 f88f 	bl	800276a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800164c:	f002 ff6c 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4913      	ldr	r1, [pc, #76]	@ (80016ac <HAL_Init+0x6c>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_Init+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <HAL_Init+0x70>)
 8001682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_Init+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff fc14 	bl	8000eb8 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e002      	b.n	80016a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800169a:	f7ff fbdb 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	0800dd88 	.word	0x0800dd88
 80016b0:	24000004 	.word	0x24000004
 80016b4:	24000000 	.word	0x24000000

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2400000c 	.word	0x2400000c
 80016dc:	2400896c 	.word	0x2400896c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2400896c 	.word	0x2400896c

080016f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetREVID+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0c1b      	lsrs	r3, r3, #16
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	5c001000 	.word	0x5c001000

08001710 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 0202 	bic.w	r2, r3, #2
 8001720:	4904      	ldr	r1, [pc, #16]	@ (8001734 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58003c00 	.word	0x58003c00

08001738 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	58003c00 	.word	0x58003c00

08001758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <LL_ADC_SetChannelPreselection+0x24>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2201      	movs	r2, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	e015      	b.n	8001810 <LL_ADC_SetChannelPreselection+0x50>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80017fa:	2320      	movs	r3, #32
 80017fc:	e003      	b.n	8001806 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2201      	movs	r2, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	69d2      	ldr	r2, [r2, #28]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3360      	adds	r3, #96	@ 0x60
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	430b      	orrs	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	611a      	str	r2, [r3, #16]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3360      	adds	r3, #96	@ 0x60
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
  }
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b087      	sub	sp, #28
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3330      	adds	r3, #48	@ 0x30
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	211f      	movs	r1, #31
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	f003 011f 	and.w	r1, r3, #31
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001926:	b480      	push	{r7}
 8001928:	b087      	sub	sp, #28
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3314      	adds	r3, #20
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	0e5b      	lsrs	r3, r3, #25
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0d1b      	lsrs	r3, r3, #20
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2107      	movs	r1, #7
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	0d1b      	lsrs	r3, r3, #20
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0318 	and.w	r3, r3, #24
 800199e:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	400b      	ands	r3, r1
 80019a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019aa:	431a      	orrs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	000fffff 	.word	0x000fffff

080019c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6093      	str	r3, [r2, #8]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	5fffffc0 	.word	0x5fffffc0

080019e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019fc:	d101      	bne.n	8001a02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	6fffffc0 	.word	0x6fffffc0

08001a38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_IsEnabled+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_IsEnabled+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d101      	bne.n	8001ac4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e18f      	b.n	8001e0e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7fe fe6b 	bl	80007d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff67 	bl	80019e8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff4d 	bl	80019c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff82 	bl	8001a38 <LL_ADC_IsInternalRegulatorEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d114      	bne.n	8001b64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff66 	bl	8001a10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b44:	4b87      	ldr	r3, [pc, #540]	@ (8001d64 <HAL_ADC_Init+0x290>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	4a87      	ldr	r2, [pc, #540]	@ (8001d68 <HAL_ADC_Init+0x294>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	3301      	adds	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b56:	e002      	b.n	8001b5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff65 	bl	8001a38 <LL_ADC_IsInternalRegulatorEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff76 	bl	8001a86 <LL_ADC_REG_IsConversionOngoing>
 8001b9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8129 	bne.w	8001dfc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 8125 	bne.w	8001dfc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff4a 	bl	8001a60 <LL_ADC_IsEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d136      	bne.n	8001c40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_ADC_Init+0x298>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Init+0x112>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a63      	ldr	r2, [pc, #396]	@ (8001d70 <HAL_ADC_Init+0x29c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10e      	bne.n	8001c04 <HAL_ADC_Init+0x130>
 8001be6:	4861      	ldr	r0, [pc, #388]	@ (8001d6c <HAL_ADC_Init+0x298>)
 8001be8:	f7ff ff3a 	bl	8001a60 <LL_ADC_IsEnabled>
 8001bec:	4604      	mov	r4, r0
 8001bee:	4860      	ldr	r0, [pc, #384]	@ (8001d70 <HAL_ADC_Init+0x29c>)
 8001bf0:	f7ff ff36 	bl	8001a60 <LL_ADC_IsEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e008      	b.n	8001c16 <HAL_ADC_Init+0x142>
 8001c04:	485b      	ldr	r0, [pc, #364]	@ (8001d74 <HAL_ADC_Init+0x2a0>)
 8001c06:	f7ff ff2b 	bl	8001a60 <LL_ADC_IsEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	@ (8001d6c <HAL_ADC_Init+0x298>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Init+0x15a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	@ (8001d70 <HAL_ADC_Init+0x29c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x15e>
 8001c2e:	4a52      	ldr	r2, [pc, #328]	@ (8001d78 <HAL_ADC_Init+0x2a4>)
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_Init+0x160>
 8001c32:	4a52      	ldr	r2, [pc, #328]	@ (8001d7c <HAL_ADC_Init+0x2a8>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7ff fd8c 	bl	8001758 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c40:	f7ff fd5a 	bl	80016f8 <HAL_GetREVID>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d914      	bls.n	8001c78 <HAL_ADC_Init+0x1a4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d110      	bne.n	8001c78 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7d5b      	ldrb	r3, [r3, #21]
 8001c5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c6e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c70:	f043 030c 	orr.w	r3, r3, #12
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e00d      	b.n	8001c94 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7d5b      	ldrb	r3, [r3, #21]
 8001c7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7f1b      	ldrb	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	045b      	lsls	r3, r3, #17
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <HAL_ADC_Init+0x2ac>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fed1 	bl	8001a86 <LL_ADC_REG_IsConversionOngoing>
 8001ce4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fede 	bl	8001aac <LL_ADC_INJ_IsConversionOngoing>
 8001cf0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d15f      	bne.n	8001db8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d15c      	bne.n	8001db8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7d1b      	ldrb	r3, [r3, #20]
 8001d02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_ADC_Init+0x2b0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d130      	bne.n	8001d8c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_ADC_Init+0x2b4>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d3e:	3a01      	subs	r2, #1
 8001d40:	0411      	lsls	r1, r2, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d52:	430a      	orrs	r2, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	e01c      	b.n	8001d9c <HAL_ADC_Init+0x2c8>
 8001d62:	bf00      	nop
 8001d64:	24000000 	.word	0x24000000
 8001d68:	053e2d63 	.word	0x053e2d63
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40022100 	.word	0x40022100
 8001d74:	58026000 	.word	0x58026000
 8001d78:	40022300 	.word	0x40022300
 8001d7c:	58026300 	.word	0x58026300
 8001d80:	fff0c003 	.word	0xfff0c003
 8001d84:	ffffbffc 	.word	0xffffbffc
 8001d88:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fb20 	bl	80023f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d10c      	bne.n	8001dda <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f023 010f 	bic.w	r1, r3, #15
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd8:	e007      	b.n	8001dea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 020f 	bic.w	r2, r2, #15
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dfa:	e007      	b.n	8001e0c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	f043 0210 	orr.w	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	@ 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop

08001e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08d      	sub	sp, #52	@ 0x34
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a65      	ldr	r2, [pc, #404]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x1b0>)
 8001e32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x2a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e2c7      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x5ba>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fe19 	bl	8001a86 <LL_ADC_REG_IsConversionOngoing>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 82ac 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db2c      	blt.n	8001ebe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d108      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x6a>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	e016      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x98>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	613b      	str	r3, [r7, #16]
  return result;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2201      	movs	r2, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	69d1      	ldr	r1, [r2, #28]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f7ff fcff 	bl	80018ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fdd6 	bl	8001a86 <LL_ADC_REG_IsConversionOngoing>
 8001eda:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fde3 	bl	8001aac <LL_ADC_INJ_IsConversionOngoing>
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 80b8 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 80b4 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f7ff fd0e 	bl	8001926 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f0a:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <HAL_ADC_ConfigChannel+0x1b4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f16:	d10b      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x118>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	e01d      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x154>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x13e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	e00a      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x154>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d02c      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f7ff fc4f 	bl	8001826 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d102      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x186>
 8001f98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x188>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f7ff fc79 	bl	8001898 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7e1b      	ldrb	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1a4>
 8001fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1a6>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fc51 	bl	8001866 <LL_ADC_SetDataRightShift>
 8001fc4:	e04c      	b.n	8002060 <HAL_ADC_ConfigChannel+0x248>
 8001fc6:	bf00      	nop
 8001fc8:	47ff0000 	.word	0x47ff0000
 8001fcc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ff2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002016:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800201e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800203a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800205e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fcfb 	bl	8001a60 <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 81aa 	bne.w	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fc7c 	bl	800197c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a87      	ldr	r2, [pc, #540]	@ (80022a8 <HAL_ADC_ConfigChannel+0x490>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 809a 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4984      	ldr	r1, [pc, #528]	@ (80022ac <HAL_ADC_ConfigChannel+0x494>)
 800209a:	428b      	cmp	r3, r1
 800209c:	d147      	bne.n	800212e <HAL_ADC_ConfigChannel+0x316>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4983      	ldr	r1, [pc, #524]	@ (80022b0 <HAL_ADC_ConfigChannel+0x498>)
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d040      	beq.n	800212a <HAL_ADC_ConfigChannel+0x312>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4981      	ldr	r1, [pc, #516]	@ (80022b4 <HAL_ADC_ConfigChannel+0x49c>)
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d039      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x30e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4980      	ldr	r1, [pc, #512]	@ (80022b8 <HAL_ADC_ConfigChannel+0x4a0>)
 80020b8:	428b      	cmp	r3, r1
 80020ba:	d032      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x30a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	497e      	ldr	r1, [pc, #504]	@ (80022bc <HAL_ADC_ConfigChannel+0x4a4>)
 80020c2:	428b      	cmp	r3, r1
 80020c4:	d02b      	beq.n	800211e <HAL_ADC_ConfigChannel+0x306>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	497d      	ldr	r1, [pc, #500]	@ (80022c0 <HAL_ADC_ConfigChannel+0x4a8>)
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d024      	beq.n	800211a <HAL_ADC_ConfigChannel+0x302>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	497b      	ldr	r1, [pc, #492]	@ (80022c4 <HAL_ADC_ConfigChannel+0x4ac>)
 80020d6:	428b      	cmp	r3, r1
 80020d8:	d01d      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x2fe>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	497a      	ldr	r1, [pc, #488]	@ (80022c8 <HAL_ADC_ConfigChannel+0x4b0>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d016      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x2fa>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4978      	ldr	r1, [pc, #480]	@ (80022cc <HAL_ADC_ConfigChannel+0x4b4>)
 80020ea:	428b      	cmp	r3, r1
 80020ec:	d00f      	beq.n	800210e <HAL_ADC_ConfigChannel+0x2f6>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4977      	ldr	r1, [pc, #476]	@ (80022d0 <HAL_ADC_ConfigChannel+0x4b8>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d008      	beq.n	800210a <HAL_ADC_ConfigChannel+0x2f2>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4975      	ldr	r1, [pc, #468]	@ (80022d4 <HAL_ADC_ConfigChannel+0x4bc>)
 80020fe:	428b      	cmp	r3, r1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x2ee>
 8002102:	4b75      	ldr	r3, [pc, #468]	@ (80022d8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002104:	e05a      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002106:	2300      	movs	r3, #0
 8002108:	e058      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800210a:	4b74      	ldr	r3, [pc, #464]	@ (80022dc <HAL_ADC_ConfigChannel+0x4c4>)
 800210c:	e056      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800210e:	4b74      	ldr	r3, [pc, #464]	@ (80022e0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002110:	e054      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002112:	4b6e      	ldr	r3, [pc, #440]	@ (80022cc <HAL_ADC_ConfigChannel+0x4b4>)
 8002114:	e052      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002116:	4b6c      	ldr	r3, [pc, #432]	@ (80022c8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002118:	e050      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800211a:	4b72      	ldr	r3, [pc, #456]	@ (80022e4 <HAL_ADC_ConfigChannel+0x4cc>)
 800211c:	e04e      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002120:	e04c      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002122:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <HAL_ADC_ConfigChannel+0x4d4>)
 8002124:	e04a      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002126:	4b72      	ldr	r3, [pc, #456]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002128:	e048      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800212a:	2301      	movs	r3, #1
 800212c:	e046      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4970      	ldr	r1, [pc, #448]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002134:	428b      	cmp	r3, r1
 8002136:	d140      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x3a2>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	495c      	ldr	r1, [pc, #368]	@ (80022b0 <HAL_ADC_ConfigChannel+0x498>)
 800213e:	428b      	cmp	r3, r1
 8002140:	d039      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x39e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	495b      	ldr	r1, [pc, #364]	@ (80022b4 <HAL_ADC_ConfigChannel+0x49c>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d032      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x39a>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4959      	ldr	r1, [pc, #356]	@ (80022b8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002152:	428b      	cmp	r3, r1
 8002154:	d02b      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x396>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4958      	ldr	r1, [pc, #352]	@ (80022bc <HAL_ADC_ConfigChannel+0x4a4>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d024      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x392>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4956      	ldr	r1, [pc, #344]	@ (80022c0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002166:	428b      	cmp	r3, r1
 8002168:	d01d      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x38e>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4955      	ldr	r1, [pc, #340]	@ (80022c4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002170:	428b      	cmp	r3, r1
 8002172:	d016      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x38a>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4953      	ldr	r1, [pc, #332]	@ (80022c8 <HAL_ADC_ConfigChannel+0x4b0>)
 800217a:	428b      	cmp	r3, r1
 800217c:	d00f      	beq.n	800219e <HAL_ADC_ConfigChannel+0x386>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4952      	ldr	r1, [pc, #328]	@ (80022cc <HAL_ADC_ConfigChannel+0x4b4>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d008      	beq.n	800219a <HAL_ADC_ConfigChannel+0x382>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4951      	ldr	r1, [pc, #324]	@ (80022d4 <HAL_ADC_ConfigChannel+0x4bc>)
 800218e:	428b      	cmp	r3, r1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x37e>
 8002192:	4b51      	ldr	r3, [pc, #324]	@ (80022d8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002194:	e012      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 8002196:	2300      	movs	r3, #0
 8002198:	e010      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800219a:	4b51      	ldr	r3, [pc, #324]	@ (80022e0 <HAL_ADC_ConfigChannel+0x4c8>)
 800219c:	e00e      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_ADC_ConfigChannel+0x4b4>)
 80021a0:	e00c      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021a2:	4b49      	ldr	r3, [pc, #292]	@ (80022c8 <HAL_ADC_ConfigChannel+0x4b0>)
 80021a4:	e00a      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021a6:	4b4f      	ldr	r3, [pc, #316]	@ (80022e4 <HAL_ADC_ConfigChannel+0x4cc>)
 80021a8:	e008      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021aa:	4b4f      	ldr	r3, [pc, #316]	@ (80022e8 <HAL_ADC_ConfigChannel+0x4d0>)
 80021ac:	e006      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021ae:	4b4f      	ldr	r3, [pc, #316]	@ (80022ec <HAL_ADC_ConfigChannel+0x4d4>)
 80021b0:	e004      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021b2:	4b4f      	ldr	r3, [pc, #316]	@ (80022f0 <HAL_ADC_ConfigChannel+0x4d8>)
 80021b4:	e002      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_ADC_ConfigChannel+0x3a4>
 80021ba:	2300      	movs	r3, #0
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f7ff fafe 	bl	80017c0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f280 80fc 	bge.w	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a36      	ldr	r2, [pc, #216]	@ (80022ac <HAL_ADC_ConfigChannel+0x494>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x3ca>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a45      	ldr	r2, [pc, #276]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4dc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x3ce>
 80021e2:	4b45      	ldr	r3, [pc, #276]	@ (80022f8 <HAL_ADC_ConfigChannel+0x4e0>)
 80021e4:	e000      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x3d0>
 80021e6:	4b45      	ldr	r3, [pc, #276]	@ (80022fc <HAL_ADC_ConfigChannel+0x4e4>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fadb 	bl	80017a4 <LL_ADC_GetCommonPathInternalCh>
 80021ee:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2d      	ldr	r2, [pc, #180]	@ (80022ac <HAL_ADC_ConfigChannel+0x494>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x3ec>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a3d      	ldr	r2, [pc, #244]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d10e      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x40a>
 8002204:	4829      	ldr	r0, [pc, #164]	@ (80022ac <HAL_ADC_ConfigChannel+0x494>)
 8002206:	f7ff fc2b 	bl	8001a60 <LL_ADC_IsEnabled>
 800220a:	4604      	mov	r4, r0
 800220c:	4839      	ldr	r0, [pc, #228]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4dc>)
 800220e:	f7ff fc27 	bl	8001a60 <LL_ADC_IsEnabled>
 8002212:	4603      	mov	r3, r0
 8002214:	4323      	orrs	r3, r4
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	e008      	b.n	8002234 <HAL_ADC_ConfigChannel+0x41c>
 8002222:	4837      	ldr	r0, [pc, #220]	@ (8002300 <HAL_ADC_ConfigChannel+0x4e8>)
 8002224:	f7ff fc1c 	bl	8001a60 <LL_ADC_IsEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b3 	beq.w	80023a0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a31      	ldr	r2, [pc, #196]	@ (8002304 <HAL_ADC_ConfigChannel+0x4ec>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d165      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x4f8>
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d160      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2b      	ldr	r2, [pc, #172]	@ (8002300 <HAL_ADC_ConfigChannel+0x4e8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	f040 80b6 	bne.w	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a13      	ldr	r2, [pc, #76]	@ (80022ac <HAL_ADC_ConfigChannel+0x494>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_ADC_ConfigChannel+0x456>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <HAL_ADC_ConfigChannel+0x4dc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x45a>
 800226e:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002270:	e000      	b.n	8002274 <HAL_ADC_ConfigChannel+0x45c>
 8002272:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <HAL_ADC_ConfigChannel+0x4e4>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7ff fa7e 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_ADC_ConfigChannel+0x4f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	4a20      	ldr	r2, [pc, #128]	@ (800230c <HAL_ADC_ConfigChannel+0x4f4>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	3301      	adds	r3, #1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002296:	e002      	b.n	800229e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3b01      	subs	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a4:	e08f      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
 80022a6:	bf00      	nop
 80022a8:	47ff0000 	.word	0x47ff0000
 80022ac:	40022000 	.word	0x40022000
 80022b0:	04300002 	.word	0x04300002
 80022b4:	08600004 	.word	0x08600004
 80022b8:	0c900008 	.word	0x0c900008
 80022bc:	10c00010 	.word	0x10c00010
 80022c0:	14f00020 	.word	0x14f00020
 80022c4:	2a000400 	.word	0x2a000400
 80022c8:	2e300800 	.word	0x2e300800
 80022cc:	32601000 	.word	0x32601000
 80022d0:	43210000 	.word	0x43210000
 80022d4:	4b840000 	.word	0x4b840000
 80022d8:	4fb80000 	.word	0x4fb80000
 80022dc:	47520000 	.word	0x47520000
 80022e0:	36902000 	.word	0x36902000
 80022e4:	25b00200 	.word	0x25b00200
 80022e8:	21800100 	.word	0x21800100
 80022ec:	1d500080 	.word	0x1d500080
 80022f0:	19200040 	.word	0x19200040
 80022f4:	40022100 	.word	0x40022100
 80022f8:	40022300 	.word	0x40022300
 80022fc:	58026300 	.word	0x58026300
 8002300:	58026000 	.word	0x58026000
 8002304:	cb840000 	.word	0xcb840000
 8002308:	24000000 	.word	0x24000000
 800230c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <HAL_ADC_ConfigChannel+0x5c4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11e      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x540>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a2d      	ldr	r2, [pc, #180]	@ (80023e0 <HAL_ADC_ConfigChannel+0x5c8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d14b      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2c      	ldr	r2, [pc, #176]	@ (80023e4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x52a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <HAL_ADC_ConfigChannel+0x5d0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x52e>
 8002342:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <HAL_ADC_ConfigChannel+0x5d4>)
 8002344:	e000      	b.n	8002348 <HAL_ADC_ConfigChannel+0x530>
 8002346:	4a2a      	ldr	r2, [pc, #168]	@ (80023f0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff fa14 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002356:	e036      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a25      	ldr	r2, [pc, #148]	@ (80023f4 <HAL_ADC_ConfigChannel+0x5dc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d131      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d12c      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d127      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1a      	ldr	r2, [pc, #104]	@ (80023e4 <HAL_ADC_ConfigChannel+0x5cc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_ADC_ConfigChannel+0x572>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a18      	ldr	r2, [pc, #96]	@ (80023e8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x576>
 800238a:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <HAL_ADC_ConfigChannel+0x5d4>)
 800238c:	e000      	b.n	8002390 <HAL_ADC_ConfigChannel+0x578>
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7ff f9f0 	bl	800177e <LL_ADC_SetCommonPathInternalCh>
 800239e:	e012      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80023b2:	e008      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80023ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3734      	adds	r7, #52	@ 0x34
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	c7520000 	.word	0xc7520000
 80023e0:	58026000 	.word	0x58026000
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40022100 	.word	0x40022100
 80023ec:	40022300 	.word	0x40022300
 80023f0:	58026300 	.word	0x58026300
 80023f4:	cfb80000 	.word	0xcfb80000

080023f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a7a      	ldr	r2, [pc, #488]	@ (80025f0 <ADC_ConfigureBoostMode+0x1f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <ADC_ConfigureBoostMode+0x1c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a79      	ldr	r2, [pc, #484]	@ (80025f4 <ADC_ConfigureBoostMode+0x1fc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d109      	bne.n	8002428 <ADC_ConfigureBoostMode+0x30>
 8002414:	4b78      	ldr	r3, [pc, #480]	@ (80025f8 <ADC_ConfigureBoostMode+0x200>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e008      	b.n	800243a <ADC_ConfigureBoostMode+0x42>
 8002428:	4b74      	ldr	r3, [pc, #464]	@ (80025fc <ADC_ConfigureBoostMode+0x204>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01c      	beq.n	8002478 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800243e:	f002 f9ed 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8002442:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800244c:	d010      	beq.n	8002470 <ADC_ConfigureBoostMode+0x78>
 800244e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002452:	d873      	bhi.n	800253c <ADC_ConfigureBoostMode+0x144>
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002458:	d002      	beq.n	8002460 <ADC_ConfigureBoostMode+0x68>
 800245a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800245e:	d16d      	bne.n	800253c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]
        break;
 800246e:	e068      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	60fb      	str	r3, [r7, #12]
        break;
 8002476:	e064      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002478:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	f003 fc74 	bl	8005d6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002484:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800248e:	d051      	beq.n	8002534 <ADC_ConfigureBoostMode+0x13c>
 8002490:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002494:	d854      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 8002496:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800249a:	d047      	beq.n	800252c <ADC_ConfigureBoostMode+0x134>
 800249c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80024a0:	d84e      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024a2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80024a6:	d03d      	beq.n	8002524 <ADC_ConfigureBoostMode+0x12c>
 80024a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80024ac:	d848      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024b2:	d033      	beq.n	800251c <ADC_ConfigureBoostMode+0x124>
 80024b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024b8:	d842      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024ba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80024be:	d029      	beq.n	8002514 <ADC_ConfigureBoostMode+0x11c>
 80024c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80024c4:	d83c      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024c6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80024ca:	d01a      	beq.n	8002502 <ADC_ConfigureBoostMode+0x10a>
 80024cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80024d0:	d836      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80024d6:	d014      	beq.n	8002502 <ADC_ConfigureBoostMode+0x10a>
 80024d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80024dc:	d830      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024e2:	d00e      	beq.n	8002502 <ADC_ConfigureBoostMode+0x10a>
 80024e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024e8:	d82a      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80024ee:	d008      	beq.n	8002502 <ADC_ConfigureBoostMode+0x10a>
 80024f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80024f4:	d824      	bhi.n	8002540 <ADC_ConfigureBoostMode+0x148>
 80024f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024fa:	d002      	beq.n	8002502 <ADC_ConfigureBoostMode+0x10a>
 80024fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002500:	d11e      	bne.n	8002540 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	60fb      	str	r3, [r7, #12]
        break;
 8002512:	e016      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
        break;
 800251a:	e012      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	60fb      	str	r3, [r7, #12]
        break;
 8002522:	e00e      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	60fb      	str	r3, [r7, #12]
        break;
 800252a:	e00a      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	09db      	lsrs	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]
        break;
 8002532:	e006      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	60fb      	str	r3, [r7, #12]
        break;
 800253a:	e002      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
        break;
 800253c:	bf00      	nop
 800253e:	e000      	b.n	8002542 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002540:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002542:	f7ff f8d9 	bl	80016f8 <HAL_GetREVID>
 8002546:	4603      	mov	r3, r0
 8002548:	f241 0203 	movw	r2, #4099	@ 0x1003
 800254c:	4293      	cmp	r3, r2
 800254e:	d815      	bhi.n	800257c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a2b      	ldr	r2, [pc, #172]	@ (8002600 <ADC_ConfigureBoostMode+0x208>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d908      	bls.n	800256a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002566:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002568:	e03e      	b.n	80025e8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002578:	609a      	str	r2, [r3, #8]
}
 800257a:	e035      	b.n	80025e8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <ADC_ConfigureBoostMode+0x20c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d808      	bhi.n	800259c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002598:	609a      	str	r2, [r3, #8]
}
 800259a:	e025      	b.n	80025e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <ADC_ConfigureBoostMode+0x210>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d80a      	bhi.n	80025ba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b6:	609a      	str	r2, [r3, #8]
}
 80025b8:	e016      	b.n	80025e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a13      	ldr	r2, [pc, #76]	@ (800260c <ADC_ConfigureBoostMode+0x214>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d80a      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d4:	609a      	str	r2, [r3, #8]
}
 80025d6:	e007      	b.n	80025e8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022100 	.word	0x40022100
 80025f8:	40022300 	.word	0x40022300
 80025fc:	58026300 	.word	0x58026300
 8002600:	01312d00 	.word	0x01312d00
 8002604:	005f5e10 	.word	0x005f5e10
 8002608:	00bebc20 	.word	0x00bebc20
 800260c:	017d7840 	.word	0x017d7840

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <__NVIC_SetPriorityGrouping+0x40>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 800263a:	4313      	orrs	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <__NVIC_SetPriorityGrouping+0x40>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00
 8002654:	05fa0000 	.word	0x05fa0000

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	@ (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	@ (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	@ (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	@ 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	@ 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff4c 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800278e:	f7ff ff63 	bl	8002658 <__NVIC_GetPriorityGrouping>
 8002792:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f7ff ffb3 	bl	8002704 <NVIC_EncodePriority>
 800279e:	4602      	mov	r2, r0
 80027a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff82 	bl	80026b0 <__NVIC_SetPriority>
}
 80027ac:	bf00      	nop
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff56 	bl	8002674 <__NVIC_EnableIRQ>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7fe ff82 	bl	80016e0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e2dc      	b.n	8002da2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	@ 0x80
 80027f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e2cd      	b.n	8002da2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a76      	ldr	r2, [pc, #472]	@ (80029e4 <HAL_DMA_Abort+0x214>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d04a      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a74      	ldr	r2, [pc, #464]	@ (80029e8 <HAL_DMA_Abort+0x218>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d045      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a73      	ldr	r2, [pc, #460]	@ (80029ec <HAL_DMA_Abort+0x21c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d040      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a71      	ldr	r2, [pc, #452]	@ (80029f0 <HAL_DMA_Abort+0x220>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d03b      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a70      	ldr	r2, [pc, #448]	@ (80029f4 <HAL_DMA_Abort+0x224>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d036      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6e      	ldr	r2, [pc, #440]	@ (80029f8 <HAL_DMA_Abort+0x228>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d031      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6d      	ldr	r2, [pc, #436]	@ (80029fc <HAL_DMA_Abort+0x22c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d02c      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <HAL_DMA_Abort+0x230>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d027      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6a      	ldr	r2, [pc, #424]	@ (8002a04 <HAL_DMA_Abort+0x234>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d022      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a68      	ldr	r2, [pc, #416]	@ (8002a08 <HAL_DMA_Abort+0x238>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01d      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a67      	ldr	r2, [pc, #412]	@ (8002a0c <HAL_DMA_Abort+0x23c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d018      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a65      	ldr	r2, [pc, #404]	@ (8002a10 <HAL_DMA_Abort+0x240>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a64      	ldr	r2, [pc, #400]	@ (8002a14 <HAL_DMA_Abort+0x244>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a62      	ldr	r2, [pc, #392]	@ (8002a18 <HAL_DMA_Abort+0x248>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a61      	ldr	r2, [pc, #388]	@ (8002a1c <HAL_DMA_Abort+0x24c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_DMA_Abort+0xd6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5f      	ldr	r2, [pc, #380]	@ (8002a20 <HAL_DMA_Abort+0x250>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <HAL_DMA_Abort+0xda>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_DMA_Abort+0xdc>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 021e 	bic.w	r2, r2, #30
 80028be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020e 	bic.w	r2, r2, #14
 80028e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a3c      	ldr	r2, [pc, #240]	@ (80029e4 <HAL_DMA_Abort+0x214>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d072      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3a      	ldr	r2, [pc, #232]	@ (80029e8 <HAL_DMA_Abort+0x218>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d06d      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a39      	ldr	r2, [pc, #228]	@ (80029ec <HAL_DMA_Abort+0x21c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d068      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a37      	ldr	r2, [pc, #220]	@ (80029f0 <HAL_DMA_Abort+0x220>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d063      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <HAL_DMA_Abort+0x224>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d05e      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a34      	ldr	r2, [pc, #208]	@ (80029f8 <HAL_DMA_Abort+0x228>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d059      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <HAL_DMA_Abort+0x22c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d054      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <HAL_DMA_Abort+0x230>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d04f      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a30      	ldr	r2, [pc, #192]	@ (8002a04 <HAL_DMA_Abort+0x234>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a08 <HAL_DMA_Abort+0x238>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2d      	ldr	r2, [pc, #180]	@ (8002a0c <HAL_DMA_Abort+0x23c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <HAL_DMA_Abort+0x240>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a14 <HAL_DMA_Abort+0x244>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a28      	ldr	r2, [pc, #160]	@ (8002a18 <HAL_DMA_Abort+0x248>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a27      	ldr	r2, [pc, #156]	@ (8002a1c <HAL_DMA_Abort+0x24c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a25      	ldr	r2, [pc, #148]	@ (8002a20 <HAL_DMA_Abort+0x250>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a24      	ldr	r2, [pc, #144]	@ (8002a24 <HAL_DMA_Abort+0x254>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <HAL_DMA_Abort+0x258>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a21      	ldr	r2, [pc, #132]	@ (8002a2c <HAL_DMA_Abort+0x25c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <HAL_DMA_Abort+0x260>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_DMA_Abort+0x264>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <HAL_DMA_Abort+0x268>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <HAL_DMA_Abort+0x26c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Abort+0x20e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_DMA_Abort+0x270>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d132      	bne.n	8002a44 <HAL_DMA_Abort+0x274>
 80029de:	2301      	movs	r3, #1
 80029e0:	e031      	b.n	8002a46 <HAL_DMA_Abort+0x276>
 80029e2:	bf00      	nop
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	40020040 	.word	0x40020040
 80029f0:	40020058 	.word	0x40020058
 80029f4:	40020070 	.word	0x40020070
 80029f8:	40020088 	.word	0x40020088
 80029fc:	400200a0 	.word	0x400200a0
 8002a00:	400200b8 	.word	0x400200b8
 8002a04:	40020410 	.word	0x40020410
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	40020440 	.word	0x40020440
 8002a10:	40020458 	.word	0x40020458
 8002a14:	40020470 	.word	0x40020470
 8002a18:	40020488 	.word	0x40020488
 8002a1c:	400204a0 	.word	0x400204a0
 8002a20:	400204b8 	.word	0x400204b8
 8002a24:	58025408 	.word	0x58025408
 8002a28:	5802541c 	.word	0x5802541c
 8002a2c:	58025430 	.word	0x58025430
 8002a30:	58025444 	.word	0x58025444
 8002a34:	58025458 	.word	0x58025458
 8002a38:	5802546c 	.word	0x5802546c
 8002a3c:	58025480 	.word	0x58025480
 8002a40:	58025494 	.word	0x58025494
 8002a44:	2300      	movs	r3, #0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8002c14 <HAL_DMA_Abort+0x444>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d04a      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6b      	ldr	r2, [pc, #428]	@ (8002c18 <HAL_DMA_Abort+0x448>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d045      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6a      	ldr	r2, [pc, #424]	@ (8002c1c <HAL_DMA_Abort+0x44c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d040      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	@ (8002c20 <HAL_DMA_Abort+0x450>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d03b      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a67      	ldr	r2, [pc, #412]	@ (8002c24 <HAL_DMA_Abort+0x454>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d036      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a65      	ldr	r2, [pc, #404]	@ (8002c28 <HAL_DMA_Abort+0x458>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d031      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a64      	ldr	r2, [pc, #400]	@ (8002c2c <HAL_DMA_Abort+0x45c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d02c      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a62      	ldr	r2, [pc, #392]	@ (8002c30 <HAL_DMA_Abort+0x460>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d027      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a61      	ldr	r2, [pc, #388]	@ (8002c34 <HAL_DMA_Abort+0x464>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c38 <HAL_DMA_Abort+0x468>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01d      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c3c <HAL_DMA_Abort+0x46c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d018      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5c      	ldr	r2, [pc, #368]	@ (8002c40 <HAL_DMA_Abort+0x470>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c44 <HAL_DMA_Abort+0x474>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_DMA_Abort+0x478>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_DMA_Abort+0x47c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_DMA_Abort+0x32a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_DMA_Abort+0x480>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <HAL_DMA_Abort+0x33c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <HAL_DMA_Abort+0x34c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b1c:	e013      	b.n	8002b46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1e:	f7fe fddf 	bl	80016e0 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d90c      	bls.n	8002b46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e12d      	b.n	8002da2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e5      	bne.n	8002b1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2f      	ldr	r2, [pc, #188]	@ (8002c14 <HAL_DMA_Abort+0x444>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d04a      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <HAL_DMA_Abort+0x448>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d045      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c1c <HAL_DMA_Abort+0x44c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d040      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2a      	ldr	r2, [pc, #168]	@ (8002c20 <HAL_DMA_Abort+0x450>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d03b      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <HAL_DMA_Abort+0x454>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d036      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <HAL_DMA_Abort+0x458>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a26      	ldr	r2, [pc, #152]	@ (8002c2c <HAL_DMA_Abort+0x45c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d02c      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a24      	ldr	r2, [pc, #144]	@ (8002c30 <HAL_DMA_Abort+0x460>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d027      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <HAL_DMA_Abort+0x464>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a21      	ldr	r2, [pc, #132]	@ (8002c38 <HAL_DMA_Abort+0x468>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <HAL_DMA_Abort+0x46c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d018      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <HAL_DMA_Abort+0x470>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1d      	ldr	r2, [pc, #116]	@ (8002c44 <HAL_DMA_Abort+0x474>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <HAL_DMA_Abort+0x478>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c4c <HAL_DMA_Abort+0x47c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_DMA_Abort+0x422>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_DMA_Abort+0x480>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_DMA_Abort+0x426>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_Abort+0x428>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02b      	beq.n	8002c54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	223f      	movs	r2, #63	@ 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	e02a      	b.n	8002c6a <HAL_DMA_Abort+0x49a>
 8002c14:	40020010 	.word	0x40020010
 8002c18:	40020028 	.word	0x40020028
 8002c1c:	40020040 	.word	0x40020040
 8002c20:	40020058 	.word	0x40020058
 8002c24:	40020070 	.word	0x40020070
 8002c28:	40020088 	.word	0x40020088
 8002c2c:	400200a0 	.word	0x400200a0
 8002c30:	400200b8 	.word	0x400200b8
 8002c34:	40020410 	.word	0x40020410
 8002c38:	40020428 	.word	0x40020428
 8002c3c:	40020440 	.word	0x40020440
 8002c40:	40020458 	.word	0x40020458
 8002c44:	40020470 	.word	0x40020470
 8002c48:	40020488 	.word	0x40020488
 8002c4c:	400204a0 	.word	0x400204a0
 8002c50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2201      	movs	r2, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8002dac <HAL_DMA_Abort+0x5dc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d072      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_DMA_Abort+0x5e0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d06d      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4c      	ldr	r2, [pc, #304]	@ (8002db4 <HAL_DMA_Abort+0x5e4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d068      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_DMA_Abort+0x5e8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d063      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a49      	ldr	r2, [pc, #292]	@ (8002dbc <HAL_DMA_Abort+0x5ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d05e      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a47      	ldr	r2, [pc, #284]	@ (8002dc0 <HAL_DMA_Abort+0x5f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d059      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a46      	ldr	r2, [pc, #280]	@ (8002dc4 <HAL_DMA_Abort+0x5f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d054      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a44      	ldr	r2, [pc, #272]	@ (8002dc8 <HAL_DMA_Abort+0x5f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04f      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <HAL_DMA_Abort+0x5fc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04a      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a41      	ldr	r2, [pc, #260]	@ (8002dd0 <HAL_DMA_Abort+0x600>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d045      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a40      	ldr	r2, [pc, #256]	@ (8002dd4 <HAL_DMA_Abort+0x604>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d040      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd8 <HAL_DMA_Abort+0x608>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03b      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8002ddc <HAL_DMA_Abort+0x60c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d036      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8002de0 <HAL_DMA_Abort+0x610>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_DMA_Abort+0x614>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02c      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_DMA_Abort+0x618>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d027      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a37      	ldr	r2, [pc, #220]	@ (8002dec <HAL_DMA_Abort+0x61c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a35      	ldr	r2, [pc, #212]	@ (8002df0 <HAL_DMA_Abort+0x620>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a34      	ldr	r2, [pc, #208]	@ (8002df4 <HAL_DMA_Abort+0x624>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a32      	ldr	r2, [pc, #200]	@ (8002df8 <HAL_DMA_Abort+0x628>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_DMA_Abort+0x62c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <HAL_DMA_Abort+0x630>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e04 <HAL_DMA_Abort+0x634>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_Abort+0x58a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	@ (8002e08 <HAL_DMA_Abort+0x638>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Abort+0x58e>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_Abort+0x590>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40020010 	.word	0x40020010
 8002db0:	40020028 	.word	0x40020028
 8002db4:	40020040 	.word	0x40020040
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	40020070 	.word	0x40020070
 8002dc0:	40020088 	.word	0x40020088
 8002dc4:	400200a0 	.word	0x400200a0
 8002dc8:	400200b8 	.word	0x400200b8
 8002dcc:	40020410 	.word	0x40020410
 8002dd0:	40020428 	.word	0x40020428
 8002dd4:	40020440 	.word	0x40020440
 8002dd8:	40020458 	.word	0x40020458
 8002ddc:	40020470 	.word	0x40020470
 8002de0:	40020488 	.word	0x40020488
 8002de4:	400204a0 	.word	0x400204a0
 8002de8:	400204b8 	.word	0x400204b8
 8002dec:	58025408 	.word	0x58025408
 8002df0:	5802541c 	.word	0x5802541c
 8002df4:	58025430 	.word	0x58025430
 8002df8:	58025444 	.word	0x58025444
 8002dfc:	58025458 	.word	0x58025458
 8002e00:	5802546c 	.word	0x5802546c
 8002e04:	58025480 	.word	0x58025480
 8002e08:	58025494 	.word	0x58025494

08002e0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e237      	b.n	800328e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d004      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2280      	movs	r2, #128	@ 0x80
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e22c      	b.n	800328e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5c      	ldr	r2, [pc, #368]	@ (8002fac <HAL_DMA_Abort_IT+0x1a0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d04a      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d045      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a59      	ldr	r2, [pc, #356]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d040      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a58      	ldr	r2, [pc, #352]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d03b      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a56      	ldr	r2, [pc, #344]	@ (8002fbc <HAL_DMA_Abort_IT+0x1b0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d036      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a55      	ldr	r2, [pc, #340]	@ (8002fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a53      	ldr	r2, [pc, #332]	@ (8002fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02c      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d027      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a50      	ldr	r2, [pc, #320]	@ (8002fcc <HAL_DMA_Abort_IT+0x1c0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01d      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d018      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fdc <HAL_DMA_Abort_IT+0x1d0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a49      	ldr	r2, [pc, #292]	@ (8002fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a47      	ldr	r2, [pc, #284]	@ (8002fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_DMA_Abort_IT+0xcc>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_DMA_Abort_IT+0xce>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8086 	beq.w	8002fec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2f      	ldr	r2, [pc, #188]	@ (8002fac <HAL_DMA_Abort_IT+0x1a0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d04a      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d045      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d040      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d03b      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <HAL_DMA_Abort_IT+0x1b0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d036      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d031      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02c      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a25      	ldr	r2, [pc, #148]	@ (8002fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d027      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <HAL_DMA_Abort_IT+0x1c0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d01d      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a20      	ldr	r2, [pc, #128]	@ (8002fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <HAL_DMA_Abort_IT+0x1d0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x17c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_DMA_Abort_IT+0x18e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e178      	b.n	800328c <HAL_DMA_Abort_IT+0x480>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e16f      	b.n	800328c <HAL_DMA_Abort_IT+0x480>
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020e 	bic.w	r2, r2, #14
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a6c      	ldr	r2, [pc, #432]	@ (80031b4 <HAL_DMA_Abort_IT+0x3a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d04a      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6b      	ldr	r2, [pc, #428]	@ (80031b8 <HAL_DMA_Abort_IT+0x3ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d045      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a69      	ldr	r2, [pc, #420]	@ (80031bc <HAL_DMA_Abort_IT+0x3b0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d040      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a68      	ldr	r2, [pc, #416]	@ (80031c0 <HAL_DMA_Abort_IT+0x3b4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d03b      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a66      	ldr	r2, [pc, #408]	@ (80031c4 <HAL_DMA_Abort_IT+0x3b8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d036      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a65      	ldr	r2, [pc, #404]	@ (80031c8 <HAL_DMA_Abort_IT+0x3bc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d031      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a63      	ldr	r2, [pc, #396]	@ (80031cc <HAL_DMA_Abort_IT+0x3c0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02c      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a62      	ldr	r2, [pc, #392]	@ (80031d0 <HAL_DMA_Abort_IT+0x3c4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d027      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a60      	ldr	r2, [pc, #384]	@ (80031d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a5f      	ldr	r2, [pc, #380]	@ (80031d8 <HAL_DMA_Abort_IT+0x3cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d01d      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5d      	ldr	r2, [pc, #372]	@ (80031dc <HAL_DMA_Abort_IT+0x3d0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5c      	ldr	r2, [pc, #368]	@ (80031e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_DMA_Abort_IT+0x3d8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a59      	ldr	r2, [pc, #356]	@ (80031e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a57      	ldr	r2, [pc, #348]	@ (80031ec <HAL_DMA_Abort_IT+0x3e0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_DMA_Abort_IT+0x290>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a56      	ldr	r2, [pc, #344]	@ (80031f0 <HAL_DMA_Abort_IT+0x3e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d108      	bne.n	80030ae <HAL_DMA_Abort_IT+0x2a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e007      	b.n	80030be <HAL_DMA_Abort_IT+0x2b2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3c      	ldr	r2, [pc, #240]	@ (80031b4 <HAL_DMA_Abort_IT+0x3a8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d072      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3a      	ldr	r2, [pc, #232]	@ (80031b8 <HAL_DMA_Abort_IT+0x3ac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d06d      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a39      	ldr	r2, [pc, #228]	@ (80031bc <HAL_DMA_Abort_IT+0x3b0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d068      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a37      	ldr	r2, [pc, #220]	@ (80031c0 <HAL_DMA_Abort_IT+0x3b4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d063      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a36      	ldr	r2, [pc, #216]	@ (80031c4 <HAL_DMA_Abort_IT+0x3b8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d05e      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a34      	ldr	r2, [pc, #208]	@ (80031c8 <HAL_DMA_Abort_IT+0x3bc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d059      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a33      	ldr	r2, [pc, #204]	@ (80031cc <HAL_DMA_Abort_IT+0x3c0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d054      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a31      	ldr	r2, [pc, #196]	@ (80031d0 <HAL_DMA_Abort_IT+0x3c4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04f      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <HAL_DMA_Abort_IT+0x3c8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2e      	ldr	r2, [pc, #184]	@ (80031d8 <HAL_DMA_Abort_IT+0x3cc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2d      	ldr	r2, [pc, #180]	@ (80031dc <HAL_DMA_Abort_IT+0x3d0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2b      	ldr	r2, [pc, #172]	@ (80031e0 <HAL_DMA_Abort_IT+0x3d4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2a      	ldr	r2, [pc, #168]	@ (80031e4 <HAL_DMA_Abort_IT+0x3d8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a28      	ldr	r2, [pc, #160]	@ (80031e8 <HAL_DMA_Abort_IT+0x3dc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a27      	ldr	r2, [pc, #156]	@ (80031ec <HAL_DMA_Abort_IT+0x3e0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a25      	ldr	r2, [pc, #148]	@ (80031f0 <HAL_DMA_Abort_IT+0x3e4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a24      	ldr	r2, [pc, #144]	@ (80031f4 <HAL_DMA_Abort_IT+0x3e8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a22      	ldr	r2, [pc, #136]	@ (80031f8 <HAL_DMA_Abort_IT+0x3ec>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	@ (80031fc <HAL_DMA_Abort_IT+0x3f0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <HAL_DMA_Abort_IT+0x3f4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_DMA_Abort_IT+0x3f8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1c      	ldr	r2, [pc, #112]	@ (8003208 <HAL_DMA_Abort_IT+0x3fc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_DMA_Abort_IT+0x400>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_Abort_IT+0x3a2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <HAL_DMA_Abort_IT+0x404>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d132      	bne.n	8003214 <HAL_DMA_Abort_IT+0x408>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e031      	b.n	8003216 <HAL_DMA_Abort_IT+0x40a>
 80031b2:	bf00      	nop
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	58025408 	.word	0x58025408
 80031f8:	5802541c 	.word	0x5802541c
 80031fc:	58025430 	.word	0x58025430
 8003200:	58025444 	.word	0x58025444
 8003204:	58025458 	.word	0x58025458
 8003208:	5802546c 	.word	0x5802546c
 800320c:	58025480 	.word	0x58025480
 8003210:	58025494 	.word	0x58025494
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d028      	beq.n	800326c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003224:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003228:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003248:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003260:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800326a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032a6:	4b89      	ldr	r3, [pc, #548]	@ (80034cc <HAL_GPIO_Init+0x234>)
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032aa:	e194      	b.n	80035d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8186 	beq.w	80035d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x44>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0201 	and.w	r2, r3, #1
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80e0 	beq.w	80035d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003410:	4b2f      	ldr	r3, [pc, #188]	@ (80034d0 <HAL_GPIO_Init+0x238>)
 8003412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003416:	4a2e      	ldr	r2, [pc, #184]	@ (80034d0 <HAL_GPIO_Init+0x238>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_GPIO_Init+0x238>)
 8003422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342e:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_GPIO_Init+0x23c>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a20      	ldr	r2, [pc, #128]	@ (80034d8 <HAL_GPIO_Init+0x240>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d052      	beq.n	8003500 <HAL_GPIO_Init+0x268>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1f      	ldr	r2, [pc, #124]	@ (80034dc <HAL_GPIO_Init+0x244>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d031      	beq.n	80034c6 <HAL_GPIO_Init+0x22e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <HAL_GPIO_Init+0x248>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02b      	beq.n	80034c2 <HAL_GPIO_Init+0x22a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_GPIO_Init+0x24c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d025      	beq.n	80034be <HAL_GPIO_Init+0x226>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1c      	ldr	r2, [pc, #112]	@ (80034e8 <HAL_GPIO_Init+0x250>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <HAL_GPIO_Init+0x222>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1b      	ldr	r2, [pc, #108]	@ (80034ec <HAL_GPIO_Init+0x254>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x21e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1a      	ldr	r2, [pc, #104]	@ (80034f0 <HAL_GPIO_Init+0x258>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x21a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <HAL_GPIO_Init+0x25c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x216>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_GPIO_Init+0x260>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x212>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a17      	ldr	r2, [pc, #92]	@ (80034fc <HAL_GPIO_Init+0x264>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x20e>
 80034a2:	2309      	movs	r3, #9
 80034a4:	e02d      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034a6:	230a      	movs	r3, #10
 80034a8:	e02b      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034aa:	2308      	movs	r3, #8
 80034ac:	e029      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e027      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034b2:	2306      	movs	r3, #6
 80034b4:	e025      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e023      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e021      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034be:	2303      	movs	r3, #3
 80034c0:	e01f      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e01d      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e01b      	b.n	8003502 <HAL_GPIO_Init+0x26a>
 80034ca:	bf00      	nop
 80034cc:	58000080 	.word	0x58000080
 80034d0:	58024400 	.word	0x58024400
 80034d4:	58000400 	.word	0x58000400
 80034d8:	58020000 	.word	0x58020000
 80034dc:	58020400 	.word	0x58020400
 80034e0:	58020800 	.word	0x58020800
 80034e4:	58020c00 	.word	0x58020c00
 80034e8:	58021000 	.word	0x58021000
 80034ec:	58021400 	.word	0x58021400
 80034f0:	58021800 	.word	0x58021800
 80034f4:	58021c00 	.word	0x58021c00
 80034f8:	58022000 	.word	0x58022000
 80034fc:	58022400 	.word	0x58022400
 8003500:	2300      	movs	r3, #0
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	f002 0203 	and.w	r2, r2, #3
 8003508:	0092      	lsls	r2, r2, #2
 800350a:	4093      	lsls	r3, r2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003512:	4938      	ldr	r1, [pc, #224]	@ (80035f4 <HAL_GPIO_Init+0x35c>)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	3302      	adds	r3, #2
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800354e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f ae63 	bne.w	80032ac <HAL_GPIO_Init+0x14>
  }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3724      	adds	r7, #36	@ 0x24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	58000400 	.word	0x58000400

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08b      	b.n	8003756 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fa26 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800367c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e006      	b.n	80036b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d108      	bne.n	80036ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e007      	b.n	80036de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_I2C_Init+0x134>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69d9      	ldr	r1, [r3, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	02008000 	.word	0x02008000

08003764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	d138      	bne.n	80037ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003784:	2302      	movs	r3, #2
 8003786:	e032      	b.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	@ 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	d139      	bne.n	8003884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800381a:	2302      	movs	r3, #2
 800381c:	e033      	b.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2224      	movs	r2, #36	@ 0x24
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800384c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800389c:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_PWREx_ConfigSupply+0x70>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d00a      	beq.n	80038be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038a8:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_PWREx_ConfigSupply+0x70>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d001      	beq.n	80038ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e01f      	b.n	80038fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e01d      	b.n	80038fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038be:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_PWREx_ConfigSupply+0x70>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	490f      	ldr	r1, [pc, #60]	@ (8003904 <HAL_PWREx_ConfigSupply+0x70>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038ce:	f7fd ff07 	bl	80016e0 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038d4:	e009      	b.n	80038ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038d6:	f7fd ff03 	bl	80016e0 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038e4:	d901      	bls.n	80038ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e007      	b.n	80038fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_PWREx_ConfigSupply+0x70>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f6:	d1ee      	bne.n	80038d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	58024800 	.word	0x58024800

08003908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	@ 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f000 bc48 	b.w	80041ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8088 	beq.w	8003a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b99      	ldr	r3, [pc, #612]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003934:	4b96      	ldr	r3, [pc, #600]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393c:	2b10      	cmp	r3, #16
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x48>
 8003940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003942:	2b18      	cmp	r3, #24
 8003944:	d111      	bne.n	800396a <HAL_RCC_OscConfig+0x62>
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	4b8f      	ldr	r3, [pc, #572]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d06d      	beq.n	8003a38 <HAL_RCC_OscConfig+0x130>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d169      	bne.n	8003a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f000 bc21 	b.w	80041ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x7a>
 8003974:	4b86      	ldr	r3, [pc, #536]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a85      	ldr	r2, [pc, #532]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e02e      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x9c>
 800398a:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a80      	ldr	r2, [pc, #512]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039ae:	4b78      	ldr	r3, [pc, #480]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a77      	ldr	r2, [pc, #476]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b75      	ldr	r3, [pc, #468]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a74      	ldr	r2, [pc, #464]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 80039c8:	4b71      	ldr	r3, [pc, #452]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6d      	ldr	r2, [pc, #436]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fe7a 	bl	80016e0 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fe76 	bl	80016e0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	@ 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e3d4      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a02:	4b63      	ldr	r3, [pc, #396]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fe66 	bl	80016e0 <HAL_GetTick>
 8003a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fd fe62 	bl	80016e0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	@ 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e3c0      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a2a:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x110>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80ca 	beq.w	8003bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a48:	4b51      	ldr	r3, [pc, #324]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a52:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_RCC_OscConfig+0x166>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b18      	cmp	r3, #24
 8003a62:	d156      	bne.n	8003b12 <HAL_RCC_OscConfig+0x20a>
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d151      	bne.n	8003b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6e:	4b48      	ldr	r3, [pc, #288]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e392      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a86:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0219 	bic.w	r2, r3, #25
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	493f      	ldr	r1, [pc, #252]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fe22 	bl	80016e0 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fe1e 	bl	80016e0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e37c      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab2:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	f7fd fe1b 	bl	80016f8 <HAL_GetREVID>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d817      	bhi.n	8003afc <HAL_RCC_OscConfig+0x1f4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d108      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
 8003ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003adc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae4:	e07a      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	031b      	lsls	r3, r3, #12
 8003af4:	4926      	ldr	r1, [pc, #152]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afa:	e06f      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	4921      	ldr	r1, [pc, #132]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b10:	e064      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d047      	beq.n	8003baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0219 	bic.w	r2, r3, #25
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	491a      	ldr	r1, [pc, #104]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fdd8 	bl	80016e0 <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd fdd4 	bl	80016e0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e332      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	f7fd fdd1 	bl	80016f8 <HAL_GetREVID>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d819      	bhi.n	8003b94 <HAL_RCC_OscConfig+0x28c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d108      	bne.n	8003b7a <HAL_RCC_OscConfig+0x272>
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b70:	4a07      	ldr	r2, [pc, #28]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b76:	6053      	str	r3, [r2, #4]
 8003b78:	e030      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	031b      	lsls	r3, r3, #12
 8003b88:	4901      	ldr	r1, [pc, #4]	@ (8003b90 <HAL_RCC_OscConfig+0x288>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
 8003b8e:	e025      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
 8003b90:	58024400 	.word	0x58024400
 8003b94:	4b9a      	ldr	r3, [pc, #616]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	4997      	ldr	r1, [pc, #604]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
 8003ba8:	e018      	b.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b95      	ldr	r3, [pc, #596]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a94      	ldr	r2, [pc, #592]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fd93 	bl	80016e0 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fd8f 	bl	80016e0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e2ed      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a9 	beq.w	8003d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b85      	ldr	r3, [pc, #532]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bf4:	4b82      	ldr	r3, [pc, #520]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d007      	beq.n	8003c10 <HAL_RCC_OscConfig+0x308>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b18      	cmp	r3, #24
 8003c04:	d13a      	bne.n	8003c7c <HAL_RCC_OscConfig+0x374>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d135      	bne.n	8003c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c10:	4b7b      	ldr	r3, [pc, #492]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x320>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b80      	cmp	r3, #128	@ 0x80
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e2c1      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c28:	f7fd fd66 	bl	80016f8 <HAL_GetREVID>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d817      	bhi.n	8003c66 <HAL_RCC_OscConfig+0x35e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x348>
 8003c3e:	4b70      	ldr	r3, [pc, #448]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c46:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c4e:	e075      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c50:	4b6b      	ldr	r3, [pc, #428]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	069b      	lsls	r3, r3, #26
 8003c5e:	4968      	ldr	r1, [pc, #416]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c64:	e06a      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c66:	4b66      	ldr	r3, [pc, #408]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	4962      	ldr	r1, [pc, #392]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c7a:	e05f      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d042      	beq.n	8003d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c84:	4b5e      	ldr	r3, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fd26 	bl	80016e0 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c98:	f7fd fd22 	bl	80016e0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e280      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003caa:	4b55      	ldr	r3, [pc, #340]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cb6:	f7fd fd1f 	bl	80016f8 <HAL_GetREVID>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d817      	bhi.n	8003cf4 <HAL_RCC_OscConfig+0x3ec>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d108      	bne.n	8003cde <HAL_RCC_OscConfig+0x3d6>
 8003ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003cd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cda:	6053      	str	r3, [r2, #4]
 8003cdc:	e02e      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
 8003cde:	4b48      	ldr	r3, [pc, #288]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	069b      	lsls	r3, r3, #26
 8003cec:	4944      	ldr	r1, [pc, #272]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 8003cf2:	e023      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
 8003cf4:	4b42      	ldr	r3, [pc, #264]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	493f      	ldr	r1, [pc, #252]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
 8003d08:	e018      	b.n	8003d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd fce3 	bl	80016e0 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d1e:	f7fd fcdf 	bl	80016e0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e23d      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d30:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d036      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d019      	beq.n	8003d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d50:	4b2b      	ldr	r3, [pc, #172]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d54:	4a2a      	ldr	r2, [pc, #168]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fcc0 	bl	80016e0 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fd fcbc 	bl	80016e0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e21a      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d76:	4b22      	ldr	r3, [pc, #136]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x45c>
 8003d82:	e018      	b.n	8003db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d84:	4b1e      	ldr	r3, [pc, #120]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d88:	4a1d      	ldr	r2, [pc, #116]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fd fca6 	bl	80016e0 <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fd fca2 	bl	80016e0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e200      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003daa:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d039      	beq.n	8003e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0c      	ldr	r2, [pc, #48]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fc83 	bl	80016e0 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dde:	f7fd fc7f 	bl	80016e0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1dd      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003df0:	4b03      	ldr	r3, [pc, #12]	@ (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x4d6>
 8003dfc:	e01b      	b.n	8003e36 <HAL_RCC_OscConfig+0x52e>
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e04:	4b9b      	ldr	r3, [pc, #620]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a9a      	ldr	r2, [pc, #616]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e10:	f7fd fc66 	bl	80016e0 <HAL_GetTick>
 8003e14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e18:	f7fd fc62 	bl	80016e0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1c0      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e2a:	4b92      	ldr	r3, [pc, #584]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8081 	beq.w	8003f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e44:	4b8c      	ldr	r3, [pc, #560]	@ (8004078 <HAL_RCC_OscConfig+0x770>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a8b      	ldr	r2, [pc, #556]	@ (8004078 <HAL_RCC_OscConfig+0x770>)
 8003e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e50:	f7fd fc46 	bl	80016e0 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e58:	f7fd fc42 	bl	80016e0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1a0      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6a:	4b83      	ldr	r3, [pc, #524]	@ (8004078 <HAL_RCC_OscConfig+0x770>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x584>
 8003e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a7c      	ldr	r2, [pc, #496]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	e02d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x5e0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x5a6>
 8003e94:	4b77      	ldr	r3, [pc, #476]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	4a76      	ldr	r2, [pc, #472]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea0:	4b74      	ldr	r3, [pc, #464]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a73      	ldr	r2, [pc, #460]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x5e0>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5c8>
 8003eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a6e      	ldr	r2, [pc, #440]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x5e0>
 8003ed0:	4b68      	ldr	r3, [pc, #416]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a67      	ldr	r2, [pc, #412]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	4b65      	ldr	r3, [pc, #404]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a64      	ldr	r2, [pc, #400]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d015      	beq.n	8003f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fbf6 	bl	80016e0 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fbf2 	bl	80016e0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e14e      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0e:	4b59      	ldr	r3, [pc, #356]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ee      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x5f0>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fd fbe0 	bl	80016e0 <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fd fbdc 	bl	80016e0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e138      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ee      	bne.n	8003f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 812d 	beq.w	80041aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f50:	4b48      	ldr	r3, [pc, #288]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f58:	2b18      	cmp	r3, #24
 8003f5a:	f000 80bd 	beq.w	80040d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	f040 809e 	bne.w	80040a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b42      	ldr	r3, [pc, #264]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a41      	ldr	r2, [pc, #260]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fbb4 	bl	80016e0 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fbb0 	bl	80016e0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e10e      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f8e:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f9e:	4b37      	ldr	r3, [pc, #220]	@ (800407c <HAL_RCC_OscConfig+0x774>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	430a      	orrs	r2, r1
 8003fae:	4931      	ldr	r1, [pc, #196]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fe4:	4923      	ldr	r1, [pc, #140]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fea:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fee:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ffa:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <HAL_RCC_OscConfig+0x778>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004002:	00d2      	lsls	r2, r2, #3
 8004004:	491b      	ldr	r1, [pc, #108]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800400a:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f023 020c 	bic.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	4917      	ldr	r1, [pc, #92]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800401c:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f023 0202 	bic.w	r2, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004028:	4912      	ldr	r1, [pc, #72]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800402e:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403a:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	4a0d      	ldr	r2, [pc, #52]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004052:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405e:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a04      	ldr	r2, [pc, #16]	@ (8004074 <HAL_RCC_OscConfig+0x76c>)
 8004064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fb39 	bl	80016e0 <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004070:	e011      	b.n	8004096 <HAL_RCC_OscConfig+0x78e>
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	58024800 	.word	0x58024800
 800407c:	fffffc0c 	.word	0xfffffc0c
 8004080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fb2c 	bl	80016e0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e08a      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004096:	4b47      	ldr	r3, [pc, #284]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x77c>
 80040a2:	e082      	b.n	80041aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	4b43      	ldr	r3, [pc, #268]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a42      	ldr	r2, [pc, #264]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd fb16 	bl	80016e0 <HAL_GetTick>
 80040b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fd fb12 	bl	80016e0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e070      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ca:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x7b0>
 80040d6:	e068      	b.n	80041aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040d8:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040de:	4b35      	ldr	r3, [pc, #212]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d031      	beq.n	8004150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0203 	and.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d12a      	bne.n	8004150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d122      	bne.n	8004150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	0a5b      	lsrs	r3, r3, #9
 800411e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d111      	bne.n	8004150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d108      	bne.n	8004150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	0e1b      	lsrs	r3, r3, #24
 8004142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e02b      	b.n	80041ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004154:	4b17      	ldr	r3, [pc, #92]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800415e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	429a      	cmp	r2, r3
 8004168:	d01f      	beq.n	80041aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4a11      	ldr	r2, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004176:	f7fd fab3 	bl	80016e0 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800417c:	bf00      	nop
 800417e:	f7fd faaf 	bl	80016e0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	4293      	cmp	r3, r2
 8004188:	d0f9      	beq.n	800417e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 800418c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <HAL_RCC_OscConfig+0x8b0>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004196:	00d2      	lsls	r2, r2, #3
 8004198:	4906      	ldr	r1, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 800419a:	4313      	orrs	r3, r2
 800419c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCC_OscConfig+0x8ac>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	@ 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	58024400 	.word	0x58024400
 80041b8:	ffff0007 	.word	0xffff0007

080041bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e19c      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b8a      	ldr	r3, [pc, #552]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b87      	ldr	r3, [pc, #540]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4985      	ldr	r1, [pc, #532]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b83      	ldr	r3, [pc, #524]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e184      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	4b7b      	ldr	r3, [pc, #492]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004218:	429a      	cmp	r2, r3
 800421a:	d908      	bls.n	800422e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800421c:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	4975      	ldr	r1, [pc, #468]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800422a:	4313      	orrs	r3, r2
 800422c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d010      	beq.n	800425c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	4b70      	ldr	r3, [pc, #448]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004246:	429a      	cmp	r2, r3
 8004248:	d908      	bls.n	800425c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800424a:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	496a      	ldr	r1, [pc, #424]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004258:	4313      	orrs	r3, r2
 800425a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	4b64      	ldr	r3, [pc, #400]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004274:	429a      	cmp	r2, r3
 8004276:	d908      	bls.n	800428a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004278:	4b61      	ldr	r3, [pc, #388]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	495e      	ldr	r1, [pc, #376]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004286:	4313      	orrs	r3, r2
 8004288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d908      	bls.n	80042b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042a6:	4b56      	ldr	r3, [pc, #344]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4953      	ldr	r1, [pc, #332]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d908      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f023 020f 	bic.w	r2, r3, #15
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4947      	ldr	r1, [pc, #284]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d055      	beq.n	800439e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042f2:	4b43      	ldr	r3, [pc, #268]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4940      	ldr	r1, [pc, #256]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004300:	4313      	orrs	r3, r2
 8004302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d107      	bne.n	800431c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800430c:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d121      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0f6      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d107      	bne.n	8004334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004324:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d115      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0ea      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800433c:	4b30      	ldr	r3, [pc, #192]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0de      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800434c:	4b2c      	ldr	r3, [pc, #176]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0d6      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800435c:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f023 0207 	bic.w	r2, r3, #7
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	4925      	ldr	r1, [pc, #148]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436e:	f7fd f9b7 	bl	80016e0 <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004374:	e00a      	b.n	800438c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004376:	f7fd f9b3 	bl	80016e0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0be      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438c:	4b1c      	ldr	r3, [pc, #112]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	429a      	cmp	r2, r3
 800439c:	d1eb      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d010      	beq.n	80043cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d208      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ba:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f023 020f 	bic.w	r2, r3, #15
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	490e      	ldr	r1, [pc, #56]	@ (8004400 <HAL_RCC_ClockConfig+0x244>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d214      	bcs.n	8004404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 020f 	bic.w	r2, r3, #15
 80043e2:	4906      	ldr	r1, [pc, #24]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <HAL_RCC_ClockConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e086      	b.n	800450a <HAL_RCC_ClockConfig+0x34e>
 80043fc:	52002000 	.word	0x52002000
 8004400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441c:	429a      	cmp	r2, r3
 800441e:	d208      	bcs.n	8004432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004420:	4b3c      	ldr	r3, [pc, #240]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	4939      	ldr	r1, [pc, #228]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 800442e:	4313      	orrs	r3, r2
 8004430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800444a:	429a      	cmp	r2, r3
 800444c:	d208      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800444e:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	492e      	ldr	r1, [pc, #184]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 800445c:	4313      	orrs	r3, r2
 800445e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004478:	429a      	cmp	r2, r3
 800447a:	d208      	bcs.n	800448e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800447c:	4b25      	ldr	r3, [pc, #148]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	4922      	ldr	r1, [pc, #136]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 800448a:	4313      	orrs	r3, r2
 800448c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d208      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4917      	ldr	r1, [pc, #92]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044bc:	f000 f834 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b14      	ldr	r3, [pc, #80]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4912      	ldr	r1, [pc, #72]	@ (8004518 <HAL_RCC_ClockConfig+0x35c>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044da:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <HAL_RCC_ClockConfig+0x358>)
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <HAL_RCC_ClockConfig+0x35c>)
 80044e4:	5cd3      	ldrb	r3, [r2, r3]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <HAL_RCC_ClockConfig+0x360>)
 80044f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <HAL_RCC_ClockConfig+0x364>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <HAL_RCC_ClockConfig+0x368>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc fcda 	bl	8000eb8 <HAL_InitTick>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	58024400 	.word	0x58024400
 8004518:	0800dd88 	.word	0x0800dd88
 800451c:	24000004 	.word	0x24000004
 8004520:	24000000 	.word	0x24000000
 8004524:	24000008 	.word	0x24000008

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800452e:	4bb3      	ldr	r3, [pc, #716]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004536:	2b18      	cmp	r3, #24
 8004538:	f200 8155 	bhi.w	80047e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	080045a9 	.word	0x080045a9
 8004548:	080047e7 	.word	0x080047e7
 800454c:	080047e7 	.word	0x080047e7
 8004550:	080047e7 	.word	0x080047e7
 8004554:	080047e7 	.word	0x080047e7
 8004558:	080047e7 	.word	0x080047e7
 800455c:	080047e7 	.word	0x080047e7
 8004560:	080047e7 	.word	0x080047e7
 8004564:	080045cf 	.word	0x080045cf
 8004568:	080047e7 	.word	0x080047e7
 800456c:	080047e7 	.word	0x080047e7
 8004570:	080047e7 	.word	0x080047e7
 8004574:	080047e7 	.word	0x080047e7
 8004578:	080047e7 	.word	0x080047e7
 800457c:	080047e7 	.word	0x080047e7
 8004580:	080047e7 	.word	0x080047e7
 8004584:	080045d5 	.word	0x080045d5
 8004588:	080047e7 	.word	0x080047e7
 800458c:	080047e7 	.word	0x080047e7
 8004590:	080047e7 	.word	0x080047e7
 8004594:	080047e7 	.word	0x080047e7
 8004598:	080047e7 	.word	0x080047e7
 800459c:	080047e7 	.word	0x080047e7
 80045a0:	080047e7 	.word	0x080047e7
 80045a4:	080045db 	.word	0x080045db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a8:	4b94      	ldr	r3, [pc, #592]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045b4:	4b91      	ldr	r3, [pc, #580]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	4a90      	ldr	r2, [pc, #576]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80045c6:	e111      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045ca:	61bb      	str	r3, [r7, #24]
      break;
 80045cc:	e10e      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80045ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045d0:	61bb      	str	r3, [r7, #24]
      break;
 80045d2:	e10b      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045d6:	61bb      	str	r3, [r7, #24]
      break;
 80045d8:	e108      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045da:	4b88      	ldr	r3, [pc, #544]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045e4:	4b85      	ldr	r3, [pc, #532]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045f0:	4b82      	ldr	r3, [pc, #520]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045fa:	4b80      	ldr	r3, [pc, #512]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80e1 	beq.w	80047e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b02      	cmp	r3, #2
 8004622:	f000 8083 	beq.w	800472c <HAL_RCC_GetSysClockFreq+0x204>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b02      	cmp	r3, #2
 800462a:	f200 80a1 	bhi.w	8004770 <HAL_RCC_GetSysClockFreq+0x248>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x114>
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d056      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800463a:	e099      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800463c:	4b6f      	ldr	r3, [pc, #444]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02d      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004648:	4b6c      	ldr	r3, [pc, #432]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	4a6b      	ldr	r2, [pc, #428]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004672:	4b62      	ldr	r3, [pc, #392]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004682:	ed97 6a02 	vldr	s12, [r7, #8]
 8004686:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800480c <HAL_RCC_GetSysClockFreq+0x2e4>
 800468a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80046a2:	e087      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b6:	4b51      	ldr	r3, [pc, #324]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800480c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046e6:	e065      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a02 	vldr	s12, [r7, #8]
 800470e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800480c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800472a:	e043      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	4b2f      	ldr	r3, [pc, #188]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004752:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800480c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800476e:	e021      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b1e      	ldr	r3, [pc, #120]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a02 	vldr	s12, [r7, #8]
 8004796:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800480c <HAL_RCC_GetSysClockFreq+0x2e4>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047b4:	4b11      	ldr	r3, [pc, #68]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	0a5b      	lsrs	r3, r3, #9
 80047ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047be:	3301      	adds	r3, #1
 80047c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d8:	ee17 3a90 	vmov	r3, s15
 80047dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047de:	e005      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
      break;
 80047e4:	e002      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047e6:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047e8:	61bb      	str	r3, [r7, #24]
      break;
 80047ea:	bf00      	nop
  }

  return sysclockfreq;
 80047ec:	69bb      	ldr	r3, [r7, #24]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3724      	adds	r7, #36	@ 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400
 8004800:	03d09000 	.word	0x03d09000
 8004804:	003d0900 	.word	0x003d0900
 8004808:	017d7840 	.word	0x017d7840
 800480c:	46000000 	.word	0x46000000
 8004810:	4c742400 	.word	0x4c742400
 8004814:	4a742400 	.word	0x4a742400
 8004818:	4bbebc20 	.word	0x4bbebc20

0800481c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004822:	f7ff fe81 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b10      	ldr	r3, [pc, #64]	@ (800486c <HAL_RCC_GetHCLKFreq+0x50>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490f      	ldr	r1, [pc, #60]	@ (8004870 <HAL_RCC_GetHCLKFreq+0x54>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004840:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_RCC_GetHCLKFreq+0x50>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	4a09      	ldr	r2, [pc, #36]	@ (8004870 <HAL_RCC_GetHCLKFreq+0x54>)
 800484a:	5cd3      	ldrb	r3, [r2, r3]
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	fa22 f303 	lsr.w	r3, r2, r3
 8004856:	4a07      	ldr	r2, [pc, #28]	@ (8004874 <HAL_RCC_GetHCLKFreq+0x58>)
 8004858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800485a:	4a07      	ldr	r2, [pc, #28]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004860:	4b04      	ldr	r3, [pc, #16]	@ (8004874 <HAL_RCC_GetHCLKFreq+0x58>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58024400 	.word	0x58024400
 8004870:	0800dd88 	.word	0x0800dd88
 8004874:	24000004 	.word	0x24000004
 8004878:	24000000 	.word	0x24000000

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004880:	f7ff ffcc 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58024400 	.word	0x58024400
 80048a4:	0800dd88 	.word	0x0800dd88

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048ac:	f7ff ffb6 	bl	800481c <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4904      	ldr	r1, [pc, #16]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58024400 	.word	0x58024400
 80048d0:	0800dd88 	.word	0x0800dd88

080048d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223f      	movs	r2, #63	@ 0x3f
 80048e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0207 	and.w	r2, r3, #7
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80048fc:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004914:	4b0e      	ldr	r3, [pc, #56]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800492c:	4b08      	ldr	r3, [pc, #32]	@ (8004950 <HAL_RCC_GetClockConfig+0x7c>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004938:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <HAL_RCC_GetClockConfig+0x80>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	58024400 	.word	0x58024400
 8004954:	52002000 	.word	0x52002000

08004958 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b0ca      	sub	sp, #296	@ 0x128
 800495e:	af00      	add	r7, sp, #0
 8004960:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800497c:	2500      	movs	r5, #0
 800497e:	ea54 0305 	orrs.w	r3, r4, r5
 8004982:	d049      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800498a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800498e:	d02f      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004990:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004994:	d828      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800499a:	d01a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049a0:	d822      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049aa:	d007      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049ac:	e01c      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ae:	4bb8      	ldr	r3, [pc, #736]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	4ab7      	ldr	r2, [pc, #732]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049ba:	e01a      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	3308      	adds	r3, #8
 80049c2:	2102      	movs	r1, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f002 fb61 	bl	800708c <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049d0:	e00f      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	3328      	adds	r3, #40	@ 0x28
 80049d8:	2102      	movs	r1, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f002 fc08 	bl	80071f0 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049e6:	e004      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049fa:	4ba5      	ldr	r3, [pc, #660]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a08:	4aa1      	ldr	r2, [pc, #644]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a0e:	e003      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a24:	f04f 0900 	mov.w	r9, #0
 8004a28:	ea58 0309 	orrs.w	r3, r8, r9
 8004a2c:	d047      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d82a      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a55 	.word	0x08004a55
 8004a44:	08004a63 	.word	0x08004a63
 8004a48:	08004a79 	.word	0x08004a79
 8004a4c:	08004a97 	.word	0x08004a97
 8004a50:	08004a97 	.word	0x08004a97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b8e      	ldr	r3, [pc, #568]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	4a8d      	ldr	r2, [pc, #564]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a60:	e01a      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	3308      	adds	r3, #8
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fb0e 	bl	800708c <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a76:	e00f      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7c:	3328      	adds	r3, #40	@ 0x28
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f002 fbb5 	bl	80071f0 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a8c:	e004      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa4:	f023 0107 	bic.w	r1, r3, #7
 8004aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	4a78      	ldr	r2, [pc, #480]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ab4:	e003      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004aca:	f04f 0b00 	mov.w	fp, #0
 8004ace:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ad2:	d04c      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ade:	d030      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae4:	d829      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ae8:	d02d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aec:	d825      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aee:	2b80      	cmp	r3, #128	@ 0x80
 8004af0:	d018      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004af2:	2b80      	cmp	r3, #128	@ 0x80
 8004af4:	d821      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d007      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004afe:	e01c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4b63      	ldr	r3, [pc, #396]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	4a62      	ldr	r2, [pc, #392]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b0c:	e01c      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	3308      	adds	r3, #8
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f002 fab8 	bl	800708c <RCCEx_PLL2_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	3328      	adds	r3, #40	@ 0x28
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f002 fb5f 	bl	80071f0 <RCCEx_PLL3_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004b38:	e006      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b50:	4b4f      	ldr	r3, [pc, #316]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b54:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d053      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b9a:	d035      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004b9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ba0:	d82e      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ba6:	d031      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ba8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004bac:	d828      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb2:	d01a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb8:	d822      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004bbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc2:	d007      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004bc4:	e01c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4b32      	ldr	r3, [pc, #200]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a31      	ldr	r2, [pc, #196]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e01c      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	3308      	adds	r3, #8
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 fa55 	bl	800708c <RCCEx_PLL2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004be8:	e011      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	3328      	adds	r3, #40	@ 0x28
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f002 fafc 	bl	80071f0 <RCCEx_PLL3_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e006      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c16:	4b1e      	ldr	r3, [pc, #120]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c26:	4a1a      	ldr	r2, [pc, #104]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d056      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c62:	d038      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c68:	d831      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c6e:	d034      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c74:	d82b      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c7a:	d01d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c80:	d825      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c8c:	e01f      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c94:	4ba2      	ldr	r3, [pc, #648]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	4aa1      	ldr	r2, [pc, #644]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ca0:	e01c      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f002 f9ee 	bl	800708c <RCCEx_PLL2_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cb6:	e011      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbc:	3328      	adds	r3, #40	@ 0x28
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 fa95 	bl	80071f0 <RCCEx_PLL3_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ce4:	4b8e      	ldr	r3, [pc, #568]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cf4:	4a8a      	ldr	r2, [pc, #552]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004d10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d03a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2a:	2b30      	cmp	r3, #48	@ 0x30
 8004d2c:	d01f      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004d2e:	2b30      	cmp	r3, #48	@ 0x30
 8004d30:	d819      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d00c      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d815      	bhi.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d019      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d111      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d42:	4b77      	ldr	r3, [pc, #476]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	4a76      	ldr	r2, [pc, #472]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d4e:	e011      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d54:	3308      	adds	r3, #8
 8004d56:	2102      	movs	r1, #2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f002 f997 	bl	800708c <RCCEx_PLL2_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d7c:	4b68      	ldr	r3, [pc, #416]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8a:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004da6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004db0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d051      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc4:	d035      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dca:	d82e      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd0:	d031      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd6:	d828      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ddc:	d01a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de2:	d822      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dec:	d007      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004dee:	e01c      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df0:	4b4b      	ldr	r3, [pc, #300]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a4a      	ldr	r2, [pc, #296]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e01c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3308      	adds	r3, #8
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 f940 	bl	800708c <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e12:	e011      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	3328      	adds	r3, #40	@ 0x28
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f002 f9e7 	bl	80071f0 <RCCEx_PLL3_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e40:	4b37      	ldr	r3, [pc, #220]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4e:	4a34      	ldr	r2, [pc, #208]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d056      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e88:	d033      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8e:	d82c      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e94:	d02f      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004e96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e9a:	d826      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ea0:	d02b      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ea2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ea6:	d820      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eac:	d012      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb2:	d81a      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d115      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 f8e0 	bl	800708c <RCCEx_PLL2_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ed2:	e015      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	3328      	adds	r3, #40	@ 0x28
 8004eda:	2101      	movs	r1, #1
 8004edc:	4618      	mov	r0, r3
 8004ede:	f002 f987 	bl	80071f0 <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef0:	e006      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f16:	4a02      	ldr	r2, [pc, #8]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f1c:	e006      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f1e:	bf00      	nop
 8004f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d055      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f58:	d033      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f5e:	d82c      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f64:	d02f      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d826      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f70:	d02b      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f76:	d820      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7c:	d012      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f82:	d81a      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d022      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f8c:	d115      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	3308      	adds	r3, #8
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f002 f878 	bl	800708c <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fa2:	e015      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	3328      	adds	r3, #40	@ 0x28
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 f91f 	bl	80071f0 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fc0:	e006      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e004      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e002      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fd8:	4ba3      	ldr	r3, [pc, #652]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fdc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fe8:	4a9f      	ldr	r2, [pc, #636]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800500e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005012:	460b      	mov	r3, r1
 8005014:	4313      	orrs	r3, r2
 8005016:	d037      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005022:	d00e      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005028:	d816      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d018      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800502e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005032:	d111      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005034:	4b8c      	ldr	r3, [pc, #560]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	4a8b      	ldr	r2, [pc, #556]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800503e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005046:	3308      	adds	r3, #8
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f002 f81e 	bl	800708c <RCCEx_PLL2_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005056:	e004      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a7b      	ldr	r2, [pc, #492]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800507a:	430b      	orrs	r3, r1
 800507c:	6513      	str	r3, [r2, #80]	@ 0x50
 800507e:	e003      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800509e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	d039      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d81c      	bhi.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050f5 	.word	0x080050f5
 80050bc:	080050c9 	.word	0x080050c9
 80050c0:	080050d7 	.word	0x080050d7
 80050c4:	080050f5 	.word	0x080050f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4b67      	ldr	r3, [pc, #412]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	4a66      	ldr	r2, [pc, #408]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050d4:	e00f      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	3308      	adds	r3, #8
 80050dc:	2102      	movs	r1, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 ffd4 	bl	800708c <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050ea:	e004      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80050f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005102:	f023 0103 	bic.w	r1, r3, #3
 8005106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800510c:	4a56      	ldr	r2, [pc, #344]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510e:	430b      	orrs	r3, r1
 8005110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005112:	e003      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005136:	460b      	mov	r3, r1
 8005138:	4313      	orrs	r3, r2
 800513a:	f000 809f 	beq.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513e:	4b4b      	ldr	r3, [pc, #300]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4a      	ldr	r2, [pc, #296]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800514a:	f7fc fac9 	bl	80016e0 <HAL_GetTick>
 800514e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005152:	e00b      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fc fac4 	bl	80016e0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	@ 0x64
 8005162:	d903      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516c:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ed      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517c:	2b00      	cmp	r3, #0
 800517e:	d179      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005180:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005182:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800518c:	4053      	eors	r3, r2
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d015      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005196:	4b34      	ldr	r3, [pc, #208]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051a2:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	4a30      	ldr	r2, [pc, #192]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ce:	d118      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fa86 	bl	80016e0 <HAL_GetTick>
 80051d4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051d8:	e00d      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fc fa81 	bl	80016e0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d903      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80051f4:	e005      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0eb      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005206:	2b00      	cmp	r3, #0
 8005208:	d129      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800521a:	d10e      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800521c:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800522c:	091a      	lsrs	r2, r3, #4
 800522e:	4b10      	ldr	r3, [pc, #64]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005230:	4013      	ands	r3, r2
 8005232:	4a0d      	ldr	r2, [pc, #52]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005234:	430b      	orrs	r3, r1
 8005236:	6113      	str	r3, [r2, #16]
 8005238:	e005      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005240:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005244:	6113      	str	r3, [r2, #16]
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005248:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005256:	4a04      	ldr	r2, [pc, #16]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005258:	430b      	orrs	r3, r1
 800525a:	6713      	str	r3, [r2, #112]	@ 0x70
 800525c:	e00e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005266:	e009      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005268:	58024400 	.word	0x58024400
 800526c:	58024800 	.word	0x58024800
 8005270:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800527c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f002 0301 	and.w	r3, r2, #1
 8005288:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005292:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	f000 8089 	beq.w	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052a4:	2b28      	cmp	r3, #40	@ 0x28
 80052a6:	d86b      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80052a8:	a201      	add	r2, pc, #4	@ (adr r2, 80052b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	08005389 	.word	0x08005389
 80052b4:	08005381 	.word	0x08005381
 80052b8:	08005381 	.word	0x08005381
 80052bc:	08005381 	.word	0x08005381
 80052c0:	08005381 	.word	0x08005381
 80052c4:	08005381 	.word	0x08005381
 80052c8:	08005381 	.word	0x08005381
 80052cc:	08005381 	.word	0x08005381
 80052d0:	08005355 	.word	0x08005355
 80052d4:	08005381 	.word	0x08005381
 80052d8:	08005381 	.word	0x08005381
 80052dc:	08005381 	.word	0x08005381
 80052e0:	08005381 	.word	0x08005381
 80052e4:	08005381 	.word	0x08005381
 80052e8:	08005381 	.word	0x08005381
 80052ec:	08005381 	.word	0x08005381
 80052f0:	0800536b 	.word	0x0800536b
 80052f4:	08005381 	.word	0x08005381
 80052f8:	08005381 	.word	0x08005381
 80052fc:	08005381 	.word	0x08005381
 8005300:	08005381 	.word	0x08005381
 8005304:	08005381 	.word	0x08005381
 8005308:	08005381 	.word	0x08005381
 800530c:	08005381 	.word	0x08005381
 8005310:	08005389 	.word	0x08005389
 8005314:	08005381 	.word	0x08005381
 8005318:	08005381 	.word	0x08005381
 800531c:	08005381 	.word	0x08005381
 8005320:	08005381 	.word	0x08005381
 8005324:	08005381 	.word	0x08005381
 8005328:	08005381 	.word	0x08005381
 800532c:	08005381 	.word	0x08005381
 8005330:	08005389 	.word	0x08005389
 8005334:	08005381 	.word	0x08005381
 8005338:	08005381 	.word	0x08005381
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
 8005348:	08005381 	.word	0x08005381
 800534c:	08005381 	.word	0x08005381
 8005350:	08005389 	.word	0x08005389
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	3308      	adds	r3, #8
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fe95 	bl	800708c <RCCEx_PLL2_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005368:	e00f      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536e:	3328      	adds	r3, #40	@ 0x28
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f001 ff3c 	bl	80071f0 <RCCEx_PLL3_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005392:	4bbf      	ldr	r3, [pc, #764]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a0:	4abb      	ldr	r2, [pc, #748]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f002 0302 	and.w	r3, r2, #2
 80053bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053c0:	2300      	movs	r3, #0
 80053c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80053ca:	460b      	mov	r3, r1
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d041      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d824      	bhi.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	0800542d 	.word	0x0800542d
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	0800540f 	.word	0x0800540f
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800542d 	.word	0x0800542d
 80053f4:	0800542d 	.word	0x0800542d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	3308      	adds	r3, #8
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fe43 	bl	800708c <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800540c:	e00f      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005412:	3328      	adds	r3, #40	@ 0x28
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 feea 	bl	80071f0 <RCCEx_PLL3_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005422:	e004      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800542c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005436:	4b96      	ldr	r3, [pc, #600]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f023 0107 	bic.w	r1, r3, #7
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005444:	4a92      	ldr	r2, [pc, #584]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005446:	430b      	orrs	r3, r1
 8005448:	6553      	str	r3, [r2, #84]	@ 0x54
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f002 0304 	and.w	r3, r2, #4
 8005460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800546a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d044      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800547c:	2b05      	cmp	r3, #5
 800547e:	d825      	bhi.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054a1 	.word	0x080054a1
 8005490:	080054b7 	.word	0x080054b7
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054d5 	.word	0x080054d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	3308      	adds	r3, #8
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fdef 	bl	800708c <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054b4:	e00f      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	3328      	adds	r3, #40	@ 0x28
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fe96 	bl	80071f0 <RCCEx_PLL3_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054ca:	e004      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80054d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054de:	4b6c      	ldr	r3, [pc, #432]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	f023 0107 	bic.w	r1, r3, #7
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ee:	4a68      	ldr	r2, [pc, #416]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f4:	e003      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f002 0320 	and.w	r3, r2, #32
 800550a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005518:	460b      	mov	r3, r1
 800551a:	4313      	orrs	r3, r2
 800551c:	d055      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800552a:	d033      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800552c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005530:	d82c      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005536:	d02f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553c:	d826      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800553e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005542:	d02b      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005548:	d820      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800554e:	d012      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005554:	d81a      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d022      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800555a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800555e:	d115      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	3308      	adds	r3, #8
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fd8f 	bl	800708c <RCCEx_PLL2_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005574:	e015      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	3328      	adds	r3, #40	@ 0x28
 800557c:	2102      	movs	r1, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fe36 	bl	80071f0 <RCCEx_PLL3_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800558a:	e00a      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005592:	e006      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005594:	bf00      	nop
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005598:	bf00      	nop
 800559a:	e002      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800559c:	bf00      	nop
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80055a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	4a35      	ldr	r2, [pc, #212]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055bc:	430b      	orrs	r3, r1
 80055be:	6553      	str	r3, [r2, #84]	@ 0x54
 80055c0:	e003      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4313      	orrs	r3, r2
 80055e8:	d058      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055f6:	d033      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80055f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055fc:	d82c      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005602:	d02f      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005608:	d826      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800560a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800560e:	d02b      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005614:	d820      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800561a:	d012      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800561c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005620:	d81a      	bhi.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d022      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562a:	d115      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005630:	3308      	adds	r3, #8
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fd29 	bl	800708c <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005640:	e015      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	3328      	adds	r3, #40	@ 0x28
 8005648:	2102      	movs	r1, #2
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fdd0 	bl	80071f0 <RCCEx_PLL3_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005656:	e00a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800565e:	e006      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005660:	bf00      	nop
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10e      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005686:	4a02      	ldr	r2, [pc, #8]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6593      	str	r3, [r2, #88]	@ 0x58
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d055      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056c8:	d033      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80056ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056ce:	d82c      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d02f      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80056d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056da:	d826      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056e0:	d02b      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80056e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056e6:	d820      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ec:	d012      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80056ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f2:	d81a      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d022      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fc:	d115      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	3308      	adds	r3, #8
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 fcc0 	bl	800708c <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005712:	e015      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	3328      	adds	r3, #40	@ 0x28
 800571a:	2102      	movs	r1, #2
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fd67 	bl	80071f0 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005728:	e00a      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005730:	e006      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005732:	bf00      	nop
 8005734:	e004      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800573e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005748:	4ba1      	ldr	r3, [pc, #644]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005758:	4a9d      	ldr	r2, [pc, #628]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575a:	430b      	orrs	r3, r1
 800575c:	6593      	str	r3, [r2, #88]	@ 0x58
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f002 0308 	and.w	r3, r2, #8
 8005774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005778:	2300      	movs	r3, #0
 800577a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800577e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005782:	460b      	mov	r3, r1
 8005784:	4313      	orrs	r3, r2
 8005786:	d01e      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	d10c      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3328      	adds	r3, #40	@ 0x28
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fd26 	bl	80071f0 <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057b0:	4b87      	ldr	r3, [pc, #540]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c0:	4a83      	ldr	r2, [pc, #524]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c2:	430b      	orrs	r3, r1
 80057c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f002 0310 	and.w	r3, r2, #16
 80057d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057e0:	460b      	mov	r3, r1
 80057e2:	4313      	orrs	r3, r2
 80057e4:	d01e      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f2:	d10c      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f8:	3328      	adds	r3, #40	@ 0x28
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 fcf7 	bl	80071f0 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800580e:	4b70      	ldr	r3, [pc, #448]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005812:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800581e:	4a6c      	ldr	r2, [pc, #432]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005820:	430b      	orrs	r3, r1
 8005822:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005834:	2300      	movs	r3, #0
 8005836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800583a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d03e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800584c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005850:	d022      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005856:	d81b      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d00b      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005862:	e015      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	3308      	adds	r3, #8
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fc0d 	bl	800708c <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005878:	e00f      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	3328      	adds	r3, #40	@ 0x28
 8005880:	2102      	movs	r1, #2
 8005882:	4618      	mov	r0, r3
 8005884:	f001 fcb4 	bl	80071f0 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800588e:	e004      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a2:	4b4b      	ldr	r3, [pc, #300]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058b2:	4a47      	ldr	r2, [pc, #284]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b8:	e003      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058d0:	2300      	movs	r3, #0
 80058d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d03b      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ea:	d01f      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80058ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058f0:	d818      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f6:	d003      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80058f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058fc:	d007      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80058fe:	e011      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005900:	4b33      	ldr	r3, [pc, #204]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a32      	ldr	r2, [pc, #200]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800590c:	e00f      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	3328      	adds	r3, #40	@ 0x28
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fc6a 	bl	80071f0 <RCCEx_PLL3_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005936:	4b26      	ldr	r3, [pc, #152]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	4a22      	ldr	r2, [pc, #136]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005948:	430b      	orrs	r3, r1
 800594a:	6553      	str	r3, [r2, #84]	@ 0x54
 800594c:	e003      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005962:	673b      	str	r3, [r7, #112]	@ 0x70
 8005964:	2300      	movs	r3, #0
 8005966:	677b      	str	r3, [r7, #116]	@ 0x74
 8005968:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800596c:	460b      	mov	r3, r1
 800596e:	4313      	orrs	r3, r2
 8005970:	d034      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005980:	d007      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005982:	e011      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005984:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	4a11      	ldr	r2, [pc, #68]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800598a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005990:	e00e      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3308      	adds	r3, #8
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fb76 	bl	800708c <RCCEx_PLL2_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059a6:	e003      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059b8:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c6:	4a02      	ldr	r2, [pc, #8]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ea:	2300      	movs	r3, #0
 80059ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d00c      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	3328      	adds	r3, #40	@ 0x28
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fbf5 	bl	80071f0 <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a20:	2300      	movs	r3, #0
 8005a22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d038      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a3a:	d018      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a40:	d811      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a46:	d014      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4c:	d80b      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d011      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a56:	d106      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4bc3      	ldr	r3, [pc, #780]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4ac2      	ldr	r2, [pc, #776]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a64:	e008      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a80:	4bb9      	ldr	r3, [pc, #740]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a90:	4ab5      	ldr	r2, [pc, #724]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aae:	2300      	movs	r3, #0
 8005ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ab2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005abc:	4baa      	ldr	r3, [pc, #680]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aca:	4aa7      	ldr	r2, [pc, #668]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ade:	2300      	movs	r3, #0
 8005ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ae2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005aec:	4b9e      	ldr	r3, [pc, #632]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005afc:	4a9a      	ldr	r2, [pc, #616]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005afe:	430b      	orrs	r3, r1
 8005b00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b10:	2300      	movs	r3, #0
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b1e:	4b92      	ldr	r3, [pc, #584]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b22:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b40:	2300      	movs	r3, #0
 8005b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b4e:	4b86      	ldr	r3, [pc, #536]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	4a85      	ldr	r2, [pc, #532]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b58:	6113      	str	r3, [r2, #16]
 8005b5a:	4b83      	ldr	r3, [pc, #524]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b5c:	6919      	ldr	r1, [r3, #16]
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b66:	4a80      	ldr	r2, [pc, #512]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b88:	4b77      	ldr	r3, [pc, #476]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b96:	4a74      	ldr	r2, [pc, #464]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005baa:	2300      	movs	r3, #0
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bc8:	4a67      	ldr	r2, [pc, #412]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	3308      	adds	r3, #8
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fa4a 	bl	800708c <RCCEx_PLL2_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	2100      	movs	r1, #0
 8005c18:	6239      	str	r1, [r7, #32]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d011      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2101      	movs	r1, #1
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 fa2a 	bl	800708c <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	2100      	movs	r1, #0
 8005c58:	61b9      	str	r1, [r7, #24]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d011      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	3308      	adds	r3, #8
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fa0a 	bl	800708c <RCCEx_PLL2_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	2100      	movs	r1, #0
 8005c98:	6139      	str	r1, [r7, #16]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	d011      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3328      	adds	r3, #40	@ 0x28
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fa9c 	bl	80071f0 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d011      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	3328      	adds	r3, #40	@ 0x28
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fa7c 	bl	80071f0 <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	2100      	movs	r1, #0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d011      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2102      	movs	r1, #2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 fa5c 	bl	80071f0 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005d4e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d62:	46bd      	mov	sp, r7
 8005d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d68:	58024400 	.word	0x58024400

08005d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b090      	sub	sp, #64	@ 0x40
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f040 8094 	bne.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005d84:	4b9e      	ldr	r3, [pc, #632]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	f200 8087 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db1 	.word	0x08005db1
 8005da0:	08005dd9 	.word	0x08005dd9
 8005da4:	08005e01 	.word	0x08005e01
 8005da8:	08005e9d 	.word	0x08005e9d
 8005dac:	08005e29 	.word	0x08005e29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005db0:	4b93      	ldr	r3, [pc, #588]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dbc:	d108      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f810 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dcc:	f000 bd45 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd4:	f000 bd41 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd8:	4b89      	ldr	r3, [pc, #548]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005de4:	d108      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de6:	f107 0318 	add.w	r3, r7, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd54 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005df4:	f000 bd31 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfc:	f000 bd2d 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e00:	4b7f      	ldr	r3, [pc, #508]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e0c:	d108      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e0e:	f107 030c 	add.w	r3, r7, #12
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fe94 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e1c:	f000 bd1d 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e24:	f000 bd19 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e28:	4b75      	ldr	r3, [pc, #468]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e32:	4b73      	ldr	r3, [pc, #460]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d10c      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e44:	4b6e      	ldr	r3, [pc, #440]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	08db      	lsrs	r3, r3, #3
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e56:	e01f      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e58:	4b69      	ldr	r3, [pc, #420]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d106      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e6c:	d102      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e6e:	4b66      	ldr	r3, [pc, #408]	@ (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e72:	e011      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e74:	4b62      	ldr	r3, [pc, #392]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e80:	d106      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e8a:	4b60      	ldr	r3, [pc, #384]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e8e:	e003      	b.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e94:	f000 bce1 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e98:	f000 bcdf 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea0:	f000 bcdb 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	f000 bcd7 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	f040 80ad 	bne.w	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005eba:	4b51      	ldr	r3, [pc, #324]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005ec2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eca:	d056      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	f200 8090 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eda:	f000 8088 	beq.w	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ee2:	f200 8088 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	2b80      	cmp	r3, #128	@ 0x80
 8005eea:	d032      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	2b80      	cmp	r3, #128	@ 0x80
 8005ef0:	f200 8081 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	2b40      	cmp	r3, #64	@ 0x40
 8005efe:	d014      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005f00:	e079      	b.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f02:	4b3f      	ldr	r3, [pc, #252]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f0e:	d108      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ff67 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f1e:	f000 bc9c 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f26:	f000 bc98 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2a:	4b35      	ldr	r3, [pc, #212]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f36:	d108      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f38:	f107 0318 	add.w	r3, r7, #24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fcab 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f46:	f000 bc88 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4e:	f000 bc84 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f52:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fdeb 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6e:	f000 bc74 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f76:	f000 bc70 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f84:	4b1e      	ldr	r3, [pc, #120]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f96:	4b1a      	ldr	r3, [pc, #104]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa8:	e01f      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005faa:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc4:	e011      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fda:	d102      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe0:	e003      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005fe6:	f000 bc38 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005fea:	f000 bc36 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fee:	4b08      	ldr	r3, [pc, #32]	@ (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff2:	f000 bc32 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffa:	f000 bc2e 	b.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ffe:	bf00      	nop
 8006000:	58024400 	.word	0x58024400
 8006004:	03d09000 	.word	0x03d09000
 8006008:	003d0900 	.word	0x003d0900
 800600c:	017d7840 	.word	0x017d7840
 8006010:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800601c:	430b      	orrs	r3, r1
 800601e:	f040 809c 	bne.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006022:	4b9e      	ldr	r3, [pc, #632]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006026:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006032:	d054      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800603a:	f200 808b 	bhi.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006044:	f000 8083 	beq.w	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800604e:	f200 8081 	bhi.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006058:	d02f      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006060:	d878      	bhi.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800606e:	d012      	beq.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006070:	e070      	b.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006072:	4b8a      	ldr	r3, [pc, #552]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800607e:	d107      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006084:	4618      	mov	r0, r3
 8006086:	f000 feaf 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800608e:	e3e4      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006094:	e3e1      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006096:	4b81      	ldr	r3, [pc, #516]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800609e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a2:	d107      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a4:	f107 0318 	add.w	r3, r7, #24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fbf5 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b2:	e3d2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b8:	e3cf      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060ba:	4b78      	ldr	r3, [pc, #480]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c6:	d107      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fd37 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d6:	e3c0      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060dc:	e3bd      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060de:	4b6f      	ldr	r3, [pc, #444]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060e8:	4b6c      	ldr	r3, [pc, #432]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d10c      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80060f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060fa:	4b68      	ldr	r3, [pc, #416]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	08db      	lsrs	r3, r3, #3
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	4a66      	ldr	r2, [pc, #408]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800610c:	e01e      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800610e:	4b63      	ldr	r3, [pc, #396]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611a:	d106      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800611c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006122:	d102      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006124:	4b5f      	ldr	r3, [pc, #380]	@ (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006128:	e010      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800612a:	4b5c      	ldr	r3, [pc, #368]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006136:	d106      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613e:	d102      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006140:	4b59      	ldr	r3, [pc, #356]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006144:	e002      	b.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800614a:	e386      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800614c:	e385      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800614e:	4b57      	ldr	r3, [pc, #348]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006152:	e382      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e37f      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006162:	430b      	orrs	r3, r1
 8006164:	f040 80a7 	bne.w	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006168:	4b4c      	ldr	r3, [pc, #304]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800616a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006178:	d055      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006180:	f200 8096 	bhi.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800618a:	f000 8084 	beq.w	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006194:	f200 808c 	bhi.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800619e:	d030      	beq.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061a6:	f200 8083 	bhi.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80061b8:	e07a      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061ba:	4b38      	ldr	r3, [pc, #224]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061c6:	d107      	bne.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fe0b 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d6:	e340      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e33d      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061de:	4b2f      	ldr	r3, [pc, #188]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ea:	d107      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ec:	f107 0318 	add.w	r3, r7, #24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fb51 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061fa:	e32e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006200:	e32b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006202:	4b26      	ldr	r3, [pc, #152]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800620e:	d107      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fc93 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800621e:	e31c      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006224:	e319      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006226:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006230:	4b1a      	ldr	r3, [pc, #104]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d10c      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800623c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006242:	4b16      	ldr	r3, [pc, #88]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	4a14      	ldr	r2, [pc, #80]	@ (80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006254:	e01e      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006256:	4b11      	ldr	r3, [pc, #68]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006262:	d106      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800626a:	d102      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800626c:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006270:	e010      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006272:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800627e:	d106      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006286:	d102      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006288:	4b07      	ldr	r3, [pc, #28]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628c:	e002      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006292:	e2e2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006294:	e2e1      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006296:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629a:	e2de      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800629c:	58024400 	.word	0x58024400
 80062a0:	03d09000 	.word	0x03d09000
 80062a4:	003d0900 	.word	0x003d0900
 80062a8:	017d7840 	.word	0x017d7840
 80062ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b4:	e2d1      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80062b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80062be:	430b      	orrs	r3, r1
 80062c0:	f040 809c 	bne.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80062c4:	4b93      	ldr	r3, [pc, #588]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80062cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062d4:	d054      	beq.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062dc:	f200 808b 	bhi.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062e6:	f000 8083 	beq.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062f0:	f200 8081 	bhi.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062fa:	d02f      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006302:	d878      	bhi.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006310:	d012      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006312:	e070      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006314:	4b7f      	ldr	r3, [pc, #508]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006320:	d107      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fd5e 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006330:	e293      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006336:	e290      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006338:	4b76      	ldr	r3, [pc, #472]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006344:	d107      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006346:	f107 0318 	add.w	r3, r7, #24
 800634a:	4618      	mov	r0, r3
 800634c:	f000 faa4 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006354:	e281      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635a:	e27e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800635c:	4b6d      	ldr	r3, [pc, #436]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006368:	d107      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800636a:	f107 030c 	add.w	r3, r7, #12
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fbe6 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006378:	e26f      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637e:	e26c      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006380:	4b64      	ldr	r3, [pc, #400]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006384:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800638a:	4b62      	ldr	r3, [pc, #392]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d10c      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800639c:	4b5d      	ldr	r3, [pc, #372]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	08db      	lsrs	r3, r3, #3
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ae:	e01e      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063b0:	4b58      	ldr	r3, [pc, #352]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063bc:	d106      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c4:	d102      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063c6:	4b55      	ldr	r3, [pc, #340]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ca:	e010      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063cc:	4b51      	ldr	r3, [pc, #324]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063d8:	d106      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80063da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e0:	d102      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80063e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063e6:	e002      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063ec:	e235      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063ee:	e234      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f4:	e231      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fa:	e22e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80063fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006400:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006404:	430b      	orrs	r3, r1
 8006406:	f040 808f 	bne.w	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800640a:	4b42      	ldr	r3, [pc, #264]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800640c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800641a:	d06b      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800641c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006422:	d874      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800642a:	d056      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006432:	d86c      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800643a:	d03b      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006442:	d864      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800644a:	d021      	beq.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006452:	d85c      	bhi.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006460:	d004      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006462:	e054      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe fa0a 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006468:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800646a:	e1f6      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800646c:	4b29      	ldr	r3, [pc, #164]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006478:	d107      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800647a:	f107 0318 	add.w	r3, r7, #24
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa0a 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006488:	e1e7      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648e:	e1e4      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006490:	4b20      	ldr	r3, [pc, #128]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800649c:	d107      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800649e:	f107 030c 	add.w	r3, r7, #12
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fb4c 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ac:	e1d5      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b2:	e1d2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b4:	4b17      	ldr	r3, [pc, #92]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d109      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c0:	4b14      	ldr	r3, [pc, #80]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	4a13      	ldr	r2, [pc, #76]	@ (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d2:	e1c2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d8:	e1bf      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80064da:	4b0e      	ldr	r3, [pc, #56]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d102      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80064e8:	4b0c      	ldr	r3, [pc, #48]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ec:	e1b5      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f2:	e1b2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064f4:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006500:	d102      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006502:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006506:	e1a8      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e1a5      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006512:	e1a2      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006514:	58024400 	.word	0x58024400
 8006518:	03d09000 	.word	0x03d09000
 800651c:	003d0900 	.word	0x003d0900
 8006520:	017d7840 	.word	0x017d7840
 8006524:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800652c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006530:	430b      	orrs	r3, r1
 8006532:	d173      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006534:	4b9c      	ldr	r3, [pc, #624]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006544:	d02f      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800654c:	d863      	bhi.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655a:	d012      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800655c:	e05b      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800655e:	4b92      	ldr	r3, [pc, #584]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800656a:	d107      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656c:	f107 0318 	add.w	r3, r7, #24
 8006570:	4618      	mov	r0, r3
 8006572:	f000 f991 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800657a:	e16e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006580:	e16b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006582:	4b89      	ldr	r3, [pc, #548]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658e:	d107      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fad3 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800659e:	e15c      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a4:	e159      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065a6:	4b80      	ldr	r3, [pc, #512]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065b0:	4b7d      	ldr	r3, [pc, #500]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d10c      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c2:	4b79      	ldr	r3, [pc, #484]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	4a77      	ldr	r2, [pc, #476]	@ (80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d4:	e01e      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065d6:	4b74      	ldr	r3, [pc, #464]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e2:	d106      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ea:	d102      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065ec:	4b70      	ldr	r3, [pc, #448]	@ (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065f0:	e010      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065f2:	4b6d      	ldr	r3, [pc, #436]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065fe:	d106      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006606:	d102      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006608:	4b6a      	ldr	r3, [pc, #424]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006612:	e122      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006614:	e121      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661a:	e11e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800661c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006620:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006624:	430b      	orrs	r3, r1
 8006626:	d133      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006628:	4b5f      	ldr	r3, [pc, #380]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800662a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006630:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663e:	d012      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006640:	e023      	b.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006642:	4b59      	ldr	r3, [pc, #356]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fbc7 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665e:	e0fc      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	e0f9      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006666:	4b50      	ldr	r3, [pc, #320]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800666e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006672:	d107      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006674:	f107 0318 	add.w	r3, r7, #24
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f90d 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006682:	e0ea      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006688:	e0e7      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800668e:	e0e4      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006694:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006698:	430b      	orrs	r3, r1
 800669a:	f040 808d 	bne.w	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800669e:	4b42      	ldr	r3, [pc, #264]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80066a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066ae:	d06b      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066b6:	d874      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066be:	d056      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c6:	d86c      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066ce:	d03b      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066d6:	d864      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066de:	d021      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80066e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e6:	d85c      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f4:	d004      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80066f6:	e054      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80066f8:	f000 f8b8 	bl	800686c <HAL_RCCEx_GetD3PCLK1Freq>
 80066fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066fe:	e0ac      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006700:	4b29      	ldr	r3, [pc, #164]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670c:	d107      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800670e:	f107 0318 	add.w	r3, r7, #24
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f8c0 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671c:	e09d      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006722:	e09a      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006724:	4b20      	ldr	r3, [pc, #128]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006730:	d107      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006732:	f107 030c 	add.w	r3, r7, #12
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fa02 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	e08b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006746:	e088      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006748:	4b17      	ldr	r3, [pc, #92]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b04      	cmp	r3, #4
 8006752:	d109      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006754:	4b14      	ldr	r3, [pc, #80]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	08db      	lsrs	r3, r3, #3
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	4a13      	ldr	r2, [pc, #76]	@ (80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006766:	e078      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676c:	e075      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800676e:	4b0e      	ldr	r3, [pc, #56]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800677a:	d102      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006780:	e06b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006786:	e068      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006788:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006794:	d102      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679a:	e05e      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a0:	e05b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a6:	e058      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067a8:	58024400 	.word	0x58024400
 80067ac:	03d09000 	.word	0x03d09000
 80067b0:	003d0900 	.word	0x003d0900
 80067b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80067b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067bc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80067c0:	430b      	orrs	r3, r1
 80067c2:	d148      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80067c4:	4b27      	ldr	r3, [pc, #156]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80067c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067d4:	d02a      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067dc:	d838      	bhi.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ea:	d00d      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80067ec:	e030      	b.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067fa:	d102      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80067fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006800:	e02b      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006806:	e028      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006808:	4b16      	ldr	r3, [pc, #88]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006814:	d107      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fae4 	bl	8006de8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006824:	e019      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800682a:	e016      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800682c:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006838:	d107      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800683a:	f107 0318 	add.w	r3, r7, #24
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f82a 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006848:	e007      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e001      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800685c:	4618      	mov	r0, r3
 800685e:	3740      	adds	r7, #64	@ 0x40
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	58024400 	.word	0x58024400
 8006868:	017d7840 	.word	0x017d7840

0800686c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006870:	f7fd ffd4 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4904      	ldr	r1, [pc, #16]	@ (8006894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	58024400 	.word	0x58024400
 8006894:	0800dd88 	.word	0x0800dd88

08006898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	@ 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	0b1b      	lsrs	r3, r3, #12
 80068b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068c2:	4b99      	ldr	r3, [pc, #612]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	08db      	lsrs	r3, r3, #3
 80068c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8111 	beq.w	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f000 8083 	beq.w	80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f200 80a1 	bhi.w	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d056      	beq.n	80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006902:	e099      	b.n	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006904:	4b88      	ldr	r3, [pc, #544]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02d      	beq.n	800696c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006910:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a84      	ldr	r2, [pc, #528]	@ (8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694a:	ed97 6a03 	vldr	s12, [r7, #12]
 800694e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800696a:	e087      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ae:	e065      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b59      	ldr	r3, [pc, #356]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f2:	e043      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b48      	ldr	r3, [pc, #288]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a36:	e021      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b37      	ldr	r3, [pc, #220]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	0a5b      	lsrs	r3, r3, #9
 8006a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa2:	ee17 2a90 	vmov	r2, s15
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad0:	ee17 2a90 	vmov	r2, s15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ad8:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	0e1b      	lsrs	r3, r3, #24
 8006ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b06:	e008      	b.n	8006b1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]
}
 8006b1a:	bf00      	nop
 8006b1c:	3724      	adds	r7, #36	@ 0x24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	03d09000 	.word	0x03d09000
 8006b30:	46000000 	.word	0x46000000
 8006b34:	4c742400 	.word	0x4c742400
 8006b38:	4a742400 	.word	0x4a742400
 8006b3c:	4bbebc20 	.word	0x4bbebc20

08006b40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b52:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	0d1b      	lsrs	r3, r3, #20
 8006b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	@ (8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4bbebc20 	.word	0x4bbebc20

08006de8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	@ 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df0:	4ba0      	ldr	r3, [pc, #640]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006dfa:	4b9e      	ldr	r3, [pc, #632]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006e06:	4b9b      	ldr	r3, [pc, #620]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e10:	4b98      	ldr	r3, [pc, #608]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	fb02 f303 	mul.w	r3, r2, r3
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8111 	beq.w	8007056 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f000 8083 	beq.w	8006f42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	f200 80a1 	bhi.w	8006f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d056      	beq.n	8006efe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006e50:	e099      	b.n	8006f86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e52:	4b88      	ldr	r3, [pc, #544]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02d      	beq.n	8006eba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5e:	4b85      	ldr	r3, [pc, #532]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	4a83      	ldr	r2, [pc, #524]	@ (8007078 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e88:	4b7a      	ldr	r3, [pc, #488]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800707c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006eb8:	e087      	b.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	ee07 3a90 	vmov	s15, r3
 8006ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ecc:	4b69      	ldr	r3, [pc, #420]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800707c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efc:	e065      	b.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f08:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007084 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f10:	4b58      	ldr	r3, [pc, #352]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f18:	ee07 3a90 	vmov	s15, r3
 8006f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f20:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f24:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800707c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f40:	e043      	b.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007088 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f54:	4b47      	ldr	r3, [pc, #284]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f68:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800707c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f84:	e021      	b.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f90:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f98:	4b36      	ldr	r3, [pc, #216]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800707c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006fca:	4b2a      	ldr	r3, [pc, #168]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	0a5b      	lsrs	r3, r3, #9
 8006fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff0:	ee17 2a90 	vmov	r2, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800700e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007012:	edd7 6a07 	vldr	s13, [r7, #28]
 8007016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007026:	4b13      	ldr	r3, [pc, #76]	@ (8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	0e1b      	lsrs	r3, r3, #24
 800702c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007040:	edd7 6a07 	vldr	s13, [r7, #28]
 8007044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704c:	ee17 2a90 	vmov	r2, s15
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	3724      	adds	r7, #36	@ 0x24
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	58024400 	.word	0x58024400
 8007078:	03d09000 	.word	0x03d09000
 800707c:	46000000 	.word	0x46000000
 8007080:	4c742400 	.word	0x4c742400
 8007084:	4a742400 	.word	0x4a742400
 8007088:	4bbebc20 	.word	0x4bbebc20

0800708c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800709a:	4b53      	ldr	r3, [pc, #332]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d101      	bne.n	80070aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e099      	b.n	80071de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070aa:	4b4f      	ldr	r3, [pc, #316]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a4e      	ldr	r2, [pc, #312]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b6:	f7fa fb13 	bl	80016e0 <HAL_GetTick>
 80070ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070bc:	e008      	b.n	80070d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070be:	f7fa fb0f 	bl	80016e0 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e086      	b.n	80071de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d0:	4b45      	ldr	r3, [pc, #276]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f0      	bne.n	80070be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070dc:	4b42      	ldr	r3, [pc, #264]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	031b      	lsls	r3, r3, #12
 80070ea:	493f      	ldr	r1, [pc, #252]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	025b      	lsls	r3, r3, #9
 8007102:	b29b      	uxth	r3, r3
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	3b01      	subs	r3, #1
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	3b01      	subs	r3, #1
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007120:	4931      	ldr	r1, [pc, #196]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007126:	4b30      	ldr	r3, [pc, #192]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	492d      	ldr	r1, [pc, #180]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007134:	4313      	orrs	r3, r2
 8007136:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007138:	4b2b      	ldr	r3, [pc, #172]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800713a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713c:	f023 0220 	bic.w	r2, r3, #32
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	4928      	ldr	r1, [pc, #160]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800714a:	4b27      	ldr	r3, [pc, #156]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	4a26      	ldr	r2, [pc, #152]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007150:	f023 0310 	bic.w	r3, r3, #16
 8007154:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007156:	4b24      	ldr	r3, [pc, #144]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800715a:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <RCCEx_PLL2_Config+0x160>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	69d2      	ldr	r2, [r2, #28]
 8007162:	00d2      	lsls	r2, r2, #3
 8007164:	4920      	ldr	r1, [pc, #128]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800716a:	4b1f      	ldr	r3, [pc, #124]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	4a1e      	ldr	r2, [pc, #120]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007170:	f043 0310 	orr.w	r3, r3, #16
 8007174:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800717c:	4b1a      	ldr	r3, [pc, #104]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4a19      	ldr	r2, [pc, #100]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007186:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007188:	e00f      	b.n	80071aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d106      	bne.n	800719e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007190:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 8007196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800719a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800719c:	e005      	b.n	80071aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800719e:	4b12      	ldr	r3, [pc, #72]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	4a11      	ldr	r2, [pc, #68]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071aa:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a0e      	ldr	r2, [pc, #56]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b6:	f7fa fa93 	bl	80016e0 <HAL_GetTick>
 80071ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071bc:	e008      	b.n	80071d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071be:	f7fa fa8f 	bl	80016e0 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <RCCEx_PLL2_Config+0x15c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	ffff0007 	.word	0xffff0007

080071f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071fe:	4b53      	ldr	r3, [pc, #332]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d101      	bne.n	800720e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e099      	b.n	8007342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800720e:	4b4f      	ldr	r3, [pc, #316]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4e      	ldr	r2, [pc, #312]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721a:	f7fa fa61 	bl	80016e0 <HAL_GetTick>
 800721e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007220:	e008      	b.n	8007234 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007222:	f7fa fa5d 	bl	80016e0 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e086      	b.n	8007342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007234:	4b45      	ldr	r3, [pc, #276]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007240:	4b42      	ldr	r3, [pc, #264]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	051b      	lsls	r3, r3, #20
 800724e:	493f      	ldr	r1, [pc, #252]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	628b      	str	r3, [r1, #40]	@ 0x28
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	3b01      	subs	r3, #1
 800725a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	3b01      	subs	r3, #1
 8007264:	025b      	lsls	r3, r3, #9
 8007266:	b29b      	uxth	r3, r3
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	3b01      	subs	r3, #1
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	3b01      	subs	r3, #1
 800727e:	061b      	lsls	r3, r3, #24
 8007280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007284:	4931      	ldr	r1, [pc, #196]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800728a:	4b30      	ldr	r3, [pc, #192]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	492d      	ldr	r1, [pc, #180]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007298:	4313      	orrs	r3, r2
 800729a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800729c:	4b2b      	ldr	r3, [pc, #172]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	4928      	ldr	r1, [pc, #160]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072ae:	4b27      	ldr	r3, [pc, #156]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	4a26      	ldr	r2, [pc, #152]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072be:	4b24      	ldr	r3, [pc, #144]	@ (8007350 <RCCEx_PLL3_Config+0x160>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	69d2      	ldr	r2, [r2, #28]
 80072c6:	00d2      	lsls	r2, r2, #3
 80072c8:	4920      	ldr	r1, [pc, #128]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072ce:	4b1f      	ldr	r3, [pc, #124]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	4a1e      	ldr	r2, [pc, #120]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e0:	4b1a      	ldr	r3, [pc, #104]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	4a19      	ldr	r2, [pc, #100]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072ec:	e00f      	b.n	800730e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d106      	bne.n	8007302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072f4:	4b15      	ldr	r3, [pc, #84]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	4a14      	ldr	r2, [pc, #80]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 80072fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007300:	e005      	b.n	800730e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007302:	4b12      	ldr	r3, [pc, #72]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	4a11      	ldr	r2, [pc, #68]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007308:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800730c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800730e:	4b0f      	ldr	r3, [pc, #60]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a0e      	ldr	r2, [pc, #56]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731a:	f7fa f9e1 	bl	80016e0 <HAL_GetTick>
 800731e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007320:	e008      	b.n	8007334 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007322:	f7fa f9dd 	bl	80016e0 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e006      	b.n	8007342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007334:	4b05      	ldr	r3, [pc, #20]	@ (800734c <RCCEx_PLL3_Config+0x15c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	58024400 	.word	0x58024400
 8007350:	ffff0007 	.word	0xffff0007

08007354 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e10f      	b.n	8007586 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a87      	ldr	r2, [pc, #540]	@ (8007590 <HAL_SPI_Init+0x23c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00f      	beq.n	8007396 <HAL_SPI_Init+0x42>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a86      	ldr	r2, [pc, #536]	@ (8007594 <HAL_SPI_Init+0x240>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00a      	beq.n	8007396 <HAL_SPI_Init+0x42>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a84      	ldr	r2, [pc, #528]	@ (8007598 <HAL_SPI_Init+0x244>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d005      	beq.n	8007396 <HAL_SPI_Init+0x42>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d901      	bls.n	8007396 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e0f7      	b.n	8007586 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f900 	bl	800759c <SPI_GetPacketSize>
 800739c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a7b      	ldr	r2, [pc, #492]	@ (8007590 <HAL_SPI_Init+0x23c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00c      	beq.n	80073c2 <HAL_SPI_Init+0x6e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a79      	ldr	r2, [pc, #484]	@ (8007594 <HAL_SPI_Init+0x240>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d007      	beq.n	80073c2 <HAL_SPI_Init+0x6e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a78      	ldr	r2, [pc, #480]	@ (8007598 <HAL_SPI_Init+0x244>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d002      	beq.n	80073c2 <HAL_SPI_Init+0x6e>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d811      	bhi.n	80073e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073c6:	4a72      	ldr	r2, [pc, #456]	@ (8007590 <HAL_SPI_Init+0x23c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a70      	ldr	r2, [pc, #448]	@ (8007594 <HAL_SPI_Init+0x240>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_SPI_Init+0x8c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a6f      	ldr	r2, [pc, #444]	@ (8007598 <HAL_SPI_Init+0x244>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d104      	bne.n	80073ea <HAL_SPI_Init+0x96>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	d901      	bls.n	80073ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e0cd      	b.n	8007586 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7f9 fcc0 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007430:	d119      	bne.n	8007466 <HAL_SPI_Init+0x112>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800743a:	d103      	bne.n	8007444 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10c      	bne.n	8007466 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007454:	d107      	bne.n	8007466 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <HAL_SPI_Init+0x13e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b06      	cmp	r3, #6
 8007478:	d90b      	bls.n	8007492 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	e007      	b.n	80074a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	431a      	orrs	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b4:	ea42 0103 	orr.w	r1, r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007502:	ea42 0103 	orr.w	r1, r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d113      	bne.n	8007542 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800752c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007540:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40013000 	.word	0x40013000
 8007594:	40003800 	.word	0x40003800
 8007598:	40003c00 	.word	0x40003c00

0800759c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	3301      	adds	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	3307      	adds	r3, #7
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e049      	b.n	8007678 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7f9 fed9 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f000 fc23 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e054      	b.n	8007742 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a26      	ldr	r2, [pc, #152]	@ (8007750 <HAL_TIM_Base_Start_IT+0xd0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c2:	d01d      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a22      	ldr	r2, [pc, #136]	@ (8007754 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a21      	ldr	r2, [pc, #132]	@ (8007758 <HAL_TIM_Base_Start_IT+0xd8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <HAL_TIM_Base_Start_IT+0xdc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <HAL_TIM_Base_Start_IT+0xe0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007764 <HAL_TIM_Base_Start_IT+0xe4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007768 <HAL_TIM_Base_Start_IT+0xe8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d115      	bne.n	800772c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	4b19      	ldr	r3, [pc, #100]	@ (800776c <HAL_TIM_Base_Start_IT+0xec>)
 8007708:	4013      	ands	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b06      	cmp	r3, #6
 8007710:	d015      	beq.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007718:	d011      	beq.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772a:	e008      	b.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e000      	b.n	8007740 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40010400 	.word	0x40010400
 8007764:	40001800 	.word	0x40001800
 8007768:	40014000 	.word	0x40014000
 800776c:	00010007 	.word	0x00010007

08007770 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e049      	b.n	8007816 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f841 	bl	800781e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f000 fb54 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e049      	b.n	80078d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7f9 fd87 	bl	800136c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f000 faf3 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d020      	beq.n	8007944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01b      	beq.n	8007944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0202 	mvn.w	r2, #2
 8007914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa78 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 8007930:	e005      	b.n	800793e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa6a 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa7b 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 0304 	and.w	r3, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	d020      	beq.n	8007990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01b      	beq.n	8007990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0204 	mvn.w	r2, #4
 8007960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa52 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 800797c:	e005      	b.n	800798a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa44 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa55 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d020      	beq.n	80079dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01b      	beq.n	80079dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0208 	mvn.w	r2, #8
 80079ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2204      	movs	r2, #4
 80079b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa2c 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa1e 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa2f 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d020      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 0310 	and.w	r3, r3, #16
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01b      	beq.n	8007a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0210 	mvn.w	r2, #16
 80079f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2208      	movs	r2, #8
 80079fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa06 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9f8 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa09 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00c      	beq.n	8007a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d007      	beq.n	8007a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0201 	mvn.w	r2, #1
 8007a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7f9 f92c 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fe7d 	bl	8008774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fe75 	bl	8008788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9c3 	bl	8007e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00c      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f06f 0220 	mvn.w	r2, #32
 8007ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fe3d 	bl	8008760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e066      	b.n	8007bdc <HAL_TIM_OC_ConfigChannel+0xec>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b14      	cmp	r3, #20
 8007b1a:	d857      	bhi.n	8007bcc <HAL_TIM_OC_ConfigChannel+0xdc>
 8007b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b79 	.word	0x08007b79
 8007b28:	08007bcd 	.word	0x08007bcd
 8007b2c:	08007bcd 	.word	0x08007bcd
 8007b30:	08007bcd 	.word	0x08007bcd
 8007b34:	08007b87 	.word	0x08007b87
 8007b38:	08007bcd 	.word	0x08007bcd
 8007b3c:	08007bcd 	.word	0x08007bcd
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007b95 	.word	0x08007b95
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007bcd 	.word	0x08007bcd
 8007b50:	08007bcd 	.word	0x08007bcd
 8007b54:	08007ba3 	.word	0x08007ba3
 8007b58:	08007bcd 	.word	0x08007bcd
 8007b5c:	08007bcd 	.word	0x08007bcd
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007bcd 	.word	0x08007bcd
 8007b70:	08007bcd 	.word	0x08007bcd
 8007b74:	08007bbf 	.word	0x08007bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fa0c 	bl	8007f9c <TIM_OC1_SetConfig>
      break;
 8007b84:	e025      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fa95 	bl	80080bc <TIM_OC2_SetConfig>
      break;
 8007b92:	e01e      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fb18 	bl	80081d0 <TIM_OC3_SetConfig>
      break;
 8007ba0:	e017      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fb99 	bl	80082e0 <TIM_OC4_SetConfig>
      break;
 8007bae:	e010      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fbfc 	bl	80083b4 <TIM_OC5_SetConfig>
      break;
 8007bbc:	e009      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fc59 	bl	800847c <TIM_OC6_SetConfig>
      break;
 8007bca:	e002      	b.n	8007bd2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e0ff      	b.n	8007e02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b14      	cmp	r3, #20
 8007c0e:	f200 80f0 	bhi.w	8007df2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c6d 	.word	0x08007c6d
 8007c1c:	08007df3 	.word	0x08007df3
 8007c20:	08007df3 	.word	0x08007df3
 8007c24:	08007df3 	.word	0x08007df3
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007df3 	.word	0x08007df3
 8007c30:	08007df3 	.word	0x08007df3
 8007c34:	08007df3 	.word	0x08007df3
 8007c38:	08007cef 	.word	0x08007cef
 8007c3c:	08007df3 	.word	0x08007df3
 8007c40:	08007df3 	.word	0x08007df3
 8007c44:	08007df3 	.word	0x08007df3
 8007c48:	08007d2f 	.word	0x08007d2f
 8007c4c:	08007df3 	.word	0x08007df3
 8007c50:	08007df3 	.word	0x08007df3
 8007c54:	08007df3 	.word	0x08007df3
 8007c58:	08007d71 	.word	0x08007d71
 8007c5c:	08007df3 	.word	0x08007df3
 8007c60:	08007df3 	.word	0x08007df3
 8007c64:	08007df3 	.word	0x08007df3
 8007c68:	08007db1 	.word	0x08007db1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f992 	bl	8007f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0208 	orr.w	r2, r2, #8
 8007c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0204 	bic.w	r2, r2, #4
 8007c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6999      	ldr	r1, [r3, #24]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	619a      	str	r2, [r3, #24]
      break;
 8007caa:	e0a5      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fa02 	bl	80080bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6999      	ldr	r1, [r3, #24]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	021a      	lsls	r2, r3, #8
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	619a      	str	r2, [r3, #24]
      break;
 8007cec:	e084      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fa6b 	bl	80081d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0208 	orr.w	r2, r2, #8
 8007d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0204 	bic.w	r2, r2, #4
 8007d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69d9      	ldr	r1, [r3, #28]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	61da      	str	r2, [r3, #28]
      break;
 8007d2c:	e064      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fad3 	bl	80082e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69da      	ldr	r2, [r3, #28]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69d9      	ldr	r1, [r3, #28]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	021a      	lsls	r2, r3, #8
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	61da      	str	r2, [r3, #28]
      break;
 8007d6e:	e043      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fb1c 	bl	80083b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0208 	orr.w	r2, r2, #8
 8007d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0204 	bic.w	r2, r2, #4
 8007d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007dae:	e023      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fb60 	bl	800847c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	021a      	lsls	r2, r3, #8
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007df0:	e002      	b.n	8007df8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
      break;
 8007df6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a43      	ldr	r2, [pc, #268]	@ (8007f7c <TIM_Base_SetConfig+0x120>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7a:	d00f      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a40      	ldr	r2, [pc, #256]	@ (8007f80 <TIM_Base_SetConfig+0x124>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3f      	ldr	r2, [pc, #252]	@ (8007f84 <TIM_Base_SetConfig+0x128>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d007      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a3d      	ldr	r2, [pc, #244]	@ (8007f8c <TIM_Base_SetConfig+0x130>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d108      	bne.n	8007eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a32      	ldr	r2, [pc, #200]	@ (8007f7c <TIM_Base_SetConfig+0x120>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01f      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ebc:	d01b      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8007f80 <TIM_Base_SetConfig+0x124>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d017      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8007f84 <TIM_Base_SetConfig+0x128>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d013      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00f      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f8c <TIM_Base_SetConfig+0x130>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00b      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8007f90 <TIM_Base_SetConfig+0x134>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8007f94 <TIM_Base_SetConfig+0x138>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_Base_SetConfig+0x9a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a29      	ldr	r2, [pc, #164]	@ (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d108      	bne.n	8007f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a14      	ldr	r2, [pc, #80]	@ (8007f7c <TIM_Base_SetConfig+0x120>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00f      	beq.n	8007f4e <TIM_Base_SetConfig+0xf2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a16      	ldr	r2, [pc, #88]	@ (8007f8c <TIM_Base_SetConfig+0x130>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00b      	beq.n	8007f4e <TIM_Base_SetConfig+0xf2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a15      	ldr	r2, [pc, #84]	@ (8007f90 <TIM_Base_SetConfig+0x134>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <TIM_Base_SetConfig+0xf2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a14      	ldr	r2, [pc, #80]	@ (8007f94 <TIM_Base_SetConfig+0x138>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_Base_SetConfig+0xf2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a13      	ldr	r2, [pc, #76]	@ (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d103      	bne.n	8007f56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f043 0204 	orr.w	r2, r3, #4
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800

08007f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	f023 0201 	bic.w	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4b37      	ldr	r3, [pc, #220]	@ (80080a4 <TIM_OC1_SetConfig+0x108>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0302 	bic.w	r3, r3, #2
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80080a8 <TIM_OC1_SetConfig+0x10c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00f      	beq.n	8008018 <TIM_OC1_SetConfig+0x7c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80080ac <TIM_OC1_SetConfig+0x110>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <TIM_OC1_SetConfig+0x7c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a2b      	ldr	r2, [pc, #172]	@ (80080b0 <TIM_OC1_SetConfig+0x114>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d007      	beq.n	8008018 <TIM_OC1_SetConfig+0x7c>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2a      	ldr	r2, [pc, #168]	@ (80080b4 <TIM_OC1_SetConfig+0x118>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_OC1_SetConfig+0x7c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a29      	ldr	r2, [pc, #164]	@ (80080b8 <TIM_OC1_SetConfig+0x11c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d10c      	bne.n	8008032 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f023 0308 	bic.w	r3, r3, #8
 800801e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1c      	ldr	r2, [pc, #112]	@ (80080a8 <TIM_OC1_SetConfig+0x10c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00f      	beq.n	800805a <TIM_OC1_SetConfig+0xbe>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1b      	ldr	r2, [pc, #108]	@ (80080ac <TIM_OC1_SetConfig+0x110>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00b      	beq.n	800805a <TIM_OC1_SetConfig+0xbe>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1a      	ldr	r2, [pc, #104]	@ (80080b0 <TIM_OC1_SetConfig+0x114>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d007      	beq.n	800805a <TIM_OC1_SetConfig+0xbe>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a19      	ldr	r2, [pc, #100]	@ (80080b4 <TIM_OC1_SetConfig+0x118>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d003      	beq.n	800805a <TIM_OC1_SetConfig+0xbe>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a18      	ldr	r2, [pc, #96]	@ (80080b8 <TIM_OC1_SetConfig+0x11c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d111      	bne.n	800807e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	621a      	str	r2, [r3, #32]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	fffeff8f 	.word	0xfffeff8f
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40010400 	.word	0x40010400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800

080080bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f023 0210 	bic.w	r2, r3, #16
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4b34      	ldr	r3, [pc, #208]	@ (80081b8 <TIM_OC2_SetConfig+0xfc>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0320 	bic.w	r3, r3, #32
 8008106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a29      	ldr	r2, [pc, #164]	@ (80081bc <TIM_OC2_SetConfig+0x100>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_OC2_SetConfig+0x68>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a28      	ldr	r2, [pc, #160]	@ (80081c0 <TIM_OC2_SetConfig+0x104>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d10d      	bne.n	8008140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800812a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800813e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <TIM_OC2_SetConfig+0x100>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_OC2_SetConfig+0xac>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <TIM_OC2_SetConfig+0x104>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_OC2_SetConfig+0xac>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a1c      	ldr	r2, [pc, #112]	@ (80081c4 <TIM_OC2_SetConfig+0x108>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_OC2_SetConfig+0xac>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a1b      	ldr	r2, [pc, #108]	@ (80081c8 <TIM_OC2_SetConfig+0x10c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC2_SetConfig+0xac>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a1a      	ldr	r2, [pc, #104]	@ (80081cc <TIM_OC2_SetConfig+0x110>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d113      	bne.n	8008190 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800816e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	feff8fff 	.word	0xfeff8fff
 80081bc:	40010000 	.word	0x40010000
 80081c0:	40010400 	.word	0x40010400
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40014400 	.word	0x40014400
 80081cc:	40014800 	.word	0x40014800

080081d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4b33      	ldr	r3, [pc, #204]	@ (80082c8 <TIM_OC3_SetConfig+0xf8>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a28      	ldr	r2, [pc, #160]	@ (80082cc <TIM_OC3_SetConfig+0xfc>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC3_SetConfig+0x66>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a27      	ldr	r2, [pc, #156]	@ (80082d0 <TIM_OC3_SetConfig+0x100>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d10d      	bne.n	8008252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800823c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a1d      	ldr	r2, [pc, #116]	@ (80082cc <TIM_OC3_SetConfig+0xfc>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00f      	beq.n	800827a <TIM_OC3_SetConfig+0xaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a1c      	ldr	r2, [pc, #112]	@ (80082d0 <TIM_OC3_SetConfig+0x100>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_OC3_SetConfig+0xaa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a1b      	ldr	r2, [pc, #108]	@ (80082d4 <TIM_OC3_SetConfig+0x104>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <TIM_OC3_SetConfig+0xaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1a      	ldr	r2, [pc, #104]	@ (80082d8 <TIM_OC3_SetConfig+0x108>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_OC3_SetConfig+0xaa>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a19      	ldr	r2, [pc, #100]	@ (80082dc <TIM_OC3_SetConfig+0x10c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d113      	bne.n	80082a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	621a      	str	r2, [r3, #32]
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	fffeff8f 	.word	0xfffeff8f
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40010400 	.word	0x40010400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400
 80082dc:	40014800 	.word	0x40014800

080082e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4b24      	ldr	r3, [pc, #144]	@ (800839c <TIM_OC4_SetConfig+0xbc>)
 800830c:	4013      	ands	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800832a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a19      	ldr	r2, [pc, #100]	@ (80083a0 <TIM_OC4_SetConfig+0xc0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00f      	beq.n	8008360 <TIM_OC4_SetConfig+0x80>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <TIM_OC4_SetConfig+0xc4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00b      	beq.n	8008360 <TIM_OC4_SetConfig+0x80>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a17      	ldr	r2, [pc, #92]	@ (80083a8 <TIM_OC4_SetConfig+0xc8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_OC4_SetConfig+0x80>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a16      	ldr	r2, [pc, #88]	@ (80083ac <TIM_OC4_SetConfig+0xcc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC4_SetConfig+0x80>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a15      	ldr	r2, [pc, #84]	@ (80083b0 <TIM_OC4_SetConfig+0xd0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d109      	bne.n	8008374 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	019b      	lsls	r3, r3, #6
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	621a      	str	r2, [r3, #32]
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	feff8fff 	.word	0xfeff8fff
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40010400 	.word	0x40010400
 80083a8:	40014000 	.word	0x40014000
 80083ac:	40014400 	.word	0x40014400
 80083b0:	40014800 	.word	0x40014800

080083b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4b21      	ldr	r3, [pc, #132]	@ (8008464 <TIM_OC5_SetConfig+0xb0>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80083f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <TIM_OC5_SetConfig+0xb4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00f      	beq.n	800842a <TIM_OC5_SetConfig+0x76>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a17      	ldr	r2, [pc, #92]	@ (800846c <TIM_OC5_SetConfig+0xb8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00b      	beq.n	800842a <TIM_OC5_SetConfig+0x76>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a16      	ldr	r2, [pc, #88]	@ (8008470 <TIM_OC5_SetConfig+0xbc>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d007      	beq.n	800842a <TIM_OC5_SetConfig+0x76>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a15      	ldr	r2, [pc, #84]	@ (8008474 <TIM_OC5_SetConfig+0xc0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d003      	beq.n	800842a <TIM_OC5_SetConfig+0x76>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a14      	ldr	r2, [pc, #80]	@ (8008478 <TIM_OC5_SetConfig+0xc4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d109      	bne.n	800843e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	621a      	str	r2, [r3, #32]
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	fffeff8f 	.word	0xfffeff8f
 8008468:	40010000 	.word	0x40010000
 800846c:	40010400 	.word	0x40010400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4b22      	ldr	r3, [pc, #136]	@ (8008530 <TIM_OC6_SetConfig+0xb4>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	051b      	lsls	r3, r3, #20
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <TIM_OC6_SetConfig+0xb8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00f      	beq.n	80084f4 <TIM_OC6_SetConfig+0x78>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a18      	ldr	r2, [pc, #96]	@ (8008538 <TIM_OC6_SetConfig+0xbc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00b      	beq.n	80084f4 <TIM_OC6_SetConfig+0x78>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a17      	ldr	r2, [pc, #92]	@ (800853c <TIM_OC6_SetConfig+0xc0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d007      	beq.n	80084f4 <TIM_OC6_SetConfig+0x78>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a16      	ldr	r2, [pc, #88]	@ (8008540 <TIM_OC6_SetConfig+0xc4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_OC6_SetConfig+0x78>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <TIM_OC6_SetConfig+0xc8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d109      	bne.n	8008508 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	029b      	lsls	r3, r3, #10
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	feff8fff 	.word	0xfeff8fff
 8008534:	40010000 	.word	0x40010000
 8008538:	40010400 	.word	0x40010400
 800853c:	40014000 	.word	0x40014000
 8008540:	40014400 	.word	0x40014400
 8008544:	40014800 	.word	0x40014800

08008548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e06d      	b.n	800863c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a30      	ldr	r2, [pc, #192]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2f      	ldr	r2, [pc, #188]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d108      	bne.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800859a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a20      	ldr	r2, [pc, #128]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d01d      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a15      	ldr	r2, [pc, #84]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a16      	ldr	r2, [pc, #88]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a15      	ldr	r2, [pc, #84]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10c      	bne.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40001800 	.word	0x40001800
 8008660:	40014000 	.word	0x40014000

08008664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800867c:	2302      	movs	r3, #2
 800867e:	e065      	b.n	800874c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a14      	ldr	r2, [pc, #80]	@ (800875c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d115      	bne.n	800873a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	051b      	lsls	r3, r3, #20
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40010000 	.word	0x40010000
 800875c:	40010400 	.word	0x40010400

08008760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e042      	b.n	8008834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7f8 fe9f 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2224      	movs	r2, #36	@ 0x24
 80087ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f9c8 	bl	8009b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc5d 	bl	80090ac <UART_SetConfig>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e01b      	b.n	8008834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800880a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800881a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fa47 	bl	8009cc0 <UART_CheckIdleState>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008850:	2b20      	cmp	r3, #32
 8008852:	d137      	bne.n	80088c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <HAL_UART_Receive_IT+0x24>
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e030      	b.n	80088c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <HAL_UART_Receive_IT+0x94>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01f      	beq.n	80088b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d018      	beq.n	80088b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	613b      	str	r3, [r7, #16]
   return(result);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008896:	627b      	str	r3, [r7, #36]	@ 0x24
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	623b      	str	r3, [r7, #32]
 80088a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	6a3a      	ldr	r2, [r7, #32]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e6      	bne.n	8008882 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	461a      	mov	r2, r3
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f001 fb18 	bl	8009ef0 <UART_Start_Receive_IT>
 80088c0:	4603      	mov	r3, r0
 80088c2:	e000      	b.n	80088c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3728      	adds	r7, #40	@ 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	58000c00 	.word	0x58000c00

080088d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0ba      	sub	sp, #232	@ 0xe8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80088fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008902:	4013      	ands	r3, r2
 8008904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11b      	bne.n	8008948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800892c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8393 	beq.w	8009064 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
      }
      return;
 8008946:	e38d      	b.n	8009064 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8123 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008956:	4b8d      	ldr	r3, [pc, #564]	@ (8008b8c <HAL_UART_IRQHandler+0x2b8>)
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800895e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008962:	4b8b      	ldr	r3, [pc, #556]	@ (8008b90 <HAL_UART_IRQHandler+0x2bc>)
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8116 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d011      	beq.n	800899c <HAL_UART_IRQHandler+0xc8>
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800897c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2201      	movs	r2, #1
 800898a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008992:	f043 0201 	orr.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <HAL_UART_IRQHandler+0xf8>
 80089a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2202      	movs	r2, #2
 80089ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089c2:	f043 0204 	orr.w	r2, r3, #4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d011      	beq.n	80089fc <HAL_UART_IRQHandler+0x128>
 80089d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2204      	movs	r2, #4
 80089ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f2:	f043 0202 	orr.w	r2, r3, #2
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d017      	beq.n	8008a38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a18:	4b5c      	ldr	r3, [pc, #368]	@ (8008b8c <HAL_UART_IRQHandler+0x2b8>)
 8008a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2208      	movs	r2, #8
 8008a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2e:	f043 0208 	orr.w	r2, r3, #8
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d012      	beq.n	8008a6a <HAL_UART_IRQHandler+0x196>
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 82f9 	beq.w	8009068 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d013      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008abe:	2b40      	cmp	r3, #64	@ 0x40
 8008ac0:	d005      	beq.n	8008ace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d054      	beq.n	8008b78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fb30 	bl	800a134 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d146      	bne.n	8008b70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1d9      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d017      	beq.n	8008b68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b3e:	4a15      	ldr	r2, [pc, #84]	@ (8008b94 <HAL_UART_IRQHandler+0x2c0>)
 8008b40:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fa f95f 	bl	8002e0c <HAL_DMA_Abort_IT>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d019      	beq.n	8008b88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008b62:	4610      	mov	r0, r2
 8008b64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b66:	e00f      	b.n	8008b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7f7 fdb5 	bl	80006d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6e:	e00b      	b.n	8008b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7f7 fdb1 	bl	80006d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b76:	e007      	b.n	8008b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7f7 fdad 	bl	80006d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008b86:	e26f      	b.n	8009068 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	bf00      	nop
    return;
 8008b8a:	e26d      	b.n	8009068 <HAL_UART_IRQHandler+0x794>
 8008b8c:	10000001 	.word	0x10000001
 8008b90:	04000120 	.word	0x04000120
 8008b94:	0800a201 	.word	0x0800a201

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	f040 8203 	bne.w	8008fa8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 81fc 	beq.w	8008fa8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 81f5 	beq.w	8008fa8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2210      	movs	r2, #16
 8008bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd0:	2b40      	cmp	r3, #64	@ 0x40
 8008bd2:	f040 816d 	bne.w	8008eb0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4aa4      	ldr	r2, [pc, #656]	@ (8008e70 <HAL_UART_IRQHandler+0x59c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d068      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4aa1      	ldr	r2, [pc, #644]	@ (8008e74 <HAL_UART_IRQHandler+0x5a0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d061      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a9f      	ldr	r2, [pc, #636]	@ (8008e78 <HAL_UART_IRQHandler+0x5a4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d05a      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a9c      	ldr	r2, [pc, #624]	@ (8008e7c <HAL_UART_IRQHandler+0x5a8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d053      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a9a      	ldr	r2, [pc, #616]	@ (8008e80 <HAL_UART_IRQHandler+0x5ac>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d04c      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a97      	ldr	r2, [pc, #604]	@ (8008e84 <HAL_UART_IRQHandler+0x5b0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d045      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a95      	ldr	r2, [pc, #596]	@ (8008e88 <HAL_UART_IRQHandler+0x5b4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d03e      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a92      	ldr	r2, [pc, #584]	@ (8008e8c <HAL_UART_IRQHandler+0x5b8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d037      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a90      	ldr	r2, [pc, #576]	@ (8008e90 <HAL_UART_IRQHandler+0x5bc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d030      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a8d      	ldr	r2, [pc, #564]	@ (8008e94 <HAL_UART_IRQHandler+0x5c0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d029      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a8b      	ldr	r2, [pc, #556]	@ (8008e98 <HAL_UART_IRQHandler+0x5c4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d022      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a88      	ldr	r2, [pc, #544]	@ (8008e9c <HAL_UART_IRQHandler+0x5c8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d01b      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a86      	ldr	r2, [pc, #536]	@ (8008ea0 <HAL_UART_IRQHandler+0x5cc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d014      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a83      	ldr	r2, [pc, #524]	@ (8008ea4 <HAL_UART_IRQHandler+0x5d0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00d      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a81      	ldr	r2, [pc, #516]	@ (8008ea8 <HAL_UART_IRQHandler+0x5d4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d006      	beq.n	8008cb6 <HAL_UART_IRQHandler+0x3e2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a7e      	ldr	r2, [pc, #504]	@ (8008eac <HAL_UART_IRQHandler+0x5d8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d106      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x3f0>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	e005      	b.n	8008cd0 <HAL_UART_IRQHandler+0x3fc>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 80ad 	beq.w	8008e38 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	f080 80a5 	bcs.w	8008e38 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d04:	f000 8087 	beq.w	8008e16 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1da      	bne.n	8008d08 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e1      	bne.n	8008d52 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3308      	adds	r3, #8
 8008d94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3308      	adds	r3, #8
 8008dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e3      	bne.n	8008d8e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de4:	f023 0310 	bic.w	r3, r3, #16
 8008de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008df6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008df8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e4      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f9 fcdd 	bl	80027d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f92f 	bl	8009094 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008e36:	e119      	b.n	800906c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e42:	429a      	cmp	r2, r3
 8008e44:	f040 8112 	bne.w	800906c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e54:	f040 810a 	bne.w	800906c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f914 	bl	8009094 <HAL_UARTEx_RxEventCallback>
      return;
 8008e6c:	e0fe      	b.n	800906c <HAL_UART_IRQHandler+0x798>
 8008e6e:	bf00      	nop
 8008e70:	40020010 	.word	0x40020010
 8008e74:	40020028 	.word	0x40020028
 8008e78:	40020040 	.word	0x40020040
 8008e7c:	40020058 	.word	0x40020058
 8008e80:	40020070 	.word	0x40020070
 8008e84:	40020088 	.word	0x40020088
 8008e88:	400200a0 	.word	0x400200a0
 8008e8c:	400200b8 	.word	0x400200b8
 8008e90:	40020410 	.word	0x40020410
 8008e94:	40020428 	.word	0x40020428
 8008e98:	40020440 	.word	0x40020440
 8008e9c:	40020458 	.word	0x40020458
 8008ea0:	40020470 	.word	0x40020470
 8008ea4:	40020488 	.word	0x40020488
 8008ea8:	400204a0 	.word	0x400204a0
 8008eac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80cf 	beq.w	8009070 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80ca 	beq.w	8009070 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e4      	bne.n	8008edc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	623b      	str	r3, [r7, #32]
   return(result);
 8008f22:	6a3a      	ldr	r2, [r7, #32]
 8008f24:	4b55      	ldr	r3, [pc, #340]	@ (800907c <HAL_UART_IRQHandler+0x7a8>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3308      	adds	r3, #8
 8008f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f36:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e3      	bne.n	8008f12 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0310 	bic.w	r3, r3, #16
 8008f72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	69b9      	ldr	r1, [r7, #24]
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e4      	bne.n	8008f5e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f877 	bl	8009094 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fa6:	e063      	b.n	8009070 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00e      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x6fe>
 8008fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fe76 	bl	800acbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fd0:	e051      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d014      	beq.n	8009008 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d03a      	beq.n	8009074 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
    }
    return;
 8009006:	e035      	b.n	8009074 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d009      	beq.n	8009028 <HAL_UART_IRQHandler+0x754>
 8009014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f8ff 	bl	800a224 <UART_EndTransmit_IT>
    return;
 8009026:	e026      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800902c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <HAL_UART_IRQHandler+0x774>
 8009034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009038:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 fe4f 	bl	800ace4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009046:	e016      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <HAL_UART_IRQHandler+0x7a2>
 8009054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009058:	2b00      	cmp	r3, #0
 800905a:	da0c      	bge.n	8009076 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 fe37 	bl	800acd0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009062:	e008      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009064:	bf00      	nop
 8009066:	e006      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009068:	bf00      	nop
 800906a:	e004      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
      return;
 800906c:	bf00      	nop
 800906e:	e002      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009070:	bf00      	nop
 8009072:	e000      	b.n	8009076 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009074:	bf00      	nop
  }
}
 8009076:	37e8      	adds	r7, #232	@ 0xe8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	effffffe 	.word	0xeffffffe

08009080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090b0:	b092      	sub	sp, #72	@ 0x48
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4bbe      	ldr	r3, [pc, #760]	@ (80093d4 <UART_SetConfig+0x328>)
 80090dc:	4013      	ands	r3, r2
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	6812      	ldr	r2, [r2, #0]
 80090e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4ab3      	ldr	r2, [pc, #716]	@ (80093d8 <UART_SetConfig+0x32c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009114:	4313      	orrs	r3, r2
 8009116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	4baf      	ldr	r3, [pc, #700]	@ (80093dc <UART_SetConfig+0x330>)
 8009120:	4013      	ands	r3, r2
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009128:	430b      	orrs	r3, r1
 800912a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	f023 010f 	bic.w	r1, r3, #15
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4aa6      	ldr	r2, [pc, #664]	@ (80093e0 <UART_SetConfig+0x334>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d177      	bne.n	800923c <UART_SetConfig+0x190>
 800914c:	4ba5      	ldr	r3, [pc, #660]	@ (80093e4 <UART_SetConfig+0x338>)
 800914e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009154:	2b28      	cmp	r3, #40	@ 0x28
 8009156:	d86d      	bhi.n	8009234 <UART_SetConfig+0x188>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <UART_SetConfig+0xb4>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009205 	.word	0x08009205
 8009164:	08009235 	.word	0x08009235
 8009168:	08009235 	.word	0x08009235
 800916c:	08009235 	.word	0x08009235
 8009170:	08009235 	.word	0x08009235
 8009174:	08009235 	.word	0x08009235
 8009178:	08009235 	.word	0x08009235
 800917c:	08009235 	.word	0x08009235
 8009180:	0800920d 	.word	0x0800920d
 8009184:	08009235 	.word	0x08009235
 8009188:	08009235 	.word	0x08009235
 800918c:	08009235 	.word	0x08009235
 8009190:	08009235 	.word	0x08009235
 8009194:	08009235 	.word	0x08009235
 8009198:	08009235 	.word	0x08009235
 800919c:	08009235 	.word	0x08009235
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009235 	.word	0x08009235
 80091a8:	08009235 	.word	0x08009235
 80091ac:	08009235 	.word	0x08009235
 80091b0:	08009235 	.word	0x08009235
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009235 	.word	0x08009235
 80091bc:	08009235 	.word	0x08009235
 80091c0:	0800921d 	.word	0x0800921d
 80091c4:	08009235 	.word	0x08009235
 80091c8:	08009235 	.word	0x08009235
 80091cc:	08009235 	.word	0x08009235
 80091d0:	08009235 	.word	0x08009235
 80091d4:	08009235 	.word	0x08009235
 80091d8:	08009235 	.word	0x08009235
 80091dc:	08009235 	.word	0x08009235
 80091e0:	08009225 	.word	0x08009225
 80091e4:	08009235 	.word	0x08009235
 80091e8:	08009235 	.word	0x08009235
 80091ec:	08009235 	.word	0x08009235
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009235 	.word	0x08009235
 80091f8:	08009235 	.word	0x08009235
 80091fc:	08009235 	.word	0x08009235
 8009200:	0800922d 	.word	0x0800922d
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e222      	b.n	8009652 <UART_SetConfig+0x5a6>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009212:	e21e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800921a:	e21a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009222:	e216      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009224:	2320      	movs	r3, #32
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e212      	b.n	8009652 <UART_SetConfig+0x5a6>
 800922c:	2340      	movs	r3, #64	@ 0x40
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e20e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e20a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a69      	ldr	r2, [pc, #420]	@ (80093e8 <UART_SetConfig+0x33c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d130      	bne.n	80092a8 <UART_SetConfig+0x1fc>
 8009246:	4b67      	ldr	r3, [pc, #412]	@ (80093e4 <UART_SetConfig+0x338>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	2b05      	cmp	r3, #5
 8009250:	d826      	bhi.n	80092a0 <UART_SetConfig+0x1f4>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0x1ac>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009271 	.word	0x08009271
 800925c:	08009279 	.word	0x08009279
 8009260:	08009281 	.word	0x08009281
 8009264:	08009289 	.word	0x08009289
 8009268:	08009291 	.word	0x08009291
 800926c:	08009299 	.word	0x08009299
 8009270:	2300      	movs	r3, #0
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e1ec      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009278:	2304      	movs	r3, #4
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800927e:	e1e8      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009280:	2308      	movs	r3, #8
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009286:	e1e4      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009288:	2310      	movs	r3, #16
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800928e:	e1e0      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009290:	2320      	movs	r3, #32
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e1dc      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009298:	2340      	movs	r3, #64	@ 0x40
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e1d8      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e1d4      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a4f      	ldr	r2, [pc, #316]	@ (80093ec <UART_SetConfig+0x340>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d130      	bne.n	8009314 <UART_SetConfig+0x268>
 80092b2:	4b4c      	ldr	r3, [pc, #304]	@ (80093e4 <UART_SetConfig+0x338>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d826      	bhi.n	800930c <UART_SetConfig+0x260>
 80092be:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <UART_SetConfig+0x218>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e1b6      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e1b2      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e1ae      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fa:	e1aa      	b.n	8009652 <UART_SetConfig+0x5a6>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e1a6      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009304:	2340      	movs	r3, #64	@ 0x40
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e1a2      	b.n	8009652 <UART_SetConfig+0x5a6>
 800930c:	2380      	movs	r3, #128	@ 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e19e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a35      	ldr	r2, [pc, #212]	@ (80093f0 <UART_SetConfig+0x344>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d130      	bne.n	8009380 <UART_SetConfig+0x2d4>
 800931e:	4b31      	ldr	r3, [pc, #196]	@ (80093e4 <UART_SetConfig+0x338>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b05      	cmp	r3, #5
 8009328:	d826      	bhi.n	8009378 <UART_SetConfig+0x2cc>
 800932a:	a201      	add	r2, pc, #4	@ (adr r2, 8009330 <UART_SetConfig+0x284>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009349 	.word	0x08009349
 8009334:	08009351 	.word	0x08009351
 8009338:	08009359 	.word	0x08009359
 800933c:	08009361 	.word	0x08009361
 8009340:	08009369 	.word	0x08009369
 8009344:	08009371 	.word	0x08009371
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e180      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e17c      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e178      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009366:	e174      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009368:	2320      	movs	r3, #32
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e170      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009370:	2340      	movs	r3, #64	@ 0x40
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e16c      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009378:	2380      	movs	r3, #128	@ 0x80
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e168      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a1b      	ldr	r2, [pc, #108]	@ (80093f4 <UART_SetConfig+0x348>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d142      	bne.n	8009410 <UART_SetConfig+0x364>
 800938a:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <UART_SetConfig+0x338>)
 800938c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b05      	cmp	r3, #5
 8009394:	d838      	bhi.n	8009408 <UART_SetConfig+0x35c>
 8009396:	a201      	add	r2, pc, #4	@ (adr r2, 800939c <UART_SetConfig+0x2f0>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093b5 	.word	0x080093b5
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	080093c5 	.word	0x080093c5
 80093a8:	080093cd 	.word	0x080093cd
 80093ac:	080093f9 	.word	0x080093f9
 80093b0:	08009401 	.word	0x08009401
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e14a      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e146      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e142      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e13e      	b.n	8009652 <UART_SetConfig+0x5a6>
 80093d4:	cfff69f3 	.word	0xcfff69f3
 80093d8:	58000c00 	.word	0x58000c00
 80093dc:	11fff4ff 	.word	0x11fff4ff
 80093e0:	40011000 	.word	0x40011000
 80093e4:	58024400 	.word	0x58024400
 80093e8:	40004400 	.word	0x40004400
 80093ec:	40004800 	.word	0x40004800
 80093f0:	40004c00 	.word	0x40004c00
 80093f4:	40005000 	.word	0x40005000
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e128      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009400:	2340      	movs	r3, #64	@ 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e124      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e120      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4acb      	ldr	r2, [pc, #812]	@ (8009744 <UART_SetConfig+0x698>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d176      	bne.n	8009508 <UART_SetConfig+0x45c>
 800941a:	4bcb      	ldr	r3, [pc, #812]	@ (8009748 <UART_SetConfig+0x69c>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009422:	2b28      	cmp	r3, #40	@ 0x28
 8009424:	d86c      	bhi.n	8009500 <UART_SetConfig+0x454>
 8009426:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <UART_SetConfig+0x380>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	080094d1 	.word	0x080094d1
 8009430:	08009501 	.word	0x08009501
 8009434:	08009501 	.word	0x08009501
 8009438:	08009501 	.word	0x08009501
 800943c:	08009501 	.word	0x08009501
 8009440:	08009501 	.word	0x08009501
 8009444:	08009501 	.word	0x08009501
 8009448:	08009501 	.word	0x08009501
 800944c:	080094d9 	.word	0x080094d9
 8009450:	08009501 	.word	0x08009501
 8009454:	08009501 	.word	0x08009501
 8009458:	08009501 	.word	0x08009501
 800945c:	08009501 	.word	0x08009501
 8009460:	08009501 	.word	0x08009501
 8009464:	08009501 	.word	0x08009501
 8009468:	08009501 	.word	0x08009501
 800946c:	080094e1 	.word	0x080094e1
 8009470:	08009501 	.word	0x08009501
 8009474:	08009501 	.word	0x08009501
 8009478:	08009501 	.word	0x08009501
 800947c:	08009501 	.word	0x08009501
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	080094e9 	.word	0x080094e9
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009501 	.word	0x08009501
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
 80094c8:	08009501 	.word	0x08009501
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2301      	movs	r3, #1
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e0bc      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e0b8      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e0b4      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e0b0      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e0ac      	b.n	8009652 <UART_SetConfig+0x5a6>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e0a8      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e0a4      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a8f      	ldr	r2, [pc, #572]	@ (800974c <UART_SetConfig+0x6a0>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x4c8>
 8009512:	4b8d      	ldr	r3, [pc, #564]	@ (8009748 <UART_SetConfig+0x69c>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x4c0>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x478>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e086      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e082      	b.n	8009652 <UART_SetConfig+0x5a6>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e07e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e07a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e076      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e072      	b.n	8009652 <UART_SetConfig+0x5a6>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e06e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a75      	ldr	r2, [pc, #468]	@ (8009750 <UART_SetConfig+0x6a4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d130      	bne.n	80095e0 <UART_SetConfig+0x534>
 800957e:	4b72      	ldr	r3, [pc, #456]	@ (8009748 <UART_SetConfig+0x69c>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d826      	bhi.n	80095d8 <UART_SetConfig+0x52c>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x4e4>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c9 	.word	0x080095c9
 80095a4:	080095d1 	.word	0x080095d1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e050      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e04c      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e048      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e044      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095c8:	2320      	movs	r3, #32
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e040      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095d0:	2340      	movs	r3, #64	@ 0x40
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e03c      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095d8:	2380      	movs	r3, #128	@ 0x80
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e038      	b.n	8009652 <UART_SetConfig+0x5a6>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009754 <UART_SetConfig+0x6a8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d130      	bne.n	800964c <UART_SetConfig+0x5a0>
 80095ea:	4b57      	ldr	r3, [pc, #348]	@ (8009748 <UART_SetConfig+0x69c>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d826      	bhi.n	8009644 <UART_SetConfig+0x598>
 80095f6:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <UART_SetConfig+0x550>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009615 	.word	0x08009615
 8009600:	0800961d 	.word	0x0800961d
 8009604:	08009625 	.word	0x08009625
 8009608:	0800962d 	.word	0x0800962d
 800960c:	08009635 	.word	0x08009635
 8009610:	0800963d 	.word	0x0800963d
 8009614:	2302      	movs	r3, #2
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e01a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800961c:	2304      	movs	r3, #4
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e016      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009624:	2308      	movs	r3, #8
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e012      	b.n	8009652 <UART_SetConfig+0x5a6>
 800962c:	2310      	movs	r3, #16
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e00e      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009634:	2320      	movs	r3, #32
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e00a      	b.n	8009652 <UART_SetConfig+0x5a6>
 800963c:	2340      	movs	r3, #64	@ 0x40
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e006      	b.n	8009652 <UART_SetConfig+0x5a6>
 8009644:	2380      	movs	r3, #128	@ 0x80
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e002      	b.n	8009652 <UART_SetConfig+0x5a6>
 800964c:	2380      	movs	r3, #128	@ 0x80
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a3f      	ldr	r2, [pc, #252]	@ (8009754 <UART_SetConfig+0x6a8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	f040 80f8 	bne.w	800984e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800965e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009662:	2b20      	cmp	r3, #32
 8009664:	dc46      	bgt.n	80096f4 <UART_SetConfig+0x648>
 8009666:	2b02      	cmp	r3, #2
 8009668:	f2c0 8082 	blt.w	8009770 <UART_SetConfig+0x6c4>
 800966c:	3b02      	subs	r3, #2
 800966e:	2b1e      	cmp	r3, #30
 8009670:	d87e      	bhi.n	8009770 <UART_SetConfig+0x6c4>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <UART_SetConfig+0x5cc>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080096fb 	.word	0x080096fb
 800967c:	08009771 	.word	0x08009771
 8009680:	08009703 	.word	0x08009703
 8009684:	08009771 	.word	0x08009771
 8009688:	08009771 	.word	0x08009771
 800968c:	08009771 	.word	0x08009771
 8009690:	08009713 	.word	0x08009713
 8009694:	08009771 	.word	0x08009771
 8009698:	08009771 	.word	0x08009771
 800969c:	08009771 	.word	0x08009771
 80096a0:	08009771 	.word	0x08009771
 80096a4:	08009771 	.word	0x08009771
 80096a8:	08009771 	.word	0x08009771
 80096ac:	08009771 	.word	0x08009771
 80096b0:	08009723 	.word	0x08009723
 80096b4:	08009771 	.word	0x08009771
 80096b8:	08009771 	.word	0x08009771
 80096bc:	08009771 	.word	0x08009771
 80096c0:	08009771 	.word	0x08009771
 80096c4:	08009771 	.word	0x08009771
 80096c8:	08009771 	.word	0x08009771
 80096cc:	08009771 	.word	0x08009771
 80096d0:	08009771 	.word	0x08009771
 80096d4:	08009771 	.word	0x08009771
 80096d8:	08009771 	.word	0x08009771
 80096dc:	08009771 	.word	0x08009771
 80096e0:	08009771 	.word	0x08009771
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009771 	.word	0x08009771
 80096ec:	08009771 	.word	0x08009771
 80096f0:	08009763 	.word	0x08009763
 80096f4:	2b40      	cmp	r3, #64	@ 0x40
 80096f6:	d037      	beq.n	8009768 <UART_SetConfig+0x6bc>
 80096f8:	e03a      	b.n	8009770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096fa:	f7fd f8b7 	bl	800686c <HAL_RCCEx_GetD3PCLK1Freq>
 80096fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009700:	e03c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd f8c6 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800970c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009710:	e034      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f7fd fa12 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e02c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009722:	4b09      	ldr	r3, [pc, #36]	@ (8009748 <UART_SetConfig+0x69c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d016      	beq.n	800975c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800972e:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <UART_SetConfig+0x69c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	08db      	lsrs	r3, r3, #3
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	4a07      	ldr	r2, [pc, #28]	@ (8009758 <UART_SetConfig+0x6ac>)
 800973a:	fa22 f303 	lsr.w	r3, r2, r3
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009740:	e01c      	b.n	800977c <UART_SetConfig+0x6d0>
 8009742:	bf00      	nop
 8009744:	40011400 	.word	0x40011400
 8009748:	58024400 	.word	0x58024400
 800974c:	40007800 	.word	0x40007800
 8009750:	40007c00 	.word	0x40007c00
 8009754:	58000c00 	.word	0x58000c00
 8009758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800975c:	4b9d      	ldr	r3, [pc, #628]	@ (80099d4 <UART_SetConfig+0x928>)
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009760:	e00c      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009762:	4b9d      	ldr	r3, [pc, #628]	@ (80099d8 <UART_SetConfig+0x92c>)
 8009764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009766:	e009      	b.n	800977c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e005      	b.n	800977c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800977a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800977c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 81de 	beq.w	8009b40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	4a94      	ldr	r2, [pc, #592]	@ (80099dc <UART_SetConfig+0x930>)
 800978a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800978e:	461a      	mov	r2, r3
 8009790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009792:	fbb3 f3f2 	udiv	r3, r3, r2
 8009796:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d305      	bcc.n	80097b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097ba:	e1c1      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097be:	2200      	movs	r2, #0
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	60fa      	str	r2, [r7, #12]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c8:	4a84      	ldr	r2, [pc, #528]	@ (80099dc <UART_SetConfig+0x930>)
 80097ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2200      	movs	r2, #0
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097de:	f7f6 fd7f 	bl	80002e0 <__aeabi_uldivmod>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4610      	mov	r0, r2
 80097e8:	4619      	mov	r1, r3
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	020b      	lsls	r3, r1, #8
 80097f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097f8:	0202      	lsls	r2, r0, #8
 80097fa:	6979      	ldr	r1, [r7, #20]
 80097fc:	6849      	ldr	r1, [r1, #4]
 80097fe:	0849      	lsrs	r1, r1, #1
 8009800:	2000      	movs	r0, #0
 8009802:	460c      	mov	r4, r1
 8009804:	4605      	mov	r5, r0
 8009806:	eb12 0804 	adds.w	r8, r2, r4
 800980a:	eb43 0905 	adc.w	r9, r3, r5
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	469a      	mov	sl, r3
 8009816:	4693      	mov	fp, r2
 8009818:	4652      	mov	r2, sl
 800981a:	465b      	mov	r3, fp
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f6 fd5e 	bl	80002e0 <__aeabi_uldivmod>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4613      	mov	r3, r2
 800982a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009832:	d308      	bcc.n	8009846 <UART_SetConfig+0x79a>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800983a:	d204      	bcs.n	8009846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009842:	60da      	str	r2, [r3, #12]
 8009844:	e17c      	b.n	8009b40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800984c:	e178      	b.n	8009b40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009856:	f040 80c5 	bne.w	80099e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800985a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800985e:	2b20      	cmp	r3, #32
 8009860:	dc48      	bgt.n	80098f4 <UART_SetConfig+0x848>
 8009862:	2b00      	cmp	r3, #0
 8009864:	db7b      	blt.n	800995e <UART_SetConfig+0x8b2>
 8009866:	2b20      	cmp	r3, #32
 8009868:	d879      	bhi.n	800995e <UART_SetConfig+0x8b2>
 800986a:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <UART_SetConfig+0x7c4>)
 800986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009870:	080098fb 	.word	0x080098fb
 8009874:	08009903 	.word	0x08009903
 8009878:	0800995f 	.word	0x0800995f
 800987c:	0800995f 	.word	0x0800995f
 8009880:	0800990b 	.word	0x0800990b
 8009884:	0800995f 	.word	0x0800995f
 8009888:	0800995f 	.word	0x0800995f
 800988c:	0800995f 	.word	0x0800995f
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800995f 	.word	0x0800995f
 8009898:	0800995f 	.word	0x0800995f
 800989c:	0800995f 	.word	0x0800995f
 80098a0:	0800995f 	.word	0x0800995f
 80098a4:	0800995f 	.word	0x0800995f
 80098a8:	0800995f 	.word	0x0800995f
 80098ac:	0800995f 	.word	0x0800995f
 80098b0:	0800992b 	.word	0x0800992b
 80098b4:	0800995f 	.word	0x0800995f
 80098b8:	0800995f 	.word	0x0800995f
 80098bc:	0800995f 	.word	0x0800995f
 80098c0:	0800995f 	.word	0x0800995f
 80098c4:	0800995f 	.word	0x0800995f
 80098c8:	0800995f 	.word	0x0800995f
 80098cc:	0800995f 	.word	0x0800995f
 80098d0:	0800995f 	.word	0x0800995f
 80098d4:	0800995f 	.word	0x0800995f
 80098d8:	0800995f 	.word	0x0800995f
 80098dc:	0800995f 	.word	0x0800995f
 80098e0:	0800995f 	.word	0x0800995f
 80098e4:	0800995f 	.word	0x0800995f
 80098e8:	0800995f 	.word	0x0800995f
 80098ec:	0800995f 	.word	0x0800995f
 80098f0:	08009951 	.word	0x08009951
 80098f4:	2b40      	cmp	r3, #64	@ 0x40
 80098f6:	d02e      	beq.n	8009956 <UART_SetConfig+0x8aa>
 80098f8:	e031      	b.n	800995e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098fa:	f7fa ffbf 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80098fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009900:	e033      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009902:	f7fa ffd1 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8009906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009908:	e02f      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f7fc ffc2 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009918:	e027      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800991a:	f107 0318 	add.w	r3, r7, #24
 800991e:	4618      	mov	r0, r3
 8009920:	f7fd f90e 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009928:	e01f      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800992a:	4b2d      	ldr	r3, [pc, #180]	@ (80099e0 <UART_SetConfig+0x934>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009936:	4b2a      	ldr	r3, [pc, #168]	@ (80099e0 <UART_SetConfig+0x934>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	08db      	lsrs	r3, r3, #3
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	4a24      	ldr	r2, [pc, #144]	@ (80099d4 <UART_SetConfig+0x928>)
 8009942:	fa22 f303 	lsr.w	r3, r2, r3
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009948:	e00f      	b.n	800996a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800994a:	4b22      	ldr	r3, [pc, #136]	@ (80099d4 <UART_SetConfig+0x928>)
 800994c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994e:	e00c      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009950:	4b21      	ldr	r3, [pc, #132]	@ (80099d8 <UART_SetConfig+0x92c>)
 8009952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009954:	e009      	b.n	800996a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995c:	e005      	b.n	800996a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 80e7 	beq.w	8009b40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	4a19      	ldr	r2, [pc, #100]	@ (80099dc <UART_SetConfig+0x930>)
 8009978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997c:	461a      	mov	r2, r3
 800997e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009980:	fbb3 f3f2 	udiv	r3, r3, r2
 8009984:	005a      	lsls	r2, r3, #1
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	441a      	add	r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	fbb2 f3f3 	udiv	r3, r2, r3
 8009996:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	2b0f      	cmp	r3, #15
 800999c:	d916      	bls.n	80099cc <UART_SetConfig+0x920>
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a4:	d212      	bcs.n	80099cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f023 030f 	bic.w	r3, r3, #15
 80099ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099be:	4313      	orrs	r3, r2
 80099c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099c8:	60da      	str	r2, [r3, #12]
 80099ca:	e0b9      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099d2:	e0b5      	b.n	8009b40 <UART_SetConfig+0xa94>
 80099d4:	03d09000 	.word	0x03d09000
 80099d8:	003d0900 	.word	0x003d0900
 80099dc:	0800dd98 	.word	0x0800dd98
 80099e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80099e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	dc49      	bgt.n	8009a80 <UART_SetConfig+0x9d4>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	db7c      	blt.n	8009aea <UART_SetConfig+0xa3e>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d87a      	bhi.n	8009aea <UART_SetConfig+0xa3e>
 80099f4:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0x950>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a87 	.word	0x08009a87
 8009a00:	08009a8f 	.word	0x08009a8f
 8009a04:	08009aeb 	.word	0x08009aeb
 8009a08:	08009aeb 	.word	0x08009aeb
 8009a0c:	08009a97 	.word	0x08009a97
 8009a10:	08009aeb 	.word	0x08009aeb
 8009a14:	08009aeb 	.word	0x08009aeb
 8009a18:	08009aeb 	.word	0x08009aeb
 8009a1c:	08009aa7 	.word	0x08009aa7
 8009a20:	08009aeb 	.word	0x08009aeb
 8009a24:	08009aeb 	.word	0x08009aeb
 8009a28:	08009aeb 	.word	0x08009aeb
 8009a2c:	08009aeb 	.word	0x08009aeb
 8009a30:	08009aeb 	.word	0x08009aeb
 8009a34:	08009aeb 	.word	0x08009aeb
 8009a38:	08009aeb 	.word	0x08009aeb
 8009a3c:	08009ab7 	.word	0x08009ab7
 8009a40:	08009aeb 	.word	0x08009aeb
 8009a44:	08009aeb 	.word	0x08009aeb
 8009a48:	08009aeb 	.word	0x08009aeb
 8009a4c:	08009aeb 	.word	0x08009aeb
 8009a50:	08009aeb 	.word	0x08009aeb
 8009a54:	08009aeb 	.word	0x08009aeb
 8009a58:	08009aeb 	.word	0x08009aeb
 8009a5c:	08009aeb 	.word	0x08009aeb
 8009a60:	08009aeb 	.word	0x08009aeb
 8009a64:	08009aeb 	.word	0x08009aeb
 8009a68:	08009aeb 	.word	0x08009aeb
 8009a6c:	08009aeb 	.word	0x08009aeb
 8009a70:	08009aeb 	.word	0x08009aeb
 8009a74:	08009aeb 	.word	0x08009aeb
 8009a78:	08009aeb 	.word	0x08009aeb
 8009a7c:	08009add 	.word	0x08009add
 8009a80:	2b40      	cmp	r3, #64	@ 0x40
 8009a82:	d02e      	beq.n	8009ae2 <UART_SetConfig+0xa36>
 8009a84:	e031      	b.n	8009aea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a86:	f7fa fef9 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8009a8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a8c:	e033      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a8e:	f7fa ff0b 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8009a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a94:	e02f      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fc fefc 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa4:	e027      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aa6:	f107 0318 	add.w	r3, r7, #24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd f848 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e01f      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b6c <UART_SetConfig+0xac0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8009b6c <UART_SetConfig+0xac0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	08db      	lsrs	r3, r3, #3
 8009ac8:	f003 0303 	and.w	r3, r3, #3
 8009acc:	4a28      	ldr	r2, [pc, #160]	@ (8009b70 <UART_SetConfig+0xac4>)
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ad4:	e00f      	b.n	8009af6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009ad6:	4b26      	ldr	r3, [pc, #152]	@ (8009b70 <UART_SetConfig+0xac4>)
 8009ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ada:	e00c      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009adc:	4b25      	ldr	r3, [pc, #148]	@ (8009b74 <UART_SetConfig+0xac8>)
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae0:	e009      	b.n	8009af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae8:	e005      	b.n	8009af6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009af4:	bf00      	nop
    }

    if (pclk != 0U)
 8009af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d021      	beq.n	8009b40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b00:	4a1d      	ldr	r2, [pc, #116]	@ (8009b78 <UART_SetConfig+0xacc>)
 8009b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085b      	lsrs	r3, r3, #1
 8009b14:	441a      	add	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	2b0f      	cmp	r3, #15
 8009b24:	d909      	bls.n	8009b3a <UART_SetConfig+0xa8e>
 8009b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b2c:	d205      	bcs.n	8009b3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60da      	str	r2, [r3, #12]
 8009b38:	e002      	b.n	8009b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2200      	movs	r2, #0
 8009b54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3748      	adds	r7, #72	@ 0x48
 8009b64:	46bd      	mov	sp, r7
 8009b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b6a:	bf00      	nop
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	03d09000 	.word	0x03d09000
 8009b74:	003d0900 	.word	0x003d0900
 8009b78:	0800dd98 	.word	0x0800dd98

08009b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c7a:	d10a      	bne.n	8009c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b098      	sub	sp, #96	@ 0x60
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cd0:	f7f7 fd06 	bl	80016e0 <HAL_GetTick>
 8009cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d12f      	bne.n	8009d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cec:	2200      	movs	r2, #0
 8009cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f88e 	bl	8009e14 <UART_WaitOnFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d022      	beq.n	8009d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e6      	bne.n	8009cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e063      	b.n	8009e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0304 	and.w	r3, r3, #4
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d149      	bne.n	8009de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f857 	bl	8009e14 <UART_WaitOnFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d03c      	beq.n	8009de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	623b      	str	r3, [r7, #32]
   return(result);
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e6      	bne.n	8009d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3308      	adds	r3, #8
 8009dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dbe:	61fa      	str	r2, [r7, #28]
 8009dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	69b9      	ldr	r1, [r7, #24]
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	617b      	str	r3, [r7, #20]
   return(result);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e5      	bne.n	8009d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e012      	b.n	8009e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3758      	adds	r7, #88	@ 0x58
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4613      	mov	r3, r2
 8009e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e24:	e04f      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d04b      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e2e:	f7f7 fc57 	bl	80016e0 <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d302      	bcc.n	8009e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e04e      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d037      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d034      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2b40      	cmp	r3, #64	@ 0x40
 8009e60:	d031      	beq.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d110      	bne.n	8009e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2208      	movs	r2, #8
 8009e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f95b 	bl	800a134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2208      	movs	r2, #8
 8009e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e029      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea0:	d111      	bne.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 f941 	bl	800a134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e00f      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	bf0c      	ite	eq
 8009ed6:	2301      	moveq	r3, #1
 8009ed8:	2300      	movne	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d0a0      	beq.n	8009e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b0a3      	sub	sp, #140	@ 0x8c
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	88fa      	ldrh	r2, [r7, #6]
 8009f08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	88fa      	ldrh	r2, [r7, #6]
 8009f10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f22:	d10e      	bne.n	8009f42 <UART_Start_Receive_IT+0x52>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <UART_Start_Receive_IT+0x48>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009f32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f36:	e02d      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	22ff      	movs	r2, #255	@ 0xff
 8009f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f40:	e028      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10d      	bne.n	8009f66 <UART_Start_Receive_IT+0x76>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d104      	bne.n	8009f5c <UART_Start_Receive_IT+0x6c>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	22ff      	movs	r2, #255	@ 0xff
 8009f56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f5a:	e01b      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	227f      	movs	r2, #127	@ 0x7f
 8009f60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f64:	e016      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f6e:	d10d      	bne.n	8009f8c <UART_Start_Receive_IT+0x9c>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <UART_Start_Receive_IT+0x92>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	227f      	movs	r2, #127	@ 0x7f
 8009f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f80:	e008      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	223f      	movs	r2, #63	@ 0x3f
 8009f86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009f8a:	e003      	b.n	8009f94 <UART_Start_Receive_IT+0xa4>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2222      	movs	r2, #34	@ 0x22
 8009fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fae:	e853 3f00 	ldrex	r3, [r3]
 8009fb2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009fc8:	673a      	str	r2, [r7, #112]	@ 0x70
 8009fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009fce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e3      	bne.n	8009fa4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe4:	d14f      	bne.n	800a086 <UART_Start_Receive_IT+0x196>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fec:	88fa      	ldrh	r2, [r7, #6]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d349      	bcc.n	800a086 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ffa:	d107      	bne.n	800a00c <UART_Start_Receive_IT+0x11c>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4a47      	ldr	r2, [pc, #284]	@ (800a124 <UART_Start_Receive_IT+0x234>)
 800a008:	675a      	str	r2, [r3, #116]	@ 0x74
 800a00a:	e002      	b.n	800a012 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a46      	ldr	r2, [pc, #280]	@ (800a128 <UART_Start_Receive_IT+0x238>)
 800a010:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01a      	beq.n	800a050 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a022:	e853 3f00 	ldrex	r3, [r3]
 800a026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a02e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a03c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a042:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e4      	bne.n	800a01a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3308      	adds	r3, #8
 800a056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a066:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3308      	adds	r3, #8
 800a06e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a070:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a072:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a07e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e5      	bne.n	800a050 <UART_Start_Receive_IT+0x160>
 800a084:	e046      	b.n	800a114 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a08e:	d107      	bne.n	800a0a0 <UART_Start_Receive_IT+0x1b0>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4a24      	ldr	r2, [pc, #144]	@ (800a12c <UART_Start_Receive_IT+0x23c>)
 800a09c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a09e:	e002      	b.n	800a0a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	@ (800a130 <UART_Start_Receive_IT+0x240>)
 800a0a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d019      	beq.n	800a0e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a0c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e6      	bne.n	800a0ae <UART_Start_Receive_IT+0x1be>
 800a0e0:	e018      	b.n	800a114 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f043 0320 	orr.w	r3, r3, #32
 800a0f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a100:	623b      	str	r3, [r7, #32]
 800a102:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	69f9      	ldr	r1, [r7, #28]
 800a106:	6a3a      	ldr	r2, [r7, #32]
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e6      	bne.n	800a0e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	378c      	adds	r7, #140	@ 0x8c
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	0800a951 	.word	0x0800a951
 800a128:	0800a5ed 	.word	0x0800a5ed
 800a12c:	0800a435 	.word	0x0800a435
 800a130:	0800a27d 	.word	0x0800a27d

0800a134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b095      	sub	sp, #84	@ 0x54
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a15a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a15c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e6      	bne.n	800a13c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	4b1e      	ldr	r3, [pc, #120]	@ (800a1fc <UART_EndRxTransfer+0xc8>)
 800a182:	4013      	ands	r3, r2
 800a184:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a18e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e5      	bne.n	800a16e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d118      	bne.n	800a1dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f023 0310 	bic.w	r3, r3, #16
 800a1be:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6979      	ldr	r1, [r7, #20]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e6      	bne.n	800a1aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1f0:	bf00      	nop
 800a1f2:	3754      	adds	r7, #84	@ 0x54
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	effffffe 	.word	0xeffffffe

0800a200 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7f6 fa5e 	bl	80006d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	60bb      	str	r3, [r7, #8]
   return(result);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a240:	61fb      	str	r3, [r7, #28]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	61bb      	str	r3, [r7, #24]
 800a24c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6979      	ldr	r1, [r7, #20]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	613b      	str	r3, [r7, #16]
   return(result);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e6      	bne.n	800a22c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fe ff07 	bl	8009080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a272:	bf00      	nop
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b09c      	sub	sp, #112	@ 0x70
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a28a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a294:	2b22      	cmp	r3, #34	@ 0x22
 800a296:	f040 80be 	bne.w	800a416 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a2a8:	b2d9      	uxtb	r1, r3
 800a2aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b4:	400a      	ands	r2, r1
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f040 80a1 	bne.w	800a426 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a302:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e6      	bne.n	800a2e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a328:	f023 0301 	bic.w	r3, r3, #1
 800a32c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a336:	647a      	str	r2, [r7, #68]	@ 0x44
 800a338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e5      	bne.n	800a316 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a33      	ldr	r2, [pc, #204]	@ (800a430 <UART_RxISR_8BIT+0x1b4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d01f      	beq.n	800a3a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d018      	beq.n	800a3a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	623b      	str	r3, [r7, #32]
   return(result);
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a38a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a394:	633b      	str	r3, [r7, #48]	@ 0x30
 800a396:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a39a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e6      	bne.n	800a376 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d12e      	bne.n	800a40e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0310 	bic.w	r3, r3, #16
 800a3ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3d4:	61fb      	str	r3, [r7, #28]
 800a3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	69b9      	ldr	r1, [r7, #24]
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e6      	bne.n	800a3b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	2b10      	cmp	r3, #16
 800a3f4:	d103      	bne.n	800a3fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fe fe44 	bl	8009094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a40c:	e00b      	b.n	800a426 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f6 f8fc 	bl	800060c <HAL_UART_RxCpltCallback>
}
 800a414:	e007      	b.n	800a426 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	699a      	ldr	r2, [r3, #24]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0208 	orr.w	r2, r2, #8
 800a424:	619a      	str	r2, [r3, #24]
}
 800a426:	bf00      	nop
 800a428:	3770      	adds	r7, #112	@ 0x70
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	58000c00 	.word	0x58000c00

0800a434 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b09c      	sub	sp, #112	@ 0x70
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a44c:	2b22      	cmp	r3, #34	@ 0x22
 800a44e:	f040 80be 	bne.w	800a5ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a460:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a462:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a46a:	4013      	ands	r3, r2
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a470:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	1c9a      	adds	r2, r3, #2
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a482:	b29b      	uxth	r3, r3
 800a484:	3b01      	subs	r3, #1
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 80a1 	bne.w	800a5de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e6      	bne.n	800a49c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4ee:	643a      	str	r2, [r7, #64]	@ 0x40
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e5      	bne.n	800a4ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a33      	ldr	r2, [pc, #204]	@ (800a5e8 <UART_RxISR_16BIT+0x1b4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d01f      	beq.n	800a560 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d018      	beq.n	800a560 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a54e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e6      	bne.n	800a52e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d12e      	bne.n	800a5c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	e853 3f00 	ldrex	r3, [r3]
 800a57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f023 0310 	bic.w	r3, r3, #16
 800a582:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6979      	ldr	r1, [r7, #20]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	613b      	str	r3, [r7, #16]
   return(result);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e6      	bne.n	800a56e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	2b10      	cmp	r3, #16
 800a5ac:	d103      	bne.n	800a5b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7fe fd68 	bl	8009094 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5c4:	e00b      	b.n	800a5de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7f6 f820 	bl	800060c <HAL_UART_RxCpltCallback>
}
 800a5cc:	e007      	b.n	800a5de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0208 	orr.w	r2, r2, #8
 800a5dc:	619a      	str	r2, [r3, #24]
}
 800a5de:	bf00      	nop
 800a5e0:	3770      	adds	r7, #112	@ 0x70
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	58000c00 	.word	0x58000c00

0800a5ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b0ac      	sub	sp, #176	@ 0xb0
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a622:	2b22      	cmp	r3, #34	@ 0x22
 800a624:	f040 8181 	bne.w	800a92a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a62e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a632:	e124      	b.n	800a87e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a63e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a642:	b2d9      	uxtb	r1, r3
 800a644:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a64e:	400a      	ands	r2, r1
 800a650:	b2d2      	uxtb	r2, r2
 800a652:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a664:	b29b      	uxth	r3, r3
 800a666:	3b01      	subs	r3, #1
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	2b00      	cmp	r3, #0
 800a684:	d053      	beq.n	800a72e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d011      	beq.n	800a6b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ac:	f043 0201 	orr.w	r2, r3, #1
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6ba:	f003 0302 	and.w	r3, r3, #2
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d011      	beq.n	800a6e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6dc:	f043 0204 	orr.w	r2, r3, #4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6ea:	f003 0304 	and.w	r3, r3, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d011      	beq.n	800a716 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a6f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00b      	beq.n	800a716 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2204      	movs	r2, #4
 800a704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a70c:	f043 0202 	orr.w	r2, r3, #2
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d006      	beq.n	800a72e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7f5 ffd9 	bl	80006d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a734:	b29b      	uxth	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	f040 80a1 	bne.w	800a87e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a75e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a760:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a764:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a76c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e4      	bne.n	800a73c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3308      	adds	r3, #8
 800a778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a784:	4b6f      	ldr	r3, [pc, #444]	@ (800a944 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a786:	4013      	ands	r3, r2
 800a788:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3308      	adds	r3, #8
 800a792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a796:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a798:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a79c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a7a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e3      	bne.n	800a772 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a61      	ldr	r2, [pc, #388]	@ (800a948 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d021      	beq.n	800a80c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d01a      	beq.n	800a80c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7de:	e853 3f00 	ldrex	r3, [r3]
 800a7e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a7f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e4      	bne.n	800a7d6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a810:	2b01      	cmp	r3, #1
 800a812:	d130      	bne.n	800a876 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	f023 0310 	bic.w	r3, r3, #16
 800a82e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a83c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a83e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e4      	bne.n	800a81a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	f003 0310 	and.w	r3, r3, #16
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d103      	bne.n	800a866 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2210      	movs	r2, #16
 800a864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7fe fc10 	bl	8009094 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a874:	e00e      	b.n	800a894 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7f5 fec8 	bl	800060c <HAL_UART_RxCpltCallback>
        break;
 800a87c:	e00a      	b.n	800a894 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a87e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a882:	2b00      	cmp	r3, #0
 800a884:	d006      	beq.n	800a894 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800a886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f47f aed0 	bne.w	800a634 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a89a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a89e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d049      	beq.n	800a93a <UART_RxISR_8BIT_FIFOEN+0x34e>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a8ac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d242      	bcs.n	800a93a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a8d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e3      	bne.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a17      	ldr	r2, [pc, #92]	@ (800a94c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a8f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	e853 3f00 	ldrex	r3, [r3]
 800a8fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f043 0320 	orr.w	r3, r3, #32
 800a906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e4      	bne.n	800a8f2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a928:	e007      	b.n	800a93a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699a      	ldr	r2, [r3, #24]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f042 0208 	orr.w	r2, r2, #8
 800a938:	619a      	str	r2, [r3, #24]
}
 800a93a:	bf00      	nop
 800a93c:	37b0      	adds	r7, #176	@ 0xb0
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	effffffe 	.word	0xeffffffe
 800a948:	58000c00 	.word	0x58000c00
 800a94c:	0800a27d 	.word	0x0800a27d

0800a950 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b0ae      	sub	sp, #184	@ 0xb8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a95e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a986:	2b22      	cmp	r3, #34	@ 0x22
 800a988:	f040 8185 	bne.w	800ac96 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a992:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a996:	e128      	b.n	800abea <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a9aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a9ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c0:	1c9a      	adds	r2, r3, #2
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a9e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d053      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d011      	beq.n	800aa1e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a9fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d011      	beq.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aa2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00b      	beq.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa44:	f043 0204 	orr.w	r2, r3, #4
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa52:	f003 0304 	and.w	r3, r3, #4
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d011      	beq.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800aa5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00b      	beq.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2204      	movs	r2, #4
 800aa6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa74:	f043 0202 	orr.w	r2, r3, #2
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7f5 fe25 	bl	80006d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f040 80a3 	bne.w	800abea <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aac6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aaca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aace:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e2      	bne.n	800aaa4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aaee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aaf0:	4b6f      	ldr	r3, [pc, #444]	@ (800acb0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3308      	adds	r3, #8
 800aafe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ab02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ab04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ab08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ab10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e3      	bne.n	800aade <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a61      	ldr	r2, [pc, #388]	@ (800acb4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d021      	beq.n	800ab78 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01a      	beq.n	800ab78 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab4a:	e853 3f00 	ldrex	r3, [r3]
 800ab4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ab64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab6c:	e841 2300 	strex	r3, r2, [r1]
 800ab70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1e4      	bne.n	800ab42 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d130      	bne.n	800abe2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8e:	e853 3f00 	ldrex	r3, [r3]
 800ab92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	f023 0310 	bic.w	r3, r3, #16
 800ab9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aba8:	647b      	str	r3, [r7, #68]	@ 0x44
 800abaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e4      	bne.n	800ab86 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b10      	cmp	r3, #16
 800abc8:	d103      	bne.n	800abd2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2210      	movs	r2, #16
 800abd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7fe fa5a 	bl	8009094 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800abe0:	e00e      	b.n	800ac00 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7f5 fd12 	bl	800060c <HAL_UART_RxCpltCallback>
        break;
 800abe8:	e00a      	b.n	800ac00 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d006      	beq.n	800ac00 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800abf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f47f aecc 	bne.w	800a998 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac06:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d049      	beq.n	800aca6 <UART_RxISR_16BIT_FIFOEN+0x356>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac18:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d242      	bcs.n	800aca6 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3308      	adds	r3, #8
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2a:	e853 3f00 	ldrex	r3, [r3]
 800ac2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ac44:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac4c:	e841 2300 	strex	r3, r2, [r1]
 800ac50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e3      	bne.n	800ac20 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	@ (800acb8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ac5c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	e853 3f00 	ldrex	r3, [r3]
 800ac6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f043 0320 	orr.w	r3, r3, #32
 800ac72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac80:	61fb      	str	r3, [r7, #28]
 800ac82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	69b9      	ldr	r1, [r7, #24]
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e4      	bne.n	800ac5e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac94:	e007      	b.n	800aca6 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	699a      	ldr	r2, [r3, #24]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0208 	orr.w	r2, r2, #8
 800aca4:	619a      	str	r2, [r3, #24]
}
 800aca6:	bf00      	nop
 800aca8:	37b8      	adds	r7, #184	@ 0xb8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	effffffe 	.word	0xeffffffe
 800acb4:	58000c00 	.word	0x58000c00
 800acb8:	0800a435 	.word	0x0800a435

0800acbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d101      	bne.n	800ad0e <HAL_UARTEx_DisableFifoMode+0x16>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e027      	b.n	800ad5e <HAL_UARTEx_DisableFifoMode+0x66>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2224      	movs	r2, #36	@ 0x24
 800ad1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e02d      	b.n	800adde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2224      	movs	r2, #36	@ 0x24
 800ad8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 0201 	bic.w	r2, r2, #1
 800ada8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f850 	bl	800ae64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d101      	bne.n	800adfe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800adfa:	2302      	movs	r3, #2
 800adfc:	e02d      	b.n	800ae5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2224      	movs	r2, #36	@ 0x24
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0201 	bic.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f812 	bl	800ae64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d108      	bne.n	800ae86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae84:	e031      	b.n	800aeea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae86:	2310      	movs	r3, #16
 800ae88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae8a:	2310      	movs	r3, #16
 800ae8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	0e5b      	lsrs	r3, r3, #25
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	0f5b      	lsrs	r3, r3, #29
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	f003 0307 	and.w	r3, r3, #7
 800aeac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	7b3a      	ldrb	r2, [r7, #12]
 800aeb2:	4911      	ldr	r1, [pc, #68]	@ (800aef8 <UARTEx_SetNbDataToProcess+0x94>)
 800aeb4:	5c8a      	ldrb	r2, [r1, r2]
 800aeb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeba:	7b3a      	ldrb	r2, [r7, #12]
 800aebc:	490f      	ldr	r1, [pc, #60]	@ (800aefc <UARTEx_SetNbDataToProcess+0x98>)
 800aebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aec0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	7b7a      	ldrb	r2, [r7, #13]
 800aed0:	4909      	ldr	r1, [pc, #36]	@ (800aef8 <UARTEx_SetNbDataToProcess+0x94>)
 800aed2:	5c8a      	ldrb	r2, [r1, r2]
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aed8:	7b7a      	ldrb	r2, [r7, #13]
 800aeda:	4908      	ldr	r1, [pc, #32]	@ (800aefc <UARTEx_SetNbDataToProcess+0x98>)
 800aedc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aede:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aeea:	bf00      	nop
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	0800ddb0 	.word	0x0800ddb0
 800aefc:	0800ddb8 	.word	0x0800ddb8

0800af00 <__NVIC_SetPriority>:
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	6039      	str	r1, [r7, #0]
 800af0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800af0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af10:	2b00      	cmp	r3, #0
 800af12:	db0a      	blt.n	800af2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	b2da      	uxtb	r2, r3
 800af18:	490c      	ldr	r1, [pc, #48]	@ (800af4c <__NVIC_SetPriority+0x4c>)
 800af1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af1e:	0112      	lsls	r2, r2, #4
 800af20:	b2d2      	uxtb	r2, r2
 800af22:	440b      	add	r3, r1
 800af24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800af28:	e00a      	b.n	800af40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	4908      	ldr	r1, [pc, #32]	@ (800af50 <__NVIC_SetPriority+0x50>)
 800af30:	88fb      	ldrh	r3, [r7, #6]
 800af32:	f003 030f 	and.w	r3, r3, #15
 800af36:	3b04      	subs	r3, #4
 800af38:	0112      	lsls	r2, r2, #4
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	440b      	add	r3, r1
 800af3e:	761a      	strb	r2, [r3, #24]
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	e000e100 	.word	0xe000e100
 800af50:	e000ed00 	.word	0xe000ed00

0800af54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800af58:	4b05      	ldr	r3, [pc, #20]	@ (800af70 <SysTick_Handler+0x1c>)
 800af5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800af5c:	f001 fd46 	bl	800c9ec <xTaskGetSchedulerState>
 800af60:	4603      	mov	r3, r0
 800af62:	2b01      	cmp	r3, #1
 800af64:	d001      	beq.n	800af6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800af66:	f002 fb3f 	bl	800d5e8 <xPortSysTickHandler>
  }
}
 800af6a:	bf00      	nop
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	e000e010 	.word	0xe000e010

0800af74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af78:	2100      	movs	r1, #0
 800af7a:	f06f 0004 	mvn.w	r0, #4
 800af7e:	f7ff ffbf 	bl	800af00 <__NVIC_SetPriority>
#endif
}
 800af82:	bf00      	nop
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af8e:	f3ef 8305 	mrs	r3, IPSR
 800af92:	603b      	str	r3, [r7, #0]
  return(result);
 800af94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800af9a:	f06f 0305 	mvn.w	r3, #5
 800af9e:	607b      	str	r3, [r7, #4]
 800afa0:	e00c      	b.n	800afbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800afa2:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <osKernelInitialize+0x44>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800afaa:	4b08      	ldr	r3, [pc, #32]	@ (800afcc <osKernelInitialize+0x44>)
 800afac:	2201      	movs	r2, #1
 800afae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	607b      	str	r3, [r7, #4]
 800afb4:	e002      	b.n	800afbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800afbc:	687b      	ldr	r3, [r7, #4]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	24008970 	.word	0x24008970

0800afd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afd6:	f3ef 8305 	mrs	r3, IPSR
 800afda:	603b      	str	r3, [r7, #0]
  return(result);
 800afdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <osKernelStart+0x1a>
    stat = osErrorISR;
 800afe2:	f06f 0305 	mvn.w	r3, #5
 800afe6:	607b      	str	r3, [r7, #4]
 800afe8:	e010      	b.n	800b00c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800afea:	4b0b      	ldr	r3, [pc, #44]	@ (800b018 <osKernelStart+0x48>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d109      	bne.n	800b006 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aff2:	f7ff ffbf 	bl	800af74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aff6:	4b08      	ldr	r3, [pc, #32]	@ (800b018 <osKernelStart+0x48>)
 800aff8:	2202      	movs	r2, #2
 800affa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800affc:	f001 f892 	bl	800c124 <vTaskStartScheduler>
      stat = osOK;
 800b000:	2300      	movs	r3, #0
 800b002:	607b      	str	r3, [r7, #4]
 800b004:	e002      	b.n	800b00c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
 800b00a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b00c:	687b      	ldr	r3, [r7, #4]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	24008970 	.word	0x24008970

0800b01c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08e      	sub	sp, #56	@ 0x38
 800b020:	af04      	add	r7, sp, #16
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b02c:	f3ef 8305 	mrs	r3, IPSR
 800b030:	617b      	str	r3, [r7, #20]
  return(result);
 800b032:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b034:	2b00      	cmp	r3, #0
 800b036:	d17e      	bne.n	800b136 <osThreadNew+0x11a>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d07b      	beq.n	800b136 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b03e:	2380      	movs	r3, #128	@ 0x80
 800b040:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b042:	2318      	movs	r3, #24
 800b044:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b04a:	f04f 33ff 	mov.w	r3, #4294967295
 800b04e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d045      	beq.n	800b0e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <osThreadNew+0x48>
        name = attr->name;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d008      	beq.n	800b08a <osThreadNew+0x6e>
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2b38      	cmp	r3, #56	@ 0x38
 800b07c:	d805      	bhi.n	800b08a <osThreadNew+0x6e>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <osThreadNew+0x72>
        return (NULL);
 800b08a:	2300      	movs	r3, #0
 800b08c:	e054      	b.n	800b138 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	089b      	lsrs	r3, r3, #2
 800b09c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <osThreadNew+0xa8>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	2ba7      	cmp	r3, #167	@ 0xa7
 800b0ac:	d90a      	bls.n	800b0c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <osThreadNew+0xa8>
        mem = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	61bb      	str	r3, [r7, #24]
 800b0c2:	e010      	b.n	800b0e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10c      	bne.n	800b0e6 <osThreadNew+0xca>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d108      	bne.n	800b0e6 <osThreadNew+0xca>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d104      	bne.n	800b0e6 <osThreadNew+0xca>
          mem = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61bb      	str	r3, [r7, #24]
 800b0e0:	e001      	b.n	800b0e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d110      	bne.n	800b10e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0f4:	9202      	str	r2, [sp, #8]
 800b0f6:	9301      	str	r3, [sp, #4]
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6a3a      	ldr	r2, [r7, #32]
 800b100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 fe1a 	bl	800bd3c <xTaskCreateStatic>
 800b108:	4603      	mov	r3, r0
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	e013      	b.n	800b136 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d110      	bne.n	800b136 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	b29a      	uxth	r2, r3
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 fe68 	bl	800bdfc <xTaskCreate>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d001      	beq.n	800b136 <osThreadNew+0x11a>
            hTask = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b136:	693b      	ldr	r3, [r7, #16]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3728      	adds	r7, #40	@ 0x28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b148:	f3ef 8305 	mrs	r3, IPSR
 800b14c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b14e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <osDelay+0x1c>
    stat = osErrorISR;
 800b154:	f06f 0305 	mvn.w	r3, #5
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e007      	b.n	800b16c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 ffa6 	bl	800c0b8 <vTaskDelay>
    }
  }

  return (stat);
 800b16c:	68fb      	ldr	r3, [r7, #12]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
	...

0800b178 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4a07      	ldr	r2, [pc, #28]	@ (800b1a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	4a06      	ldr	r2, [pc, #24]	@ (800b1a8 <vApplicationGetIdleTaskMemory+0x30>)
 800b18e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2280      	movs	r2, #128	@ 0x80
 800b194:	601a      	str	r2, [r3, #0]
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	24008974 	.word	0x24008974
 800b1a8:	24008a1c 	.word	0x24008a1c

0800b1ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4a07      	ldr	r2, [pc, #28]	@ (800b1d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b1bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	4a06      	ldr	r2, [pc, #24]	@ (800b1dc <vApplicationGetTimerTaskMemory+0x30>)
 800b1c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b1ca:	601a      	str	r2, [r3, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	24008c1c 	.word	0x24008c1c
 800b1dc:	24008cc4 	.word	0x24008cc4

0800b1e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 0208 	add.w	r2, r3, #8
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f103 0208 	add.w	r2, r3, #8
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f103 0208 	add.w	r2, r3, #8
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b23a:	b480      	push	{r7}
 800b23c:	b085      	sub	sp, #20
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b282:	b480      	push	{r7}
 800b284:	b085      	sub	sp, #20
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d103      	bne.n	800b2a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	e00c      	b.n	800b2bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e002      	b.n	800b2b0 <vListInsert+0x2e>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d2f6      	bcs.n	800b2aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6892      	ldr	r2, [r2, #8]
 800b30a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6852      	ldr	r2, [r2, #4]
 800b314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d103      	bne.n	800b328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689a      	ldr	r2, [r3, #8]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	1e5a      	subs	r2, r3, #1
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10b      	bne.n	800b374 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b36e:	bf00      	nop
 800b370:	bf00      	nop
 800b372:	e7fd      	b.n	800b370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b374:	f002 f8a8 	bl	800d4c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b380:	68f9      	ldr	r1, [r7, #12]
 800b382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b384:	fb01 f303 	mul.w	r3, r1, r3
 800b388:	441a      	add	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	68f9      	ldr	r1, [r7, #12]
 800b3a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b3aa:	fb01 f303 	mul.w	r3, r1, r3
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	22ff      	movs	r2, #255	@ 0xff
 800b3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	22ff      	movs	r2, #255	@ 0xff
 800b3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d114      	bne.n	800b3f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d01a      	beq.n	800b408 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3310      	adds	r3, #16
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f001 f942 	bl	800c660 <xTaskRemoveFromEventList>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d012      	beq.n	800b408 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b418 <xQueueGenericReset+0xd0>)
 800b3e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	e009      	b.n	800b408 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3310      	adds	r3, #16
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff fef1 	bl	800b1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3324      	adds	r3, #36	@ 0x24
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff feec 	bl	800b1e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b408:	f002 f890 	bl	800d52c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b40c:	2301      	movs	r3, #1
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08e      	sub	sp, #56	@ 0x38
 800b420:	af02      	add	r7, sp, #8
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <xQueueGenericCreateStatic+0x56>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <xQueueGenericCreateStatic+0x5a>
 800b472:	2301      	movs	r3, #1
 800b474:	e000      	b.n	800b478 <xQueueGenericCreateStatic+0x5c>
 800b476:	2300      	movs	r3, #0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10b      	bne.n	800b494 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	623b      	str	r3, [r7, #32]
}
 800b48e:	bf00      	nop
 800b490:	bf00      	nop
 800b492:	e7fd      	b.n	800b490 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <xQueueGenericCreateStatic+0x84>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <xQueueGenericCreateStatic+0x88>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <xQueueGenericCreateStatic+0x8a>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10b      	bne.n	800b4c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	61fb      	str	r3, [r7, #28]
}
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	e7fd      	b.n	800b4be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4c2:	2350      	movs	r3, #80	@ 0x50
 800b4c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b50      	cmp	r3, #80	@ 0x50
 800b4ca:	d00b      	beq.n	800b4e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	61bb      	str	r3, [r7, #24]
}
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	e7fd      	b.n	800b4e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4613      	mov	r3, r2
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 f805 	bl	800b516 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b50e:	4618      	mov	r0, r3
 800b510:	3730      	adds	r7, #48	@ 0x30
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	607a      	str	r2, [r7, #4]
 800b522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d103      	bne.n	800b532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	e002      	b.n	800b538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b544:	2101      	movs	r1, #1
 800b546:	69b8      	ldr	r0, [r7, #24]
 800b548:	f7ff fefe 	bl	800b348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	78fa      	ldrb	r2, [r7, #3]
 800b550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b554:	bf00      	nop
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	@ 0x38
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b56a:	2300      	movs	r3, #0
 800b56c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <xQueueGenericSend+0x34>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d103      	bne.n	800b59e <xQueueGenericSend+0x42>
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d101      	bne.n	800b5a2 <xQueueGenericSend+0x46>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <xQueueGenericSend+0x48>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10b      	bne.n	800b5c0 <xQueueGenericSend+0x64>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	e7fd      	b.n	800b5bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d103      	bne.n	800b5ce <xQueueGenericSend+0x72>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d101      	bne.n	800b5d2 <xQueueGenericSend+0x76>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <xQueueGenericSend+0x78>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <xQueueGenericSend+0x94>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	623b      	str	r3, [r7, #32]
}
 800b5ea:	bf00      	nop
 800b5ec:	bf00      	nop
 800b5ee:	e7fd      	b.n	800b5ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5f0:	f001 f9fc 	bl	800c9ec <xTaskGetSchedulerState>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <xQueueGenericSend+0xa4>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <xQueueGenericSend+0xa8>
 800b600:	2301      	movs	r3, #1
 800b602:	e000      	b.n	800b606 <xQueueGenericSend+0xaa>
 800b604:	2300      	movs	r3, #0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10b      	bne.n	800b622 <xQueueGenericSend+0xc6>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	61fb      	str	r3, [r7, #28]
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	e7fd      	b.n	800b61e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b622:	f001 ff51 	bl	800d4c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b62e:	429a      	cmp	r2, r3
 800b630:	d302      	bcc.n	800b638 <xQueueGenericSend+0xdc>
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b02      	cmp	r3, #2
 800b636:	d129      	bne.n	800b68c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b63e:	f000 fa0f 	bl	800ba60 <prvCopyDataToQueue>
 800b642:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d010      	beq.n	800b66e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64e:	3324      	adds	r3, #36	@ 0x24
 800b650:	4618      	mov	r0, r3
 800b652:	f001 f805 	bl	800c660 <xTaskRemoveFromEventList>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d013      	beq.n	800b684 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b65c:	4b3f      	ldr	r3, [pc, #252]	@ (800b75c <xQueueGenericSend+0x200>)
 800b65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	e00a      	b.n	800b684 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b674:	4b39      	ldr	r3, [pc, #228]	@ (800b75c <xQueueGenericSend+0x200>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b684:	f001 ff52 	bl	800d52c <vPortExitCritical>
				return pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	e063      	b.n	800b754 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d103      	bne.n	800b69a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b692:	f001 ff4b 	bl	800d52c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b696:	2300      	movs	r3, #0
 800b698:	e05c      	b.n	800b754 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 f83f 	bl	800c728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6ae:	f001 ff3d 	bl	800d52c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6b2:	f000 fda7 	bl	800c204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6b6:	f001 ff07 	bl	800d4c8 <vPortEnterCritical>
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6c0:	b25b      	sxtb	r3, r3
 800b6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c6:	d103      	bne.n	800b6d0 <xQueueGenericSend+0x174>
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6d6:	b25b      	sxtb	r3, r3
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d103      	bne.n	800b6e6 <xQueueGenericSend+0x18a>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6e6:	f001 ff21 	bl	800d52c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6ea:	1d3a      	adds	r2, r7, #4
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 f82e 	bl	800c754 <xTaskCheckForTimeOut>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d124      	bne.n	800b748 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b700:	f000 faa6 	bl	800bc50 <prvIsQueueFull>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d018      	beq.n	800b73c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	3310      	adds	r3, #16
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f000 ff52 	bl	800c5bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b71a:	f000 fa31 	bl	800bb80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b71e:	f000 fd7f 	bl	800c220 <xTaskResumeAll>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	f47f af7c 	bne.w	800b622 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b72a:	4b0c      	ldr	r3, [pc, #48]	@ (800b75c <xQueueGenericSend+0x200>)
 800b72c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	e772      	b.n	800b622 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b73c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b73e:	f000 fa1f 	bl	800bb80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b742:	f000 fd6d 	bl	800c220 <xTaskResumeAll>
 800b746:	e76c      	b.n	800b622 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b74a:	f000 fa19 	bl	800bb80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b74e:	f000 fd67 	bl	800c220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b754:	4618      	mov	r0, r3
 800b756:	3738      	adds	r7, #56	@ 0x38
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	e000ed04 	.word	0xe000ed04

0800b760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b090      	sub	sp, #64	@ 0x40
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10b      	bne.n	800b790 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b78a:	bf00      	nop
 800b78c:	bf00      	nop
 800b78e:	e7fd      	b.n	800b78c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <xQueueGenericSendFromISR+0x3e>
 800b796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <xQueueGenericSendFromISR+0x42>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGenericSendFromISR+0x44>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	e7fd      	b.n	800b7bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d103      	bne.n	800b7ce <xQueueGenericSendFromISR+0x6e>
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericSendFromISR+0x72>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericSendFromISR+0x74>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10b      	bne.n	800b7f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	623b      	str	r3, [r7, #32]
}
 800b7ea:	bf00      	nop
 800b7ec:	bf00      	nop
 800b7ee:	e7fd      	b.n	800b7ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7f0:	f001 ff4a 	bl	800d688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7f4:	f3ef 8211 	mrs	r2, BASEPRI
 800b7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	61fa      	str	r2, [r7, #28]
 800b80a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b80c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b818:	429a      	cmp	r2, r3
 800b81a:	d302      	bcc.n	800b822 <xQueueGenericSendFromISR+0xc2>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d12f      	bne.n	800b882 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b830:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b838:	f000 f912 	bl	800ba60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b83c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b844:	d112      	bne.n	800b86c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d016      	beq.n	800b87c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b850:	3324      	adds	r3, #36	@ 0x24
 800b852:	4618      	mov	r0, r3
 800b854:	f000 ff04 	bl	800c660 <xTaskRemoveFromEventList>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00e      	beq.n	800b87c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	e007      	b.n	800b87c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b86c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b870:	3301      	adds	r3, #1
 800b872:	b2db      	uxtb	r3, r3
 800b874:	b25a      	sxtb	r2, r3
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b87c:	2301      	movs	r3, #1
 800b87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b880:	e001      	b.n	800b886 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b882:	2300      	movs	r3, #0
 800b884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b888:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b890:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b894:	4618      	mov	r0, r3
 800b896:	3740      	adds	r7, #64	@ 0x40
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08c      	sub	sp, #48	@ 0x30
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10b      	bne.n	800b8ce <xQueueReceive+0x32>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	623b      	str	r3, [r7, #32]
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	e7fd      	b.n	800b8ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <xQueueReceive+0x40>
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <xQueueReceive+0x44>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e000      	b.n	800b8e2 <xQueueReceive+0x46>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d10b      	bne.n	800b8fe <xQueueReceive+0x62>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	61fb      	str	r3, [r7, #28]
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	e7fd      	b.n	800b8fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8fe:	f001 f875 	bl	800c9ec <xTaskGetSchedulerState>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <xQueueReceive+0x72>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <xQueueReceive+0x76>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <xQueueReceive+0x78>
 800b912:	2300      	movs	r3, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10b      	bne.n	800b930 <xQueueReceive+0x94>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	61bb      	str	r3, [r7, #24]
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	e7fd      	b.n	800b92c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b930:	f001 fdca 	bl	800d4c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01f      	beq.n	800b980 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b940:	68b9      	ldr	r1, [r7, #8]
 800b942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b944:	f000 f8f6 	bl	800bb34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	1e5a      	subs	r2, r3, #1
 800b94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00f      	beq.n	800b978 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	3310      	adds	r3, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fe7f 	bl	800c660 <xTaskRemoveFromEventList>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d007      	beq.n	800b978 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b968:	4b3c      	ldr	r3, [pc, #240]	@ (800ba5c <xQueueReceive+0x1c0>)
 800b96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b978:	f001 fdd8 	bl	800d52c <vPortExitCritical>
				return pdPASS;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e069      	b.n	800ba54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b986:	f001 fdd1 	bl	800d52c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e062      	b.n	800ba54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b994:	f107 0310 	add.w	r3, r7, #16
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 fec5 	bl	800c728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9a2:	f001 fdc3 	bl	800d52c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9a6:	f000 fc2d 	bl	800c204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9aa:	f001 fd8d 	bl	800d4c8 <vPortEnterCritical>
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ba:	d103      	bne.n	800b9c4 <xQueueReceive+0x128>
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d0:	d103      	bne.n	800b9da <xQueueReceive+0x13e>
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9da:	f001 fda7 	bl	800d52c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9de:	1d3a      	adds	r2, r7, #4
 800b9e0:	f107 0310 	add.w	r3, r7, #16
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 feb4 	bl	800c754 <xTaskCheckForTimeOut>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d123      	bne.n	800ba3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9f4:	f000 f916 	bl	800bc24 <prvIsQueueEmpty>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d017      	beq.n	800ba2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	3324      	adds	r3, #36	@ 0x24
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 fdd8 	bl	800c5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba0e:	f000 f8b7 	bl	800bb80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba12:	f000 fc05 	bl	800c220 <xTaskResumeAll>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d189      	bne.n	800b930 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba5c <xQueueReceive+0x1c0>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	e780      	b.n	800b930 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba30:	f000 f8a6 	bl	800bb80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba34:	f000 fbf4 	bl	800c220 <xTaskResumeAll>
 800ba38:	e77a      	b.n	800b930 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba3c:	f000 f8a0 	bl	800bb80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba40:	f000 fbee 	bl	800c220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba46:	f000 f8ed 	bl	800bc24 <prvIsQueueEmpty>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f43f af6f 	beq.w	800b930 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3730      	adds	r7, #48	@ 0x30
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	e000ed04 	.word	0xe000ed04

0800ba60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10d      	bne.n	800ba9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d14d      	bne.n	800bb22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 ffcc 	bl	800ca28 <xTaskPriorityDisinherit>
 800ba90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	609a      	str	r2, [r3, #8]
 800ba98:	e043      	b.n	800bb22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d119      	bne.n	800bad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6858      	ldr	r0, [r3, #4]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa8:	461a      	mov	r2, r3
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	f002 f8b4 	bl	800dc18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab8:	441a      	add	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d32b      	bcc.n	800bb22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	605a      	str	r2, [r3, #4]
 800bad2:	e026      	b.n	800bb22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	68d8      	ldr	r0, [r3, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800badc:	461a      	mov	r2, r3
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	f002 f89a 	bl	800dc18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baec:	425b      	negs	r3, r3
 800baee:	441a      	add	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	68da      	ldr	r2, [r3, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d207      	bcs.n	800bb10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb08:	425b      	negs	r3, r3
 800bb0a:	441a      	add	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d105      	bne.n	800bb22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bb2a:	697b      	ldr	r3, [r7, #20]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d018      	beq.n	800bb78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4e:	441a      	add	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68da      	ldr	r2, [r3, #12]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d303      	bcc.n	800bb68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68d9      	ldr	r1, [r3, #12]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb70:	461a      	mov	r2, r3
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	f002 f850 	bl	800dc18 <memcpy>
	}
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb88:	f001 fc9e 	bl	800d4c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb94:	e011      	b.n	800bbba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d012      	beq.n	800bbc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3324      	adds	r3, #36	@ 0x24
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fd5c 	bl	800c660 <xTaskRemoveFromEventList>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbae:	f000 fe35 	bl	800c81c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dce9      	bgt.n	800bb96 <prvUnlockQueue+0x16>
 800bbc2:	e000      	b.n	800bbc6 <prvUnlockQueue+0x46>
					break;
 800bbc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	22ff      	movs	r2, #255	@ 0xff
 800bbca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bbce:	f001 fcad 	bl	800d52c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbd2:	f001 fc79 	bl	800d4c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbde:	e011      	b.n	800bc04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d012      	beq.n	800bc0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3310      	adds	r3, #16
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fd37 	bl	800c660 <xTaskRemoveFromEventList>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbf8:	f000 fe10 	bl	800c81c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dce9      	bgt.n	800bbe0 <prvUnlockQueue+0x60>
 800bc0c:	e000      	b.n	800bc10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	22ff      	movs	r2, #255	@ 0xff
 800bc14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bc18:	f001 fc88 	bl	800d52c <vPortExitCritical>
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc2c:	f001 fc4c 	bl	800d4c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	e001      	b.n	800bc42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc42:	f001 fc73 	bl	800d52c <vPortExitCritical>

	return xReturn;
 800bc46:	68fb      	ldr	r3, [r7, #12]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc58:	f001 fc36 	bl	800d4c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d102      	bne.n	800bc6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e001      	b.n	800bc72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc72:	f001 fc5b 	bl	800d52c <vPortExitCritical>

	return xReturn;
 800bc76:	68fb      	ldr	r3, [r7, #12]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	e014      	b.n	800bcba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc90:	4a0f      	ldr	r2, [pc, #60]	@ (800bcd0 <vQueueAddToRegistry+0x50>)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10b      	bne.n	800bcb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc9c:	490c      	ldr	r1, [pc, #48]	@ (800bcd0 <vQueueAddToRegistry+0x50>)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bca6:	4a0a      	ldr	r2, [pc, #40]	@ (800bcd0 <vQueueAddToRegistry+0x50>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	4413      	add	r3, r2
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcb2:	e006      	b.n	800bcc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b07      	cmp	r3, #7
 800bcbe:	d9e7      	bls.n	800bc90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	240090c4 	.word	0x240090c4

0800bcd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bce4:	f001 fbf0 	bl	800d4c8 <vPortEnterCritical>
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcee:	b25b      	sxtb	r3, r3
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d103      	bne.n	800bcfe <vQueueWaitForMessageRestricted+0x2a>
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd04:	b25b      	sxtb	r3, r3
 800bd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd0a:	d103      	bne.n	800bd14 <vQueueWaitForMessageRestricted+0x40>
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd14:	f001 fc0a 	bl	800d52c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d106      	bne.n	800bd2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	3324      	adds	r3, #36	@ 0x24
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fc6d 	bl	800c608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd2e:	6978      	ldr	r0, [r7, #20]
 800bd30:	f7ff ff26 	bl	800bb80 <prvUnlockQueue>
	}
 800bd34:	bf00      	nop
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08e      	sub	sp, #56	@ 0x38
 800bd40:	af04      	add	r7, sp, #16
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10b      	bne.n	800bd68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	623b      	str	r3, [r7, #32]
}
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	61fb      	str	r3, [r7, #28]
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	e7fd      	b.n	800bd82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd86:	23a8      	movs	r3, #168	@ 0xa8
 800bd88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2ba8      	cmp	r3, #168	@ 0xa8
 800bd8e:	d00b      	beq.n	800bda8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	61bb      	str	r3, [r7, #24]
}
 800bda2:	bf00      	nop
 800bda4:	bf00      	nop
 800bda6:	e7fd      	b.n	800bda4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bda8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01e      	beq.n	800bdee <xTaskCreateStatic+0xb2>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01b      	beq.n	800bdee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	f107 0314 	add.w	r3, r7, #20
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	68b9      	ldr	r1, [r7, #8]
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 f851 	bl	800be88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bde6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bde8:	f000 f8f6 	bl	800bfd8 <prvAddNewTaskToReadyList>
 800bdec:	e001      	b.n	800bdf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bdf2:	697b      	ldr	r3, [r7, #20]
	}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3728      	adds	r7, #40	@ 0x28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08c      	sub	sp, #48	@ 0x30
 800be00:	af04      	add	r7, sp, #16
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	603b      	str	r3, [r7, #0]
 800be08:	4613      	mov	r3, r2
 800be0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be0c:	88fb      	ldrh	r3, [r7, #6]
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4618      	mov	r0, r3
 800be12:	f001 fc7b 	bl	800d70c <pvPortMalloc>
 800be16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00e      	beq.n	800be3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be1e:	20a8      	movs	r0, #168	@ 0xa8
 800be20:	f001 fc74 	bl	800d70c <pvPortMalloc>
 800be24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	631a      	str	r2, [r3, #48]	@ 0x30
 800be32:	e005      	b.n	800be40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be34:	6978      	ldr	r0, [r7, #20]
 800be36:	f001 fd37 	bl	800d8a8 <vPortFree>
 800be3a:	e001      	b.n	800be40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d017      	beq.n	800be76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be4e:	88fa      	ldrh	r2, [r7, #6]
 800be50:	2300      	movs	r3, #0
 800be52:	9303      	str	r3, [sp, #12]
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	9302      	str	r3, [sp, #8]
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	68b9      	ldr	r1, [r7, #8]
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 f80f 	bl	800be88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be6a:	69f8      	ldr	r0, [r7, #28]
 800be6c:	f000 f8b4 	bl	800bfd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be70:	2301      	movs	r3, #1
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	e002      	b.n	800be7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be76:	f04f 33ff 	mov.w	r3, #4294967295
 800be7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be7c:	69bb      	ldr	r3, [r7, #24]
	}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b088      	sub	sp, #32
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	461a      	mov	r2, r3
 800bea0:	21a5      	movs	r1, #165	@ 0xa5
 800bea2:	f001 fe2d 	bl	800db00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800beb0:	440b      	add	r3, r1
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	f023 0307 	bic.w	r3, r3, #7
 800bebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	f003 0307 	and.w	r3, r3, #7
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	617b      	str	r3, [r7, #20]
}
 800bedc:	bf00      	nop
 800bede:	bf00      	nop
 800bee0:	e7fd      	b.n	800bede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01f      	beq.n	800bf28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bee8:	2300      	movs	r3, #0
 800beea:	61fb      	str	r3, [r7, #28]
 800beec:	e012      	b.n	800bf14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	4413      	add	r3, r2
 800bef4:	7819      	ldrb	r1, [r3, #0]
 800bef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	4413      	add	r3, r2
 800befc:	3334      	adds	r3, #52	@ 0x34
 800befe:	460a      	mov	r2, r1
 800bf00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	4413      	add	r3, r2
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d006      	beq.n	800bf1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	3301      	adds	r3, #1
 800bf12:	61fb      	str	r3, [r7, #28]
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2b0f      	cmp	r3, #15
 800bf18:	d9e9      	bls.n	800beee <prvInitialiseNewTask+0x66>
 800bf1a:	e000      	b.n	800bf1e <prvInitialiseNewTask+0x96>
			{
				break;
 800bf1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf26:	e003      	b.n	800bf30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf32:	2b37      	cmp	r3, #55	@ 0x37
 800bf34:	d901      	bls.n	800bf3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf36:	2337      	movs	r3, #55	@ 0x37
 800bf38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	2200      	movs	r2, #0
 800bf4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff f965 	bl	800b220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	3318      	adds	r3, #24
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff f960 	bl	800b220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	3354      	adds	r3, #84	@ 0x54
 800bf8a:	224c      	movs	r2, #76	@ 0x4c
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 fdb6 	bl	800db00 <memset>
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	4a0d      	ldr	r2, [pc, #52]	@ (800bfcc <prvInitialiseNewTask+0x144>)
 800bf98:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	4a0c      	ldr	r2, [pc, #48]	@ (800bfd0 <prvInitialiseNewTask+0x148>)
 800bf9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa2:	4a0c      	ldr	r2, [pc, #48]	@ (800bfd4 <prvInitialiseNewTask+0x14c>)
 800bfa4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	69b8      	ldr	r0, [r7, #24]
 800bfac:	f001 f95a 	bl	800d264 <pxPortInitialiseStack>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	2400d35c 	.word	0x2400d35c
 800bfd0:	2400d3c4 	.word	0x2400d3c4
 800bfd4:	2400d42c 	.word	0x2400d42c

0800bfd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfe0:	f001 fa72 	bl	800d4c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfe4:	4b2d      	ldr	r3, [pc, #180]	@ (800c09c <prvAddNewTaskToReadyList+0xc4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	4a2c      	ldr	r2, [pc, #176]	@ (800c09c <prvAddNewTaskToReadyList+0xc4>)
 800bfec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfee:	4b2c      	ldr	r3, [pc, #176]	@ (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d109      	bne.n	800c00a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bff6:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bffc:	4b27      	ldr	r3, [pc, #156]	@ (800c09c <prvAddNewTaskToReadyList+0xc4>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d110      	bne.n	800c026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c004:	f000 fc2e 	bl	800c864 <prvInitialiseTaskLists>
 800c008:	e00d      	b.n	800c026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c00a:	4b26      	ldr	r3, [pc, #152]	@ (800c0a4 <prvAddNewTaskToReadyList+0xcc>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d109      	bne.n	800c026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c012:	4b23      	ldr	r3, [pc, #140]	@ (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d802      	bhi.n	800c026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c020:	4a1f      	ldr	r2, [pc, #124]	@ (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c026:	4b20      	ldr	r3, [pc, #128]	@ (800c0a8 <prvAddNewTaskToReadyList+0xd0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3301      	adds	r3, #1
 800c02c:	4a1e      	ldr	r2, [pc, #120]	@ (800c0a8 <prvAddNewTaskToReadyList+0xd0>)
 800c02e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c030:	4b1d      	ldr	r3, [pc, #116]	@ (800c0a8 <prvAddNewTaskToReadyList+0xd0>)
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c03c:	4b1b      	ldr	r3, [pc, #108]	@ (800c0ac <prvAddNewTaskToReadyList+0xd4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d903      	bls.n	800c04c <prvAddNewTaskToReadyList+0x74>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c048:	4a18      	ldr	r2, [pc, #96]	@ (800c0ac <prvAddNewTaskToReadyList+0xd4>)
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4a15      	ldr	r2, [pc, #84]	@ (800c0b0 <prvAddNewTaskToReadyList+0xd8>)
 800c05a:	441a      	add	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3304      	adds	r3, #4
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f7ff f8e9 	bl	800b23a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c068:	f001 fa60 	bl	800d52c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c06c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <prvAddNewTaskToReadyList+0xcc>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00e      	beq.n	800c092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c074:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a0 <prvAddNewTaskToReadyList+0xc8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07e:	429a      	cmp	r2, r3
 800c080:	d207      	bcs.n	800c092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c082:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b4 <prvAddNewTaskToReadyList+0xdc>)
 800c084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c092:	bf00      	nop
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	240095d8 	.word	0x240095d8
 800c0a0:	24009104 	.word	0x24009104
 800c0a4:	240095e4 	.word	0x240095e4
 800c0a8:	240095f4 	.word	0x240095f4
 800c0ac:	240095e0 	.word	0x240095e0
 800c0b0:	24009108 	.word	0x24009108
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d018      	beq.n	800c0fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0ca:	4b14      	ldr	r3, [pc, #80]	@ (800c11c <vTaskDelay+0x64>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <vTaskDelay+0x32>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	60bb      	str	r3, [r7, #8]
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	e7fd      	b.n	800c0e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0ea:	f000 f88b 	bl	800c204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fd09 	bl	800cb08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0f6:	f000 f893 	bl	800c220 <xTaskResumeAll>
 800c0fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d107      	bne.n	800c112 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c102:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <vTaskDelay+0x68>)
 800c104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c112:	bf00      	nop
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	24009600 	.word	0x24009600
 800c120:	e000ed04 	.word	0xe000ed04

0800c124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b08a      	sub	sp, #40	@ 0x28
 800c128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c132:	463a      	mov	r2, r7
 800c134:	1d39      	adds	r1, r7, #4
 800c136:	f107 0308 	add.w	r3, r7, #8
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff f81c 	bl	800b178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	9202      	str	r2, [sp, #8]
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	2300      	movs	r3, #0
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	2300      	movs	r3, #0
 800c150:	460a      	mov	r2, r1
 800c152:	4924      	ldr	r1, [pc, #144]	@ (800c1e4 <vTaskStartScheduler+0xc0>)
 800c154:	4824      	ldr	r0, [pc, #144]	@ (800c1e8 <vTaskStartScheduler+0xc4>)
 800c156:	f7ff fdf1 	bl	800bd3c <xTaskCreateStatic>
 800c15a:	4603      	mov	r3, r0
 800c15c:	4a23      	ldr	r2, [pc, #140]	@ (800c1ec <vTaskStartScheduler+0xc8>)
 800c15e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c160:	4b22      	ldr	r3, [pc, #136]	@ (800c1ec <vTaskStartScheduler+0xc8>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c168:	2301      	movs	r3, #1
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	e001      	b.n	800c172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c16e:	2300      	movs	r3, #0
 800c170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d102      	bne.n	800c17e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c178:	f000 fd1a 	bl	800cbb0 <xTimerCreateTimerTask>
 800c17c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d11b      	bne.n	800c1bc <vTaskStartScheduler+0x98>
	__asm volatile
 800c184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	613b      	str	r3, [r7, #16]
}
 800c196:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c198:	4b15      	ldr	r3, [pc, #84]	@ (800c1f0 <vTaskStartScheduler+0xcc>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3354      	adds	r3, #84	@ 0x54
 800c19e:	4a15      	ldr	r2, [pc, #84]	@ (800c1f4 <vTaskStartScheduler+0xd0>)
 800c1a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1a2:	4b15      	ldr	r3, [pc, #84]	@ (800c1f8 <vTaskStartScheduler+0xd4>)
 800c1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1aa:	4b14      	ldr	r3, [pc, #80]	@ (800c1fc <vTaskStartScheduler+0xd8>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1b0:	4b13      	ldr	r3, [pc, #76]	@ (800c200 <vTaskStartScheduler+0xdc>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1b6:	f001 f8e3 	bl	800d380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1ba:	e00f      	b.n	800c1dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c2:	d10b      	bne.n	800c1dc <vTaskStartScheduler+0xb8>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	60fb      	str	r3, [r7, #12]
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <vTaskStartScheduler+0xb4>
}
 800c1dc:	bf00      	nop
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	0800dd04 	.word	0x0800dd04
 800c1e8:	0800c835 	.word	0x0800c835
 800c1ec:	240095fc 	.word	0x240095fc
 800c1f0:	24009104 	.word	0x24009104
 800c1f4:	24000014 	.word	0x24000014
 800c1f8:	240095f8 	.word	0x240095f8
 800c1fc:	240095e4 	.word	0x240095e4
 800c200:	240095dc 	.word	0x240095dc

0800c204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c208:	4b04      	ldr	r3, [pc, #16]	@ (800c21c <vTaskSuspendAll+0x18>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3301      	adds	r3, #1
 800c20e:	4a03      	ldr	r2, [pc, #12]	@ (800c21c <vTaskSuspendAll+0x18>)
 800c210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c212:	bf00      	nop
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	24009600 	.word	0x24009600

0800c220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c22e:	4b42      	ldr	r3, [pc, #264]	@ (800c338 <xTaskResumeAll+0x118>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10b      	bne.n	800c24e <xTaskResumeAll+0x2e>
	__asm volatile
 800c236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23a:	f383 8811 	msr	BASEPRI, r3
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	603b      	str	r3, [r7, #0]
}
 800c248:	bf00      	nop
 800c24a:	bf00      	nop
 800c24c:	e7fd      	b.n	800c24a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c24e:	f001 f93b 	bl	800d4c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c252:	4b39      	ldr	r3, [pc, #228]	@ (800c338 <xTaskResumeAll+0x118>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3b01      	subs	r3, #1
 800c258:	4a37      	ldr	r2, [pc, #220]	@ (800c338 <xTaskResumeAll+0x118>)
 800c25a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c25c:	4b36      	ldr	r3, [pc, #216]	@ (800c338 <xTaskResumeAll+0x118>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d162      	bne.n	800c32a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c264:	4b35      	ldr	r3, [pc, #212]	@ (800c33c <xTaskResumeAll+0x11c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d05e      	beq.n	800c32a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c26c:	e02f      	b.n	800c2ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26e:	4b34      	ldr	r3, [pc, #208]	@ (800c340 <xTaskResumeAll+0x120>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3318      	adds	r3, #24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff f83a 	bl	800b2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3304      	adds	r3, #4
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff f835 	bl	800b2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c28e:	4b2d      	ldr	r3, [pc, #180]	@ (800c344 <xTaskResumeAll+0x124>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d903      	bls.n	800c29e <xTaskResumeAll+0x7e>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29a:	4a2a      	ldr	r2, [pc, #168]	@ (800c344 <xTaskResumeAll+0x124>)
 800c29c:	6013      	str	r3, [r2, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4a27      	ldr	r2, [pc, #156]	@ (800c348 <xTaskResumeAll+0x128>)
 800c2ac:	441a      	add	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	f7fe ffc0 	bl	800b23a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2be:	4b23      	ldr	r3, [pc, #140]	@ (800c34c <xTaskResumeAll+0x12c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c2c8:	4b21      	ldr	r3, [pc, #132]	@ (800c350 <xTaskResumeAll+0x130>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c340 <xTaskResumeAll+0x120>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1cb      	bne.n	800c26e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2dc:	f000 fb66 	bl	800c9ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2e0:	4b1c      	ldr	r3, [pc, #112]	@ (800c354 <xTaskResumeAll+0x134>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d010      	beq.n	800c30e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2ec:	f000 f846 	bl	800c37c <xTaskIncrementTick>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d002      	beq.n	800c2fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c2f6:	4b16      	ldr	r3, [pc, #88]	@ (800c350 <xTaskResumeAll+0x130>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1f1      	bne.n	800c2ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c308:	4b12      	ldr	r3, [pc, #72]	@ (800c354 <xTaskResumeAll+0x134>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c30e:	4b10      	ldr	r3, [pc, #64]	@ (800c350 <xTaskResumeAll+0x130>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c316:	2301      	movs	r3, #1
 800c318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c31a:	4b0f      	ldr	r3, [pc, #60]	@ (800c358 <xTaskResumeAll+0x138>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c32a:	f001 f8ff 	bl	800d52c <vPortExitCritical>

	return xAlreadyYielded;
 800c32e:	68bb      	ldr	r3, [r7, #8]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	24009600 	.word	0x24009600
 800c33c:	240095d8 	.word	0x240095d8
 800c340:	24009598 	.word	0x24009598
 800c344:	240095e0 	.word	0x240095e0
 800c348:	24009108 	.word	0x24009108
 800c34c:	24009104 	.word	0x24009104
 800c350:	240095ec 	.word	0x240095ec
 800c354:	240095e8 	.word	0x240095e8
 800c358:	e000ed04 	.word	0xe000ed04

0800c35c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c362:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <xTaskGetTickCount+0x1c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c368:	687b      	ldr	r3, [r7, #4]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	240095dc 	.word	0x240095dc

0800c37c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c386:	4b4f      	ldr	r3, [pc, #316]	@ (800c4c4 <xTaskIncrementTick+0x148>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f040 8090 	bne.w	800c4b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c390:	4b4d      	ldr	r3, [pc, #308]	@ (800c4c8 <xTaskIncrementTick+0x14c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3301      	adds	r3, #1
 800c396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c398:	4a4b      	ldr	r2, [pc, #300]	@ (800c4c8 <xTaskIncrementTick+0x14c>)
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d121      	bne.n	800c3e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3a4:	4b49      	ldr	r3, [pc, #292]	@ (800c4cc <xTaskIncrementTick+0x150>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	603b      	str	r3, [r7, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <xTaskIncrementTick+0x46>
 800c3c6:	4b41      	ldr	r3, [pc, #260]	@ (800c4cc <xTaskIncrementTick+0x150>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	4b40      	ldr	r3, [pc, #256]	@ (800c4d0 <xTaskIncrementTick+0x154>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a3e      	ldr	r2, [pc, #248]	@ (800c4cc <xTaskIncrementTick+0x150>)
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	4a3e      	ldr	r2, [pc, #248]	@ (800c4d0 <xTaskIncrementTick+0x154>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6013      	str	r3, [r2, #0]
 800c3da:	4b3e      	ldr	r3, [pc, #248]	@ (800c4d4 <xTaskIncrementTick+0x158>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	4a3c      	ldr	r2, [pc, #240]	@ (800c4d4 <xTaskIncrementTick+0x158>)
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	f000 fae2 	bl	800c9ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c4d8 <xTaskIncrementTick+0x15c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d349      	bcc.n	800c486 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3f2:	4b36      	ldr	r3, [pc, #216]	@ (800c4cc <xTaskIncrementTick+0x150>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d104      	bne.n	800c406 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3fc:	4b36      	ldr	r3, [pc, #216]	@ (800c4d8 <xTaskIncrementTick+0x15c>)
 800c3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c402:	601a      	str	r2, [r3, #0]
					break;
 800c404:	e03f      	b.n	800c486 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c406:	4b31      	ldr	r3, [pc, #196]	@ (800c4cc <xTaskIncrementTick+0x150>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d203      	bcs.n	800c426 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c41e:	4a2e      	ldr	r2, [pc, #184]	@ (800c4d8 <xTaskIncrementTick+0x15c>)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c424:	e02f      	b.n	800c486 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	3304      	adds	r3, #4
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe ff62 	bl	800b2f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	3318      	adds	r3, #24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe ff59 	bl	800b2f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c446:	4b25      	ldr	r3, [pc, #148]	@ (800c4dc <xTaskIncrementTick+0x160>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d903      	bls.n	800c456 <xTaskIncrementTick+0xda>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c452:	4a22      	ldr	r2, [pc, #136]	@ (800c4dc <xTaskIncrementTick+0x160>)
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c45a:	4613      	mov	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4a1f      	ldr	r2, [pc, #124]	@ (800c4e0 <xTaskIncrementTick+0x164>)
 800c464:	441a      	add	r2, r3
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	3304      	adds	r3, #4
 800c46a:	4619      	mov	r1, r3
 800c46c:	4610      	mov	r0, r2
 800c46e:	f7fe fee4 	bl	800b23a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c476:	4b1b      	ldr	r3, [pc, #108]	@ (800c4e4 <xTaskIncrementTick+0x168>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d3b8      	bcc.n	800c3f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c480:	2301      	movs	r3, #1
 800c482:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c484:	e7b5      	b.n	800c3f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c486:	4b17      	ldr	r3, [pc, #92]	@ (800c4e4 <xTaskIncrementTick+0x168>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48c:	4914      	ldr	r1, [pc, #80]	@ (800c4e0 <xTaskIncrementTick+0x164>)
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	440b      	add	r3, r1
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d901      	bls.n	800c4a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4a2:	4b11      	ldr	r3, [pc, #68]	@ (800c4e8 <xTaskIncrementTick+0x16c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e004      	b.n	800c4ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ec <xTaskIncrementTick+0x170>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ec <xTaskIncrementTick+0x170>)
 800c4b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4ba:	697b      	ldr	r3, [r7, #20]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	24009600 	.word	0x24009600
 800c4c8:	240095dc 	.word	0x240095dc
 800c4cc:	24009590 	.word	0x24009590
 800c4d0:	24009594 	.word	0x24009594
 800c4d4:	240095f0 	.word	0x240095f0
 800c4d8:	240095f8 	.word	0x240095f8
 800c4dc:	240095e0 	.word	0x240095e0
 800c4e0:	24009108 	.word	0x24009108
 800c4e4:	24009104 	.word	0x24009104
 800c4e8:	240095ec 	.word	0x240095ec
 800c4ec:	240095e8 	.word	0x240095e8

0800c4f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4f6:	4b2b      	ldr	r3, [pc, #172]	@ (800c5a4 <vTaskSwitchContext+0xb4>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4fe:	4b2a      	ldr	r3, [pc, #168]	@ (800c5a8 <vTaskSwitchContext+0xb8>)
 800c500:	2201      	movs	r2, #1
 800c502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c504:	e047      	b.n	800c596 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c506:	4b28      	ldr	r3, [pc, #160]	@ (800c5a8 <vTaskSwitchContext+0xb8>)
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c50c:	4b27      	ldr	r3, [pc, #156]	@ (800c5ac <vTaskSwitchContext+0xbc>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e011      	b.n	800c538 <vTaskSwitchContext+0x48>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10b      	bne.n	800c532 <vTaskSwitchContext+0x42>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	607b      	str	r3, [r7, #4]
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	e7fd      	b.n	800c52e <vTaskSwitchContext+0x3e>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3b01      	subs	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	491d      	ldr	r1, [pc, #116]	@ (800c5b0 <vTaskSwitchContext+0xc0>)
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d0e3      	beq.n	800c514 <vTaskSwitchContext+0x24>
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4613      	mov	r3, r2
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4a16      	ldr	r2, [pc, #88]	@ (800c5b0 <vTaskSwitchContext+0xc0>)
 800c558:	4413      	add	r3, r2
 800c55a:	60bb      	str	r3, [r7, #8]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	605a      	str	r2, [r3, #4]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	3308      	adds	r3, #8
 800c56e:	429a      	cmp	r2, r3
 800c570:	d104      	bne.n	800c57c <vTaskSwitchContext+0x8c>
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	605a      	str	r2, [r3, #4]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	4a0c      	ldr	r2, [pc, #48]	@ (800c5b4 <vTaskSwitchContext+0xc4>)
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4a09      	ldr	r2, [pc, #36]	@ (800c5ac <vTaskSwitchContext+0xbc>)
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c58c:	4b09      	ldr	r3, [pc, #36]	@ (800c5b4 <vTaskSwitchContext+0xc4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3354      	adds	r3, #84	@ 0x54
 800c592:	4a09      	ldr	r2, [pc, #36]	@ (800c5b8 <vTaskSwitchContext+0xc8>)
 800c594:	6013      	str	r3, [r2, #0]
}
 800c596:	bf00      	nop
 800c598:	3714      	adds	r7, #20
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	24009600 	.word	0x24009600
 800c5a8:	240095ec 	.word	0x240095ec
 800c5ac:	240095e0 	.word	0x240095e0
 800c5b0:	24009108 	.word	0x24009108
 800c5b4:	24009104 	.word	0x24009104
 800c5b8:	24000014 	.word	0x24000014

0800c5bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	60fb      	str	r3, [r7, #12]
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	e7fd      	b.n	800c5e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5e4:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <vTaskPlaceOnEventList+0x48>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3318      	adds	r3, #24
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fe fe48 	bl	800b282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	6838      	ldr	r0, [r7, #0]
 800c5f6:	f000 fa87 	bl	800cb08 <prvAddCurrentTaskToDelayedList>
}
 800c5fa:	bf00      	nop
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	24009104 	.word	0x24009104

0800c608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10b      	bne.n	800c632 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	617b      	str	r3, [r7, #20]
}
 800c62c:	bf00      	nop
 800c62e:	bf00      	nop
 800c630:	e7fd      	b.n	800c62e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c632:	4b0a      	ldr	r3, [pc, #40]	@ (800c65c <vTaskPlaceOnEventListRestricted+0x54>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3318      	adds	r3, #24
 800c638:	4619      	mov	r1, r3
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7fe fdfd 	bl	800b23a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c646:	f04f 33ff 	mov.w	r3, #4294967295
 800c64a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	68b8      	ldr	r0, [r7, #8]
 800c650:	f000 fa5a 	bl	800cb08 <prvAddCurrentTaskToDelayedList>
	}
 800c654:	bf00      	nop
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	24009104 	.word	0x24009104

0800c660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10b      	bne.n	800c68e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	60fb      	str	r3, [r7, #12]
}
 800c688:	bf00      	nop
 800c68a:	bf00      	nop
 800c68c:	e7fd      	b.n	800c68a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3318      	adds	r3, #24
 800c692:	4618      	mov	r0, r3
 800c694:	f7fe fe2e 	bl	800b2f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c698:	4b1d      	ldr	r3, [pc, #116]	@ (800c710 <xTaskRemoveFromEventList+0xb0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d11d      	bne.n	800c6dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fe25 	bl	800b2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ae:	4b19      	ldr	r3, [pc, #100]	@ (800c714 <xTaskRemoveFromEventList+0xb4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d903      	bls.n	800c6be <xTaskRemoveFromEventList+0x5e>
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ba:	4a16      	ldr	r2, [pc, #88]	@ (800c714 <xTaskRemoveFromEventList+0xb4>)
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4a13      	ldr	r2, [pc, #76]	@ (800c718 <xTaskRemoveFromEventList+0xb8>)
 800c6cc:	441a      	add	r2, r3
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fe fdb0 	bl	800b23a <vListInsertEnd>
 800c6da:	e005      	b.n	800c6e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	3318      	adds	r3, #24
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	480e      	ldr	r0, [pc, #56]	@ (800c71c <xTaskRemoveFromEventList+0xbc>)
 800c6e4:	f7fe fda9 	bl	800b23a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c720 <xTaskRemoveFromEventList+0xc0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d905      	bls.n	800c702 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c724 <xTaskRemoveFromEventList+0xc4>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	e001      	b.n	800c706 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c706:	697b      	ldr	r3, [r7, #20]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3718      	adds	r7, #24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	24009600 	.word	0x24009600
 800c714:	240095e0 	.word	0x240095e0
 800c718:	24009108 	.word	0x24009108
 800c71c:	24009598 	.word	0x24009598
 800c720:	24009104 	.word	0x24009104
 800c724:	240095ec 	.word	0x240095ec

0800c728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c730:	4b06      	ldr	r3, [pc, #24]	@ (800c74c <vTaskInternalSetTimeOutState+0x24>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c738:	4b05      	ldr	r3, [pc, #20]	@ (800c750 <vTaskInternalSetTimeOutState+0x28>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	605a      	str	r2, [r3, #4]
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	240095f0 	.word	0x240095f0
 800c750:	240095dc 	.word	0x240095dc

0800c754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	613b      	str	r3, [r7, #16]
}
 800c776:	bf00      	nop
 800c778:	bf00      	nop
 800c77a:	e7fd      	b.n	800c778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10b      	bne.n	800c79a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	60fb      	str	r3, [r7, #12]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c79a:	f000 fe95 	bl	800d4c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c79e:	4b1d      	ldr	r3, [pc, #116]	@ (800c814 <xTaskCheckForTimeOut+0xc0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b6:	d102      	bne.n	800c7be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	e023      	b.n	800c806 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	4b15      	ldr	r3, [pc, #84]	@ (800c818 <xTaskCheckForTimeOut+0xc4>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d007      	beq.n	800c7da <xTaskCheckForTimeOut+0x86>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d302      	bcc.n	800c7da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	61fb      	str	r3, [r7, #28]
 800c7d8:	e015      	b.n	800c806 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d20b      	bcs.n	800c7fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	1ad2      	subs	r2, r2, r3
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff99 	bl	800c728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	e004      	b.n	800c806 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c802:	2301      	movs	r3, #1
 800c804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c806:	f000 fe91 	bl	800d52c <vPortExitCritical>

	return xReturn;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3720      	adds	r7, #32
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	240095dc 	.word	0x240095dc
 800c818:	240095f0 	.word	0x240095f0

0800c81c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c820:	4b03      	ldr	r3, [pc, #12]	@ (800c830 <vTaskMissedYield+0x14>)
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]
}
 800c826:	bf00      	nop
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	240095ec 	.word	0x240095ec

0800c834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c83c:	f000 f852 	bl	800c8e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c840:	4b06      	ldr	r3, [pc, #24]	@ (800c85c <prvIdleTask+0x28>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d9f9      	bls.n	800c83c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c848:	4b05      	ldr	r3, [pc, #20]	@ (800c860 <prvIdleTask+0x2c>)
 800c84a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	f3bf 8f4f 	dsb	sy
 800c854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c858:	e7f0      	b.n	800c83c <prvIdleTask+0x8>
 800c85a:	bf00      	nop
 800c85c:	24009108 	.word	0x24009108
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c86a:	2300      	movs	r3, #0
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	e00c      	b.n	800c88a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4a12      	ldr	r2, [pc, #72]	@ (800c8c4 <prvInitialiseTaskLists+0x60>)
 800c87c:	4413      	add	r3, r2
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe fcae 	bl	800b1e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3301      	adds	r3, #1
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b37      	cmp	r3, #55	@ 0x37
 800c88e:	d9ef      	bls.n	800c870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c890:	480d      	ldr	r0, [pc, #52]	@ (800c8c8 <prvInitialiseTaskLists+0x64>)
 800c892:	f7fe fca5 	bl	800b1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c896:	480d      	ldr	r0, [pc, #52]	@ (800c8cc <prvInitialiseTaskLists+0x68>)
 800c898:	f7fe fca2 	bl	800b1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c89c:	480c      	ldr	r0, [pc, #48]	@ (800c8d0 <prvInitialiseTaskLists+0x6c>)
 800c89e:	f7fe fc9f 	bl	800b1e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8a2:	480c      	ldr	r0, [pc, #48]	@ (800c8d4 <prvInitialiseTaskLists+0x70>)
 800c8a4:	f7fe fc9c 	bl	800b1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8a8:	480b      	ldr	r0, [pc, #44]	@ (800c8d8 <prvInitialiseTaskLists+0x74>)
 800c8aa:	f7fe fc99 	bl	800b1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c8dc <prvInitialiseTaskLists+0x78>)
 800c8b0:	4a05      	ldr	r2, [pc, #20]	@ (800c8c8 <prvInitialiseTaskLists+0x64>)
 800c8b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e0 <prvInitialiseTaskLists+0x7c>)
 800c8b6:	4a05      	ldr	r2, [pc, #20]	@ (800c8cc <prvInitialiseTaskLists+0x68>)
 800c8b8:	601a      	str	r2, [r3, #0]
}
 800c8ba:	bf00      	nop
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	24009108 	.word	0x24009108
 800c8c8:	24009568 	.word	0x24009568
 800c8cc:	2400957c 	.word	0x2400957c
 800c8d0:	24009598 	.word	0x24009598
 800c8d4:	240095ac 	.word	0x240095ac
 800c8d8:	240095c4 	.word	0x240095c4
 800c8dc:	24009590 	.word	0x24009590
 800c8e0:	24009594 	.word	0x24009594

0800c8e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8ea:	e019      	b.n	800c920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8ec:	f000 fdec 	bl	800d4c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f0:	4b10      	ldr	r3, [pc, #64]	@ (800c934 <prvCheckTasksWaitingTermination+0x50>)
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe fcf9 	bl	800b2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c902:	4b0d      	ldr	r3, [pc, #52]	@ (800c938 <prvCheckTasksWaitingTermination+0x54>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3b01      	subs	r3, #1
 800c908:	4a0b      	ldr	r2, [pc, #44]	@ (800c938 <prvCheckTasksWaitingTermination+0x54>)
 800c90a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c90c:	4b0b      	ldr	r3, [pc, #44]	@ (800c93c <prvCheckTasksWaitingTermination+0x58>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3b01      	subs	r3, #1
 800c912:	4a0a      	ldr	r2, [pc, #40]	@ (800c93c <prvCheckTasksWaitingTermination+0x58>)
 800c914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c916:	f000 fe09 	bl	800d52c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f810 	bl	800c940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c920:	4b06      	ldr	r3, [pc, #24]	@ (800c93c <prvCheckTasksWaitingTermination+0x58>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1e1      	bne.n	800c8ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	240095ac 	.word	0x240095ac
 800c938:	240095d8 	.word	0x240095d8
 800c93c:	240095c0 	.word	0x240095c0

0800c940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3354      	adds	r3, #84	@ 0x54
 800c94c:	4618      	mov	r0, r3
 800c94e:	f001 f8df 	bl	800db10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d108      	bne.n	800c96e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c960:	4618      	mov	r0, r3
 800c962:	f000 ffa1 	bl	800d8a8 <vPortFree>
				vPortFree( pxTCB );
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 ff9e 	bl	800d8a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c96c:	e019      	b.n	800c9a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c974:	2b01      	cmp	r3, #1
 800c976:	d103      	bne.n	800c980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 ff95 	bl	800d8a8 <vPortFree>
	}
 800c97e:	e010      	b.n	800c9a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c986:	2b02      	cmp	r3, #2
 800c988:	d00b      	beq.n	800c9a2 <prvDeleteTCB+0x62>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	60fb      	str	r3, [r7, #12]
}
 800c99c:	bf00      	nop
 800c99e:	bf00      	nop
 800c9a0:	e7fd      	b.n	800c99e <prvDeleteTCB+0x5e>
	}
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
	...

0800c9ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e4 <prvResetNextTaskUnblockTime+0x38>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d104      	bne.n	800c9c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c9be:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9c4:	e008      	b.n	800c9d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9c6:	4b07      	ldr	r3, [pc, #28]	@ (800c9e4 <prvResetNextTaskUnblockTime+0x38>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	4a04      	ldr	r2, [pc, #16]	@ (800c9e8 <prvResetNextTaskUnblockTime+0x3c>)
 800c9d6:	6013      	str	r3, [r2, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	24009590 	.word	0x24009590
 800c9e8:	240095f8 	.word	0x240095f8

0800c9ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca20 <xTaskGetSchedulerState+0x34>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d102      	bne.n	800ca00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	607b      	str	r3, [r7, #4]
 800c9fe:	e008      	b.n	800ca12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca00:	4b08      	ldr	r3, [pc, #32]	@ (800ca24 <xTaskGetSchedulerState+0x38>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca08:	2302      	movs	r3, #2
 800ca0a:	607b      	str	r3, [r7, #4]
 800ca0c:	e001      	b.n	800ca12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca12:	687b      	ldr	r3, [r7, #4]
	}
 800ca14:	4618      	mov	r0, r3
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	240095e4 	.word	0x240095e4
 800ca24:	24009600 	.word	0x24009600

0800ca28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca34:	2300      	movs	r3, #0
 800ca36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d058      	beq.n	800caf0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca3e:	4b2f      	ldr	r3, [pc, #188]	@ (800cafc <xTaskPriorityDisinherit+0xd4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d00b      	beq.n	800ca60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	60fb      	str	r3, [r7, #12]
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	e7fd      	b.n	800ca5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10b      	bne.n	800ca80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	60bb      	str	r3, [r7, #8]
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	e7fd      	b.n	800ca7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca84:	1e5a      	subs	r2, r3, #1
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d02c      	beq.n	800caf0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d128      	bne.n	800caf0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	3304      	adds	r3, #4
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fc26 	bl	800b2f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac0:	4b0f      	ldr	r3, [pc, #60]	@ (800cb00 <xTaskPriorityDisinherit+0xd8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d903      	bls.n	800cad0 <xTaskPriorityDisinherit+0xa8>
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cacc:	4a0c      	ldr	r2, [pc, #48]	@ (800cb00 <xTaskPriorityDisinherit+0xd8>)
 800cace:	6013      	str	r3, [r2, #0]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4a09      	ldr	r2, [pc, #36]	@ (800cb04 <xTaskPriorityDisinherit+0xdc>)
 800cade:	441a      	add	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	3304      	adds	r3, #4
 800cae4:	4619      	mov	r1, r3
 800cae6:	4610      	mov	r0, r2
 800cae8:	f7fe fba7 	bl	800b23a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800caec:	2301      	movs	r3, #1
 800caee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800caf0:	697b      	ldr	r3, [r7, #20]
	}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	24009104 	.word	0x24009104
 800cb00:	240095e0 	.word	0x240095e0
 800cb04:	24009108 	.word	0x24009108

0800cb08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb12:	4b21      	ldr	r3, [pc, #132]	@ (800cb98 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb18:	4b20      	ldr	r3, [pc, #128]	@ (800cb9c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe fbe8 	bl	800b2f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2a:	d10a      	bne.n	800cb42 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d007      	beq.n	800cb42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb32:	4b1a      	ldr	r3, [pc, #104]	@ (800cb9c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4819      	ldr	r0, [pc, #100]	@ (800cba0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb3c:	f7fe fb7d 	bl	800b23a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb40:	e026      	b.n	800cb90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb4a:	4b14      	ldr	r3, [pc, #80]	@ (800cb9c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d209      	bcs.n	800cb6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb5a:	4b12      	ldr	r3, [pc, #72]	@ (800cba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cb9c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3304      	adds	r3, #4
 800cb64:	4619      	mov	r1, r3
 800cb66:	4610      	mov	r0, r2
 800cb68:	f7fe fb8b 	bl	800b282 <vListInsert>
}
 800cb6c:	e010      	b.n	800cb90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800cba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b0a      	ldr	r3, [pc, #40]	@ (800cb9c <prvAddCurrentTaskToDelayedList+0x94>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3304      	adds	r3, #4
 800cb78:	4619      	mov	r1, r3
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	f7fe fb81 	bl	800b282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb80:	4b0a      	ldr	r3, [pc, #40]	@ (800cbac <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d202      	bcs.n	800cb90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb8a:	4a08      	ldr	r2, [pc, #32]	@ (800cbac <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	6013      	str	r3, [r2, #0]
}
 800cb90:	bf00      	nop
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	240095dc 	.word	0x240095dc
 800cb9c:	24009104 	.word	0x24009104
 800cba0:	240095c4 	.word	0x240095c4
 800cba4:	24009594 	.word	0x24009594
 800cba8:	24009590 	.word	0x24009590
 800cbac:	240095f8 	.word	0x240095f8

0800cbb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08a      	sub	sp, #40	@ 0x28
 800cbb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbba:	f000 fb13 	bl	800d1e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cbbe:	4b1d      	ldr	r3, [pc, #116]	@ (800cc34 <xTimerCreateTimerTask+0x84>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d021      	beq.n	800cc0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cbce:	1d3a      	adds	r2, r7, #4
 800cbd0:	f107 0108 	add.w	r1, r7, #8
 800cbd4:	f107 030c 	add.w	r3, r7, #12
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fae7 	bl	800b1ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	9202      	str	r2, [sp, #8]
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2300      	movs	r3, #0
 800cbee:	460a      	mov	r2, r1
 800cbf0:	4911      	ldr	r1, [pc, #68]	@ (800cc38 <xTimerCreateTimerTask+0x88>)
 800cbf2:	4812      	ldr	r0, [pc, #72]	@ (800cc3c <xTimerCreateTimerTask+0x8c>)
 800cbf4:	f7ff f8a2 	bl	800bd3c <xTaskCreateStatic>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	4a11      	ldr	r2, [pc, #68]	@ (800cc40 <xTimerCreateTimerTask+0x90>)
 800cbfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbfe:	4b10      	ldr	r3, [pc, #64]	@ (800cc40 <xTimerCreateTimerTask+0x90>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d001      	beq.n	800cc0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc06:	2301      	movs	r3, #1
 800cc08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10b      	bne.n	800cc28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	e7fd      	b.n	800cc24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc28:	697b      	ldr	r3, [r7, #20]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	24009634 	.word	0x24009634
 800cc38:	0800dd0c 	.word	0x0800dd0c
 800cc3c:	0800cd7d 	.word	0x0800cd7d
 800cc40:	24009638 	.word	0x24009638

0800cc44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08a      	sub	sp, #40	@ 0x28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10b      	bne.n	800cc74 <xTimerGenericCommand+0x30>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	623b      	str	r3, [r7, #32]
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc74:	4b19      	ldr	r3, [pc, #100]	@ (800ccdc <xTimerGenericCommand+0x98>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d02a      	beq.n	800ccd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	dc18      	bgt.n	800ccc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc8e:	f7ff fead 	bl	800c9ec <xTaskGetSchedulerState>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d109      	bne.n	800ccac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc98:	4b10      	ldr	r3, [pc, #64]	@ (800ccdc <xTimerGenericCommand+0x98>)
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	f107 0110 	add.w	r1, r7, #16
 800cca0:	2300      	movs	r3, #0
 800cca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cca4:	f7fe fc5a 	bl	800b55c <xQueueGenericSend>
 800cca8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccaa:	e012      	b.n	800ccd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ccac:	4b0b      	ldr	r3, [pc, #44]	@ (800ccdc <xTimerGenericCommand+0x98>)
 800ccae:	6818      	ldr	r0, [r3, #0]
 800ccb0:	f107 0110 	add.w	r1, r7, #16
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f7fe fc50 	bl	800b55c <xQueueGenericSend>
 800ccbc:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccbe:	e008      	b.n	800ccd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccc0:	4b06      	ldr	r3, [pc, #24]	@ (800ccdc <xTimerGenericCommand+0x98>)
 800ccc2:	6818      	ldr	r0, [r3, #0]
 800ccc4:	f107 0110 	add.w	r1, r7, #16
 800ccc8:	2300      	movs	r3, #0
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	f7fe fd48 	bl	800b760 <xQueueGenericSendFromISR>
 800ccd0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3728      	adds	r7, #40	@ 0x28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	24009634 	.word	0x24009634

0800cce0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af02      	add	r7, sp, #8
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccea:	4b23      	ldr	r3, [pc, #140]	@ (800cd78 <prvProcessExpiredTimer+0x98>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fe fafb 	bl	800b2f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd04:	f003 0304 	and.w	r3, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d023      	beq.n	800cd54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	18d1      	adds	r1, r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	6978      	ldr	r0, [r7, #20]
 800cd1a:	f000 f8d5 	bl	800cec8 <prvInsertTimerInActiveList>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d020      	beq.n	800cd66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd24:	2300      	movs	r3, #0
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	2300      	movs	r3, #0
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	6978      	ldr	r0, [r7, #20]
 800cd30:	f7ff ff88 	bl	800cc44 <xTimerGenericCommand>
 800cd34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d114      	bne.n	800cd66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60fb      	str	r3, [r7, #12]
}
 800cd4e:	bf00      	nop
 800cd50:	bf00      	nop
 800cd52:	e7fd      	b.n	800cd50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd5a:	f023 0301 	bic.w	r3, r3, #1
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	6978      	ldr	r0, [r7, #20]
 800cd6c:	4798      	blx	r3
}
 800cd6e:	bf00      	nop
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	2400962c 	.word	0x2400962c

0800cd7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd84:	f107 0308 	add.w	r3, r7, #8
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 f859 	bl	800ce40 <prvGetNextExpireTime>
 800cd8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	4619      	mov	r1, r3
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 f805 	bl	800cda4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd9a:	f000 f8d7 	bl	800cf4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd9e:	bf00      	nop
 800cda0:	e7f0      	b.n	800cd84 <prvTimerTask+0x8>
	...

0800cda4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdae:	f7ff fa29 	bl	800c204 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdb2:	f107 0308 	add.w	r3, r7, #8
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 f866 	bl	800ce88 <prvSampleTimeNow>
 800cdbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d130      	bne.n	800ce26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10a      	bne.n	800cde0 <prvProcessTimerOrBlockTask+0x3c>
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d806      	bhi.n	800cde0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdd2:	f7ff fa25 	bl	800c220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7ff ff81 	bl	800cce0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cdde:	e024      	b.n	800ce2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d008      	beq.n	800cdf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cde6:	4b13      	ldr	r3, [pc, #76]	@ (800ce34 <prvProcessTimerOrBlockTask+0x90>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <prvProcessTimerOrBlockTask+0x50>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e000      	b.n	800cdf6 <prvProcessTimerOrBlockTask+0x52>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cdf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ce38 <prvProcessTimerOrBlockTask+0x94>)
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	4619      	mov	r1, r3
 800ce06:	f7fe ff65 	bl	800bcd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce0a:	f7ff fa09 	bl	800c220 <xTaskResumeAll>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce14:	4b09      	ldr	r3, [pc, #36]	@ (800ce3c <prvProcessTimerOrBlockTask+0x98>)
 800ce16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	f3bf 8f6f 	isb	sy
}
 800ce24:	e001      	b.n	800ce2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce26:	f7ff f9fb 	bl	800c220 <xTaskResumeAll>
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	24009630 	.word	0x24009630
 800ce38:	24009634 	.word	0x24009634
 800ce3c:	e000ed04 	.word	0xe000ed04

0800ce40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce48:	4b0e      	ldr	r3, [pc, #56]	@ (800ce84 <prvGetNextExpireTime+0x44>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <prvGetNextExpireTime+0x16>
 800ce52:	2201      	movs	r2, #1
 800ce54:	e000      	b.n	800ce58 <prvGetNextExpireTime+0x18>
 800ce56:	2200      	movs	r2, #0
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d105      	bne.n	800ce70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce64:	4b07      	ldr	r3, [pc, #28]	@ (800ce84 <prvGetNextExpireTime+0x44>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	60fb      	str	r3, [r7, #12]
 800ce6e:	e001      	b.n	800ce74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce74:	68fb      	ldr	r3, [r7, #12]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	2400962c 	.word	0x2400962c

0800ce88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce90:	f7ff fa64 	bl	800c35c <xTaskGetTickCount>
 800ce94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce96:	4b0b      	ldr	r3, [pc, #44]	@ (800cec4 <prvSampleTimeNow+0x3c>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d205      	bcs.n	800ceac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cea0:	f000 f93a 	bl	800d118 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e002      	b.n	800ceb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ceb2:	4a04      	ldr	r2, [pc, #16]	@ (800cec4 <prvSampleTimeNow+0x3c>)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	2400963c 	.word	0x2400963c

0800cec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ced6:	2300      	movs	r3, #0
 800ced8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d812      	bhi.n	800cf14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	1ad2      	subs	r2, r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d302      	bcc.n	800cf02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	e01b      	b.n	800cf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf02:	4b10      	ldr	r3, [pc, #64]	@ (800cf44 <prvInsertTimerInActiveList+0x7c>)
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7fe f9b8 	bl	800b282 <vListInsert>
 800cf12:	e012      	b.n	800cf3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d206      	bcs.n	800cf2a <prvInsertTimerInActiveList+0x62>
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d302      	bcc.n	800cf2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf24:	2301      	movs	r3, #1
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	e007      	b.n	800cf3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf2a:	4b07      	ldr	r3, [pc, #28]	@ (800cf48 <prvInsertTimerInActiveList+0x80>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f7fe f9a4 	bl	800b282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf3a:	697b      	ldr	r3, [r7, #20]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	24009630 	.word	0x24009630
 800cf48:	2400962c 	.word	0x2400962c

0800cf4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08e      	sub	sp, #56	@ 0x38
 800cf50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf52:	e0ce      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	da19      	bge.n	800cf8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf5a:	1d3b      	adds	r3, r7, #4
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	61fb      	str	r3, [r7, #28]
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	e7fd      	b.n	800cf7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf84:	6850      	ldr	r0, [r2, #4]
 800cf86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf88:	6892      	ldr	r2, [r2, #8]
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f2c0 80ae 	blt.w	800d0f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d004      	beq.n	800cfac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe f9a4 	bl	800b2f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfac:	463b      	mov	r3, r7
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff ff6a 	bl	800ce88 <prvSampleTimeNow>
 800cfb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	f200 8097 	bhi.w	800d0ec <prvProcessReceivedCommands+0x1a0>
 800cfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc4 <prvProcessReceivedCommands+0x78>)
 800cfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc4:	0800cfed 	.word	0x0800cfed
 800cfc8:	0800cfed 	.word	0x0800cfed
 800cfcc:	0800cfed 	.word	0x0800cfed
 800cfd0:	0800d063 	.word	0x0800d063
 800cfd4:	0800d077 	.word	0x0800d077
 800cfd8:	0800d0c3 	.word	0x0800d0c3
 800cfdc:	0800cfed 	.word	0x0800cfed
 800cfe0:	0800cfed 	.word	0x0800cfed
 800cfe4:	0800d063 	.word	0x0800d063
 800cfe8:	0800d077 	.word	0x0800d077
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cff2:	f043 0301 	orr.w	r3, r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	18d1      	adds	r1, r2, r3
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d00a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d00c:	f7ff ff5c 	bl	800cec8 <prvInsertTimerInActiveList>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d06c      	beq.n	800d0f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d01c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d061      	beq.n	800d0f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	441a      	add	r2, r3
 800d034:	2300      	movs	r3, #0
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	2300      	movs	r3, #0
 800d03a:	2100      	movs	r1, #0
 800d03c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d03e:	f7ff fe01 	bl	800cc44 <xTimerGenericCommand>
 800d042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d152      	bne.n	800d0f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	61bb      	str	r3, [r7, #24]
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	e7fd      	b.n	800d05e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d068:	f023 0301 	bic.w	r3, r3, #1
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d070:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d074:	e03d      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d07c:	f043 0301 	orr.w	r3, r3, #1
 800d080:	b2da      	uxtb	r2, r3
 800d082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d084:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	699b      	ldr	r3, [r3, #24]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10b      	bne.n	800d0ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	617b      	str	r3, [r7, #20]
}
 800d0a8:	bf00      	nop
 800d0aa:	bf00      	nop
 800d0ac:	e7fd      	b.n	800d0aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b0:	699a      	ldr	r2, [r3, #24]
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b4:	18d1      	adds	r1, r2, r3
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0bc:	f7ff ff04 	bl	800cec8 <prvInsertTimerInActiveList>
					break;
 800d0c0:	e017      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d103      	bne.n	800d0d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d0d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0d2:	f000 fbe9 	bl	800d8a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0d6:	e00c      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0de:	f023 0301 	bic.w	r3, r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d0ea:	e002      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d0ec:	bf00      	nop
 800d0ee:	e000      	b.n	800d0f2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d0f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0f2:	4b08      	ldr	r3, [pc, #32]	@ (800d114 <prvProcessReceivedCommands+0x1c8>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	1d39      	adds	r1, r7, #4
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fbce 	bl	800b89c <xQueueReceive>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	f47f af26 	bne.w	800cf54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	3730      	adds	r7, #48	@ 0x30
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	24009634 	.word	0x24009634

0800d118 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b088      	sub	sp, #32
 800d11c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d11e:	e049      	b.n	800d1b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d120:	4b2e      	ldr	r3, [pc, #184]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d12a:	4b2c      	ldr	r3, [pc, #176]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	3304      	adds	r3, #4
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe f8db 	bl	800b2f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d14c:	f003 0304 	and.w	r3, r3, #4
 800d150:	2b00      	cmp	r3, #0
 800d152:	d02f      	beq.n	800d1b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4413      	add	r3, r2
 800d15c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	429a      	cmp	r2, r3
 800d164:	d90e      	bls.n	800d184 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d172:	4b1a      	ldr	r3, [pc, #104]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3304      	adds	r3, #4
 800d17a:	4619      	mov	r1, r3
 800d17c:	4610      	mov	r0, r2
 800d17e:	f7fe f880 	bl	800b282 <vListInsert>
 800d182:	e017      	b.n	800d1b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d184:	2300      	movs	r3, #0
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	2100      	movs	r1, #0
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff fd58 	bl	800cc44 <xTimerGenericCommand>
 800d194:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10b      	bne.n	800d1b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	603b      	str	r3, [r7, #0]
}
 800d1ae:	bf00      	nop
 800d1b0:	bf00      	nop
 800d1b2:	e7fd      	b.n	800d1b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1b4:	4b09      	ldr	r3, [pc, #36]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1b0      	bne.n	800d120 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1be:	4b07      	ldr	r3, [pc, #28]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1c4:	4b06      	ldr	r3, [pc, #24]	@ (800d1e0 <prvSwitchTimerLists+0xc8>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a04      	ldr	r2, [pc, #16]	@ (800d1dc <prvSwitchTimerLists+0xc4>)
 800d1ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1cc:	4a04      	ldr	r2, [pc, #16]	@ (800d1e0 <prvSwitchTimerLists+0xc8>)
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	6013      	str	r3, [r2, #0]
}
 800d1d2:	bf00      	nop
 800d1d4:	3718      	adds	r7, #24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	2400962c 	.word	0x2400962c
 800d1e0:	24009630 	.word	0x24009630

0800d1e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d1ea:	f000 f96d 	bl	800d4c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d1ee:	4b15      	ldr	r3, [pc, #84]	@ (800d244 <prvCheckForValidListAndQueue+0x60>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d120      	bne.n	800d238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d1f6:	4814      	ldr	r0, [pc, #80]	@ (800d248 <prvCheckForValidListAndQueue+0x64>)
 800d1f8:	f7fd fff2 	bl	800b1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1fc:	4813      	ldr	r0, [pc, #76]	@ (800d24c <prvCheckForValidListAndQueue+0x68>)
 800d1fe:	f7fd ffef 	bl	800b1e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d202:	4b13      	ldr	r3, [pc, #76]	@ (800d250 <prvCheckForValidListAndQueue+0x6c>)
 800d204:	4a10      	ldr	r2, [pc, #64]	@ (800d248 <prvCheckForValidListAndQueue+0x64>)
 800d206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d208:	4b12      	ldr	r3, [pc, #72]	@ (800d254 <prvCheckForValidListAndQueue+0x70>)
 800d20a:	4a10      	ldr	r2, [pc, #64]	@ (800d24c <prvCheckForValidListAndQueue+0x68>)
 800d20c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d20e:	2300      	movs	r3, #0
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	4b11      	ldr	r3, [pc, #68]	@ (800d258 <prvCheckForValidListAndQueue+0x74>)
 800d214:	4a11      	ldr	r2, [pc, #68]	@ (800d25c <prvCheckForValidListAndQueue+0x78>)
 800d216:	2110      	movs	r1, #16
 800d218:	200a      	movs	r0, #10
 800d21a:	f7fe f8ff 	bl	800b41c <xQueueGenericCreateStatic>
 800d21e:	4603      	mov	r3, r0
 800d220:	4a08      	ldr	r2, [pc, #32]	@ (800d244 <prvCheckForValidListAndQueue+0x60>)
 800d222:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d224:	4b07      	ldr	r3, [pc, #28]	@ (800d244 <prvCheckForValidListAndQueue+0x60>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d22c:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <prvCheckForValidListAndQueue+0x60>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	490b      	ldr	r1, [pc, #44]	@ (800d260 <prvCheckForValidListAndQueue+0x7c>)
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fd24 	bl	800bc80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d238:	f000 f978 	bl	800d52c <vPortExitCritical>
}
 800d23c:	bf00      	nop
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	24009634 	.word	0x24009634
 800d248:	24009604 	.word	0x24009604
 800d24c:	24009618 	.word	0x24009618
 800d250:	2400962c 	.word	0x2400962c
 800d254:	24009630 	.word	0x24009630
 800d258:	240096e0 	.word	0x240096e0
 800d25c:	24009640 	.word	0x24009640
 800d260:	0800dd14 	.word	0x0800dd14

0800d264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3b04      	subs	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3b04      	subs	r3, #4
 800d282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f023 0201 	bic.w	r2, r3, #1
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3b04      	subs	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d294:	4a0c      	ldr	r2, [pc, #48]	@ (800d2c8 <pxPortInitialiseStack+0x64>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3b14      	subs	r3, #20
 800d29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3b04      	subs	r3, #4
 800d2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f06f 0202 	mvn.w	r2, #2
 800d2b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3b20      	subs	r3, #32
 800d2b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	0800d2cd 	.word	0x0800d2cd

0800d2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2d6:	4b13      	ldr	r3, [pc, #76]	@ (800d324 <prvTaskExitError+0x58>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2de:	d00b      	beq.n	800d2f8 <prvTaskExitError+0x2c>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	60fb      	str	r3, [r7, #12]
}
 800d2f2:	bf00      	nop
 800d2f4:	bf00      	nop
 800d2f6:	e7fd      	b.n	800d2f4 <prvTaskExitError+0x28>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60bb      	str	r3, [r7, #8]
}
 800d30a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d30c:	bf00      	nop
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0fc      	beq.n	800d30e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d314:	bf00      	nop
 800d316:	bf00      	nop
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	24000010 	.word	0x24000010
	...

0800d330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d330:	4b07      	ldr	r3, [pc, #28]	@ (800d350 <pxCurrentTCBConst2>)
 800d332:	6819      	ldr	r1, [r3, #0]
 800d334:	6808      	ldr	r0, [r1, #0]
 800d336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	f380 8809 	msr	PSP, r0
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f04f 0000 	mov.w	r0, #0
 800d346:	f380 8811 	msr	BASEPRI, r0
 800d34a:	4770      	bx	lr
 800d34c:	f3af 8000 	nop.w

0800d350 <pxCurrentTCBConst2>:
 800d350:	24009104 	.word	0x24009104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop

0800d358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d358:	4808      	ldr	r0, [pc, #32]	@ (800d37c <prvPortStartFirstTask+0x24>)
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	6800      	ldr	r0, [r0, #0]
 800d35e:	f380 8808 	msr	MSP, r0
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f380 8814 	msr	CONTROL, r0
 800d36a:	b662      	cpsie	i
 800d36c:	b661      	cpsie	f
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	df00      	svc	0
 800d378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d37a:	bf00      	nop
 800d37c:	e000ed08 	.word	0xe000ed08

0800d380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d386:	4b47      	ldr	r3, [pc, #284]	@ (800d4a4 <xPortStartScheduler+0x124>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a47      	ldr	r2, [pc, #284]	@ (800d4a8 <xPortStartScheduler+0x128>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d10b      	bne.n	800d3a8 <xPortStartScheduler+0x28>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	60fb      	str	r3, [r7, #12]
}
 800d3a2:	bf00      	nop
 800d3a4:	bf00      	nop
 800d3a6:	e7fd      	b.n	800d3a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3a8:	4b3e      	ldr	r3, [pc, #248]	@ (800d4a4 <xPortStartScheduler+0x124>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a3f      	ldr	r2, [pc, #252]	@ (800d4ac <xPortStartScheduler+0x12c>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d10b      	bne.n	800d3ca <xPortStartScheduler+0x4a>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	613b      	str	r3, [r7, #16]
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop
 800d3c8:	e7fd      	b.n	800d3c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3ca:	4b39      	ldr	r3, [pc, #228]	@ (800d4b0 <xPortStartScheduler+0x130>)
 800d3cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	22ff      	movs	r2, #255	@ 0xff
 800d3da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3e4:	78fb      	ldrb	r3, [r7, #3]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	4b31      	ldr	r3, [pc, #196]	@ (800d4b4 <xPortStartScheduler+0x134>)
 800d3f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3f2:	4b31      	ldr	r3, [pc, #196]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d3f4:	2207      	movs	r2, #7
 800d3f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3f8:	e009      	b.n	800d40e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d3fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	4a2d      	ldr	r2, [pc, #180]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d402:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	b2db      	uxtb	r3, r3
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d40e:	78fb      	ldrb	r3, [r7, #3]
 800d410:	b2db      	uxtb	r3, r3
 800d412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d416:	2b80      	cmp	r3, #128	@ 0x80
 800d418:	d0ef      	beq.n	800d3fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d41a:	4b27      	ldr	r3, [pc, #156]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f1c3 0307 	rsb	r3, r3, #7
 800d422:	2b04      	cmp	r3, #4
 800d424:	d00b      	beq.n	800d43e <xPortStartScheduler+0xbe>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	60bb      	str	r3, [r7, #8]
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d43e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	4a1c      	ldr	r2, [pc, #112]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d446:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d448:	4b1b      	ldr	r3, [pc, #108]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d450:	4a19      	ldr	r2, [pc, #100]	@ (800d4b8 <xPortStartScheduler+0x138>)
 800d452:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	b2da      	uxtb	r2, r3
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d45c:	4b17      	ldr	r3, [pc, #92]	@ (800d4bc <xPortStartScheduler+0x13c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a16      	ldr	r2, [pc, #88]	@ (800d4bc <xPortStartScheduler+0x13c>)
 800d462:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d466:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d468:	4b14      	ldr	r3, [pc, #80]	@ (800d4bc <xPortStartScheduler+0x13c>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a13      	ldr	r2, [pc, #76]	@ (800d4bc <xPortStartScheduler+0x13c>)
 800d46e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d472:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d474:	f000 f8da 	bl	800d62c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d478:	4b11      	ldr	r3, [pc, #68]	@ (800d4c0 <xPortStartScheduler+0x140>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d47e:	f000 f8f9 	bl	800d674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d482:	4b10      	ldr	r3, [pc, #64]	@ (800d4c4 <xPortStartScheduler+0x144>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a0f      	ldr	r2, [pc, #60]	@ (800d4c4 <xPortStartScheduler+0x144>)
 800d488:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d48c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d48e:	f7ff ff63 	bl	800d358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d492:	f7ff f82d 	bl	800c4f0 <vTaskSwitchContext>
	prvTaskExitError();
 800d496:	f7ff ff19 	bl	800d2cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3718      	adds	r7, #24
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	e000ed00 	.word	0xe000ed00
 800d4a8:	410fc271 	.word	0x410fc271
 800d4ac:	410fc270 	.word	0x410fc270
 800d4b0:	e000e400 	.word	0xe000e400
 800d4b4:	24009730 	.word	0x24009730
 800d4b8:	24009734 	.word	0x24009734
 800d4bc:	e000ed20 	.word	0xe000ed20
 800d4c0:	24000010 	.word	0x24000010
 800d4c4:	e000ef34 	.word	0xe000ef34

0800d4c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	607b      	str	r3, [r7, #4]
}
 800d4e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4e2:	4b10      	ldr	r3, [pc, #64]	@ (800d524 <vPortEnterCritical+0x5c>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	4a0e      	ldr	r2, [pc, #56]	@ (800d524 <vPortEnterCritical+0x5c>)
 800d4ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d524 <vPortEnterCritical+0x5c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d110      	bne.n	800d516 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d528 <vPortEnterCritical+0x60>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00b      	beq.n	800d516 <vPortEnterCritical+0x4e>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	603b      	str	r3, [r7, #0]
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	e7fd      	b.n	800d512 <vPortEnterCritical+0x4a>
	}
}
 800d516:	bf00      	nop
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	24000010 	.word	0x24000010
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d532:	4b12      	ldr	r3, [pc, #72]	@ (800d57c <vPortExitCritical+0x50>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10b      	bne.n	800d552 <vPortExitCritical+0x26>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	607b      	str	r3, [r7, #4]
}
 800d54c:	bf00      	nop
 800d54e:	bf00      	nop
 800d550:	e7fd      	b.n	800d54e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d552:	4b0a      	ldr	r3, [pc, #40]	@ (800d57c <vPortExitCritical+0x50>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3b01      	subs	r3, #1
 800d558:	4a08      	ldr	r2, [pc, #32]	@ (800d57c <vPortExitCritical+0x50>)
 800d55a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d55c:	4b07      	ldr	r3, [pc, #28]	@ (800d57c <vPortExitCritical+0x50>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d105      	bne.n	800d570 <vPortExitCritical+0x44>
 800d564:	2300      	movs	r3, #0
 800d566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	f383 8811 	msr	BASEPRI, r3
}
 800d56e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	24000010 	.word	0x24000010

0800d580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d580:	f3ef 8009 	mrs	r0, PSP
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	4b15      	ldr	r3, [pc, #84]	@ (800d5e0 <pxCurrentTCBConst>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	f01e 0f10 	tst.w	lr, #16
 800d590:	bf08      	it	eq
 800d592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59a:	6010      	str	r0, [r2, #0]
 800d59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d5a4:	f380 8811 	msr	BASEPRI, r0
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f7fe ff9e 	bl	800c4f0 <vTaskSwitchContext>
 800d5b4:	f04f 0000 	mov.w	r0, #0
 800d5b8:	f380 8811 	msr	BASEPRI, r0
 800d5bc:	bc09      	pop	{r0, r3}
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	6808      	ldr	r0, [r1, #0]
 800d5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c6:	f01e 0f10 	tst.w	lr, #16
 800d5ca:	bf08      	it	eq
 800d5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5d0:	f380 8809 	msr	PSP, r0
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	f3af 8000 	nop.w

0800d5e0 <pxCurrentTCBConst>:
 800d5e0:	24009104 	.word	0x24009104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop

0800d5e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	607b      	str	r3, [r7, #4]
}
 800d600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d602:	f7fe febb 	bl	800c37c <xTaskIncrementTick>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d60c:	4b06      	ldr	r3, [pc, #24]	@ (800d628 <xPortSysTickHandler+0x40>)
 800d60e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	2300      	movs	r3, #0
 800d616:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f383 8811 	msr	BASEPRI, r3
}
 800d61e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	e000ed04 	.word	0xe000ed04

0800d62c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d630:	4b0b      	ldr	r3, [pc, #44]	@ (800d660 <vPortSetupTimerInterrupt+0x34>)
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d636:	4b0b      	ldr	r3, [pc, #44]	@ (800d664 <vPortSetupTimerInterrupt+0x38>)
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d63c:	4b0a      	ldr	r3, [pc, #40]	@ (800d668 <vPortSetupTimerInterrupt+0x3c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a0a      	ldr	r2, [pc, #40]	@ (800d66c <vPortSetupTimerInterrupt+0x40>)
 800d642:	fba2 2303 	umull	r2, r3, r2, r3
 800d646:	099b      	lsrs	r3, r3, #6
 800d648:	4a09      	ldr	r2, [pc, #36]	@ (800d670 <vPortSetupTimerInterrupt+0x44>)
 800d64a:	3b01      	subs	r3, #1
 800d64c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d64e:	4b04      	ldr	r3, [pc, #16]	@ (800d660 <vPortSetupTimerInterrupt+0x34>)
 800d650:	2207      	movs	r2, #7
 800d652:	601a      	str	r2, [r3, #0]
}
 800d654:	bf00      	nop
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	e000e010 	.word	0xe000e010
 800d664:	e000e018 	.word	0xe000e018
 800d668:	24000000 	.word	0x24000000
 800d66c:	10624dd3 	.word	0x10624dd3
 800d670:	e000e014 	.word	0xe000e014

0800d674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d674:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d684 <vPortEnableVFP+0x10>
 800d678:	6801      	ldr	r1, [r0, #0]
 800d67a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d67e:	6001      	str	r1, [r0, #0]
 800d680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d682:	bf00      	nop
 800d684:	e000ed88 	.word	0xe000ed88

0800d688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d68e:	f3ef 8305 	mrs	r3, IPSR
 800d692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b0f      	cmp	r3, #15
 800d698:	d915      	bls.n	800d6c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d69a:	4a18      	ldr	r2, [pc, #96]	@ (800d6fc <vPortValidateInterruptPriority+0x74>)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6a4:	4b16      	ldr	r3, [pc, #88]	@ (800d700 <vPortValidateInterruptPriority+0x78>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	7afa      	ldrb	r2, [r7, #11]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d20b      	bcs.n	800d6c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	607b      	str	r3, [r7, #4]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d704 <vPortValidateInterruptPriority+0x7c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d6ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d708 <vPortValidateInterruptPriority+0x80>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d90b      	bls.n	800d6ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	603b      	str	r3, [r7, #0]
}
 800d6e8:	bf00      	nop
 800d6ea:	bf00      	nop
 800d6ec:	e7fd      	b.n	800d6ea <vPortValidateInterruptPriority+0x62>
	}
 800d6ee:	bf00      	nop
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	e000e3f0 	.word	0xe000e3f0
 800d700:	24009730 	.word	0x24009730
 800d704:	e000ed0c 	.word	0xe000ed0c
 800d708:	24009734 	.word	0x24009734

0800d70c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08a      	sub	sp, #40	@ 0x28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d714:	2300      	movs	r3, #0
 800d716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d718:	f7fe fd74 	bl	800c204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d71c:	4b5c      	ldr	r3, [pc, #368]	@ (800d890 <pvPortMalloc+0x184>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d724:	f000 f924 	bl	800d970 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d728:	4b5a      	ldr	r3, [pc, #360]	@ (800d894 <pvPortMalloc+0x188>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4013      	ands	r3, r2
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 8095 	bne.w	800d860 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d01e      	beq.n	800d77a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d73c:	2208      	movs	r2, #8
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4413      	add	r3, r2
 800d742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d015      	beq.n	800d77a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f023 0307 	bic.w	r3, r3, #7
 800d754:	3308      	adds	r3, #8
 800d756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f003 0307 	and.w	r3, r3, #7
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00b      	beq.n	800d77a <pvPortMalloc+0x6e>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	617b      	str	r3, [r7, #20]
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	e7fd      	b.n	800d776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d06f      	beq.n	800d860 <pvPortMalloc+0x154>
 800d780:	4b45      	ldr	r3, [pc, #276]	@ (800d898 <pvPortMalloc+0x18c>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d86a      	bhi.n	800d860 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d78a:	4b44      	ldr	r3, [pc, #272]	@ (800d89c <pvPortMalloc+0x190>)
 800d78c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d78e:	4b43      	ldr	r3, [pc, #268]	@ (800d89c <pvPortMalloc+0x190>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d794:	e004      	b.n	800d7a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d903      	bls.n	800d7b2 <pvPortMalloc+0xa6>
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1f1      	bne.n	800d796 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7b2:	4b37      	ldr	r3, [pc, #220]	@ (800d890 <pvPortMalloc+0x184>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d051      	beq.n	800d860 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	4413      	add	r3, r2
 800d7c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	685a      	ldr	r2, [r3, #4]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	1ad2      	subs	r2, r2, r3
 800d7d6:	2308      	movs	r3, #8
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d920      	bls.n	800d820 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	f003 0307 	and.w	r3, r3, #7
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <pvPortMalloc+0xfc>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	613b      	str	r3, [r7, #16]
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	e7fd      	b.n	800d804 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	1ad2      	subs	r2, r2, r3
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d81a:	69b8      	ldr	r0, [r7, #24]
 800d81c:	f000 f90a 	bl	800da34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d820:	4b1d      	ldr	r3, [pc, #116]	@ (800d898 <pvPortMalloc+0x18c>)
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	4a1b      	ldr	r2, [pc, #108]	@ (800d898 <pvPortMalloc+0x18c>)
 800d82c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d82e:	4b1a      	ldr	r3, [pc, #104]	@ (800d898 <pvPortMalloc+0x18c>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b1b      	ldr	r3, [pc, #108]	@ (800d8a0 <pvPortMalloc+0x194>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d203      	bcs.n	800d842 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d83a:	4b17      	ldr	r3, [pc, #92]	@ (800d898 <pvPortMalloc+0x18c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a18      	ldr	r2, [pc, #96]	@ (800d8a0 <pvPortMalloc+0x194>)
 800d840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	4b13      	ldr	r3, [pc, #76]	@ (800d894 <pvPortMalloc+0x188>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	431a      	orrs	r2, r3
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d856:	4b13      	ldr	r3, [pc, #76]	@ (800d8a4 <pvPortMalloc+0x198>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3301      	adds	r3, #1
 800d85c:	4a11      	ldr	r2, [pc, #68]	@ (800d8a4 <pvPortMalloc+0x198>)
 800d85e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d860:	f7fe fcde 	bl	800c220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00b      	beq.n	800d886 <pvPortMalloc+0x17a>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	bf00      	nop
 800d884:	e7fd      	b.n	800d882 <pvPortMalloc+0x176>
	return pvReturn;
 800d886:	69fb      	ldr	r3, [r7, #28]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3728      	adds	r7, #40	@ 0x28
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	2400d340 	.word	0x2400d340
 800d894:	2400d354 	.word	0x2400d354
 800d898:	2400d344 	.word	0x2400d344
 800d89c:	2400d338 	.word	0x2400d338
 800d8a0:	2400d348 	.word	0x2400d348
 800d8a4:	2400d34c 	.word	0x2400d34c

0800d8a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d04f      	beq.n	800d95a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8ba:	2308      	movs	r3, #8
 800d8bc:	425b      	negs	r3, r3
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	4b25      	ldr	r3, [pc, #148]	@ (800d964 <vPortFree+0xbc>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <vPortFree+0x46>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	60fb      	str	r3, [r7, #12]
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	e7fd      	b.n	800d8ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00b      	beq.n	800d90e <vPortFree+0x66>
	__asm volatile
 800d8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	60bb      	str	r3, [r7, #8]
}
 800d908:	bf00      	nop
 800d90a:	bf00      	nop
 800d90c:	e7fd      	b.n	800d90a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	4b14      	ldr	r3, [pc, #80]	@ (800d964 <vPortFree+0xbc>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4013      	ands	r3, r2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d01e      	beq.n	800d95a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d11a      	bne.n	800d95a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	4b0e      	ldr	r3, [pc, #56]	@ (800d964 <vPortFree+0xbc>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	43db      	mvns	r3, r3
 800d92e:	401a      	ands	r2, r3
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d934:	f7fe fc66 	bl	800c204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	4b0a      	ldr	r3, [pc, #40]	@ (800d968 <vPortFree+0xc0>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4413      	add	r3, r2
 800d942:	4a09      	ldr	r2, [pc, #36]	@ (800d968 <vPortFree+0xc0>)
 800d944:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d946:	6938      	ldr	r0, [r7, #16]
 800d948:	f000 f874 	bl	800da34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d94c:	4b07      	ldr	r3, [pc, #28]	@ (800d96c <vPortFree+0xc4>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3301      	adds	r3, #1
 800d952:	4a06      	ldr	r2, [pc, #24]	@ (800d96c <vPortFree+0xc4>)
 800d954:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d956:	f7fe fc63 	bl	800c220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d95a:	bf00      	nop
 800d95c:	3718      	adds	r7, #24
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	2400d354 	.word	0x2400d354
 800d968:	2400d344 	.word	0x2400d344
 800d96c:	2400d350 	.word	0x2400d350

0800d970 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d976:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d97a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d97c:	4b27      	ldr	r3, [pc, #156]	@ (800da1c <prvHeapInit+0xac>)
 800d97e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f003 0307 	and.w	r3, r3, #7
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00c      	beq.n	800d9a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	3307      	adds	r3, #7
 800d98e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f023 0307 	bic.w	r3, r3, #7
 800d996:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	4a1f      	ldr	r2, [pc, #124]	@ (800da1c <prvHeapInit+0xac>)
 800d9a0:	4413      	add	r3, r2
 800d9a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800da20 <prvHeapInit+0xb0>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9ae:	4b1c      	ldr	r3, [pc, #112]	@ (800da20 <prvHeapInit+0xb0>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9bc:	2208      	movs	r2, #8
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	1a9b      	subs	r3, r3, r2
 800d9c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f023 0307 	bic.w	r3, r3, #7
 800d9ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	4a15      	ldr	r2, [pc, #84]	@ (800da24 <prvHeapInit+0xb4>)
 800d9d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9d2:	4b14      	ldr	r3, [pc, #80]	@ (800da24 <prvHeapInit+0xb4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9da:	4b12      	ldr	r3, [pc, #72]	@ (800da24 <prvHeapInit+0xb4>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	1ad2      	subs	r2, r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800da24 <prvHeapInit+0xb4>)
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	4a0a      	ldr	r2, [pc, #40]	@ (800da28 <prvHeapInit+0xb8>)
 800d9fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	4a09      	ldr	r2, [pc, #36]	@ (800da2c <prvHeapInit+0xbc>)
 800da06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da08:	4b09      	ldr	r3, [pc, #36]	@ (800da30 <prvHeapInit+0xc0>)
 800da0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800da0e:	601a      	str	r2, [r3, #0]
}
 800da10:	bf00      	nop
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr
 800da1c:	24009738 	.word	0x24009738
 800da20:	2400d338 	.word	0x2400d338
 800da24:	2400d340 	.word	0x2400d340
 800da28:	2400d348 	.word	0x2400d348
 800da2c:	2400d344 	.word	0x2400d344
 800da30:	2400d354 	.word	0x2400d354

0800da34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da3c:	4b28      	ldr	r3, [pc, #160]	@ (800dae0 <prvInsertBlockIntoFreeList+0xac>)
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e002      	b.n	800da48 <prvInsertBlockIntoFreeList+0x14>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d8f7      	bhi.n	800da42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	4413      	add	r3, r2
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	429a      	cmp	r2, r3
 800da62:	d108      	bne.n	800da76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	441a      	add	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	441a      	add	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d118      	bne.n	800dabc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	4b15      	ldr	r3, [pc, #84]	@ (800dae4 <prvInsertBlockIntoFreeList+0xb0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	429a      	cmp	r2, r3
 800da94:	d00d      	beq.n	800dab2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	685a      	ldr	r2, [r3, #4]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	441a      	add	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	e008      	b.n	800dac4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dab2:	4b0c      	ldr	r3, [pc, #48]	@ (800dae4 <prvInsertBlockIntoFreeList+0xb0>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	e003      	b.n	800dac4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d002      	beq.n	800dad2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad2:	bf00      	nop
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	2400d338 	.word	0x2400d338
 800dae4:	2400d340 	.word	0x2400d340

0800dae8 <__malloc_lock>:
 800dae8:	4801      	ldr	r0, [pc, #4]	@ (800daf0 <__malloc_lock+0x8>)
 800daea:	f000 b893 	b.w	800dc14 <__retarget_lock_acquire_recursive>
 800daee:	bf00      	nop
 800daf0:	2400d494 	.word	0x2400d494

0800daf4 <__malloc_unlock>:
 800daf4:	4801      	ldr	r0, [pc, #4]	@ (800dafc <__malloc_unlock+0x8>)
 800daf6:	f000 b88e 	b.w	800dc16 <__retarget_lock_release_recursive>
 800dafa:	bf00      	nop
 800dafc:	2400d494 	.word	0x2400d494

0800db00 <memset>:
 800db00:	4402      	add	r2, r0
 800db02:	4603      	mov	r3, r0
 800db04:	4293      	cmp	r3, r2
 800db06:	d100      	bne.n	800db0a <memset+0xa>
 800db08:	4770      	bx	lr
 800db0a:	f803 1b01 	strb.w	r1, [r3], #1
 800db0e:	e7f9      	b.n	800db04 <memset+0x4>

0800db10 <_reclaim_reent>:
 800db10:	4b2d      	ldr	r3, [pc, #180]	@ (800dbc8 <_reclaim_reent+0xb8>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4283      	cmp	r3, r0
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	4604      	mov	r4, r0
 800db1a:	d053      	beq.n	800dbc4 <_reclaim_reent+0xb4>
 800db1c:	69c3      	ldr	r3, [r0, #28]
 800db1e:	b31b      	cbz	r3, 800db68 <_reclaim_reent+0x58>
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	b163      	cbz	r3, 800db3e <_reclaim_reent+0x2e>
 800db24:	2500      	movs	r5, #0
 800db26:	69e3      	ldr	r3, [r4, #28]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	5959      	ldr	r1, [r3, r5]
 800db2c:	b9b1      	cbnz	r1, 800db5c <_reclaim_reent+0x4c>
 800db2e:	3504      	adds	r5, #4
 800db30:	2d80      	cmp	r5, #128	@ 0x80
 800db32:	d1f8      	bne.n	800db26 <_reclaim_reent+0x16>
 800db34:	69e3      	ldr	r3, [r4, #28]
 800db36:	4620      	mov	r0, r4
 800db38:	68d9      	ldr	r1, [r3, #12]
 800db3a:	f000 f87b 	bl	800dc34 <_free_r>
 800db3e:	69e3      	ldr	r3, [r4, #28]
 800db40:	6819      	ldr	r1, [r3, #0]
 800db42:	b111      	cbz	r1, 800db4a <_reclaim_reent+0x3a>
 800db44:	4620      	mov	r0, r4
 800db46:	f000 f875 	bl	800dc34 <_free_r>
 800db4a:	69e3      	ldr	r3, [r4, #28]
 800db4c:	689d      	ldr	r5, [r3, #8]
 800db4e:	b15d      	cbz	r5, 800db68 <_reclaim_reent+0x58>
 800db50:	4629      	mov	r1, r5
 800db52:	4620      	mov	r0, r4
 800db54:	682d      	ldr	r5, [r5, #0]
 800db56:	f000 f86d 	bl	800dc34 <_free_r>
 800db5a:	e7f8      	b.n	800db4e <_reclaim_reent+0x3e>
 800db5c:	680e      	ldr	r6, [r1, #0]
 800db5e:	4620      	mov	r0, r4
 800db60:	f000 f868 	bl	800dc34 <_free_r>
 800db64:	4631      	mov	r1, r6
 800db66:	e7e1      	b.n	800db2c <_reclaim_reent+0x1c>
 800db68:	6961      	ldr	r1, [r4, #20]
 800db6a:	b111      	cbz	r1, 800db72 <_reclaim_reent+0x62>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 f861 	bl	800dc34 <_free_r>
 800db72:	69e1      	ldr	r1, [r4, #28]
 800db74:	b111      	cbz	r1, 800db7c <_reclaim_reent+0x6c>
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f85c 	bl	800dc34 <_free_r>
 800db7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db7e:	b111      	cbz	r1, 800db86 <_reclaim_reent+0x76>
 800db80:	4620      	mov	r0, r4
 800db82:	f000 f857 	bl	800dc34 <_free_r>
 800db86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db88:	b111      	cbz	r1, 800db90 <_reclaim_reent+0x80>
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 f852 	bl	800dc34 <_free_r>
 800db90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800db92:	b111      	cbz	r1, 800db9a <_reclaim_reent+0x8a>
 800db94:	4620      	mov	r0, r4
 800db96:	f000 f84d 	bl	800dc34 <_free_r>
 800db9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db9c:	b111      	cbz	r1, 800dba4 <_reclaim_reent+0x94>
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 f848 	bl	800dc34 <_free_r>
 800dba4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dba6:	b111      	cbz	r1, 800dbae <_reclaim_reent+0x9e>
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 f843 	bl	800dc34 <_free_r>
 800dbae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dbb0:	b111      	cbz	r1, 800dbb8 <_reclaim_reent+0xa8>
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f000 f83e 	bl	800dc34 <_free_r>
 800dbb8:	6a23      	ldr	r3, [r4, #32]
 800dbba:	b11b      	cbz	r3, 800dbc4 <_reclaim_reent+0xb4>
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbc2:	4718      	bx	r3
 800dbc4:	bd70      	pop	{r4, r5, r6, pc}
 800dbc6:	bf00      	nop
 800dbc8:	24000014 	.word	0x24000014

0800dbcc <__libc_init_array>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	4d0d      	ldr	r5, [pc, #52]	@ (800dc04 <__libc_init_array+0x38>)
 800dbd0:	4c0d      	ldr	r4, [pc, #52]	@ (800dc08 <__libc_init_array+0x3c>)
 800dbd2:	1b64      	subs	r4, r4, r5
 800dbd4:	10a4      	asrs	r4, r4, #2
 800dbd6:	2600      	movs	r6, #0
 800dbd8:	42a6      	cmp	r6, r4
 800dbda:	d109      	bne.n	800dbf0 <__libc_init_array+0x24>
 800dbdc:	4d0b      	ldr	r5, [pc, #44]	@ (800dc0c <__libc_init_array+0x40>)
 800dbde:	4c0c      	ldr	r4, [pc, #48]	@ (800dc10 <__libc_init_array+0x44>)
 800dbe0:	f000 f872 	bl	800dcc8 <_init>
 800dbe4:	1b64      	subs	r4, r4, r5
 800dbe6:	10a4      	asrs	r4, r4, #2
 800dbe8:	2600      	movs	r6, #0
 800dbea:	42a6      	cmp	r6, r4
 800dbec:	d105      	bne.n	800dbfa <__libc_init_array+0x2e>
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf4:	4798      	blx	r3
 800dbf6:	3601      	adds	r6, #1
 800dbf8:	e7ee      	b.n	800dbd8 <__libc_init_array+0xc>
 800dbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbfe:	4798      	blx	r3
 800dc00:	3601      	adds	r6, #1
 800dc02:	e7f2      	b.n	800dbea <__libc_init_array+0x1e>
 800dc04:	0800ddc8 	.word	0x0800ddc8
 800dc08:	0800ddc8 	.word	0x0800ddc8
 800dc0c:	0800ddc8 	.word	0x0800ddc8
 800dc10:	0800ddcc 	.word	0x0800ddcc

0800dc14 <__retarget_lock_acquire_recursive>:
 800dc14:	4770      	bx	lr

0800dc16 <__retarget_lock_release_recursive>:
 800dc16:	4770      	bx	lr

0800dc18 <memcpy>:
 800dc18:	440a      	add	r2, r1
 800dc1a:	4291      	cmp	r1, r2
 800dc1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc20:	d100      	bne.n	800dc24 <memcpy+0xc>
 800dc22:	4770      	bx	lr
 800dc24:	b510      	push	{r4, lr}
 800dc26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc2e:	4291      	cmp	r1, r2
 800dc30:	d1f9      	bne.n	800dc26 <memcpy+0xe>
 800dc32:	bd10      	pop	{r4, pc}

0800dc34 <_free_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4605      	mov	r5, r0
 800dc38:	2900      	cmp	r1, #0
 800dc3a:	d041      	beq.n	800dcc0 <_free_r+0x8c>
 800dc3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc40:	1f0c      	subs	r4, r1, #4
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	bfb8      	it	lt
 800dc46:	18e4      	addlt	r4, r4, r3
 800dc48:	f7ff ff4e 	bl	800dae8 <__malloc_lock>
 800dc4c:	4a1d      	ldr	r2, [pc, #116]	@ (800dcc4 <_free_r+0x90>)
 800dc4e:	6813      	ldr	r3, [r2, #0]
 800dc50:	b933      	cbnz	r3, 800dc60 <_free_r+0x2c>
 800dc52:	6063      	str	r3, [r4, #4]
 800dc54:	6014      	str	r4, [r2, #0]
 800dc56:	4628      	mov	r0, r5
 800dc58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc5c:	f7ff bf4a 	b.w	800daf4 <__malloc_unlock>
 800dc60:	42a3      	cmp	r3, r4
 800dc62:	d908      	bls.n	800dc76 <_free_r+0x42>
 800dc64:	6820      	ldr	r0, [r4, #0]
 800dc66:	1821      	adds	r1, r4, r0
 800dc68:	428b      	cmp	r3, r1
 800dc6a:	bf01      	itttt	eq
 800dc6c:	6819      	ldreq	r1, [r3, #0]
 800dc6e:	685b      	ldreq	r3, [r3, #4]
 800dc70:	1809      	addeq	r1, r1, r0
 800dc72:	6021      	streq	r1, [r4, #0]
 800dc74:	e7ed      	b.n	800dc52 <_free_r+0x1e>
 800dc76:	461a      	mov	r2, r3
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	b10b      	cbz	r3, 800dc80 <_free_r+0x4c>
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	d9fa      	bls.n	800dc76 <_free_r+0x42>
 800dc80:	6811      	ldr	r1, [r2, #0]
 800dc82:	1850      	adds	r0, r2, r1
 800dc84:	42a0      	cmp	r0, r4
 800dc86:	d10b      	bne.n	800dca0 <_free_r+0x6c>
 800dc88:	6820      	ldr	r0, [r4, #0]
 800dc8a:	4401      	add	r1, r0
 800dc8c:	1850      	adds	r0, r2, r1
 800dc8e:	4283      	cmp	r3, r0
 800dc90:	6011      	str	r1, [r2, #0]
 800dc92:	d1e0      	bne.n	800dc56 <_free_r+0x22>
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	6053      	str	r3, [r2, #4]
 800dc9a:	4408      	add	r0, r1
 800dc9c:	6010      	str	r0, [r2, #0]
 800dc9e:	e7da      	b.n	800dc56 <_free_r+0x22>
 800dca0:	d902      	bls.n	800dca8 <_free_r+0x74>
 800dca2:	230c      	movs	r3, #12
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	e7d6      	b.n	800dc56 <_free_r+0x22>
 800dca8:	6820      	ldr	r0, [r4, #0]
 800dcaa:	1821      	adds	r1, r4, r0
 800dcac:	428b      	cmp	r3, r1
 800dcae:	bf04      	itt	eq
 800dcb0:	6819      	ldreq	r1, [r3, #0]
 800dcb2:	685b      	ldreq	r3, [r3, #4]
 800dcb4:	6063      	str	r3, [r4, #4]
 800dcb6:	bf04      	itt	eq
 800dcb8:	1809      	addeq	r1, r1, r0
 800dcba:	6021      	streq	r1, [r4, #0]
 800dcbc:	6054      	str	r4, [r2, #4]
 800dcbe:	e7ca      	b.n	800dc56 <_free_r+0x22>
 800dcc0:	bd38      	pop	{r3, r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2400d358 	.word	0x2400d358

0800dcc8 <_init>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	bf00      	nop
 800dccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcce:	bc08      	pop	{r3}
 800dcd0:	469e      	mov	lr, r3
 800dcd2:	4770      	bx	lr

0800dcd4 <_fini>:
 800dcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd6:	bf00      	nop
 800dcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcda:	bc08      	pop	{r3}
 800dcdc:	469e      	mov	lr, r3
 800dcde:	4770      	bx	lr
