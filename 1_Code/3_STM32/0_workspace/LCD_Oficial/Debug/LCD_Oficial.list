
LCD_Oficial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004cc4  08004cc4  00005cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08004ccc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  24000010  08004cdc  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000128  08004cdc  00006128  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000122e9  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002788  00000000  00000000  00018327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001028  00000000  00000000  0001aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c5f  00000000  00000000  0001bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038b9b  00000000  00000000  0001c737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015cd8  00000000  00000000  000552d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00168c7e  00000000  00000000  0006afaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d3c28  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000042c8  00000000  00000000  001d3c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001d7f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004c9c 	.word	0x08004c9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004c9c 	.word	0x08004c9c

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b3a      	ldr	r3, [pc, #232]	@ (80003d8 <MX_GPIO_Init+0x100>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a38      	ldr	r2, [pc, #224]	@ (80003d8 <MX_GPIO_Init+0x100>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b36      	ldr	r3, [pc, #216]	@ (80003d8 <MX_GPIO_Init+0x100>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a31      	ldr	r2, [pc, #196]	@ (80003d8 <MX_GPIO_Init+0x100>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b2e      	ldr	r3, [pc, #184]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b2b      	ldr	r3, [pc, #172]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000330:	4a29      	ldr	r2, [pc, #164]	@ (80003d8 <MX_GPIO_Init+0x100>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033a:	4b27      	ldr	r3, [pc, #156]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800034e:	4a22      	ldr	r2, [pc, #136]	@ (80003d8 <MX_GPIO_Init+0x100>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_GPIO_Init+0x100>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	481c      	ldr	r0, [pc, #112]	@ (80003dc <MX_GPIO_Init+0x104>)
 800036c:	f000 ff84 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000376:	4819      	ldr	r0, [pc, #100]	@ (80003dc <MX_GPIO_Init+0x104>)
 8000378:	f000 ff7e 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
 800037c:	2308      	movs	r3, #8
 800037e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	4619      	mov	r1, r3
 8000392:	4812      	ldr	r0, [pc, #72]	@ (80003dc <MX_GPIO_Init+0x104>)
 8000394:	f000 fdc0 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4619      	mov	r1, r3
 80003ac:	480c      	ldr	r0, [pc, #48]	@ (80003e0 <MX_GPIO_Init+0x108>)
 80003ae:	f000 fdb3 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80003b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003c0:	2303      	movs	r3, #3
 80003c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	4619      	mov	r1, r3
 80003ca:	4804      	ldr	r0, [pc, #16]	@ (80003dc <MX_GPIO_Init+0x104>)
 80003cc:	f000 fda4 	bl	8000f18 <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3728      	adds	r7, #40	@ 0x28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	58024400 	.word	0x58024400
 80003dc:	58021000 	.word	0x58021000
 80003e0:	58020800 	.word	0x58020800

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fc14 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f80a 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f7ff ff72 	bl	80002d8 <MX_GPIO_Init>
  MX_RTC_Init();
 80003f4:	f000 f8a4 	bl	8000540 <MX_RTC_Init>
  MX_SPI4_Init();
 80003f8:	f000 f930 	bl	800065c <MX_SPI4_Init>
  MX_TIM1_Init();
 80003fc:	f000 faf0 	bl	80009e0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <main+0x1c>

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b09c      	sub	sp, #112	@ 0x70
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040e:	224c      	movs	r2, #76	@ 0x4c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f004 fc16 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2220      	movs	r2, #32
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 fc10 	bl	8004c44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f000 ff51 	bl	80012cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	4b3e      	ldr	r3, [pc, #248]	@ (8000528 <SystemClock_Config+0x124>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a3d      	ldr	r2, [pc, #244]	@ (8000528 <SystemClock_Config+0x124>)
 8000434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b3b      	ldr	r3, [pc, #236]	@ (8000528 <SystemClock_Config+0x124>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	4b39      	ldr	r3, [pc, #228]	@ (800052c <SystemClock_Config+0x128>)
 8000446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000448:	4a38      	ldr	r2, [pc, #224]	@ (800052c <SystemClock_Config+0x128>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000450:	4b36      	ldr	r3, [pc, #216]	@ (800052c <SystemClock_Config+0x128>)
 8000452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b32      	ldr	r3, [pc, #200]	@ (8000528 <SystemClock_Config+0x124>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800046c:	f000 ff1e 	bl	80012ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000470:	f000 fc62 	bl	8000d38 <HAL_GetREVID>
 8000474:	4603      	mov	r3, r0
 8000476:	f241 0203 	movw	r2, #4099	@ 0x1003
 800047a:	4293      	cmp	r3, r2
 800047c:	d808      	bhi.n	8000490 <SystemClock_Config+0x8c>
 800047e:	4b2c      	ldr	r3, [pc, #176]	@ (8000530 <SystemClock_Config+0x12c>)
 8000480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000482:	f023 0318 	bic.w	r3, r3, #24
 8000486:	4a2a      	ldr	r2, [pc, #168]	@ (8000530 <SystemClock_Config+0x12c>)
 8000488:	f043 0308 	orr.w	r3, r3, #8
 800048c:	6713      	str	r3, [r2, #112]	@ 0x70
 800048e:	e007      	b.n	80004a0 <SystemClock_Config+0x9c>
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <SystemClock_Config+0x12c>)
 8000492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000494:	f023 0318 	bic.w	r3, r3, #24
 8000498:	4a25      	ldr	r2, [pc, #148]	@ (8000530 <SystemClock_Config+0x12c>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80004a0:	2305      	movs	r3, #5
 80004a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004aa:	2301      	movs	r3, #1
 80004ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ae:	2302      	movs	r3, #2
 80004b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b2:	2302      	movs	r3, #2
 80004b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004b6:	2305      	movs	r3, #5
 80004b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80004ba:	2360      	movs	r3, #96	@ 0x60
 80004bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004ca:	2308      	movs	r3, #8
 80004cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 ff30 	bl	8001340 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80004e6:	f000 f825 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	233f      	movs	r3, #63	@ 0x3f
 80004ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2303      	movs	r3, #3
 80004f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004f6:	2308      	movs	r3, #8
 80004f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2101      	movs	r1, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fb70 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800051a:	f000 f80b 	bl	8000534 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3770      	adds	r7, #112	@ 0x70
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	58024800 	.word	0x58024800
 800052c:	58000400 	.word	0x58000400
 8000530:	58024400 	.word	0x58024400

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <Error_Handler+0x8>

08000540 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_RTC_Init+0xb0>)
 800055a:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <MX_RTC_Init+0xb4>)
 800055c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800055e:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <MX_RTC_Init+0xb0>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_RTC_Init+0xb0>)
 8000566:	227f      	movs	r2, #127	@ 0x7f
 8000568:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800056a:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <MX_RTC_Init+0xb0>)
 800056c:	22ff      	movs	r2, #255	@ 0xff
 800056e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <MX_RTC_Init+0xb0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000576:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_RTC_Init+0xb0>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800057c:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <MX_RTC_Init+0xb0>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_RTC_Init+0xb0>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000588:	4819      	ldr	r0, [pc, #100]	@ (80005f0 <MX_RTC_Init+0xb0>)
 800058a:	f003 f9d1 	bl	8003930 <HAL_RTC_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000594:	f7ff ffce 	bl	8000534 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8000598:	2312      	movs	r3, #18
 800059a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800059c:	2300      	movs	r3, #0
 800059e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <MX_RTC_Init+0xb0>)
 80005b4:	f003 fa3e 	bl	8003a34 <HAL_RTC_SetTime>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80005be:	f7ff ffb9 	bl	8000534 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80005c2:	2301      	movs	r3, #1
 80005c4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80005c6:	2306      	movs	r3, #6
 80005c8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80005ce:	2320      	movs	r3, #32
 80005d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <MX_RTC_Init+0xb0>)
 80005da:	f003 fac9 	bl	8003b70 <HAL_RTC_SetDate>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80005e4:	f7ff ffa6 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2400002c 	.word	0x2400002c
 80005f4:	58004000 	.word	0x58004000

080005f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0b2      	sub	sp, #200	@ 0xc8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	22c0      	movs	r2, #192	@ 0xc0
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fb1b 	bl	8004c44 <memset>
  if(rtcHandle->Instance==RTC)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <HAL_RTC_MspInit+0x5c>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d119      	bne.n	800064c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000618:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000628:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fe0f 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800063c:	f7ff ff7a 	bl	8000534 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_RTC_MspInit+0x60>)
 8000642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <HAL_RTC_MspInit+0x60>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800064c:	bf00      	nop
 800064e:	37c8      	adds	r7, #200	@ 0xc8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	58004000 	.word	0x58004000
 8000658:	58024400 	.word	0x58024400

0800065c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000662:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <MX_SPI4_Init+0xac>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000668:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800066c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000670:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000674:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000676:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000678:	2207      	movs	r2, #7
 800067a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_SPI4_Init+0xa8>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_SPI4_Init+0xa8>)
 800068a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800068e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_SPI4_Init+0xa8>)
 8000692:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000696:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_SPI4_Init+0xa8>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_SPI4_Init+0xa8>)
 80006f0:	f003 fb7c 	bl	8003dec <HAL_SPI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80006fa:	f7ff ff1b 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	24000050 	.word	0x24000050
 8000708:	40013400 	.word	0x40013400

0800070c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0ba      	sub	sp, #232	@ 0xe8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	22c0      	movs	r2, #192	@ 0xc0
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f004 fa89 	bl	8004c44 <memset>
  if(spiHandle->Instance==SPI4)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a26      	ldr	r2, [pc, #152]	@ (80007d0 <HAL_SPI_MspInit+0xc4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d145      	bne.n	80007c8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800073c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000748:	2300      	movs	r3, #0
 800074a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fd7f 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800075c:	f7ff feea 	bl	8000534 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000766:	4a1b      	ldr	r2, [pc, #108]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000768:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800076c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000784:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <HAL_SPI_MspInit+0xc8>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800079c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80007a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80007b6:	2305      	movs	r3, #5
 80007b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <HAL_SPI_MspInit+0xcc>)
 80007c4:	f000 fba8 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	37e8      	adds	r7, #232	@ 0xe8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40013400 	.word	0x40013400
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58021000 	.word	0x58021000

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <HAL_MspInit+0x30>)
 80007e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007e8:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x30>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x30>)
 80007f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58024400 	.word	0x58024400

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <UsageFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 fa47 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000874:	4b43      	ldr	r3, [pc, #268]	@ (8000984 <SystemInit+0x114>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a42      	ldr	r2, [pc, #264]	@ (8000984 <SystemInit+0x114>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000884:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <SystemInit+0x118>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 030f 	and.w	r3, r3, #15
 800088c:	2b06      	cmp	r3, #6
 800088e:	d807      	bhi.n	80008a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000890:	4b3d      	ldr	r3, [pc, #244]	@ (8000988 <SystemInit+0x118>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f023 030f 	bic.w	r3, r3, #15
 8000898:	4a3b      	ldr	r2, [pc, #236]	@ (8000988 <SystemInit+0x118>)
 800089a:	f043 0307 	orr.w	r3, r3, #7
 800089e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008a0:	4b3a      	ldr	r3, [pc, #232]	@ (800098c <SystemInit+0x11c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a39      	ldr	r2, [pc, #228]	@ (800098c <SystemInit+0x11c>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008ac:	4b37      	ldr	r3, [pc, #220]	@ (800098c <SystemInit+0x11c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008b2:	4b36      	ldr	r3, [pc, #216]	@ (800098c <SystemInit+0x11c>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4935      	ldr	r1, [pc, #212]	@ (800098c <SystemInit+0x11c>)
 80008b8:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <SystemInit+0x120>)
 80008ba:	4013      	ands	r3, r2
 80008bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008be:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <SystemInit+0x118>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d007      	beq.n	80008da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <SystemInit+0x118>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 030f 	bic.w	r3, r3, #15
 80008d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000988 <SystemInit+0x118>)
 80008d4:	f043 0307 	orr.w	r3, r3, #7
 80008d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008da:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <SystemInit+0x11c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <SystemInit+0x11c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <SystemInit+0x11c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <SystemInit+0x11c>)
 80008ee:	4a29      	ldr	r2, [pc, #164]	@ (8000994 <SystemInit+0x124>)
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <SystemInit+0x11c>)
 80008f4:	4a28      	ldr	r2, [pc, #160]	@ (8000998 <SystemInit+0x128>)
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008f8:	4b24      	ldr	r3, [pc, #144]	@ (800098c <SystemInit+0x11c>)
 80008fa:	4a28      	ldr	r2, [pc, #160]	@ (800099c <SystemInit+0x12c>)
 80008fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <SystemInit+0x11c>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <SystemInit+0x11c>)
 8000906:	4a25      	ldr	r2, [pc, #148]	@ (800099c <SystemInit+0x12c>)
 8000908:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <SystemInit+0x11c>)
 800090c:	2200      	movs	r2, #0
 800090e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <SystemInit+0x11c>)
 8000912:	4a22      	ldr	r2, [pc, #136]	@ (800099c <SystemInit+0x12c>)
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <SystemInit+0x11c>)
 8000918:	2200      	movs	r2, #0
 800091a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <SystemInit+0x11c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <SystemInit+0x11c>)
 8000922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000926:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <SystemInit+0x11c>)
 800092a:	2200      	movs	r2, #0
 800092c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <SystemInit+0x130>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <SystemInit+0x134>)
 8000934:	4013      	ands	r3, r2
 8000936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800093a:	d202      	bcs.n	8000942 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <SystemInit+0x138>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <SystemInit+0x11c>)
 8000944:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d113      	bne.n	8000978 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <SystemInit+0x11c>)
 8000952:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <SystemInit+0x11c>)
 8000958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800095c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <SystemInit+0x13c>)
 8000962:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000966:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <SystemInit+0x11c>)
 800096a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800096e:	4a07      	ldr	r2, [pc, #28]	@ (800098c <SystemInit+0x11c>)
 8000970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000974:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	52002000 	.word	0x52002000
 800098c:	58024400 	.word	0x58024400
 8000990:	eaf6ed7f 	.word	0xeaf6ed7f
 8000994:	02020200 	.word	0x02020200
 8000998:	01ff0000 	.word	0x01ff0000
 800099c:	01010280 	.word	0x01010280
 80009a0:	5c001000 	.word	0x5c001000
 80009a4:	ffff0000 	.word	0xffff0000
 80009a8:	51008108 	.word	0x51008108
 80009ac:	52004000 	.word	0x52004000

080009b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <ExitRun0Mode+0x2c>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <ExitRun0Mode+0x2c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009c0:	bf00      	nop
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <ExitRun0Mode+0x2c>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f9      	beq.n	80009c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	58024800 	.word	0x58024800

080009e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	@ 0x58
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	222c      	movs	r2, #44	@ 0x2c
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f919 	bl	8004c44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a14:	4a39      	ldr	r2, [pc, #228]	@ (8000afc <MX_TIM1_Init+0x11c>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000a18:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a1a:	220b      	movs	r2, #11
 8000a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000a24:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a32:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3e:	482e      	ldr	r0, [pc, #184]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a40:	f003 fb13 	bl	800406a <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f7ff fd73 	bl	8000534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4825      	ldr	r0, [pc, #148]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a62:	f003 ffe3 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a6c:	f7ff fd62 	bl	8000534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a70:	2360      	movs	r3, #96	@ 0x60
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4818      	ldr	r0, [pc, #96]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000a96:	f003 fb3f 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000aa0:	f7ff fd48 	bl	8000534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000ada:	f004 f835 	bl	8004b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ae4:	f7ff fd26 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae8:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <MX_TIM1_Init+0x118>)
 8000aea:	f000 f82b 	bl	8000b44 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	@ 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240000d8 	.word	0x240000d8
 8000afc:	40010000 	.word	0x40010000

08000b00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d10e      	bne.n	8000b30 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x40>)
 8000b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b18:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x40>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x40>)
 8000b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	58024400 	.word	0x58024400

08000b44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <HAL_TIM_MspPostInit+0x6c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d11f      	bne.n	8000ba6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_TIM_MspPostInit+0x70>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_TIM_MspPostInit+0x70>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_TIM_MspPostInit+0x70>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <HAL_TIM_MspPostInit+0x74>)
 8000ba2:	f000 f9b9 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58021000 	.word	0x58021000

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bf8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bc0:	f7ff fef6 	bl	80009b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	f7ff fe54 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f004 f831 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fbf7 	bl	80003e4 <main>
  bx  lr
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c00:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c04:	08004ccc 	.word	0x08004ccc
  ldr r2, =_sbss
 8000c08:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c0c:	24000128 	.word	0x24000128

08000c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC3_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f94a 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c20:	f001 f99e 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_Init+0x68>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	4913      	ldr	r1, [pc, #76]	@ (8000c80 <HAL_Init+0x6c>)
 8000c32:	5ccb      	ldrb	r3, [r1, r3]
 8000c34:	f003 031f 	and.w	r3, r3, #31
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_Init+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <HAL_Init+0x6c>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_Init+0x70>)
 8000c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c58:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <HAL_Init+0x74>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f814 	bl	8000c8c <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e002      	b.n	8000c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6e:	f7ff fdb5 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	08004cb4 	.word	0x08004cb4
 8000c84:	24000004 	.word	0x24000004
 8000c88:	24000000 	.word	0x24000000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_InitTick+0x60>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e021      	b.n	8000ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_InitTick+0x64>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f921 	bl	8000efe <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f8f9 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <HAL_InitTick+0x68>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2400000c 	.word	0x2400000c
 8000cf0:	24000000 	.word	0x24000000
 8000cf4:	24000008 	.word	0x24000008

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2400000c 	.word	0x2400000c
 8000d1c:	24000124 	.word	0x24000124

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	24000124 	.word	0x24000124

08000d38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetREVID+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0c1b      	lsrs	r3, r3, #16
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	5c001000 	.word	0x5c001000

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x40>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	05fa0000 	.word	0x05fa0000

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff47 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb2 	bl	8000e70 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f26:	4b89      	ldr	r3, [pc, #548]	@ (800114c <HAL_GPIO_Init+0x234>)
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f2a:	e194      	b.n	8001256 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8186 	beq.w	8001250 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <HAL_GPIO_Init+0x44>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d130      	bne.n	8000fbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 0201 	and.w	r2, r3, #1
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d017      	beq.n	8000ffa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d123      	bne.n	800104e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0203 	and.w	r2, r3, #3
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80e0 	beq.w	8001250 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x238>)
 8001092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001096:	4a2e      	ldr	r2, [pc, #184]	@ (8001150 <HAL_GPIO_Init+0x238>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <HAL_GPIO_Init+0x238>)
 80010a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a29      	ldr	r2, [pc, #164]	@ (8001154 <HAL_GPIO_Init+0x23c>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <HAL_GPIO_Init+0x240>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d052      	beq.n	8001180 <HAL_GPIO_Init+0x268>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <HAL_GPIO_Init+0x244>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d031      	beq.n	8001146 <HAL_GPIO_Init+0x22e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001160 <HAL_GPIO_Init+0x248>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x22a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001164 <HAL_GPIO_Init+0x24c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x226>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <HAL_GPIO_Init+0x250>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x222>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <HAL_GPIO_Init+0x254>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a1a      	ldr	r2, [pc, #104]	@ (8001170 <HAL_GPIO_Init+0x258>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_GPIO_Init+0x25c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <HAL_GPIO_Init+0x260>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_GPIO_Init+0x264>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20e>
 8001122:	2309      	movs	r3, #9
 8001124:	e02d      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 8001126:	230a      	movs	r3, #10
 8001128:	e02b      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 800112a:	2308      	movs	r3, #8
 800112c:	e029      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 800112e:	2307      	movs	r3, #7
 8001130:	e027      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 8001132:	2306      	movs	r3, #6
 8001134:	e025      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 8001136:	2305      	movs	r3, #5
 8001138:	e023      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 800113a:	2304      	movs	r3, #4
 800113c:	e021      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 800113e:	2303      	movs	r3, #3
 8001140:	e01f      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 8001142:	2302      	movs	r3, #2
 8001144:	e01d      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 8001146:	2301      	movs	r3, #1
 8001148:	e01b      	b.n	8001182 <HAL_GPIO_Init+0x26a>
 800114a:	bf00      	nop
 800114c:	58000080 	.word	0x58000080
 8001150:	58024400 	.word	0x58024400
 8001154:	58000400 	.word	0x58000400
 8001158:	58020000 	.word	0x58020000
 800115c:	58020400 	.word	0x58020400
 8001160:	58020800 	.word	0x58020800
 8001164:	58020c00 	.word	0x58020c00
 8001168:	58021000 	.word	0x58021000
 800116c:	58021400 	.word	0x58021400
 8001170:	58021800 	.word	0x58021800
 8001174:	58021c00 	.word	0x58021c00
 8001178:	58022000 	.word	0x58022000
 800117c:	58022400 	.word	0x58022400
 8001180:	2300      	movs	r3, #0
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001192:	4938      	ldr	r1, [pc, #224]	@ (8001274 <HAL_GPIO_Init+0x35c>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3301      	adds	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f47f ae63 	bne.w	8000f2c <HAL_GPIO_Init+0x14>
  }
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3724      	adds	r7, #36	@ 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	58000400 	.word	0x58000400

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	58024800 	.word	0x58024800

080012cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_PWREx_ConfigSupply+0x70>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d00a      	beq.n	80012f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_PWREx_ConfigSupply+0x70>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d001      	beq.n	80012f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e01f      	b.n	8001332 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e01d      	b.n	8001332 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <HAL_PWREx_ConfigSupply+0x70>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	490f      	ldr	r1, [pc, #60]	@ (800133c <HAL_PWREx_ConfigSupply+0x70>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001306:	f7ff fd0b 	bl	8000d20 <HAL_GetTick>
 800130a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800130c:	e009      	b.n	8001322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800130e:	f7ff fd07 	bl	8000d20 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800131c:	d901      	bls.n	8001322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e007      	b.n	8001332 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_PWREx_ConfigSupply+0x70>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800132e:	d1ee      	bne.n	800130e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	58024800 	.word	0x58024800

08001340 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f000 bc48 	b.w	8001be4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8088 	beq.w	8001472 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001362:	4b99      	ldr	r3, [pc, #612]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800136c:	4b96      	ldr	r3, [pc, #600]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001374:	2b10      	cmp	r3, #16
 8001376:	d007      	beq.n	8001388 <HAL_RCC_OscConfig+0x48>
 8001378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137a:	2b18      	cmp	r3, #24
 800137c:	d111      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62>
 800137e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	4b8f      	ldr	r3, [pc, #572]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d06d      	beq.n	8001470 <HAL_RCC_OscConfig+0x130>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d169      	bne.n	8001470 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	f000 bc21 	b.w	8001be4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x7a>
 80013ac:	4b86      	ldr	r3, [pc, #536]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a85      	ldr	r2, [pc, #532]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e02e      	b.n	8001418 <HAL_RCC_OscConfig+0xd8>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x9c>
 80013c2:	4b81      	ldr	r3, [pc, #516]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a80      	ldr	r2, [pc, #512]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b7e      	ldr	r3, [pc, #504]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7d      	ldr	r2, [pc, #500]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xd8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0xc0>
 80013e6:	4b78      	ldr	r3, [pc, #480]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a77      	ldr	r2, [pc, #476]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b75      	ldr	r3, [pc, #468]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a74      	ldr	r2, [pc, #464]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xd8>
 8001400:	4b71      	ldr	r3, [pc, #452]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a70      	ldr	r2, [pc, #448]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b6e      	ldr	r3, [pc, #440]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6d      	ldr	r2, [pc, #436]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fc7e 	bl	8000d20 <HAL_GetTick>
 8001424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc7a 	bl	8000d20 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	@ 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e3d4      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800143a:	4b63      	ldr	r3, [pc, #396]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xe8>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc6a 	bl	8000d20 <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc66 	bl	8000d20 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e3c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001462:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x110>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80ca 	beq.w	8001614 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001480:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001488:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800148a:	4b4f      	ldr	r3, [pc, #316]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_RCC_OscConfig+0x166>
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	2b18      	cmp	r3, #24
 800149a:	d156      	bne.n	800154a <HAL_RCC_OscConfig+0x20a>
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d151      	bne.n	800154a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a6:	4b48      	ldr	r3, [pc, #288]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x17e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e392      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014be:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0219 	bic.w	r2, r3, #25
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	493f      	ldr	r1, [pc, #252]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc26 	bl	8000d20 <HAL_GetTick>
 80014d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc22 	bl	8000d20 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e37c      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ea:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	f7ff fc1f 	bl	8000d38 <HAL_GetREVID>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001500:	4293      	cmp	r3, r2
 8001502:	d817      	bhi.n	8001534 <HAL_RCC_OscConfig+0x1f4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b40      	cmp	r3, #64	@ 0x40
 800150a:	d108      	bne.n	800151e <HAL_RCC_OscConfig+0x1de>
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001514:	4a2c      	ldr	r2, [pc, #176]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151c:	e07a      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	4926      	ldr	r1, [pc, #152]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001532:	e06f      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	4921      	ldr	r1, [pc, #132]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	e064      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d047      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0219 	bic.w	r2, r3, #25
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	491a      	ldr	r1, [pc, #104]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbdc 	bl	8000d20 <HAL_GetTick>
 8001568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fbd8 	bl	8000d20 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e332      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	f7ff fbd5 	bl	8000d38 <HAL_GetREVID>
 800158e:	4603      	mov	r3, r0
 8001590:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001594:	4293      	cmp	r3, r2
 8001596:	d819      	bhi.n	80015cc <HAL_RCC_OscConfig+0x28c>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b40      	cmp	r3, #64	@ 0x40
 800159e:	d108      	bne.n	80015b2 <HAL_RCC_OscConfig+0x272>
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e030      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	031b      	lsls	r3, r3, #12
 80015c0:	4901      	ldr	r1, [pc, #4]	@ (80015c8 <HAL_RCC_OscConfig+0x288>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
 80015c6:	e025      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
 80015c8:	58024400 	.word	0x58024400
 80015cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	4997      	ldr	r1, [pc, #604]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e018      	b.n	8001614 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b95      	ldr	r3, [pc, #596]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a94      	ldr	r2, [pc, #592]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb97 	bl	8000d20 <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb93 	bl	8000d20 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e2ed      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001608:	4b8b      	ldr	r3, [pc, #556]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a9 	beq.w	8001774 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001622:	4b85      	ldr	r3, [pc, #532]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800162a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800162c:	4b82      	ldr	r3, [pc, #520]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b08      	cmp	r3, #8
 8001636:	d007      	beq.n	8001648 <HAL_RCC_OscConfig+0x308>
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b18      	cmp	r3, #24
 800163c:	d13a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x374>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d135      	bne.n	80016b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001648:	4b7b      	ldr	r3, [pc, #492]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x320>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b80      	cmp	r3, #128	@ 0x80
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e2c1      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001660:	f7ff fb6a 	bl	8000d38 <HAL_GetREVID>
 8001664:	4603      	mov	r3, r0
 8001666:	f241 0203 	movw	r2, #4099	@ 0x1003
 800166a:	4293      	cmp	r3, r2
 800166c:	d817      	bhi.n	800169e <HAL_RCC_OscConfig+0x35e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	2b20      	cmp	r3, #32
 8001674:	d108      	bne.n	8001688 <HAL_RCC_OscConfig+0x348>
 8001676:	4b70      	ldr	r3, [pc, #448]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800167e:	4a6e      	ldr	r2, [pc, #440]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001684:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001686:	e075      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001688:	4b6b      	ldr	r3, [pc, #428]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	069b      	lsls	r3, r3, #26
 8001696:	4968      	ldr	r1, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800169c:	e06a      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800169e:	4b66      	ldr	r3, [pc, #408]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	061b      	lsls	r3, r3, #24
 80016ac:	4962      	ldr	r1, [pc, #392]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016b2:	e05f      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d042      	beq.n	8001742 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb2a 	bl	8000d20 <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb26 	bl	8000d20 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e280      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016e2:	4b55      	ldr	r3, [pc, #340]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ee:	f7ff fb23 	bl	8000d38 <HAL_GetREVID>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d817      	bhi.n	800172c <HAL_RCC_OscConfig+0x3ec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	2b20      	cmp	r3, #32
 8001702:	d108      	bne.n	8001716 <HAL_RCC_OscConfig+0x3d6>
 8001704:	4b4c      	ldr	r3, [pc, #304]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800170c:	4a4a      	ldr	r2, [pc, #296]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800170e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001712:	6053      	str	r3, [r2, #4]
 8001714:	e02e      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
 8001716:	4b48      	ldr	r3, [pc, #288]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	069b      	lsls	r3, r3, #26
 8001724:	4944      	ldr	r1, [pc, #272]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
 800172a:	e023      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	493f      	ldr	r1, [pc, #252]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a3c      	ldr	r2, [pc, #240]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fae7 	bl	8000d20 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001756:	f7ff fae3 	bl	8000d20 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e23d      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d036      	beq.n	80017ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d019      	beq.n	80017bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178c:	4a2a      	ldr	r2, [pc, #168]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fac4 	bl	8000d20 <HAL_GetTick>
 8001798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fac0 	bl	8000d20 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e21a      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x45c>
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff faaa 	bl	8000d20 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff faa6 	bl	8000d20 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e200      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d039      	beq.n	800186e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01c      	beq.n	800183c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800180c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800180e:	f7ff fa87 	bl	8000d20 <HAL_GetTick>
 8001812:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001816:	f7ff fa83 	bl	8000d20 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1dd      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x4d6>
 8001834:	e01b      	b.n	800186e <HAL_RCC_OscConfig+0x52e>
 8001836:	bf00      	nop
 8001838:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800183c:	4b9b      	ldr	r3, [pc, #620]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9a      	ldr	r2, [pc, #616]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001848:	f7ff fa6a 	bl	8000d20 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001850:	f7ff fa66 	bl	8000d20 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001862:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8081 	beq.w	800197e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800187c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab0 <HAL_RCC_OscConfig+0x770>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a8b      	ldr	r2, [pc, #556]	@ (8001ab0 <HAL_RCC_OscConfig+0x770>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa4a 	bl	8000d20 <HAL_GetTick>
 800188c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001890:	f7ff fa46 	bl	8000d20 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1a0      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018a2:	4b83      	ldr	r3, [pc, #524]	@ (8001ab0 <HAL_RCC_OscConfig+0x770>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x584>
 80018b6:	4b7d      	ldr	r3, [pc, #500]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	4a7c      	ldr	r2, [pc, #496]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c2:	e02d      	b.n	8001920 <HAL_RCC_OscConfig+0x5e0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5a6>
 80018cc:	4b77      	ldr	r3, [pc, #476]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a76      	ldr	r2, [pc, #472]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d8:	4b74      	ldr	r3, [pc, #464]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018dc:	4a73      	ldr	r2, [pc, #460]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e4:	e01c      	b.n	8001920 <HAL_RCC_OscConfig+0x5e0>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c8>
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fe:	4a6b      	ldr	r2, [pc, #428]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6713      	str	r3, [r2, #112]	@ 0x70
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0x5e0>
 8001908:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a67      	ldr	r2, [pc, #412]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
 8001914:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001918:	4a64      	ldr	r2, [pc, #400]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d015      	beq.n	8001954 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f9fa 	bl	8000d20 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f9f6 	bl	8000d20 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e14e      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001946:	4b59      	ldr	r3, [pc, #356]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0ee      	beq.n	8001930 <HAL_RCC_OscConfig+0x5f0>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f9e4 	bl	8000d20 <HAL_GetTick>
 8001958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f9e0 	bl	8000d20 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e138      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ee      	bne.n	800195c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 812d 	beq.w	8001be2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001988:	4b48      	ldr	r3, [pc, #288]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001990:	2b18      	cmp	r3, #24
 8001992:	f000 80bd 	beq.w	8001b10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 809e 	bne.w	8001adc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a41      	ldr	r2, [pc, #260]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9b8 	bl	8000d20 <HAL_GetTick>
 80019b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f9b4 	bl	8000d20 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e10e      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c6:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d2:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80019d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <HAL_RCC_OscConfig+0x774>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	430a      	orrs	r2, r1
 80019e6:	4931      	ldr	r1, [pc, #196]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	3b01      	subs	r3, #1
 80019f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fa:	3b01      	subs	r3, #1
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	3b01      	subs	r3, #1
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a14:	3b01      	subs	r3, #1
 8001a16:	061b      	lsls	r3, r3, #24
 8001a18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a1c:	4923      	ldr	r1, [pc, #140]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	4a21      	ldr	r2, [pc, #132]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <HAL_RCC_OscConfig+0x778>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a3a:	00d2      	lsls	r2, r2, #3
 8001a3c:	491b      	ldr	r1, [pc, #108]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	f023 020c 	bic.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4917      	ldr	r1, [pc, #92]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	f023 0202 	bic.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	4912      	ldr	r1, [pc, #72]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f93d 	bl	8000d20 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa8:	e011      	b.n	8001ace <HAL_RCC_OscConfig+0x78e>
 8001aaa:	bf00      	nop
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58024800 	.word	0x58024800
 8001ab4:	fffffc0c 	.word	0xfffffc0c
 8001ab8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f930 	bl	8000d20 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e08a      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x77c>
 8001ada:	e082      	b.n	8001be2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a42      	ldr	r2, [pc, #264]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f91a 	bl	8000d20 <HAL_GetTick>
 8001aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f916 	bl	8000d20 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e070      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x7b0>
 8001b0e:	e068      	b.n	8001be2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b10:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d031      	beq.n	8001b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d12a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d122      	bne.n	8001b88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d11a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	0a5b      	lsrs	r3, r3, #9
 8001b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d111      	bne.n	8001b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0e1b      	lsrs	r3, r3, #24
 8001b7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e02b      	b.n	8001be4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d01f      	beq.n	8001be2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bae:	f7ff f8b7 	bl	8000d20 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bb4:	bf00      	nop
 8001bb6:	f7ff f8b3 	bl	8000d20 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d0f9      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_RCC_OscConfig+0x8b0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bce:	00d2      	lsls	r2, r2, #3
 8001bd0:	4906      	ldr	r1, [pc, #24]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_RCC_OscConfig+0x8ac>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3730      	adds	r7, #48	@ 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	ffff0007 	.word	0xffff0007

08001bf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e19c      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b8a      	ldr	r3, [pc, #552]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b87      	ldr	r3, [pc, #540]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 020f 	bic.w	r2, r3, #15
 8001c1e:	4985      	ldr	r1, [pc, #532]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b83      	ldr	r3, [pc, #524]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e184      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	4b7b      	ldr	r3, [pc, #492]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d908      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c54:	4b78      	ldr	r3, [pc, #480]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4975      	ldr	r1, [pc, #468]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	4b70      	ldr	r3, [pc, #448]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d908      	bls.n	8001c94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c82:	4b6d      	ldr	r3, [pc, #436]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	496a      	ldr	r1, [pc, #424]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d010      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	4b64      	ldr	r3, [pc, #400]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d908      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb0:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	495e      	ldr	r1, [pc, #376]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d010      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	4b59      	ldr	r3, [pc, #356]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d908      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cde:	4b56      	ldr	r3, [pc, #344]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4953      	ldr	r1, [pc, #332]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b4d      	ldr	r3, [pc, #308]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d908      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f023 020f 	bic.w	r2, r3, #15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4947      	ldr	r1, [pc, #284]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d055      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4940      	ldr	r1, [pc, #256]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d44:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d121      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0f6      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d5c:	4b36      	ldr	r3, [pc, #216]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d115      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ea      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0de      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d84:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d6      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f023 0207 	bic.w	r2, r3, #7
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4925      	ldr	r1, [pc, #148]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da6:	f7fe ffbb 	bl	8000d20 <HAL_GetTick>
 8001daa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dae:	f7fe ffb7 	bl	8000d20 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0be      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d1eb      	bne.n	8001dae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d208      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f023 020f 	bic.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	490e      	ldr	r1, [pc, #56]	@ (8001e38 <HAL_RCC_ClockConfig+0x244>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d214      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4906      	ldr	r1, [pc, #24]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <HAL_RCC_ClockConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e086      	b.n	8001f42 <HAL_RCC_ClockConfig+0x34e>
 8001e34:	52002000 	.word	0x52002000
 8001e38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d208      	bcs.n	8001e6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e58:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4939      	ldr	r1, [pc, #228]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d208      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e86:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	492e      	ldr	r1, [pc, #184]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d208      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4922      	ldr	r1, [pc, #136]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d208      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4917      	ldr	r1, [pc, #92]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef4:	f000 f834 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4912      	ldr	r1, [pc, #72]	@ (8001f50 <HAL_RCC_ClockConfig+0x35c>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x358>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_RCC_ClockConfig+0x35c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x360>)
 8001f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_RCC_ClockConfig+0x364>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_RCC_ClockConfig+0x368>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fea8 	bl	8000c8c <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	08004cb4 	.word	0x08004cb4
 8001f54:	24000004 	.word	0x24000004
 8001f58:	24000000 	.word	0x24000000
 8001f5c:	24000008 	.word	0x24000008

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f66:	4bb3      	ldr	r3, [pc, #716]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f6e:	2b18      	cmp	r3, #24
 8001f70:	f200 8155 	bhi.w	800221e <HAL_RCC_GetSysClockFreq+0x2be>
 8001f74:	a201      	add	r2, pc, #4	@ (adr r2, 8001f7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	08001fe1 	.word	0x08001fe1
 8001f80:	0800221f 	.word	0x0800221f
 8001f84:	0800221f 	.word	0x0800221f
 8001f88:	0800221f 	.word	0x0800221f
 8001f8c:	0800221f 	.word	0x0800221f
 8001f90:	0800221f 	.word	0x0800221f
 8001f94:	0800221f 	.word	0x0800221f
 8001f98:	0800221f 	.word	0x0800221f
 8001f9c:	08002007 	.word	0x08002007
 8001fa0:	0800221f 	.word	0x0800221f
 8001fa4:	0800221f 	.word	0x0800221f
 8001fa8:	0800221f 	.word	0x0800221f
 8001fac:	0800221f 	.word	0x0800221f
 8001fb0:	0800221f 	.word	0x0800221f
 8001fb4:	0800221f 	.word	0x0800221f
 8001fb8:	0800221f 	.word	0x0800221f
 8001fbc:	0800200d 	.word	0x0800200d
 8001fc0:	0800221f 	.word	0x0800221f
 8001fc4:	0800221f 	.word	0x0800221f
 8001fc8:	0800221f 	.word	0x0800221f
 8001fcc:	0800221f 	.word	0x0800221f
 8001fd0:	0800221f 	.word	0x0800221f
 8001fd4:	0800221f 	.word	0x0800221f
 8001fd8:	0800221f 	.word	0x0800221f
 8001fdc:	08002013 	.word	0x08002013
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fe0:	4b94      	ldr	r3, [pc, #592]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fec:	4b91      	ldr	r3, [pc, #580]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	4a90      	ldr	r2, [pc, #576]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ffe:	e111      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002000:	4b8d      	ldr	r3, [pc, #564]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002002:	61bb      	str	r3, [r7, #24]
      break;
 8002004:	e10e      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002006:	4b8d      	ldr	r3, [pc, #564]	@ (800223c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002008:	61bb      	str	r3, [r7, #24]
      break;
 800200a:	e10b      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800200c:	4b8c      	ldr	r3, [pc, #560]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800200e:	61bb      	str	r3, [r7, #24]
      break;
 8002010:	e108      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002012:	4b88      	ldr	r3, [pc, #544]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800201c:	4b85      	ldr	r3, [pc, #532]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002026:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002028:	4b82      	ldr	r3, [pc, #520]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002032:	4b80      	ldr	r3, [pc, #512]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80e1 	beq.w	8002218 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b02      	cmp	r3, #2
 800205a:	f000 8083 	beq.w	8002164 <HAL_RCC_GetSysClockFreq+0x204>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b02      	cmp	r3, #2
 8002062:	f200 80a1 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x114>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d056      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002072:	e099      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002074:	4b6f      	ldr	r3, [pc, #444]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d02d      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002080:	4b6c      	ldr	r3, [pc, #432]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	4a6b      	ldr	r2, [pc, #428]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020aa:	4b62      	ldr	r3, [pc, #392]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80020be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020da:	e087      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002248 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ee:	4b51      	ldr	r3, [pc, #324]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002102:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800210a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800210e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800211e:	e065      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800224c <HAL_RCC_GetSysClockFreq+0x2ec>
 800212e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002132:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002142:	ed97 6a02 	vldr	s12, [r7, #8]
 8002146:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800214a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002162:	e043      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002250 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002176:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002186:	ed97 6a02 	vldr	s12, [r7, #8]
 800218a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2e4>
 800218e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800219a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021a6:	e021      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800224c <HAL_RCC_GetSysClockFreq+0x2ec>
 80021b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002244 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	0a5b      	lsrs	r3, r3, #9
 80021f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021f6:	3301      	adds	r3, #1
 80021f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002204:	edd7 6a07 	vldr	s13, [r7, #28]
 8002208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002216:	e005      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
      break;
 800221c:	e002      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002220:	61bb      	str	r3, [r7, #24]
      break;
 8002222:	bf00      	nop
  }

  return sysclockfreq;
 8002224:	69bb      	ldr	r3, [r7, #24]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	58024400 	.word	0x58024400
 8002238:	03d09000 	.word	0x03d09000
 800223c:	003d0900 	.word	0x003d0900
 8002240:	017d7840 	.word	0x017d7840
 8002244:	46000000 	.word	0x46000000
 8002248:	4c742400 	.word	0x4c742400
 800224c:	4a742400 	.word	0x4a742400
 8002250:	4bbebc20 	.word	0x4bbebc20

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b0ca      	sub	sp, #296	@ 0x128
 800225a:	af00      	add	r7, sp, #0
 800225c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800226c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002278:	2500      	movs	r5, #0
 800227a:	ea54 0305 	orrs.w	r3, r4, r5
 800227e:	d049      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002286:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800228a:	d02f      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800228c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002290:	d828      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002296:	d01a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002298:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800229c:	d822      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022a6:	d007      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022a8:	e01c      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022aa:	4bb8      	ldr	r3, [pc, #736]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	4ab7      	ldr	r2, [pc, #732]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022b6:	e01a      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80022b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022bc:	3308      	adds	r3, #8
 80022be:	2102      	movs	r1, #2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 f9d1 	bl	8003668 <RCCEx_PLL2_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022cc:	e00f      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80022ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022d2:	3328      	adds	r3, #40	@ 0x28
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fa78 	bl	80037cc <RCCEx_PLL3_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80022e2:	e004      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022ea:	e000      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80022ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022f6:	4ba5      	ldr	r3, [pc, #660]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80022fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002304:	4aa1      	ldr	r2, [pc, #644]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002306:	430b      	orrs	r3, r1
 8002308:	6513      	str	r3, [r2, #80]	@ 0x50
 800230a:	e003      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800230c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002320:	f04f 0900 	mov.w	r9, #0
 8002324:	ea58 0309 	orrs.w	r3, r8, r9
 8002328:	d047      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800232a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	2b04      	cmp	r3, #4
 8002332:	d82a      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002334:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	08002351 	.word	0x08002351
 8002340:	0800235f 	.word	0x0800235f
 8002344:	08002375 	.word	0x08002375
 8002348:	08002393 	.word	0x08002393
 800234c:	08002393 	.word	0x08002393
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002350:	4b8e      	ldr	r3, [pc, #568]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	4a8d      	ldr	r2, [pc, #564]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800235c:	e01a      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800235e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002362:	3308      	adds	r3, #8
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f97e 	bl	8003668 <RCCEx_PLL2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002372:	e00f      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002378:	3328      	adds	r3, #40	@ 0x28
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f001 fa25 	bl	80037cc <RCCEx_PLL3_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002388:	e004      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002390:	e000      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800239c:	4b7b      	ldr	r3, [pc, #492]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a0:	f023 0107 	bic.w	r1, r3, #7
 80023a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	4a78      	ldr	r2, [pc, #480]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80023b0:	e003      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80023c6:	f04f 0b00 	mov.w	fp, #0
 80023ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80023ce:	d04c      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80023d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023da:	d030      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e0:	d829      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80023e4:	d02d      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80023e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80023e8:	d825      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023ea:	2b80      	cmp	r3, #128	@ 0x80
 80023ec:	d018      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80023ee:	2b80      	cmp	r3, #128	@ 0x80
 80023f0:	d821      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80023f6:	2b40      	cmp	r3, #64	@ 0x40
 80023f8:	d007      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80023fa:	e01c      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fc:	4b63      	ldr	r3, [pc, #396]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	4a62      	ldr	r2, [pc, #392]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002408:	e01c      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800240a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800240e:	3308      	adds	r3, #8
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f001 f928 	bl	8003668 <RCCEx_PLL2_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800241e:	e011      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002424:	3328      	adds	r3, #40	@ 0x28
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f001 f9cf 	bl	80037cc <RCCEx_PLL3_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002434:	e006      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800243c:	e002      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800244c:	4b4f      	ldr	r3, [pc, #316]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800244e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002450:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245a:	4a4c      	ldr	r2, [pc, #304]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800245c:	430b      	orrs	r3, r1
 800245e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800246a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002476:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002480:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002484:	460b      	mov	r3, r1
 8002486:	4313      	orrs	r3, r2
 8002488:	d053      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800248a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800248e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002492:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002496:	d035      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002498:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800249c:	d82e      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800249e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80024a2:	d031      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80024a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80024a8:	d828      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ae:	d01a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b4:	d822      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80024ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024be:	d007      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80024c0:	e01c      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c2:	4b32      	ldr	r3, [pc, #200]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	4a31      	ldr	r2, [pc, #196]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ce:	e01c      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024d4:	3308      	adds	r3, #8
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 f8c5 	bl	8003668 <RCCEx_PLL2_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80024e4:	e011      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ea:	3328      	adds	r3, #40	@ 0x28
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 f96c 	bl	80037cc <RCCEx_PLL3_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024fa:	e006      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002502:	e002      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002504:	bf00      	nop
 8002506:	e000      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800250a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800251e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002522:	4a1a      	ldr	r2, [pc, #104]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002524:	430b      	orrs	r3, r1
 8002526:	6593      	str	r3, [r2, #88]	@ 0x58
 8002528:	e003      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800252e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800253e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002548:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800254c:	460b      	mov	r3, r1
 800254e:	4313      	orrs	r3, r2
 8002550:	d056      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800255e:	d038      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002564:	d831      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002566:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800256a:	d034      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800256c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002570:	d82b      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002576:	d01d      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800257c:	d825      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002588:	e01f      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800258a:	bf00      	nop
 800258c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002590:	4ba2      	ldr	r3, [pc, #648]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	4aa1      	ldr	r2, [pc, #644]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800259a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800259c:	e01c      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800259e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025a2:	3308      	adds	r3, #8
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 f85e 	bl	8003668 <RCCEx_PLL2_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025b2:	e011      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b8:	3328      	adds	r3, #40	@ 0x28
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 f905 	bl	80037cc <RCCEx_PLL3_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025c8:	e006      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025d0:	e002      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80025d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80025e0:	4b8e      	ldr	r3, [pc, #568]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80025e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025f0:	4a8a      	ldr	r2, [pc, #552]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025f2:	430b      	orrs	r3, r1
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f6:	e003      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800260c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002616:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800261a:	460b      	mov	r3, r1
 800261c:	4313      	orrs	r3, r2
 800261e:	d03a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	2b30      	cmp	r3, #48	@ 0x30
 8002628:	d01f      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800262a:	2b30      	cmp	r3, #48	@ 0x30
 800262c:	d819      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800262e:	2b20      	cmp	r3, #32
 8002630:	d00c      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002632:	2b20      	cmp	r3, #32
 8002634:	d815      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800263a:	2b10      	cmp	r3, #16
 800263c:	d111      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263e:	4b77      	ldr	r3, [pc, #476]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	4a76      	ldr	r2, [pc, #472]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800264a:	e011      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800264c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002650:	3308      	adds	r3, #8
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f001 f807 	bl	8003668 <RCCEx_PLL2_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002660:	e006      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002668:	e002      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800266e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002678:	4b68      	ldr	r3, [pc, #416]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	4a65      	ldr	r2, [pc, #404]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002688:	430b      	orrs	r3, r1
 800268a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268c:	e003      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80026a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80026ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4313      	orrs	r3, r2
 80026b4:	d051      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80026b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c0:	d035      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80026c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c6:	d82e      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026cc:	d031      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80026ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026d2:	d828      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d8:	d01a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80026da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026de:	d822      	bhi.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e8:	d007      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80026ea:	e01c      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	4a4a      	ldr	r2, [pc, #296]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80026f8:	e01c      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026fe:	3308      	adds	r3, #8
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f000 ffb0 	bl	8003668 <RCCEx_PLL2_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800270e:	e011      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002714:	3328      	adds	r3, #40	@ 0x28
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f857 	bl	80037cc <RCCEx_PLL3_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002724:	e006      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800272c:	e002      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800273c:	4b37      	ldr	r3, [pc, #220]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800273e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002740:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800274c:	430b      	orrs	r3, r1
 800274e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002750:	e003      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800275a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002770:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002774:	460b      	mov	r3, r1
 8002776:	4313      	orrs	r3, r2
 8002778:	d056      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800277a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800277e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d033      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002786:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800278a:	d82c      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800278c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002790:	d02f      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002796:	d826      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800279c:	d02b      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800279e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027a2:	d820      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80027a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027a8:	d012      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80027aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027ae:	d81a      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d022      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b8:	d115      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027be:	3308      	adds	r3, #8
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 ff50 	bl	8003668 <RCCEx_PLL2_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80027ce:	e015      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d4:	3328      	adds	r3, #40	@ 0x28
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fff7 	bl	80037cc <RCCEx_PLL3_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80027e4:	e00a      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027ec:	e006      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027ee:	bf00      	nop
 80027f0:	e004      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027f2:	bf00      	nop
 80027f4:	e002      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80027fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002808:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002812:	4a02      	ldr	r2, [pc, #8]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002814:	430b      	orrs	r3, r1
 8002816:	6513      	str	r3, [r2, #80]	@ 0x50
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800283e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002842:	460b      	mov	r3, r1
 8002844:	4313      	orrs	r3, r2
 8002846:	d055      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800284c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002854:	d033      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002856:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800285a:	d82c      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002860:	d02f      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002866:	d826      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002868:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800286c:	d02b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800286e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002872:	d820      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002878:	d012      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800287a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800287e:	d81a      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d022      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002888:	d115      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800288a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800288e:	3308      	adds	r3, #8
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fee8 	bl	8003668 <RCCEx_PLL2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800289e:	e015      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a4:	3328      	adds	r3, #40	@ 0x28
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 ff8f 	bl	80037cc <RCCEx_PLL3_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028b4:	e00a      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028be:	bf00      	nop
 80028c0:	e004      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028c2:	bf00      	nop
 80028c4:	e002      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80028ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028d4:	4ba3      	ldr	r3, [pc, #652]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80028dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028e4:	4a9f      	ldr	r2, [pc, #636]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ea:	e003      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800290a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800290e:	460b      	mov	r3, r1
 8002910:	4313      	orrs	r3, r2
 8002912:	d037      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800291e:	d00e      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002924:	d816      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d018      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800292a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800292e:	d111      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002930:	4b8c      	ldr	r3, [pc, #560]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	4a8b      	ldr	r2, [pc, #556]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800293c:	e00f      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002942:	3308      	adds	r3, #8
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fe8e 	bl	8003668 <RCCEx_PLL2_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002952:	e004      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800295a:	e000      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800295c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800296e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a7b      	ldr	r2, [pc, #492]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6513      	str	r3, [r2, #80]	@ 0x50
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800299a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d039      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d81c      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80029ae:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029f1 	.word	0x080029f1
 80029b8:	080029c5 	.word	0x080029c5
 80029bc:	080029d3 	.word	0x080029d3
 80029c0:	080029f1 	.word	0x080029f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c4:	4b67      	ldr	r3, [pc, #412]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	4a66      	ldr	r2, [pc, #408]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80029d0:	e00f      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d6:	3308      	adds	r3, #8
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fe44 	bl	8003668 <RCCEx_PLL2_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80029e6:	e004      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80029f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80029fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f023 0103 	bic.w	r1, r3, #3
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a08:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0e:	e003      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002a32:	460b      	mov	r3, r1
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f000 809f 	beq.w	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a46:	f7fe f96b 	bl	8000d20 <HAL_GetTick>
 8002a4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe f966 	bl	8000d20 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	@ 0x64
 8002a5e:	d903      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a68:	4b3f      	ldr	r3, [pc, #252]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ed      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d179      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a7c:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a88:	4053      	eors	r3, r2
 8002a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a9e:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a30      	ldr	r2, [pc, #192]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a2d      	ldr	r2, [pc, #180]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aca:	d118      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe f928 	bl	8000d20 <HAL_GetTick>
 8002ad0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad4:	e00d      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe f923 	bl	8000d20 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d903      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002af0:	e005      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0eb      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d129      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b16:	d10e      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b28:	091a      	lsrs	r2, r3, #4
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6113      	str	r3, [r2, #16]
 8002b34:	e005      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002b36:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b40:	6113      	str	r3, [r2, #16]
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	e00e      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002b62:	e009      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002b64:	58024400 	.word	0x58024400
 8002b68:	58024800 	.word	0x58024800
 8002b6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f002 0301 	and.w	r3, r2, #1
 8002b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f000 8089 	beq.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ba0:	2b28      	cmp	r3, #40	@ 0x28
 8002ba2:	d86b      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002c85 	.word	0x08002c85
 8002bb0:	08002c7d 	.word	0x08002c7d
 8002bb4:	08002c7d 	.word	0x08002c7d
 8002bb8:	08002c7d 	.word	0x08002c7d
 8002bbc:	08002c7d 	.word	0x08002c7d
 8002bc0:	08002c7d 	.word	0x08002c7d
 8002bc4:	08002c7d 	.word	0x08002c7d
 8002bc8:	08002c7d 	.word	0x08002c7d
 8002bcc:	08002c51 	.word	0x08002c51
 8002bd0:	08002c7d 	.word	0x08002c7d
 8002bd4:	08002c7d 	.word	0x08002c7d
 8002bd8:	08002c7d 	.word	0x08002c7d
 8002bdc:	08002c7d 	.word	0x08002c7d
 8002be0:	08002c7d 	.word	0x08002c7d
 8002be4:	08002c7d 	.word	0x08002c7d
 8002be8:	08002c7d 	.word	0x08002c7d
 8002bec:	08002c67 	.word	0x08002c67
 8002bf0:	08002c7d 	.word	0x08002c7d
 8002bf4:	08002c7d 	.word	0x08002c7d
 8002bf8:	08002c7d 	.word	0x08002c7d
 8002bfc:	08002c7d 	.word	0x08002c7d
 8002c00:	08002c7d 	.word	0x08002c7d
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c85 	.word	0x08002c85
 8002c10:	08002c7d 	.word	0x08002c7d
 8002c14:	08002c7d 	.word	0x08002c7d
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002c7d 	.word	0x08002c7d
 8002c20:	08002c7d 	.word	0x08002c7d
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c85 	.word	0x08002c85
 8002c30:	08002c7d 	.word	0x08002c7d
 8002c34:	08002c7d 	.word	0x08002c7d
 8002c38:	08002c7d 	.word	0x08002c7d
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c7d 	.word	0x08002c7d
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002c85 	.word	0x08002c85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	3308      	adds	r3, #8
 8002c56:	2101      	movs	r1, #1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fd05 	bl	8003668 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002c64:	e00f      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6a:	3328      	adds	r3, #40	@ 0x28
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fdac 	bl	80037cc <RCCEx_PLL3_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c82:	e000      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c8e:	4bbf      	ldr	r3, [pc, #764]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9c:	4abb      	ldr	r2, [pc, #748]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ca2:	e003      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f002 0302 	and.w	r3, r2, #2
 8002cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002cc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	d041      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d824      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d29 	.word	0x08002d29
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002d0b 	.word	0x08002d0b
 8002ce8:	08002d29 	.word	0x08002d29
 8002cec:	08002d29 	.word	0x08002d29
 8002cf0:	08002d29 	.word	0x08002d29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fcb3 	bl	8003668 <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d08:	e00f      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0e:	3328      	adds	r3, #40	@ 0x28
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd5a 	bl	80037cc <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d32:	4b96      	ldr	r3, [pc, #600]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	f023 0107 	bic.w	r1, r3, #7
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d40:	4a92      	ldr	r2, [pc, #584]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f002 0304 	and.w	r3, r2, #4
 8002d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	d044      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d825      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002dd1 	.word	0x08002dd1
 8002d88:	08002d9d 	.word	0x08002d9d
 8002d8c:	08002db3 	.word	0x08002db3
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dd1 	.word	0x08002dd1
 8002d98:	08002dd1 	.word	0x08002dd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	3308      	adds	r3, #8
 8002da2:	2101      	movs	r1, #1
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fc5f 	bl	8003668 <RCCEx_PLL2_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002db0:	e00f      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db6:	3328      	adds	r3, #40	@ 0x28
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fd06 	bl	80037cc <RCCEx_PLL3_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dda:	4b6c      	ldr	r3, [pc, #432]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	f023 0107 	bic.w	r1, r3, #7
 8002de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	4a68      	ldr	r2, [pc, #416]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f002 0320 	and.w	r3, r2, #32
 8002e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e14:	460b      	mov	r3, r1
 8002e16:	4313      	orrs	r3, r2
 8002e18:	d055      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e26:	d033      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e2c:	d82c      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d02f      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e38:	d826      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e3e:	d02b      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e44:	d820      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e4a:	d012      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e50:	d81a      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d022      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e5a:	d115      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	3308      	adds	r3, #8
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fbff 	bl	8003668 <RCCEx_PLL2_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e70:	e015      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e76:	3328      	adds	r3, #40	@ 0x28
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fca6 	bl	80037cc <RCCEx_PLL3_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002e86:	e00a      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e8e:	e006      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e90:	bf00      	nop
 8002e92:	e004      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e94:	bf00      	nop
 8002e96:	e002      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e98:	bf00      	nop
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	4a35      	ldr	r2, [pc, #212]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002edc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	d058      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002ef2:	d033      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002ef4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002ef8:	d82c      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	d02f      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f04:	d826      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f0a:	d02b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f10:	d820      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f16:	d012      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f1c:	d81a      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d022      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d115      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fb99 	bl	8003668 <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f3c:	e015      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f42:	3328      	adds	r3, #40	@ 0x28
 8002f44:	2102      	movs	r1, #2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc40 	bl	80037cc <RCCEx_PLL3_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f52:	e00a      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f5c:	bf00      	nop
 8002f5e:	e004      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f60:	bf00      	nop
 8002f62:	e002      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10e      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f82:	4a02      	ldr	r2, [pc, #8]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f88:	e006      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002f8a:	bf00      	nop
 8002f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	d055      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002fc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002fc4:	d033      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002fc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002fca:	d82c      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd0:	d02f      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd6:	d826      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002fdc:	d02b      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002fde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002fe2:	d820      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fe8:	d012      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fee:	d81a      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d022      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff8:	d115      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffe:	3308      	adds	r3, #8
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fb30 	bl	8003668 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800300e:	e015      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003014:	3328      	adds	r3, #40	@ 0x28
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fbd7 	bl	80037cc <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003024:	e00a      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800303a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003044:	4ba1      	ldr	r3, [pc, #644]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003054:	4a9d      	ldr	r2, [pc, #628]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003056:	430b      	orrs	r3, r1
 8003058:	6593      	str	r3, [r2, #88]	@ 0x58
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f002 0308 	and.w	r3, r2, #8
 8003070:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800307a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800307e:	460b      	mov	r3, r1
 8003080:	4313      	orrs	r3, r2
 8003082:	d01e      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003090:	d10c      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003096:	3328      	adds	r3, #40	@ 0x28
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb96 	bl	80037cc <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030ac:	4b87      	ldr	r3, [pc, #540]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030bc:	4a83      	ldr	r2, [pc, #524]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030be:	430b      	orrs	r3, r1
 80030c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	f002 0310 	and.w	r3, r2, #16
 80030ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80030dc:	460b      	mov	r3, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	d01e      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d10c      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80030f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f4:	3328      	adds	r3, #40	@ 0x28
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fb67 	bl	80037cc <RCCEx_PLL3_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800310a:	4b70      	ldr	r3, [pc, #448]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800311a:	4a6c      	ldr	r2, [pc, #432]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800312c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003136:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800313a:	460b      	mov	r3, r1
 800313c:	4313      	orrs	r3, r2
 800313e:	d03e      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314c:	d022      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003152:	d81b      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315c:	d00b      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800315e:	e015      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	3308      	adds	r3, #8
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa7d 	bl	8003668 <RCCEx_PLL2_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003174:	e00f      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317a:	3328      	adds	r3, #40	@ 0x28
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fb24 	bl	80037cc <RCCEx_PLL3_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800318a:	e004      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003192:	e000      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10b      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800319e:	4b4b      	ldr	r3, [pc, #300]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ae:	4a47      	ldr	r2, [pc, #284]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b4:	e003      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80031ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031cc:	2300      	movs	r3, #0
 80031ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80031d4:	460b      	mov	r3, r1
 80031d6:	4313      	orrs	r3, r2
 80031d8:	d03b      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031e6:	d01f      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80031e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031ec:	d818      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80031ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f2:	d003      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80031f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f8:	d007      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80031fa:	e011      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fc:	4b33      	ldr	r3, [pc, #204]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	4a32      	ldr	r2, [pc, #200]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003208:	e00f      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fada 	bl	80037cc <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003232:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	4a22      	ldr	r2, [pc, #136]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6553      	str	r3, [r2, #84]	@ 0x54
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800325e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003260:	2300      	movs	r3, #0
 8003262:	677b      	str	r3, [r7, #116]	@ 0x74
 8003264:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003268:	460b      	mov	r3, r1
 800326a:	4313      	orrs	r3, r2
 800326c:	d034      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d007      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	4a11      	ldr	r2, [pc, #68]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800328c:	e00e      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	3308      	adds	r3, #8
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f9e6 	bl	8003668 <RCCEx_PLL2_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80032a2:	e003      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	4a02      	ldr	r2, [pc, #8]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80032e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032e6:	2300      	movs	r3, #0
 80032e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d00c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f8:	3328      	adds	r3, #40	@ 0x28
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fa65 	bl	80037cc <RCCEx_PLL3_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800331a:	663b      	str	r3, [r7, #96]	@ 0x60
 800331c:	2300      	movs	r3, #0
 800331e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003320:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d038      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003336:	d018      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800333c:	d811      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800333e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003342:	d014      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003348:	d80b      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800334e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003352:	d106      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003354:	4bc3      	ldr	r3, [pc, #780]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	4ac2      	ldr	r2, [pc, #776]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800335a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800335e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003360:	e008      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800337c:	4bb9      	ldr	r3, [pc, #740]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800337e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003380:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800338c:	4ab5      	ldr	r2, [pc, #724]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800338e:	430b      	orrs	r3, r1
 8003390:	6553      	str	r3, [r2, #84]	@ 0x54
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80033a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033aa:	2300      	movs	r3, #0
 80033ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033b8:	4baa      	ldr	r3, [pc, #680]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c6:	4aa7      	ldr	r2, [pc, #668]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80033d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80033da:	2300      	movs	r3, #0
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80033de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033e8:	4b9e      	ldr	r3, [pc, #632]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033f8:	4a9a      	ldr	r2, [pc, #616]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800340a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800340c:	2300      	movs	r3, #0
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003410:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800341a:	4b92      	ldr	r3, [pc, #584]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003428:	4a8e      	ldr	r2, [pc, #568]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800342a:	430b      	orrs	r3, r1
 800342c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800343a:	643b      	str	r3, [r7, #64]	@ 0x40
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003440:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003444:	460b      	mov	r3, r1
 8003446:	4313      	orrs	r3, r2
 8003448:	d00e      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800344a:	4b86      	ldr	r3, [pc, #536]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a85      	ldr	r2, [pc, #532]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003450:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003454:	6113      	str	r3, [r2, #16]
 8003456:	4b83      	ldr	r3, [pc, #524]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003462:	4a80      	ldr	r2, [pc, #512]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003476:	2300      	movs	r3, #0
 8003478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800347e:	460b      	mov	r3, r1
 8003480:	4313      	orrs	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003484:	4b77      	ldr	r3, [pc, #476]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003488:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	4a74      	ldr	r2, [pc, #464]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003494:	430b      	orrs	r3, r1
 8003496:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80034a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034a6:	2300      	movs	r3, #0
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d00a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034c4:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c6:	430b      	orrs	r3, r1
 80034c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	2100      	movs	r1, #0
 80034d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d011      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ea:	3308      	adds	r3, #8
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f8ba 	bl	8003668 <RCCEx_PLL2_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	2100      	movs	r1, #0
 8003514:	6239      	str	r1, [r7, #32]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d011      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352a:	3308      	adds	r3, #8
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f89a 	bl	8003668 <RCCEx_PLL2_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	2100      	movs	r1, #0
 8003554:	61b9      	str	r1, [r7, #24]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d011      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	3308      	adds	r3, #8
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f87a 	bl	8003668 <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	2100      	movs	r1, #0
 8003594:	6139      	str	r1, [r7, #16]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035a0:	460b      	mov	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	d011      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	3328      	adds	r3, #40	@ 0x28
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f90c 	bl	80037cc <RCCEx_PLL3_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80035ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	2100      	movs	r1, #0
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80035e0:	460b      	mov	r3, r1
 80035e2:	4313      	orrs	r3, r2
 80035e4:	d011      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	3328      	adds	r3, #40	@ 0x28
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f8ec 	bl	80037cc <RCCEx_PLL3_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	2100      	movs	r1, #0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d011      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	3328      	adds	r3, #40	@ 0x28
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f8cc 	bl	80037cc <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800363a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800364a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800365e:	46bd      	mov	sp, r7
 8003660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003664:	58024400 	.word	0x58024400

08003668 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003676:	4b53      	ldr	r3, [pc, #332]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d101      	bne.n	8003686 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e099      	b.n	80037ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003686:	4b4f      	ldr	r3, [pc, #316]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4e      	ldr	r2, [pc, #312]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800368c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003692:	f7fd fb45 	bl	8000d20 <HAL_GetTick>
 8003696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003698:	e008      	b.n	80036ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800369a:	f7fd fb41 	bl	8000d20 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e086      	b.n	80037ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036ac:	4b45      	ldr	r3, [pc, #276]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036b8:	4b42      	ldr	r3, [pc, #264]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	493f      	ldr	r1, [pc, #252]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	b29b      	uxth	r3, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036fc:	4931      	ldr	r1, [pc, #196]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003702:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	492d      	ldr	r1, [pc, #180]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003714:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f023 0220 	bic.w	r2, r3, #32
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4928      	ldr	r1, [pc, #160]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003726:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	4a26      	ldr	r2, [pc, #152]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800372c:	f023 0310 	bic.w	r3, r3, #16
 8003730:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <RCCEx_PLL2_Config+0x160>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	69d2      	ldr	r2, [r2, #28]
 800373e:	00d2      	lsls	r2, r2, #3
 8003740:	4920      	ldr	r1, [pc, #128]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003746:	4b1f      	ldr	r3, [pc, #124]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374a:	4a1e      	ldr	r2, [pc, #120]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003758:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800375e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003764:	e00f      	b.n	8003786 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003776:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003778:	e005      	b.n	8003786 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800377a:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	4a11      	ldr	r2, [pc, #68]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003780:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003784:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003786:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0e      	ldr	r2, [pc, #56]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 800378c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003792:	f7fd fac5 	bl	8000d20 <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003798:	e008      	b.n	80037ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800379a:	f7fd fac1 	bl	8000d20 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037ac:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <RCCEx_PLL2_Config+0x15c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	58024400 	.word	0x58024400
 80037c8:	ffff0007 	.word	0xffff0007

080037cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037da:	4b53      	ldr	r3, [pc, #332]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d101      	bne.n	80037ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e099      	b.n	800391e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f6:	f7fd fa93 	bl	8000d20 <HAL_GetTick>
 80037fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037fc:	e008      	b.n	8003810 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80037fe:	f7fd fa8f 	bl	8000d20 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e086      	b.n	800391e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003810:	4b45      	ldr	r3, [pc, #276]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f0      	bne.n	80037fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800381c:	4b42      	ldr	r3, [pc, #264]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	493f      	ldr	r1, [pc, #252]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	3b01      	subs	r3, #1
 8003836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	3b01      	subs	r3, #1
 8003840:	025b      	lsls	r3, r3, #9
 8003842:	b29b      	uxth	r3, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	3b01      	subs	r3, #1
 800385a:	061b      	lsls	r3, r3, #24
 800385c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003860:	4931      	ldr	r1, [pc, #196]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003866:	4b30      	ldr	r3, [pc, #192]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	492d      	ldr	r1, [pc, #180]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003878:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4928      	ldr	r1, [pc, #160]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 800388c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388e:	4a26      	ldr	r2, [pc, #152]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003896:	4b24      	ldr	r3, [pc, #144]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389a:	4b24      	ldr	r3, [pc, #144]	@ (800392c <RCCEx_PLL3_Config+0x160>)
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	69d2      	ldr	r2, [r2, #28]
 80038a2:	00d2      	lsls	r2, r2, #3
 80038a4:	4920      	ldr	r1, [pc, #128]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	4a19      	ldr	r2, [pc, #100]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038c8:	e00f      	b.n	80038ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038d0:	4b15      	ldr	r3, [pc, #84]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038dc:	e005      	b.n	80038ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038de:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	4a11      	ldr	r2, [pc, #68]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f6:	f7fd fa13 	bl	8000d20 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038fc:	e008      	b.n	8003910 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80038fe:	f7fd fa0f 	bl	8000d20 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e006      	b.n	800391e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <RCCEx_PLL3_Config+0x15c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
 800392c:	ffff0007 	.word	0xffff0007

08003930 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d071      	beq.n	8003a26 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc fe4e 	bl	80005f8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	d050      	beq.n	8003a14 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	22ca      	movs	r2, #202	@ 0xca
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2253      	movs	r2, #83	@ 0x53
 8003980:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9a0 	bl	8003cc8 <RTC_EnterInitMode>
 8003988:	4603      	mov	r3, r0
 800398a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d124      	bne.n	80039dc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6899      	ldr	r1, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <HAL_RTC_Init+0x100>)
 800399e:	400b      	ands	r3, r1
 80039a0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	0419      	lsls	r1, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9ac 	bl	8003d30 <RTC_ExitInitMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d113      	bne.n	8003a0a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0203 	bic.w	r2, r2, #3
 80039f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	22ff      	movs	r2, #255	@ 0xff
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a12:	e001      	b.n	8003a18 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	ff8fffbf 	.word	0xff8fffbf

08003a34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_RTC_SetTime+0x1a>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e089      	b.n	8003b62 <HAL_RTC_SetTime+0x12e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	22ca      	movs	r2, #202	@ 0xca
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2253      	movs	r2, #83	@ 0x53
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f92a 	bl	8003cc8 <RTC_EnterInitMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d161      	bne.n	8003b42 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d126      	bne.n	8003ad2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f985 	bl	8003dac <RTC_ByteToBcd2>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f97e 	bl	8003dac <RTC_ByteToBcd2>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ab4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	789b      	ldrb	r3, [r3, #2]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f976 	bl	8003dac <RTC_ByteToBcd2>
 8003ac0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ac2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e018      	b.n	8003b04 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003af2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003af8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	78db      	ldrb	r3, [r3, #3]
 8003afe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	6979      	ldr	r1, [r7, #20]
 8003b0a:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <HAL_RTC_SetTime+0x138>)
 8003b0c:	400b      	ands	r3, r1
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8f9 	bl	8003d30 <RTC_ExitInitMode>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	22ff      	movs	r2, #255	@ 0xff
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	007f7f7f 	.word	0x007f7f7f

08003b70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_RTC_SetDate+0x1a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e073      	b.n	8003c72 <HAL_RTC_SetDate+0x102>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10e      	bne.n	8003bbe <HAL_RTC_SetDate+0x4e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	f023 0310 	bic.w	r3, r3, #16
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	330a      	adds	r3, #10
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11c      	bne.n	8003bfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	78db      	ldrb	r3, [r3, #3]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f8ef 	bl	8003dac <RTC_ByteToBcd2>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8e8 	bl	8003dac <RTC_ByteToBcd2>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003be0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	789b      	ldrb	r3, [r3, #2]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f8e0 	bl	8003dac <RTC_ByteToBcd2>
 8003bec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e00e      	b.n	8003c1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c0a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	22ca      	movs	r2, #202	@ 0xca
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2253      	movs	r2, #83	@ 0x53
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f84b 	bl	8003cc8 <RTC_EnterInitMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <HAL_RTC_SetDate+0x10c>)
 8003c44:	400b      	ands	r3, r1
 8003c46:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f871 	bl	8003d30 <RTC_ExitInitMode>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	22ff      	movs	r2, #255	@ 0xff
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]


}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	00ffff3f 	.word	0x00ffff3f

08003c80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc4 <HAL_RTC_WaitForSynchro+0x44>)
 8003c8e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8003c90:	f7fd f846 	bl	8000d20 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c96:	e009      	b.n	8003cac <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c98:	f7fd f842 	bl	8000d20 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ca6:	d901      	bls.n	8003cac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e007      	b.n	8003cbc <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ee      	beq.n	8003c98 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	0003ff5f 	.word	0x0003ff5f

08003cc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d120      	bne.n	8003d24 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003cec:	f7fd f818 	bl	8000d20 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cf2:	e00d      	b.n	8003d10 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003cf4:	f7fd f814 	bl	8000d20 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d02:	d905      	bls.n	8003d10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <RTC_EnterInitMode+0x5c>
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d1e7      	bne.n	8003cf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d46:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003d48:	4b17      	ldr	r3, [pc, #92]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10c      	bne.n	8003d6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff93 	bl	8003c80 <HAL_RTC_WaitForSynchro>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01e      	beq.n	8003d9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	e017      	b.n	8003d9e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	4a0d      	ldr	r2, [pc, #52]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d74:	f023 0320 	bic.w	r3, r3, #32
 8003d78:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff80 	bl	8003c80 <HAL_RTC_WaitForSynchro>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d92:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <RTC_ExitInitMode+0x78>)
 8003d98:	f043 0320 	orr.w	r3, r3, #32
 8003d9c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	58004000 	.word	0x58004000

08003dac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8003dbe:	e005      	b.n	8003dcc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	3b0a      	subs	r3, #10
 8003dca:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d8f6      	bhi.n	8003dc0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b2db      	uxtb	r3, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e10f      	b.n	800401e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a87      	ldr	r2, [pc, #540]	@ (8004028 <HAL_SPI_Init+0x23c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <HAL_SPI_Init+0x42>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a86      	ldr	r2, [pc, #536]	@ (800402c <HAL_SPI_Init+0x240>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00a      	beq.n	8003e2e <HAL_SPI_Init+0x42>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a84      	ldr	r2, [pc, #528]	@ (8004030 <HAL_SPI_Init+0x244>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d005      	beq.n	8003e2e <HAL_SPI_Init+0x42>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d901      	bls.n	8003e2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0f7      	b.n	800401e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f900 	bl	8004034 <SPI_GetPacketSize>
 8003e34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8004028 <HAL_SPI_Init+0x23c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00c      	beq.n	8003e5a <HAL_SPI_Init+0x6e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a79      	ldr	r2, [pc, #484]	@ (800402c <HAL_SPI_Init+0x240>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <HAL_SPI_Init+0x6e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a78      	ldr	r2, [pc, #480]	@ (8004030 <HAL_SPI_Init+0x244>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_Init+0x6e>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d811      	bhi.n	8003e7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e5e:	4a72      	ldr	r2, [pc, #456]	@ (8004028 <HAL_SPI_Init+0x23c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a70      	ldr	r2, [pc, #448]	@ (800402c <HAL_SPI_Init+0x240>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_SPI_Init+0x8c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6f      	ldr	r2, [pc, #444]	@ (8004030 <HAL_SPI_Init+0x244>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d104      	bne.n	8003e82 <HAL_SPI_Init+0x96>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d901      	bls.n	8003e82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0cd      	b.n	800401e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fc38 	bl	800070c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003ebe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ec8:	d119      	bne.n	8003efe <HAL_SPI_Init+0x112>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed2:	d103      	bne.n	8003edc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eec:	d107      	bne.n	8003efe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00f      	beq.n	8003f2a <HAL_SPI_Init+0x13e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d90b      	bls.n	8003f2a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e007      	b.n	8003f3a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9a:	ea42 0103 	orr.w	r1, r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fd8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40013000 	.word	0x40013000
 800402c:	40003800 	.word	0x40003800
 8004030:	40003c00 	.word	0x40003c00

08004034 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3307      	adds	r3, #7
 8004052:	08db      	lsrs	r3, r3, #3
 8004054:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	fb02 f303 	mul.w	r3, r2, r3
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e049      	b.n	8004110 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fc fd35 	bl	8000b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f000 f949 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0ff      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b14      	cmp	r3, #20
 8004142:	f200 80f0 	bhi.w	8004326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	080041a1 	.word	0x080041a1
 8004150:	08004327 	.word	0x08004327
 8004154:	08004327 	.word	0x08004327
 8004158:	08004327 	.word	0x08004327
 800415c:	080041e1 	.word	0x080041e1
 8004160:	08004327 	.word	0x08004327
 8004164:	08004327 	.word	0x08004327
 8004168:	08004327 	.word	0x08004327
 800416c:	08004223 	.word	0x08004223
 8004170:	08004327 	.word	0x08004327
 8004174:	08004327 	.word	0x08004327
 8004178:	08004327 	.word	0x08004327
 800417c:	08004263 	.word	0x08004263
 8004180:	08004327 	.word	0x08004327
 8004184:	08004327 	.word	0x08004327
 8004188:	08004327 	.word	0x08004327
 800418c:	080042a5 	.word	0x080042a5
 8004190:	08004327 	.word	0x08004327
 8004194:	08004327 	.word	0x08004327
 8004198:	08004327 	.word	0x08004327
 800419c:	080042e5 	.word	0x080042e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f96a 	bl	8004480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	619a      	str	r2, [r3, #24]
      break;
 80041de:	e0a5      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f9da 	bl	80045a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
      break;
 8004220:	e084      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa43 	bl	80046b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
      break;
 8004260:	e064      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 faab 	bl	80047c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	021a      	lsls	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	61da      	str	r2, [r3, #28]
      break;
 80042a2:	e043      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 faf4 	bl	8004898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042e2:	e023      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb38 	bl	8004960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004324:	e002      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      break;
 800432a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop

08004340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a43      	ldr	r2, [pc, #268]	@ (8004460 <TIM_Base_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d00f      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a40      	ldr	r2, [pc, #256]	@ (8004464 <TIM_Base_SetConfig+0x124>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3f      	ldr	r2, [pc, #252]	@ (8004468 <TIM_Base_SetConfig+0x128>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3e      	ldr	r2, [pc, #248]	@ (800446c <TIM_Base_SetConfig+0x12c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3d      	ldr	r2, [pc, #244]	@ (8004470 <TIM_Base_SetConfig+0x130>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a32      	ldr	r2, [pc, #200]	@ (8004460 <TIM_Base_SetConfig+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004464 <TIM_Base_SetConfig+0x124>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004468 <TIM_Base_SetConfig+0x128>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	@ (800446c <TIM_Base_SetConfig+0x12c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004470 <TIM_Base_SetConfig+0x130>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004474 <TIM_Base_SetConfig+0x134>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004478 <TIM_Base_SetConfig+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x9a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a29      	ldr	r2, [pc, #164]	@ (800447c <TIM_Base_SetConfig+0x13c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <TIM_Base_SetConfig+0x120>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0xf2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <TIM_Base_SetConfig+0x130>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0xf2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <TIM_Base_SetConfig+0x134>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0xf2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <TIM_Base_SetConfig+0x138>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0xf2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a13      	ldr	r2, [pc, #76]	@ (800447c <TIM_Base_SetConfig+0x13c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d103      	bne.n	800443a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f043 0204 	orr.w	r2, r3, #4
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40000c00 	.word	0x40000c00
 8004470:	40010400 	.word	0x40010400
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f023 0201 	bic.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <TIM_OC1_SetConfig+0x108>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a2d      	ldr	r2, [pc, #180]	@ (800458c <TIM_OC1_SetConfig+0x10c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00f      	beq.n	80044fc <TIM_OC1_SetConfig+0x7c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a2c      	ldr	r2, [pc, #176]	@ (8004590 <TIM_OC1_SetConfig+0x110>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_OC1_SetConfig+0x7c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004594 <TIM_OC1_SetConfig+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_OC1_SetConfig+0x7c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004598 <TIM_OC1_SetConfig+0x118>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC1_SetConfig+0x7c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a29      	ldr	r2, [pc, #164]	@ (800459c <TIM_OC1_SetConfig+0x11c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10c      	bne.n	8004516 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0308 	bic.w	r3, r3, #8
 8004502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <TIM_OC1_SetConfig+0x10c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00f      	beq.n	800453e <TIM_OC1_SetConfig+0xbe>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1b      	ldr	r2, [pc, #108]	@ (8004590 <TIM_OC1_SetConfig+0x110>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00b      	beq.n	800453e <TIM_OC1_SetConfig+0xbe>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <TIM_OC1_SetConfig+0x114>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d007      	beq.n	800453e <TIM_OC1_SetConfig+0xbe>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <TIM_OC1_SetConfig+0x118>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <TIM_OC1_SetConfig+0xbe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <TIM_OC1_SetConfig+0x11c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800454c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	fffeff8f 	.word	0xfffeff8f
 800458c:	40010000 	.word	0x40010000
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800

080045a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 0210 	bic.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4b34      	ldr	r3, [pc, #208]	@ (800469c <TIM_OC2_SetConfig+0xfc>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0320 	bic.w	r3, r3, #32
 80045ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a29      	ldr	r2, [pc, #164]	@ (80046a0 <TIM_OC2_SetConfig+0x100>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC2_SetConfig+0x68>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a28      	ldr	r2, [pc, #160]	@ (80046a4 <TIM_OC2_SetConfig+0x104>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10d      	bne.n	8004624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <TIM_OC2_SetConfig+0x100>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_OC2_SetConfig+0xac>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <TIM_OC2_SetConfig+0x104>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_OC2_SetConfig+0xac>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1c      	ldr	r2, [pc, #112]	@ (80046a8 <TIM_OC2_SetConfig+0x108>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_OC2_SetConfig+0xac>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <TIM_OC2_SetConfig+0x10c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_OC2_SetConfig+0xac>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a1a      	ldr	r2, [pc, #104]	@ (80046b0 <TIM_OC2_SetConfig+0x110>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d113      	bne.n	8004674 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	feff8fff 	.word	0xfeff8fff
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40010400 	.word	0x40010400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800

080046b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <TIM_OC3_SetConfig+0xf8>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a28      	ldr	r2, [pc, #160]	@ (80047b0 <TIM_OC3_SetConfig+0xfc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_OC3_SetConfig+0x66>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <TIM_OC3_SetConfig+0x100>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10d      	bne.n	8004736 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <TIM_OC3_SetConfig+0xfc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_OC3_SetConfig+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <TIM_OC3_SetConfig+0x100>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_OC3_SetConfig+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1b      	ldr	r2, [pc, #108]	@ (80047b8 <TIM_OC3_SetConfig+0x104>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_OC3_SetConfig+0xaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <TIM_OC3_SetConfig+0x108>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC3_SetConfig+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <TIM_OC3_SetConfig+0x10c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d113      	bne.n	8004786 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	fffeff8f 	.word	0xfffeff8f
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40010400 	.word	0x40010400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4b24      	ldr	r3, [pc, #144]	@ (8004880 <TIM_OC4_SetConfig+0xbc>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <TIM_OC4_SetConfig+0xc0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC4_SetConfig+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <TIM_OC4_SetConfig+0xc4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC4_SetConfig+0x80>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a17      	ldr	r2, [pc, #92]	@ (800488c <TIM_OC4_SetConfig+0xc8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC4_SetConfig+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <TIM_OC4_SetConfig+0xcc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC4_SetConfig+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <TIM_OC4_SetConfig+0xd0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800484a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	feff8fff 	.word	0xfeff8fff
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <TIM_OC5_SetConfig+0xb0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80048d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	@ (800494c <TIM_OC5_SetConfig+0xb4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00f      	beq.n	800490e <TIM_OC5_SetConfig+0x76>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <TIM_OC5_SetConfig+0xb8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_OC5_SetConfig+0x76>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <TIM_OC5_SetConfig+0xbc>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_OC5_SetConfig+0x76>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <TIM_OC5_SetConfig+0xc0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_OC5_SetConfig+0x76>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a14      	ldr	r2, [pc, #80]	@ (800495c <TIM_OC5_SetConfig+0xc4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d109      	bne.n	8004922 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	621a      	str	r2, [r3, #32]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	fffeff8f 	.word	0xfffeff8f
 800494c:	40010000 	.word	0x40010000
 8004950:	40010400 	.word	0x40010400
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4b22      	ldr	r3, [pc, #136]	@ (8004a14 <TIM_OC6_SetConfig+0xb4>)
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <TIM_OC6_SetConfig+0xb8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <TIM_OC6_SetConfig+0x78>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a18      	ldr	r2, [pc, #96]	@ (8004a1c <TIM_OC6_SetConfig+0xbc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_OC6_SetConfig+0x78>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <TIM_OC6_SetConfig+0xc0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC6_SetConfig+0x78>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <TIM_OC6_SetConfig+0xc4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC6_SetConfig+0x78>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <TIM_OC6_SetConfig+0xc8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d109      	bne.n	80049ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	feff8fff 	.word	0xfeff8fff
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40010400 	.word	0x40010400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e06d      	b.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2f      	ldr	r2, [pc, #188]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d108      	bne.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a20      	ldr	r2, [pc, #128]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab6:	d01d      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40010400 	.word	0x40010400
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40001800 	.word	0x40001800
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e065      	b.n	8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d115      	bne.n	8004c1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	051b      	lsls	r3, r3, #20
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400

08004c44 <memset>:
 8004c44:	4402      	add	r2, r0
 8004c46:	4603      	mov	r3, r0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4d0d      	ldr	r5, [pc, #52]	@ (8004c8c <__libc_init_array+0x38>)
 8004c58:	4c0d      	ldr	r4, [pc, #52]	@ (8004c90 <__libc_init_array+0x3c>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	2600      	movs	r6, #0
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	4d0b      	ldr	r5, [pc, #44]	@ (8004c94 <__libc_init_array+0x40>)
 8004c66:	4c0c      	ldr	r4, [pc, #48]	@ (8004c98 <__libc_init_array+0x44>)
 8004c68:	f000 f818 	bl	8004c9c <_init>
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	2600      	movs	r6, #0
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004cc4 	.word	0x08004cc4
 8004c90:	08004cc4 	.word	0x08004cc4
 8004c94:	08004cc4 	.word	0x08004cc4
 8004c98:	08004cc8 	.word	0x08004cc8

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	bf00      	nop
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
