
X1_Thorn_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b608  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007500  0800b8a8  0800b8a8  0000c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012da8  08012da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012db0  08012db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012db4  08012db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08012db8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a50  24000248  08013000  00014248  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c98  08013000  00014c98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014248  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030e12  00000000  00000000  00014276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f26  00000000  00000000  00045088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000120a9  00000000  00000000  0004afae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a48  00000000  00000000  0005d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018fa  00000000  00000000  0005eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00008d13  00000000  00000000  0006039a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003251c  00000000  00000000  000690ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00183a67  00000000  00000000  0009b5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0021f030  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005890  00000000  00000000  0021f074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  00224904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b890 	.word	0x0800b890

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	0800b890 	.word	0x0800b890

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b988 	b.w	8000a30 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	468e      	mov	lr, r1
 8000740:	4604      	mov	r4, r0
 8000742:	4688      	mov	r8, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d962      	bls.n	8000814 <__udivmoddi4+0xdc>
 800074e:	fab2 f682 	clz	r6, r2
 8000752:	b14e      	cbz	r6, 8000768 <__udivmoddi4+0x30>
 8000754:	f1c6 0320 	rsb	r3, r6, #32
 8000758:	fa01 f806 	lsl.w	r8, r1, r6
 800075c:	fa20 f303 	lsr.w	r3, r0, r3
 8000760:	40b7      	lsls	r7, r6
 8000762:	ea43 0808 	orr.w	r8, r3, r8
 8000766:	40b4      	lsls	r4, r6
 8000768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fbb8 f1fe 	udiv	r1, r8, lr
 8000774:	0c23      	lsrs	r3, r4, #16
 8000776:	fb0e 8811 	mls	r8, lr, r1, r8
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	fb01 f20c 	mul.w	r2, r1, ip
 8000782:	429a      	cmp	r2, r3
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x62>
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	f101 30ff 	add.w	r0, r1, #4294967295
 800078c:	f080 80ea 	bcs.w	8000964 <__udivmoddi4+0x22c>
 8000790:	429a      	cmp	r2, r3
 8000792:	f240 80e7 	bls.w	8000964 <__udivmoddi4+0x22c>
 8000796:	3902      	subs	r1, #2
 8000798:	443b      	add	r3, r7
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	b2a3      	uxth	r3, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ae:	459c      	cmp	ip, r3
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x8e>
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007b8:	f080 80d6 	bcs.w	8000968 <__udivmoddi4+0x230>
 80007bc:	459c      	cmp	ip, r3
 80007be:	f240 80d3 	bls.w	8000968 <__udivmoddi4+0x230>
 80007c2:	443b      	add	r3, r7
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ca:	eba3 030c 	sub.w	r3, r3, ip
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11d      	cbz	r5, 80007da <__udivmoddi4+0xa2>
 80007d2:	40f3      	lsrs	r3, r6
 80007d4:	2200      	movs	r2, #0
 80007d6:	e9c5 3200 	strd	r3, r2, [r5]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d905      	bls.n	80007ee <__udivmoddi4+0xb6>
 80007e2:	b10d      	cbz	r5, 80007e8 <__udivmoddi4+0xb0>
 80007e4:	e9c5 0100 	strd	r0, r1, [r5]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4608      	mov	r0, r1
 80007ec:	e7f5      	b.n	80007da <__udivmoddi4+0xa2>
 80007ee:	fab3 f183 	clz	r1, r3
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d146      	bne.n	8000884 <__udivmoddi4+0x14c>
 80007f6:	4573      	cmp	r3, lr
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xc8>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 8105 	bhi.w	8000a0a <__udivmoddi4+0x2d2>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb6e 0203 	sbc.w	r2, lr, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4690      	mov	r8, r2
 800080a:	2d00      	cmp	r5, #0
 800080c:	d0e5      	beq.n	80007da <__udivmoddi4+0xa2>
 800080e:	e9c5 4800 	strd	r4, r8, [r5]
 8000812:	e7e2      	b.n	80007da <__udivmoddi4+0xa2>
 8000814:	2a00      	cmp	r2, #0
 8000816:	f000 8090 	beq.w	800093a <__udivmoddi4+0x202>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	f040 80a4 	bne.w	800096c <__udivmoddi4+0x234>
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	0c03      	lsrs	r3, r0, #16
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	b280      	uxth	r0, r0
 800082e:	b2bc      	uxth	r4, r7
 8000830:	2101      	movs	r1, #1
 8000832:	fbb2 fcfe 	udiv	ip, r2, lr
 8000836:	fb0e 221c 	mls	r2, lr, ip, r2
 800083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083e:	fb04 f20c 	mul.w	r2, r4, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d907      	bls.n	8000856 <__udivmoddi4+0x11e>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f10c 38ff 	add.w	r8, ip, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x11c>
 800084e:	429a      	cmp	r2, r3
 8000850:	f200 80e0 	bhi.w	8000a14 <__udivmoddi4+0x2dc>
 8000854:	46c4      	mov	ip, r8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	fbb3 f2fe 	udiv	r2, r3, lr
 800085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	fb02 f404 	mul.w	r4, r2, r4
 8000868:	429c      	cmp	r4, r3
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x144>
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x142>
 8000874:	429c      	cmp	r4, r3
 8000876:	f200 80ca 	bhi.w	8000a0e <__udivmoddi4+0x2d6>
 800087a:	4602      	mov	r2, r0
 800087c:	1b1b      	subs	r3, r3, r4
 800087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000882:	e7a5      	b.n	80007d0 <__udivmoddi4+0x98>
 8000884:	f1c1 0620 	rsb	r6, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 f706 	lsr.w	r7, r2, r6
 800088e:	431f      	orrs	r7, r3
 8000890:	fa0e f401 	lsl.w	r4, lr, r1
 8000894:	fa20 f306 	lsr.w	r3, r0, r6
 8000898:	fa2e fe06 	lsr.w	lr, lr, r6
 800089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a0:	4323      	orrs	r3, r4
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	fa1f fc87 	uxth.w	ip, r7
 80008aa:	fbbe f0f9 	udiv	r0, lr, r9
 80008ae:	0c1c      	lsrs	r4, r3, #16
 80008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008bc:	45a6      	cmp	lr, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d909      	bls.n	80008d8 <__udivmoddi4+0x1a0>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ca:	f080 809c 	bcs.w	8000a06 <__udivmoddi4+0x2ce>
 80008ce:	45a6      	cmp	lr, r4
 80008d0:	f240 8099 	bls.w	8000a06 <__udivmoddi4+0x2ce>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	eba4 040e 	sub.w	r4, r4, lr
 80008dc:	fa1f fe83 	uxth.w	lr, r3
 80008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e4:	fb09 4413 	mls	r4, r9, r3, r4
 80008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f0:	45a4      	cmp	ip, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1ce>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008fa:	f080 8082 	bcs.w	8000a02 <__udivmoddi4+0x2ca>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d97f      	bls.n	8000a02 <__udivmoddi4+0x2ca>
 8000902:	3b02      	subs	r3, #2
 8000904:	443c      	add	r4, r7
 8000906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800090a:	eba4 040c 	sub.w	r4, r4, ip
 800090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000912:	4564      	cmp	r4, ip
 8000914:	4673      	mov	r3, lr
 8000916:	46e1      	mov	r9, ip
 8000918:	d362      	bcc.n	80009e0 <__udivmoddi4+0x2a8>
 800091a:	d05f      	beq.n	80009dc <__udivmoddi4+0x2a4>
 800091c:	b15d      	cbz	r5, 8000936 <__udivmoddi4+0x1fe>
 800091e:	ebb8 0203 	subs.w	r2, r8, r3
 8000922:	eb64 0409 	sbc.w	r4, r4, r9
 8000926:	fa04 f606 	lsl.w	r6, r4, r6
 800092a:	fa22 f301 	lsr.w	r3, r2, r1
 800092e:	431e      	orrs	r6, r3
 8000930:	40cc      	lsrs	r4, r1
 8000932:	e9c5 6400 	strd	r6, r4, [r5]
 8000936:	2100      	movs	r1, #0
 8000938:	e74f      	b.n	80007da <__udivmoddi4+0xa2>
 800093a:	fbb1 fcf2 	udiv	ip, r1, r2
 800093e:	0c01      	lsrs	r1, r0, #16
 8000940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000944:	b280      	uxth	r0, r0
 8000946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800094a:	463b      	mov	r3, r7
 800094c:	4638      	mov	r0, r7
 800094e:	463c      	mov	r4, r7
 8000950:	46b8      	mov	r8, r7
 8000952:	46be      	mov	lr, r7
 8000954:	2620      	movs	r6, #32
 8000956:	fbb1 f1f7 	udiv	r1, r1, r7
 800095a:	eba2 0208 	sub.w	r2, r2, r8
 800095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000962:	e766      	b.n	8000832 <__udivmoddi4+0xfa>
 8000964:	4601      	mov	r1, r0
 8000966:	e718      	b.n	800079a <__udivmoddi4+0x62>
 8000968:	4610      	mov	r0, r2
 800096a:	e72c      	b.n	80007c6 <__udivmoddi4+0x8e>
 800096c:	f1c6 0220 	rsb	r2, r6, #32
 8000970:	fa2e f302 	lsr.w	r3, lr, r2
 8000974:	40b7      	lsls	r7, r6
 8000976:	40b1      	lsls	r1, r6
 8000978:	fa20 f202 	lsr.w	r2, r0, r2
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	430a      	orrs	r2, r1
 8000982:	fbb3 f8fe 	udiv	r8, r3, lr
 8000986:	b2bc      	uxth	r4, r7
 8000988:	fb0e 3318 	mls	r3, lr, r8, r3
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000992:	fb08 f904 	mul.w	r9, r8, r4
 8000996:	40b0      	lsls	r0, r6
 8000998:	4589      	cmp	r9, r1
 800099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800099e:	b280      	uxth	r0, r0
 80009a0:	d93e      	bls.n	8000a20 <__udivmoddi4+0x2e8>
 80009a2:	1879      	adds	r1, r7, r1
 80009a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009a8:	d201      	bcs.n	80009ae <__udivmoddi4+0x276>
 80009aa:	4589      	cmp	r9, r1
 80009ac:	d81f      	bhi.n	80009ee <__udivmoddi4+0x2b6>
 80009ae:	eba1 0109 	sub.w	r1, r1, r9
 80009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80009be:	b292      	uxth	r2, r2
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	4542      	cmp	r2, r8
 80009c6:	d229      	bcs.n	8000a1c <__udivmoddi4+0x2e4>
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80009ce:	d2c4      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d0:	4542      	cmp	r2, r8
 80009d2:	d2c2      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d4:	f1a9 0102 	sub.w	r1, r9, #2
 80009d8:	443a      	add	r2, r7
 80009da:	e7be      	b.n	800095a <__udivmoddi4+0x222>
 80009dc:	45f0      	cmp	r8, lr
 80009de:	d29d      	bcs.n	800091c <__udivmoddi4+0x1e4>
 80009e0:	ebbe 0302 	subs.w	r3, lr, r2
 80009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009e8:	3801      	subs	r0, #1
 80009ea:	46e1      	mov	r9, ip
 80009ec:	e796      	b.n	800091c <__udivmoddi4+0x1e4>
 80009ee:	eba7 0909 	sub.w	r9, r7, r9
 80009f2:	4449      	add	r1, r9
 80009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fc:	fb09 f804 	mul.w	r8, r9, r4
 8000a00:	e7db      	b.n	80009ba <__udivmoddi4+0x282>
 8000a02:	4673      	mov	r3, lr
 8000a04:	e77f      	b.n	8000906 <__udivmoddi4+0x1ce>
 8000a06:	4650      	mov	r0, sl
 8000a08:	e766      	b.n	80008d8 <__udivmoddi4+0x1a0>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e6fd      	b.n	800080a <__udivmoddi4+0xd2>
 8000a0e:	443b      	add	r3, r7
 8000a10:	3a02      	subs	r2, #2
 8000a12:	e733      	b.n	800087c <__udivmoddi4+0x144>
 8000a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a18:	443b      	add	r3, r7
 8000a1a:	e71c      	b.n	8000856 <__udivmoddi4+0x11e>
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	e79c      	b.n	800095a <__udivmoddi4+0x222>
 8000a20:	eba1 0109 	sub.w	r1, r1, r9
 8000a24:	46c4      	mov	ip, r8
 8000a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2a:	fb09 f804 	mul.w	r8, r9, r4
 8000a2e:	e7c4      	b.n	80009ba <__udivmoddi4+0x282>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <GroundCommands_Init>:
static uint8_t active;
esp32_commands_t curr_esp32_commands;

void GroundCommands_Init(void)
{
	esp32_Init();
 8000a34:	f000 bd82 	b.w	800153c <esp32_Init>

08000a38 <get_reference>:
	Vec3 vec_y_world, vec_z_world, vec_y_aircraft;

	quaternion_t q_ref;
	Mat3 Rx, Ry, Rz, R0;

	vec_y_aircraft[0] = 2.0f*(curr_attitude->x*curr_attitude->y - curr_attitude->w*curr_attitude->z);
 8000a38:	edd0 6a03 	vldr	s13, [r0, #12]
	vec_y_aircraft[1] = 1.0f - 2.0f*(curr_attitude->x*curr_attitude->x + curr_attitude->z*curr_attitude->z);
 8000a3c:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
	vec_y_aircraft[0] = 2.0f*(curr_attitude->x*curr_attitude->y - curr_attitude->w*curr_attitude->z);
 8000a40:	edd0 5a00 	vldr	s11, [r0]
 8000a44:	ed90 6a02 	vldr	s12, [r0, #8]
 8000a48:	ee26 7ae5 	vnmul.f32	s14, s13, s11
 8000a4c:	edd0 7a01 	vldr	s15, [r0, #4]
{
 8000a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	vec_y_aircraft[0] = 2.0f*(curr_attitude->x*curr_attitude->y - curr_attitude->w*curr_attitude->z);
 8000a54:	eea7 7a86 	vfma.f32	s14, s15, s12
{
 8000a58:	4605      	mov	r5, r0
 8000a5a:	460c      	mov	r4, r1
	vec_y_aircraft[2] = 2.0f*(curr_attitude->y*curr_attitude->z + curr_attitude->w*curr_attitude->x);

	vector_cross(VEC_X_WORLD, vec_y_aircraft, vec_z_world);
 8000a5c:	4843      	ldr	r0, [pc, #268]	@ (8000b6c <get_reference+0x134>)

	R0[0][2] = vec_z_world[0];
	R0[1][2] = vec_z_world[1];
	R0[2][2] = vec_z_world[2];

	active = get_esp32_commands(&curr_esp32_commands);
 8000a5e:	4e44      	ldr	r6, [pc, #272]	@ (8000b70 <get_reference+0x138>)
	R0[0][0] = VEC_X_WORLD[0];
 8000a60:	2700      	movs	r7, #0
	active = get_esp32_commands(&curr_esp32_commands);
 8000a62:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8000b74 <get_reference+0x13c>
{
 8000a66:	ed2d 8b02 	vpush	{d8}
	vec_y_aircraft[0] = 2.0f*(curr_attitude->x*curr_attitude->y - curr_attitude->w*curr_attitude->z);
 8000a6a:	ee37 7a07 	vadd.f32	s14, s14, s14
{
 8000a6e:	b0cc      	sub	sp, #304	@ 0x130
	vec_y_aircraft[1] = 1.0f - 2.0f*(curr_attitude->x*curr_attitude->x + curr_attitude->z*curr_attitude->z);
 8000a70:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
	vector_cross(VEC_X_WORLD, vec_y_aircraft, vec_z_world);
 8000a74:	aa03      	add	r2, sp, #12
 8000a76:	a906      	add	r1, sp, #24
	vec_y_aircraft[0] = 2.0f*(curr_attitude->x*curr_attitude->y - curr_attitude->w*curr_attitude->z);
 8000a78:	ed8d 7a06 	vstr	s14, [sp, #24]
	vec_y_aircraft[1] = 1.0f - 2.0f*(curr_attitude->x*curr_attitude->x + curr_attitude->z*curr_attitude->z);
 8000a7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8000a80:	eeb0 5a48 	vmov.f32	s10, s16
 8000a84:	eea7 7aa7 	vfma.f32	s14, s15, s15
	vec_y_aircraft[2] = 2.0f*(curr_attitude->y*curr_attitude->z + curr_attitude->w*curr_attitude->x);
 8000a88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000a8c:	eee6 7a26 	vfma.f32	s15, s12, s13
	vec_y_aircraft[1] = 1.0f - 2.0f*(curr_attitude->x*curr_attitude->x + curr_attitude->z*curr_attitude->z);
 8000a90:	eea7 5a64 	vfms.f32	s10, s14, s9
	vec_y_aircraft[2] = 2.0f*(curr_attitude->y*curr_attitude->z + curr_attitude->w*curr_attitude->x);
 8000a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
	vec_y_aircraft[1] = 1.0f - 2.0f*(curr_attitude->x*curr_attitude->x + curr_attitude->z*curr_attitude->z);
 8000a98:	ed8d 5a07 	vstr	s10, [sp, #28]
	vec_y_aircraft[2] = 2.0f*(curr_attitude->y*curr_attitude->z + curr_attitude->w*curr_attitude->x);
 8000a9c:	edcd 7a08 	vstr	s15, [sp, #32]
	vector_cross(VEC_X_WORLD, vec_y_aircraft, vec_z_world);
 8000aa0:	f000 f89c 	bl	8000bdc <vector_cross>
	vector_cross(vec_z_world, VEC_X_WORLD, vec_y_world);
 8000aa4:	466a      	mov	r2, sp
 8000aa6:	4931      	ldr	r1, [pc, #196]	@ (8000b6c <get_reference+0x134>)
 8000aa8:	a803      	add	r0, sp, #12
 8000aaa:	f000 f897 	bl	8000bdc <vector_cross>
	R0[0][1] = vec_y_world[0];
 8000aae:	9b00      	ldr	r3, [sp, #0]
	active = get_esp32_commands(&curr_esp32_commands);
 8000ab0:	4630      	mov	r0, r6
	R0[0][0] = VEC_X_WORLD[0];
 8000ab2:	9728      	str	r7, [sp, #160]	@ 0xa0
	R0[0][1] = vec_y_world[0];
 8000ab4:	9329      	str	r3, [sp, #164]	@ 0xa4
	R0[1][1] = vec_y_world[1];
 8000ab6:	9b01      	ldr	r3, [sp, #4]
	R0[1][0] = VEC_X_WORLD[1];
 8000ab8:	972b      	str	r7, [sp, #172]	@ 0xac
	R0[1][1] = vec_y_world[1];
 8000aba:	932c      	str	r3, [sp, #176]	@ 0xb0
	R0[2][1] = vec_y_world[2];
 8000abc:	9b02      	ldr	r3, [sp, #8]
	R0[2][0] = VEC_X_WORLD[2];
 8000abe:	ed8d 8a2e 	vstr	s16, [sp, #184]	@ 0xb8
	R0[2][1] = vec_y_world[2];
 8000ac2:	932f      	str	r3, [sp, #188]	@ 0xbc
	R0[0][2] = vec_z_world[0];
 8000ac4:	9b03      	ldr	r3, [sp, #12]
 8000ac6:	932a      	str	r3, [sp, #168]	@ 0xa8
	R0[1][2] = vec_z_world[1];
 8000ac8:	9b04      	ldr	r3, [sp, #16]
 8000aca:	932d      	str	r3, [sp, #180]	@ 0xb4
	R0[2][2] = vec_z_world[2];
 8000acc:	9b05      	ldr	r3, [sp, #20]
 8000ace:	9330      	str	r3, [sp, #192]	@ 0xc0
	active = get_esp32_commands(&curr_esp32_commands);
 8000ad0:	f000 fd3e 	bl	8001550 <get_esp32_commands>


	if (active != 1)
 8000ad4:	2801      	cmp	r0, #1
	active = get_esp32_commands(&curr_esp32_commands);
 8000ad6:	f888 0000 	strb.w	r0, [r8]
	if (active != 1)
 8000ada:	d016      	beq.n	8000b0a <get_reference+0xd2>
	{
		matrixToQuat(R0, &q_ref);
 8000adc:	a909      	add	r1, sp, #36	@ 0x24
 8000ade:	a828      	add	r0, sp, #160	@ 0xa0
 8000ae0:	f000 f93e 	bl	8000d60 <matrixToQuat>

		curr_reference->ax_ref = -0.5;
 8000ae4:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
		curr_reference->p_ref = 0;
 8000ae8:	6067      	str	r7, [r4, #4]
		curr_reference->ax_ref = -0.5;
 8000aea:	6023      	str	r3, [r4, #0]
		matrixToQuat(R_ref, &q_ref);
		quaternion_correction(curr_attitude, &q_ref);

		curr_reference->ax_ref = curr_esp32_commands.ax_command;
		curr_reference->p_ref = curr_esp32_commands.p_command;
		curr_reference->q0_ref = q_ref.w;
 8000aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
		curr_reference->q3_ref = q_ref.z;
	}

	return active;

}
 8000aee:	f898 0000 	ldrb.w	r0, [r8]
		curr_reference->q0_ref = q_ref.w;
 8000af2:	60a3      	str	r3, [r4, #8]
		curr_reference->q1_ref = q_ref.x;
 8000af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000af6:	60e3      	str	r3, [r4, #12]
		curr_reference->q2_ref = q_ref.y;
 8000af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000afa:	6123      	str	r3, [r4, #16]
		curr_reference->q3_ref = q_ref.z;
 8000afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000afe:	6163      	str	r3, [r4, #20]
}
 8000b00:	b04c      	add	sp, #304	@ 0x130
 8000b02:	ecbd 8b02 	vpop	{d8}
 8000b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rot_x_mat(Rx, -curr_esp32_commands.roll_command);
 8000b0a:	ed96 0a03 	vldr	s0, [r6, #12]
 8000b0e:	a80d      	add	r0, sp, #52	@ 0x34
 8000b10:	eeb1 0a40 	vneg.f32	s0, s0
 8000b14:	f000 f8bb 	bl	8000c8e <rot_x_mat>
		rot_y_mat(Ry, curr_esp32_commands.pitch_command);
 8000b18:	ed96 0a02 	vldr	s0, [r6, #8]
 8000b1c:	a816      	add	r0, sp, #88	@ 0x58
 8000b1e:	f000 f8d9 	bl	8000cd4 <rot_y_mat>
		rot_z_mat(Rz, curr_esp32_commands.p_command/2); // el 2 s'ha de tunejar
 8000b22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000b26:	ed96 0a01 	vldr	s0, [r6, #4]
 8000b2a:	a81f      	add	r0, sp, #124	@ 0x7c
 8000b2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000b30:	f000 f8f3 	bl	8000d1a <rot_z_mat>
		mat3Multiply(Ry, Rx, temp_mat1);
 8000b34:	aa31      	add	r2, sp, #196	@ 0xc4
 8000b36:	a90d      	add	r1, sp, #52	@ 0x34
 8000b38:	a816      	add	r0, sp, #88	@ 0x58
 8000b3a:	f000 f9dc 	bl	8000ef6 <mat3Multiply>
		mat3Multiply(R0, temp_mat1, temp_mat2);
 8000b3e:	aa3a      	add	r2, sp, #232	@ 0xe8
 8000b40:	a931      	add	r1, sp, #196	@ 0xc4
 8000b42:	a828      	add	r0, sp, #160	@ 0xa0
 8000b44:	f000 f9d7 	bl	8000ef6 <mat3Multiply>
		mat3Multiply(Rz, temp_mat2, R_ref);
 8000b48:	aa43      	add	r2, sp, #268	@ 0x10c
 8000b4a:	a93a      	add	r1, sp, #232	@ 0xe8
 8000b4c:	a81f      	add	r0, sp, #124	@ 0x7c
 8000b4e:	f000 f9d2 	bl	8000ef6 <mat3Multiply>
		matrixToQuat(R_ref, &q_ref);
 8000b52:	a909      	add	r1, sp, #36	@ 0x24
 8000b54:	a843      	add	r0, sp, #268	@ 0x10c
 8000b56:	f000 f903 	bl	8000d60 <matrixToQuat>
		quaternion_correction(curr_attitude, &q_ref);
 8000b5a:	a909      	add	r1, sp, #36	@ 0x24
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f868 	bl	8000c32 <quaternion_correction>
		curr_reference->ax_ref = curr_esp32_commands.ax_command;
 8000b62:	6833      	ldr	r3, [r6, #0]
 8000b64:	6023      	str	r3, [r4, #0]
		curr_reference->p_ref = curr_esp32_commands.p_command;
 8000b66:	6873      	ldr	r3, [r6, #4]
 8000b68:	6063      	str	r3, [r4, #4]
 8000b6a:	e7bf      	b.n	8000aec <get_reference+0xb4>
 8000b6c:	0800b8a8 	.word	0x0800b8a8
 8000b70:	24000264 	.word	0x24000264
 8000b74:	24000274 	.word	0x24000274

08000b78 <Odometry_Read>:
}



void Odometry_Read(odometry_t *Curr_Read)
{
 8000b78:	b538      	push	{r3, r4, r5, lr}

	// Read from sensor

	ReadData(&BNO055, SENSOR_LINACC|SENSOR_GYRO|SENSOR_QUATERNION);
 8000b7a:	4d0b      	ldr	r5, [pc, #44]	@ (8000ba8 <Odometry_Read+0x30>)
{
 8000b7c:	4604      	mov	r4, r0
	ReadData(&BNO055, SENSOR_LINACC|SENSOR_GYRO|SENSOR_QUATERNION);
 8000b7e:	210e      	movs	r1, #14
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 fa31 	bl	8000fe8 <ReadData>

	Curr_Read->ax = BNO055.LineerAcc.X;
 8000b86:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000b88:	6023      	str	r3, [r4, #0]
	Curr_Read->p = BNO055.Gyro.X;
 8000b8a:	68eb      	ldr	r3, [r5, #12]
 8000b8c:	6063      	str	r3, [r4, #4]
	Curr_Read->q = BNO055.Gyro.Y;
 8000b8e:	692b      	ldr	r3, [r5, #16]
 8000b90:	60a3      	str	r3, [r4, #8]
	Curr_Read->r = BNO055.Gyro.Z;
 8000b92:	696b      	ldr	r3, [r5, #20]
 8000b94:	60e3      	str	r3, [r4, #12]
	Curr_Read->q0 = BNO055.Quaternion.W;
 8000b96:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000b98:	6123      	str	r3, [r4, #16]
	Curr_Read->q1 = BNO055.Quaternion.X;
 8000b9a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000b9c:	6163      	str	r3, [r4, #20]
	Curr_Read->q2 = BNO055.Quaternion.Y;
 8000b9e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8000ba0:	61a3      	str	r3, [r4, #24]
	Curr_Read->q3 = BNO055.Quaternion.Z;
 8000ba2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8000ba4:	61e3      	str	r3, [r4, #28]

}
 8000ba6:	bd38      	pop	{r3, r4, r5, pc}
 8000ba8:	24000278 	.word	0x24000278

08000bac <Sensor_Init>:



void Sensor_Init(void)
{
 8000bac:	b507      	push	{r0, r1, r2, lr}

		//Init structure definition section
		BNO055_Init_t BNO055_InitStruct = {0};

		//Reset section
		ResetBNO055();
 8000bae:	f000 f9e5 	bl	8000f7c <ResetBNO055>
		BNO055_InitStruct.Axis = DEFAULT_AXIS_REMAP;			//value will be entered by looking at the data sheet
		BNO055_InitStruct.Axis_sign = 0x3;						//value will be entered by looking at the data sheet - Y and Z must have switched signs
		BNO055_InitStruct.Clock_Source = CLOCK_EXTERNAL;		//CLOCK_EXTERNAL or CLOCK_INTERNAL
		BNO055_InitStruct.Mode = BNO055_NORMAL_MODE;			//BNO055_X_MODE   X:NORMAL, LOWPOWER, SUSPEND
		BNO055_InitStruct.OP_Modes = NDOF;
		BNO055_InitStruct.Unit_Sel = (UNIT_ORI_ANDROID | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_RPS | UNIT_ACC_MS2);
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <Sensor_Init+0x28>)
 8000bb4:	9300      	str	r3, [sp, #0]
		BNO055_InitStruct.OP_Modes = NDOF;
 8000bb6:	f248 030c 	movw	r3, #32780	@ 0x800c
 8000bba:	f8ad 3004 	strh.w	r3, [sp, #4]
		BNO055_InitStruct.ACC_Range = Range_4G;			//Range_X
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f88d 3006 	strb.w	r3, [sp, #6]
										//(UNIT_ORI_X | UNIT_TEMP_X | UNIT_EUL_X | UNIT_GYRO_X | UNIT_ACC_X)
		BNO055_Init(BNO055_InitStruct);
 8000bc4:	ab02      	add	r3, sp, #8
 8000bc6:	e913 0003 	ldmdb	r3, {r0, r1}
//		Check_Status(&Status);
//		printf("Selftest Result: %d\t",Status.STresult);
//		printf("System Status: %d\t",Status.SYSStatus);
//		printf("System Error: %d\n",Status.SYSError);

}
 8000bca:	b003      	add	sp, #12
 8000bcc:	f85d eb04 	ldr.w	lr, [sp], #4
		BNO055_Init(BNO055_InitStruct);
 8000bd0:	f000 bc52 	b.w	8001478 <BNO055_Init>
 8000bd4:	00032482 	.word	0x00032482

08000bd8 <Odometry_Init>:
	Sensor_Init();
 8000bd8:	f7ff bfe8 	b.w	8000bac <Sensor_Init>

08000bdc <vector_cross>:
#include <math.h>
#include "Algebra.h"

void vector_cross(const Vec3 a, const Vec3 b, Vec3 result)
{
    result[0] = a[1]*b[2] - a[2]*b[1];
 8000bdc:	ed90 7a02 	vldr	s14, [r0, #8]
 8000be0:	edd1 7a01 	vldr	s15, [r1, #4]
 8000be4:	edd0 6a01 	vldr	s13, [r0, #4]
 8000be8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8000bec:	ed91 7a02 	vldr	s14, [r1, #8]
 8000bf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000bf4:	edc2 7a00 	vstr	s15, [r2]
    result[1] = a[2]*b[0] - a[0]*b[2];
 8000bf8:	ed90 7a00 	vldr	s14, [r0]
 8000bfc:	edd1 7a02 	vldr	s15, [r1, #8]
 8000c00:	edd0 6a02 	vldr	s13, [r0, #8]
 8000c04:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8000c08:	ed91 7a00 	vldr	s14, [r1]
 8000c0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000c10:	edc2 7a01 	vstr	s15, [r2, #4]
    result[2] = a[0]*b[1] - a[1]*b[0];
 8000c14:	ed90 7a01 	vldr	s14, [r0, #4]
 8000c18:	edd1 7a00 	vldr	s15, [r1]
 8000c1c:	edd0 6a00 	vldr	s13, [r0]
 8000c20:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8000c24:	ed91 7a01 	vldr	s14, [r1, #4]
 8000c28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000c2c:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8000c30:	4770      	bx	lr

08000c32 <quaternion_correction>:


void quaternion_correction(const quaternion_t *q1, quaternion_t *q2) // flips q2 if the dot product is negative to avoid sign ambiguity
{
	float dot = q1->w*q2->w + q1->x*q2->x + q1->y*q2->y + q1->z*q2->z;
 8000c32:	ed91 6a01 	vldr	s12, [r1, #4]
 8000c36:	edd0 7a01 	vldr	s15, [r0, #4]
 8000c3a:	ed90 7a00 	vldr	s14, [r0]
 8000c3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000c42:	edd1 5a00 	vldr	s11, [r1]
 8000c46:	edd1 6a02 	vldr	s13, [r1, #8]
 8000c4a:	ed90 5a03 	vldr	s10, [r0, #12]
 8000c4e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8000c52:	ed90 7a02 	vldr	s14, [r0, #8]
 8000c56:	eee7 7a26 	vfma.f32	s15, s14, s13
 8000c5a:	ed91 7a03 	vldr	s14, [r1, #12]
 8000c5e:	eee5 7a07 	vfma.f32	s15, s10, s14
	if (dot < 0.0f)
 8000c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6a:	d50f      	bpl.n	8000c8c <quaternion_correction+0x5a>
	{
		q2->w = -q2->w;
 8000c6c:	eef1 5a65 	vneg.f32	s11, s11
		q2->x = -q2->x;
 8000c70:	eeb1 6a46 	vneg.f32	s12, s12
		q2->y = -q2->y;
 8000c74:	eef1 6a66 	vneg.f32	s13, s13
		q2->z = -q2->z;
 8000c78:	eeb1 7a47 	vneg.f32	s14, s14
		q2->w = -q2->w;
 8000c7c:	edc1 5a00 	vstr	s11, [r1]
		q2->x = -q2->x;
 8000c80:	ed81 6a01 	vstr	s12, [r1, #4]
		q2->y = -q2->y;
 8000c84:	edc1 6a02 	vstr	s13, [r1, #8]
		q2->z = -q2->z;
 8000c88:	ed81 7a03 	vstr	s14, [r1, #12]
	}
}
 8000c8c:	4770      	bx	lr

08000c8e <rot_x_mat>:


void rot_x_mat(Mat3 R, float angle_rad)
{
 8000c8e:	b510      	push	{r4, lr}
 8000c90:	ed2d 8b02 	vpush	{d8}
 8000c94:	eef0 8a40 	vmov.f32	s17, s0
 8000c98:	4604      	mov	r4, r0

    float c = cosf(angle_rad);
 8000c9a:	f00a fd39 	bl	800b710 <cosf>
 8000c9e:	eeb0 8a40 	vmov.f32	s16, s0
    float s = sinf(angle_rad);
 8000ca2:	eeb0 0a68 	vmov.f32	s0, s17
 8000ca6:	f00a fc6f 	bl	800b588 <sinf>

    R[0][0] = 1; R[0][1] = 0; R[0][2] = 0;
 8000caa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    R[1][0] = 0; R[1][1] = c; R[1][2] = -s;
 8000cae:	eef1 7a40 	vneg.f32	s15, s0
 8000cb2:	ed84 8a04 	vstr	s16, [r4, #16]
    R[0][0] = 1; R[0][1] = 0; R[0][2] = 0;
 8000cb6:	6023      	str	r3, [r4, #0]
 8000cb8:	2300      	movs	r3, #0
    R[2][0] = 0; R[2][1] = s; R[2][2] = c;
 8000cba:	ed84 8a08 	vstr	s16, [r4, #32]
    R[0][0] = 1; R[0][1] = 0; R[0][2] = 0;
 8000cbe:	6063      	str	r3, [r4, #4]
 8000cc0:	60a3      	str	r3, [r4, #8]
    R[1][0] = 0; R[1][1] = c; R[1][2] = -s;
 8000cc2:	60e3      	str	r3, [r4, #12]
 8000cc4:	edc4 7a05 	vstr	s15, [r4, #20]
    R[2][0] = 0; R[2][1] = s; R[2][2] = c;
 8000cc8:	61a3      	str	r3, [r4, #24]
 8000cca:	ed84 0a07 	vstr	s0, [r4, #28]

}
 8000cce:	ecbd 8b02 	vpop	{d8}
 8000cd2:	bd10      	pop	{r4, pc}

08000cd4 <rot_y_mat>:

void rot_y_mat(Mat3 R, float angle_rad)
{
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	ed2d 8b02 	vpush	{d8}
 8000cda:	eef0 8a40 	vmov.f32	s17, s0
 8000cde:	4604      	mov	r4, r0

    float c = cosf(angle_rad);
 8000ce0:	f00a fd16 	bl	800b710 <cosf>
 8000ce4:	eeb0 8a40 	vmov.f32	s16, s0
    float s = sinf(angle_rad);
 8000ce8:	eeb0 0a68 	vmov.f32	s0, s17
 8000cec:	f00a fc4c 	bl	800b588 <sinf>

    R[0][0] = c; R[0][1] = 0; R[0][2] = s;
    R[1][0] = 0; R[1][1] = 1; R[1][2] = 0;
    R[2][0] = -s; R[2][1] = 0; R[2][2] = c;
 8000cf0:	eef1 7a40 	vneg.f32	s15, s0
    R[0][0] = c; R[0][1] = 0; R[0][2] = s;
 8000cf4:	2300      	movs	r3, #0
    R[1][0] = 0; R[1][1] = 1; R[1][2] = 0;
 8000cf6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
    R[0][0] = c; R[0][1] = 0; R[0][2] = s;
 8000cfa:	ed84 8a00 	vstr	s16, [r4]
    R[2][0] = -s; R[2][1] = 0; R[2][2] = c;
 8000cfe:	ed84 8a08 	vstr	s16, [r4, #32]
    R[0][0] = c; R[0][1] = 0; R[0][2] = s;
 8000d02:	6063      	str	r3, [r4, #4]
 8000d04:	ed84 0a02 	vstr	s0, [r4, #8]
    R[1][0] = 0; R[1][1] = 1; R[1][2] = 0;
 8000d08:	60e3      	str	r3, [r4, #12]
 8000d0a:	6122      	str	r2, [r4, #16]
 8000d0c:	6163      	str	r3, [r4, #20]
    R[2][0] = -s; R[2][1] = 0; R[2][2] = c;
 8000d0e:	edc4 7a06 	vstr	s15, [r4, #24]
 8000d12:	61e3      	str	r3, [r4, #28]

}
 8000d14:	ecbd 8b02 	vpop	{d8}
 8000d18:	bd10      	pop	{r4, pc}

08000d1a <rot_z_mat>:

void rot_z_mat(Mat3 R, float angle_rad)
{
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	ed2d 8b02 	vpush	{d8}
 8000d20:	eef0 8a40 	vmov.f32	s17, s0
 8000d24:	4604      	mov	r4, r0

    float c = cosf(angle_rad);
 8000d26:	f00a fcf3 	bl	800b710 <cosf>
 8000d2a:	eeb0 8a40 	vmov.f32	s16, s0
    float s = sinf(angle_rad);
 8000d2e:	eeb0 0a68 	vmov.f32	s0, s17
 8000d32:	f00a fc29 	bl	800b588 <sinf>

    R[0][0] = c; R[0][1] = -s; R[0][2] = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	eef1 7a40 	vneg.f32	s15, s0
 8000d3c:	ed84 8a00 	vstr	s16, [r4]
 8000d40:	60a3      	str	r3, [r4, #8]
    R[1][0] = s; R[1][1] = c; R[1][2] = 0;
 8000d42:	ed84 8a04 	vstr	s16, [r4, #16]
 8000d46:	6163      	str	r3, [r4, #20]
    R[2][0] = 0; R[2][1] = 0; R[2][2] = 1;
 8000d48:	61a3      	str	r3, [r4, #24]
 8000d4a:	61e3      	str	r3, [r4, #28]
 8000d4c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    R[0][0] = c; R[0][1] = -s; R[0][2] = 0;
 8000d50:	edc4 7a01 	vstr	s15, [r4, #4]
    R[1][0] = s; R[1][1] = c; R[1][2] = 0;
 8000d54:	ed84 0a03 	vstr	s0, [r4, #12]
    R[2][0] = 0; R[2][1] = 0; R[2][2] = 1;
 8000d58:	6223      	str	r3, [r4, #32]

}
 8000d5a:	ecbd 8b02 	vpop	{d8}
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <matrixToQuat>:



void matrixToQuat(const Mat3 R, quaternion_t *q) {
    float trace = R[0][0] + R[1][1] + R[2][2];
 8000d60:	edd0 7a00 	vldr	s15, [r0]
 8000d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d68:	edd0 6a04 	vldr	s13, [r0, #16]
 8000d6c:	ed90 0a08 	vldr	s0, [r0, #32]
 8000d70:	ee37 6aa6 	vadd.f32	s12, s15, s13
void matrixToQuat(const Mat3 R, quaternion_t *q) {
 8000d74:	b538      	push	{r3, r4, r5, lr}
    float trace = R[0][0] + R[1][1] + R[2][2];
 8000d76:	ee36 6a00 	vadd.f32	s12, s12, s0
void matrixToQuat(const Mat3 R, quaternion_t *q) {
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	460d      	mov	r5, r1
    if (trace > 0.0f) {
 8000d7e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
void matrixToQuat(const Mat3 R, quaternion_t *q) {
 8000d82:	ed2d 8b02 	vpush	{d8}
    if (trace > 0.0f) {
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	eeb5 8a00 	vmov.f32	s16, #80	@ 0x3e800000  0.250
 8000d8e:	dd2a      	ble.n	8000de6 <matrixToQuat+0x86>
        float s = 2.0f * sqrtf(trace + 1.0f);
 8000d90:	ee36 0a07 	vadd.f32	s0, s12, s14
 8000d94:	f00a fbae 	bl	800b4f4 <sqrtf>
 8000d98:	ee30 0a00 	vadd.f32	s0, s0, s0
        q->w = 0.25f * s;
 8000d9c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8000da0:	ed85 8a00 	vstr	s16, [r5]
        q->x = (R[2][1] - R[1][2]) / s;
 8000da4:	ed94 7a05 	vldr	s14, [r4, #20]
 8000da8:	edd4 7a07 	vldr	s15, [r4, #28]
 8000dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db0:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8000db4:	ed85 7a01 	vstr	s14, [r5, #4]
        q->y = (R[0][2] - R[2][0]) / s;
 8000db8:	ed94 7a06 	vldr	s14, [r4, #24]
 8000dbc:	edd4 7a02 	vldr	s15, [r4, #8]
 8000dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8000dc8:	ed85 7a02 	vstr	s14, [r5, #8]
        q->z = (R[1][0] - R[0][1]) / s;
 8000dcc:	ed94 7a03 	vldr	s14, [r4, #12]
 8000dd0:	edd4 7a01 	vldr	s15, [r4, #4]
 8000dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
        if (R[0][0] > R[1][1] && R[0][0] > R[2][2]) {
            float s = 2.0f * sqrtf(1.0f + R[0][0] - R[1][1] - R[2][2]);
            q->w = (R[2][1] - R[1][2]) / s;
            q->x = 0.25f * s;
            q->y = (R[0][1] + R[1][0]) / s;
            q->z = (R[0][2] + R[2][0]) / s;
 8000dd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
        q->z = (R[1][0] - R[0][1]) / s;
 8000ddc:	edc5 7a03 	vstr	s15, [r5, #12]
            q->x = (R[0][2] + R[2][0]) / s;
            q->y = (R[1][2] + R[2][1]) / s;
            q->z = 0.25f * s;
        }
    }
}
 8000de0:	ecbd 8b02 	vpop	{d8}
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
        if (R[0][0] > R[1][1] && R[0][0] > R[2][2]) {
 8000de6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	dd2d      	ble.n	8000e4c <matrixToQuat+0xec>
 8000df0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	dd28      	ble.n	8000e4c <matrixToQuat+0xec>
            float s = 2.0f * sqrtf(1.0f + R[0][0] - R[1][1] - R[2][2]);
 8000dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000e02:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8000e06:	f00a fb75 	bl	800b4f4 <sqrtf>
            q->w = (R[2][1] - R[1][2]) / s;
 8000e0a:	ed94 7a05 	vldr	s14, [r4, #20]
 8000e0e:	edd4 7a07 	vldr	s15, [r4, #28]
            float s = 2.0f * sqrtf(1.0f + R[0][0] - R[1][1] - R[2][2]);
 8000e12:	ee30 0a00 	vadd.f32	s0, s0, s0
            q->w = (R[2][1] - R[1][2]) / s;
 8000e16:	ee77 7ac7 	vsub.f32	s15, s15, s14
            q->x = 0.25f * s;
 8000e1a:	ee20 8a08 	vmul.f32	s16, s0, s16
            q->w = (R[2][1] - R[1][2]) / s;
 8000e1e:	ee87 7a80 	vdiv.f32	s14, s15, s0
            q->x = 0.25f * s;
 8000e22:	ed85 8a01 	vstr	s16, [r5, #4]
            q->w = (R[2][1] - R[1][2]) / s;
 8000e26:	ed85 7a00 	vstr	s14, [r5]
            q->y = (R[0][1] + R[1][0]) / s;
 8000e2a:	ed94 7a03 	vldr	s14, [r4, #12]
 8000e2e:	edd4 7a01 	vldr	s15, [r4, #4]
 8000e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e36:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8000e3a:	ed85 7a02 	vstr	s14, [r5, #8]
            q->z = (R[0][2] + R[2][0]) / s;
 8000e3e:	ed94 7a02 	vldr	s14, [r4, #8]
 8000e42:	edd4 7a06 	vldr	s15, [r4, #24]
 8000e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e4a:	e7c5      	b.n	8000dd8 <matrixToQuat+0x78>
        } else if (R[1][1] > R[2][2]) {
 8000e4c:	eef4 6ac0 	vcmpe.f32	s13, s0
            float s = 2.0f * sqrtf(1.0f - R[0][0] + R[1][1] - R[2][2]);
 8000e50:	ee37 7a67 	vsub.f32	s14, s14, s15
        } else if (R[1][1] > R[2][2]) {
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	dd24      	ble.n	8000ea4 <matrixToQuat+0x144>
            float s = 2.0f * sqrtf(1.0f - R[0][0] + R[1][1] - R[2][2]);
 8000e5a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8000e5e:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8000e62:	f00a fb47 	bl	800b4f4 <sqrtf>
            q->w = (R[0][2] - R[2][0]) / s;
 8000e66:	ed94 7a06 	vldr	s14, [r4, #24]
 8000e6a:	edd4 7a02 	vldr	s15, [r4, #8]
            float s = 2.0f * sqrtf(1.0f - R[0][0] + R[1][1] - R[2][2]);
 8000e6e:	ee30 0a00 	vadd.f32	s0, s0, s0
            q->w = (R[0][2] - R[2][0]) / s;
 8000e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
            q->y = 0.25f * s;
 8000e76:	ee20 8a08 	vmul.f32	s16, s0, s16
            q->w = (R[0][2] - R[2][0]) / s;
 8000e7a:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8000e7e:	ed85 7a00 	vstr	s14, [r5]
            q->x = (R[0][1] + R[1][0]) / s;
 8000e82:	ed94 7a03 	vldr	s14, [r4, #12]
 8000e86:	edd4 7a01 	vldr	s15, [r4, #4]
            q->y = 0.25f * s;
 8000e8a:	ed85 8a02 	vstr	s16, [r5, #8]
            q->x = (R[0][1] + R[1][0]) / s;
 8000e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e92:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8000e96:	ed85 7a01 	vstr	s14, [r5, #4]
            q->z = (R[1][2] + R[2][1]) / s;
 8000e9a:	ed94 7a05 	vldr	s14, [r4, #20]
 8000e9e:	edd4 7a07 	vldr	s15, [r4, #28]
 8000ea2:	e7d0      	b.n	8000e46 <matrixToQuat+0xe6>
            float s = 2.0f * sqrtf(1.0f - R[0][0] - R[1][1] + R[2][2] );
 8000ea4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000ea8:	ee37 0a00 	vadd.f32	s0, s14, s0
 8000eac:	f00a fb22 	bl	800b4f4 <sqrtf>
            q->w = (R[1][0] - R[0][1]) / s;
 8000eb0:	edd4 6a01 	vldr	s13, [r4, #4]
 8000eb4:	ed94 7a03 	vldr	s14, [r4, #12]
            float s = 2.0f * sqrtf(1.0f - R[0][0] - R[1][1] + R[2][2] );
 8000eb8:	ee70 7a00 	vadd.f32	s15, s0, s0
            q->w = (R[1][0] - R[0][1]) / s;
 8000ebc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ec4:	edc5 6a00 	vstr	s13, [r5]
            q->x = (R[0][2] + R[2][0]) / s;
 8000ec8:	edd4 6a06 	vldr	s13, [r4, #24]
 8000ecc:	ed94 7a02 	vldr	s14, [r4, #8]
 8000ed0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000ed4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ed8:	edc5 6a01 	vstr	s13, [r5, #4]
            q->y = (R[1][2] + R[2][1]) / s;
 8000edc:	edd4 6a07 	vldr	s13, [r4, #28]
 8000ee0:	ed94 7a05 	vldr	s14, [r4, #20]
 8000ee4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8000ee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
            q->z = 0.25f * s;
 8000eec:	ee67 7a88 	vmul.f32	s15, s15, s16
            q->y = (R[1][2] + R[2][1]) / s;
 8000ef0:	edc5 6a02 	vstr	s13, [r5, #8]
            q->z = 0.25f * s;
 8000ef4:	e772      	b.n	8000ddc <matrixToQuat+0x7c>

08000ef6 <mat3Multiply>:



void mat3Multiply(const Mat3 A, const Mat3 B, Mat3 C) {
 8000ef6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000efa:	f101 0c0c 	add.w	ip, r1, #12
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            C[i][j] = 0;
 8000efe:	2400      	movs	r4, #0
 8000f00:	f04f 0e00 	mov.w	lr, #0
        for (int j = 0; j < 3; ++j) {
 8000f04:	1915      	adds	r5, r2, r4
 8000f06:	460b      	mov	r3, r1
            C[i][j] = 0;
 8000f08:	1907      	adds	r7, r0, r4
 8000f0a:	461e      	mov	r6, r3
            for (int k = 0; k < 3; ++k) {
 8000f0c:	f103 0824 	add.w	r8, r3, #36	@ 0x24
            C[i][j] = 0;
 8000f10:	f845 eb04 	str.w	lr, [r5], #4
                C[i][j] += A[i][k] * B[k][j];
 8000f14:	46b1      	mov	r9, r6
 8000f16:	ecf7 6a01 	vldmia	r7!, {s13}
 8000f1a:	ed55 7a01 	vldr	s15, [r5, #-4]
 8000f1e:	360c      	adds	r6, #12
 8000f20:	ed99 7a00 	vldr	s14, [r9]
            for (int k = 0; k < 3; ++k) {
 8000f24:	4546      	cmp	r6, r8
                C[i][j] += A[i][k] * B[k][j];
 8000f26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000f2a:	ed45 7a01 	vstr	s15, [r5, #-4]
            for (int k = 0; k < 3; ++k) {
 8000f2e:	d1f1      	bne.n	8000f14 <mat3Multiply+0x1e>
        for (int j = 0; j < 3; ++j) {
 8000f30:	3304      	adds	r3, #4
 8000f32:	4563      	cmp	r3, ip
 8000f34:	d1e8      	bne.n	8000f08 <mat3Multiply+0x12>
    for (int i = 0; i < 3; ++i) {
 8000f36:	340c      	adds	r4, #12
 8000f38:	2c24      	cmp	r4, #36	@ 0x24
 8000f3a:	d1e3      	bne.n	8000f04 <mat3Multiply+0xe>
            }
        }
    }
}
 8000f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f40 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){
 8000f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000f42:	2264      	movs	r2, #100	@ 0x64
 8000f44:	2301      	movs	r3, #1
void SelectPage(uint8_t page){
 8000f46:	f88d 0017 	strb.w	r0, [sp, #23]
	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000f4a:	2150      	movs	r1, #80	@ 0x50
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <SelectPage+0x34>)
 8000f4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000f52:	f10d 0217 	add.w	r2, sp, #23
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	2207      	movs	r2, #7
 8000f5a:	f003 fc2d 	bl	80047b8 <HAL_I2C_Mem_Write>
 8000f5e:	b110      	cbz	r0, 8000f66 <SelectPage+0x26>
		printf("Register page replacement could not be set\n");
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <SelectPage+0x38>)
 8000f62:	f008 f9ff 	bl	8009364 <puts>
	}
	HAL_Delay(50);
 8000f66:	2032      	movs	r0, #50	@ 0x32
 8000f68:	f002 fb88 	bl	800367c <HAL_Delay>
}
 8000f6c:	b007      	add	sp, #28
 8000f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f72:	bf00      	nop
 8000f74:	2400093c 	.word	0x2400093c
 8000f78:	0800b8b4 	.word	0x0800b8b4

08000f7c <ResetBNO055>:
  *
  * @param  None
  *
  * @retval None
  */
void ResetBNO055(void){
 8000f7c:	b570      	push	{r4, r5, r6, lr}

	uint8_t reset = 0x20;
 8000f7e:	2320      	movs	r3, #32
void ResetBNO055(void){
 8000f80:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 8000f82:	2464      	movs	r4, #100	@ 0x64
 8000f84:	2150      	movs	r1, #80	@ 0x50
 8000f86:	f10d 0216 	add.w	r2, sp, #22
	uint8_t reset = 0x20;
 8000f8a:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 8000f8e:	2301      	movs	r3, #1
 8000f90:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <ResetBNO055+0x64>)
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	223f      	movs	r2, #63	@ 0x3f


	//If value of id register is not equal to BNO055 chip id which is 0xA0, wait until equal to each other
	while(chip_id != BNO055_ID) {

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 8000f96:	4d12      	ldr	r5, [pc, #72]	@ (8000fe0 <ResetBNO055+0x64>)
		printf("BNO055-> Undefined chip id\n");
 8000f98:	4e12      	ldr	r6, [pc, #72]	@ (8000fe4 <ResetBNO055+0x68>)
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 8000f9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000f9e:	f003 fc0b 	bl	80047b8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000fa2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa6:	f002 fb69 	bl	800367c <HAL_Delay>
	uint8_t chip_id=0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f88d 3017 	strb.w	r3, [sp, #23]
	while(chip_id != BNO055_ID) {
 8000fb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000fb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8000fb6:	d101      	bne.n	8000fbc <ResetBNO055+0x40>
		HAL_Delay(200);
	}
}
 8000fb8:	b006      	add	sp, #24
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f10d 0217 	add.w	r2, sp, #23
 8000fc2:	2150      	movs	r1, #80	@ 0x50
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	9402      	str	r4, [sp, #8]
 8000fce:	f003 fccd 	bl	800496c <HAL_I2C_Mem_Read>
		printf("BNO055-> Undefined chip id\n");
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	f008 f9c6 	bl	8009364 <puts>
		HAL_Delay(200);
 8000fd8:	20c8      	movs	r0, #200	@ 0xc8
 8000fda:	f002 fb4f 	bl	800367c <HAL_Delay>
 8000fde:	e7e7      	b.n	8000fb0 <ResetBNO055+0x34>
 8000fe0:	2400093c 	.word	0x2400093c
 8000fe4:	0800b8df 	.word	0x0800b8df

08000fe8 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	460d      	mov	r5, r1
 8000fec:	b086      	sub	sp, #24
 8000fee:	4604      	mov	r4, r0


	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 8000ff0:	07e9      	lsls	r1, r5, #31
 8000ff2:	d535      	bpl.n	8001060 <ReadData+0x78>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffa:	ae04      	add	r6, sp, #16
 8000ffc:	2150      	movs	r1, #80	@ 0x50
 8000ffe:	48cc      	ldr	r0, [pc, #816]	@ (8001330 <ReadData+0x348>)
 8001000:	9600      	str	r6, [sp, #0]
 8001002:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001006:	2301      	movs	r3, #1
 8001008:	222e      	movs	r2, #46	@ 0x2e
 800100a:	f003 fcaf 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 800100e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001012:	ee05 3a10 	vmov	s10, r3
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001016:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 800101a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 800101e:	ed9f 6bbe 	vldr	d6, [pc, #760]	@ 8001318 <ReadData+0x330>
 8001022:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001026:	ee05 3a10 	vmov	s10, r3
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800102a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800102e:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001032:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001036:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800103a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800103e:	ee05 3a10 	vmov	s10, r3
	        memset(buffer, 0, sizeof(buffer));
 8001042:	2300      	movs	r3, #0
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001044:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        memset(buffer, 0, sizeof(buffer));
 8001048:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800104c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001050:	ed84 7a10 	vstr	s14, [r4, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001054:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001058:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800105c:	ed84 7a11 	vstr	s14, [r4, #68]	@ 0x44
	    }

	    if (sensors & SENSOR_QUATERNION) {
 8001060:	07ab      	lsls	r3, r5, #30
 8001062:	d541      	bpl.n	80010e8 <ReadData+0x100>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 8001064:	2308      	movs	r3, #8
 8001066:	f04f 3cff 	mov.w	ip, #4294967295
 800106a:	ae04      	add	r6, sp, #16
 800106c:	2220      	movs	r2, #32
 800106e:	2150      	movs	r1, #80	@ 0x50
 8001070:	48af      	ldr	r0, [pc, #700]	@ (8001330 <ReadData+0x348>)
 8001072:	9600      	str	r6, [sp, #0]
 8001074:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8001078:	2301      	movs	r3, #1
 800107a:	f003 fc77 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(16384.0));
 800107e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001082:	ee07 3a10 	vmov	s14, r3
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(16384.0));
 8001086:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(16384.0));
 800108a:	ed9f 6ba5 	vldr	d6, [pc, #660]	@ 8001320 <ReadData+0x338>
 800108e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8001092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001096:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800109a:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(16384.0));
 800109e:	ee07 3a10 	vmov	s14, r3
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(16384.0));
 80010a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(16384.0));
 80010a6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80010aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ae:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80010b2:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(16384.0));
 80010b6:	ee07 3a10 	vmov	s14, r3
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(16384.0));
 80010ba:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(16384.0));
 80010be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80010c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010c6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80010ca:	ed84 7a14 	vstr	s14, [r4, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(16384.0));
 80010ce:	ee07 3a10 	vmov	s14, r3
	        memset(buffer, 0, sizeof(buffer));
 80010d2:	2300      	movs	r3, #0
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(16384.0));
 80010d4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	        memset(buffer, 0, sizeof(buffer));
 80010d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(16384.0));
 80010dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80010e4:	ed84 7a15 	vstr	s14, [r4, #84]	@ 0x54
	    }

	    if (sensors & SENSOR_LINACC) {
 80010e8:	076e      	lsls	r6, r5, #29
 80010ea:	d535      	bpl.n	8001158 <ReadData+0x170>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 80010ec:	2306      	movs	r3, #6
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	ae04      	add	r6, sp, #16
 80010f4:	2228      	movs	r2, #40	@ 0x28
 80010f6:	2150      	movs	r1, #80	@ 0x50
 80010f8:	9600      	str	r6, [sp, #0]
 80010fa:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80010fe:	2301      	movs	r3, #1
 8001100:	488b      	ldr	r0, [pc, #556]	@ (8001330 <ReadData+0x348>)
 8001102:	f003 fc33 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001106:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800110a:	ee05 3a10 	vmov	s10, r3
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800110e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001112:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8001116:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 8001318 <ReadData+0x330>
 800111a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800111e:	ee05 3a10 	vmov	s10, r3
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001122:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001126:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 800112a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800112e:	ed84 7a0c 	vstr	s14, [r4, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001132:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001136:	ee05 3a10 	vmov	s10, r3
	        memset(buffer, 0, sizeof(buffer));
 800113a:	2300      	movs	r3, #0
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800113c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        memset(buffer, 0, sizeof(buffer));
 8001140:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001144:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001148:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800114c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001150:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001154:	ed84 7a0e 	vstr	s14, [r4, #56]	@ 0x38
	    }

	    if (sensors & SENSOR_GYRO) {
 8001158:	0729      	lsls	r1, r5, #28
 800115a:	d535      	bpl.n	80011c8 <ReadData+0x1e0>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 800115c:	2306      	movs	r3, #6
 800115e:	f04f 32ff 	mov.w	r2, #4294967295
 8001162:	ae04      	add	r6, sp, #16
 8001164:	2150      	movs	r1, #80	@ 0x50
 8001166:	4872      	ldr	r0, [pc, #456]	@ (8001330 <ReadData+0x348>)
 8001168:	9600      	str	r6, [sp, #0]
 800116a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800116e:	2301      	movs	r3, #1
 8001170:	2214      	movs	r2, #20
 8001172:	f003 fbfb 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001176:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800117a:	ee07 3a10 	vmov	s14, r3
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800117e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001182:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8001328 <ReadData+0x340>
 8001186:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800118a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800118e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001192:	ed84 7a03 	vstr	s14, [r4, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001196:	ee07 3a10 	vmov	s14, r3
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800119a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800119e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80011a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011a6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80011aa:	ed84 7a04 	vstr	s14, [r4, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80011ae:	ee07 3a10 	vmov	s14, r3
	        memset(buffer, 0, sizeof(buffer));
 80011b2:	2300      	movs	r3, #0
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80011b4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	        memset(buffer, 0, sizeof(buffer));
 80011b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80011bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011c0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80011c4:	ed84 7a05 	vstr	s14, [r4, #20]
	    }
	    if (sensors & SENSOR_ACCEL) {
 80011c8:	06eb      	lsls	r3, r5, #27
 80011ca:	d535      	bpl.n	8001238 <ReadData+0x250>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 80011cc:	2306      	movs	r3, #6
 80011ce:	f04f 3cff 	mov.w	ip, #4294967295
 80011d2:	ae04      	add	r6, sp, #16
 80011d4:	2208      	movs	r2, #8
 80011d6:	2150      	movs	r1, #80	@ 0x50
 80011d8:	4855      	ldr	r0, [pc, #340]	@ (8001330 <ReadData+0x348>)
 80011da:	9600      	str	r6, [sp, #0]
 80011dc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80011e0:	2301      	movs	r3, #1
 80011e2:	f003 fbc3 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 80011e6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80011ea:	ee05 3a10 	vmov	s10, r3
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 80011ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 80011f2:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 80011f6:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8001318 <ReadData+0x330>
 80011fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 80011fe:	ee05 3a10 	vmov	s10, r3
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 8001202:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 8001206:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 800120a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800120e:	ed84 7a00 	vstr	s14, [r4]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 8001212:	ee85 7b06 	vdiv.f64	d7, d5, d6
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 8001216:	ee05 3a10 	vmov	s10, r3
	        memset(buffer, 0, sizeof(buffer));
 800121a:	2300      	movs	r3, #0
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 800121c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
	        memset(buffer, 0, sizeof(buffer));
 8001220:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 8001224:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001228:	ed84 7a01 	vstr	s14, [r4, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 800122c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001230:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001234:	ed84 7a02 	vstr	s14, [r4, #8]
	    }
	    if (sensors & SENSOR_MAG) {
 8001238:	06ae      	lsls	r6, r5, #26
 800123a:	d535      	bpl.n	80012a8 <ReadData+0x2c0>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 800123c:	2306      	movs	r3, #6
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	ae04      	add	r6, sp, #16
 8001244:	220e      	movs	r2, #14
 8001246:	2150      	movs	r1, #80	@ 0x50
 8001248:	9600      	str	r6, [sp, #0]
 800124a:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800124e:	2301      	movs	r3, #1
 8001250:	4837      	ldr	r0, [pc, #220]	@ (8001330 <ReadData+0x348>)
 8001252:	f003 fb8b 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001256:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800125a:	ee07 3a10 	vmov	s14, r3
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800125e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001262:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8001328 <ReadData+0x340>
 8001266:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800126a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800126e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001272:	ed84 7a06 	vstr	s14, [r4, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001276:	ee07 3a10 	vmov	s14, r3
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800127a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800127e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8001282:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001286:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800128a:	ed84 7a07 	vstr	s14, [r4, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800128e:	ee07 3a10 	vmov	s14, r3
	        memset(buffer, 0, sizeof(buffer));
 8001292:	2300      	movs	r3, #0
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001294:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
	        memset(buffer, 0, sizeof(buffer));
 8001298:	e9cd 3304 	strd	r3, r3, [sp, #16]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800129c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012a0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80012a4:	ed84 7a08 	vstr	s14, [r4, #32]
	    }
	    if (sensors & SENSOR_EULER) {
 80012a8:	0669      	lsls	r1, r5, #25
 80012aa:	d532      	bpl.n	8001312 <ReadData+0x32a>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 80012ac:	2306      	movs	r3, #6
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	2150      	movs	r1, #80	@ 0x50
 80012b4:	481e      	ldr	r0, [pc, #120]	@ (8001330 <ReadData+0x348>)
 80012b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80012ba:	ab04      	add	r3, sp, #16
 80012bc:	221a      	movs	r2, #26
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	f003 fb53 	bl	800496c <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80012c6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80012ca:	ee07 3a10 	vmov	s14, r3
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80012ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80012d2:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8001328 <ReadData+0x340>
 80012d6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80012da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012de:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80012e2:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80012e6:	ee07 3a10 	vmov	s14, r3
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80012ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80012ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80012f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80012fa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80012fe:	ee07 3a10 	vmov	s14, r3
 8001302:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8001306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800130a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800130e:	ed84 7a0b 	vstr	s14, [r4, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
	    }
}
 8001312:	b006      	add	sp, #24
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	bf00      	nop
 8001318:	00000000 	.word	0x00000000
 800131c:	40590000 	.word	0x40590000
 8001320:	00000000 	.word	0x00000000
 8001324:	3f100000 	.word	0x3f100000
 8001328:	00000000 	.word	0x00000000
 800132c:	3fb00000 	.word	0x3fb00000
 8001330:	2400093c 	.word	0x2400093c

08001334 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){
 8001334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001336:	f88d 0017 	strb.w	r0, [sp, #23]

	SelectPage(PAGE_0);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fe00 	bl	8000f40 <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 8001340:	2264      	movs	r2, #100	@ 0x64
 8001342:	2301      	movs	r3, #1
 8001344:	2150      	movs	r1, #80	@ 0x50
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <Set_Operation_Mode+0x48>)
 8001348:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800134c:	f10d 0217 	add.w	r2, sp, #23
 8001350:	9200      	str	r2, [sp, #0]
 8001352:	223d      	movs	r2, #61	@ 0x3d
 8001354:	f003 fa30 	bl	80047b8 <HAL_I2C_Mem_Write>
 8001358:	b158      	cbz	r0, 8001372 <Set_Operation_Mode+0x3e>
		printf("Operation mode could not be set!\n");
 800135a:	4809      	ldr	r0, [pc, #36]	@ (8001380 <Set_Operation_Mode+0x4c>)
	}
	else printf("Operation mode switching succeeded.\n");
 800135c:	f008 f802 	bl	8009364 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 8001360:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001364:	b93b      	cbnz	r3, 8001376 <Set_Operation_Mode+0x42>
 8001366:	2013      	movs	r0, #19

	else HAL_Delay(9);
 8001368:	f002 f988 	bl	800367c <HAL_Delay>

}
 800136c:	b007      	add	sp, #28
 800136e:	f85d fb04 	ldr.w	pc, [sp], #4
	else printf("Operation mode switching succeeded.\n");
 8001372:	4804      	ldr	r0, [pc, #16]	@ (8001384 <Set_Operation_Mode+0x50>)
 8001374:	e7f2      	b.n	800135c <Set_Operation_Mode+0x28>
	else HAL_Delay(9);
 8001376:	2009      	movs	r0, #9
 8001378:	e7f6      	b.n	8001368 <Set_Operation_Mode+0x34>
 800137a:	bf00      	nop
 800137c:	2400093c 	.word	0x2400093c
 8001380:	0800b8fa 	.word	0x0800b8fa
 8001384:	0800b91b 	.word	0x0800b91b

08001388 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){
 8001388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	2301      	movs	r3, #1
void SetPowerMODE(uint8_t BNO055_){
 800138e:	f88d 0017 	strb.w	r0, [sp, #23]
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 8001392:	2150      	movs	r1, #80	@ 0x50
 8001394:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <SetPowerMODE+0x38>)
 8001396:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800139a:	f10d 0217 	add.w	r2, sp, #23
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	223e      	movs	r2, #62	@ 0x3e
 80013a2:	f003 fa09 	bl	80047b8 <HAL_I2C_Mem_Write>
 80013a6:	b140      	cbz	r0, 80013ba <SetPowerMODE+0x32>
	{
		printf("Power mode could not be set!\n");
 80013a8:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <SetPowerMODE+0x3c>)
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 80013aa:	f007 ffdb 	bl	8009364 <puts>
	}
	HAL_Delay(50);
 80013ae:	2032      	movs	r0, #50	@ 0x32
 80013b0:	f002 f964 	bl	800367c <HAL_Delay>

}
 80013b4:	b007      	add	sp, #28
 80013b6:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("Power mode switching succeeded.\n");
 80013ba:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <SetPowerMODE+0x40>)
 80013bc:	e7f5      	b.n	80013aa <SetPowerMODE+0x22>
 80013be:	bf00      	nop
 80013c0:	2400093c 	.word	0x2400093c
 80013c4:	0800b93f 	.word	0x0800b93f
 80013c8:	0800b95c 	.word	0x0800b95c

080013cc <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) {
 80013cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 80013ce:	2301      	movs	r3, #1
 80013d0:	2264      	movs	r2, #100	@ 0x64
 80013d2:	2150      	movs	r1, #80	@ 0x50
void Clock_Source(uint8_t source) {
 80013d4:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <Clock_Source+0x24>)
 80013da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80013de:	f10d 0217 	add.w	r2, sp, #23
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	223f      	movs	r2, #63	@ 0x3f
 80013e6:	f003 f9e7 	bl	80047b8 <HAL_I2C_Mem_Write>
}
 80013ea:	b007      	add	sp, #28
 80013ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f0:	2400093c 	.word	0x2400093c

080013f4 <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	b086      	sub	sp, #24

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 80013f8:	2401      	movs	r4, #1
 80013fa:	2564      	movs	r5, #100	@ 0x64
 80013fc:	4e11      	ldr	r6, [pc, #68]	@ (8001444 <BNO055_Axis+0x50>)
 80013fe:	f10d 0317 	add.w	r3, sp, #23
 8001402:	2241      	movs	r2, #65	@ 0x41
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8001404:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8001408:	4630      	mov	r0, r6
void BNO055_Axis(uint8_t remap, uint8_t sign){
 800140a:	f88d 1016 	strb.w	r1, [sp, #22]
	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 800140e:	2150      	movs	r1, #80	@ 0x50
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4623      	mov	r3, r4
 8001414:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001418:	f003 f9ce 	bl	80047b8 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800141c:	2014      	movs	r0, #20
 800141e:	f002 f92d 	bl	800367c <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 8001422:	f10d 0316 	add.w	r3, sp, #22
 8001426:	2242      	movs	r2, #66	@ 0x42
 8001428:	2150      	movs	r1, #80	@ 0x50
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4630      	mov	r0, r6
 800142e:	4623      	mov	r3, r4
 8001430:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001434:	f003 f9c0 	bl	80047b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001438:	4628      	mov	r0, r5
 800143a:	f002 f91f 	bl	800367c <HAL_Delay>
}
 800143e:	b006      	add	sp, #24
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	bf00      	nop
 8001444:	2400093c 	.word	0x2400093c

08001448 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8001448:	b510      	push	{r4, lr}
 800144a:	b086      	sub	sp, #24

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 800144c:	2301      	movs	r3, #1
 800144e:	2464      	movs	r4, #100	@ 0x64
 8001450:	2150      	movs	r1, #80	@ 0x50
 8001452:	f10d 0217 	add.w	r2, sp, #23
void SET_Accel_Range(uint8_t range){
 8001456:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 800145a:	4806      	ldr	r0, [pc, #24]	@ (8001474 <SET_Accel_Range+0x2c>)
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	2208      	movs	r2, #8
 8001460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001464:	f003 f9a8 	bl	80047b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001468:	4620      	mov	r0, r4
 800146a:	f002 f907 	bl	800367c <HAL_Delay>

}
 800146e:	b006      	add	sp, #24
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	2400093c 	.word	0x2400093c

08001478 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(BNO055_Init_t Init){
 8001478:	b530      	push	{r4, r5, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
	SelectPage(PAGE_0);
	HAL_Delay(50);

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 800147c:	2464      	movs	r4, #100	@ 0x64
void BNO055_Init(BNO055_Init_t Init){
 800147e:	ad04      	add	r5, sp, #16
 8001480:	e885 0003 	stmia.w	r5, {r0, r1}
	Set_Operation_Mode(CONFIG_MODE);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff ff55 	bl	8001334 <Set_Operation_Mode>
	HAL_Delay(50);
 800148a:	2032      	movs	r0, #50	@ 0x32
 800148c:	f002 f8f6 	bl	800367c <HAL_Delay>
	SelectPage(PAGE_1);
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff fd55 	bl	8000f40 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8001496:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800149a:	f7ff ffd5 	bl	8001448 <SET_Accel_Range>
	HAL_Delay(50);
 800149e:	2032      	movs	r0, #50	@ 0x32
 80014a0:	f002 f8ec 	bl	800367c <HAL_Delay>
	SelectPage(PAGE_0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fd4b 	bl	8000f40 <SelectPage>
	HAL_Delay(50);
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f002 f8e6 	bl	800367c <HAL_Delay>
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 80014b0:	2301      	movs	r3, #1
 80014b2:	f10d 021f 	add.w	r2, sp, #31
 80014b6:	2150      	movs	r1, #80	@ 0x50
 80014b8:	481e      	ldr	r0, [pc, #120]	@ (8001534 <BNO055_Init+0xbc>)
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	2238      	movs	r2, #56	@ 0x38
 80014be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80014c2:	f003 fa53 	bl	800496c <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	@ 0x32
 80014c8:	f002 f8d8 	bl	800367c <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 80014cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80014d0:	b933      	cbnz	r3, 80014e0 <BNO055_Init+0x68>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 80014d2:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80014d6:	f7ff ff79 	bl	80013cc <Clock_Source>
		HAL_Delay(100);
 80014da:	4620      	mov	r0, r4
 80014dc:	f002 f8ce 	bl	800367c <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 80014e0:	f89d 1012 	ldrb.w	r1, [sp, #18]
	HAL_Delay(100);

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 80014e4:	2464      	movs	r4, #100	@ 0x64
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 80014e6:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80014ea:	f7ff ff83 	bl	80013f4 <BNO055_Axis>
	HAL_Delay(100);
 80014ee:	2064      	movs	r0, #100	@ 0x64
 80014f0:	f002 f8c4 	bl	800367c <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 80014f4:	2301      	movs	r3, #1
 80014f6:	223b      	movs	r2, #59	@ 0x3b
 80014f8:	2150      	movs	r1, #80	@ 0x50
 80014fa:	9500      	str	r5, [sp, #0]
 80014fc:	480d      	ldr	r0, [pc, #52]	@ (8001534 <BNO055_Init+0xbc>)
 80014fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001502:	f003 f959 	bl	80047b8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001506:	4620      	mov	r0, r4
 8001508:	f002 f8b8 	bl	800367c <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 800150c:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8001510:	f7ff ff3a 	bl	8001388 <SetPowerMODE>
	HAL_Delay(100);
 8001514:	4620      	mov	r0, r4
 8001516:	f002 f8b1 	bl	800367c <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 800151a:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800151e:	f7ff ff09 	bl	8001334 <Set_Operation_Mode>
	HAL_Delay(100);
 8001522:	4620      	mov	r0, r4
 8001524:	f002 f8aa 	bl	800367c <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8001528:	4803      	ldr	r0, [pc, #12]	@ (8001538 <BNO055_Init+0xc0>)
 800152a:	f007 ff1b 	bl	8009364 <puts>
}
 800152e:	b009      	add	sp, #36	@ 0x24
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	2400093c 	.word	0x2400093c
 8001538:	0800b97c 	.word	0x0800b97c

0800153c <esp32_Init>:



void esp32_Init(void)
{
	HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	4902      	ldr	r1, [pc, #8]	@ (8001548 <esp32_Init+0xc>)
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <esp32_Init+0x10>)
 8001542:	f007 b91f 	b.w	8008784 <HAL_UART_Receive_IT>
 8001546:	bf00      	nop
 8001548:	240002e6 	.word	0x240002e6
 800154c:	24000ab4 	.word	0x24000ab4

08001550 <get_esp32_commands>:
}



uint8_t get_esp32_commands(esp32_commands_t *esp32_commands)
{
 8001550:	b513      	push	{r0, r1, r4, lr}
	if (uart_data_ready)
 8001552:	4c12      	ldr	r4, [pc, #72]	@ (800159c <get_esp32_commands+0x4c>)
{
 8001554:	4603      	mov	r3, r0
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <get_esp32_commands+0x50>)
	if (uart_data_ready)
 8001558:	7820      	ldrb	r0, [r4, #0]
 800155a:	b1a8      	cbz	r0, 8001588 <get_esp32_commands+0x38>
	{
		uart_data_ready = false;
 800155c:	2100      	movs	r1, #0
		inactivity = 0;
 800155e:	6011      	str	r1, [r2, #0]
		esp32_commands->ax_command = received_floats[0];
 8001560:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <get_esp32_commands+0x54>)
		uart_data_ready = false;
 8001562:	7021      	strb	r1, [r4, #0]
		esp32_commands->ax_command = received_floats[0];
 8001564:	6811      	ldr	r1, [r2, #0]
		esp32_commands->p_command = received_floats[1];
		esp32_commands->pitch_command = received_floats[2];
		esp32_commands->roll_command = received_floats[3];
		return  received_floats[4];									// Return status activate
 8001566:	edd2 7a04 	vldr	s15, [r2, #16]
		esp32_commands->ax_command = received_floats[0];
 800156a:	6019      	str	r1, [r3, #0]
		esp32_commands->p_command = received_floats[1];
 800156c:	6851      	ldr	r1, [r2, #4]
 800156e:	6059      	str	r1, [r3, #4]
		esp32_commands->pitch_command = received_floats[2];
 8001570:	6891      	ldr	r1, [r2, #8]
 8001572:	6099      	str	r1, [r3, #8]
		esp32_commands->roll_command = received_floats[3];
 8001574:	68d1      	ldr	r1, [r2, #12]
 8001576:	60d9      	str	r1, [r3, #12]
	else
	{
		if (inactivity < 100)
		{
			inactivity++;
			return received_floats[4];
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	edcd 7a01 	vstr	s15, [sp, #4]
 8001580:	f89d 0004 	ldrb.w	r0, [sp, #4]
		{
			inactivity++;
			return 0;
		}
	}
}
 8001584:	b002      	add	sp, #8
 8001586:	bd10      	pop	{r4, pc}
		if (inactivity < 100)
 8001588:	6811      	ldr	r1, [r2, #0]
			inactivity++;
 800158a:	1c4b      	adds	r3, r1, #1
		if (inactivity < 100)
 800158c:	2963      	cmp	r1, #99	@ 0x63
			inactivity++;
 800158e:	6013      	str	r3, [r2, #0]
		if (inactivity < 100)
 8001590:	d8f8      	bhi.n	8001584 <get_esp32_commands+0x34>
			return received_floats[4];
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <get_esp32_commands+0x54>)
 8001594:	edd3 7a04 	vldr	s15, [r3, #16]
 8001598:	e7ee      	b.n	8001578 <get_esp32_commands+0x28>
 800159a:	bf00      	nop
 800159c:	24000300 	.word	0x24000300
 80015a0:	240002e8 	.word	0x240002e8
 80015a4:	240002ec 	.word	0x240002ec

080015a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_UART_RxCpltCallback+0x88>)
 80015aa:	4298      	cmp	r0, r3
{
 80015ac:	b470      	push	{r4, r5, r6}
    if (huart == &huart5)
 80015ae:	d13d      	bne.n	800162c <HAL_UART_RxCpltCallback+0x84>
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 80015b0:	6803      	ldr	r3, [r0, #0]
 80015b2:	2208      	movs	r2, #8
 80015b4:	621a      	str	r2, [r3, #32]

        // 2) State machine
        switch (frame_state)
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_UART_RxCpltCallback+0x8c>)
 80015b8:	7813      	ldrb	r3, [r2, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d00e      	beq.n	80015dc <HAL_UART_RxCpltCallback+0x34>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d016      	beq.n	80015f0 <HAL_UART_RxCpltCallback+0x48>
 80015c2:	b92b      	cbnz	r3, 80015d0 <HAL_UART_RxCpltCallback+0x28>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <HAL_UART_RxCpltCallback+0x90>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b55      	cmp	r3, #85	@ 0x55
 80015ca:	d101      	bne.n	80015d0 <HAL_UART_RxCpltCallback+0x28>
                    frame_state = SYNC_WAIT_2;
 80015cc:	2301      	movs	r3, #1
                {
                    // got full payload: copy to floats
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
                    uart_data_ready = true;
                    // restart framing
                    frame_state = SYNC_WAIT_1;
 80015ce:	7013      	strb	r3, [r2, #0]
                }
                break;
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	4919      	ldr	r1, [pc, #100]	@ (8001638 <HAL_UART_RxCpltCallback+0x90>)
 80015d4:	4816      	ldr	r0, [pc, #88]	@ (8001630 <HAL_UART_RxCpltCallback+0x88>)
    }
}
 80015d6:	bc70      	pop	{r4, r5, r6}
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80015d8:	f007 b8d4 	b.w	8008784 <HAL_UART_Receive_IT>
                if (rx_byte == 0xAA)
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_UART_RxCpltCallback+0x90>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2baa      	cmp	r3, #170	@ 0xaa
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	d1f2      	bne.n	80015ce <HAL_UART_RxCpltCallback+0x26>
                    frame_state = SYNC_COLLECT;
 80015e8:	2102      	movs	r1, #2
 80015ea:	7011      	strb	r1, [r2, #0]
                    collect_count = 0;
 80015ec:	4a13      	ldr	r2, [pc, #76]	@ (800163c <HAL_UART_RxCpltCallback+0x94>)
 80015ee:	e7ee      	b.n	80015ce <HAL_UART_RxCpltCallback+0x26>
                collect_buf[collect_count++] = rx_byte;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_UART_RxCpltCallback+0x94>)
 80015f2:	4c11      	ldr	r4, [pc, #68]	@ (8001638 <HAL_UART_RxCpltCallback+0x90>)
 80015f4:	7818      	ldrb	r0, [r3, #0]
 80015f6:	7824      	ldrb	r4, [r4, #0]
 80015f8:	1c41      	adds	r1, r0, #1
 80015fa:	b2c9      	uxtb	r1, r1
 80015fc:	7019      	strb	r1, [r3, #0]
                if (collect_count >= sizeof(collect_buf))
 80015fe:	2913      	cmp	r1, #19
                collect_buf[collect_count++] = rx_byte;
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_UART_RxCpltCallback+0x98>)
 8001602:	541c      	strb	r4, [r3, r0]
                if (collect_count >= sizeof(collect_buf))
 8001604:	d9e4      	bls.n	80015d0 <HAL_UART_RxCpltCallback+0x28>
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8001606:	4c0f      	ldr	r4, [pc, #60]	@ (8001644 <HAL_UART_RxCpltCallback+0x9c>)
 8001608:	f103 0610 	add.w	r6, r3, #16
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	3308      	adds	r3, #8
 8001610:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8001614:	4625      	mov	r5, r4
 8001616:	42b3      	cmp	r3, r6
 8001618:	c503      	stmia	r5!, {r0, r1}
 800161a:	462c      	mov	r4, r5
 800161c:	d1f6      	bne.n	800160c <HAL_UART_RxCpltCallback+0x64>
 800161e:	6818      	ldr	r0, [r3, #0]
                    uart_data_ready = true;
 8001620:	2101      	movs	r1, #1
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_UART_RxCpltCallback+0xa0>)
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8001624:	6028      	str	r0, [r5, #0]
                    uart_data_ready = true;
 8001626:	7019      	strb	r1, [r3, #0]
                    frame_state = SYNC_WAIT_1;
 8001628:	2300      	movs	r3, #0
 800162a:	e7d0      	b.n	80015ce <HAL_UART_RxCpltCallback+0x26>
}
 800162c:	bc70      	pop	{r4, r5, r6}
 800162e:	4770      	bx	lr
 8001630:	24000ab4 	.word	0x24000ab4
 8001634:	240002e4 	.word	0x240002e4
 8001638:	240002e6 	.word	0x240002e6
 800163c:	240002e5 	.word	0x240002e5
 8001640:	240002d0 	.word	0x240002d0
 8001644:	240002ec 	.word	0x240002ec
 8001648:	24000300 	.word	0x24000300

0800164c <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 800164c:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <HAL_UART_ErrorCallback+0x18>)
 800164e:	4290      	cmp	r0, r2
 8001650:	d106      	bne.n	8001660 <HAL_UART_ErrorCallback+0x14>
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8001652:	2208      	movs	r2, #8
 8001654:	6803      	ldr	r3, [r0, #0]
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8001656:	4904      	ldr	r1, [pc, #16]	@ (8001668 <HAL_UART_ErrorCallback+0x1c>)
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8001658:	621a      	str	r2, [r3, #32]
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 800165a:	2201      	movs	r2, #1
 800165c:	f007 b892 	b.w	8008784 <HAL_UART_Receive_IT>
    }
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	24000ab4 	.word	0x24000ab4
 8001668:	240002e6 	.word	0x240002e6

0800166c <lcd_gettick>:
	return result;
}

static int32_t lcd_gettick(void)
{
	return HAL_GetTick();
 800166c:	f002 b800 	b.w	8003670 <HAL_GetTick>

08001670 <lcd_recvdata>:
		result = 0;}
	return result;
}

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001670:	b570      	push	{r4, r5, r6, lr}
	int32_t result;
	LCD_CS_RESET;
 8001672:	4e0e      	ldr	r6, [pc, #56]	@ (80016ac <lcd_recvdata+0x3c>)
{
 8001674:	4604      	mov	r4, r0
 8001676:	460d      	mov	r5, r1
	LCD_CS_RESET;
 8001678:	2200      	movs	r2, #0
 800167a:	4630      	mov	r0, r6
 800167c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001680:	f002 ff0c 	bl	800449c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8001684:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001688:	b2aa      	uxth	r2, r5
 800168a:	4621      	mov	r1, r4
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <lcd_recvdata+0x40>)
 800168e:	f005 facf 	bl	8006c30 <HAL_SPI_Receive>
 8001692:	4604      	mov	r4, r0
	LCD_CS_SET;
 8001694:	2201      	movs	r2, #1
 8001696:	4630      	mov	r0, r6
 8001698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800169c:	f002 fefe 	bl	800449c <HAL_GPIO_WritePin>
	if(result>0){
 80016a0:	1e20      	subs	r0, r4, #0
 80016a2:	bf18      	it	ne
 80016a4:	2001      	movne	r0, #1
		result = -1;}
	else{
		result = 0;}
	return result;
}
 80016a6:	4240      	negs	r0, r0
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
 80016aa:	bf00      	nop
 80016ac:	58021000 	.word	0x58021000
 80016b0:	24000990 	.word	0x24000990

080016b4 <lcd_senddata>:
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
	LCD_CS_RESET;
 80016b6:	4e0d      	ldr	r6, [pc, #52]	@ (80016ec <lcd_senddata+0x38>)
{
 80016b8:	4604      	mov	r4, r0
 80016ba:	460d      	mov	r5, r1
	LCD_CS_RESET;
 80016bc:	2200      	movs	r2, #0
 80016be:	4630      	mov	r0, r6
 80016c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016c4:	f002 feea 	bl	800449c <HAL_GPIO_WritePin>
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80016c8:	2364      	movs	r3, #100	@ 0x64
 80016ca:	b2aa      	uxth	r2, r5
 80016cc:	4621      	mov	r1, r4
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <lcd_senddata+0x3c>)
 80016d0:	f005 f994 	bl	80069fc <HAL_SPI_Transmit>
 80016d4:	4604      	mov	r4, r0
	LCD_CS_SET;
 80016d6:	2201      	movs	r2, #1
 80016d8:	4630      	mov	r0, r6
 80016da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016de:	f002 fedd 	bl	800449c <HAL_GPIO_WritePin>
	if(result>0){
 80016e2:	1e20      	subs	r0, r4, #0
 80016e4:	bf18      	it	ne
 80016e6:	2001      	movne	r0, #1
}
 80016e8:	4240      	negs	r0, r0
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	58021000 	.word	0x58021000
 80016f0:	24000990 	.word	0x24000990

080016f4 <lcd_readreg>:
{
 80016f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LCD_CS_RESET;
 80016f6:	4d19      	ldr	r5, [pc, #100]	@ (800175c <lcd_readreg+0x68>)
{
 80016f8:	460e      	mov	r6, r1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80016fa:	4f19      	ldr	r7, [pc, #100]	@ (8001760 <lcd_readreg+0x6c>)
	LCD_CS_RESET;
 80016fc:	2200      	movs	r2, #0
{
 80016fe:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 8001702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001706:	4628      	mov	r0, r5
 8001708:	f002 fec8 	bl	800449c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800170c:	4628      	mov	r0, r5
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001714:	f002 fec2 	bl	800449c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001718:	2364      	movs	r3, #100	@ 0x64
 800171a:	f10d 0107 	add.w	r1, sp, #7
 800171e:	2201      	movs	r2, #1
 8001720:	4638      	mov	r0, r7
 8001722:	f005 f96b 	bl	80069fc <HAL_SPI_Transmit>
	LCD_RS_SET;
 8001726:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001728:	4604      	mov	r4, r0
	LCD_RS_SET;
 800172a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800172e:	4628      	mov	r0, r5
 8001730:	f002 feb4 	bl	800449c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8001734:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001738:	4631      	mov	r1, r6
 800173a:	2201      	movs	r2, #1
 800173c:	4638      	mov	r0, r7
 800173e:	f005 fa77 	bl	8006c30 <HAL_SPI_Receive>
 8001742:	4404      	add	r4, r0
	LCD_CS_SET;
 8001744:	2201      	movs	r2, #1
 8001746:	4628      	mov	r0, r5
 8001748:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800174c:	f002 fea6 	bl	800449c <HAL_GPIO_WritePin>
	if(result>0){
 8001750:	1e20      	subs	r0, r4, #0
 8001752:	bf18      	it	ne
 8001754:	2001      	movne	r0, #1
}
 8001756:	4240      	negs	r0, r0
 8001758:	b003      	add	sp, #12
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175c:	58021000 	.word	0x58021000
 8001760:	24000990 	.word	0x24000990

08001764 <lcd_writereg>:
{
 8001764:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001766:	4615      	mov	r5, r2
 8001768:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 800176c:	2200      	movs	r2, #0
 800176e:	4817      	ldr	r0, [pc, #92]	@ (80017cc <lcd_writereg+0x68>)
{
 8001770:	460e      	mov	r6, r1
	LCD_CS_RESET;
 8001772:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001776:	f002 fe91 	bl	800449c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001780:	4812      	ldr	r0, [pc, #72]	@ (80017cc <lcd_writereg+0x68>)
 8001782:	f002 fe8b 	bl	800449c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001786:	2201      	movs	r2, #1
 8001788:	f10d 0107 	add.w	r1, sp, #7
 800178c:	2364      	movs	r3, #100	@ 0x64
 800178e:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <lcd_writereg+0x6c>)
 8001790:	f005 f934 	bl	80069fc <HAL_SPI_Transmit>
	LCD_RS_SET;
 8001794:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001796:	4604      	mov	r4, r0
	LCD_RS_SET;
 8001798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <lcd_writereg+0x68>)
 800179e:	f002 fe7d 	bl	800449c <HAL_GPIO_WritePin>
	if(length > 0)
 80017a2:	b13d      	cbz	r5, 80017b4 <lcd_writereg+0x50>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 80017a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80017a8:	b2aa      	uxth	r2, r5
 80017aa:	4631      	mov	r1, r6
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <lcd_writereg+0x6c>)
 80017ae:	f005 f925 	bl	80069fc <HAL_SPI_Transmit>
 80017b2:	4404      	add	r4, r0
	LCD_CS_SET;
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ba:	4804      	ldr	r0, [pc, #16]	@ (80017cc <lcd_writereg+0x68>)
 80017bc:	f002 fe6e 	bl	800449c <HAL_GPIO_WritePin>
	if(result>0){
 80017c0:	1e20      	subs	r0, r4, #0
 80017c2:	bf18      	it	ne
 80017c4:	2001      	movne	r0, #1
}
 80017c6:	4240      	negs	r0, r0
 80017c8:	b002      	add	sp, #8
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	58021000 	.word	0x58021000
 80017d0:	24000990 	.word	0x24000990

080017d4 <lcd_init>:
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80017d4:	2104      	movs	r1, #4
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <lcd_init+0x10>)
{
 80017d8:	b508      	push	{r3, lr}
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80017da:	f005 ffcd 	bl	8007778 <HAL_TIMEx_PWMN_Start>
}
 80017de:	2000      	movs	r0, #0
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	24000a68 	.word	0x24000a68

080017e8 <LCD_Light>:
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80017ea:	4e1c      	ldr	r6, [pc, #112]	@ (800185c <LCD_Light+0x74>)
{
 80017ec:	460c      	mov	r4, r1
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80017ee:	6833      	ldr	r3, [r6, #0]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
	if(Brightness_Now == Brightness_Dis)
 80017f2:	4298      	cmp	r0, r3
{
 80017f4:	ed2d 8b02 	vpush	{d8}
	if(Brightness_Now == Brightness_Dis)
 80017f8:	d02c      	beq.n	8001854 <LCD_Light+0x6c>
	if(time == time_now)
 80017fa:	b359      	cbz	r1, 8001854 <LCD_Light+0x6c>
	temp1 = Brightness_Now;
 80017fc:	ee07 3a90 	vmov	s15, r3
	temp2 = temp2 - time;
 8001800:	ee07 1a10 	vmov	s14, r1
	temp1 = Brightness_Now;
 8001804:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	temp1 = temp1 - Brightness_Dis;
 8001808:	ee07 0a90 	vmov	s15, r0
	temp2 = temp2 - time;
 800180c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001810:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001860 <LCD_Light+0x78>
	temp1 = temp1 - Brightness_Dis;
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
	temp2 = temp2 - time;
 8001818:	ee37 7a66 	vsub.f32	s14, s14, s13
	temp1 = temp1 - Brightness_Dis;
 800181c:	ee78 7a67 	vsub.f32	s15, s16, s15
	k = temp1 / temp2;
 8001820:	eec7 8a87 	vdiv.f32	s17, s15, s14
	uint32_t tick=get_tick();
 8001824:	f001 ff24 	bl	8003670 <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
		delay_ms(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f001 ff26 	bl	800367c <HAL_Delay>
		time_now = get_tick()-tick;
 8001830:	f001 ff1e 	bl	8003670 <HAL_GetTick>
 8001834:	1b40      	subs	r0, r0, r5
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001836:	6833      	ldr	r3, [r6, #0]
		temp2 = time_now - 0;
 8001838:	ee07 0a90 	vmov	s15, r0
		if(time_now >= time) break;
 800183c:	4284      	cmp	r4, r0
		temp2 = time_now - 0;
 800183e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		set = temp2*k + Brightness_Now;
 8001842:	eef0 7a48 	vmov.f32	s15, s16
 8001846:	eee8 7a87 	vfma.f32	s15, s17, s14
		LCD_SetBrightness((uint32_t)set);
 800184a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 800184e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		if(time_now >= time) break;
 8001852:	d8ea      	bhi.n	800182a <LCD_Light+0x42>
}
 8001854:	ecbd 8b02 	vpop	{d8}
 8001858:	bd70      	pop	{r4, r5, r6, pc}
 800185a:	bf00      	nop
 800185c:	24000a68 	.word	0x24000a68
 8001860:	00000000 	.word	0x00000000

08001864 <LCD_ShowChar>:
{  							  
 8001864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001868:	461c      	mov	r4, r3
 800186a:	b08f      	sub	sp, #60	@ 0x3c
	uint16_t colortemp=POINT_COLOR; 
 800186c:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 8001a64 <LCD_ShowChar+0x200>
{  							  
 8001870:	4616      	mov	r6, r2
	uint16_t write[size][size==12?6:8];
 8001872:	2c0c      	cmp	r4, #12
{  							  
 8001874:	af02      	add	r7, sp, #8
	uint16_t colortemp=POINT_COLOR; 
 8001876:	f8b9 3000 	ldrh.w	r3, [r9]
	uint16_t write[size][size==12?6:8];
 800187a:	466a      	mov	r2, sp
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800187c:	f1a6 0620 	sub.w	r6, r6, #32
	uint16_t colortemp=POINT_COLOR; 
 8001880:	61bb      	str	r3, [r7, #24]
	uint16_t write[size][size==12?6:8];
 8001882:	bf14      	ite	ne
 8001884:	2308      	movne	r3, #8
 8001886:	2306      	moveq	r3, #6
{  							  
 8001888:	f8c7 d00c 	str.w	sp, [r7, #12]
 800188c:	6138      	str	r0, [r7, #16]
 800188e:	f04f 0800 	mov.w	r8, #0
	uint16_t write[size][size==12?6:8];
 8001892:	61fb      	str	r3, [r7, #28]
 8001894:	4363      	muls	r3, r4
{  							  
 8001896:	f897 a058 	ldrb.w	sl, [r7, #88]	@ 0x58
 800189a:	6279      	str	r1, [r7, #36]	@ 0x24
  ST7735_GetXSize(&st7735_pObj,&w);
 800189c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
	uint16_t write[size][size==12?6:8];
 80018a0:	005b      	lsls	r3, r3, #1
  ST7735_GetXSize(&st7735_pObj,&w);
 80018a2:	486c      	ldr	r0, [pc, #432]	@ (8001a54 <LCD_ShowChar+0x1f0>)
	uint16_t write[size][size==12?6:8];
 80018a4:	3307      	adds	r3, #7
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80018ac:	469d      	mov	sp, r3
 80018ae:	ab02      	add	r3, sp, #8
 80018b0:	617b      	str	r3, [r7, #20]
  ST7735_GetXSize(&st7735_pObj,&w);
 80018b2:	f000 f9cf 	bl	8001c54 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 80018b6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80018ba:	4866      	ldr	r0, [pc, #408]	@ (8001a54 <LCD_ShowChar+0x1f0>)
 80018bc:	f000 f9d2 	bl	8001c64 <ST7735_GetYSize>
	if(!mode) //�ǵ��ӷ�ʽ
 80018c0:	b2f3      	uxtb	r3, r6
 80018c2:	f1ba 0f00 	cmp.w	sl, #0
 80018c6:	d04c      	beq.n	8001962 <LCD_ShowChar+0xfe>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80018c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
	count = 0;
 80018ca:	4641      	mov	r1, r8
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80018cc:	f8b9 6000 	ldrh.w	r6, [r9]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80018d0:	623a      	str	r2, [r7, #32]
 80018d2:	4a61      	ldr	r2, [pc, #388]	@ (8001a58 <LCD_ShowChar+0x1f4>)
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80018d4:	ba76      	rev16	r6, r6
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80018d6:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80018da:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 80018de:	4a5f      	ldr	r2, [pc, #380]	@ (8001a5c <LCD_ShowChar+0x1f8>)
 80018e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80018e4:	b2b6      	uxth	r6, r6
 80018e6:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80018ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ec:	4643      	mov	r3, r8
 80018ee:	fa5f f883 	uxtb.w	r8, r3
		for(t=0;t<size;t++)
 80018f2:	4544      	cmp	r4, r8
 80018f4:	d956      	bls.n	80019a4 <LCD_ShowChar+0x140>
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80018f6:	2c0c      	cmp	r4, #12
 80018f8:	f102 0e08 	add.w	lr, r2, #8
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 80018fc:	ea4f 0858 	mov.w	r8, r8, lsr #1
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001900:	bf08      	it	eq
 8001902:	f81a 0003 	ldrbeq.w	r0, [sl, r3]
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8001906:	fa1f fe8e 	uxth.w	lr, lr
 800190a:	bf18      	it	ne
 800190c:	f819 0003 	ldrbne.w	r0, [r9, r3]
				if(temp&0x80)
 8001910:	0605      	lsls	r5, r0, #24
				y++;
 8001912:	f102 0201 	add.w	r2, r2, #1
				temp<<=1;
 8001916:	ea4f 0040 	mov.w	r0, r0, lsl #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 800191a:	bf48      	it	mi
 800191c:	69fd      	ldrmi	r5, [r7, #28]
				y++;
 800191e:	b292      	uxth	r2, r2
				temp<<=1;
 8001920:	b2c0      	uxtb	r0, r0
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001922:	bf44      	itt	mi
 8001924:	fb01 8b05 	mlami	fp, r1, r5, r8
 8001928:	697d      	ldrmi	r5, [r7, #20]
				count ++;
 800192a:	f101 0101 	add.w	r1, r1, #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 800192e:	bf48      	it	mi
 8001930:	f825 601b 	strhmi.w	r6, [r5, fp, lsl #1]
				count ++;
 8001934:	b289      	uxth	r1, r1
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001936:	6a3d      	ldr	r5, [r7, #32]
				if(count >= size) count =0;
 8001938:	428c      	cmp	r4, r1
 800193a:	bf98      	it	ls
 800193c:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800193e:	42aa      	cmp	r2, r5
 8001940:	d23c      	bcs.n	80019bc <LCD_ShowChar+0x158>
				if((y-y0)==size)
 8001942:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8001944:	eba2 0b05 	sub.w	fp, r2, r5
 8001948:	455c      	cmp	r4, fp
 800194a:	d17e      	bne.n	8001a4a <LCD_ShowChar+0x1e6>
					x++;
 800194c:	f10c 0c01 	add.w	ip, ip, #1
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
					x++;
 8001952:	fa1f fc8c 	uxth.w	ip, ip
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001956:	4594      	cmp	ip, r2
 8001958:	d230      	bcs.n	80019bc <LCD_ShowChar+0x158>
					y=y0;
 800195a:	46ae      	mov	lr, r5
		for(t=0;t<size;t++)
 800195c:	3301      	adds	r3, #1
	count = 0;
 800195e:	4672      	mov	r2, lr
 8001960:	e7c5      	b.n	80018ee <LCD_ShowChar+0x8a>
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001962:	4a3f      	ldr	r2, [pc, #252]	@ (8001a60 <LCD_ShowChar+0x1fc>)
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001964:	4640      	mov	r0, r8
 8001966:	4641      	mov	r1, r8
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	ba52      	rev16	r2, r2
 800196c:	b292      	uxth	r2, r2
 800196e:	607a      	str	r2, [r7, #4]
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	ba52      	rev16	r2, r2
 8001974:	b292      	uxth	r2, r2
 8001976:	60ba      	str	r2, [r7, #8]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800197a:	603a      	str	r2, [r7, #0]
 800197c:	4a36      	ldr	r2, [pc, #216]	@ (8001a58 <LCD_ShowChar+0x1f4>)
 800197e:	eb02 1a03 	add.w	sl, r2, r3, lsl #4
 8001982:	4a36      	ldr	r2, [pc, #216]	@ (8001a5c <LCD_ShowChar+0x1f8>)
 8001984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001988:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	623a      	str	r2, [r7, #32]
	count = 0;
 8001992:	4642      	mov	r2, r8
 8001994:	fa5f fe80 	uxtb.w	lr, r0
		for(t=0;t<size;t++)
 8001998:	45a6      	cmp	lr, r4
 800199a:	d318      	bcc.n	80019ce <LCD_ShowChar+0x16a>
 800199c:	b111      	cbz	r1, 80019a4 <LCD_ShowChar+0x140>
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <LCD_ShowChar+0x200>)
 80019a0:	f8a3 8000 	strh.w	r8, [r3]
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80019a4:	2c0c      	cmp	r4, #12
 80019a6:	482b      	ldr	r0, [pc, #172]	@ (8001a54 <LCD_ShowChar+0x1f0>)
 80019a8:	bf14      	ite	ne
 80019aa:	2308      	movne	r3, #8
 80019ac:	2306      	moveq	r3, #6
 80019ae:	e9cd 3400 	strd	r3, r4, [sp]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	f000 fc3e 	bl	8002238 <ST7735_FillRGBRect>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <LCD_ShowChar+0x200>)
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}   
 80019c6:	3734      	adds	r7, #52	@ 0x34
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80019ce:	2c0c      	cmp	r4, #12
 80019d0:	f103 0c08 	add.w	ip, r3, #8
				write[count][t/2]=POINT_COLOR;
 80019d4:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80019d8:	bf08      	it	eq
 80019da:	f81b 1000 	ldrbeq.w	r1, [fp, r0]
			else temp=asc2_1608[num][t];		 //����1608����
 80019de:	fa1f fc8c 	uxth.w	ip, ip
 80019e2:	bf18      	it	ne
 80019e4:	f81a 1000 	ldrbne.w	r1, [sl, r0]
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80019e8:	f011 0f80 	tst.w	r1, #128	@ 0x80
				y++;
 80019ec:	f103 0301 	add.w	r3, r3, #1
				temp<<=1;
 80019f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
				y++;
 80019f4:	b29b      	uxth	r3, r3
				temp<<=1;
 80019f6:	b2c9      	uxtb	r1, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80019f8:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 80019fc:	bf18      	it	ne
 80019fe:	46a8      	movne	r8, r5
				write[count][t/2]=POINT_COLOR;
 8001a00:	69fd      	ldr	r5, [r7, #28]
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001a02:	bf08      	it	eq
 8001a04:	46b0      	moveq	r8, r6
				write[count][t/2]=POINT_COLOR;
 8001a06:	fb02 e905 	mla	r9, r2, r5, lr
 8001a0a:	697d      	ldr	r5, [r7, #20]
				count ++;
 8001a0c:	3201      	adds	r2, #1
				write[count][t/2]=POINT_COLOR;
 8001a0e:	f825 8019 	strh.w	r8, [r5, r9, lsl #1]
				count ++;
 8001a12:	b292      	uxth	r2, r2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001a14:	683d      	ldr	r5, [r7, #0]
				if(count >= size) count =0;
 8001a16:	4294      	cmp	r4, r2
 8001a18:	bf98      	it	ls
 8001a1a:	2200      	movls	r2, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001a1c:	42ab      	cmp	r3, r5
 8001a1e:	d2cd      	bcs.n	80019bc <LCD_ShowChar+0x158>
				if((y-y0)==size)
 8001a20:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8001a22:	eba3 0905 	sub.w	r9, r3, r5
 8001a26:	454c      	cmp	r4, r9
 8001a28:	d10c      	bne.n	8001a44 <LCD_ShowChar+0x1e0>
					x++;
 8001a2a:	6a3e      	ldr	r6, [r7, #32]
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	b2b3      	uxth	r3, r6
 8001a30:	623b      	str	r3, [r7, #32]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001a32:	6a39      	ldr	r1, [r7, #32]
 8001a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a36:	4299      	cmp	r1, r3
 8001a38:	d2c0      	bcs.n	80019bc <LCD_ShowChar+0x158>
					y=y0;
 8001a3a:	46ac      	mov	ip, r5
		for(t=0;t<size;t++)
 8001a3c:	3001      	adds	r0, #1
	count = 0;
 8001a3e:	4663      	mov	r3, ip
 8001a40:	2101      	movs	r1, #1
 8001a42:	e7a7      	b.n	8001994 <LCD_ShowChar+0x130>
			for(t1=0;t1<8;t1++)
 8001a44:	4563      	cmp	r3, ip
 8001a46:	d1cf      	bne.n	80019e8 <LCD_ShowChar+0x184>
 8001a48:	e7f8      	b.n	8001a3c <LCD_ShowChar+0x1d8>
			for(t1=0;t1<8;t1++)
 8001a4a:	4596      	cmp	lr, r2
 8001a4c:	f47f af60 	bne.w	8001910 <LCD_ShowChar+0xac>
 8001a50:	e784      	b.n	800195c <LCD_ShowChar+0xf8>
 8001a52:	bf00      	nop
 8001a54:	24000308 	.word	0x24000308
 8001a58:	0800bb5a 	.word	0x0800bb5a
 8001a5c:	0800c14a 	.word	0x0800c14a
 8001a60:	24000302 	.word	0x24000302
 8001a64:	24000000 	.word	0x24000000

08001a68 <LCD_ShowString>:
{         
 8001a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	width+=x;
 8001a6c:	4402      	add	r2, r0
{         
 8001a6e:	b085      	sub	sp, #20
 8001a70:	461f      	mov	r7, r3
 8001a72:	4604      	mov	r4, r0
 8001a74:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	width+=x;
 8001a78:	b296      	uxth	r6, r2
	height+=y;
 8001a7a:	440f      	add	r7, r1
 8001a7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
{         
 8001a7e:	460d      	mov	r5, r1
        x+=size/2;
 8001a80:	ea4f 0953 	mov.w	r9, r3, lsr #1
	height+=y;
 8001a84:	b2bf      	uxth	r7, r7
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001a86:	f102 38ff 	add.w	r8, r2, #4294967295
 8001a8a:	fa5f fa80 	uxtb.w	sl, r0
        LCD_ShowChar(x,y,*p,size,0);
 8001a8e:	f04f 0b00 	mov.w	fp, #0
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001a92:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8001a96:	f1a2 0120 	sub.w	r1, r2, #32
 8001a9a:	295e      	cmp	r1, #94	@ 0x5e
 8001a9c:	d902      	bls.n	8001aa4 <LCD_ShowString+0x3c>
}
 8001a9e:	b005      	add	sp, #20
 8001aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(x>=width){x=x0;y+=size;}
 8001aa4:	42b4      	cmp	r4, r6
 8001aa6:	bf22      	ittt	cs
 8001aa8:	18ed      	addcs	r5, r5, r3
 8001aaa:	4654      	movcs	r4, sl
 8001aac:	b2ad      	uxthcs	r5, r5
        if(y>=height)break;//�˳�
 8001aae:	42bd      	cmp	r5, r7
 8001ab0:	d2f5      	bcs.n	8001a9e <LCD_ShowString+0x36>
        LCD_ShowChar(x,y,*p,size,0);
 8001ab2:	4620      	mov	r0, r4
        x+=size/2;
 8001ab4:	444c      	add	r4, r9
        LCD_ShowChar(x,y,*p,size,0);
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f8cd b000 	str.w	fp, [sp]
 8001abc:	9303      	str	r3, [sp, #12]
        x+=size/2;
 8001abe:	b2a4      	uxth	r4, r4
        LCD_ShowChar(x,y,*p,size,0);
 8001ac0:	f7ff fed0 	bl	8001864 <LCD_ShowChar>
        x+=size/2;
 8001ac4:	9b03      	ldr	r3, [sp, #12]
        p++;
 8001ac6:	e7e4      	b.n	8001a92 <LCD_ShowString+0x2a>

08001ac8 <LCD_LoadScreen>:
{
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE;
 8001acc:	2302      	movs	r3, #2
 8001ace:	4c4f      	ldr	r4, [pc, #316]	@ (8001c0c <LCD_LoadScreen+0x144>)
{
 8001ad0:	b089      	sub	sp, #36	@ 0x24
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001ad2:	4e4f      	ldr	r6, [pc, #316]	@ (8001c10 <LCD_LoadScreen+0x148>)
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE;
 8001ad4:	60a3      	str	r3, [r4, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001ada:	494e      	ldr	r1, [pc, #312]	@ (8001c14 <LCD_LoadScreen+0x14c>)
 8001adc:	484e      	ldr	r0, [pc, #312]	@ (8001c18 <LCD_LoadScreen+0x150>)
	ST7735Ctx.Panel = HannStar_Panel;
 8001ade:	81a3      	strh	r3, [r4, #12]
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001ae0:	f000 ff42 	bl	8002968 <ST7735_RegisterBusIO>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001ae4:	4f4d      	ldr	r7, [pc, #308]	@ (8001c1c <LCD_LoadScreen+0x154>)
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	6833      	ldr	r3, [r6, #0]
 8001aea:	2105      	movs	r1, #5
 8001aec:	484a      	ldr	r0, [pc, #296]	@ (8001c18 <LCD_LoadScreen+0x150>)
 8001aee:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001af0:	68b3      	ldr	r3, [r6, #8]
 8001af2:	494b      	ldr	r1, [pc, #300]	@ (8001c20 <LCD_LoadScreen+0x158>)
 8001af4:	4848      	ldr	r0, [pc, #288]	@ (8001c18 <LCD_LoadScreen+0x150>)
 8001af6:	4798      	blx	r3
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001af8:	2200      	movs	r2, #0
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001c30 <LCD_LoadScreen+0x168>
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001b00:	4611      	mov	r1, r2
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001b04:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <LCD_LoadScreen+0x15c>)
 8001b08:	4843      	ldr	r0, [pc, #268]	@ (8001c18 <LCD_LoadScreen+0x150>)
 8001b0a:	47a8      	blx	r5
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001b0c:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8001c2c <LCD_LoadScreen+0x164>
  uint32_t tick = get_tick();
 8001b10:	f001 fdae 	bl	8003670 <HAL_GetTick>
 8001b14:	4605      	mov	r5, r0
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001b16:	eba8 0800 	sub.w	r8, r8, r0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1e:	4648      	mov	r0, r9
 8001b20:	f002 fcb6 	bl	8004490 <HAL_GPIO_ReadPin>
 8001b24:	2801      	cmp	r0, #1
 8001b26:	d04f      	beq.n	8001bc8 <LCD_LoadScreen+0x100>
		delay_ms(10);
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f001 fda7 	bl	800367c <HAL_Delay>
		if (get_tick() - tick <= 1000)
 8001b2e:	f001 fd9f 	bl	8003670 <HAL_GetTick>
 8001b32:	1b40      	subs	r0, r0, r5
 8001b34:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001b38:	d80b      	bhi.n	8001b52 <LCD_LoadScreen+0x8a>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8001b3a:	f001 fd99 	bl	8003670 <HAL_GetTick>
 8001b3e:	2364      	movs	r3, #100	@ 0x64
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	4358      	muls	r0, r3
 8001b44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b48:	fbb0 f0f3 	udiv	r0, r0, r3
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8001b50:	e7e3      	b.n	8001b1a <LCD_LoadScreen+0x52>
		else if (get_tick() - tick <= 3000)
 8001b52:	f001 fd8d 	bl	8003670 <HAL_GetTick>
 8001b56:	f640 3ab8 	movw	sl, #3000	@ 0xbb8
 8001b5a:	1b40      	subs	r0, r0, r5
 8001b5c:	4550      	cmp	r0, sl
 8001b5e:	d82e      	bhi.n	8001bbe <LCD_LoadScreen+0xf6>
			sprintf((char *)&text, "%lu", (get_tick() - tick - 1000) / 10);
 8001b60:	f001 fd86 	bl	8003670 <HAL_GetTick>
 8001b64:	f10d 0a0c 	add.w	sl, sp, #12
 8001b68:	4440      	add	r0, r8
 8001b6a:	220a      	movs	r2, #10
 8001b6c:	492e      	ldr	r1, [pc, #184]	@ (8001c28 <LCD_LoadScreen+0x160>)
 8001b6e:	fbb0 f2f2 	udiv	r2, r0, r2
 8001b72:	4650      	mov	r0, sl
 8001b74:	f007 fbfe 	bl	8009374 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8001b78:	8822      	ldrh	r2, [r4, #0]
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	f1a2 001e 	sub.w	r0, r2, #30
 8001b82:	f8cd a004 	str.w	sl, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	f7ff ff6d 	bl	8001a68 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8001b8e:	6863      	ldr	r3, [r4, #4]
 8001b90:	f8d6 a038 	ldr.w	sl, [r6, #56]	@ 0x38
 8001b94:	f1a3 0b03 	sub.w	fp, r3, #3
 8001b98:	f001 fd6a 	bl	8003670 <HAL_GetTick>
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	4440      	add	r0, r8
 8001ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4358      	muls	r0, r3
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e9cd 3200 	strd	r3, r2, [sp]
 8001bae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bb2:	465a      	mov	r2, fp
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	4817      	ldr	r0, [pc, #92]	@ (8001c18 <LCD_LoadScreen+0x150>)
 8001bba:	47d0      	blx	sl
 8001bbc:	e7ad      	b.n	8001b1a <LCD_LoadScreen+0x52>
		else if (get_tick() - tick > 3000)
 8001bbe:	f001 fd57 	bl	8003670 <HAL_GetTick>
 8001bc2:	1b40      	subs	r0, r0, r5
 8001bc4:	4550      	cmp	r0, sl
 8001bc6:	d9a8      	bls.n	8001b1a <LCD_LoadScreen+0x52>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001bc8:	4d18      	ldr	r5, [pc, #96]	@ (8001c2c <LCD_LoadScreen+0x164>)
 8001bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f002 fc5e 	bl	8004490 <HAL_GPIO_ReadPin>
 8001bd4:	2801      	cmp	r0, #1
 8001bd6:	d014      	beq.n	8001c02 <LCD_LoadScreen+0x13a>
	LCD_Light(0, 300);
 8001bd8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fe03 	bl	80017e8 <LCD_Light>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001be2:	2200      	movs	r2, #0
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LCD_LoadScreen+0x150>)
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	4611      	mov	r1, r2
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	6bb5      	ldr	r5, [r6, #56]	@ 0x38
 8001bf2:	47a8      	blx	r5
	LCD_Light(100, 200);
 8001bf4:	21c8      	movs	r1, #200	@ 0xc8
 8001bf6:	2064      	movs	r0, #100	@ 0x64
 8001bf8:	f7ff fdf6 	bl	80017e8 <LCD_Light>
}
 8001bfc:	b009      	add	sp, #36	@ 0x24
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delay_ms(10);
 8001c02:	200a      	movs	r0, #10
 8001c04:	f001 fd3a 	bl	800367c <HAL_Delay>
 8001c08:	e7df      	b.n	8001bca <LCD_LoadScreen+0x102>
 8001c0a:	bf00      	nop
 8001c0c:	24000840 	.word	0x24000840
 8001c10:	24000024 	.word	0x24000024
 8001c14:	24000004 	.word	0x24000004
 8001c18:	24000308 	.word	0x24000308
 8001c1c:	24000a68 	.word	0x24000a68
 8001c20:	24000304 	.word	0x24000304
 8001c24:	0800c5be 	.word	0x0800c5be
 8001c28:	0800b9a3 	.word	0x0800b9a3
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	fffffc18 	.word	0xfffffc18

08001c34 <ST7735_DeInit>:
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
  (void)(pObj);

  return ST7735_OK;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <ST7735_SetBrightness>:
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
}
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	4770      	bx	lr

08001c3e <ST7735_GetBrightness>:
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
}
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	4770      	bx	lr

08001c44 <ST7735_GetOrientation>:
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{

  *Orientation = ST7735Ctx.Orientation;
 8001c44:	4b02      	ldr	r3, [pc, #8]	@ (8001c50 <ST7735_GetOrientation+0xc>)

  return ST7735_OK;
}
 8001c46:	2000      	movs	r0, #0
  *Orientation = ST7735Ctx.Orientation;
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	600b      	str	r3, [r1, #0]
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	24000840 	.word	0x24000840

08001c54 <ST7735_GetXSize>:
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8001c54:	4b02      	ldr	r3, [pc, #8]	@ (8001c60 <ST7735_GetXSize+0xc>)

  return ST7735_OK;
}
 8001c56:	2000      	movs	r0, #0
  *XSize = ST7735Ctx.Width;
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	600b      	str	r3, [r1, #0]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	24000840 	.word	0x24000840

08001c64 <ST7735_GetYSize>:
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <ST7735_GetYSize+0xc>)

  return ST7735_OK;
}
 8001c66:	2000      	movs	r0, #0
  *YSize = ST7735Ctx.Height;
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	600b      	str	r3, [r1, #0]
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	24000840 	.word	0x24000840

08001c74 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8001c74:	4603      	mov	r3, r0
 8001c76:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.ReadReg(Reg, pData);
 8001c78:	4611      	mov	r1, r2
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4718      	bx	r3

08001c7e <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8001c7e:	b410      	push	{r4}
 8001c80:	4604      	mov	r4, r0
 8001c82:	4608      	mov	r0, r1
 8001c84:	4611      	mov	r1, r2
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.WriteReg(Reg, pData, Length);
 8001c86:	461a      	mov	r2, r3
 8001c88:	68e4      	ldr	r4, [r4, #12]
 8001c8a:	4623      	mov	r3, r4
}
 8001c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(Reg, pData, Length);
 8001c90:	4718      	bx	r3

08001c92 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001c92:	4603      	mov	r3, r0
 8001c94:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.SendData(pData, Length);
 8001c96:	4611      	mov	r1, r2
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4718      	bx	r3

08001c9c <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.RecvData(pData, Length);
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4718      	bx	r3
	...

08001ca8 <ST7735_SetDisplayWindow>:
{
 8001ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cac:	4616      	mov	r6, r2
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001cae:	4a4e      	ldr	r2, [pc, #312]	@ (8001de8 <ST7735_SetDisplayWindow+0x140>)
{
 8001cb0:	460f      	mov	r7, r1
 8001cb2:	4699      	mov	r9, r3
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001cb4:	6891      	ldr	r1, [r2, #8]
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001cb6:	7b53      	ldrb	r3, [r2, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001cb8:	2901      	cmp	r1, #1
 8001cba:	f200 8082 	bhi.w	8001dc2 <ST7735_SetDisplayWindow+0x11a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d178      	bne.n	8001db4 <ST7735_SetDisplayWindow+0x10c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001cc2:	7b13      	ldrb	r3, [r2, #12]
 8001cc4:	b913      	cbnz	r3, 8001ccc <ST7735_SetDisplayWindow+0x24>
				Xpos += 26;
 8001cc6:	371a      	adds	r7, #26
				Ypos += 1;
 8001cc8:	3601      	adds	r6, #1
 8001cca:	e000      	b.n	8001cce <ST7735_SetDisplayWindow+0x26>
				Xpos += 24;
 8001ccc:	3718      	adds	r7, #24
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001cce:	f100 0520 	add.w	r5, r0, #32
 8001cd2:	f10d 0207 	add.w	r2, sp, #7
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	212a      	movs	r1, #42	@ 0x2a
 8001cda:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 8001cdc:	fa5f f887 	uxtb.w	r8, r7
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001ce0:	f000 fe6d 	bl	80029be <st7735_write_reg>
 8001ce4:	4604      	mov	r4, r0
  tmp = (uint8_t)(Xpos >> 8U);
 8001ce6:	0a3b      	lsrs	r3, r7, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ce8:	f10d 0107 	add.w	r1, sp, #7
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001cec:	f109 39ff 	add.w	r9, r9, #4294967295
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos >> 8U);
 8001cf4:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cf8:	f000 fe68 	bl	80029cc <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cfc:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d00:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 8001d06:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d0a:	f000 fe5f 	bl	80029cc <st7735_send_data>
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001d0e:	eb09 0107 	add.w	r1, r9, r7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d12:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d14:	2201      	movs	r2, #1
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001d16:	0a09      	lsrs	r1, r1, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d18:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001d1a:	44c8      	add	r8, r9
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001d1c:	b2f7      	uxtb	r7, r6
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001d1e:	f88d 1007 	strb.w	r1, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d22:	f10d 0107 	add.w	r1, sp, #7
 8001d26:	f000 fe51 	bl	80029cc <st7735_send_data>
 8001d2a:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d2c:	f10d 0107 	add.w	r1, sp, #7
 8001d30:	2201      	movs	r2, #1
 8001d32:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001d34:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d38:	f000 fe48 	bl	80029cc <st7735_send_data>
 8001d3c:	4404      	add	r4, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001d3e:	f10d 0207 	add.w	r2, sp, #7
 8001d42:	2300      	movs	r3, #0
 8001d44:	212b      	movs	r1, #43	@ 0x2b
 8001d46:	4628      	mov	r0, r5
 8001d48:	f000 fe39 	bl	80029be <st7735_write_reg>
 8001d4c:	4404      	add	r4, r0
  tmp = (uint8_t)(Ypos >> 8U);
 8001d4e:	0a33      	lsrs	r3, r6, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d50:	f10d 0107 	add.w	r1, sp, #7
 8001d54:	2201      	movs	r2, #1
 8001d56:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos >> 8U);
 8001d58:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d5c:	f000 fe36 	bl	80029cc <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d60:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d64:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d66:	2201      	movs	r2, #1
 8001d68:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001d6a:	f88d 7007 	strb.w	r7, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d6e:	f000 fe2d 	bl	80029cc <st7735_send_data>
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001d72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d74:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d76:	f10d 0107 	add.w	r1, sp, #7
 8001d7a:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001d7c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001d80:	eb08 0206 	add.w	r2, r8, r6
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001d84:	4447      	add	r7, r8
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001d86:	0a12      	lsrs	r2, r2, #8
 8001d88:	f88d 2007 	strb.w	r2, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f000 fe1d 	bl	80029cc <st7735_send_data>
 8001d92:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f10d 0107 	add.w	r1, sp, #7
 8001d9a:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001d9c:	f88d 7007 	strb.w	r7, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001da0:	f000 fe14 	bl	80029cc <st7735_send_data>
  if(ret != ST7735_OK)
 8001da4:	42c4      	cmn	r4, r0
}
 8001da6:	bf14      	ite	ne
 8001da8:	f04f 30ff 	movne.w	r0, #4294967295
 8001dac:	2000      	moveq	r0, #0
 8001dae:	b003      	add	sp, #12
 8001db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d18a      	bne.n	8001cce <ST7735_SetDisplayWindow+0x26>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001db8:	7b13      	ldrb	r3, [r2, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d187      	bne.n	8001cce <ST7735_SetDisplayWindow+0x26>
				Xpos += 2;
 8001dbe:	3702      	adds	r7, #2
 8001dc0:	e782      	b.n	8001cc8 <ST7735_SetDisplayWindow+0x20>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <ST7735_SetDisplayWindow+0x12c>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001dc6:	7b13      	ldrb	r3, [r2, #12]
				Xpos += 1;
 8001dc8:	3701      	adds	r7, #1
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001dca:	b90b      	cbnz	r3, 8001dd0 <ST7735_SetDisplayWindow+0x128>
				Ypos += 26;
 8001dcc:	361a      	adds	r6, #26
 8001dce:	e77e      	b.n	8001cce <ST7735_SetDisplayWindow+0x26>
				Ypos += 24;
 8001dd0:	3618      	adds	r6, #24
 8001dd2:	e77c      	b.n	8001cce <ST7735_SetDisplayWindow+0x26>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	f47f af7a 	bne.w	8001cce <ST7735_SetDisplayWindow+0x26>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001dda:	7b13      	ldrb	r3, [r2, #12]
 8001ddc:	2b01      	cmp	r3, #1
				Xpos += 1;
 8001dde:	bf04      	itt	eq
 8001de0:	3701      	addeq	r7, #1
				Ypos += 2;
 8001de2:	3602      	addeq	r6, #2
 8001de4:	e773      	b.n	8001cce <ST7735_SetDisplayWindow+0x26>
 8001de6:	bf00      	nop
 8001de8:	24000840 	.word	0x24000840

08001dec <ST7735_SetOrientation>:
{
 8001dec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8001dee:	688a      	ldr	r2, [r1, #8]
{
 8001df0:	4605      	mov	r5, r0
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001df2:	7b4b      	ldrb	r3, [r1, #13]
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8001df4:	2a01      	cmp	r2, #1
 8001df6:	4c23      	ldr	r4, [pc, #140]	@ (8001e84 <ST7735_SetOrientation+0x98>)
 8001df8:	d831      	bhi.n	8001e5e <ST7735_SetOrientation+0x72>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d12a      	bne.n	8001e54 <ST7735_SetOrientation+0x68>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8001dfe:	2050      	movs	r0, #80	@ 0x50
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8001e00:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8001e02:	20a0      	movs	r0, #160	@ 0xa0
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8001e04:	6060      	str	r0, [r4, #4]
	ST7735Ctx.Orientation = pDriver->Orientation;
 8001e06:	60a2      	str	r2, [r4, #8]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8001e08:	4628      	mov	r0, r5
	ST7735Ctx.Panel = pDriver->Panel;
 8001e0a:	7b0a      	ldrb	r2, [r1, #12]
	ST7735Ctx.Type = pDriver->Type;
 8001e0c:	7363      	strb	r3, [r4, #13]
	ST7735Ctx.Panel = pDriver->Panel;
 8001e0e:	7322      	strb	r2, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	4611      	mov	r1, r2
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	f7ff ff45 	bl	8001ca8 <ST7735_SetDisplayWindow>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e1e:	7b22      	ldrb	r2, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8001e20:	4606      	mov	r6, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <ST7735_SetOrientation+0x9c>)
 8001e24:	bb42      	cbnz	r2, 8001e78 <ST7735_SetOrientation+0x8c>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001e26:	68a2      	ldr	r2, [r4, #8]
 8001e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e2c:	791b      	ldrb	r3, [r3, #4]
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	f88d 300f 	strb.w	r3, [sp, #15]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8001e36:	f10d 020f 	add.w	r2, sp, #15
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	2136      	movs	r1, #54	@ 0x36
 8001e3e:	f105 0020 	add.w	r0, r5, #32
 8001e42:	f000 fdbc 	bl	80029be <st7735_write_reg>
  if(ret != ST7735_OK)
 8001e46:	42c6      	cmn	r6, r0
}
 8001e48:	bf14      	ite	ne
 8001e4a:	f04f 30ff 	movne.w	r0, #4294967295
 8001e4e:	2000      	moveq	r0, #0
 8001e50:	b004      	add	sp, #16
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8001e54:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8001e58:	d1d5      	bne.n	8001e06 <ST7735_SetOrientation+0x1a>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8001e5a:	2080      	movs	r0, #128	@ 0x80
 8001e5c:	e7d0      	b.n	8001e00 <ST7735_SetOrientation+0x14>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d103      	bne.n	8001e6a <ST7735_SetOrientation+0x7e>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8001e62:	20a0      	movs	r0, #160	@ 0xa0
 8001e64:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8001e66:	2050      	movs	r0, #80	@ 0x50
 8001e68:	e7cc      	b.n	8001e04 <ST7735_SetOrientation+0x18>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8001e6a:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8001e6e:	d1ca      	bne.n	8001e06 <ST7735_SetOrientation+0x1a>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8001e70:	20a0      	movs	r0, #160	@ 0xa0
 8001e72:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8001e74:	2080      	movs	r0, #128	@ 0x80
 8001e76:	e7c5      	b.n	8001e04 <ST7735_SetOrientation+0x18>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001e78:	68a2      	ldr	r2, [r4, #8]
 8001e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e7e:	791b      	ldrb	r3, [r3, #4]
 8001e80:	e7d7      	b.n	8001e32 <ST7735_SetOrientation+0x46>
 8001e82:	bf00      	nop
 8001e84:	24000840 	.word	0x24000840
 8001e88:	08012a08 	.word	0x08012a08

08001e8c <ST7735_SetCursor>:
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <ST7735_SetCursor+0xdc>)
{
 8001e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e90:	460d      	mov	r5, r1
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001e92:	6899      	ldr	r1, [r3, #8]
{
 8001e94:	4614      	mov	r4, r2
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001e96:	7b5a      	ldrb	r2, [r3, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001e98:	2901      	cmp	r1, #1
 8001e9a:	d854      	bhi.n	8001f46 <ST7735_SetCursor+0xba>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	d14b      	bne.n	8001f38 <ST7735_SetCursor+0xac>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001ea0:	7b1b      	ldrb	r3, [r3, #12]
 8001ea2:	b913      	cbnz	r3, 8001eaa <ST7735_SetCursor+0x1e>
				Xpos += 26;
 8001ea4:	351a      	adds	r5, #26
				Ypos += 1;
 8001ea6:	3401      	adds	r4, #1
 8001ea8:	e000      	b.n	8001eac <ST7735_SetCursor+0x20>
				Xpos += 24;
 8001eaa:	3518      	adds	r5, #24
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001eac:	f100 0720 	add.w	r7, r0, #32
 8001eb0:	f10d 0207 	add.w	r2, sp, #7
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	212a      	movs	r1, #42	@ 0x2a
 8001eb8:	4638      	mov	r0, r7
 8001eba:	f000 fd80 	bl	80029be <st7735_write_reg>
 8001ebe:	4606      	mov	r6, r0
  tmp = (uint8_t)(Xpos >> 8U);
 8001ec0:	0a2b      	lsrs	r3, r5, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ec2:	f10d 0107 	add.w	r1, sp, #7
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4638      	mov	r0, r7
  tmp = (uint8_t)(Xpos >> 8U);
 8001eca:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ece:	f000 fd7d 	bl	80029cc <st7735_send_data>
 8001ed2:	4406      	add	r6, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ed4:	f10d 0107 	add.w	r1, sp, #7
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4638      	mov	r0, r7
  tmp = (uint8_t)(Xpos & 0xFFU);
 8001edc:	f88d 5007 	strb.w	r5, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ee0:	f000 fd74 	bl	80029cc <st7735_send_data>
 8001ee4:	1835      	adds	r5, r6, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001ee6:	f10d 0207 	add.w	r2, sp, #7
 8001eea:	2300      	movs	r3, #0
 8001eec:	212b      	movs	r1, #43	@ 0x2b
 8001eee:	4638      	mov	r0, r7
 8001ef0:	f000 fd65 	bl	80029be <st7735_write_reg>
 8001ef4:	4405      	add	r5, r0
  tmp = (uint8_t)(Ypos >> 8U);
 8001ef6:	0a23      	lsrs	r3, r4, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ef8:	f10d 0107 	add.w	r1, sp, #7
 8001efc:	2201      	movs	r2, #1
 8001efe:	4638      	mov	r0, r7
  tmp = (uint8_t)(Ypos >> 8U);
 8001f00:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f04:	f000 fd62 	bl	80029cc <st7735_send_data>
 8001f08:	4405      	add	r5, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f0a:	f10d 0107 	add.w	r1, sp, #7
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4638      	mov	r0, r7
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001f12:	f88d 4007 	strb.w	r4, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f16:	f000 fd59 	bl	80029cc <st7735_send_data>
 8001f1a:	4405      	add	r5, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f10d 0207 	add.w	r2, sp, #7
 8001f22:	212c      	movs	r1, #44	@ 0x2c
 8001f24:	4638      	mov	r0, r7
 8001f26:	f000 fd4a 	bl	80029be <st7735_write_reg>
  if(ret != ST7735_OK)
 8001f2a:	42c5      	cmn	r5, r0
}
 8001f2c:	bf14      	ite	ne
 8001f2e:	f04f 30ff 	movne.w	r0, #4294967295
 8001f32:	2000      	moveq	r0, #0
 8001f34:	b003      	add	sp, #12
 8001f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001f38:	2a02      	cmp	r2, #2
 8001f3a:	d1b7      	bne.n	8001eac <ST7735_SetCursor+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001f3c:	7b1b      	ldrb	r3, [r3, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d1b4      	bne.n	8001eac <ST7735_SetCursor+0x20>
				Xpos += 2;
 8001f42:	3502      	adds	r5, #2
 8001f44:	e7af      	b.n	8001ea6 <ST7735_SetCursor+0x1a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d106      	bne.n	8001f58 <ST7735_SetCursor+0xcc>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001f4a:	7b1b      	ldrb	r3, [r3, #12]
 8001f4c:	b913      	cbnz	r3, 8001f54 <ST7735_SetCursor+0xc8>
				Xpos += 1;
 8001f4e:	3501      	adds	r5, #1
				Ypos += 26;
 8001f50:	341a      	adds	r4, #26
 8001f52:	e7ab      	b.n	8001eac <ST7735_SetCursor+0x20>
				Ypos += 24;
 8001f54:	3418      	adds	r4, #24
 8001f56:	e7a9      	b.n	8001eac <ST7735_SetCursor+0x20>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001f58:	2a02      	cmp	r2, #2
 8001f5a:	d1a7      	bne.n	8001eac <ST7735_SetCursor+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001f5c:	7b1b      	ldrb	r3, [r3, #12]
 8001f5e:	2b01      	cmp	r3, #1
				Xpos += 1;
 8001f60:	bf04      	itt	eq
 8001f62:	3501      	addeq	r5, #1
				Ypos += 2;
 8001f64:	3402      	addeq	r4, #2
 8001f66:	e7a1      	b.n	8001eac <ST7735_SetCursor+0x20>
 8001f68:	24000840 	.word	0x24000840

08001f6c <ST7735_DrawBitmap>:
{
 8001f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001f70:	4c3c      	ldr	r4, [pc, #240]	@ (8002064 <ST7735_DrawBitmap+0xf8>)
{
 8001f72:	b085      	sub	sp, #20
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001f74:	f8d3 c016 	ldr.w	ip, [r3, #22]
{
 8001f78:	4607      	mov	r7, r0
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001f7a:	6866      	ldr	r6, [r4, #4]
{
 8001f7c:	468a      	mov	sl, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001f7e:	f8d3 500a 	ldr.w	r5, [r3, #10]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001f82:	1ab6      	subs	r6, r6, r2
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8001f84:	f8d3 9002 	ldr.w	r9, [r3, #2]
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8001f88:	f8cd c000 	str.w	ip, [sp]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001f8c:	eba6 060c 	sub.w	r6, r6, ip
  size = size - index;
 8001f90:	eba9 0905 	sub.w	r9, r9, r5
  pbmp = pBmp + index;
 8001f94:	441d      	add	r5, r3
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8001f96:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001f9a:	4632      	mov	r2, r6
 8001f9c:	f7ff fe84 	bl	8001ca8 <ST7735_SetDisplayWindow>
 8001fa0:	b128      	cbz	r0, 8001fae <ST7735_DrawBitmap+0x42>
    ret = ST7735_ERROR;
 8001fa2:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	b005      	add	sp, #20
 8001faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8001fae:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8002068 <ST7735_DrawBitmap+0xfc>
 8001fb2:	68a3      	ldr	r3, [r4, #8]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fb4:	7b22      	ldrb	r2, [r4, #12]
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8001fb6:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fba:	b90a      	cbnz	r2, 8001fc0 <ST7735_DrawBitmap+0x54>
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001fc0:	f107 0b20 	add.w	fp, r7, #32
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001fc4:	f88d 300b 	strb.w	r3, [sp, #11]
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001fc8:	f10d 020b 	add.w	r2, sp, #11
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2136      	movs	r1, #54	@ 0x36
 8001fd0:	4658      	mov	r0, fp
 8001fd2:	f000 fcf4 	bl	80029be <st7735_write_reg>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d1e3      	bne.n	8001fa2 <ST7735_DrawBitmap+0x36>
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8001fda:	4632      	mov	r2, r6
 8001fdc:	4651      	mov	r1, sl
 8001fde:	4638      	mov	r0, r7
 8001fe0:	f7ff ff54 	bl	8001e8c <ST7735_SetCursor>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d1dc      	bne.n	8001fa2 <ST7735_DrawBitmap+0x36>
 8001fe8:	f105 0a02 	add.w	sl, r5, #2
      }while(counter < size);
 8001fec:	f1c5 25ff 	rsb	r5, r5, #4278255360	@ 0xff00ff00
 8001ff0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8001ff4:	35fe      	adds	r5, #254	@ 0xfe
        pixel_val[0] = *(pbmp + 1);
 8001ff6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	a903      	add	r1, sp, #12
 8001ffe:	4658      	mov	r0, fp
        pixel_val[0] = *(pbmp + 1);
 8002000:	f88d 300c 	strb.w	r3, [sp, #12]
        pixel_val[1] = *(pbmp);
 8002004:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 8002008:	f88d 300d 	strb.w	r3, [sp, #13]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 800200c:	f000 fcde 	bl	80029cc <st7735_send_data>
 8002010:	4606      	mov	r6, r0
 8002012:	bb20      	cbnz	r0, 800205e <ST7735_DrawBitmap+0xf2>
      }while(counter < size);
 8002014:	f10a 0a02 	add.w	sl, sl, #2
 8002018:	eb05 030a 	add.w	r3, r5, sl
 800201c:	4599      	cmp	r9, r3
 800201e:	d8ea      	bhi.n	8001ff6 <ST7735_DrawBitmap+0x8a>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002020:	68a3      	ldr	r3, [r4, #8]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002022:	7b22      	ldrb	r2, [r4, #12]
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002024:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 8002028:	f898 3004 	ldrb.w	r3, [r8, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800202c:	b90a      	cbnz	r2, 8002032 <ST7735_DrawBitmap+0xc6>
 800202e:	f043 0308 	orr.w	r3, r3, #8
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002032:	f10d 020b 	add.w	r2, sp, #11
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002036:	f88d 300b 	strb.w	r3, [sp, #11]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 800203a:	2136      	movs	r1, #54	@ 0x36
 800203c:	2301      	movs	r3, #1
 800203e:	4658      	mov	r0, fp
 8002040:	f000 fcbd 	bl	80029be <st7735_write_reg>
 8002044:	4602      	mov	r2, r0
 8002046:	2800      	cmp	r0, #0
 8002048:	d1ab      	bne.n	8001fa2 <ST7735_DrawBitmap+0x36>
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	4601      	mov	r1, r0
 800204e:	4638      	mov	r0, r7
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	f7ff fe28 	bl	8001ca8 <ST7735_SetDisplayWindow>
 8002058:	2800      	cmp	r0, #0
 800205a:	d0a4      	beq.n	8001fa6 <ST7735_DrawBitmap+0x3a>
 800205c:	e7a1      	b.n	8001fa2 <ST7735_DrawBitmap+0x36>
          ret = ST7735_ERROR;
 800205e:	f04f 36ff 	mov.w	r6, #4294967295
 8002062:	e7dd      	b.n	8002020 <ST7735_DrawBitmap+0xb4>
 8002064:	24000840 	.word	0x24000840
 8002068:	08012a08 	.word	0x08012a08

0800206c <ST7735_DrawHLine>:
{
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((Xpos + Length) > ST7735Ctx.Width)
 800206e:	4f14      	ldr	r7, [pc, #80]	@ (80020c0 <ST7735_DrawHLine+0x54>)
{
 8002070:	461c      	mov	r4, r3
  if((Xpos + Length) > ST7735Ctx.Width)
 8002072:	18cb      	adds	r3, r1, r3
{
 8002074:	4605      	mov	r5, r0
  if((Xpos + Length) > ST7735Ctx.Width)
 8002076:	683f      	ldr	r7, [r7, #0]
{
 8002078:	9e06      	ldr	r6, [sp, #24]
  if((Xpos + Length) > ST7735Ctx.Width)
 800207a:	42bb      	cmp	r3, r7
 800207c:	d902      	bls.n	8002084 <ST7735_DrawHLine+0x18>
    ret = ST7735_ERROR;
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002084:	f7ff ff02 	bl	8001e8c <ST7735_SetCursor>
 8002088:	4602      	mov	r2, r0
 800208a:	2800      	cmp	r0, #0
 800208c:	d1f7      	bne.n	800207e <ST7735_DrawHLine+0x12>
      pdata[2U*i] = (uint8_t)(Color >> 8);
 800208e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8002092:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <ST7735_DrawHLine+0x58>)
    for(i = 0; i < Length; i++)
 8002094:	42a2      	cmp	r2, r4
 8002096:	f103 0302 	add.w	r3, r3, #2
 800209a:	d10a      	bne.n	80020b2 <ST7735_DrawHLine+0x46>
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 800209c:	0052      	lsls	r2, r2, #1
 800209e:	4909      	ldr	r1, [pc, #36]	@ (80020c4 <ST7735_DrawHLine+0x58>)
 80020a0:	f105 0020 	add.w	r0, r5, #32
 80020a4:	f000 fc92 	bl	80029cc <st7735_send_data>
 80020a8:	3800      	subs	r0, #0
 80020aa:	bf18      	it	ne
 80020ac:	2001      	movne	r0, #1
 80020ae:	4240      	negs	r0, r0
  return ret;
 80020b0:	e7e7      	b.n	8002082 <ST7735_DrawHLine+0x16>
    for(i = 0; i < Length; i++)
 80020b2:	3201      	adds	r2, #1
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80020b4:	f803 1c02 	strb.w	r1, [r3, #-2]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 80020b8:	f803 6c01 	strb.w	r6, [r3, #-1]
    for(i = 0; i < Length; i++)
 80020bc:	e7ea      	b.n	8002094 <ST7735_DrawHLine+0x28>
 80020be:	bf00      	nop
 80020c0:	24000840 	.word	0x24000840
 80020c4:	24000340 	.word	0x24000340

080020c8 <ST7735_FillRect>:
{
 80020c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020cc:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 80020d0:	4607      	mov	r7, r0
 80020d2:	4688      	mov	r8, r1
 80020d4:	4614      	mov	r4, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	4415      	add	r5, r2
  for(i = 0; i < Height; i++)
 80020da:	42ac      	cmp	r4, r5
 80020dc:	d103      	bne.n	80020e6 <ST7735_FillRect+0x1e>
  int32_t ret = ST7735_OK;
 80020de:	2000      	movs	r0, #0
}
 80020e0:	b003      	add	sp, #12
 80020e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 80020e6:	464b      	mov	r3, r9
 80020e8:	4622      	mov	r2, r4
 80020ea:	4641      	mov	r1, r8
 80020ec:	4638      	mov	r0, r7
 80020ee:	9600      	str	r6, [sp, #0]
 80020f0:	f7ff ffbc 	bl	800206c <ST7735_DrawHLine>
 80020f4:	b908      	cbnz	r0, 80020fa <ST7735_FillRect+0x32>
    y_pos++;
 80020f6:	3401      	adds	r4, #1
  for(i = 0; i < Height; i++)
 80020f8:	e7ef      	b.n	80020da <ST7735_FillRect+0x12>
      ret = ST7735_ERROR;
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80020fe:	e7ef      	b.n	80020e0 <ST7735_FillRect+0x18>

08002100 <ST7735_SetPixel>:
{
 8002100:	b573      	push	{r0, r1, r4, r5, r6, lr}
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002102:	0a1e      	lsrs	r6, r3, #8
{
 8002104:	4604      	mov	r4, r0
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002106:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <ST7735_SetPixel+0x44>)
  color |= (uint16_t)((uint16_t)(Color >> 8));
 800210c:	f8ad 6006 	strh.w	r6, [sp, #6]
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002110:	681e      	ldr	r6, [r3, #0]
 8002112:	428e      	cmp	r6, r1
 8002114:	d803      	bhi.n	800211e <ST7735_SetPixel+0x1e>
    ret = ST7735_ERROR;
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
}
 800211a:	b002      	add	sp, #8
 800211c:	bd70      	pop	{r4, r5, r6, pc}
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4293      	cmp	r3, r2
 8002122:	d9f8      	bls.n	8002116 <ST7735_SetPixel+0x16>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002124:	f7ff feb2 	bl	8001e8c <ST7735_SetCursor>
 8002128:	2800      	cmp	r0, #0
 800212a:	d1f4      	bne.n	8002116 <ST7735_SetPixel+0x16>
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 800212c:	2202      	movs	r2, #2
 800212e:	f10d 0106 	add.w	r1, sp, #6
 8002132:	f104 0020 	add.w	r0, r4, #32
 8002136:	f000 fc49 	bl	80029cc <st7735_send_data>
 800213a:	3800      	subs	r0, #0
 800213c:	bf18      	it	ne
 800213e:	2001      	movne	r0, #1
 8002140:	4240      	negs	r0, r0
  return ret;
 8002142:	e7ea      	b.n	800211a <ST7735_SetPixel+0x1a>
 8002144:	24000840 	.word	0x24000840

08002148 <ST7735_DrawVLine>:
{
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((Ypos + Length) > ST7735Ctx.Height)
 800214a:	18d5      	adds	r5, r2, r3
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <ST7735_DrawVLine+0x34>)
{
 800214e:	4606      	mov	r6, r0
 8002150:	460f      	mov	r7, r1
  if((Ypos + Length) > ST7735Ctx.Height)
 8002152:	685b      	ldr	r3, [r3, #4]
{
 8002154:	4614      	mov	r4, r2
  if((Ypos + Length) > ST7735Ctx.Height)
 8002156:	429d      	cmp	r5, r3
 8002158:	d90b      	bls.n	8002172 <ST7735_DrawVLine+0x2a>
    ret = ST7735_ERROR;
 800215a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002160:	4622      	mov	r2, r4
 8002162:	9b06      	ldr	r3, [sp, #24]
 8002164:	4639      	mov	r1, r7
 8002166:	4630      	mov	r0, r6
 8002168:	3401      	adds	r4, #1
 800216a:	f7ff ffc9 	bl	8002100 <ST7735_SetPixel>
 800216e:	2800      	cmp	r0, #0
 8002170:	d1f3      	bne.n	800215a <ST7735_DrawVLine+0x12>
    for(counter = 0; counter < Length; counter++)
 8002172:	42a5      	cmp	r5, r4
 8002174:	d1f4      	bne.n	8002160 <ST7735_DrawVLine+0x18>
  int32_t ret = ST7735_OK;
 8002176:	2000      	movs	r0, #0
  return ret;
 8002178:	e7f1      	b.n	800215e <ST7735_DrawVLine+0x16>
 800217a:	bf00      	nop
 800217c:	24000840 	.word	0x24000840

08002180 <ST7735_ReadID>:
{
 8002180:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002182:	f100 0420 	add.w	r4, r0, #32
{
 8002186:	460d      	mov	r5, r1
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002188:	aa01      	add	r2, sp, #4
 800218a:	21da      	movs	r1, #218	@ 0xda
 800218c:	4620      	mov	r0, r4
 800218e:	f000 fc13 	bl	80029b8 <st7735_read_reg>
 8002192:	b118      	cbz	r0, 800219c <ST7735_ReadID+0x1c>
    ret = ST7735_ERROR;
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002198:	b003      	add	sp, #12
 800219a:	bd30      	pop	{r4, r5, pc}
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 800219c:	f10d 0205 	add.w	r2, sp, #5
 80021a0:	21db      	movs	r1, #219	@ 0xdb
 80021a2:	4620      	mov	r0, r4
 80021a4:	f000 fc08 	bl	80029b8 <st7735_read_reg>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f3      	bne.n	8002194 <ST7735_ReadID+0x14>
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 80021ac:	f10d 0206 	add.w	r2, sp, #6
 80021b0:	21dc      	movs	r1, #220	@ 0xdc
 80021b2:	4620      	mov	r0, r4
 80021b4:	f000 fc00 	bl	80029b8 <st7735_read_reg>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d1eb      	bne.n	8002194 <ST7735_ReadID+0x14>
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 80021bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	602b      	str	r3, [r5, #0]
  return ret;
 80021d2:	e7e1      	b.n	8002198 <ST7735_ReadID+0x18>

080021d4 <ST7735_GetPixel>:
{
 80021d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021d6:	4605      	mov	r5, r0
 80021d8:	461e      	mov	r6, r3
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80021da:	f7ff fe57 	bl	8001e8c <ST7735_SetCursor>
 80021de:	4604      	mov	r4, r0
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80021e0:	3520      	adds	r5, #32
 80021e2:	f10d 0207 	add.w	r2, sp, #7
 80021e6:	212e      	movs	r1, #46	@ 0x2e
 80021e8:	4628      	mov	r0, r5
 80021ea:	f000 fbe5 	bl	80029b8 <st7735_read_reg>
 80021ee:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80021f0:	f10d 0107 	add.w	r1, sp, #7
 80021f4:	2201      	movs	r2, #1
 80021f6:	4628      	mov	r0, r5
 80021f8:	f000 fbeb 	bl	80029d2 <st7735_recv_data>
 80021fc:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80021fe:	f10d 0105 	add.w	r1, sp, #5
 8002202:	2201      	movs	r2, #1
 8002204:	4628      	mov	r0, r5
 8002206:	f000 fbe4 	bl	80029d2 <st7735_recv_data>
 800220a:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	f10d 0106 	add.w	r1, sp, #6
 8002212:	4628      	mov	r0, r5
 8002214:	f000 fbdd 	bl	80029d2 <st7735_recv_data>
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002218:	f89d 2006 	ldrb.w	r2, [sp, #6]
  if(ret != ST7735_OK)
 800221c:	42c4      	cmn	r4, r0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800221e:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8002222:	bf18      	it	ne
 8002224:	f04f 30ff 	movne.w	r0, #4294967295
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002228:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 800222c:	bf08      	it	eq
 800222e:	2000      	moveq	r0, #0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002230:	6033      	str	r3, [r6, #0]
}
 8002232:	b002      	add	sp, #8
 8002234:	bd70      	pop	{r4, r5, r6, pc}
	...

08002238 <ST7735_FillRGBRect>:
{
 8002238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800223e:	461c      	mov	r4, r3
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002240:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <ST7735_FillRGBRect+0x8c>)
{
 8002242:	468a      	mov	sl, r1
 8002244:	4615      	mov	r5, r2
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002246:	4439      	add	r1, r7
 8002248:	681a      	ldr	r2, [r3, #0]
{
 800224a:	4681      	mov	r9, r0
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 800224c:	4291      	cmp	r1, r2
 800224e:	d836      	bhi.n	80022be <ST7735_FillRGBRect+0x86>
 8002250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	eb05 0802 	add.w	r8, r5, r2
 8002258:	4598      	cmp	r8, r3
 800225a:	d830      	bhi.n	80022be <ST7735_FillRGBRect+0x86>
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 800225c:	f100 0320 	add.w	r3, r0, #32
 8002260:	007f      	lsls	r7, r7, #1
  int32_t ret = ST7735_OK;
 8002262:	2600      	movs	r6, #0
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002264:	9301      	str	r3, [sp, #4]
    for(j = 0; j < Height; j++)
 8002266:	45a8      	cmp	r8, r5
 8002268:	d103      	bne.n	8002272 <ST7735_FillRGBRect+0x3a>
}
 800226a:	4630      	mov	r0, r6
 800226c:	b003      	add	sp, #12
 800226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002272:	462a      	mov	r2, r5
 8002274:	4651      	mov	r1, sl
 8002276:	4648      	mov	r0, r9
 8002278:	f7ff fe08 	bl	8001e8c <ST7735_SetCursor>
 800227c:	b9d8      	cbnz	r0, 80022b6 <ST7735_FillRGBRect+0x7e>
 800227e:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <ST7735_FillRGBRect+0x90>)
 8002280:	eb04 0b07 	add.w	fp, r4, r7
        for(i = 0; i < Width; i++)
 8002284:	455c      	cmp	r4, fp
 8002286:	f102 0202 	add.w	r2, r2, #2
 800228a:	d10b      	bne.n	80022a4 <ST7735_FillRGBRect+0x6c>
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 800228c:	463a      	mov	r2, r7
 800228e:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <ST7735_FillRGBRect+0x90>)
 8002290:	9801      	ldr	r0, [sp, #4]
 8002292:	f000 fb9b 	bl	80029cc <st7735_send_data>
          ret = ST7735_ERROR;
 8002296:	2800      	cmp	r0, #0
 8002298:	bf18      	it	ne
 800229a:	f04f 36ff 	movne.w	r6, #4294967295
    for(j = 0; j < Height; j++)
 800229e:	3501      	adds	r5, #1
  int32_t ret = ST7735_OK;
 80022a0:	465c      	mov	r4, fp
 80022a2:	e7e0      	b.n	8002266 <ST7735_FillRGBRect+0x2e>
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 80022a4:	7821      	ldrb	r1, [r4, #0]
          rgb_data +=2;
 80022a6:	3402      	adds	r4, #2
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 80022a8:	f802 1c02 	strb.w	r1, [r2, #-2]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 80022ac:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80022b0:	f802 1c01 	strb.w	r1, [r2, #-1]
        for(i = 0; i < Width; i++)
 80022b4:	e7e6      	b.n	8002284 <ST7735_FillRGBRect+0x4c>
 80022b6:	46a3      	mov	fp, r4
        ret = ST7735_ERROR;
 80022b8:	f04f 36ff 	mov.w	r6, #4294967295
 80022bc:	e7ef      	b.n	800229e <ST7735_FillRGBRect+0x66>
    ret = ST7735_ERROR;
 80022be:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 80022c2:	e7d2      	b.n	800226a <ST7735_FillRGBRect+0x32>
 80022c4:	24000840 	.word	0x24000840
 80022c8:	240005c0 	.word	0x240005c0

080022cc <ST7735_IO_Delay.isra.0>:
/**
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
 80022cc:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80022ce:	69c3      	ldr	r3, [r0, #28]
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
 80022d0:	4604      	mov	r4, r0
 80022d2:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80022d4:	4798      	blx	r3
 80022d6:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80022d8:	69e3      	ldr	r3, [r4, #28]
 80022da:	4798      	blx	r3
 80022dc:	1b83      	subs	r3, r0, r6
 80022de:	42ab      	cmp	r3, r5
 80022e0:	d3fa      	bcc.n	80022d8 <ST7735_IO_Delay.isra.0+0xc>
  {
  }
  return ST7735_OK;
}
 80022e2:	bd70      	pop	{r4, r5, r6, pc}

080022e4 <ST7735_Init>:
{
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b085      	sub	sp, #20
  if(pObj == NULL)
 80022ea:	4607      	mov	r7, r0
{
 80022ec:	e9cd 2100 	strd	r2, r1, [sp]
  if(pObj == NULL)
 80022f0:	2800      	cmp	r0, #0
 80022f2:	f000 82ae 	beq.w	8002852 <ST7735_Init+0x56e>
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80022f6:	f100 0520 	add.w	r5, r0, #32
    tmp = 0x00U;
 80022fa:	f04f 0800 	mov.w	r8, #0
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80022fe:	f10d 020f 	add.w	r2, sp, #15
 8002302:	2101      	movs	r1, #1
 8002304:	4643      	mov	r3, r8
 8002306:	4628      	mov	r0, r5
    tmp = 0x00U;
 8002308:	f88d 800f 	strb.w	r8, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800230c:	f000 fb57 	bl	80029be <st7735_write_reg>
		(void)ST7735_IO_Delay(pObj, 120);
 8002310:	2178      	movs	r1, #120	@ 0x78
 8002312:	4638      	mov	r0, r7
 8002314:	f7ff ffda 	bl	80022cc <ST7735_IO_Delay.isra.0>
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002318:	4643      	mov	r3, r8
 800231a:	f10d 020f 	add.w	r2, sp, #15
 800231e:	2101      	movs	r1, #1
 8002320:	4628      	mov	r0, r5
		tmp = 0x00U;
 8002322:	f88d 800f 	strb.w	r8, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8002326:	f000 fb4a 	bl	80029be <st7735_write_reg>
		(void)ST7735_IO_Delay(pObj, 120);
 800232a:	2178      	movs	r1, #120	@ 0x78
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800232c:	4604      	mov	r4, r0
		(void)ST7735_IO_Delay(pObj, 120);
 800232e:	4638      	mov	r0, r7
 8002330:	f7ff ffcc 	bl	80022cc <ST7735_IO_Delay.isra.0>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8002334:	2301      	movs	r3, #1
 8002336:	f10d 020f 	add.w	r2, sp, #15
 800233a:	2111      	movs	r1, #17
 800233c:	4628      	mov	r0, r5
    tmp = 0x00U;
 800233e:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8002342:	f000 fb3c 	bl	80029be <st7735_write_reg>
 8002346:	4404      	add	r4, r0
    tmp = 0x01U;
 8002348:	2601      	movs	r6, #1
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 800234a:	4643      	mov	r3, r8
 800234c:	f10d 020f 	add.w	r2, sp, #15
 8002350:	21b1      	movs	r1, #177	@ 0xb1
 8002352:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8002354:	f04f 0a2c 	mov.w	sl, #44	@ 0x2c
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8002358:	f000 fb31 	bl	80029be <st7735_write_reg>
 800235c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800235e:	4632      	mov	r2, r6
 8002360:	f10d 010f 	add.w	r1, sp, #15
 8002364:	4628      	mov	r0, r5
    tmp = 0x01U;
 8002366:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800236a:	f000 fb2f 	bl	80029cc <st7735_send_data>
 800236e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002370:	4632      	mov	r2, r6
 8002372:	f10d 010f 	add.w	r1, sp, #15
 8002376:	4628      	mov	r0, r5
    tmp = 0x2DU;
 8002378:	f04f 092d 	mov.w	r9, #45	@ 0x2d
    tmp = 0x2CU;
 800237c:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002380:	f000 fb24 	bl	80029cc <st7735_send_data>
 8002384:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002386:	4632      	mov	r2, r6
 8002388:	f10d 010f 	add.w	r1, sp, #15
 800238c:	4628      	mov	r0, r5
    tmp = 0x2DU;
 800238e:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002392:	f000 fb1b 	bl	80029cc <st7735_send_data>
 8002396:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8002398:	4633      	mov	r3, r6
 800239a:	f10d 020f 	add.w	r2, sp, #15
 800239e:	21b2      	movs	r1, #178	@ 0xb2
 80023a0:	4628      	mov	r0, r5
    tmp = 0x01U;
 80023a2:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 80023a6:	f000 fb0a 	bl	80029be <st7735_write_reg>
 80023aa:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023ac:	4632      	mov	r2, r6
 80023ae:	f10d 010f 	add.w	r1, sp, #15
 80023b2:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80023b4:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023b8:	f000 fb08 	bl	80029cc <st7735_send_data>
 80023bc:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023be:	4632      	mov	r2, r6
 80023c0:	f10d 010f 	add.w	r1, sp, #15
 80023c4:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80023c6:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023ca:	f000 faff 	bl	80029cc <st7735_send_data>
 80023ce:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80023d0:	4633      	mov	r3, r6
 80023d2:	f10d 020f 	add.w	r2, sp, #15
 80023d6:	21b3      	movs	r1, #179	@ 0xb3
 80023d8:	4628      	mov	r0, r5
    tmp = 0x01U;
 80023da:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80023de:	f000 faee 	bl	80029be <st7735_write_reg>
 80023e2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023e4:	4632      	mov	r2, r6
 80023e6:	f10d 010f 	add.w	r1, sp, #15
 80023ea:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80023ec:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023f0:	f000 faec 	bl	80029cc <st7735_send_data>
 80023f4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80023f6:	4632      	mov	r2, r6
 80023f8:	f10d 010f 	add.w	r1, sp, #15
 80023fc:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80023fe:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002402:	f000 fae3 	bl	80029cc <st7735_send_data>
 8002406:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002408:	4632      	mov	r2, r6
 800240a:	f10d 010f 	add.w	r1, sp, #15
 800240e:	4628      	mov	r0, r5
    tmp = 0x01U;
 8002410:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002414:	f000 fada 	bl	80029cc <st7735_send_data>
 8002418:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800241a:	4632      	mov	r2, r6
 800241c:	f10d 010f 	add.w	r1, sp, #15
 8002420:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8002422:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002426:	f000 fad1 	bl	80029cc <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800242a:	4632      	mov	r2, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800242c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800242e:	f10d 010f 	add.w	r1, sp, #15
 8002432:	4628      	mov	r0, r5
    tmp = 0x2DU;
 8002434:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002438:	f000 fac8 	bl	80029cc <st7735_send_data>
    tmp = 0x07U;
 800243c:	2307      	movs	r3, #7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800243e:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002440:	f10d 020f 	add.w	r2, sp, #15
 8002444:	21b4      	movs	r1, #180	@ 0xb4
    tmp = 0x07U;
 8002446:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800244a:	4628      	mov	r0, r5
 800244c:	4633      	mov	r3, r6
    tmp = 0xC5U;
 800244e:	f04f 09c5 	mov.w	r9, #197	@ 0xc5
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002452:	f000 fab4 	bl	80029be <st7735_write_reg>
    tmp = 0xA2U;
 8002456:	23a2      	movs	r3, #162	@ 0xa2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8002458:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 800245a:	f10d 020f 	add.w	r2, sp, #15
 800245e:	21c0      	movs	r1, #192	@ 0xc0
    tmp = 0xA2U;
 8002460:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8002464:	4628      	mov	r0, r5
 8002466:	4633      	mov	r3, r6
 8002468:	f000 faa9 	bl	80029be <st7735_write_reg>
    tmp = 0x02U;
 800246c:	2302      	movs	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 800246e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002470:	4632      	mov	r2, r6
 8002472:	f10d 010f 	add.w	r1, sp, #15
 8002476:	4628      	mov	r0, r5
    tmp = 0x02U;
 8002478:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800247c:	f000 faa6 	bl	80029cc <st7735_send_data>
    tmp = 0x84U;
 8002480:	2384      	movs	r3, #132	@ 0x84
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002482:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002484:	4632      	mov	r2, r6
 8002486:	f10d 010f 	add.w	r1, sp, #15
 800248a:	4628      	mov	r0, r5
    tmp = 0x84U;
 800248c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002490:	f000 fa9c 	bl	80029cc <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8002494:	4633      	mov	r3, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002496:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8002498:	f10d 020f 	add.w	r2, sp, #15
 800249c:	21c1      	movs	r1, #193	@ 0xc1
 800249e:	4628      	mov	r0, r5
    tmp = 0xC5U;
 80024a0:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 80024a4:	f000 fa8b 	bl	80029be <st7735_write_reg>
    tmp = 0x0AU;
 80024a8:	230a      	movs	r3, #10
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 80024aa:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80024ac:	f10d 020f 	add.w	r2, sp, #15
 80024b0:	21c2      	movs	r1, #194	@ 0xc2
    tmp = 0x0AU;
 80024b2:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80024b6:	4628      	mov	r0, r5
 80024b8:	4633      	mov	r3, r6
    tmp = 0x8AU;
 80024ba:	f04f 0a8a 	mov.w	sl, #138	@ 0x8a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80024be:	f000 fa7e 	bl	80029be <st7735_write_reg>
 80024c2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024c4:	4632      	mov	r2, r6
 80024c6:	f10d 010f 	add.w	r1, sp, #15
 80024ca:	4628      	mov	r0, r5
    tmp = 0x00U;
 80024cc:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024d0:	f000 fa7c 	bl	80029cc <st7735_send_data>
 80024d4:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80024d6:	4633      	mov	r3, r6
 80024d8:	f10d 020f 	add.w	r2, sp, #15
 80024dc:	21c3      	movs	r1, #195	@ 0xc3
 80024de:	4628      	mov	r0, r5
    tmp = 0x8AU;
 80024e0:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80024e4:	f000 fa6b 	bl	80029be <st7735_write_reg>
    tmp = 0x2AU;
 80024e8:	232a      	movs	r3, #42	@ 0x2a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80024ea:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024ec:	4632      	mov	r2, r6
 80024ee:	f10d 010f 	add.w	r1, sp, #15
 80024f2:	4628      	mov	r0, r5
    tmp = 0x2AU;
 80024f4:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024f8:	f000 fa68 	bl	80029cc <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80024fc:	4633      	mov	r3, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80024fe:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002500:	f10d 020f 	add.w	r2, sp, #15
 8002504:	21c4      	movs	r1, #196	@ 0xc4
 8002506:	4628      	mov	r0, r5
    tmp = 0x8AU;
 8002508:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 800250c:	f000 fa57 	bl	80029be <st7735_write_reg>
    tmp = 0xEEU;
 8002510:	23ee      	movs	r3, #238	@ 0xee
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8002512:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002514:	4632      	mov	r2, r6
 8002516:	f10d 010f 	add.w	r1, sp, #15
 800251a:	4628      	mov	r0, r5
    tmp = 0xEEU;
 800251c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002520:	f000 fa54 	bl	80029cc <st7735_send_data>
    tmp = 0x0EU;
 8002524:	230e      	movs	r3, #14
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002526:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002528:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x0EU;
 800252c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8002530:	4649      	mov	r1, r9
 8002532:	4633      	mov	r3, r6
 8002534:	4628      	mov	r0, r5
 8002536:	f000 fa42 	bl	80029be <st7735_write_reg>
		if (pDriver->Panel == HannStar_Panel) {
 800253a:	9b00      	ldr	r3, [sp, #0]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 800253c:	4404      	add	r4, r0
		if (pDriver->Panel == HannStar_Panel) {
 800253e:	7b1b      	ldrb	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 8181 	bne.w	8002848 <ST7735_Init+0x564>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8002546:	f10d 020f 	add.w	r2, sp, #15
 800254a:	2121      	movs	r1, #33	@ 0x21
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 800254c:	4628      	mov	r0, r5
    tmp = 0x07U;
 800254e:	f04f 0b07 	mov.w	fp, #7
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002552:	f000 fa34 	bl	80029be <st7735_write_reg>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002556:	2301      	movs	r3, #1
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002558:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 800255a:	aa01      	add	r2, sp, #4
 800255c:	213a      	movs	r1, #58	@ 0x3a
 800255e:	4628      	mov	r0, r5
 8002560:	f000 fa2d 	bl	80029be <st7735_write_reg>
    tmp = 0x02U;
 8002564:	f04f 0302 	mov.w	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8002568:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 800256a:	f10d 020f 	add.w	r2, sp, #15
 800256e:	21e0      	movs	r1, #224	@ 0xe0
    tmp = 0x02U;
 8002570:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8002574:	4628      	mov	r0, r5
 8002576:	2301      	movs	r3, #1
 8002578:	f000 fa21 	bl	80029be <st7735_write_reg>
    tmp = 0x1CU;
 800257c:	231c      	movs	r3, #28
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 800257e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002580:	2201      	movs	r2, #1
 8002582:	f10d 010f 	add.w	r1, sp, #15
 8002586:	4628      	mov	r0, r5
    tmp = 0x1CU;
 8002588:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800258c:	f000 fa1e 	bl	80029cc <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002590:	2201      	movs	r2, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002592:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002594:	f10d 010f 	add.w	r1, sp, #15
 8002598:	4628      	mov	r0, r5
    tmp = 0x07U;
 800259a:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800259e:	f000 fa15 	bl	80029cc <st7735_send_data>
    tmp = 0x12U;
 80025a2:	2312      	movs	r3, #18
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025a4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f10d 010f 	add.w	r1, sp, #15
 80025ac:	4628      	mov	r0, r5
    tmp = 0x12U;
 80025ae:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025b2:	f000 fa0b 	bl	80029cc <st7735_send_data>
    tmp = 0x37U;
 80025b6:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025ba:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025bc:	f10d 010f 	add.w	r1, sp, #15
    tmp = 0x37U;
 80025c0:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025c4:	4628      	mov	r0, r5
 80025c6:	2201      	movs	r2, #1
    tmp = 0x29U;
 80025c8:	f04f 0829 	mov.w	r8, #41	@ 0x29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025cc:	f000 f9fe 	bl	80029cc <st7735_send_data>
    tmp = 0x32U;
 80025d0:	2332      	movs	r3, #50	@ 0x32
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025d2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025d4:	2201      	movs	r2, #1
 80025d6:	f10d 010f 	add.w	r1, sp, #15
 80025da:	4628      	mov	r0, r5
    tmp = 0x32U;
 80025dc:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025e0:	f000 f9f4 	bl	80029cc <st7735_send_data>
 80025e4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f10d 010f 	add.w	r1, sp, #15
 80025ec:	4628      	mov	r0, r5
    tmp = 0x29U;
 80025ee:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025f2:	f000 f9eb 	bl	80029cc <st7735_send_data>
    tmp = 0x2DU;
 80025f6:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025fa:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80025fc:	f10d 000f 	add.w	r0, sp, #15
 8002600:	2201      	movs	r2, #1
    tmp = 0x2DU;
 8002602:	f88d 100f 	strb.w	r1, [sp, #15]
    tmp = 0x00U;
 8002606:	f04f 0900 	mov.w	r9, #0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800260a:	4601      	mov	r1, r0
 800260c:	4628      	mov	r0, r5
 800260e:	f000 f9dd 	bl	80029cc <st7735_send_data>
 8002612:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002614:	f10d 000f 	add.w	r0, sp, #15
 8002618:	2201      	movs	r2, #1
    tmp = 0x29U;
 800261a:	f88d 800f 	strb.w	r8, [sp, #15]
    tmp = 0x01U;
 800261e:	2601      	movs	r6, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002620:	4601      	mov	r1, r0
 8002622:	4628      	mov	r0, r5
 8002624:	f000 f9d2 	bl	80029cc <st7735_send_data>
 8002628:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800262a:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x25U;
 800262e:	2325      	movs	r3, #37	@ 0x25
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002630:	2201      	movs	r2, #1
    tmp = 0x10U;
 8002632:	f04f 0a10 	mov.w	sl, #16
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002636:	4601      	mov	r1, r0
 8002638:	4628      	mov	r0, r5
    tmp = 0x25U;
 800263a:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800263e:	f000 f9c5 	bl	80029cc <st7735_send_data>
 8002642:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002644:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2BU;
 8002648:	232b      	movs	r3, #43	@ 0x2b
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	4601      	mov	r1, r0
 800264e:	4628      	mov	r0, r5
    tmp = 0x2BU;
 8002650:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002654:	f000 f9ba 	bl	80029cc <st7735_send_data>
 8002658:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800265a:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x39U;
 800265e:	2339      	movs	r3, #57	@ 0x39
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002660:	2201      	movs	r2, #1
 8002662:	4601      	mov	r1, r0
 8002664:	4628      	mov	r0, r5
    tmp = 0x39U;
 8002666:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800266a:	f000 f9af 	bl	80029cc <st7735_send_data>
 800266e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002670:	f10d 000f 	add.w	r0, sp, #15
 8002674:	2201      	movs	r2, #1
    tmp = 0x00U;
 8002676:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800267a:	4601      	mov	r1, r0
 800267c:	4628      	mov	r0, r5
 800267e:	f000 f9a5 	bl	80029cc <st7735_send_data>
 8002682:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002684:	f10d 000f 	add.w	r0, sp, #15
 8002688:	4632      	mov	r2, r6
    tmp = 0x01U;
 800268a:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800268e:	4601      	mov	r1, r0
 8002690:	4628      	mov	r0, r5
 8002692:	f000 f99b 	bl	80029cc <st7735_send_data>
 8002696:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002698:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x03U;
 800269c:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800269e:	4632      	mov	r2, r6
 80026a0:	4601      	mov	r1, r0
 80026a2:	4628      	mov	r0, r5
    tmp = 0x03U;
 80026a4:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026a8:	f000 f990 	bl	80029cc <st7735_send_data>
 80026ac:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026ae:	f10d 000f 	add.w	r0, sp, #15
 80026b2:	4632      	mov	r2, r6
    tmp = 0x10U;
 80026b4:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026b8:	4601      	mov	r1, r0
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f986 	bl	80029cc <st7735_send_data>
    tmp = 0x03U;
 80026c0:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026c2:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80026c4:	f10d 000f 	add.w	r0, sp, #15
 80026c8:	21e1      	movs	r1, #225	@ 0xe1
    tmp = 0x03U;
 80026ca:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80026ce:	4602      	mov	r2, r0
 80026d0:	4633      	mov	r3, r6
 80026d2:	4628      	mov	r0, r5
 80026d4:	f000 f973 	bl	80029be <st7735_write_reg>
 80026d8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026da:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x1DU;
 80026de:	231d      	movs	r3, #29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026e0:	4632      	mov	r2, r6
 80026e2:	4601      	mov	r1, r0
 80026e4:	4628      	mov	r0, r5
    tmp = 0x1DU;
 80026e6:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026ea:	f000 f96f 	bl	80029cc <st7735_send_data>
 80026ee:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026f0:	f10d 000f 	add.w	r0, sp, #15
 80026f4:	4632      	mov	r2, r6
    tmp = 0x07U;
 80026f6:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026fa:	4601      	mov	r1, r0
 80026fc:	4628      	mov	r0, r5
 80026fe:	f000 f965 	bl	80029cc <st7735_send_data>
 8002702:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002704:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x06U;
 8002708:	2306      	movs	r3, #6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800270a:	4632      	mov	r2, r6
    tmp = 0x2EU;
 800270c:	f04f 0b2e 	mov.w	fp, #46	@ 0x2e
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002710:	4601      	mov	r1, r0
 8002712:	4628      	mov	r0, r5
    tmp = 0x06U;
 8002714:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002718:	f000 f958 	bl	80029cc <st7735_send_data>
 800271c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800271e:	f10d 000f 	add.w	r0, sp, #15
 8002722:	4632      	mov	r2, r6
    tmp = 0x2EU;
 8002724:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002728:	4601      	mov	r1, r0
 800272a:	4628      	mov	r0, r5
 800272c:	f000 f94e 	bl	80029cc <st7735_send_data>
 8002730:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002732:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2CU;
 8002736:	232c      	movs	r3, #44	@ 0x2c
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002738:	4632      	mov	r2, r6
 800273a:	4601      	mov	r1, r0
 800273c:	4628      	mov	r0, r5
    tmp = 0x2CU;
 800273e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002742:	f000 f943 	bl	80029cc <st7735_send_data>
 8002746:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002748:	f10d 000f 	add.w	r0, sp, #15
 800274c:	4632      	mov	r2, r6
    tmp = 0x29U;
 800274e:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002752:	4601      	mov	r1, r0
 8002754:	4628      	mov	r0, r5
 8002756:	f000 f939 	bl	80029cc <st7735_send_data>
    tmp = 0x2DU;
 800275a:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800275e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002760:	4632      	mov	r2, r6
    tmp = 0x2DU;
 8002762:	f88d 100f 	strb.w	r1, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002766:	4628      	mov	r0, r5
 8002768:	f10d 010f 	add.w	r1, sp, #15
 800276c:	f000 f92e 	bl	80029cc <st7735_send_data>
 8002770:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002772:	4632      	mov	r2, r6
 8002774:	f10d 010f 	add.w	r1, sp, #15
 8002778:	4628      	mov	r0, r5
    tmp = 0x2EU;
 800277a:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800277e:	f000 f925 	bl	80029cc <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002782:	4632      	mov	r2, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002784:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002786:	f10d 010f 	add.w	r1, sp, #15
 800278a:	4628      	mov	r0, r5
    tmp = 0x2EU;
 800278c:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002790:	f000 f91c 	bl	80029cc <st7735_send_data>
    tmp = 0x37U;
 8002794:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002798:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800279a:	f10d 010f 	add.w	r1, sp, #15
    tmp = 0x37U;
 800279e:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027a2:	4628      	mov	r0, r5
 80027a4:	4632      	mov	r2, r6
 80027a6:	f000 f911 	bl	80029cc <st7735_send_data>
    tmp = 0x3FU;
 80027aa:	233f      	movs	r3, #63	@ 0x3f
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ac:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ae:	4632      	mov	r2, r6
 80027b0:	f10d 010f 	add.w	r1, sp, #15
 80027b4:	4628      	mov	r0, r5
    tmp = 0x3FU;
 80027b6:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ba:	f000 f907 	bl	80029cc <st7735_send_data>
 80027be:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027c0:	4632      	mov	r2, r6
 80027c2:	f10d 010f 	add.w	r1, sp, #15
 80027c6:	4628      	mov	r0, r5
    tmp = 0x00U;
 80027c8:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027cc:	f000 f8fe 	bl	80029cc <st7735_send_data>
 80027d0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027d2:	4632      	mov	r2, r6
 80027d4:	f10d 010f 	add.w	r1, sp, #15
 80027d8:	4628      	mov	r0, r5
    tmp = 0x00U;
 80027da:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027de:	f000 f8f5 	bl	80029cc <st7735_send_data>
    tmp = 0x02U;
 80027e2:	f04f 0302 	mov.w	r3, #2
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027e6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027e8:	4632      	mov	r2, r6
 80027ea:	f10d 010f 	add.w	r1, sp, #15
 80027ee:	4628      	mov	r0, r5
    tmp = 0x02U;
 80027f0:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027f4:	f000 f8ea 	bl	80029cc <st7735_send_data>
 80027f8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027fa:	4632      	mov	r2, r6
 80027fc:	f10d 010f 	add.w	r1, sp, #15
 8002800:	4628      	mov	r0, r5
    tmp = 0x10U;
 8002802:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002806:	f000 f8e1 	bl	80029cc <st7735_send_data>
 800280a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 800280c:	4633      	mov	r3, r6
 800280e:	f10d 020f 	add.w	r2, sp, #15
 8002812:	2113      	movs	r1, #19
 8002814:	4628      	mov	r0, r5
    tmp  = 0x00U;
 8002816:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 800281a:	f000 f8d0 	bl	80029be <st7735_write_reg>
 800281e:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8002820:	4633      	mov	r3, r6
 8002822:	f10d 020f 	add.w	r2, sp, #15
 8002826:	4641      	mov	r1, r8
 8002828:	4628      	mov	r0, r5
 800282a:	f000 f8c8 	bl	80029be <st7735_write_reg>
 800282e:	4404      	add	r4, r0
    ret += ST7735_SetOrientation(pObj, pDriver);
 8002830:	9900      	ldr	r1, [sp, #0]
 8002832:	4638      	mov	r0, r7
 8002834:	f7ff fada 	bl	8001dec <ST7735_SetOrientation>
  if(ret != ST7735_OK)
 8002838:	42c4      	cmn	r4, r0
 800283a:	bf14      	ite	ne
 800283c:	f04f 30ff 	movne.w	r0, #4294967295
 8002840:	4648      	moveq	r0, r9
}
 8002842:	b005      	add	sp, #20
 8002844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8002848:	4643      	mov	r3, r8
 800284a:	f10d 020f 	add.w	r2, sp, #15
 800284e:	2120      	movs	r1, #32
 8002850:	e67c      	b.n	800254c <ST7735_Init+0x268>
    ret = ST7735_ERROR;
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002856:	e7f4      	b.n	8002842 <ST7735_Init+0x55e>

08002858 <ST7735_DisplayOff>:
{
 8002858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tmp = 0;
 800285a:	2700      	movs	r7, #0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800285c:	f100 0520 	add.w	r5, r0, #32
{
 8002860:	4606      	mov	r6, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002862:	f10d 0207 	add.w	r2, sp, #7
 8002866:	463b      	mov	r3, r7
 8002868:	2113      	movs	r1, #19
 800286a:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 800286c:	f88d 7007 	strb.w	r7, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002870:	f000 f8a5 	bl	80029be <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8002874:	210a      	movs	r1, #10
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8002876:	4604      	mov	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8002878:	4630      	mov	r0, r6
 800287a:	f7ff fd27 	bl	80022cc <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800287e:	463b      	mov	r3, r7
 8002880:	f10d 0207 	add.w	r2, sp, #7
 8002884:	2128      	movs	r1, #40	@ 0x28
 8002886:	4628      	mov	r0, r5
 8002888:	f000 f899 	bl	80029be <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 800288c:	210a      	movs	r1, #10
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 800288e:	4404      	add	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8002890:	4630      	mov	r0, r6
 8002892:	f7ff fd1b 	bl	80022cc <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002896:	463b      	mov	r3, r7
 8002898:	f10d 0207 	add.w	r2, sp, #7
 800289c:	2136      	movs	r1, #54	@ 0x36
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 f88d 	bl	80029be <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028a4:	4a0c      	ldr	r2, [pc, #48]	@ (80028d8 <ST7735_DisplayOff+0x80>)
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <ST7735_DisplayOff+0x84>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80028a8:	4404      	add	r4, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028aa:	7b11      	ldrb	r1, [r2, #12]
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80028ac:	6892      	ldr	r2, [r2, #8]
 80028ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028b2:	791b      	ldrb	r3, [r3, #4]
 80028b4:	b909      	cbnz	r1, 80028ba <ST7735_DisplayOff+0x62>
 80028b6:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028ba:	2201      	movs	r2, #1
 80028bc:	f10d 0107 	add.w	r1, sp, #7
 80028c0:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028c2:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80028c6:	f000 f881 	bl	80029cc <st7735_send_data>
  if(ret != ST7735_OK)
 80028ca:	42c4      	cmn	r4, r0
}
 80028cc:	bf14      	ite	ne
 80028ce:	f04f 30ff 	movne.w	r0, #4294967295
 80028d2:	2000      	moveq	r0, #0
 80028d4:	b003      	add	sp, #12
 80028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d8:	24000840 	.word	0x24000840
 80028dc:	08012a08 	.word	0x08012a08

080028e0 <ST7735_DisplayOn>:
{
 80028e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tmp = 0;
 80028e2:	2700      	movs	r7, #0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80028e4:	f100 0520 	add.w	r5, r0, #32
{
 80028e8:	4606      	mov	r6, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80028ea:	f10d 0207 	add.w	r2, sp, #7
 80028ee:	463b      	mov	r3, r7
 80028f0:	2113      	movs	r1, #19
 80028f2:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 80028f4:	f88d 7007 	strb.w	r7, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80028f8:	f000 f861 	bl	80029be <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 80028fc:	210a      	movs	r1, #10
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80028fe:	4604      	mov	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8002900:	4630      	mov	r0, r6
 8002902:	f7ff fce3 	bl	80022cc <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8002906:	463b      	mov	r3, r7
 8002908:	f10d 0207 	add.w	r2, sp, #7
 800290c:	2129      	movs	r1, #41	@ 0x29
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f855 	bl	80029be <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8002914:	210a      	movs	r1, #10
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8002916:	4404      	add	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8002918:	4630      	mov	r0, r6
 800291a:	f7ff fcd7 	bl	80022cc <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800291e:	463b      	mov	r3, r7
 8002920:	f10d 0207 	add.w	r2, sp, #7
 8002924:	2136      	movs	r1, #54	@ 0x36
 8002926:	4628      	mov	r0, r5
 8002928:	f000 f849 	bl	80029be <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800292c:	4a0c      	ldr	r2, [pc, #48]	@ (8002960 <ST7735_DisplayOn+0x80>)
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <ST7735_DisplayOn+0x84>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002930:	4404      	add	r4, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002932:	7b11      	ldrb	r1, [r2, #12]
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002934:	6892      	ldr	r2, [r2, #8]
 8002936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800293a:	791b      	ldrb	r3, [r3, #4]
 800293c:	b909      	cbnz	r1, 8002942 <ST7735_DisplayOn+0x62>
 800293e:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002942:	2201      	movs	r2, #1
 8002944:	f10d 0107 	add.w	r1, sp, #7
 8002948:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800294a:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800294e:	f000 f83d 	bl	80029cc <st7735_send_data>
  if(ret != ST7735_OK)
 8002952:	42c4      	cmn	r4, r0
}
 8002954:	bf14      	ite	ne
 8002956:	f04f 30ff 	movne.w	r0, #4294967295
 800295a:	2000      	moveq	r0, #0
 800295c:	b003      	add	sp, #12
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	24000840 	.word	0x24000840
 8002964:	08012a08 	.word	0x08012a08

08002968 <ST7735_RegisterBusIO>:
  if(pObj == NULL)
 8002968:	b1d0      	cbz	r0, 80029a0 <ST7735_RegisterBusIO+0x38>
    pObj->IO.DeInit    = pIO->DeInit;
 800296a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800296c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800296e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8002970:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002972:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8002974:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002976:	68ca      	ldr	r2, [r1, #12]
 8002978:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800297a:	690a      	ldr	r2, [r1, #16]
 800297c:	6102      	str	r2, [r0, #16]
    pObj->IO.SendData  = pIO->SendData;
 800297e:	694a      	ldr	r2, [r1, #20]
 8002980:	6142      	str	r2, [r0, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8002982:	698a      	ldr	r2, [r1, #24]
 8002984:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8002986:	69ca      	ldr	r2, [r1, #28]
 8002988:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 800298a:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <ST7735_RegisterBusIO+0x40>)
 800298c:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 800298e:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <ST7735_RegisterBusIO+0x44>)
 8002990:	6202      	str	r2, [r0, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8002992:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <ST7735_RegisterBusIO+0x48>)
 8002994:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8002996:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <ST7735_RegisterBusIO+0x4c>)
    pObj->Ctx.handle    = pObj;
 8002998:	e9c0 200b 	strd	r2, r0, [r0, #44]	@ 0x2c
    if(pObj->IO.Init != NULL)
 800299c:	b103      	cbz	r3, 80029a0 <ST7735_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 800299e:	4718      	bx	r3
}
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	08001c75 	.word	0x08001c75
 80029ac:	08001c7f 	.word	0x08001c7f
 80029b0:	08001c93 	.word	0x08001c93
 80029b4:	08001c9d 	.word	0x08001c9d

080029b8 <st7735_read_reg>:
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80029b8:	6843      	ldr	r3, [r0, #4]
 80029ba:	6900      	ldr	r0, [r0, #16]
 80029bc:	4718      	bx	r3

080029be <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80029be:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80029c0:	6804      	ldr	r4, [r0, #0]
 80029c2:	6900      	ldr	r0, [r0, #16]
 80029c4:	46a4      	mov	ip, r4
}
 80029c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80029ca:	4760      	bx	ip

080029cc <st7735_send_data>:
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->SendData(ctx->handle, pdata, length);
 80029cc:	6883      	ldr	r3, [r0, #8]
 80029ce:	6900      	ldr	r0, [r0, #16]
 80029d0:	4718      	bx	r3

080029d2 <st7735_recv_data>:
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->RecvData(ctx->handle, pdata, length);
 80029d2:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 80029d6:	4718      	bx	r3

080029d8 <Test_Run>:
/* USER CODE END Variable Declaration */



void Test_Run(void)
{
 80029d8:	b508      	push	{r3, lr}

    LCD_LoadScreen();
 80029da:	f7ff f875 	bl	8001ac8 <LCD_LoadScreen>
//    ESP32_Test();
    GroundCommands_Test();
//    AttitudeMPC_Test();


}
 80029de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    GroundCommands_Test();
 80029e2:	f000 b801 	b.w	80029e8 <GroundCommands_Test>
	...

080029e8 <GroundCommands_Test>:
static uint32_t timdelta1,timdelta2;



void GroundCommands_Test(void)
{
 80029e8:	b583      	push	{r0, r1, r7, lr}

	Odometry_Init();
	GroundCommands_Init();
	HAL_Delay(1000);

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80029ea:	4c29      	ldr	r4, [pc, #164]	@ (8002a90 <GroundCommands_Test+0xa8>)
	Odometry_Init();
 80029ec:	f7fe f8f4 	bl	8000bd8 <Odometry_Init>
	GroundCommands_Init();
 80029f0:	f7fe f820 	bl	8000a34 <GroundCommands_Init>
	HAL_Delay(1000);
 80029f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029f8:	f000 fe40 	bl	800367c <HAL_Delay>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	4824      	ldr	r0, [pc, #144]	@ (8002a94 <GroundCommands_Test+0xac>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <GroundCommands_Test+0xb0>)
 8002a06:	4611      	mov	r1, r2
 8002a08:	9201      	str	r2, [sp, #4]
 8002a0a:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	47a8      	blx	r5
    HAL_TIM_Base_Start_IT(&htim17);
    HAL_TIM_Base_Start(&htim17);

    while (1)
    {
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8002a10:	4e22      	ldr	r6, [pc, #136]	@ (8002a9c <GroundCommands_Test+0xb4>)
    HAL_TIM_Base_Start_IT(&htim17);
 8002a12:	4823      	ldr	r0, [pc, #140]	@ (8002aa0 <GroundCommands_Test+0xb8>)
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8002a14:	4f23      	ldr	r7, [pc, #140]	@ (8002aa4 <GroundCommands_Test+0xbc>)
    HAL_TIM_Base_Start_IT(&htim17);
 8002a16:	f004 fb8b 	bl	8007130 <HAL_TIM_Base_Start_IT>
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8002a1a:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002aac <GroundCommands_Test+0xc4>
    HAL_TIM_Base_Start(&htim17);
 8002a1e:	4820      	ldr	r0, [pc, #128]	@ (8002aa0 <GroundCommands_Test+0xb8>)
 8002a20:	f004 fb4c 	bl	80070bc <HAL_TIM_Base_Start>
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8002a24:	ed96 7a03 	vldr	s14, [r6, #12]
  	  LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
 8002a28:	2510      	movs	r5, #16
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8002a2a:	edd6 6a02 	vldr	s13, [r6, #8]
 8002a2e:	4641      	mov	r1, r8
 8002a30:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a34:	481b      	ldr	r0, [pc, #108]	@ (8002aa4 <GroundCommands_Test+0xbc>)
 8002a36:	ed8d 7b00 	vstr	d7, [sp]
 8002a3a:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8002a3e:	ec53 2b17 	vmov	r2, r3, d7
 8002a42:	f006 fc97 	bl	8009374 <siprintf>
  	  LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
 8002a46:	462b      	mov	r3, r5
 8002a48:	8822      	ldrh	r2, [r4, #0]
 8002a4a:	2114      	movs	r1, #20
 8002a4c:	2004      	movs	r0, #4
 8002a4e:	9701      	str	r7, [sp, #4]
 8002a50:	9500      	str	r5, [sp, #0]
 8002a52:	f7ff f809 	bl	8001a68 <LCD_ShowString>

  	  sprintf((char *)&text, "q2=%.2f q3=%.2f                  ",curr_reference.q2_ref,curr_reference.q3_ref);
 8002a56:	ed96 7a05 	vldr	s14, [r6, #20]
 8002a5a:	edd6 6a04 	vldr	s13, [r6, #16]
 8002a5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a62:	4911      	ldr	r1, [pc, #68]	@ (8002aa8 <GroundCommands_Test+0xc0>)
 8002a64:	480f      	ldr	r0, [pc, #60]	@ (8002aa4 <GroundCommands_Test+0xbc>)
 8002a66:	ed8d 7b00 	vstr	d7, [sp]
 8002a6a:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8002a6e:	ec53 2b17 	vmov	r2, r3, d7
 8002a72:	f006 fc7f 	bl	8009374 <siprintf>
  	  LCD_ShowString(4, 35, ST7735Ctx.Width, 16, 16, text);
 8002a76:	462b      	mov	r3, r5
 8002a78:	8822      	ldrh	r2, [r4, #0]
 8002a7a:	2123      	movs	r1, #35	@ 0x23
 8002a7c:	2004      	movs	r0, #4
 8002a7e:	e9cd 5700 	strd	r5, r7, [sp]
 8002a82:	f7fe fff1 	bl	8001a68 <LCD_ShowString>

  	  HAL_Delay(50);
 8002a86:	2032      	movs	r0, #50	@ 0x32
 8002a88:	f000 fdf8 	bl	800367c <HAL_Delay>
    while (1)
 8002a8c:	e7ca      	b.n	8002a24 <GroundCommands_Test+0x3c>
 8002a8e:	bf00      	nop
 8002a90:	24000840 	.word	0x24000840
 8002a94:	24000308 	.word	0x24000308
 8002a98:	24000024 	.word	0x24000024
 8002a9c:	240008c0 	.word	0x240008c0
 8002aa0:	24000a1c 	.word	0x24000a1c
 8002aa4:	2400085c 	.word	0x2400085c
 8002aa8:	0800b9c9 	.word	0x0800b9c9
 8002aac:	0800b9a7 	.word	0x0800b9a7

08002ab0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b538      	push	{r3, r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  if (htim == &htim17)
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ab4:	4283      	cmp	r3, r0
 8002ab6:	d120      	bne.n	8002afa <HAL_TIM_PeriodElapsedCallback+0x4a>
  {

	  tick1 = HAL_GetTick();
	  Odometry_Read(&curr_odometry);
 8002ab8:	4d11      	ldr	r5, [pc, #68]	@ (8002b00 <HAL_TIM_PeriodElapsedCallback+0x50>)
	  tick1 = HAL_GetTick();
 8002aba:	f000 fdd9 	bl	8003670 <HAL_GetTick>
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_TIM_PeriodElapsedCallback+0x54>)
	  tick2 = HAL_GetTick();

	  curr_attitude.w = curr_odometry.q0;
 8002ac0:	4c11      	ldr	r4, [pc, #68]	@ (8002b08 <HAL_TIM_PeriodElapsedCallback+0x58>)
	  tick1 = HAL_GetTick();
 8002ac2:	6018      	str	r0, [r3, #0]
	  Odometry_Read(&curr_odometry);
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7fe f857 	bl	8000b78 <Odometry_Read>
	  tick2 = HAL_GetTick();
 8002aca:	f000 fdd1 	bl	8003670 <HAL_GetTick>
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ad0:	6018      	str	r0, [r3, #0]
	  curr_attitude.w = curr_odometry.q0;
 8002ad2:	692b      	ldr	r3, [r5, #16]
 8002ad4:	6023      	str	r3, [r4, #0]
	  curr_attitude.x = curr_odometry.q1;
 8002ad6:	696b      	ldr	r3, [r5, #20]
 8002ad8:	6063      	str	r3, [r4, #4]
	  curr_attitude.y = curr_odometry.q2;
 8002ada:	69ab      	ldr	r3, [r5, #24]
 8002adc:	60a3      	str	r3, [r4, #8]
	  curr_attitude.z = curr_odometry.q3;
 8002ade:	69eb      	ldr	r3, [r5, #28]
 8002ae0:	60e3      	str	r3, [r4, #12]

	  tick3 = HAL_GetTick();
 8002ae2:	f000 fdc5 	bl	8003670 <HAL_GetTick>
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_TIM_PeriodElapsedCallback+0x60>)
	  active = get_reference(&curr_attitude, &curr_reference);
 8002ae8:	490a      	ldr	r1, [pc, #40]	@ (8002b14 <HAL_TIM_PeriodElapsedCallback+0x64>)
	  tick3 = HAL_GetTick();
 8002aea:	6018      	str	r0, [r3, #0]
	  active = get_reference(&curr_attitude, &curr_reference);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7fd ffa3 	bl	8000a38 <get_reference>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  tick4 = HAL_GetTick();
 8002af6:	f000 bdbb 	b.w	8003670 <HAL_GetTick>
}
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	24000a1c 	.word	0x24000a1c
 8002b00:	240008a0 	.word	0x240008a0
 8002b04:	24000858 	.word	0x24000858
 8002b08:	24000890 	.word	0x24000890
 8002b0c:	24000854 	.word	0x24000854
 8002b10:	24000850 	.word	0x24000850
 8002b14:	240008c0 	.word	0x240008c0

08002b18 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8002b18:	b500      	push	{lr}
 8002b1a:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b1c:	221c      	movs	r2, #28
 8002b1e:	2100      	movs	r1, #0
 8002b20:	a801      	add	r0, sp, #4
 8002b22:	f006 fd21 	bl	8009568 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002b26:	4819      	ldr	r0, [pc, #100]	@ (8002b8c <MX_ADC3_Init+0x74>)
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <MX_ADC3_Init+0x78>)
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b2a:	2204      	movs	r2, #4
  hadc3.Instance = ADC3;
 8002b2c:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002b2e:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b30:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8002b32:	2201      	movs	r2, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002b34:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 8002b36:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8002b38:	7702      	strb	r2, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc3.Init.OversamplingMode = DISABLE;
 8002b3a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8002b3e:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b40:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b44:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002b48:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002b4c:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002b50:	f001 f85a 	bl	8003c08 <HAL_ADC_Init>
 8002b54:	b108      	cbz	r0, 8002b5a <MX_ADC3_Init+0x42>
  {
    Error_Handler();
 8002b56:	f000 f9d9 	bl	8002f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <MX_ADC3_Init+0x7c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b5e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b62:	480a      	ldr	r0, [pc, #40]	@ (8002b8c <MX_ADC3_Init+0x74>)
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8002b64:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b66:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  sConfig.Offset = 0;
 8002b70:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b72:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 8002b74:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002b76:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b7a:	f000 fdb1 	bl	80036e0 <HAL_ADC_ConfigChannel>
 8002b7e:	b108      	cbz	r0, 8002b84 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8002b80:	f000 f9c4 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b84:	b009      	add	sp, #36	@ 0x24
 8002b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b8a:	bf00      	nop
 8002b8c:	240008d8 	.word	0x240008d8
 8002b90:	58026000 	.word	0x58026000
 8002b94:	cb840000 	.word	0xcb840000

08002b98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	b0b2      	sub	sp, #200	@ 0xc8
 8002b9c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b9e:	22c0      	movs	r2, #192	@ 0xc0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	a802      	add	r0, sp, #8
 8002ba4:	f006 fce0 	bl	8009568 <memset>
  if(adcHandle->Instance==ADC3)
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <HAL_ADC_MspInit+0x68>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d124      	bne.n	8002bfa <HAL_ADC_MspInit+0x62>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002bb4:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2N = 40;
    PeriphClkInitStruct.PLL2.PLL2P = 2;
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002bb6:	2180      	movs	r1, #128	@ 0x80
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb8:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	2328      	movs	r3, #40	@ 0x28
 8002bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	2201      	movs	r2, #1
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002bca:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002bcc:	e9cd 3206 	strd	r3, r2, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd6:	f002 fdb9 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	b108      	cbz	r0, 8002be0 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8002bdc:	f000 f996 	bl	8002f0c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_ADC_MspInit+0x6c>)
 8002be2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002be6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002bea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002bfa:	b032      	add	sp, #200	@ 0xc8
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	bf00      	nop
 8002c00:	58026000 	.word	0x58026000
 8002c04:	58024400 	.word	0x58024400

08002c08 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002c08:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	2214      	movs	r2, #20
{
 8002c0c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002c10:	4d34      	ldr	r5, [pc, #208]	@ (8002ce4 <MX_GPIO_Init+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	eb0d 0002 	add.w	r0, sp, r2

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f006 fca6 	bl	8009568 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ce8 <MX_GPIO_Init+0xe0>)
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f642 0108 	movw	r1, #10248	@ 0x2808
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c2a:	f042 0210 	orr.w	r2, r2, #16
 8002c2e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c36:	f002 0210 	and.w	r2, r2, #16
 8002c3a:	9200      	str	r2, [sp, #0]
 8002c3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c42:	f042 0204 	orr.w	r2, r2, #4
 8002c46:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c4e:	f002 0204 	and.w	r2, r2, #4
 8002c52:	9201      	str	r2, [sp, #4]
 8002c54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c5e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c66:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002c6a:	9202      	str	r2, [sp, #8]
 8002c6c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c72:	f042 0202 	orr.w	r2, r2, #2
 8002c76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c7e:	f002 0202 	and.w	r2, r2, #2
 8002c82:	9203      	str	r2, [sp, #12]
 8002c84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002ca0:	f001 fbfc 	bl	800449c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	a905      	add	r1, sp, #20
 8002ca8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f001 fb05 	bl	80042c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002cba:	a905      	add	r1, sp, #20
 8002cbc:	480b      	ldr	r0, [pc, #44]	@ (8002cec <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cbe:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f001 fafb 	bl	80042c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8002cca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cce:	a905      	add	r1, sp, #20
 8002cd0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cdc:	f001 faf0 	bl	80042c0 <HAL_GPIO_Init>

}
 8002ce0:	b00a      	add	sp, #40	@ 0x28
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	58021000 	.word	0x58021000
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58020800 	.word	0x58020800

08002cf0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002cf0:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cf2:	4812      	ldr	r0, [pc, #72]	@ (8002d3c <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8002cf4:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <MX_I2C2_Init+0x50>)
 8002cf6:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <MX_I2C2_Init+0x54>)
 8002cf8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2201      	movs	r2, #1
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
 8002d00:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d04:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d08:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d0c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d0e:	f001 fcfe 	bl	800470e <HAL_I2C_Init>
 8002d12:	b108      	cbz	r0, 8002d18 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8002d14:	f000 f8fa 	bl	8002f0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4808      	ldr	r0, [pc, #32]	@ (8002d3c <MX_I2C2_Init+0x4c>)
 8002d1c:	f001 ff04 	bl	8004b28 <HAL_I2CEx_ConfigAnalogFilter>
 8002d20:	b108      	cbz	r0, 8002d26 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 8002d22:	f000 f8f3 	bl	8002f0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	4804      	ldr	r0, [pc, #16]	@ (8002d3c <MX_I2C2_Init+0x4c>)
 8002d2a:	f001 ff23 	bl	8004b74 <HAL_I2CEx_ConfigDigitalFilter>
 8002d2e:	b118      	cbz	r0, 8002d38 <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d34:	f000 b8ea 	b.w	8002f0c <Error_Handler>
}
 8002d38:	bd08      	pop	{r3, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2400093c 	.word	0x2400093c
 8002d40:	40005800 	.word	0x40005800
 8002d44:	00b03fdb 	.word	0x00b03fdb

08002d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	b0b9      	sub	sp, #228	@ 0xe4
 8002d4c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4e:	2214      	movs	r2, #20
 8002d50:	2100      	movs	r1, #0
 8002d52:	a803      	add	r0, sp, #12
 8002d54:	f006 fc08 	bl	8009568 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d58:	22c0      	movs	r2, #192	@ 0xc0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	a808      	add	r0, sp, #32
 8002d5e:	f006 fc03 	bl	8009568 <memset>
  if(i2cHandle->Instance==I2C2)
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <HAL_I2C_MspInit+0xa4>)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d13d      	bne.n	8002de6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d6e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d70:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d74:	f002 fcea 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8002d78:	b108      	cbz	r0, 8002d7e <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 8002d7a:	f000 f8c7 	bl	8002f0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	4c1c      	ldr	r4, [pc, #112]	@ (8002df0 <HAL_I2C_MspInit+0xa8>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d80:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2601      	movs	r6, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d84:	2504      	movs	r5, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	a903      	add	r1, sp, #12
 8002d8c:	4819      	ldr	r0, [pc, #100]	@ (8002df4 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8002d96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d9a:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002da8:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f001 fa85 	bl	80042c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002db6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	a903      	add	r1, sp, #12
 8002dbc:	480d      	ldr	r0, [pc, #52]	@ (8002df4 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dbe:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc4:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dc6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f001 fa79 	bl	80042c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8002dd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8002dda:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002de6:	b039      	add	sp, #228	@ 0xe4
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005800 	.word	0x40005800
 8002df0:	58024400 	.word	0x58024400
 8002df4:	58020400 	.word	0x58020400

08002df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfc:	224c      	movs	r2, #76	@ 0x4c
 8002dfe:	2100      	movs	r1, #0
 8002e00:	a809      	add	r0, sp, #36	@ 0x24
 8002e02:	f006 fbb1 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e06:	2220      	movs	r2, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	a801      	add	r0, sp, #4
 8002e0c:	f006 fbac 	bl	8009568 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e10:	2002      	movs	r0, #2
 8002e12:	f001 fed5 	bl	8004bc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <SystemClock_Config+0xb0>)
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002e22:	619a      	str	r2, [r3, #24]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eac <SystemClock_Config+0xb4>)
 8002e2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e30:	f041 0101 	orr.w	r1, r1, #1
 8002e34:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002e36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e38:	f002 0201 	and.w	r2, r2, #1
 8002e3c:	9200      	str	r2, [sp, #0]
 8002e3e:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	0494      	lsls	r4, r2, #18
 8002e44:	d5fc      	bpl.n	8002e40 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e4a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002e50:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e52:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e56:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e58:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e5c:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e60:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002e62:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002e64:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e68:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002e6a:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002e6c:	e9cd 4319 	strd	r4, r3, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e70:	f001 feca 	bl	8004c08 <HAL_RCC_OscConfig>
 8002e74:	b108      	cbz	r0, 8002e7a <SystemClock_Config+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e76:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	223f      	movs	r2, #63	@ 0x3f
 8002e7c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e7e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e80:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002e84:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002e8a:	e9cd 0403 	strd	r0, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e8e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002e92:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002e96:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e9a:	f002 f9ff 	bl	800529c <HAL_RCC_ClockConfig>
 8002e9e:	b108      	cbz	r0, 8002ea4 <SystemClock_Config+0xac>
 8002ea0:	b672      	cpsid	i
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <SystemClock_Config+0xaa>
}
 8002ea4:	b01c      	add	sp, #112	@ 0x70
 8002ea6:	bd10      	pop	{r4, pc}
 8002ea8:	58024800 	.word	0x58024800
 8002eac:	58000400 	.word	0x58000400

08002eb0 <main>:
{
 8002eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4668      	mov	r0, sp
 8002eb8:	f006 fb56 	bl	8009568 <memset>
  HAL_MPU_Disable();
 8002ebc:	f001 f812 	bl	8003ee4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002ec0:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002ec2:	2200      	movs	r2, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ec4:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002ec6:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002eca:	f248 731f 	movw	r3, #34591	@ 0x871f
 8002ece:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ed2:	f240 1301 	movw	r3, #257	@ 0x101
 8002ed6:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ed8:	f001 f822 	bl	8003f20 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002edc:	2004      	movs	r0, #4
 8002ede:	f001 f80f 	bl	8003f00 <HAL_MPU_Enable>
  HAL_Init();
 8002ee2:	f000 fb8b 	bl	80035fc <HAL_Init>
  SystemClock_Config();
 8002ee6:	f7ff ff87 	bl	8002df8 <SystemClock_Config>
  MX_GPIO_Init();
 8002eea:	f7ff fe8d 	bl	8002c08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002eee:	f000 fa51 	bl	8003394 <MX_TIM1_Init>
  MX_SPI4_Init();
 8002ef2:	f000 f80d 	bl	8002f10 <MX_SPI4_Init>
  MX_ADC3_Init();
 8002ef6:	f7ff fe0f 	bl	8002b18 <MX_ADC3_Init>
  MX_TIM17_Init();
 8002efa:	f000 f997 	bl	800322c <MX_TIM17_Init>
  MX_I2C2_Init();
 8002efe:	f7ff fef7 	bl	8002cf0 <MX_I2C2_Init>
  MX_UART5_Init();
 8002f02:	f000 faa5 	bl	8003450 <MX_UART5_Init>
  Test_Run();
 8002f06:	f7ff fd67 	bl	80029d8 <Test_Run>
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <main+0x5a>

08002f0c <Error_Handler>:
 8002f0c:	b672      	cpsid	i
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <Error_Handler+0x2>

08002f10 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002f10:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002f12:	4816      	ldr	r0, [pc, #88]	@ (8002f6c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f1a:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f1e:	f04f 6c80 	mov.w	ip, #67108864	@ 0x4000000
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f22:	e9c0 2300 	strd	r2, r3, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f26:	2307      	movs	r3, #7
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f2c:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f30:	e9c0 c206 	strd	ip, r2, [r0, #24]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f34:	2300      	movs	r3, #0
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f3e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8002f42:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f46:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f4a:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f4e:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f52:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f56:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002f5a:	f003 fcab 	bl	80068b4 <HAL_SPI_Init>
 8002f5e:	b118      	cbz	r0, 8002f68 <MX_SPI4_Init+0x58>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002f60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f64:	f7ff bfd2 	b.w	8002f0c <Error_Handler>
}
 8002f68:	bd08      	pop	{r3, pc}
 8002f6a:	bf00      	nop
 8002f6c:	24000990 	.word	0x24000990
 8002f70:	40013400 	.word	0x40013400

08002f74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	b0b8      	sub	sp, #224	@ 0xe0
 8002f78:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	2214      	movs	r2, #20
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	a803      	add	r0, sp, #12
 8002f80:	f006 faf2 	bl	8009568 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f84:	22c0      	movs	r2, #192	@ 0xc0
 8002f86:	2100      	movs	r1, #0
 8002f88:	a808      	add	r0, sp, #32
 8002f8a:	f006 faed 	bl	8009568 <memset>
  if(spiHandle->Instance==SPI4)
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_SPI_MspInit+0x8c>)
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d131      	bne.n	8002ffa <HAL_SPI_MspInit+0x86>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002f96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f9a:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa2:	f002 fbd3 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8002fa6:	b108      	cbz	r0, 8002fac <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8002fa8:	f7ff ffb0 	bl	8002f0c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002fac:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fae:	a903      	add	r1, sp, #12
 8002fb0:	4815      	ldr	r0, [pc, #84]	@ (8003008 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002fb2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002fb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002fbe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002fc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fc6:	9201      	str	r2, [sp, #4]
 8002fc8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002fce:	f042 0210 	orr.w	r2, r2, #16
 8002fd2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	9302      	str	r3, [sp, #8]
 8002fe4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff6:	f001 f963 	bl	80042c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002ffa:	b038      	add	sp, #224	@ 0xe0
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	bf00      	nop
 8003000:	40013400 	.word	0x40013400
 8003004:	58024400 	.word	0x58024400
 8003008:	58021000 	.word	0x58021000

0800300c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300c:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_MspInit+0x44>)
{
 800300e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003010:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8003014:	f042 0202 	orr.w	r2, r2, #2
 8003018:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800301c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8003020:	f002 0202 	and.w	r2, r2, #2
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	9a00      	ldr	r2, [sp, #0]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003028:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800302c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003030:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8003034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9b01      	ldr	r3, [sp, #4]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003040:	f000 fb3e 	bl	80036c0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8003044:	2002      	movs	r0, #2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003046:	b003      	add	sp, #12
 8003048:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800304c:	f000 bb2e 	b.w	80036ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8003050:	58024400 	.word	0x58024400

08003054 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003054:	e7fe      	b.n	8003054 <NMI_Handler>

08003056 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003056:	e7fe      	b.n	8003056 <HardFault_Handler>

08003058 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler>

0800305a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <BusFault_Handler>

0800305c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <UsageFault_Handler>

0800305e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305e:	4770      	bx	lr

08003060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003060:	4770      	bx	lr

08003062 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003062:	4770      	bx	lr

08003064 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003064:	f000 baf8 	b.w	8003658 <HAL_IncTick>

08003068 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003068:	4801      	ldr	r0, [pc, #4]	@ (8003070 <UART5_IRQHandler+0x8>)
 800306a:	f004 bc4d 	b.w	8007908 <HAL_UART_IRQHandler>
 800306e:	bf00      	nop
 8003070:	24000ab4 	.word	0x24000ab4

08003074 <TIM17_IRQHandler>:
void TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003074:	4801      	ldr	r0, [pc, #4]	@ (800307c <TIM17_IRQHandler+0x8>)
 8003076:	f004 b89e 	b.w	80071b6 <HAL_TIM_IRQHandler>
 800307a:	bf00      	nop
 800307c:	24000a1c 	.word	0x24000a1c

08003080 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003080:	2001      	movs	r0, #1
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003086:	f006 fac1 	bl	800960c <__errno>
 800308a:	2316      	movs	r3, #22
 800308c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800308e:	f04f 30ff 	mov.w	r0, #4294967295
 8003092:	bd08      	pop	{r3, pc}

08003094 <_exit>:

void _exit (int status)
{
 8003094:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003096:	f006 fab9 	bl	800960c <__errno>
 800309a:	2316      	movs	r3, #22
 800309c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800309e:	e7fe      	b.n	800309e <_exit+0xa>

080030a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	460d      	mov	r5, r1
 80030a4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	460e      	mov	r6, r1
 80030a8:	1b73      	subs	r3, r6, r5
 80030aa:	429c      	cmp	r4, r3
 80030ac:	dc01      	bgt.n	80030b2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80030ae:	4620      	mov	r0, r4
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80030b2:	f3af 8000 	nop.w
 80030b6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ba:	e7f5      	b.n	80030a8 <_read+0x8>

080030bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	460d      	mov	r5, r1
 80030c0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c2:	460e      	mov	r6, r1
 80030c4:	1b73      	subs	r3, r6, r5
 80030c6:	429c      	cmp	r4, r3
 80030c8:	dc01      	bgt.n	80030ce <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80030ca:	4620      	mov	r0, r4
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80030ce:	f816 0b01 	ldrb.w	r0, [r6], #1
 80030d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d6:	e7f5      	b.n	80030c4 <_write+0x8>

080030d8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	4770      	bx	lr

080030de <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80030de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80030e2:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80030e4:	604b      	str	r3, [r1, #4]
}
 80030e6:	4770      	bx	lr

080030e8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80030e8:	2001      	movs	r0, #1
 80030ea:	4770      	bx	lr

080030ec <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	4770      	bx	lr

080030f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <_sbrk+0x30>)
{
 80030f2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80030f4:	6811      	ldr	r1, [r2, #0]
{
 80030f6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80030f8:	b909      	cbnz	r1, 80030fe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80030fa:	490a      	ldr	r1, [pc, #40]	@ (8003124 <_sbrk+0x34>)
 80030fc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030fe:	6810      	ldr	r0, [r2, #0]
 8003100:	4909      	ldr	r1, [pc, #36]	@ (8003128 <_sbrk+0x38>)
 8003102:	4c0a      	ldr	r4, [pc, #40]	@ (800312c <_sbrk+0x3c>)
 8003104:	4403      	add	r3, r0
 8003106:	1b09      	subs	r1, r1, r4
 8003108:	428b      	cmp	r3, r1
 800310a:	d906      	bls.n	800311a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800310c:	f006 fa7e 	bl	800960c <__errno>
 8003110:	230c      	movs	r3, #12
 8003112:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003114:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003118:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800311a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800311c:	e7fc      	b.n	8003118 <_sbrk+0x28>
 800311e:	bf00      	nop
 8003120:	24000a18 	.word	0x24000a18
 8003124:	24000c98 	.word	0x24000c98
 8003128:	24080000 	.word	0x24080000
 800312c:	00000400 	.word	0x00000400

08003130 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003130:	4a2e      	ldr	r2, [pc, #184]	@ (80031ec <SystemInit+0xbc>)
 8003132:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003136:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800313a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800313e:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <SystemInit+0xc0>)
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	2b06      	cmp	r3, #6
 8003148:	d805      	bhi.n	8003156 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800314a:	6813      	ldr	r3, [r2, #0]
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003156:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <SystemInit+0xc4>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003164:	4a24      	ldr	r2, [pc, #144]	@ (80031f8 <SystemInit+0xc8>)
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800316a:	4921      	ldr	r1, [pc, #132]	@ (80031f0 <SystemInit+0xc0>)
  RCC->CR &= 0xEAF6ED7FU;
 800316c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800316e:	680a      	ldr	r2, [r1, #0]
 8003170:	0710      	lsls	r0, r2, #28
 8003172:	d505      	bpl.n	8003180 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003174:	680a      	ldr	r2, [r1, #0]
 8003176:	f022 020f 	bic.w	r2, r2, #15
 800317a:	f042 0207 	orr.w	r2, r2, #7
 800317e:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003180:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003182:	491e      	ldr	r1, [pc, #120]	@ (80031fc <SystemInit+0xcc>)
  RCC->D1CFGR = 0x00000000;
 8003184:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003186:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003188:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800318a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800318c:	491c      	ldr	r1, [pc, #112]	@ (8003200 <SystemInit+0xd0>)
 800318e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003190:	491c      	ldr	r1, [pc, #112]	@ (8003204 <SystemInit+0xd4>)
 8003192:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003196:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003198:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800319a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80031a4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031a6:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80031a8:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <SystemInit+0xd8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f36f 030f 	bfc	r3, #0, #16
 80031b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b4:	d203      	bcs.n	80031be <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <SystemInit+0xdc>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80031be:	4b0d      	ldr	r3, [pc, #52]	@ (80031f4 <SystemInit+0xc4>)
 80031c0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80031c4:	04d2      	lsls	r2, r2, #19
 80031c6:	d40f      	bmi.n	80031e8 <SystemInit+0xb8>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80031c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80031cc:	f243 01d2 	movw	r1, #12498	@ 0x30d2
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80031d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031d4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80031d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003210 <SystemInit+0xe0>)
 80031da:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80031dc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80031e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031e4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	52002000 	.word	0x52002000
 80031f4:	58024400 	.word	0x58024400
 80031f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80031fc:	02020200 	.word	0x02020200
 8003200:	01ff0000 	.word	0x01ff0000
 8003204:	01010280 	.word	0x01010280
 8003208:	5c001000 	.word	0x5c001000
 800320c:	51008000 	.word	0x51008000
 8003210:	52004000 	.word	0x52004000

08003214 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <ExitRun0Mode+0x14>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	f042 0202 	orr.w	r2, r2, #2
 800321c:	60da      	str	r2, [r3, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	0492      	lsls	r2, r2, #18
 8003222:	d5fc      	bpl.n	800321e <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58024800 	.word	0x58024800

0800322c <MX_TIM17_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800322c:	b510      	push	{r4, lr}
 800322e:	b092      	sub	sp, #72	@ 0x48

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003230:	221c      	movs	r2, #28
 8003232:	2100      	movs	r1, #0
 8003234:	4668      	mov	r0, sp
 8003236:	f006 f997 	bl	8009568 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800323a:	222c      	movs	r2, #44	@ 0x2c
 800323c:	2100      	movs	r1, #0
 800323e:	a807      	add	r0, sp, #28
 8003240:	f006 f992 	bl	8009568 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003244:	481d      	ldr	r0, [pc, #116]	@ (80032bc <MX_TIM17_Init+0x90>)
  htim17.Init.Prescaler = 239;
 8003246:	4a1e      	ldr	r2, [pc, #120]	@ (80032c0 <MX_TIM17_Init+0x94>)
 8003248:	23ef      	movs	r3, #239	@ 0xef
 800324a:	e9c0 2300 	strd	r2, r3, [r0]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 9999;
 800324e:	2300      	movs	r3, #0
 8003250:	f242 720f 	movw	r2, #9999	@ 0x270f
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
 8003254:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim17.Init.Period = 9999;
 8003258:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800325e:	f004 f89f 	bl	80073a0 <HAL_TIM_Base_Init>
 8003262:	b108      	cbz	r0, 8003268 <MX_TIM17_Init+0x3c>
  {
    Error_Handler();
 8003264:	f7ff fe52 	bl	8002f0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003268:	4814      	ldr	r0, [pc, #80]	@ (80032bc <MX_TIM17_Init+0x90>)
 800326a:	f004 f8c9 	bl	8007400 <HAL_TIM_OC_Init>
 800326e:	b108      	cbz	r0, 8003274 <MX_TIM17_Init+0x48>
  {
    Error_Handler();
 8003270:	f7ff fe4c 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003274:	2400      	movs	r4, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003276:	4669      	mov	r1, sp
 8003278:	4810      	ldr	r0, [pc, #64]	@ (80032bc <MX_TIM17_Init+0x90>)
 800327a:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800327c:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 800327e:	e9cd 4400 	strd	r4, r4, [sp]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003282:	e9cd 4402 	strd	r4, r4, [sp, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003286:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800328a:	f004 f959 	bl	8007540 <HAL_TIM_OC_ConfigChannel>
 800328e:	b108      	cbz	r0, 8003294 <MX_TIM17_Init+0x68>
  {
    Error_Handler();
 8003290:	f7ff fe3c 	bl	8002f0c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003298:	a907      	add	r1, sp, #28
 800329a:	4808      	ldr	r0, [pc, #32]	@ (80032bc <MX_TIM17_Init+0x90>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800329c:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800329e:	9411      	str	r4, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80032ac:	f004 fab0 	bl	8007810 <HAL_TIMEx_ConfigBreakDeadTime>
 80032b0:	b108      	cbz	r0, 80032b6 <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 80032b2:	f7ff fe2b 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80032b6:	b012      	add	sp, #72	@ 0x48
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	24000a1c 	.word	0x24000a1c
 80032c0:	40014800 	.word	0x40014800

080032c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80032c4:	6802      	ldr	r2, [r0, #0]
{
 80032c6:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 80032c8:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <HAL_TIM_PWM_MspInit+0x28>)
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10c      	bne.n	80032e8 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_TIM_PWM_MspInit+0x2c>)
 80032d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80032dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80032e8:	b002      	add	sp, #8
 80032ea:	4770      	bx	lr
 80032ec:	40010000 	.word	0x40010000
 80032f0:	58024400 	.word	0x58024400

080032f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM17)
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <HAL_TIM_Base_MspInit+0x40>)
{
 80032f6:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM17)
 80032f8:	6802      	ldr	r2, [r0, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d117      	bne.n	800332e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_TIM_Base_MspInit+0x44>)

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003300:	2076      	movs	r0, #118	@ 0x76
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003302:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003306:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800330a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003314:	4611      	mov	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800331e:	f000 fd8d 	bl	8003e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003322:	2076      	movs	r0, #118	@ 0x76
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003324:	b003      	add	sp, #12
 8003326:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800332a:	f000 bdb9 	b.w	8003ea0 <HAL_NVIC_EnableIRQ>
}
 800332e:	b003      	add	sp, #12
 8003330:	f85d fb04 	ldr.w	pc, [sp], #4
 8003334:	40014800 	.word	0x40014800
 8003338:	58024400 	.word	0x58024400

0800333c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003342:	2214      	movs	r2, #20
 8003344:	2100      	movs	r1, #0
 8003346:	a801      	add	r0, sp, #4
 8003348:	f006 f90e 	bl	8009568 <memset>
  if(timHandle->Instance==TIM1)
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <HAL_TIM_MspPostInit+0x4c>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d117      	bne.n	8003384 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003356:	a901      	add	r1, sp, #4
 8003358:	480d      	ldr	r0, [pc, #52]	@ (8003390 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800335a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800335e:	f042 0210 	orr.w	r2, r2, #16
 8003362:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800336a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800337c:	2301      	movs	r3, #1
 800337e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003380:	f000 ff9e 	bl	80042c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003384:	b006      	add	sp, #24
 8003386:	bd10      	pop	{r4, pc}
 8003388:	40010000 	.word	0x40010000
 800338c:	58024400 	.word	0x58024400
 8003390:	58021000 	.word	0x58021000

08003394 <MX_TIM1_Init>:
{
 8003394:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003396:	2400      	movs	r4, #0
{
 8003398:	b096      	sub	sp, #88	@ 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 800339a:	221c      	movs	r2, #28
 800339c:	4621      	mov	r1, r4
 800339e:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a0:	9403      	str	r4, [sp, #12]
 80033a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033a6:	f006 f8df 	bl	8009568 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033aa:	222c      	movs	r2, #44	@ 0x2c
 80033ac:	4621      	mov	r1, r4
 80033ae:	eb0d 0002 	add.w	r0, sp, r2
 80033b2:	f006 f8d9 	bl	8009568 <memset>
  htim1.Instance = TIM1;
 80033b6:	4824      	ldr	r0, [pc, #144]	@ (8003448 <MX_TIM1_Init+0xb4>)
  htim1.Init.Prescaler = 12-1;
 80033b8:	230b      	movs	r3, #11
 80033ba:	4a24      	ldr	r2, [pc, #144]	@ (800344c <MX_TIM1_Init+0xb8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033bc:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 12-1;
 80033be:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 10000-1;
 80033c2:	f242 730f 	movw	r3, #9999	@ 0x270f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c6:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ca:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033ce:	f004 f847 	bl	8007460 <HAL_TIM_PWM_Init>
 80033d2:	b108      	cbz	r0, 80033d8 <MX_TIM1_Init+0x44>
    Error_Handler();
 80033d4:	f7ff fd9a 	bl	8002f0c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033d8:	a901      	add	r1, sp, #4
 80033da:	481b      	ldr	r0, [pc, #108]	@ (8003448 <MX_TIM1_Init+0xb4>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033dc:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033de:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033e2:	f004 f9cb 	bl	800777c <HAL_TIMEx_MasterConfigSynchronization>
 80033e6:	b108      	cbz	r0, 80033ec <MX_TIM1_Init+0x58>
    Error_Handler();
 80033e8:	f7ff fd90 	bl	8002f0c <Error_Handler>
  sConfigOC.Pulse = 0;
 80033ec:	2400      	movs	r4, #0
 80033ee:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033f0:	2204      	movs	r2, #4
 80033f2:	a904      	add	r1, sp, #16
 80033f4:	4814      	ldr	r0, [pc, #80]	@ (8003448 <MX_TIM1_Init+0xb4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f6:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 80033f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80033fc:	2308      	movs	r3, #8
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033fe:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003402:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003406:	f004 f8cd 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 800340a:	b108      	cbz	r0, 8003410 <MX_TIM1_Init+0x7c>
    Error_Handler();
 800340c:	f7ff fd7e 	bl	8002f0c <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003414:	a90b      	add	r1, sp, #44	@ 0x2c
 8003416:	480c      	ldr	r0, [pc, #48]	@ (8003448 <MX_TIM1_Init+0xb4>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003418:	940f      	str	r4, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800341a:	9412      	str	r4, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800341c:	9415      	str	r4, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 800341e:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003426:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 800342a:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 800342e:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003432:	f004 f9ed 	bl	8007810 <HAL_TIMEx_ConfigBreakDeadTime>
 8003436:	b108      	cbz	r0, 800343c <MX_TIM1_Init+0xa8>
    Error_Handler();
 8003438:	f7ff fd68 	bl	8002f0c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800343c:	4802      	ldr	r0, [pc, #8]	@ (8003448 <MX_TIM1_Init+0xb4>)
 800343e:	f7ff ff7d 	bl	800333c <HAL_TIM_MspPostInit>
}
 8003442:	b016      	add	sp, #88	@ 0x58
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop
 8003448:	24000a68 	.word	0x24000a68
 800344c:	40010000 	.word	0x40010000

08003450 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003450:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003452:	4816      	ldr	r0, [pc, #88]	@ (80034ac <MX_UART5_Init+0x5c>)
  huart5.Init.BaudRate = 115200;
 8003454:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <MX_UART5_Init+0x60>)
 800345a:	e9c0 2300 	strd	r2, r3, [r0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	2300      	movs	r3, #0
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003460:	220c      	movs	r2, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003462:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003466:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003468:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800346c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003470:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003474:	f005 f8cc 	bl	8008610 <HAL_UART_Init>
 8003478:	b108      	cbz	r0, 800347e <MX_UART5_Init+0x2e>
  {
    Error_Handler();
 800347a:	f7ff fd47 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800347e:	2100      	movs	r1, #0
 8003480:	480a      	ldr	r0, [pc, #40]	@ (80034ac <MX_UART5_Init+0x5c>)
 8003482:	f005 f9e1 	bl	8008848 <HAL_UARTEx_SetTxFifoThreshold>
 8003486:	b108      	cbz	r0, 800348c <MX_UART5_Init+0x3c>
  {
    Error_Handler();
 8003488:	f7ff fd40 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800348c:	2100      	movs	r1, #0
 800348e:	4807      	ldr	r0, [pc, #28]	@ (80034ac <MX_UART5_Init+0x5c>)
 8003490:	f005 f9fa 	bl	8008888 <HAL_UARTEx_SetRxFifoThreshold>
 8003494:	b108      	cbz	r0, 800349a <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8003496:	f7ff fd39 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800349a:	4804      	ldr	r0, [pc, #16]	@ (80034ac <MX_UART5_Init+0x5c>)
 800349c:	f005 f9b9 	bl	8008812 <HAL_UARTEx_DisableFifoMode>
 80034a0:	b118      	cbz	r0, 80034aa <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80034a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80034a6:	f7ff bd31 	b.w	8002f0c <Error_Handler>
}
 80034aa:	bd08      	pop	{r3, pc}
 80034ac:	24000ab4 	.word	0x24000ab4
 80034b0:	40005000 	.word	0x40005000

080034b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	b0b8      	sub	sp, #224	@ 0xe0
 80034b8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ba:	2214      	movs	r2, #20
 80034bc:	2100      	movs	r1, #0
 80034be:	a803      	add	r0, sp, #12
 80034c0:	f006 f852 	bl	8009568 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c4:	22c0      	movs	r2, #192	@ 0xc0
 80034c6:	2100      	movs	r1, #0
 80034c8:	a808      	add	r0, sp, #32
 80034ca:	f006 f84d 	bl	8009568 <memset>
  if(uartHandle->Instance==UART5)
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <HAL_UART_MspInit+0x98>)
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d138      	bne.n	8003548 <HAL_UART_MspInit+0x94>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80034d6:	2202      	movs	r2, #2
 80034d8:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034da:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80034dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e0:	f002 f934 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 80034e4:	b108      	cbz	r0, 80034ea <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 80034e6:	f7ff fd11 	bl	8002f0c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80034ea:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_UART_MspInit+0x9c>)
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ee:	a903      	add	r1, sp, #12
 80034f0:	4818      	ldr	r0, [pc, #96]	@ (8003554 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80034f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80034f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80034fa:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80034fe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003502:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003506:	9201      	str	r2, [sp, #4]
 8003508:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800350e:	f042 0202 	orr.w	r2, r2, #2
 8003512:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800352c:	230e      	movs	r3, #14
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003532:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003534:	f000 fec4 	bl	80042c0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003538:	2035      	movs	r0, #53	@ 0x35
 800353a:	4622      	mov	r2, r4
 800353c:	4621      	mov	r1, r4
 800353e:	f000 fc7d 	bl	8003e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003542:	2035      	movs	r0, #53	@ 0x35
 8003544:	f000 fcac 	bl	8003ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003548:	b038      	add	sp, #224	@ 0xe0
 800354a:	bd10      	pop	{r4, pc}
 800354c:	40005000 	.word	0x40005000
 8003550:	58024400 	.word	0x58024400
 8003554:	58020400 	.word	0x58020400

08003558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003558:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003594 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800355c:	f7ff fe5a 	bl	8003214 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003560:	f7ff fde6 	bl	8003130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003564:	480c      	ldr	r0, [pc, #48]	@ (8003598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003566:	490d      	ldr	r1, [pc, #52]	@ (800359c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003568:	4a0d      	ldr	r2, [pc, #52]	@ (80035a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800357c:	4c0a      	ldr	r4, [pc, #40]	@ (80035a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800358a:	f006 f845 	bl	8009618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358e:	f7ff fc8f 	bl	8002eb0 <main>
  bx  lr
 8003592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003594:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003598:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800359c:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 80035a0:	08012db8 	.word	0x08012db8
  ldr r2, =_sbss
 80035a4:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 80035a8:	24000c98 	.word	0x24000c98

080035ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ac:	e7fe      	b.n	80035ac <ADC3_IRQHandler>
	...

080035b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_InitTick+0x40>)
{
 80035b4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	b90a      	cbnz	r2, 80035be <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80035bc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c6:	4a0b      	ldr	r2, [pc, #44]	@ (80035f4 <HAL_InitTick+0x44>)
 80035c8:	6810      	ldr	r0, [r2, #0]
 80035ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ce:	f000 fc75 	bl	8003ebc <HAL_SYSTICK_Config>
 80035d2:	4604      	mov	r4, r0
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d8:	2d0f      	cmp	r5, #15
 80035da:	d8ee      	bhi.n	80035ba <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035dc:	4602      	mov	r2, r0
 80035de:	4629      	mov	r1, r5
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	f000 fc2a 	bl	8003e3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_InitTick+0x48>)
 80035ea:	4620      	mov	r0, r4
 80035ec:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 80035ee:	e7e5      	b.n	80035bc <HAL_InitTick+0xc>
 80035f0:	24000078 	.word	0x24000078
 80035f4:	24000074 	.word	0x24000074
 80035f8:	2400007c 	.word	0x2400007c

080035fc <HAL_Init>:
{
 80035fc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fe:	2003      	movs	r0, #3
 8003600:	f000 fc0a 	bl	8003e18 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003604:	f001 fda8 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8003608:	490f      	ldr	r1, [pc, #60]	@ (8003648 <HAL_Init+0x4c>)
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <HAL_Init+0x50>)
 800360c:	698b      	ldr	r3, [r1, #24]
 800360e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800361a:	698b      	ldr	r3, [r1, #24]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	4a0b      	ldr	r2, [pc, #44]	@ (8003650 <HAL_Init+0x54>)
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa20 f303 	lsr.w	r3, r0, r3
 800362c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800362e:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <HAL_Init+0x58>)
 8003630:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003632:	200f      	movs	r0, #15
 8003634:	f7ff ffbc 	bl	80035b0 <HAL_InitTick>
 8003638:	4604      	mov	r4, r0
 800363a:	b918      	cbnz	r0, 8003644 <HAL_Init+0x48>
  HAL_MspInit();
 800363c:	f7ff fce6 	bl	800300c <HAL_MspInit>
}
 8003640:	4620      	mov	r0, r4
 8003642:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003644:	2401      	movs	r4, #1
 8003646:	e7fb      	b.n	8003640 <HAL_Init+0x44>
 8003648:	58024400 	.word	0x58024400
 800364c:	08012a28 	.word	0x08012a28
 8003650:	24000070 	.word	0x24000070
 8003654:	24000074 	.word	0x24000074

08003658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003658:	4a03      	ldr	r2, [pc, #12]	@ (8003668 <HAL_IncTick+0x10>)
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <HAL_IncTick+0x14>)
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	440b      	add	r3, r1
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	24000b48 	.word	0x24000b48
 800366c:	24000078 	.word	0x24000078

08003670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003670:	4b01      	ldr	r3, [pc, #4]	@ (8003678 <HAL_GetTick+0x8>)
 8003672:	6818      	ldr	r0, [r3, #0]
}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	24000b48 	.word	0x24000b48

0800367c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fff6 	bl	8003670 <HAL_GetTick>
 8003684:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003686:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003688:	bf1e      	ittt	ne
 800368a:	4b04      	ldrne	r3, [pc, #16]	@ (800369c <HAL_Delay+0x20>)
 800368c:	781b      	ldrbne	r3, [r3, #0]
 800368e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	1b43      	subs	r3, r0, r5
 8003696:	42a3      	cmp	r3, r4
 8003698:	d3fa      	bcc.n	8003690 <HAL_Delay+0x14>
  {
  }
}
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	24000078 	.word	0x24000078

080036a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80036a0:	4b01      	ldr	r3, [pc, #4]	@ (80036a8 <HAL_GetREVID+0x8>)
 80036a2:	6818      	ldr	r0, [r3, #0]
}
 80036a4:	0c00      	lsrs	r0, r0, #16
 80036a6:	4770      	bx	lr
 80036a8:	5c001000 	.word	0x5c001000

080036ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80036ac:	4a03      	ldr	r2, [pc, #12]	@ (80036bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f023 0302 	bic.w	r3, r3, #2
 80036b4:	4303      	orrs	r3, r0
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	58003c00 	.word	0x58003c00

080036c0 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80036c0:	4a02      	ldr	r2, [pc, #8]	@ (80036cc <HAL_SYSCFG_DisableVREFBUF+0xc>)
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	4770      	bx	lr
 80036cc:	58003c00 	.word	0x58003c00

080036d0 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036d0:	6880      	ldr	r0, [r0, #8]
}
 80036d2:	f000 0001 	and.w	r0, r0, #1
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036d8:	6880      	ldr	r0, [r0, #8]
}
 80036da:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80036de:	4770      	bx	lr

080036e0 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036e0:	2300      	movs	r3, #0
{
 80036e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80036e4:	9301      	str	r3, [sp, #4]
{
 80036e6:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	f000 81ec 	beq.w	8003aca <HAL_ADC_ConfigChannel+0x3ea>
 80036f2:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80036f6:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ffec 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 8003700:	2800      	cmp	r0, #0
 8003702:	f040 8180 	bne.w	8003a06 <HAL_ADC_ConfigChannel+0x326>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003706:	680a      	ldr	r2, [r1, #0]
 8003708:	2a00      	cmp	r2, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800370a:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800370e:	db07      	blt.n	8003720 <HAL_ADC_ConfigChannel+0x40>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003710:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8003714:	2e00      	cmp	r6, #0
 8003716:	d176      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x126>
 8003718:	4084      	lsls	r4, r0
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	4322      	orrs	r2, r4
 800371e:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003720:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003722:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 8003726:	271f      	movs	r7, #31
 8003728:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800372c:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 800372e:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003732:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003736:	40a7      	lsls	r7, r4
 8003738:	40a0      	lsls	r0, r4
 800373a:	f85c 2006 	ldr.w	r2, [ip, r6]
 800373e:	ea22 0207 	bic.w	r2, r2, r7
 8003742:	4302      	orrs	r2, r0
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003744:	4618      	mov	r0, r3
 8003746:	f84c 2006 	str.w	r2, [ip, r6]
 800374a:	f7ff ffc5 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003754:	4302      	orrs	r2, r0
 8003756:	d14b      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x110>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003758:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800375a:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800375e:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003760:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 8003762:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003766:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 800376a:	4086      	lsls	r6, r0
 800376c:	593a      	ldr	r2, [r7, r4]
 800376e:	ea22 0206 	bic.w	r2, r2, r6
 8003772:	688e      	ldr	r6, [r1, #8]
 8003774:	4086      	lsls	r6, r0
 8003776:	4332      	orrs	r2, r6
 8003778:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800377a:	4aa6      	ldr	r2, [pc, #664]	@ (8003a14 <HAL_ADC_ConfigChannel+0x334>)
 800377c:	6948      	ldr	r0, [r1, #20]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003784:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	d145      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x138>
 800378c:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8003790:	0052      	lsls	r2, r2, #1
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003792:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003794:	4090      	lsls	r0, r2
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003796:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003798:	2f04      	cmp	r7, #4
 800379a:	d045      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x148>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800379c:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 80037a0:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 80037a4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 80037a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037ac:	4322      	orrs	r2, r4
 80037ae:	4302      	orrs	r2, r0
 80037b0:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037b4:	7e48      	ldrb	r0, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037b6:	690c      	ldr	r4, [r1, #16]
 80037b8:	1e47      	subs	r7, r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80037be:	4278      	negs	r0, r7
 80037c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037c4:	4178      	adcs	r0, r7
 80037c6:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 80037ca:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037ce:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037d0:	690c      	ldr	r4, [r1, #16]
 80037d2:	f102 3cff 	add.w	ip, r2, #4294967295
 80037d6:	6918      	ldr	r0, [r3, #16]
 80037d8:	f004 041f 	and.w	r4, r4, #31
 80037dc:	f1dc 0200 	rsbs	r2, ip, #0
 80037e0:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 80037e4:	eb42 020c 	adc.w	r2, r2, ip
 80037e8:	02d2      	lsls	r2, r2, #11
 80037ea:	40a2      	lsls	r2, r4
 80037ec:	4302      	orrs	r2, r0
 80037ee:	611a      	str	r2, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff6d 	bl	80036d0 <LL_ADC_IsEnabled>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d03d      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fa:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037fc:	2300      	movs	r3, #0
 80037fe:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003802:	b003      	add	sp, #12
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800380a:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800380e:	2401      	movs	r4, #1
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	4094      	lsls	r4, r2
 8003816:	e780      	b.n	800371a <HAL_ADC_ConfigChannel+0x3a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003818:	f012 0f10 	tst.w	r2, #16
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	d0b5      	beq.n	800378c <HAL_ADC_ConfigChannel+0xac>
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	f002 0208 	and.w	r2, r2, #8
 8003826:	e7b4      	b.n	8003792 <HAL_ADC_ConfigChannel+0xb2>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800382a:	06a0      	lsls	r0, r4, #26
 800382c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003830:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003834:	d103      	bne.n	800383e <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003836:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003838:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800383c:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800383e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003840:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003844:	4290      	cmp	r0, r2
 8003846:	d103      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x170>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003848:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800384a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800384e:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003850:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003852:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003856:	4290      	cmp	r0, r2
 8003858:	d103      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x182>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800385a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800385c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003860:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003862:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003864:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003868:	4290      	cmp	r0, r2
 800386a:	d1c1      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x110>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800386c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800386e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003872:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003874:	e7bc      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003876:	680c      	ldr	r4, [r1, #0]
 8003878:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800387a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800387e:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8003882:	f000 0618 	and.w	r6, r0, #24
 8003886:	ea22 0201 	bic.w	r2, r2, r1
 800388a:	4963      	ldr	r1, [pc, #396]	@ (8003a18 <HAL_ADC_ConfigChannel+0x338>)
 800388c:	40f1      	lsrs	r1, r6
 800388e:	4021      	ands	r1, r4
 8003890:	430a      	orrs	r2, r1
 8003892:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003896:	4a61      	ldr	r2, [pc, #388]	@ (8003a1c <HAL_ADC_ConfigChannel+0x33c>)
 8003898:	4290      	cmp	r0, r2
 800389a:	d161      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x280>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800389c:	4a60      	ldr	r2, [pc, #384]	@ (8003a20 <HAL_ADC_ConfigChannel+0x340>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d12c      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x21c>
 80038a2:	4a60      	ldr	r2, [pc, #384]	@ (8003a24 <HAL_ADC_ConfigChannel+0x344>)
 80038a4:	4294      	cmp	r4, r2
 80038a6:	f000 8093 	beq.w	80039d0 <HAL_ADC_ConfigChannel+0x2f0>
 80038aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003a28 <HAL_ADC_ConfigChannel+0x348>)
 80038ac:	4294      	cmp	r4, r2
 80038ae:	f000 8091 	beq.w	80039d4 <HAL_ADC_ConfigChannel+0x2f4>
 80038b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <HAL_ADC_ConfigChannel+0x34c>)
 80038b4:	4294      	cmp	r4, r2
 80038b6:	f000 808f 	beq.w	80039d8 <HAL_ADC_ConfigChannel+0x2f8>
 80038ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003a30 <HAL_ADC_ConfigChannel+0x350>)
 80038bc:	4294      	cmp	r4, r2
 80038be:	f000 808d 	beq.w	80039dc <HAL_ADC_ConfigChannel+0x2fc>
 80038c2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80038c6:	3210      	adds	r2, #16
 80038c8:	4294      	cmp	r4, r2
 80038ca:	f000 8089 	beq.w	80039e0 <HAL_ADC_ConfigChannel+0x300>
 80038ce:	4a59      	ldr	r2, [pc, #356]	@ (8003a34 <HAL_ADC_ConfigChannel+0x354>)
 80038d0:	4294      	cmp	r4, r2
 80038d2:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80038d6:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80038da:	d035      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80038dc:	4294      	cmp	r4, r2
 80038de:	d032      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x266>
 80038e0:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80038e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e8:	4294      	cmp	r4, r2
 80038ea:	d02a      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x262>
 80038ec:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_ADC_ConfigChannel+0x358>)
 80038ee:	4294      	cmp	r4, r2
 80038f0:	d06c      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x2ec>
 80038f2:	4a52      	ldr	r2, [pc, #328]	@ (8003a3c <HAL_ADC_ConfigChannel+0x35c>)
 80038f4:	4294      	cmp	r4, r2
 80038f6:	d177      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x308>
 80038f8:	4a51      	ldr	r2, [pc, #324]	@ (8003a40 <HAL_ADC_ConfigChannel+0x360>)
 80038fa:	e025      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80038fc:	4a51      	ldr	r2, [pc, #324]	@ (8003a44 <HAL_ADC_ConfigChannel+0x364>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d172      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x308>
 8003902:	4a48      	ldr	r2, [pc, #288]	@ (8003a24 <HAL_ADC_ConfigChannel+0x344>)
 8003904:	4294      	cmp	r4, r2
 8003906:	d063      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x2f0>
 8003908:	4a47      	ldr	r2, [pc, #284]	@ (8003a28 <HAL_ADC_ConfigChannel+0x348>)
 800390a:	4294      	cmp	r4, r2
 800390c:	d062      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x2f4>
 800390e:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <HAL_ADC_ConfigChannel+0x34c>)
 8003910:	4294      	cmp	r4, r2
 8003912:	d061      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x2f8>
 8003914:	4a46      	ldr	r2, [pc, #280]	@ (8003a30 <HAL_ADC_ConfigChannel+0x350>)
 8003916:	4294      	cmp	r4, r2
 8003918:	d060      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x2fc>
 800391a:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 800391e:	3210      	adds	r2, #16
 8003920:	4294      	cmp	r4, r2
 8003922:	d05d      	beq.n	80039e0 <HAL_ADC_ConfigChannel+0x300>
 8003924:	4a43      	ldr	r2, [pc, #268]	@ (8003a34 <HAL_ADC_ConfigChannel+0x354>)
 8003926:	4294      	cmp	r4, r2
 8003928:	d05c      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x304>
 800392a:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 800392e:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8003932:	4294      	cmp	r4, r2
 8003934:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800393c:	d004      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 800393e:	4294      	cmp	r4, r2
 8003940:	d1d7      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x212>
 8003942:	4a41      	ldr	r2, [pc, #260]	@ (8003a48 <HAL_ADC_ConfigChannel+0x368>)
 8003944:	e000      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_ADC_ConfigChannel+0x36c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800394c:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003950:	2101      	movs	r1, #1
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	430a      	orrs	r2, r1
 800395e:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003960:	2c00      	cmp	r4, #0
 8003962:	f6bf af4a 	bge.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003966:	4a2e      	ldr	r2, [pc, #184]	@ (8003a20 <HAL_ADC_ConfigChannel+0x340>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d13f      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x30c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800396c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003970:	482b      	ldr	r0, [pc, #172]	@ (8003a20 <HAL_ADC_ConfigChannel+0x340>)
 8003972:	6892      	ldr	r2, [r2, #8]
 8003974:	f7ff feac 	bl	80036d0 <LL_ADC_IsEnabled>
 8003978:	4601      	mov	r1, r0
 800397a:	4832      	ldr	r0, [pc, #200]	@ (8003a44 <HAL_ADC_ConfigChannel+0x364>)
 800397c:	f7ff fea8 	bl	80036d0 <LL_ADC_IsEnabled>
 8003980:	4301      	orrs	r1, r0
 8003982:	d140      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x326>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003984:	4832      	ldr	r0, [pc, #200]	@ (8003a50 <HAL_ADC_ConfigChannel+0x370>)
 8003986:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 800398a:	4284      	cmp	r4, r0
 800398c:	d176      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x39c>
 800398e:	0214      	lsls	r4, r2, #8
 8003990:	f53f af33 	bmi.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003994:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <HAL_ADC_ConfigChannel+0x374>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f47f af2f 	bne.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800399c:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 80039a0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80039a4:	430b      	orrs	r3, r1
 80039a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039aa:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <HAL_ADC_ConfigChannel+0x378>)
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <HAL_ADC_ConfigChannel+0x37c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039b8:	3301      	adds	r3, #1
 80039ba:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 80039bc:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f43f af1a 	beq.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	e7f7      	b.n	80039bc <HAL_ADC_ConfigChannel+0x2dc>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80039cc:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <HAL_ADC_ConfigChannel+0x380>)
 80039ce:	e7bb      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039d0:	2201      	movs	r2, #1
 80039d2:	e7b9      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039d4:	4a23      	ldr	r2, [pc, #140]	@ (8003a64 <HAL_ADC_ConfigChannel+0x384>)
 80039d6:	e7b7      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039d8:	4a23      	ldr	r2, [pc, #140]	@ (8003a68 <HAL_ADC_ConfigChannel+0x388>)
 80039da:	e7b5      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039dc:	4a23      	ldr	r2, [pc, #140]	@ (8003a6c <HAL_ADC_ConfigChannel+0x38c>)
 80039de:	e7b3      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <HAL_ADC_ConfigChannel+0x390>)
 80039e2:	e7b1      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
 80039e4:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <HAL_ADC_ConfigChannel+0x394>)
 80039e6:	e7af      	b.n	8003948 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80039e8:	2201      	movs	r2, #1
 80039ea:	e7b6      	b.n	800395a <HAL_ADC_ConfigChannel+0x27a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ec:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <HAL_ADC_ConfigChannel+0x364>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d102      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x318>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80039f6:	e7bb      	b.n	8003970 <HAL_ADC_ConfigChannel+0x290>
 80039f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <HAL_ADC_ConfigChannel+0x398>)
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039fa:	4816      	ldr	r0, [pc, #88]	@ (8003a54 <HAL_ADC_ConfigChannel+0x374>)
 80039fc:	6892      	ldr	r2, [r2, #8]
 80039fe:	f7ff fe67 	bl	80036d0 <LL_ADC_IsEnabled>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d0be      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x2a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a06:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003a10:	e6f4      	b.n	80037fc <HAL_ADC_ConfigChannel+0x11c>
 8003a12:	bf00      	nop
 8003a14:	5c001000 	.word	0x5c001000
 8003a18:	000fffff 	.word	0x000fffff
 8003a1c:	47ff0000 	.word	0x47ff0000
 8003a20:	40022000 	.word	0x40022000
 8003a24:	04300002 	.word	0x04300002
 8003a28:	08600004 	.word	0x08600004
 8003a2c:	0c900008 	.word	0x0c900008
 8003a30:	10c00010 	.word	0x10c00010
 8003a34:	2a000400 	.word	0x2a000400
 8003a38:	43210000 	.word	0x43210000
 8003a3c:	4b840000 	.word	0x4b840000
 8003a40:	4fb80000 	.word	0x4fb80000
 8003a44:	40022100 	.word	0x40022100
 8003a48:	36902000 	.word	0x36902000
 8003a4c:	32601000 	.word	0x32601000
 8003a50:	cb840000 	.word	0xcb840000
 8003a54:	58026000 	.word	0x58026000
 8003a58:	24000074 	.word	0x24000074
 8003a5c:	00030d40 	.word	0x00030d40
 8003a60:	47520000 	.word	0x47520000
 8003a64:	19200040 	.word	0x19200040
 8003a68:	1d500080 	.word	0x1d500080
 8003a6c:	21800100 	.word	0x21800100
 8003a70:	25b00200 	.word	0x25b00200
 8003a74:	2e300800 	.word	0x2e300800
 8003a78:	58026300 	.word	0x58026300
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a7c:	4814      	ldr	r0, [pc, #80]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x3f0>)
 8003a7e:	4284      	cmp	r4, r0
 8003a80:	d110      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x3c4>
 8003a82:	01d0      	lsls	r0, r2, #7
 8003a84:	f53f aeb9 	bmi.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a88:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x3f4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	f47f aeb5 	bne.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a90:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8003a94:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 8003aa2:	e6aa      	b.n	80037fa <HAL_ADC_ConfigChannel+0x11a>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa4:	480c      	ldr	r0, [pc, #48]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x3f8>)
 8003aa6:	4284      	cmp	r4, r0
 8003aa8:	f47f aea7 	bne.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
 8003aac:	0252      	lsls	r2, r2, #9
 8003aae:	f53f aea4 	bmi.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ab2:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x3f4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f47f aea0 	bne.w	80037fa <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aba:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8003abe:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ac8:	e7e9      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x3be>
  __HAL_LOCK(hadc);
 8003aca:	2002      	movs	r0, #2
 8003acc:	e699      	b.n	8003802 <HAL_ADC_ConfigChannel+0x122>
 8003ace:	bf00      	nop
 8003ad0:	c7520000 	.word	0xc7520000
 8003ad4:	58026000 	.word	0x58026000
 8003ad8:	cfb80000 	.word	0xcfb80000

08003adc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003adc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ade:	4a43      	ldr	r2, [pc, #268]	@ (8003bec <ADC_ConfigureBoostMode+0x110>)
{
 8003ae0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ae2:	6803      	ldr	r3, [r0, #0]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <ADC_ConfigureBoostMode+0x14>
 8003ae8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d125      	bne.n	8003b3c <ADC_ConfigureBoostMode+0x60>
 8003af0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <ADC_ConfigureBoostMode+0x114>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b9fb      	cbnz	r3, 8003b40 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b00:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b04:	2100      	movs	r1, #0
 8003b06:	f002 fd17 	bl	8006538 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003b0a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b0c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003b0e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b12:	d04a      	beq.n	8003baa <ADC_ConfigureBoostMode+0xce>
 8003b14:	d83f      	bhi.n	8003b96 <ADC_ConfigureBoostMode+0xba>
 8003b16:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b1a:	d044      	beq.n	8003ba6 <ADC_ConfigureBoostMode+0xca>
 8003b1c:	d836      	bhi.n	8003b8c <ADC_ConfigureBoostMode+0xb0>
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b22:	d008      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x5a>
 8003b24:	d82c      	bhi.n	8003b80 <ADC_ConfigureBoostMode+0xa4>
 8003b26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b2a:	d004      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x5a>
 8003b2c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003b30:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8003b34:	d116      	bne.n	8003b64 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b36:	0c9b      	lsrs	r3, r3, #18
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	e00f      	b.n	8003b5c <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf4 <ADC_ConfigureBoostMode+0x118>)
 8003b3e:	e7d8      	b.n	8003af2 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8003b40:	f001 fcd2 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003b44:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003b46:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b4c:	d005      	beq.n	8003b5a <ADC_ConfigureBoostMode+0x7e>
 8003b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b52:	d006      	beq.n	8003b62 <ADC_ConfigureBoostMode+0x86>
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d104      	bne.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b5a:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b5c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003b60:	e000      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8003b62:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b64:	f7ff fd9c 	bl	80036a0 <HAL_GetREVID>
 8003b68:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b6c:	4298      	cmp	r0, r3
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	d823      	bhi.n	8003bba <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8003b72:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <ADC_ConfigureBoostMode+0x11c>)
 8003b74:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b76:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8003b78:	d91b      	bls.n	8003bb2 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7e:	e01a      	b.n	8003bb6 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8003b80:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b84:	d0d7      	beq.n	8003b36 <ADC_ConfigureBoostMode+0x5a>
 8003b86:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b8a:	e7d3      	b.n	8003b34 <ADC_ConfigureBoostMode+0x58>
 8003b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b90:	d1e8      	bne.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8003b92:	0944      	lsrs	r4, r0, #5
        break;
 8003b94:	e7e6      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8003b96:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b9a:	d008      	beq.n	8003bae <ADC_ConfigureBoostMode+0xd2>
 8003b9c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ba0:	d1e0      	bne.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8003ba2:	0a04      	lsrs	r4, r0, #8
        break;
 8003ba4:	e7de      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8003ba6:	0904      	lsrs	r4, r0, #4
        break;
 8003ba8:	e7dc      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8003baa:	0984      	lsrs	r4, r0, #6
        break;
 8003bac:	e7da      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8003bae:	09c4      	lsrs	r4, r0, #7
        break;
 8003bb0:	e7d8      	b.n	8003b64 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003bb6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bb8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8003bba:	4a10      	ldr	r2, [pc, #64]	@ (8003bfc <ADC_ConfigureBoostMode+0x120>)
 8003bbc:	4294      	cmp	r4, r2
 8003bbe:	d803      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bc6:	e7f6      	b.n	8003bb6 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8003bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c00 <ADC_ConfigureBoostMode+0x124>)
 8003bca:	4294      	cmp	r4, r2
 8003bcc:	d803      	bhi.n	8003bd6 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003bd4:	e7d1      	b.n	8003b7a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <ADC_ConfigureBoostMode+0x128>)
 8003bd8:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	bf96      	itet	ls
 8003bde:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003be2:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003be6:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003bea:	e7e4      	b.n	8003bb6 <ADC_ConfigureBoostMode+0xda>
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40022300 	.word	0x40022300
 8003bf4:	58026300 	.word	0x58026300
 8003bf8:	01312d00 	.word	0x01312d00
 8003bfc:	00bebc21 	.word	0x00bebc21
 8003c00:	017d7841 	.word	0x017d7841
 8003c04:	02faf081 	.word	0x02faf081

08003c08 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8003c08:	2300      	movs	r3, #0
{
 8003c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 8003c0c:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003c0e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f000 80ed 	beq.w	8003df0 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c16:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8003c18:	b925      	cbnz	r5, 8003c24 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8003c1a:	f7fe ffbd 	bl	8002b98 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c1e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003c20:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c24:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	0090      	lsls	r0, r2, #2
 8003c2a:	d505      	bpl.n	8003c38 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8003c32:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003c36:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	00d1      	lsls	r1, r2, #3
 8003c3c:	f140 809e 	bpl.w	8003d7c <HAL_ADC_Init+0x174>
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	00d2      	lsls	r2, r2, #3
 8003c44:	f100 80b0 	bmi.w	8003da8 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003c4a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4c:	f042 0210 	orr.w	r2, r2, #16
 8003c50:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c52:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fd3c 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c62:	f002 0210 	and.w	r2, r2, #16
 8003c66:	4302      	orrs	r2, r0
 8003c68:	f040 80be 	bne.w	8003de8 <HAL_ADC_Init+0x1e0>
    ADC_STATE_CLR_SET(hadc->State,
 8003c6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c6e:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 8003c70:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8003c74:	f042 0202 	orr.w	r2, r2, #2
 8003c78:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c7a:	f7ff fd29 	bl	80036d0 <LL_ADC_IsEnabled>
 8003c7e:	b988      	cbnz	r0, 8003ca4 <HAL_ADC_Init+0x9c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c80:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <HAL_ADC_Init+0x1ec>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_Init+0x88>
 8003c86:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	f040 808e 	bne.w	8003dac <HAL_ADC_Init+0x1a4>
 8003c90:	4858      	ldr	r0, [pc, #352]	@ (8003df4 <HAL_ADC_Init+0x1ec>)
 8003c92:	f7ff fd1d 	bl	80036d0 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4857      	ldr	r0, [pc, #348]	@ (8003df8 <HAL_ADC_Init+0x1f0>)
 8003c9a:	f7ff fd19 	bl	80036d0 <LL_ADC_IsEnabled>
 8003c9e:	4303      	orrs	r3, r0
 8003ca0:	f000 8092 	beq.w	8003dc8 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ca4:	f7ff fcfc 	bl	80036a0 <HAL_GetREVID>
 8003ca8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003cac:	68a2      	ldr	r2, [r4, #8]
 8003cae:	4298      	cmp	r0, r3
 8003cb0:	7f21      	ldrb	r1, [r4, #28]
 8003cb2:	7d60      	ldrb	r0, [r4, #21]
 8003cb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003cb6:	f240 8089 	bls.w	8003dcc <HAL_ADC_Init+0x1c4>
 8003cba:	2a10      	cmp	r2, #16
 8003cbc:	f040 8086 	bne.w	8003dcc <HAL_ADC_Init+0x1c4>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cc0:	040a      	lsls	r2, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cc2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ccc:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cce:	bf02      	ittt	eq
 8003cd0:	6a22      	ldreq	r2, [r4, #32]
 8003cd2:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003cd6:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cda:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cdc:	b122      	cbz	r2, 8003ce8 <HAL_ADC_Init+0xe0>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cde:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ce2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003ce4:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ce6:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	4944      	ldr	r1, [pc, #272]	@ (8003dfc <HAL_ADC_Init+0x1f4>)
 8003cec:	68d0      	ldr	r0, [r2, #12]
 8003cee:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf0:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cf2:	4319      	orrs	r1, r3
 8003cf4:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf6:	f7ff fcef 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cfa:	6893      	ldr	r3, [r2, #8]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d00:	4303      	orrs	r3, r0
 8003d02:	d127      	bne.n	8003d54 <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d04:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d06:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d0c:	f023 0303 	bic.w	r3, r3, #3
 8003d10:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8003d14:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003d16:	430b      	orrs	r3, r1
 8003d18:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d1a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d15a      	bne.n	8003dd8 <HAL_ADC_Init+0x1d0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d24:	6910      	ldr	r0, [r2, #16]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 8003d2c:	4333      	orrs	r3, r6
 8003d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003d34:	430b      	orrs	r3, r1
 8003d36:	4932      	ldr	r1, [pc, #200]	@ (8003e00 <HAL_ADC_Init+0x1f8>)
 8003d38:	4001      	ands	r1, r0
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d40:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d42:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d44:	6913      	ldr	r3, [r2, #16]
 8003d46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d48:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d50:	f7ff fec4 	bl	8003adc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d54:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d56:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d141      	bne.n	8003de0 <HAL_ADC_Init+0x1d8>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d5c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003d5e:	69a3      	ldr	r3, [r4, #24]
 8003d60:	f021 010f 	bic.w	r1, r1, #15
 8003d64:	3b01      	subs	r3, #1
 8003d66:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d68:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8003d76:	4628      	mov	r0, r5
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003d7c:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d7e:	4921      	ldr	r1, [pc, #132]	@ (8003e04 <HAL_ADC_Init+0x1fc>)
 8003d80:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8003d84:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003d88:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_ADC_Init+0x200>)
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	fbb2 f2f1 	udiv	r2, r2, r1
 8003d96:	3201      	adds	r2, #1
      wait_loop_index--;
 8003d98:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d9a:	9a01      	ldr	r2, [sp, #4]
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	f43f af4f 	beq.w	8003c40 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8003da2:	9a01      	ldr	r2, [sp, #4]
 8003da4:	3a01      	subs	r2, #1
 8003da6:	e7f7      	b.n	8003d98 <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da8:	2500      	movs	r5, #0
 8003daa:	e756      	b.n	8003c5a <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dac:	4817      	ldr	r0, [pc, #92]	@ (8003e0c <HAL_ADC_Init+0x204>)
 8003dae:	f7ff fc8f 	bl	80036d0 <LL_ADC_IsEnabled>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f47f af76 	bne.w	8003ca4 <HAL_ADC_Init+0x9c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003db8:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003dba:	6893      	ldr	r3, [r2, #8]
 8003dbc:	6861      	ldr	r1, [r4, #4]
 8003dbe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6093      	str	r3, [r2, #8]
}
 8003dc6:	e76d      	b.n	8003ca4 <HAL_ADC_Init+0x9c>
 8003dc8:	4a12      	ldr	r2, [pc, #72]	@ (8003e14 <HAL_ADC_Init+0x20c>)
 8003dca:	e7f6      	b.n	8003dba <HAL_ADC_Init+0x1b2>
                  hadc->Init.Overrun                                                    |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003dd6:	e779      	b.n	8003ccc <HAL_ADC_Init+0xc4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dd8:	6913      	ldr	r3, [r2, #16]
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	e7af      	b.n	8003d40 <HAL_ADC_Init+0x138>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003de0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003de2:	f023 030f 	bic.w	r3, r3, #15
 8003de6:	e7bf      	b.n	8003d68 <HAL_ADC_Init+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dea:	f043 0310 	orr.w	r3, r3, #16
 8003dee:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8003df0:	2501      	movs	r5, #1
 8003df2:	e7c0      	b.n	8003d76 <HAL_ADC_Init+0x16e>
 8003df4:	40022000 	.word	0x40022000
 8003df8:	40022100 	.word	0x40022100
 8003dfc:	fff0c003 	.word	0xfff0c003
 8003e00:	fc00f81e 	.word	0xfc00f81e
 8003e04:	00030d40 	.word	0x00030d40
 8003e08:	24000074 	.word	0x24000074
 8003e0c:	58026000 	.word	0x58026000
 8003e10:	58026300 	.word	0x58026300
 8003e14:	40022300 	.word	0x40022300

08003e18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e18:	4907      	ldr	r1, [pc, #28]	@ (8003e38 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e26:	0412      	lsls	r2, r2, #16
 8003e28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003e34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e3c:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3e:	b530      	push	{r4, r5, lr}
 8003e40:	68dc      	ldr	r4, [r3, #12]
 8003e42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	bf28      	it	cs
 8003e50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e58:	bf8c      	ite	hi
 8003e5a:	3c03      	subhi	r4, #3
 8003e5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8003e62:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e64:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e6c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	fa03 f304 	lsl.w	r3, r3, r4
 8003e74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	db06      	blt.n	8003e8e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003e84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003e88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e8c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	f000 000f 	and.w	r0, r0, #15
 8003e92:	4a02      	ldr	r2, [pc, #8]	@ (8003e9c <HAL_NVIC_SetPriority+0x60>)
 8003e94:	5413      	strb	r3, [r2, r0]
 8003e96:	e7f9      	b.n	8003e8c <HAL_NVIC_SetPriority+0x50>
 8003e98:	e000ed00 	.word	0xe000ed00
 8003e9c:	e000ed14 	.word	0xe000ed14

08003ea0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	db07      	blt.n	8003eb4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	0941      	lsrs	r1, r0, #5
 8003ea8:	f000 001f 	and.w	r0, r0, #31
 8003eac:	4a02      	ldr	r2, [pc, #8]	@ (8003eb8 <HAL_NVIC_EnableIRQ+0x18>)
 8003eae:	4083      	lsls	r3, r0
 8003eb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	3801      	subs	r0, #1
 8003ebe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003ec2:	d20b      	bcs.n	8003edc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec8:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <HAL_SYSTICK_Config+0x24>)
 8003eca:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ecc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ece:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eda:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003edc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003ee4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <HAL_MPU_Disable+0x18>)
 8003eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ef0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_MPU_Enable+0x1c>)
 8003f02:	f040 0001 	orr.w	r0, r0, #1
 8003f06:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f16:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003f20:	7843      	ldrb	r3, [r0, #1]
 8003f22:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <HAL_MPU_ConfigRegion+0x54>)
 8003f24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003f28:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003f34:	6843      	ldr	r3, [r0, #4]
 8003f36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f3a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f3c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003f3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003f44:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f46:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003f48:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f4a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003f4e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f50:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f54:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f56:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f5a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f60:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f66:	7a01      	ldrb	r1, [r0, #8]
 8003f68:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7ff fb78 	bl	8003670 <HAL_GetTick>
 8003f80:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f82:	b145      	cbz	r5, 8003f96 <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d006      	beq.n	8003f9a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	656b      	str	r3, [r5, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f90:	2300      	movs	r3, #0
 8003f92:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8003f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f9a:	682c      	ldr	r4, [r5, #0]
 8003f9c:	4e7c      	ldr	r6, [pc, #496]	@ (8004190 <HAL_DMA_Abort+0x218>)
 8003f9e:	42b4      	cmp	r4, r6
 8003fa0:	d05b      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8004194 <HAL_DMA_Abort+0x21c>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d058      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fa8:	3318      	adds	r3, #24
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d055      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fae:	3318      	adds	r3, #24
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d052      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	d04f      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fba:	3318      	adds	r3, #24
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	d04c      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d049      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d046      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fcc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d042      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d03f      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fda:	3318      	adds	r3, #24
 8003fdc:	429c      	cmp	r4, r3
 8003fde:	d03c      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d039      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d036      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003fec:	3318      	adds	r3, #24
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d033      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003ff2:	3318      	adds	r3, #24
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d030      	beq.n	800405a <HAL_DMA_Abort+0xe2>
 8003ff8:	3318      	adds	r3, #24
 8003ffa:	429c      	cmp	r4, r3
 8003ffc:	d02d      	beq.n	800405a <HAL_DMA_Abort+0xe2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f023 030e 	bic.w	r3, r3, #14
 8004004:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004006:	4b64      	ldr	r3, [pc, #400]	@ (8004198 <HAL_DMA_Abort+0x220>)
 8004008:	429c      	cmp	r4, r3
 800400a:	d12f      	bne.n	800406c <HAL_DMA_Abort+0xf4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800400c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 800400e:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004016:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004018:	d03d      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 800401a:	4b5e      	ldr	r3, [pc, #376]	@ (8004194 <HAL_DMA_Abort+0x21c>)
 800401c:	429c      	cmp	r4, r3
 800401e:	d03a      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004020:	3318      	adds	r3, #24
 8004022:	429c      	cmp	r4, r3
 8004024:	d037      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004026:	3318      	adds	r3, #24
 8004028:	429c      	cmp	r4, r3
 800402a:	d034      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 800402c:	3318      	adds	r3, #24
 800402e:	429c      	cmp	r4, r3
 8004030:	d031      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004032:	3318      	adds	r3, #24
 8004034:	429c      	cmp	r4, r3
 8004036:	d02e      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004038:	3318      	adds	r3, #24
 800403a:	429c      	cmp	r4, r3
 800403c:	d02b      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 800403e:	3318      	adds	r3, #24
 8004040:	429c      	cmp	r4, r3
 8004042:	d028      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004044:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004048:	429c      	cmp	r4, r3
 800404a:	d024      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 800404c:	3318      	adds	r3, #24
 800404e:	429c      	cmp	r4, r3
 8004050:	d021      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004052:	3318      	adds	r3, #24
 8004054:	429c      	cmp	r4, r3
 8004056:	d01e      	beq.n	8004096 <HAL_DMA_Abort+0x11e>
 8004058:	e01d      	b.n	8004096 <HAL_DMA_Abort+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f023 031e 	bic.w	r3, r3, #30
 8004060:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004062:	6963      	ldr	r3, [r4, #20]
 8004064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004068:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800406a:	e7cf      	b.n	800400c <HAL_DMA_Abort+0x94>
 800406c:	4b4b      	ldr	r3, [pc, #300]	@ (800419c <HAL_DMA_Abort+0x224>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d0cc      	beq.n	800400c <HAL_DMA_Abort+0x94>
 8004072:	3314      	adds	r3, #20
 8004074:	429c      	cmp	r4, r3
 8004076:	d0c9      	beq.n	800400c <HAL_DMA_Abort+0x94>
 8004078:	3314      	adds	r3, #20
 800407a:	429c      	cmp	r4, r3
 800407c:	d0c6      	beq.n	800400c <HAL_DMA_Abort+0x94>
 800407e:	3314      	adds	r3, #20
 8004080:	429c      	cmp	r4, r3
 8004082:	d0c3      	beq.n	800400c <HAL_DMA_Abort+0x94>
 8004084:	3314      	adds	r3, #20
 8004086:	429c      	cmp	r4, r3
 8004088:	d0c0      	beq.n	800400c <HAL_DMA_Abort+0x94>
 800408a:	3314      	adds	r3, #20
 800408c:	429c      	cmp	r4, r3
 800408e:	d0bd      	beq.n	800400c <HAL_DMA_Abort+0x94>
 8004090:	3314      	adds	r3, #20
 8004092:	429c      	cmp	r4, r3
 8004094:	d0ba      	beq.n	800400c <HAL_DMA_Abort+0x94>
    __HAL_DMA_DISABLE(hdma);
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	07db      	lsls	r3, r3, #31
 80040a2:	d447      	bmi.n	8004134 <HAL_DMA_Abort+0x1bc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a4:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040a6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a8:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040ac:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040b0:	d04b      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040b2:	4938      	ldr	r1, [pc, #224]	@ (8004194 <HAL_DMA_Abort+0x21c>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d048      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040b8:	3118      	adds	r1, #24
 80040ba:	428b      	cmp	r3, r1
 80040bc:	d045      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040be:	3118      	adds	r1, #24
 80040c0:	428b      	cmp	r3, r1
 80040c2:	d042      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040c4:	3118      	adds	r1, #24
 80040c6:	428b      	cmp	r3, r1
 80040c8:	d03f      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040ca:	3118      	adds	r1, #24
 80040cc:	428b      	cmp	r3, r1
 80040ce:	d03c      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040d0:	3118      	adds	r1, #24
 80040d2:	428b      	cmp	r3, r1
 80040d4:	d039      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040d6:	3118      	adds	r1, #24
 80040d8:	428b      	cmp	r3, r1
 80040da:	d036      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040dc:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80040e0:	428b      	cmp	r3, r1
 80040e2:	d032      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040e4:	3118      	adds	r1, #24
 80040e6:	428b      	cmp	r3, r1
 80040e8:	d02f      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040ea:	3118      	adds	r1, #24
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040f0:	3118      	adds	r1, #24
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d029      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040f6:	3118      	adds	r1, #24
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d026      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 80040fc:	3118      	adds	r1, #24
 80040fe:	428b      	cmp	r3, r1
 8004100:	d023      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 8004102:	3118      	adds	r1, #24
 8004104:	428b      	cmp	r3, r1
 8004106:	d020      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
 8004108:	3118      	adds	r1, #24
 800410a:	428b      	cmp	r3, r1
 800410c:	d01d      	beq.n	800414a <HAL_DMA_Abort+0x1d2>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004116:	4a20      	ldr	r2, [pc, #128]	@ (8004198 <HAL_DMA_Abort+0x220>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d11a      	bne.n	8004152 <HAL_DMA_Abort+0x1da>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800411c:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8004120:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004122:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8004124:	bb5b      	cbnz	r3, 800417e <HAL_DMA_Abort+0x206>
    hdma->State = HAL_DMA_STATE_READY;
 8004126:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8004128:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800412a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800412e:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8004132:	e731      	b.n	8003f98 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004134:	f7ff fa9c 	bl	8003670 <HAL_GetTick>
 8004138:	1bc0      	subs	r0, r0, r7
 800413a:	2805      	cmp	r0, #5
 800413c:	d9af      	bls.n	800409e <HAL_DMA_Abort+0x126>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800413e:	2320      	movs	r3, #32
 8004140:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004142:	2303      	movs	r3, #3
 8004144:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004148:	e722      	b.n	8003f90 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800414a:	233f      	movs	r3, #63	@ 0x3f
 800414c:	4093      	lsls	r3, r2
 800414e:	6083      	str	r3, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004150:	e7e4      	b.n	800411c <HAL_DMA_Abort+0x1a4>
 8004152:	4a12      	ldr	r2, [pc, #72]	@ (800419c <HAL_DMA_Abort+0x224>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d0e1      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 8004158:	3214      	adds	r2, #20
 800415a:	4293      	cmp	r3, r2
 800415c:	d0de      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 800415e:	3214      	adds	r2, #20
 8004160:	4293      	cmp	r3, r2
 8004162:	d0db      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 8004164:	3214      	adds	r2, #20
 8004166:	4293      	cmp	r3, r2
 8004168:	d0d8      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 800416a:	3214      	adds	r2, #20
 800416c:	4293      	cmp	r3, r2
 800416e:	d0d5      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 8004170:	3214      	adds	r2, #20
 8004172:	4293      	cmp	r3, r2
 8004174:	d0d2      	beq.n	800411c <HAL_DMA_Abort+0x1a4>
 8004176:	3214      	adds	r2, #20
 8004178:	4293      	cmp	r3, r2
 800417a:	d1d4      	bne.n	8004126 <HAL_DMA_Abort+0x1ae>
 800417c:	e7ce      	b.n	800411c <HAL_DMA_Abort+0x1a4>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004184:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004186:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	e7cb      	b.n	8004126 <HAL_DMA_Abort+0x1ae>
 800418e:	bf00      	nop
 8004190:	40020010 	.word	0x40020010
 8004194:	40020028 	.word	0x40020028
 8004198:	58025408 	.word	0x58025408
 800419c:	5802541c 	.word	0x5802541c

080041a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a0:	b508      	push	{r3, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041a2:	b128      	cbz	r0, 80041b0 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041a4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
 80041b2:	e05d      	b.n	8004270 <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b4:	6803      	ldr	r3, [r0, #0]
 80041b6:	4a3f      	ldr	r2, [pc, #252]	@ (80042b4 <HAL_DMA_Abort_IT+0x114>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d051      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041bc:	3218      	adds	r2, #24
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04e      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041c2:	3218      	adds	r2, #24
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d04b      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041c8:	3218      	adds	r2, #24
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d048      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041ce:	3218      	adds	r2, #24
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d045      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041d4:	3218      	adds	r2, #24
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d042      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041da:	3218      	adds	r2, #24
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03f      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041e0:	3218      	adds	r2, #24
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d03c      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041e6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d038      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041ee:	3218      	adds	r2, #24
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d035      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041f4:	3218      	adds	r2, #24
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d032      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 80041fa:	3218      	adds	r2, #24
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02f      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 8004200:	3218      	adds	r2, #24
 8004202:	4293      	cmp	r3, r2
 8004204:	d02c      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 8004206:	3218      	adds	r2, #24
 8004208:	4293      	cmp	r3, r2
 800420a:	d029      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 800420c:	3218      	adds	r2, #24
 800420e:	4293      	cmp	r3, r2
 8004210:	d026      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
 8004212:	3218      	adds	r2, #24
 8004214:	4293      	cmp	r3, r2
 8004216:	d023      	beq.n	8004260 <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004228:	4a23      	ldr	r2, [pc, #140]	@ (80042b8 <HAL_DMA_Abort_IT+0x118>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d121      	bne.n	8004272 <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800422e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004236:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004238:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	2301      	movs	r3, #1
 8004242:	4093      	lsls	r3, r2
 8004244:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004246:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 800424a:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800424c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800424e:	b32b      	cbz	r3, 800429c <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004256:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004258:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e01d      	b.n	800429c <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004260:	2204      	movs	r2, #4
 8004262:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 800426e:	2000      	movs	r0, #0
}
 8004270:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <HAL_DMA_Abort_IT+0x11c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d0da      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 8004278:	3214      	adds	r2, #20
 800427a:	4293      	cmp	r3, r2
 800427c:	d0d7      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 800427e:	3214      	adds	r2, #20
 8004280:	4293      	cmp	r3, r2
 8004282:	d0d4      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 8004284:	3214      	adds	r2, #20
 8004286:	4293      	cmp	r3, r2
 8004288:	d0d1      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 800428a:	3214      	adds	r2, #20
 800428c:	4293      	cmp	r3, r2
 800428e:	d0ce      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 8004290:	3214      	adds	r2, #20
 8004292:	4293      	cmp	r3, r2
 8004294:	d0cb      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
 8004296:	3214      	adds	r2, #20
 8004298:	4293      	cmp	r3, r2
 800429a:	d0c8      	beq.n	800422e <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 800429c:	2301      	movs	r3, #1
 800429e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80042a2:	2300      	movs	r3, #0
 80042a4:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 80042a8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0df      	beq.n	800426e <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 80042ae:	4798      	blx	r3
 80042b0:	e7dd      	b.n	800426e <HAL_DMA_Abort_IT+0xce>
 80042b2:	bf00      	nop
 80042b4:	40020010 	.word	0x40020010
 80042b8:	58025408 	.word	0x58025408
 80042bc:	5802541c 	.word	0x5802541c

080042c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80042c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80042c4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800448c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042ca:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042ce:	680a      	ldr	r2, [r1, #0]
 80042d0:	fa32 f503 	lsrs.w	r5, r2, r3
 80042d4:	d102      	bne.n	80042dc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80042d6:	b003      	add	sp, #12
 80042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042dc:	2501      	movs	r5, #1
 80042de:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80042e2:	ea18 0202 	ands.w	r2, r8, r2
 80042e6:	f000 80bb 	beq.w	8004460 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042ea:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ec:	2703      	movs	r7, #3
 80042ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042f6:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042fa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042fc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004300:	2f01      	cmp	r7, #1
 8004302:	d834      	bhi.n	800436e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8004304:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004306:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800430a:	68cf      	ldr	r7, [r1, #12]
 800430c:	fa07 f70e 	lsl.w	r7, r7, lr
 8004310:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004314:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004316:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004318:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800431c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8004320:	409f      	lsls	r7, r3
 8004322:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8004326:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004328:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800432c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004330:	688f      	ldr	r7, [r1, #8]
 8004332:	fa07 f70e 	lsl.w	r7, r7, lr
 8004336:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800433a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433c:	d119      	bne.n	8004372 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800433e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004342:	f003 0a07 	and.w	sl, r3, #7
 8004346:	f04f 0b0f 	mov.w	fp, #15
 800434a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800434e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8004352:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004356:	fa0b fb0a 	lsl.w	fp, fp, sl
 800435a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800435e:	690f      	ldr	r7, [r1, #16]
 8004360:	fa07 f70a 	lsl.w	r7, r7, sl
 8004364:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8004368:	f8c8 7020 	str.w	r7, [r8, #32]
 800436c:	e001      	b.n	8004372 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436e:	2d03      	cmp	r5, #3
 8004370:	d1da      	bne.n	8004328 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8004372:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004374:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004378:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800437c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004380:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8004384:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004386:	d06b      	beq.n	8004460 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004388:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800438c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004390:	f003 0c03 	and.w	ip, r3, #3
 8004394:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004398:	f045 0502 	orr.w	r5, r5, #2
 800439c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a4:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80043a8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80043ac:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043b0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b4:	f005 0502 	and.w	r5, r5, #2
 80043b8:	9501      	str	r5, [sp, #4]
 80043ba:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80043bc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043be:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043c2:	4d31      	ldr	r5, [pc, #196]	@ (8004488 <HAL_GPIO_Init+0x1c8>)
 80043c4:	42a8      	cmp	r0, r5
 80043c6:	d04d      	beq.n	8004464 <HAL_GPIO_Init+0x1a4>
 80043c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043cc:	42a8      	cmp	r0, r5
 80043ce:	d04b      	beq.n	8004468 <HAL_GPIO_Init+0x1a8>
 80043d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043d4:	42a8      	cmp	r0, r5
 80043d6:	d049      	beq.n	800446c <HAL_GPIO_Init+0x1ac>
 80043d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043dc:	42a8      	cmp	r0, r5
 80043de:	d047      	beq.n	8004470 <HAL_GPIO_Init+0x1b0>
 80043e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043e4:	42a8      	cmp	r0, r5
 80043e6:	d045      	beq.n	8004474 <HAL_GPIO_Init+0x1b4>
 80043e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043ec:	42a8      	cmp	r0, r5
 80043ee:	d043      	beq.n	8004478 <HAL_GPIO_Init+0x1b8>
 80043f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043f4:	42a8      	cmp	r0, r5
 80043f6:	d041      	beq.n	800447c <HAL_GPIO_Init+0x1bc>
 80043f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043fc:	42a8      	cmp	r0, r5
 80043fe:	d03f      	beq.n	8004480 <HAL_GPIO_Init+0x1c0>
 8004400:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004404:	42a8      	cmp	r0, r5
 8004406:	d03d      	beq.n	8004484 <HAL_GPIO_Init+0x1c4>
 8004408:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800440c:	42a8      	cmp	r0, r5
 800440e:	bf14      	ite	ne
 8004410:	250a      	movne	r5, #10
 8004412:	2509      	moveq	r5, #9
 8004414:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004418:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800441c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004420:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8004422:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8004426:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004428:	bf0c      	ite	eq
 800442a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800442c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800442e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8004432:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004434:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8004436:	bf0c      	ite	eq
 8004438:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800443a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800443c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8004440:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004442:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8004446:	bf0c      	ite	eq
 8004448:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800444a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800444e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004452:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8004456:	bf54      	ite	pl
 8004458:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800445a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800445c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8004460:	3301      	adds	r3, #1
 8004462:	e734      	b.n	80042ce <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004464:	2500      	movs	r5, #0
 8004466:	e7d5      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004468:	2501      	movs	r5, #1
 800446a:	e7d3      	b.n	8004414 <HAL_GPIO_Init+0x154>
 800446c:	2502      	movs	r5, #2
 800446e:	e7d1      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004470:	2503      	movs	r5, #3
 8004472:	e7cf      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004474:	2504      	movs	r5, #4
 8004476:	e7cd      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004478:	2505      	movs	r5, #5
 800447a:	e7cb      	b.n	8004414 <HAL_GPIO_Init+0x154>
 800447c:	2506      	movs	r5, #6
 800447e:	e7c9      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004480:	2507      	movs	r5, #7
 8004482:	e7c7      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004484:	2508      	movs	r5, #8
 8004486:	e7c5      	b.n	8004414 <HAL_GPIO_Init+0x154>
 8004488:	58020000 	.word	0x58020000
 800448c:	58024400 	.word	0x58024400

08004490 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004490:	6903      	ldr	r3, [r0, #16]
 8004492:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004494:	bf14      	ite	ne
 8004496:	2001      	movne	r0, #1
 8004498:	2000      	moveq	r0, #0
 800449a:	4770      	bx	lr

0800449c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800449c:	b10a      	cbz	r2, 80044a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800449e:	6181      	str	r1, [r0, #24]
  }
}
 80044a0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044a2:	0409      	lsls	r1, r1, #16
 80044a4:	e7fb      	b.n	800449e <HAL_GPIO_WritePin+0x2>

080044a6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044a6:	6803      	ldr	r3, [r0, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	0791      	lsls	r1, r2, #30
 80044ac:	d501      	bpl.n	80044b2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ae:	2200      	movs	r2, #0
 80044b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	07d2      	lsls	r2, r2, #31
 80044b6:	d403      	bmi.n	80044c0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	619a      	str	r2, [r3, #24]
  }
}
 80044c0:	4770      	bx	lr
	...

080044c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044c8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044cc:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ce:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80044d0:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80044d6:	4a05      	ldr	r2, [pc, #20]	@ (80044ec <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044d8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80044da:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80044e2:	ea20 0002 	bic.w	r0, r0, r2
 80044e6:	4303      	orrs	r3, r0
 80044e8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044ea:	bd30      	pop	{r4, r5, pc}
 80044ec:	03ff63ff 	.word	0x03ff63ff

080044f0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80044f0:	6803      	ldr	r3, [r0, #0]
{
 80044f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80044f6:	699c      	ldr	r4, [r3, #24]
{
 80044f8:	4605      	mov	r5, r0
 80044fa:	460f      	mov	r7, r1
 80044fc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044fe:	f014 0410 	ands.w	r4, r4, #16
 8004502:	d06f      	beq.n	80045e4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8004504:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	0690      	lsls	r0, r2, #26
 8004512:	d461      	bmi.n	80045d8 <I2C_IsErrorOccurred+0xe8>
 8004514:	f1b8 0f00 	cmp.w	r8, #0
 8004518:	d035      	beq.n	8004586 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800451a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800451e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004520:	682e      	ldr	r6, [r5, #0]
 8004522:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004524:	05d9      	lsls	r1, r3, #23
 8004526:	d505      	bpl.n	8004534 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004528:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800452c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004530:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004532:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004534:	055a      	lsls	r2, r3, #21
 8004536:	d505      	bpl.n	8004544 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800453c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004540:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004542:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004544:	059b      	lsls	r3, r3, #22
 8004546:	d54f      	bpl.n	80045e8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004548:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800454c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004550:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8004552:	4628      	mov	r0, r5
 8004554:	f7ff ffa7 	bl	80044a6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004558:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800455a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800455c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8004560:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8004564:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800456e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004570:	4323      	orrs	r3, r4
 8004572:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004574:	2320      	movs	r3, #32
 8004576:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8004580:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8004584:	e032      	b.n	80045ec <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8004586:	1c7a      	adds	r2, r7, #1
 8004588:	d0c1      	beq.n	800450e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7ff f871 	bl	8003670 <HAL_GetTick>
 800458e:	1b80      	subs	r0, r0, r6
 8004590:	42b8      	cmp	r0, r7
 8004592:	d801      	bhi.n	8004598 <I2C_IsErrorOccurred+0xa8>
 8004594:	2f00      	cmp	r7, #0
 8004596:	d1b9      	bne.n	800450c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800459c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045a0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80045a2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045a4:	0400      	lsls	r0, r0, #16
 80045a6:	d50a      	bpl.n	80045be <I2C_IsErrorOccurred+0xce>
 80045a8:	0449      	lsls	r1, r1, #17
 80045aa:	d408      	bmi.n	80045be <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80045ac:	2a20      	cmp	r2, #32
 80045ae:	d006      	beq.n	80045be <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045b6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80045b8:	f7ff f85a 	bl	8003670 <HAL_GetTick>
 80045bc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	069b      	lsls	r3, r3, #26
 80045c4:	d4a2      	bmi.n	800450c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045c6:	f7ff f853 	bl	8003670 <HAL_GetTick>
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	2819      	cmp	r0, #25
 80045ce:	d9f6      	bls.n	80045be <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045d0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80045d2:	f04f 0801 	mov.w	r8, #1
 80045d6:	e799      	b.n	800450c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80045d8:	f1b8 0f00 	cmp.w	r8, #0
 80045dc:	d19d      	bne.n	800451a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045de:	2220      	movs	r2, #32
 80045e0:	61da      	str	r2, [r3, #28]
 80045e2:	e79a      	b.n	800451a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	4620      	mov	r0, r4
 80045e6:	e79b      	b.n	8004520 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1b2      	bne.n	8004552 <I2C_IsErrorOccurred+0x62>
}
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080045f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
 80045f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	079b      	lsls	r3, r3, #30
 80045fe:	d501      	bpl.n	8004604 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004600:	2000      	movs	r0, #0
 8004602:	e01f      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004604:	4632      	mov	r2, r6
 8004606:	4629      	mov	r1, r5
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff ff71 	bl	80044f0 <I2C_IsErrorOccurred>
 800460e:	b9c0      	cbnz	r0, 8004642 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004610:	1c6a      	adds	r2, r5, #1
 8004612:	d0f1      	beq.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004614:	f7ff f82c 	bl	8003670 <HAL_GetTick>
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	42a8      	cmp	r0, r5
 800461c:	d801      	bhi.n	8004622 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800461e:	2d00      	cmp	r5, #0
 8004620:	d1ea      	bne.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f013 0302 	ands.w	r3, r3, #2
 800462a:	d1e5      	bne.n	80045f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800462e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004638:	2220      	movs	r2, #32
 800463a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8004642:	2001      	movs	r0, #1
}
 8004644:	bd70      	pop	{r4, r5, r6, pc}

08004646 <I2C_WaitOnFlagUntilTimeout>:
{
 8004646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800464e:	4604      	mov	r4, r0
 8004650:	460f      	mov	r7, r1
 8004652:	4616      	mov	r6, r2
 8004654:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	ea37 0303 	bics.w	r3, r7, r3
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	42b3      	cmp	r3, r6
 8004666:	d001      	beq.n	800466c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004668:	2000      	movs	r0, #0
 800466a:	e025      	b.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800466c:	4642      	mov	r2, r8
 800466e:	4629      	mov	r1, r5
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff ff3d 	bl	80044f0 <I2C_IsErrorOccurred>
 8004676:	b9f0      	cbnz	r0, 80046b6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8004678:	1c6b      	adds	r3, r5, #1
 800467a:	d0ec      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe fff8 	bl	8003670 <HAL_GetTick>
 8004680:	eba0 0008 	sub.w	r0, r0, r8
 8004684:	42a8      	cmp	r0, r5
 8004686:	d801      	bhi.n	800468c <I2C_WaitOnFlagUntilTimeout+0x46>
 8004688:	2d00      	cmp	r5, #0
 800468a:	d1e4      	bne.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	ea37 0303 	bics.w	r3, r7, r3
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	42b3      	cmp	r3, r6
 800469c:	d1db      	bne.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80046a0:	f043 0320 	orr.w	r3, r3, #32
 80046a4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	2320      	movs	r3, #32
 80046a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80046b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80046b6:	2001      	movs	r0, #1
}
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	460d      	mov	r5, r1
 80046c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	069b      	lsls	r3, r3, #26
 80046ca:	d501      	bpl.n	80046d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80046cc:	2000      	movs	r0, #0
 80046ce:	e01d      	b.n	800470c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d0:	4632      	mov	r2, r6
 80046d2:	4629      	mov	r1, r5
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff ff0b 	bl	80044f0 <I2C_IsErrorOccurred>
 80046da:	b9b0      	cbnz	r0, 800470a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046dc:	f7fe ffc8 	bl	8003670 <HAL_GetTick>
 80046e0:	1b80      	subs	r0, r0, r6
 80046e2:	42a8      	cmp	r0, r5
 80046e4:	d801      	bhi.n	80046ea <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	d1ec      	bne.n	80046c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f013 0320 	ands.w	r3, r3, #32
 80046f2:	d1e7      	bne.n	80046c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80046f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004700:	2220      	movs	r2, #32
 8004702:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
}
 800470c:	bd70      	pop	{r4, r5, r6, pc}

0800470e <HAL_I2C_Init>:
{
 800470e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004710:	4604      	mov	r4, r0
 8004712:	2800      	cmp	r0, #0
 8004714:	d04e      	beq.n	80047b4 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004716:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800471a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800471e:	b91b      	cbnz	r3, 8004728 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004720:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8004724:	f7fe fb10 	bl	8002d48 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	2324      	movs	r3, #36	@ 0x24
 800472a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800473e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004746:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004748:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	2901      	cmp	r1, #1
 800474e:	d106      	bne.n	800475e <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004750:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004754:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475c:	e007      	b.n	800476e <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800475e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004762:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004764:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004766:	d1f6      	bne.n	8004756 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800476e:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004770:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004778:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800477c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004784:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004786:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800478a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800478c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800478e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004792:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004794:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80047b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047b4:	2001      	movs	r0, #1
 80047b6:	e7fc      	b.n	80047b2 <HAL_I2C_Init+0xa4>

080047b8 <HAL_I2C_Mem_Write>:
{
 80047b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80047c2:	4604      	mov	r4, r0
 80047c4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	2b20      	cmp	r3, #32
{
 80047c8:	4616      	mov	r6, r2
 80047ca:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80047ce:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d2:	f040 80c6 	bne.w	8004962 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80047d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80047d8:	b113      	cbz	r3, 80047e0 <HAL_I2C_Mem_Write+0x28>
 80047da:	f1ba 0f00 	cmp.w	sl, #0
 80047de:	d106      	bne.n	80047ee <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047e4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
}
 80047e8:	b003      	add	sp, #12
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80047ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f000 80b5 	beq.w	8004962 <HAL_I2C_Mem_Write+0x1aa>
 80047f8:	f04f 0b01 	mov.w	fp, #1
 80047fc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004800:	f7fe ff36 	bl	8003670 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004804:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004806:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004808:	9000      	str	r0, [sp, #0]
 800480a:	465a      	mov	r2, fp
 800480c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff ff18 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 8004816:	2800      	cmp	r0, #0
 8004818:	d1e5      	bne.n	80047e6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800481a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800481c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800481e:	fa5f f289 	uxtb.w	r2, r9
 8004822:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004824:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004828:	2340      	movs	r3, #64	@ 0x40
 800482a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800482e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004832:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004834:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004836:	4b4c      	ldr	r3, [pc, #304]	@ (8004968 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8004838:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004842:	f7ff fe3f 	bl	80044c4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004846:	462a      	mov	r2, r5
 8004848:	4641      	mov	r1, r8
 800484a:	4620      	mov	r0, r4
 800484c:	f7ff fed0 	bl	80045f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004850:	bb18      	cbnz	r0, 800489a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004852:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004856:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004858:	d115      	bne.n	8004886 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800485a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004862:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004864:	4643      	mov	r3, r8
 8004866:	9500      	str	r5, [sp, #0]
 8004868:	f7ff feed 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 800486c:	b9a8      	cbnz	r0, 800489a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2bff      	cmp	r3, #255	@ 0xff
 8004874:	d815      	bhi.n	80048a2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004876:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800487c:	b292      	uxth	r2, r2
 800487e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	9000      	str	r0, [sp, #0]
 8004884:	e012      	b.n	80048ac <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004886:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004888:	4641      	mov	r1, r8
 800488a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488e:	462a      	mov	r2, r5
 8004890:	f7ff feae 	bl	80045f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004894:	b908      	cbnz	r0, 800489a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	e7df      	b.n	800485a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80048a0:	e7a1      	b.n	80047e6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a2:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048a8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048aa:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ac:	4639      	mov	r1, r7
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fe08 	bl	80044c4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b4:	462a      	mov	r2, r5
 80048b6:	4641      	mov	r1, r8
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7ff fe99 	bl	80045f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d191      	bne.n	80047e6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80048ca:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80048cc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80048ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80048d0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80048d2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80048d4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80048d6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80048d8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80048da:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80048de:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b1b3      	cbz	r3, 8004912 <HAL_I2C_Mem_Write+0x15a>
 80048e4:	b9aa      	cbnz	r2, 8004912 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048e6:	4643      	mov	r3, r8
 80048e8:	2180      	movs	r1, #128	@ 0x80
 80048ea:	4620      	mov	r0, r4
 80048ec:	9500      	str	r5, [sp, #0]
 80048ee:	f7ff feaa 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f47f af77 	bne.w	80047e6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2bff      	cmp	r3, #255	@ 0xff
 80048fe:	d928      	bls.n	8004952 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004900:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004902:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004906:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004908:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800490a:	4639      	mov	r1, r7
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fdd9 	bl	80044c4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004912:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1cc      	bne.n	80048b4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491a:	462a      	mov	r2, r5
 800491c:	4641      	mov	r1, r8
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff fecc 	bl	80046bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004924:	2800      	cmp	r0, #0
 8004926:	f47f af5e 	bne.w	80047e6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	2120      	movs	r1, #32
 800492e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004936:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800493a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004948:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800494c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004950:	e74a      	b.n	80047e8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004952:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004958:	b292      	uxth	r2, r2
 800495a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	9000      	str	r0, [sp, #0]
 8004960:	e7d3      	b.n	800490a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8004962:	2002      	movs	r0, #2
 8004964:	e740      	b.n	80047e8 <HAL_I2C_Mem_Write+0x30>
 8004966:	bf00      	nop
 8004968:	80002000 	.word	0x80002000

0800496c <HAL_I2C_Mem_Read>:
{
 800496c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8004976:	4604      	mov	r4, r0
 8004978:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	2b20      	cmp	r3, #32
{
 800497c:	4616      	mov	r6, r2
 800497e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004982:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004986:	f040 80c9 	bne.w	8004b1c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800498a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800498c:	b113      	cbz	r3, 8004994 <HAL_I2C_Mem_Read+0x28>
 800498e:	f1ba 0f00 	cmp.w	sl, #0
 8004992:	d106      	bne.n	80049a2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004998:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800499a:	2001      	movs	r0, #1
}
 800499c:	b003      	add	sp, #12
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80049a2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f000 80b8 	beq.w	8004b1c <HAL_I2C_Mem_Read+0x1b0>
 80049ac:	f04f 0b01 	mov.w	fp, #1
 80049b0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80049b4:	f7fe fe5c 	bl	8003670 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049b8:	2319      	movs	r3, #25
 80049ba:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80049bc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049be:	465a      	mov	r2, fp
 80049c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff fe3e 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d1e4      	bne.n	800499a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049d0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80049d2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049d4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049d6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049da:	2240      	movs	r2, #64	@ 0x40
 80049dc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80049e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e2:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049e4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80049e6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004b20 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80049ea:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	fa5f f289 	uxtb.w	r2, r9
 80049f4:	f7ff fd66 	bl	80044c4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f8:	462a      	mov	r2, r5
 80049fa:	4641      	mov	r1, r8
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff fdf7 	bl	80045f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	bb20      	cbnz	r0, 8004a4e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a04:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a08:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0a:	d116      	bne.n	8004a3a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2140      	movs	r1, #64	@ 0x40
 8004a12:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	4643      	mov	r3, r8
 8004a18:	9500      	str	r5, [sp, #0]
 8004a1a:	f7ff fe14 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	b9b0      	cbnz	r0, 8004a4e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2bff      	cmp	r3, #255	@ 0xff
 8004a26:	4b3f      	ldr	r3, [pc, #252]	@ (8004b24 <HAL_I2C_Mem_Read+0x1b8>)
 8004a28:	d815      	bhi.n	8004a56 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004a2a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a38:	e012      	b.n	8004a60 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a42:	462a      	mov	r2, r5
 8004a44:	f7ff fdd4 	bl	80045f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a48:	b908      	cbnz	r0, 8004a4e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	e7de      	b.n	8004a0c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004a54:	e7a1      	b.n	800499a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a56:	22ff      	movs	r2, #255	@ 0xff
 8004a58:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a60:	4639      	mov	r1, r7
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7ff fd2e 	bl	80044c4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a68:	4643      	mov	r3, r8
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	4620      	mov	r0, r4
 8004a70:	9500      	str	r5, [sp, #0]
 8004a72:	f7ff fde8 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d18f      	bne.n	800499a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a7e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004a80:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004a82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004a84:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004a86:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004a88:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004a8a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004a8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a8e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004a90:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004a92:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	b1b3      	cbz	r3, 8004acc <HAL_I2C_Mem_Read+0x160>
 8004a9e:	b9aa      	cbnz	r2, 8004acc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	2180      	movs	r1, #128	@ 0x80
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	9500      	str	r5, [sp, #0]
 8004aa8:	f7ff fdcd 	bl	8004646 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f47f af74 	bne.w	800499a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d928      	bls.n	8004b0c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f7ff fcfc 	bl	80044c4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004acc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1c9      	bne.n	8004a68 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7ff fdef 	bl	80046bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f47f af5b 	bne.w	800499a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004af0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004af4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004af8:	f022 0201 	bic.w	r2, r2, #1
 8004afc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004b02:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b06:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004b0a:	e747      	b.n	800499c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004b0c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004b12:	b292      	uxth	r2, r2
 8004b14:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	9000      	str	r0, [sp, #0]
 8004b1a:	e7d3      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	e73d      	b.n	800499c <HAL_I2C_Mem_Read+0x30>
 8004b20:	80002000 	.word	0x80002000
 8004b24:	80002400 	.word	0x80002400

08004b28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b28:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8004b2e:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b30:	2a20      	cmp	r2, #32
 8004b32:	b2d4      	uxtb	r4, r2
 8004b34:	d11c      	bne.n	8004b70 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	d018      	beq.n	8004b70 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	2224      	movs	r2, #36	@ 0x24
 8004b40:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b44:	6802      	ldr	r2, [r0, #0]
 8004b46:	6810      	ldr	r0, [r2, #0]
 8004b48:	f020 0001 	bic.w	r0, r0, #1
 8004b4c:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b4e:	6810      	ldr	r0, [r2, #0]
 8004b50:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004b54:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b56:	6810      	ldr	r0, [r2, #0]
 8004b58:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b5c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004b5e:	6811      	ldr	r1, [r2, #0]
 8004b60:	f041 0101 	orr.w	r1, r1, #1
 8004b64:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004b6a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b6e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004b70:	2002      	movs	r0, #2
 8004b72:	e7fc      	b.n	8004b6e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004b74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b74:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b76:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8004b7a:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7c:	2a20      	cmp	r2, #32
 8004b7e:	b2d4      	uxtb	r4, r2
 8004b80:	d11b      	bne.n	8004bba <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b82:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004b86:	2a01      	cmp	r2, #1
 8004b88:	d017      	beq.n	8004bba <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8a:	2224      	movs	r2, #36	@ 0x24
 8004b8c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b90:	6802      	ldr	r2, [r0, #0]
 8004b92:	6810      	ldr	r0, [r2, #0]
 8004b94:	f020 0001 	bic.w	r0, r0, #1
 8004b98:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9a:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b9c:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ba0:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba4:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8004ba6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	f041 0101 	orr.w	r1, r1, #1
 8004bae:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004bb4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004bb8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004bba:	2002      	movs	r0, #2
 8004bbc:	e7fc      	b.n	8004bb8 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08004bc0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bc0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bc2:	4c10      	ldr	r4, [pc, #64]	@ (8004c04 <HAL_PWREx_ConfigSupply+0x44>)
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bca:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bcc:	d105      	bne.n	8004bda <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	1a18      	subs	r0, r3, r0
 8004bd4:	bf18      	it	ne
 8004bd6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004bd8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	4318      	orrs	r0, r3
 8004be0:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8004be2:	f7fe fd45 	bl	8003670 <HAL_GetTick>
 8004be6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	049b      	lsls	r3, r3, #18
 8004bec:	d501      	bpl.n	8004bf2 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7f2      	b.n	8004bd8 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bf2:	f7fe fd3d 	bl	8003670 <HAL_GetTick>
 8004bf6:	1b40      	subs	r0, r0, r5
 8004bf8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004bfc:	d9f4      	bls.n	8004be8 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e7ea      	b.n	8004bd8 <HAL_PWREx_ConfigSupply+0x18>
 8004c02:	bf00      	nop
 8004c04:	58024800 	.word	0x58024800

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d074      	beq.n	8004cfa <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	07d8      	lsls	r0, r3, #31
 8004c14:	d45e      	bmi.n	8004cd4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	0799      	lsls	r1, r3, #30
 8004c1a:	f100 80ad 	bmi.w	8004d78 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	06da      	lsls	r2, r3, #27
 8004c22:	d527      	bpl.n	8004c74 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c24:	4a9c      	ldr	r2, [pc, #624]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004c26:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d007      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3a>
 8004c32:	2b18      	cmp	r3, #24
 8004c34:	f040 8103 	bne.w	8004e3e <HAL_RCC_OscConfig+0x236>
 8004c38:	f001 0303 	and.w	r3, r1, #3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 80fe 	bne.w	8004e3e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	05db      	lsls	r3, r3, #23
 8004c46:	d502      	bpl.n	8004c4e <HAL_RCC_OscConfig+0x46>
 8004c48:	69e3      	ldr	r3, [r4, #28]
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d155      	bne.n	8004cfa <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c4e:	f7fe fd27 	bl	80036a0 <HAL_GetREVID>
 8004c52:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004c56:	6a21      	ldr	r1, [r4, #32]
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004c5c:	f200 80e8 	bhi.w	8004e30 <HAL_RCC_OscConfig+0x228>
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	2920      	cmp	r1, #32
 8004c64:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8004c68:	bf0c      	ite	eq
 8004c6a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8004c6e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004c72:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	0719      	lsls	r1, r3, #28
 8004c78:	f100 8123 	bmi.w	8004ec2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	069a      	lsls	r2, r3, #26
 8004c80:	f100 8144 	bmi.w	8004f0c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	075d      	lsls	r5, r3, #29
 8004c88:	d51e      	bpl.n	8004cc8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c8a:	4d84      	ldr	r5, [pc, #528]	@ (8004e9c <HAL_RCC_OscConfig+0x294>)
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c92:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c94:	f7fe fcec 	bl	8003670 <HAL_GetTick>
 8004c98:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	05da      	lsls	r2, r3, #23
 8004c9e:	f140 815a 	bpl.w	8004f56 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	4d7c      	ldr	r5, [pc, #496]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	f040 815c 	bne.w	8004f64 <HAL_RCC_OscConfig+0x35c>
 8004cac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004cb8:	f7fe fcda 	bl	8003670 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cbc:	4e76      	ldr	r6, [pc, #472]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004cbe:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	f140 8174 	bpl.w	8004fb0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	f040 8177 	bne.w	8004fbe <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e02b      	b.n	8004d2c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd4:	4a70      	ldr	r2, [pc, #448]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004cd6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d005      	beq.n	8004cee <HAL_RCC_OscConfig+0xe6>
 8004ce2:	2b18      	cmp	r3, #24
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0xf6>
 8004ce6:	f001 0303 	and.w	r3, r1, #3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	039a      	lsls	r2, r3, #14
 8004cf2:	d590      	bpl.n	8004c16 <HAL_RCC_OscConfig+0xe>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d18d      	bne.n	8004c16 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	e016      	b.n	8004d2c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	4d65      	ldr	r5, [pc, #404]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d06:	d112      	bne.n	8004d2e <HAL_RCC_OscConfig+0x126>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d10:	f7fe fcae 	bl	8003670 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d14:	4e60      	ldr	r6, [pc, #384]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004d16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	039b      	lsls	r3, r3, #14
 8004d1c:	f53f af7b 	bmi.w	8004c16 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe fca6 	bl	8003670 <HAL_GetTick>
 8004d24:	1b40      	subs	r0, r0, r5
 8004d26:	2864      	cmp	r0, #100	@ 0x64
 8004d28:	d9f6      	bls.n	8004d18 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004d2a:	2003      	movs	r0, #3
}
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2e:	b9a3      	cbnz	r3, 8004d5a <HAL_RCC_OscConfig+0x152>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d40:	f7fe fc96 	bl	8003670 <HAL_GetTick>
 8004d44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	039f      	lsls	r7, r3, #14
 8004d4a:	f57f af64 	bpl.w	8004c16 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4e:	f7fe fc8f 	bl	8003670 <HAL_GetTick>
 8004d52:	1b80      	subs	r0, r0, r6
 8004d54:	2864      	cmp	r0, #100	@ 0x64
 8004d56:	d9f6      	bls.n	8004d46 <HAL_RCC_OscConfig+0x13e>
 8004d58:	e7e7      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d5e:	682b      	ldr	r3, [r5, #0]
 8004d60:	d103      	bne.n	8004d6a <HAL_RCC_OscConfig+0x162>
 8004d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	e7ce      	b.n	8004d08 <HAL_RCC_OscConfig+0x100>
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d76:	e7ca      	b.n	8004d0e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d78:	4947      	ldr	r1, [pc, #284]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004d7a:	68e2      	ldr	r2, [r4, #12]
 8004d7c:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d7e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d80:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_OscConfig+0x186>
 8004d86:	2b18      	cmp	r3, #24
 8004d88:	d12a      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1d8>
 8004d8a:	0780      	lsls	r0, r0, #30
 8004d8c:	d128      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d8e:	680b      	ldr	r3, [r1, #0]
 8004d90:	075b      	lsls	r3, r3, #29
 8004d92:	d501      	bpl.n	8004d98 <HAL_RCC_OscConfig+0x190>
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d0b0      	beq.n	8004cfa <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d98:	4d3f      	ldr	r5, [pc, #252]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	f023 0319 	bic.w	r3, r3, #25
 8004da0:	4313      	orrs	r3, r2
 8004da2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004da4:	f7fe fc64 	bl	8003670 <HAL_GetTick>
 8004da8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004daa:	682b      	ldr	r3, [r5, #0]
 8004dac:	075f      	lsls	r7, r3, #29
 8004dae:	d511      	bpl.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db0:	f7fe fc76 	bl	80036a0 <HAL_GetREVID>
 8004db4:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	4298      	cmp	r0, r3
 8004dbc:	686b      	ldr	r3, [r5, #4]
 8004dbe:	d822      	bhi.n	8004e06 <HAL_RCC_OscConfig+0x1fe>
 8004dc0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004dc4:	2a40      	cmp	r2, #64	@ 0x40
 8004dc6:	bf0c      	ite	eq
 8004dc8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8004dcc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004dd0:	606b      	str	r3, [r5, #4]
 8004dd2:	e724      	b.n	8004c1e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fe fc4c 	bl	8003670 <HAL_GetTick>
 8004dd8:	1b80      	subs	r0, r0, r6
 8004dda:	2802      	cmp	r0, #2
 8004ddc:	d9e5      	bls.n	8004daa <HAL_RCC_OscConfig+0x1a2>
 8004dde:	e7a4      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de0:	4d2d      	ldr	r5, [pc, #180]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004de2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de4:	b1a2      	cbz	r2, 8004e10 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004de6:	f023 0319 	bic.w	r3, r3, #25
 8004dea:	4313      	orrs	r3, r2
 8004dec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004dee:	f7fe fc3f 	bl	8003670 <HAL_GetTick>
 8004df2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	0758      	lsls	r0, r3, #29
 8004df8:	d4da      	bmi.n	8004db0 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fe fc39 	bl	8003670 <HAL_GetTick>
 8004dfe:	1b80      	subs	r0, r0, r6
 8004e00:	2802      	cmp	r0, #2
 8004e02:	d9f7      	bls.n	8004df4 <HAL_RCC_OscConfig+0x1ec>
 8004e04:	e791      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004e0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e0e:	e7df      	b.n	8004dd0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e16:	f7fe fc2b 	bl	8003670 <HAL_GetTick>
 8004e1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	0759      	lsls	r1, r3, #29
 8004e20:	f57f aefd 	bpl.w	8004c1e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fe fc24 	bl	8003670 <HAL_GetTick>
 8004e28:	1b80      	subs	r0, r0, r6
 8004e2a:	2802      	cmp	r0, #2
 8004e2c:	d9f6      	bls.n	8004e1c <HAL_RCC_OscConfig+0x214>
 8004e2e:	e77c      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8004e36:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e71a      	b.n	8004c74 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	4d15      	ldr	r5, [pc, #84]	@ (8004e98 <HAL_RCC_OscConfig+0x290>)
 8004e42:	b36b      	cbz	r3, 8004ea0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e4c:	f7fe fc10 	bl	8003670 <HAL_GetTick>
 8004e50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	05df      	lsls	r7, r3, #23
 8004e56:	d511      	bpl.n	8004e7c <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e58:	f7fe fc22 	bl	80036a0 <HAL_GetREVID>
 8004e5c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004e60:	6a22      	ldr	r2, [r4, #32]
 8004e62:	4298      	cmp	r0, r3
 8004e64:	d810      	bhi.n	8004e88 <HAL_RCC_OscConfig+0x280>
 8004e66:	686b      	ldr	r3, [r5, #4]
 8004e68:	2a20      	cmp	r2, #32
 8004e6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e6e:	bf0c      	ite	eq
 8004e70:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004e74:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004e78:	606b      	str	r3, [r5, #4]
 8004e7a:	e6fb      	b.n	8004c74 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e7c:	f7fe fbf8 	bl	8003670 <HAL_GetTick>
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	2802      	cmp	r0, #2
 8004e84:	d9e5      	bls.n	8004e52 <HAL_RCC_OscConfig+0x24a>
 8004e86:	e750      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e88:	68eb      	ldr	r3, [r5, #12]
 8004e8a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004e8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e92:	60eb      	str	r3, [r5, #12]
 8004e94:	e6ee      	b.n	8004c74 <HAL_RCC_OscConfig+0x6c>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ea8:	f7fe fbe2 	bl	8003670 <HAL_GetTick>
 8004eac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eae:	682b      	ldr	r3, [r5, #0]
 8004eb0:	05d8      	lsls	r0, r3, #23
 8004eb2:	f57f aedf 	bpl.w	8004c74 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004eb6:	f7fe fbdb 	bl	8003670 <HAL_GetTick>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	2802      	cmp	r0, #2
 8004ebe:	d9f6      	bls.n	8004eae <HAL_RCC_OscConfig+0x2a6>
 8004ec0:	e733      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ec2:	6963      	ldr	r3, [r4, #20]
 8004ec4:	4da3      	ldr	r5, [pc, #652]	@ (8005154 <HAL_RCC_OscConfig+0x54c>)
 8004ec6:	b183      	cbz	r3, 8004eea <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8004ec8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004ed0:	f7fe fbce 	bl	8003670 <HAL_GetTick>
 8004ed4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ed6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	f53f aecf 	bmi.w	8004c7c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ede:	f7fe fbc7 	bl	8003670 <HAL_GetTick>
 8004ee2:	1b80      	subs	r0, r0, r6
 8004ee4:	2802      	cmp	r0, #2
 8004ee6:	d9f6      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x2ce>
 8004ee8:	e71f      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8004eea:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004ef2:	f7fe fbbd 	bl	8003670 <HAL_GetTick>
 8004ef6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ef8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004efa:	079f      	lsls	r7, r3, #30
 8004efc:	f57f aebe 	bpl.w	8004c7c <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fe fbb6 	bl	8003670 <HAL_GetTick>
 8004f04:	1b80      	subs	r0, r0, r6
 8004f06:	2802      	cmp	r0, #2
 8004f08:	d9f6      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x2f0>
 8004f0a:	e70e      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f0c:	69a3      	ldr	r3, [r4, #24]
 8004f0e:	4d91      	ldr	r5, [pc, #580]	@ (8005154 <HAL_RCC_OscConfig+0x54c>)
 8004f10:	b183      	cbz	r3, 8004f34 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f18:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004f1a:	f7fe fba9 	bl	8003670 <HAL_GetTick>
 8004f1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	0498      	lsls	r0, r3, #18
 8004f24:	f53f aeae 	bmi.w	8004c84 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f28:	f7fe fba2 	bl	8003670 <HAL_GetTick>
 8004f2c:	1b80      	subs	r0, r0, r6
 8004f2e:	2802      	cmp	r0, #2
 8004f30:	d9f6      	bls.n	8004f20 <HAL_RCC_OscConfig+0x318>
 8004f32:	e6fa      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fb98 	bl	8003670 <HAL_GetTick>
 8004f40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	0499      	lsls	r1, r3, #18
 8004f46:	f57f ae9d 	bpl.w	8004c84 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4a:	f7fe fb91 	bl	8003670 <HAL_GetTick>
 8004f4e:	1b80      	subs	r0, r0, r6
 8004f50:	2802      	cmp	r0, #2
 8004f52:	d9f6      	bls.n	8004f42 <HAL_RCC_OscConfig+0x33a>
 8004f54:	e6e9      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fe fb8b 	bl	8003670 <HAL_GetTick>
 8004f5a:	1b80      	subs	r0, r0, r6
 8004f5c:	2864      	cmp	r0, #100	@ 0x64
 8004f5e:	f67f ae9c 	bls.w	8004c9a <HAL_RCC_OscConfig+0x92>
 8004f62:	e6e2      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	b9b3      	cbnz	r3, 8004f94 <HAL_RCC_OscConfig+0x38c>
 8004f66:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	672b      	str	r3, [r5, #112]	@ 0x70
 8004f72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fb79 	bl	8003670 <HAL_GetTick>
 8004f7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f80:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004f82:	0798      	lsls	r0, r3, #30
 8004f84:	f57f aea0 	bpl.w	8004cc8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fe fb72 	bl	8003670 <HAL_GetTick>
 8004f8c:	1b80      	subs	r0, r0, r6
 8004f8e:	42b8      	cmp	r0, r7
 8004f90:	d9f6      	bls.n	8004f80 <HAL_RCC_OscConfig+0x378>
 8004f92:	e6ca      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004f98:	d103      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x39a>
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	672b      	str	r3, [r5, #112]	@ 0x70
 8004fa0:	e684      	b.n	8004cac <HAL_RCC_OscConfig+0xa4>
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	672b      	str	r3, [r5, #112]	@ 0x70
 8004fa8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	e680      	b.n	8004cb2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fe fb5e 	bl	8003670 <HAL_GetTick>
 8004fb4:	1b40      	subs	r0, r0, r5
 8004fb6:	42b8      	cmp	r0, r7
 8004fb8:	f67f ae82 	bls.w	8004cc0 <HAL_RCC_OscConfig+0xb8>
 8004fbc:	e6b5      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fbe:	4d65      	ldr	r5, [pc, #404]	@ (8005154 <HAL_RCC_OscConfig+0x54c>)
 8004fc0:	692b      	ldr	r3, [r5, #16]
 8004fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc6:	2b18      	cmp	r3, #24
 8004fc8:	d078      	beq.n	80050bc <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8004fca:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fcc:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8004fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd2:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd4:	d165      	bne.n	80050a2 <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 8004fd6:	f7fe fb4b 	bl	8003670 <HAL_GetTick>
 8004fda:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	0199      	lsls	r1, r3, #6
 8004fe0:	d459      	bmi.n	8005096 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fe2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004fe4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004fe6:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ff2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004ff6:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ffa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	3a01      	subs	r2, #1
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	0412      	lsls	r2, r2, #16
 8005004:	b29b      	uxth	r3, r3
 8005006:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800500a:	4313      	orrs	r3, r2
 800500c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800500e:	3a01      	subs	r2, #1
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	4313      	orrs	r3, r2
 8005016:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005018:	3a01      	subs	r2, #1
 800501a:	0612      	lsls	r2, r2, #24
 800501c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005020:	4313      	orrs	r3, r2
 8005022:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8005024:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800502c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800502e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8005030:	f36f 03cf 	bfc	r3, #3, #13
 8005034:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005038:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800503a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800503c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800503e:	f023 030c 	bic.w	r3, r3, #12
 8005042:	4313      	orrs	r3, r2
 8005044:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005046:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005048:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800504a:	f023 0302 	bic.w	r3, r3, #2
 800504e:	4313      	orrs	r3, r2
 8005050:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005052:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800505c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005060:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005062:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005068:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800506a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005072:	682b      	ldr	r3, [r5, #0]
 8005074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005078:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800507a:	f7fe faf9 	bl	8003670 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800507e:	4d35      	ldr	r5, [pc, #212]	@ (8005154 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8005080:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	019a      	lsls	r2, r3, #6
 8005086:	f53f ae23 	bmi.w	8004cd0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fe faf1 	bl	8003670 <HAL_GetTick>
 800508e:	1b00      	subs	r0, r0, r4
 8005090:	2802      	cmp	r0, #2
 8005092:	d9f6      	bls.n	8005082 <HAL_RCC_OscConfig+0x47a>
 8005094:	e649      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005096:	f7fe faeb 	bl	8003670 <HAL_GetTick>
 800509a:	1b80      	subs	r0, r0, r6
 800509c:	2802      	cmp	r0, #2
 800509e:	d99d      	bls.n	8004fdc <HAL_RCC_OscConfig+0x3d4>
 80050a0:	e643      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80050a2:	f7fe fae5 	bl	8003670 <HAL_GetTick>
 80050a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	019b      	lsls	r3, r3, #6
 80050ac:	f57f ae10 	bpl.w	8004cd0 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fe fade 	bl	8003670 <HAL_GetTick>
 80050b4:	1b00      	subs	r0, r0, r4
 80050b6:	2802      	cmp	r0, #2
 80050b8:	d9f6      	bls.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
 80050ba:	e636      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050bc:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050be:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050c0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c2:	f43f ae1a 	beq.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80050cc:	4281      	cmp	r1, r0
 80050ce:	f47f ae14 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80050d8:	428a      	cmp	r2, r1
 80050da:	f47f ae0e 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80050e0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80050e4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050e6:	4291      	cmp	r1, r2
 80050e8:	f47f ae07 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80050ee:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80050f2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050f4:	4291      	cmp	r1, r2
 80050f6:	f47f ae00 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80050fc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8005100:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005102:	4291      	cmp	r1, r2
 8005104:	f47f adf9 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005108:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800510a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800510e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005110:	4293      	cmp	r3, r2
 8005112:	f47f adf2 	bne.w	8004cfa <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005116:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005118:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800511a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800511e:	429a      	cmp	r2, r3
 8005120:	f43f add6 	beq.w	8004cd0 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8005124:	4d0b      	ldr	r5, [pc, #44]	@ (8005154 <HAL_RCC_OscConfig+0x54c>)
 8005126:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800512e:	f7fe fa9f 	bl	8003670 <HAL_GetTick>
 8005132:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005134:	f7fe fa9c 	bl	8003670 <HAL_GetTick>
 8005138:	42b0      	cmp	r0, r6
 800513a:	d0fb      	beq.n	8005134 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800513c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800513e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8005140:	f36f 03cf 	bfc	r3, #3, #13
 8005144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005148:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800514a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8005152:	e5bd      	b.n	8004cd0 <HAL_RCC_OscConfig+0xc8>
 8005154:	58024400 	.word	0x58024400

08005158 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005158:	4b49      	ldr	r3, [pc, #292]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x128>)
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8005160:	2a10      	cmp	r2, #16
{
 8005162:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005164:	f000 8088 	beq.w	8005278 <HAL_RCC_GetSysClockFreq+0x120>
 8005168:	2a18      	cmp	r2, #24
 800516a:	d00c      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x2e>
 800516c:	2a00      	cmp	r2, #0
 800516e:	f040 8085 	bne.w	800527c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4843      	ldr	r0, [pc, #268]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005176:	f012 0f20 	tst.w	r2, #32
 800517a:	d003      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005182:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005184:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005186:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005188:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800518a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800518c:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005190:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8005196:	d0f5      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005198:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800519c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051a0:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a4:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051a8:	4362      	muls	r2, r4
 80051aa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 80051ae:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b4:	ee06 2a90 	vmov	s13, r2
 80051b8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 80051bc:	d04e      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x104>
 80051be:	2902      	cmp	r1, #2
 80051c0:	d03e      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0xe8>
 80051c2:	2900      	cmp	r1, #0
 80051c4:	d14a      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d527      	bpl.n	800521c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	6819      	ldr	r1, [r3, #0]
 80051ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x12c>)
 80051d0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d6:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051dc:	ee07 2a90 	vmov	s15, r2
 80051e0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80051e4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80051e8:	ee07 3a10 	vmov	s14, r3
 80051ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80051f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051fc:	4b20      	ldr	r3, [pc, #128]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x128>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005204:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005206:	ee07 3a10 	vmov	s14, r3
 800520a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800520e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005212:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005216:	ee17 0a90 	vmov	r0, s15
 800521a:	e7b3      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005232:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005288 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005236:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800523a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800523e:	e7dd      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005256:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800528c <HAL_RCC_GetSysClockFreq+0x134>
 800525a:	e7ec      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005272:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005290 <HAL_RCC_GetSysClockFreq+0x138>
 8005276:	e7de      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005278:	4806      	ldr	r0, [pc, #24]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x13c>)
 800527a:	e783      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800527c:	4806      	ldr	r0, [pc, #24]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x140>)
 800527e:	e781      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x2c>
 8005280:	58024400 	.word	0x58024400
 8005284:	03d09000 	.word	0x03d09000
 8005288:	4c742400 	.word	0x4c742400
 800528c:	4bbebc20 	.word	0x4bbebc20
 8005290:	4a742400 	.word	0x4a742400
 8005294:	017d7840 	.word	0x017d7840
 8005298:	003d0900 	.word	0x003d0900

0800529c <HAL_RCC_ClockConfig>:
{
 800529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80052a2:	4604      	mov	r4, r0
 80052a4:	b910      	cbnz	r0, 80052ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80052a6:	2001      	movs	r0, #1
}
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052ac:	4a88      	ldr	r2, [pc, #544]	@ (80054d0 <HAL_RCC_ClockConfig+0x234>)
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	428b      	cmp	r3, r1
 80052b6:	f0c0 8093 	bcc.w	80053e0 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	075f      	lsls	r7, r3, #29
 80052be:	f100 809b 	bmi.w	80053f8 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c2:	071e      	lsls	r6, r3, #28
 80052c4:	d50b      	bpl.n	80052de <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052c6:	4983      	ldr	r1, [pc, #524]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 80052c8:	6960      	ldr	r0, [r4, #20]
 80052ca:	69ca      	ldr	r2, [r1, #28]
 80052cc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80052d0:	4290      	cmp	r0, r2
 80052d2:	d904      	bls.n	80052de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052d4:	69ca      	ldr	r2, [r1, #28]
 80052d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80052da:	4302      	orrs	r2, r0
 80052dc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	06d8      	lsls	r0, r3, #27
 80052e0:	d50b      	bpl.n	80052fa <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052e2:	497c      	ldr	r1, [pc, #496]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 80052e4:	69a0      	ldr	r0, [r4, #24]
 80052e6:	69ca      	ldr	r2, [r1, #28]
 80052e8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80052ec:	4290      	cmp	r0, r2
 80052ee:	d904      	bls.n	80052fa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052f0:	69ca      	ldr	r2, [r1, #28]
 80052f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052f6:	4302      	orrs	r2, r0
 80052f8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052fa:	0699      	lsls	r1, r3, #26
 80052fc:	d50b      	bpl.n	8005316 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052fe:	4975      	ldr	r1, [pc, #468]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005300:	69e0      	ldr	r0, [r4, #28]
 8005302:	6a0a      	ldr	r2, [r1, #32]
 8005304:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005308:	4290      	cmp	r0, r2
 800530a:	d904      	bls.n	8005316 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800530c:	6a0a      	ldr	r2, [r1, #32]
 800530e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005312:	4302      	orrs	r2, r0
 8005314:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005316:	079a      	lsls	r2, r3, #30
 8005318:	d50b      	bpl.n	8005332 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800531a:	496e      	ldr	r1, [pc, #440]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 800531c:	68e0      	ldr	r0, [r4, #12]
 800531e:	698a      	ldr	r2, [r1, #24]
 8005320:	f002 020f 	and.w	r2, r2, #15
 8005324:	4290      	cmp	r0, r2
 8005326:	d904      	bls.n	8005332 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005328:	698a      	ldr	r2, [r1, #24]
 800532a:	f022 020f 	bic.w	r2, r2, #15
 800532e:	4302      	orrs	r2, r0
 8005330:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005332:	07df      	lsls	r7, r3, #31
 8005334:	d46e      	bmi.n	8005414 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	079e      	lsls	r6, r3, #30
 800533a:	f100 80a1 	bmi.w	8005480 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800533e:	4964      	ldr	r1, [pc, #400]	@ (80054d0 <HAL_RCC_ClockConfig+0x234>)
 8005340:	680a      	ldr	r2, [r1, #0]
 8005342:	f002 020f 	and.w	r2, r2, #15
 8005346:	42aa      	cmp	r2, r5
 8005348:	f200 80a8 	bhi.w	800549c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800534c:	0758      	lsls	r0, r3, #29
 800534e:	f100 80b1 	bmi.w	80054b4 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005352:	0719      	lsls	r1, r3, #28
 8005354:	d50b      	bpl.n	800536e <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005356:	495f      	ldr	r1, [pc, #380]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005358:	6960      	ldr	r0, [r4, #20]
 800535a:	69ca      	ldr	r2, [r1, #28]
 800535c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005360:	4290      	cmp	r0, r2
 8005362:	d204      	bcs.n	800536e <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005364:	69ca      	ldr	r2, [r1, #28]
 8005366:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800536a:	4302      	orrs	r2, r0
 800536c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536e:	06da      	lsls	r2, r3, #27
 8005370:	d50b      	bpl.n	800538a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005372:	4958      	ldr	r1, [pc, #352]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005374:	69a0      	ldr	r0, [r4, #24]
 8005376:	69ca      	ldr	r2, [r1, #28]
 8005378:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800537c:	4290      	cmp	r0, r2
 800537e:	d204      	bcs.n	800538a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005380:	69ca      	ldr	r2, [r1, #28]
 8005382:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005386:	4302      	orrs	r2, r0
 8005388:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800538a:	069b      	lsls	r3, r3, #26
 800538c:	d50b      	bpl.n	80053a6 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800538e:	4a51      	ldr	r2, [pc, #324]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005390:	69e1      	ldr	r1, [r4, #28]
 8005392:	6a13      	ldr	r3, [r2, #32]
 8005394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005398:	4299      	cmp	r1, r3
 800539a:	d204      	bcs.n	80053a6 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800539c:	6a13      	ldr	r3, [r2, #32]
 800539e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a2:	430b      	orrs	r3, r1
 80053a4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053a6:	f7ff fed7 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 80053aa:	494a      	ldr	r1, [pc, #296]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 80053ac:	4a4a      	ldr	r2, [pc, #296]	@ (80054d8 <HAL_RCC_ClockConfig+0x23c>)
 80053ae:	698b      	ldr	r3, [r1, #24]
 80053b0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80053b4:	5cd3      	ldrb	r3, [r2, r3]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053bc:	698b      	ldr	r3, [r1, #24]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	5cd3      	ldrb	r3, [r2, r3]
 80053c4:	4a45      	ldr	r2, [pc, #276]	@ (80054dc <HAL_RCC_ClockConfig+0x240>)
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	fa20 f303 	lsr.w	r3, r0, r3
 80053ce:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80053d0:	4b43      	ldr	r3, [pc, #268]	@ (80054e0 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80053d4:	4b43      	ldr	r3, [pc, #268]	@ (80054e4 <HAL_RCC_ClockConfig+0x248>)
}
 80053d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	f7fe b8e8 	b.w	80035b0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	f023 030f 	bic.w	r3, r3, #15
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	428b      	cmp	r3, r1
 80053f2:	f47f af58 	bne.w	80052a6 <HAL_RCC_ClockConfig+0xa>
 80053f6:	e760      	b.n	80052ba <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053f8:	4936      	ldr	r1, [pc, #216]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 80053fa:	6920      	ldr	r0, [r4, #16]
 80053fc:	698a      	ldr	r2, [r1, #24]
 80053fe:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005402:	4290      	cmp	r0, r2
 8005404:	f67f af5d 	bls.w	80052c2 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005408:	698a      	ldr	r2, [r1, #24]
 800540a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800540e:	4302      	orrs	r2, r0
 8005410:	618a      	str	r2, [r1, #24]
 8005412:	e756      	b.n	80052c2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005414:	4b2f      	ldr	r3, [pc, #188]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005416:	68a1      	ldr	r1, [r4, #8]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800541e:	430a      	orrs	r2, r1
 8005420:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005422:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005424:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005426:	2902      	cmp	r1, #2
 8005428:	d11d      	bne.n	8005466 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800542a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542e:	f43f af3a 	beq.w	80052a6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005432:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005438:	4f26      	ldr	r7, [pc, #152]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800543a:	f022 0207 	bic.w	r2, r2, #7
 800543e:	430a      	orrs	r2, r1
 8005440:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8005442:	f7fe f915 	bl	8003670 <HAL_GetTick>
 8005446:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005450:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005454:	f43f af6f 	beq.w	8005336 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fe f90a 	bl	8003670 <HAL_GetTick>
 800545c:	1b80      	subs	r0, r0, r6
 800545e:	4540      	cmp	r0, r8
 8005460:	d9f2      	bls.n	8005448 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8005462:	2003      	movs	r0, #3
 8005464:	e720      	b.n	80052a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005466:	2903      	cmp	r1, #3
 8005468:	d102      	bne.n	8005470 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800546a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800546e:	e7de      	b.n	800542e <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005470:	2901      	cmp	r1, #1
 8005472:	d102      	bne.n	800547a <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005474:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005478:	e7d9      	b.n	800542e <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547a:	f012 0f04 	tst.w	r2, #4
 800547e:	e7d6      	b.n	800542e <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005480:	4914      	ldr	r1, [pc, #80]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 8005482:	68e0      	ldr	r0, [r4, #12]
 8005484:	698a      	ldr	r2, [r1, #24]
 8005486:	f002 020f 	and.w	r2, r2, #15
 800548a:	4290      	cmp	r0, r2
 800548c:	f4bf af57 	bcs.w	800533e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005490:	698a      	ldr	r2, [r1, #24]
 8005492:	f022 020f 	bic.w	r2, r2, #15
 8005496:	4302      	orrs	r2, r0
 8005498:	618a      	str	r2, [r1, #24]
 800549a:	e750      	b.n	800533e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549c:	680a      	ldr	r2, [r1, #0]
 800549e:	f022 020f 	bic.w	r2, r2, #15
 80054a2:	432a      	orrs	r2, r5
 80054a4:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	680a      	ldr	r2, [r1, #0]
 80054a8:	f002 020f 	and.w	r2, r2, #15
 80054ac:	42aa      	cmp	r2, r5
 80054ae:	f47f aefa 	bne.w	80052a6 <HAL_RCC_ClockConfig+0xa>
 80054b2:	e74b      	b.n	800534c <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054b4:	4907      	ldr	r1, [pc, #28]	@ (80054d4 <HAL_RCC_ClockConfig+0x238>)
 80054b6:	6920      	ldr	r0, [r4, #16]
 80054b8:	698a      	ldr	r2, [r1, #24]
 80054ba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80054be:	4290      	cmp	r0, r2
 80054c0:	f4bf af47 	bcs.w	8005352 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054c4:	698a      	ldr	r2, [r1, #24]
 80054c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80054ca:	4302      	orrs	r2, r0
 80054cc:	618a      	str	r2, [r1, #24]
 80054ce:	e740      	b.n	8005352 <HAL_RCC_ClockConfig+0xb6>
 80054d0:	52002000 	.word	0x52002000
 80054d4:	58024400 	.word	0x58024400
 80054d8:	08012a28 	.word	0x08012a28
 80054dc:	24000070 	.word	0x24000070
 80054e0:	24000074 	.word	0x24000074
 80054e4:	2400007c 	.word	0x2400007c

080054e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e8:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054ea:	f7ff fe35 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 80054ee:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <HAL_RCC_GetHCLKFreq+0x34>)
 80054f0:	490b      	ldr	r1, [pc, #44]	@ (8005520 <HAL_RCC_GetHCLKFreq+0x38>)
 80054f2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054f4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054f6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054fa:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005508:	5c88      	ldrb	r0, [r1, r2]
 800550a:	4a06      	ldr	r2, [pc, #24]	@ (8005524 <HAL_RCC_GetHCLKFreq+0x3c>)
 800550c:	f000 001f 	and.w	r0, r0, #31
 8005510:	fa23 f000 	lsr.w	r0, r3, r0
 8005514:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005516:	4a04      	ldr	r2, [pc, #16]	@ (8005528 <HAL_RCC_GetHCLKFreq+0x40>)
 8005518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800551a:	bd08      	pop	{r3, pc}
 800551c:	58024400 	.word	0x58024400
 8005520:	08012a28 	.word	0x08012a28
 8005524:	24000070 	.word	0x24000070
 8005528:	24000074 	.word	0x24000074

0800552c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800552c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800552e:	f7ff ffdb 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8005532:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005534:	4a05      	ldr	r2, [pc, #20]	@ (800554c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800553c:	5cd3      	ldrb	r3, [r2, r3]
 800553e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005542:	40d8      	lsrs	r0, r3
 8005544:	bd08      	pop	{r3, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	08012a28 	.word	0x08012a28

08005550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005550:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005552:	f7ff ffc9 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8005556:	4b05      	ldr	r3, [pc, #20]	@ (800556c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005558:	4a05      	ldr	r2, [pc, #20]	@ (8005570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005560:	5cd3      	ldrb	r3, [r2, r3]
 8005562:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005566:	40d8      	lsrs	r0, r3
 8005568:	bd08      	pop	{r3, pc}
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	08012a28 	.word	0x08012a28

08005574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005576:	4c39      	ldr	r4, [pc, #228]	@ (800565c <RCCEx_PLL2_Config+0xe8>)
{
 8005578:	4606      	mov	r6, r0
 800557a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d067      	beq.n	8005656 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800558c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558e:	f7fe f86f 	bl	8003670 <HAL_GetTick>
 8005592:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	011a      	lsls	r2, r3, #4
 8005598:	d449      	bmi.n	800562e <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800559a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800559c:	6832      	ldr	r2, [r6, #0]
 800559e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80055a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80055a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055a8:	68b3      	ldr	r3, [r6, #8]
 80055aa:	68f2      	ldr	r2, [r6, #12]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	3a01      	subs	r2, #1
 80055b0:	025b      	lsls	r3, r3, #9
 80055b2:	0412      	lsls	r2, r2, #16
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80055ba:	4313      	orrs	r3, r2
 80055bc:	6872      	ldr	r2, [r6, #4]
 80055be:	3a01      	subs	r2, #1
 80055c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c4:	4313      	orrs	r3, r2
 80055c6:	6932      	ldr	r2, [r6, #16]
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0612      	lsls	r2, r2, #24
 80055cc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80055d0:	4313      	orrs	r3, r2
 80055d2:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80055d6:	6972      	ldr	r2, [r6, #20]
 80055d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055dc:	4313      	orrs	r3, r2
 80055de:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80055e2:	69b2      	ldr	r2, [r6, #24]
 80055e4:	f023 0320 	bic.w	r3, r3, #32
 80055e8:	4313      	orrs	r3, r2
 80055ea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80055ee:	f023 0310 	bic.w	r3, r3, #16
 80055f2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80055f6:	69f2      	ldr	r2, [r6, #28]
 80055f8:	f36f 03cf 	bfc	r3, #3, #13
 80055fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005600:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005602:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005604:	f043 0310 	orr.w	r3, r3, #16
 8005608:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800560a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800560c:	b9b5      	cbnz	r5, 800563c <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800560e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005612:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005614:	4c11      	ldr	r4, [pc, #68]	@ (800565c <RCCEx_PLL2_Config+0xe8>)
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800561c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561e:	f7fe f827 	bl	8003670 <HAL_GetTick>
 8005622:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	d50f      	bpl.n	800564a <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800562a:	2000      	movs	r0, #0
 800562c:	e005      	b.n	800563a <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800562e:	f7fe f81f 	bl	8003670 <HAL_GetTick>
 8005632:	1bc0      	subs	r0, r0, r7
 8005634:	2802      	cmp	r0, #2
 8005636:	d9ad      	bls.n	8005594 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8005638:	2003      	movs	r0, #3
}
 800563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800563c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800563e:	bf0c      	ite	eq
 8005640:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005644:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8005648:	e7e3      	b.n	8005612 <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800564a:	f7fe f811 	bl	8003670 <HAL_GetTick>
 800564e:	1b40      	subs	r0, r0, r5
 8005650:	2802      	cmp	r0, #2
 8005652:	d9e7      	bls.n	8005624 <RCCEx_PLL2_Config+0xb0>
 8005654:	e7f0      	b.n	8005638 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 8005656:	2001      	movs	r0, #1
 8005658:	e7ef      	b.n	800563a <RCCEx_PLL2_Config+0xc6>
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400

08005660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005662:	4c39      	ldr	r4, [pc, #228]	@ (8005748 <RCCEx_PLL3_Config+0xe8>)
{
 8005664:	4606      	mov	r6, r0
 8005666:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005668:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b03      	cmp	r3, #3
 8005670:	d067      	beq.n	8005742 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005678:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567a:	f7fd fff9 	bl	8003670 <HAL_GetTick>
 800567e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	009a      	lsls	r2, r3, #2
 8005684:	d449      	bmi.n	800571a <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005686:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005688:	6832      	ldr	r2, [r6, #0]
 800568a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800568e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005692:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005694:	68b3      	ldr	r3, [r6, #8]
 8005696:	68f2      	ldr	r2, [r6, #12]
 8005698:	3b01      	subs	r3, #1
 800569a:	3a01      	subs	r2, #1
 800569c:	025b      	lsls	r3, r3, #9
 800569e:	0412      	lsls	r2, r2, #16
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	6872      	ldr	r2, [r6, #4]
 80056aa:	3a01      	subs	r2, #1
 80056ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b0:	4313      	orrs	r3, r2
 80056b2:	6932      	ldr	r2, [r6, #16]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0612      	lsls	r2, r2, #24
 80056b8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80056bc:	4313      	orrs	r3, r2
 80056be:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056c2:	6972      	ldr	r2, [r6, #20]
 80056c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056c8:	4313      	orrs	r3, r2
 80056ca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80056cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056ce:	69b2      	ldr	r2, [r6, #24]
 80056d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056d4:	4313      	orrs	r3, r2
 80056d6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80056d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056de:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80056e2:	69f2      	ldr	r2, [r6, #28]
 80056e4:	f36f 03cf 	bfc	r3, #3, #13
 80056e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80056ec:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80056f8:	b9b5      	cbnz	r5, 8005728 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005700:	4c11      	ldr	r4, [pc, #68]	@ (8005748 <RCCEx_PLL3_Config+0xe8>)
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005708:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570a:	f7fd ffb1 	bl	8003670 <HAL_GetTick>
 800570e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	d50f      	bpl.n	8005736 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 8005716:	2000      	movs	r0, #0
 8005718:	e005      	b.n	8005726 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800571a:	f7fd ffa9 	bl	8003670 <HAL_GetTick>
 800571e:	1bc0      	subs	r0, r0, r7
 8005720:	2802      	cmp	r0, #2
 8005722:	d9ad      	bls.n	8005680 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8005724:	2003      	movs	r0, #3
}
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005728:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800572a:	bf0c      	ite	eq
 800572c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005730:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8005734:	e7e3      	b.n	80056fe <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005736:	f7fd ff9b 	bl	8003670 <HAL_GetTick>
 800573a:	1b40      	subs	r0, r0, r5
 800573c:	2802      	cmp	r0, #2
 800573e:	d9e7      	bls.n	8005710 <RCCEx_PLL3_Config+0xb0>
 8005740:	e7f0      	b.n	8005724 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 8005742:	2001      	movs	r0, #1
 8005744:	e7ef      	b.n	8005726 <RCCEx_PLL3_Config+0xc6>
 8005746:	bf00      	nop
 8005748:	58024400 	.word	0x58024400

0800574c <HAL_RCCEx_PeriphCLKConfig>:
{
 800574c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005750:	6803      	ldr	r3, [r0, #0]
{
 8005752:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005754:	0118      	lsls	r0, r3, #4
 8005756:	d51e      	bpl.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005758:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800575a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800575e:	d02b      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005760:	d80f      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8005762:	b1d3      	cbz	r3, 800579a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005768:	d01d      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800576a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	05d9      	lsls	r1, r3, #23
 8005770:	d551      	bpl.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005772:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8005774:	2b04      	cmp	r3, #4
 8005776:	d84d      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8005778:	e8df f003 	tbb	[pc, r3]
 800577c:	29463f24 	.word	0x29463f24
 8005780:	29          	.byte	0x29
 8005781:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005782:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005786:	d1f0      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005788:	4a85      	ldr	r2, [pc, #532]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800578a:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800578c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800578e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005792:	430b      	orrs	r3, r1
 8005794:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005796:	2600      	movs	r6, #0
 8005798:	e7e8      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579a:	4a81      	ldr	r2, [pc, #516]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800579c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80057a4:	e7f0      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a6:	2102      	movs	r1, #2
 80057a8:	f105 0008 	add.w	r0, r5, #8
 80057ac:	f7ff fee2 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057b0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d1da      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x20>
 80057b6:	e7e7      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057b8:	2102      	movs	r1, #2
 80057ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80057be:	f7ff ff4f 	bl	8005660 <RCCEx_PLL3_Config>
 80057c2:	e7f5      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c4:	4a76      	ldr	r2, [pc, #472]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80057c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 80057ce:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 80057d0:	bb1c      	cbnz	r4, 800581a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d2:	4a73      	ldr	r2, [pc, #460]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80057d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80057d8:	f023 0307 	bic.w	r3, r3, #7
 80057dc:	430b      	orrs	r3, r1
 80057de:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	059a      	lsls	r2, r3, #22
 80057e4:	d528      	bpl.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 80057e6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80057e8:	2b80      	cmp	r3, #128	@ 0x80
 80057ea:	d043      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80057ec:	d817      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80057ee:	b3a3      	cbz	r3, 800585a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d038      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80057f4:	2601      	movs	r6, #1
 80057f6:	4634      	mov	r4, r6
 80057f8:	e01e      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057fa:	2100      	movs	r1, #0
 80057fc:	f105 0008 	add.w	r0, r5, #8
 8005800:	f7ff feb8 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005804:	4604      	mov	r4, r0
        break;
 8005806:	e7e3      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005808:	2100      	movs	r1, #0
 800580a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800580e:	f7ff ff27 	bl	8005660 <RCCEx_PLL3_Config>
 8005812:	e7f7      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005814:	2601      	movs	r6, #1
 8005816:	4634      	mov	r4, r6
 8005818:	e7e2      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      status = ret;
 800581a:	4626      	mov	r6, r4
 800581c:	e7e0      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 800581e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005820:	d002      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005826:	d1e5      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8005828:	bb54      	cbnz	r4, 8005880 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800582a:	4a5d      	ldr	r2, [pc, #372]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800582c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800582e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005830:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8005834:	430b      	orrs	r3, r1
 8005836:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	055b      	lsls	r3, r3, #21
 800583c:	d531      	bpl.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 800583e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 8005842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005846:	d049      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005848:	d81c      	bhi.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d039      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 800584e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005852:	d03c      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005854:	2601      	movs	r6, #1
 8005856:	4634      	mov	r4, r6
 8005858:	e023      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585a:	4a51      	ldr	r2, [pc, #324]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800585c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800585e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005862:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005864:	e7e0      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005866:	2100      	movs	r1, #0
 8005868:	f105 0008 	add.w	r0, r5, #8
 800586c:	f7ff fe82 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005870:	4604      	mov	r4, r0
        break;
 8005872:	e7d9      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005874:	2100      	movs	r1, #0
 8005876:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800587a:	f7ff fef1 	bl	8005660 <RCCEx_PLL3_Config>
 800587e:	e7f7      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x124>
      status = ret;
 8005880:	4626      	mov	r6, r4
 8005882:	e7d9      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005884:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005888:	d002      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800588a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800588e:	d1e1      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8005890:	bb54      	cbnz	r4, 80058e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005892:	4a43      	ldr	r2, [pc, #268]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005894:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8005898:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800589a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800589e:	430b      	orrs	r3, r1
 80058a0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	051f      	lsls	r7, r3, #20
 80058a6:	d530      	bpl.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 80058a8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80058ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058b0:	d045      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80058b2:	d81b      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80058b4:	b3b3      	cbz	r3, 8005924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80058b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ba:	d039      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80058bc:	2601      	movs	r6, #1
 80058be:	4634      	mov	r4, r6
 80058c0:	e023      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c2:	4a37      	ldr	r2, [pc, #220]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058c4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80058c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80058cc:	e7e0      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ce:	2100      	movs	r1, #0
 80058d0:	f105 0008 	add.w	r0, r5, #8
 80058d4:	f7ff fe4e 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058d8:	4604      	mov	r4, r0
        break;
 80058da:	e7d9      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058dc:	2100      	movs	r1, #0
 80058de:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80058e2:	f7ff febd 	bl	8005660 <RCCEx_PLL3_Config>
 80058e6:	e7f7      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      status = ret;
 80058e8:	4626      	mov	r6, r4
 80058ea:	e7da      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 80058ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058f0:	d002      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f6:	d1e1      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 80058f8:	bb3c      	cbnz	r4, 800594a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058fa:	4a29      	ldr	r2, [pc, #164]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058fc:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8005900:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005902:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005906:	430b      	orrs	r3, r1
 8005908:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	0198      	lsls	r0, r3, #6
 800590e:	d528      	bpl.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8005910:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8005912:	2b20      	cmp	r3, #32
 8005914:	d03b      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005916:	d81a      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005918:	b1db      	cbz	r3, 8005952 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800591a:	2b10      	cmp	r3, #16
 800591c:	d031      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800591e:	2601      	movs	r6, #1
 8005920:	4634      	mov	r4, r6
 8005922:	e01e      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005924:	4a1e      	ldr	r2, [pc, #120]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005926:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800592e:	e7e3      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005930:	2100      	movs	r1, #0
 8005932:	f105 0008 	add.w	r0, r5, #8
 8005936:	f7ff fe1d 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800593a:	4604      	mov	r4, r0
        break;
 800593c:	e7dc      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800593e:	2100      	movs	r1, #0
 8005940:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005944:	f7ff fe8c 	bl	8005660 <RCCEx_PLL3_Config>
 8005948:	e7f7      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 800594a:	4626      	mov	r6, r4
 800594c:	e7dd      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 800594e:	2b30      	cmp	r3, #48	@ 0x30
 8005950:	d1e5      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8005952:	bb1c      	cbnz	r4, 800599c <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005954:	4a12      	ldr	r2, [pc, #72]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005956:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005958:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800595a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800595e:	430b      	orrs	r3, r1
 8005960:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	04d9      	lsls	r1, r3, #19
 8005966:	d52c      	bpl.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005968:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800596a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596e:	d074      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005970:	d818      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d064      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d067      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800597c:	2601      	movs	r6, #1
 800597e:	4634      	mov	r4, r6
 8005980:	e01f      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005982:	4a07      	ldr	r2, [pc, #28]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005984:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800598c:	e7e1      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800598e:	2102      	movs	r1, #2
 8005990:	f105 0008 	add.w	r0, r5, #8
 8005994:	f7ff fdee 	bl	8005574 <RCCEx_PLL2_Config>
 8005998:	4604      	mov	r4, r0
        break;
 800599a:	e7da      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x206>
      status = ret;
 800599c:	4626      	mov	r6, r4
 800599e:	e7e0      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x216>
 80059a0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 80059a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059a8:	d002      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80059aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ae:	d1e5      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	d158      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059b4:	4a9d      	ldr	r2, [pc, #628]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80059b6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80059b8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059be:	430b      	orrs	r3, r1
 80059c0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	049a      	lsls	r2, r3, #18
 80059c6:	d50b      	bpl.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 80059c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ce:	d064      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80059d0:	d84b      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d051      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80059d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059da:	d057      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x340>
 80059dc:	2601      	movs	r6, #1
 80059de:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	045b      	lsls	r3, r3, #17
 80059e4:	d50c      	bpl.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80059e6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80059ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ee:	d075      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x390>
 80059f0:	d85b      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d061      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80059f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059fa:	d068      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x382>
 80059fc:	2601      	movs	r6, #1
 80059fe:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	041f      	lsls	r7, r3, #16
 8005a04:	d511      	bpl.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8005a06:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005a08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0c:	d06e      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a12:	d071      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d176      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if (ret == HAL_OK)
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d177      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a1c:	4a83      	ldr	r2, [pc, #524]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005a1e:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8005a20:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005a22:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005a26:	430b      	orrs	r3, r1
 8005a28:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	01d8      	lsls	r0, r3, #7
 8005a2e:	d57d      	bpl.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->FmcClockSelection)
 8005a30:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	f200 80bf 	bhi.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8005a38:	e8df f003 	tbb	[pc, r3]
 8005a3c:	6fb66a6f 	.word	0x6fb66a6f
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a40:	4a7a      	ldr	r2, [pc, #488]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005a42:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005a4a:	e7b1      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f105 0008 	add.w	r0, r5, #8
 8005a52:	f7ff fd8f 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a56:	4604      	mov	r4, r0
        break;
 8005a58:	e7aa      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005a60:	f7ff fdfe 	bl	8005660 <RCCEx_PLL3_Config>
 8005a64:	e7f7      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      status = ret;
 8005a66:	4626      	mov	r6, r4
 8005a68:	e7ab      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a6e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005a72:	d002      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a78:	d1b0      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8005a7a:	b9a4      	cbnz	r4, 8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005a7e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8005a80:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005a82:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8a:	e7a9      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	f105 0008 	add.w	r0, r5, #8
 8005a92:	f7ff fd6f 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a96:	4604      	mov	r4, r0
        break;
 8005a98:	e7ef      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005aa0:	f7ff fdde 	bl	8005660 <RCCEx_PLL3_Config>
 8005aa4:	e7f7      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      status = ret;
 8005aa6:	4626      	mov	r6, r4
 8005aa8:	e79a      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005aaa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005aae:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005ab2:	d002      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005ab4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ab8:	d1a0      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8005aba:	b9ac      	cbnz	r4, 8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005abc:	4a5b      	ldr	r2, [pc, #364]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005abe:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 8005ac2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ac4:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005acc:	e798      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ace:	2101      	movs	r1, #1
 8005ad0:	f105 0008 	add.w	r0, r5, #8
 8005ad4:	f7ff fd4e 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ad8:	4604      	mov	r4, r0
        break;
 8005ada:	e7ee      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005adc:	2101      	movs	r1, #1
 8005ade:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005ae2:	f7ff fdbd 	bl	8005660 <RCCEx_PLL3_Config>
 8005ae6:	e7f7      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      status = ret;
 8005ae8:	4626      	mov	r6, r4
 8005aea:	e789      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4a4f      	ldr	r2, [pc, #316]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005aee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005af6:	e78f      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005af8:	2101      	movs	r1, #1
 8005afa:	f105 0008 	add.w	r0, r5, #8
 8005afe:	f7ff fd39 	bl	8005574 <RCCEx_PLL2_Config>
 8005b02:	4604      	mov	r4, r0
        break;
 8005b04:	e788      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8005b06:	2601      	movs	r6, #1
 8005b08:	4634      	mov	r4, r6
 8005b0a:	e78e      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      status = ret;
 8005b0c:	4626      	mov	r6, r4
 8005b0e:	e78c      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b10:	4a46      	ldr	r2, [pc, #280]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b12:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d14e      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x470>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b1e:	4a43      	ldr	r2, [pc, #268]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b20:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8005b22:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005b24:	f023 0303 	bic.w	r3, r3, #3
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	0259      	lsls	r1, r3, #9
 8005b30:	d54e      	bpl.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b32:	4f3f      	ldr	r7, [pc, #252]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b3a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005b3c:	f7fd fd98 	bl	8003670 <HAL_GetTick>
 8005b40:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	05da      	lsls	r2, r3, #23
 8005b46:	d53b      	bpl.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	d175      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b4c:	4b37      	ldr	r3, [pc, #220]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b4e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8005b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b54:	4042      	eors	r2, r0
 8005b56:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8005b5a:	d00b      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b5e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b64:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005b68:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b6c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005b70:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005b72:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b74:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005b78:	d042      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b7a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8005b7e:	492b      	ldr	r1, [pc, #172]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b80:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005b84:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005b88:	d14b      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8005b8a:	6908      	ldr	r0, [r1, #16]
 8005b8c:	4a29      	ldr	r2, [pc, #164]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8005b8e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8005b92:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005b96:	4302      	orrs	r2, r0
 8005b98:	610a      	str	r2, [r1, #16]
 8005b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9e:	4a23      	ldr	r2, [pc, #140]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005ba0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba6:	e013      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ba8:	2102      	movs	r1, #2
 8005baa:	f105 0008 	add.w	r0, r5, #8
 8005bae:	f7ff fce1 	bl	8005574 <RCCEx_PLL2_Config>
 8005bb2:	4604      	mov	r4, r0
        break;
 8005bb4:	e7b1      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch (PeriphClkInit->FmcClockSelection)
 8005bb6:	2601      	movs	r6, #1
 8005bb8:	4634      	mov	r4, r6
 8005bba:	e7b7      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      status = ret;
 8005bbc:	4626      	mov	r6, r4
 8005bbe:	e7b5      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc0:	f7fd fd56 	bl	8003670 <HAL_GetTick>
 8005bc4:	eba0 0008 	sub.w	r0, r0, r8
 8005bc8:	2864      	cmp	r0, #100	@ 0x64
 8005bca:	d9ba      	bls.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8005bcc:	2603      	movs	r6, #3
 8005bce:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	07d8      	lsls	r0, r3, #31
 8005bd4:	d509      	bpl.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005bd6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d045      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005bdc:	d82e      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d032      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d039      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005be6:	2601      	movs	r6, #1
 8005be8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bea:	682b      	ldr	r3, [r5, #0]
 8005bec:	0799      	lsls	r1, r3, #30
 8005bee:	d551      	bpl.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x548>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bf0:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	d864      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8005bf6:	e8df f003 	tbb	[pc, r3]
 8005bfa:	3f45      	.short	0x3f45
 8005bfc:	4545455d 	.word	0x4545455d
        tickstart = HAL_GetTick();
 8005c00:	f7fd fd36 	bl	8003670 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c04:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        tickstart = HAL_GetTick();
 8005c08:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c0e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005c12:	079b      	lsls	r3, r3, #30
 8005c14:	d4b1      	bmi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fd fd2b 	bl	8003670 <HAL_GetTick>
 8005c1a:	1bc0      	subs	r0, r0, r7
 8005c1c:	4548      	cmp	r0, r9
 8005c1e:	d9f6      	bls.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c20:	e7d4      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c22:	690a      	ldr	r2, [r1, #16]
 8005c24:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005c28:	e7b6      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	58024800 	.word	0x58024800
 8005c34:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8005c38:	4626      	mov	r6, r4
 8005c3a:	e7c9      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c3c:	f023 0208 	bic.w	r2, r3, #8
 8005c40:	2a20      	cmp	r2, #32
 8005c42:	d001      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c44:	2b18      	cmp	r3, #24
 8005c46:	d1ce      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    if (ret == HAL_OK)
 8005c48:	b9a4      	cbnz	r4, 8005c74 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c4a:	4a20      	ldr	r2, [pc, #128]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005c4c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8005c4e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005c50:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c58:	e7c7      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	f105 0008 	add.w	r0, r5, #8
 8005c60:	f7ff fc88 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c64:	4604      	mov	r4, r0
        break;
 8005c66:	e7ef      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c68:	2101      	movs	r1, #1
 8005c6a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005c6e:	f7ff fcf7 	bl	8005660 <RCCEx_PLL3_Config>
 8005c72:	e7f7      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x518>
      status = ret;
 8005c74:	4626      	mov	r6, r4
 8005c76:	e7b8      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c78:	2101      	movs	r1, #1
 8005c7a:	f105 0008 	add.w	r0, r5, #8
 8005c7e:	f7ff fc79 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c82:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005c84:	b9fc      	cbnz	r4, 8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c86:	4a11      	ldr	r2, [pc, #68]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005c88:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8005c8a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005c8c:	f023 0307 	bic.w	r3, r3, #7
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	075a      	lsls	r2, r3, #29
 8005c98:	d52b      	bpl.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c9a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	f200 816e 	bhi.w	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005ca4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ca8:	0014001a 	.word	0x0014001a
 8005cac:	001a0166 	.word	0x001a0166
 8005cb0:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005cba:	f7ff fcd1 	bl	8005660 <RCCEx_PLL3_Config>
 8005cbe:	e7e0      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cc0:	2601      	movs	r6, #1
 8005cc2:	4634      	mov	r4, r6
 8005cc4:	e7e6      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 8005cc6:	4626      	mov	r6, r4
 8005cc8:	e7e4      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	f105 0008 	add.w	r0, r5, #8
 8005cd6:	f7ff fc4d 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cda:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	f040 8152 	bne.w	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce2:	4aaa      	ldr	r2, [pc, #680]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ce4:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8005ce8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	069b      	lsls	r3, r3, #26
 8005cf6:	d510      	bpl.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005cf8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d00:	f000 8160 	beq.w	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8005d04:	f200 8144 	bhi.w	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 814a 	beq.w	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8005d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d12:	f000 8150 	beq.w	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8005d16:	2601      	movs	r6, #1
 8005d18:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	065f      	lsls	r7, r3, #25
 8005d1e:	d510      	bpl.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d20:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d28:	f000 816e 	beq.w	8006008 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005d2c:	f200 8152 	bhi.w	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8158 	beq.w	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3a:	f000 815e 	beq.w	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005d3e:	2601      	movs	r6, #1
 8005d40:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	0618      	lsls	r0, r3, #24
 8005d46:	d510      	bpl.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d48:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8005d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d50:	f000 817c 	beq.w	800604c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8005d54:	f200 8160 	bhi.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8166 	beq.w	800602a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d62:	f000 816c 	beq.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8005d66:	2601      	movs	r6, #1
 8005d68:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d6a:	682b      	ldr	r3, [r5, #0]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d514      	bpl.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005d70:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8005d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005d80:	f7ff fc6e 	bl	8005660 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bf18      	it	ne
 8005d88:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d8a:	4a80      	ldr	r2, [pc, #512]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005d8c:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8005d90:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005d92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	06da      	lsls	r2, r3, #27
 8005d9e:	d514      	bpl.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005da0:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da8:	d107      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x66e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005daa:	2102      	movs	r1, #2
 8005dac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005db0:	f7ff fc56 	bl	8005660 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005db4:	2800      	cmp	r0, #0
 8005db6:	bf18      	it	ne
 8005db8:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dba:	4a74      	ldr	r2, [pc, #464]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dbc:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8005dc0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	d51b      	bpl.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    switch (PeriphClkInit->AdcClockSelection)
 8005dd0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8005dd4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005dd8:	f000 8140 	beq.w	800605c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005ddc:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005de0:	d007      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8005de2:	2900      	cmp	r1, #0
 8005de4:	f040 8140 	bne.w	8006068 <HAL_RCCEx_PeriphCLKConfig+0x91c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de8:	f105 0008 	add.w	r0, r5, #8
 8005dec:	f7ff fbc2 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005df0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005df2:	2c00      	cmp	r4, #0
 8005df4:	f040 813b 	bne.w	800606e <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005df8:	4a64      	ldr	r2, [pc, #400]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005dfa:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8005dfe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005e00:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	035f      	lsls	r7, r3, #13
 8005e0c:	d50f      	bpl.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch (PeriphClkInit->UsbClockSelection)
 8005e0e:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8005e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e16:	f000 813b 	beq.w	8006090 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005e1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e1e:	f000 812d 	beq.w	800607c <HAL_RCCEx_PeriphCLKConfig+0x930>
 8005e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e26:	f000 8124 	beq.w	8006072 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005e2a:	2601      	movs	r6, #1
 8005e2c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	03d8      	lsls	r0, r3, #15
 8005e32:	d509      	bpl.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005e34:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8133 	beq.w	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e40:	f000 813d 	beq.w	80060be <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005e44:	2601      	movs	r6, #1
 8005e46:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	0099      	lsls	r1, r3, #2
 8005e4c:	d507      	bpl.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x712>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e4e:	2102      	movs	r1, #2
 8005e50:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005e54:	f7ff fc04 	bl	8005660 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	bf18      	it	ne
 8005e5c:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e5e:	e9d5 3100 	ldrd	r3, r1, [r5]
 8005e62:	039a      	lsls	r2, r3, #14
 8005e64:	f140 8143 	bpl.w	80060ee <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->RngClockSelection)
 8005e68:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8005e6c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005e70:	f000 813f 	beq.w	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8005e74:	f200 812c 	bhi.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	f000 812f 	beq.w	80060dc <HAL_RCCEx_PeriphCLKConfig+0x990>
 8005e7e:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e80:	02df      	lsls	r7, r3, #11
 8005e82:	d506      	bpl.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x746>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e84:	4841      	ldr	r0, [pc, #260]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e86:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8005e88:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005e8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e8e:	4332      	orrs	r2, r6
 8005e90:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e92:	00de      	lsls	r6, r3, #3
 8005e94:	d507      	bpl.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e96:	483d      	ldr	r0, [pc, #244]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e98:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8005e9c:	6902      	ldr	r2, [r0, #16]
 8005e9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ea2:	4332      	orrs	r2, r6
 8005ea4:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ea6:	0298      	lsls	r0, r3, #10
 8005ea8:	d506      	bpl.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005eaa:	4838      	ldr	r0, [pc, #224]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eac:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8005eae:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005eb0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005eb4:	4332      	orrs	r2, r6
 8005eb6:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005eb8:	005a      	lsls	r2, r3, #1
 8005eba:	d509      	bpl.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ebc:	4a33      	ldr	r2, [pc, #204]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ebe:	6910      	ldr	r0, [r2, #16]
 8005ec0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8005ec4:	6110      	str	r0, [r2, #16]
 8005ec6:	6910      	ldr	r0, [r2, #16]
 8005ec8:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8005ecc:	4330      	orrs	r0, r6
 8005ece:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da06      	bge.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ed4:	482d      	ldr	r0, [pc, #180]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ed6:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8005ed8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005eda:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ede:	4332      	orrs	r2, r6
 8005ee0:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ee2:	021f      	lsls	r7, r3, #8
 8005ee4:	d507      	bpl.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ee6:	4a29      	ldr	r2, [pc, #164]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ee8:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8005eec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005eee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ef6:	07ce      	lsls	r6, r1, #31
 8005ef8:	d506      	bpl.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efa:	2100      	movs	r1, #0
 8005efc:	f105 0008 	add.w	r0, r5, #8
 8005f00:	f7ff fb38 	bl	8005574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005f04:	4607      	mov	r7, r0
 8005f06:	b900      	cbnz	r0, 8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch (PeriphClkInit->RngClockSelection)
 8005f08:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f0a:	686b      	ldr	r3, [r5, #4]
 8005f0c:	079c      	lsls	r4, r3, #30
 8005f0e:	d506      	bpl.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f10:	2101      	movs	r1, #1
 8005f12:	f105 0008 	add.w	r0, r5, #8
 8005f16:	f7ff fb2d 	bl	8005574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	b900      	cbnz	r0, 8005f20 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 8005f1e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f20:	686b      	ldr	r3, [r5, #4]
 8005f22:	0758      	lsls	r0, r3, #29
 8005f24:	d506      	bpl.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f26:	2102      	movs	r1, #2
 8005f28:	f105 0008 	add.w	r0, r5, #8
 8005f2c:	f7ff fb22 	bl	8005574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005f30:	4604      	mov	r4, r0
 8005f32:	b900      	cbnz	r0, 8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch (PeriphClkInit->RngClockSelection)
 8005f34:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f36:	686b      	ldr	r3, [r5, #4]
 8005f38:	0719      	lsls	r1, r3, #28
 8005f3a:	d506      	bpl.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005f42:	f7ff fb8d 	bl	8005660 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005f46:	4606      	mov	r6, r0
 8005f48:	b900      	cbnz	r0, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch (PeriphClkInit->RngClockSelection)
 8005f4a:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f4c:	686b      	ldr	r3, [r5, #4]
 8005f4e:	06da      	lsls	r2, r3, #27
 8005f50:	d506      	bpl.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f52:	2101      	movs	r1, #1
 8005f54:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005f58:	f7ff fb82 	bl	8005660 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	b900      	cbnz	r0, 8005f62 <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->RngClockSelection)
 8005f60:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f62:	686b      	ldr	r3, [r5, #4]
 8005f64:	069b      	lsls	r3, r3, #26
 8005f66:	f100 80ca 	bmi.w	80060fe <HAL_RCCEx_PeriphCLKConfig+0x9b2>
  if (status == HAL_OK)
 8005f6a:	1e20      	subs	r0, r4, #0
 8005f6c:	bf18      	it	ne
 8005f6e:	2001      	movne	r0, #1
}
 8005f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f74:	2101      	movs	r1, #1
 8005f76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005f7a:	f7ff fb71 	bl	8005660 <RCCEx_PLL3_Config>
 8005f7e:	e6ac      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f80:	2601      	movs	r6, #1
 8005f82:	4634      	mov	r4, r6
 8005f84:	e6b5      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = ret;
 8005f86:	4626      	mov	r6, r4
 8005f88:	e6b3      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005f94:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8005f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f9e:	f47f aeba 	bne.w	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (ret == HAL_OK)
 8005fa2:	b9ac      	cbnz	r4, 8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fa4:	4a5b      	ldr	r2, [pc, #364]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005fa6:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8005faa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005fac:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fb4:	e6b1      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f105 0008 	add.w	r0, r5, #8
 8005fbc:	f7ff fada 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fc0:	4604      	mov	r4, r0
        break;
 8005fc2:	e7ee      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x856>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005fca:	f7ff fb49 	bl	8005660 <RCCEx_PLL3_Config>
 8005fce:	e7f7      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 8005fd0:	4626      	mov	r6, r4
 8005fd2:	e6a2      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fd4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fd8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fe2:	f47f aeac 	bne.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    if (ret == HAL_OK)
 8005fe6:	b9ac      	cbnz	r4, 8006014 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005fea:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 8005fee:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ff0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ff8:	e6a3      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f105 0008 	add.w	r0, r5, #8
 8006000:	f7ff fab8 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006004:	4604      	mov	r4, r0
        break;
 8006006:	e7ee      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006008:	2102      	movs	r1, #2
 800600a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800600e:	f7ff fb27 	bl	8005660 <RCCEx_PLL3_Config>
 8006012:	e7f7      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      status = ret;
 8006014:	4626      	mov	r6, r4
 8006016:	e694      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006018:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800601c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006020:	d003      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8006022:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006026:	f47f ae9e 	bne.w	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800602a:	b9ac      	cbnz	r4, 8006058 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800602c:	4a39      	ldr	r2, [pc, #228]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800602e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 8006032:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006034:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006038:	430b      	orrs	r3, r1
 800603a:	6593      	str	r3, [r2, #88]	@ 0x58
 800603c:	e695      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603e:	2100      	movs	r1, #0
 8006040:	f105 0008 	add.w	r0, r5, #8
 8006044:	f7ff fa96 	bl	8005574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006048:	4604      	mov	r4, r0
        break;
 800604a:	e7ee      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x8de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800604c:	2102      	movs	r1, #2
 800604e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006052:	f7ff fb05 	bl	8005660 <RCCEx_PLL3_Config>
 8006056:	e7f7      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      status = ret;
 8006058:	4626      	mov	r6, r4
 800605a:	e686      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800605c:	2102      	movs	r1, #2
 800605e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006062:	f7ff fafd 	bl	8005660 <RCCEx_PLL3_Config>
 8006066:	e6c3      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->AdcClockSelection)
 8006068:	2601      	movs	r6, #1
 800606a:	4634      	mov	r4, r6
 800606c:	e6cc      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      status = ret;
 800606e:	4626      	mov	r6, r4
 8006070:	e6ca      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006072:	4a28      	ldr	r2, [pc, #160]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006074:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800607a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800607c:	b97c      	cbnz	r4, 800609e <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800607e:	4a25      	ldr	r2, [pc, #148]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006080:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8006084:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006086:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800608a:	430b      	orrs	r3, r1
 800608c:	6553      	str	r3, [r2, #84]	@ 0x54
 800608e:	e6ce      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006090:	2101      	movs	r1, #1
 8006092:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006096:	f7ff fae3 	bl	8005660 <RCCEx_PLL3_Config>
 800609a:	4604      	mov	r4, r0
        break;
 800609c:	e7ee      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x930>
      status = ret;
 800609e:	4626      	mov	r6, r4
 80060a0:	e6c5      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060a4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80060a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80060ac:	b974      	cbnz	r4, 80060cc <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060ae:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060b0:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80060b2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	430b      	orrs	r3, r1
 80060ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060bc:	e6c4      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060be:	2102      	movs	r1, #2
 80060c0:	f105 0008 	add.w	r0, r5, #8
 80060c4:	f7ff fa56 	bl	8005574 <RCCEx_PLL2_Config>
 80060c8:	4604      	mov	r4, r0
        break;
 80060ca:	e7ef      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80060cc:	4626      	mov	r6, r4
 80060ce:	e6bb      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->RngClockSelection)
 80060d0:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 80060d4:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80060d8:	f47f aed1 	bne.w	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x732>
    if (ret == HAL_OK)
 80060dc:	2c00      	cmp	r4, #0
 80060de:	f47f aecf 	bne.w	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060e2:	4c0c      	ldr	r4, [pc, #48]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80060ea:	4302      	orrs	r2, r0
 80060ec:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 80060ee:	4634      	mov	r4, r6
 80060f0:	e6c6      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x734>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f2:	4f08      	ldr	r7, [pc, #32]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80060fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 80060fc:	e7ee      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x990>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fe:	2102      	movs	r1, #2
 8006100:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006104:	f7ff faac 	bl	8005660 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006108:	2800      	cmp	r0, #0
 800610a:	f43f af2e 	beq.w	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x81e>
  return HAL_ERROR;
 800610e:	2001      	movs	r0, #1
 8006110:	e72e      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400

08006118 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006118:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800611a:	f7ff f9e5 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 800611e:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006120:	4a05      	ldr	r2, [pc, #20]	@ (8006138 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
}
 800612e:	40d8      	lsrs	r0, r3
 8006130:	bd08      	pop	{r3, pc}
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
 8006138:	08012a28 	.word	0x08012a28

0800613c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800613c:	494f      	ldr	r1, [pc, #316]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800613e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006140:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006142:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006144:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8006146:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800614a:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800614e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 8006150:	f000 8090 	beq.w	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006154:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006158:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800615c:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006160:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006168:	4353      	muls	r3, r2
    switch (pllsource)
 800616a:	2c01      	cmp	r4, #1
 800616c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006170:	ee06 3a90 	vmov	s13, r3
 8006174:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006178:	d06e      	beq.n	8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800617a:	2c02      	cmp	r4, #2
 800617c:	d05e      	beq.n	800623c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800617e:	2c00      	cmp	r4, #0
 8006180:	d16a      	bne.n	8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006182:	680b      	ldr	r3, [r1, #0]
 8006184:	069b      	lsls	r3, r3, #26
 8006186:	d547      	bpl.n	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006188:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800618a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800618c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8006190:	4a3b      	ldr	r2, [pc, #236]	@ (8006280 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006196:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006198:	ee07 2a90 	vmov	s15, r2
 800619c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80061a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80061a4:	ee07 3a10 	vmov	s14, r3
 80061a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80061b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061b8:	4a30      	ldr	r2, [pc, #192]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80061ba:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80061c0:	ee07 3a10 	vmov	s14, r3
 80061c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061d0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061d4:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061d8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061da:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80061de:	ee07 3a10 	vmov	s14, r3
 80061e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80061e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061f2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061f6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061f8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061fc:	ee06 3a90 	vmov	s13, r3
 8006200:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006204:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006208:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800620c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006210:	ee17 3a90 	vmov	r3, s15
 8006214:	6083      	str	r3, [r0, #8]
}
 8006216:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006218:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800621a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006232:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8006236:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800623a:	e7bd      	b.n	80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800623c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800623e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8006242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006252:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006256:	e7ec      	b.n	8006232 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006258:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800625a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800625e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006272:	e7de      	b.n	8006232 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006274:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006278:	e7cc      	b.n	8006214 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800627a:	bf00      	nop
 800627c:	58024400 	.word	0x58024400
 8006280:	03d09000 	.word	0x03d09000
 8006284:	4c742400 	.word	0x4c742400
 8006288:	4bbebc20 	.word	0x4bbebc20
 800628c:	4a742400 	.word	0x4a742400

08006290 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006290:	494f      	ldr	r1, [pc, #316]	@ (80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8006292:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006294:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006296:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006298:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800629a:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800629e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062a2:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 80062a4:	f000 8090 	beq.w	80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a8:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062ac:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062b0:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062b4:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062bc:	4353      	muls	r3, r2
    switch (pllsource)
 80062be:	2c01      	cmp	r4, #1
 80062c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c4:	ee06 3a90 	vmov	s13, r3
 80062c8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80062cc:	d06e      	beq.n	80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 80062ce:	2c02      	cmp	r4, #2
 80062d0:	d05e      	beq.n	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	d16a      	bne.n	80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d6:	680b      	ldr	r3, [r1, #0]
 80062d8:	069b      	lsls	r3, r3, #26
 80062da:	d547      	bpl.n	800636c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062dc:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062e0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80062e4:	4a3b      	ldr	r2, [pc, #236]	@ (80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ea:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ec:	ee07 2a90 	vmov	s15, r2
 80062f0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80062f4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80062f8:	ee07 3a10 	vmov	s14, r3
 80062fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006300:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006304:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006308:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800630c:	4a30      	ldr	r2, [pc, #192]	@ (80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800630e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006310:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006314:	ee07 3a10 	vmov	s14, r3
 8006318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800631c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006324:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006328:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800632c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800632e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006332:	ee07 3a10 	vmov	s14, r3
 8006336:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800633a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800633e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006342:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006346:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800634a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800634c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006350:	ee06 3a90 	vmov	s13, r3
 8006354:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006358:	ee76 6a86 	vadd.f32	s13, s13, s12
 800635c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006360:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006364:	ee17 3a90 	vmov	r3, s15
 8006368:	6083      	str	r3, [r0, #8]
}
 800636a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800636c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800636e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006382:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006386:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800638a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800638e:	e7bd      	b.n	800630c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006390:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006392:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063aa:	e7ec      	b.n	8006386 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063ae:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063c6:	e7de      	b.n	8006386 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063c8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063cc:	e7cc      	b.n	8006368 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80063ce:	bf00      	nop
 80063d0:	58024400 	.word	0x58024400
 80063d4:	03d09000 	.word	0x03d09000
 80063d8:	4c742400 	.word	0x4c742400
 80063dc:	4bbebc20 	.word	0x4bbebc20
 80063e0:	4a742400 	.word	0x4a742400

080063e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e4:	494f      	ldr	r1, [pc, #316]	@ (8006524 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 80063e6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80063ea:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80063ec:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 80063ee:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80063f2:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80063f6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 80063f8:	f000 8090 	beq.w	800651c <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063fc:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006400:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006404:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006408:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800640c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006410:	4353      	muls	r3, r2
    switch (pllsource)
 8006412:	2c01      	cmp	r4, #1
 8006414:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006418:	ee06 3a90 	vmov	s13, r3
 800641c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006420:	d04e      	beq.n	80064c0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006422:	2c02      	cmp	r4, #2
 8006424:	d05e      	beq.n	80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8006426:	2c00      	cmp	r4, #0
 8006428:	d16a      	bne.n	8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642a:	680b      	ldr	r3, [r1, #0]
 800642c:	069b      	lsls	r3, r3, #26
 800642e:	d567      	bpl.n	8006500 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006430:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006432:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006434:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8006438:	4a3b      	ldr	r2, [pc, #236]	@ (8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800643a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800643e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006440:	ee07 2a90 	vmov	s15, r2
 8006444:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8006448:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800644c:	ee07 3a10 	vmov	s14, r3
 8006450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006454:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006458:	ee37 7a06 	vadd.f32	s14, s14, s12
 800645c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006460:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8006462:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006464:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006468:	ee07 3a10 	vmov	s14, r3
 800646c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006470:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006474:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006478:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800647c:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006480:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006482:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006486:	ee07 3a10 	vmov	s14, r3
 800648a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800648e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006492:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006496:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800649a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800649e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80064a0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80064a4:	ee06 3a90 	vmov	s13, r3
 80064a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80064ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 80064b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064b4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80064b8:	ee17 3a90 	vmov	r3, s15
 80064bc:	6083      	str	r3, [r0, #8]
}
 80064be:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80064c2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800652c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064da:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80064de:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80064e2:	e7bd      	b.n	8006460 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064e4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80064e6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8006530 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80064ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064fe:	e7ec      	b.n	80064da <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006500:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8006502:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8006506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee77 7a86 	vadd.f32	s15, s15, s12
 800651a:	e7de      	b.n	80064da <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800651c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006520:	e7cc      	b.n	80064bc <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
 8006528:	03d09000 	.word	0x03d09000
 800652c:	4a742400 	.word	0x4a742400
 8006530:	4bbebc20 	.word	0x4bbebc20
 8006534:	4c742400 	.word	0x4c742400

08006538 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8006538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800653a:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800653e:	430b      	orrs	r3, r1
 8006540:	d115      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006542:	4b9d      	ldr	r3, [pc, #628]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006546:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 800654a:	2a04      	cmp	r2, #4
 800654c:	d82d      	bhi.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800654e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006552:	001c      	.short	0x001c
 8006554:	000500e1 	.word	0x000500e1
 8006558:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006562:	f000 80df 	beq.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006566:	a801      	add	r0, sp, #4
 8006568:	f7ff fe92 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
 800656c:	e0d9      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800656e:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8006572:	430b      	orrs	r3, r1
 8006574:	d11b      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006576:	4b90      	ldr	r3, [pc, #576]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800657a:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800657e:	2a80      	cmp	r2, #128	@ 0x80
 8006580:	d0ec      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006582:	d80c      	bhi.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 8006584:	2a00      	cmp	r2, #0
 8006586:	f040 80c5 	bne.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8006590:	f000 80c8 	beq.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006594:	a801      	add	r0, sp, #4
 8006596:	f7ff ff25 	bl	80063e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800659a:	9802      	ldr	r0, [sp, #8]
 800659c:	e0c2      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 800659e:	2ac0      	cmp	r2, #192	@ 0xc0
 80065a0:	f000 8128 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80065a4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 80065a8:	d014      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 80065aa:	2000      	movs	r0, #0
 80065ac:	e0ba      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80065ae:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80065b2:	430b      	orrs	r3, r1
 80065b4:	d12e      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80065b6:	4b80      	ldr	r3, [pc, #512]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80065b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065ba:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 80065be:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80065c2:	d0cb      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80065c4:	d9de      	bls.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80065c6:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 80065ca:	f000 8113 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80065ce:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80065d2:	e7e9      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065d6:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065d8:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065dc:	0748      	lsls	r0, r1, #29
 80065de:	d506      	bpl.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80065e0:	b92a      	cbnz	r2, 80065ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e2:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80065e8:	4874      	ldr	r0, [pc, #464]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80065ea:	40d8      	lsrs	r0, r3
 80065ec:	e09a      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065ee:	4b72      	ldr	r3, [pc, #456]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	05c9      	lsls	r1, r1, #23
 80065f4:	d503      	bpl.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80065f6:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80065fa:	f000 80fd 	beq.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006604:	f000 808e 	beq.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 8006608:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800660c:	486c      	ldr	r0, [pc, #432]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800660e:	bf18      	it	ne
 8006610:	2000      	movne	r0, #0
 8006612:	e087      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006614:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8006618:	430b      	orrs	r3, r1
 800661a:	d11f      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800661c:	4b66      	ldr	r3, [pc, #408]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800661e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006620:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 8006624:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8006628:	d098      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800662a:	d9ab      	bls.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800662c:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8006630:	f000 80e0 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8006634:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 8006638:	d1b7      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800663a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663c:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800663e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006642:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006644:	0748      	lsls	r0, r1, #29
 8006646:	d501      	bpl.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006648:	2a00      	cmp	r2, #0
 800664a:	d0cb      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664c:	05d9      	lsls	r1, r3, #23
 800664e:	d503      	bpl.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006650:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8006654:	f000 80d0 	beq.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006658:	4b57      	ldr	r3, [pc, #348]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800665a:	e7d0      	b.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800665c:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8006660:	430b      	orrs	r3, r1
 8006662:	d10f      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006664:	4b54      	ldr	r3, [pc, #336]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006668:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 800666c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006670:	f43f af74 	beq.w	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006674:	d986      	bls.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8006676:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800667a:	f000 80bb 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800667e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8006682:	e7d9      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006684:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8006688:	430b      	orrs	r3, r1
 800668a:	d132      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800668c:	4a4a      	ldr	r2, [pc, #296]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800668e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006690:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8006694:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006698:	f000 8081 	beq.w	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800669c:	d80d      	bhi.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800669e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a2:	d016      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80066a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a8:	d01b      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f47f af7d 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 80066b0:	b005      	add	sp, #20
 80066b2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80066b6:	f7fe bf39 	b.w	800552c <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 80066ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066be:	d074      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80066c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 80066c4:	f47f af71 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066c8:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 80066ca:	4b3d      	ldr	r3, [pc, #244]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066cc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80066d0:	e06f      	b.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066d2:	6810      	ldr	r0, [r2, #0]
 80066d4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80066d8:	d024      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066da:	a801      	add	r0, sp, #4
 80066dc:	f7ff fd2e 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
 80066e0:	e75b      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066e2:	6810      	ldr	r0, [r2, #0]
 80066e4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80066e8:	d01c      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ea:	a801      	add	r0, sp, #4
 80066ec:	f7ff fdd0 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f0:	e753      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80066f2:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80066f6:	430b      	orrs	r3, r1
 80066f8:	d120      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80066fa:	4b2f      	ldr	r3, [pc, #188]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80066fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066fe:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 8006702:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006706:	d010      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8006708:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800670c:	d095      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800670e:	2a00      	cmp	r2, #0
 8006710:	f47f af4b 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800671a:	d003      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671c:	a801      	add	r0, sp, #4
 800671e:	f7ff fd0d 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006722:	9801      	ldr	r0, [sp, #4]
}
 8006724:	b005      	add	sp, #20
 8006726:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006730:	d0f8      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006732:	a801      	add	r0, sp, #4
 8006734:	f7ff fdac 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006738:	9803      	ldr	r0, [sp, #12]
 800673a:	e7f3      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800673c:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8006740:	430b      	orrs	r3, r1
 8006742:	d10c      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006744:	4b1c      	ldr	r3, [pc, #112]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8006748:	03d2      	lsls	r2, r2, #15
 800674a:	f57f af1e 	bpl.w	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006754:	d0e6      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	a801      	add	r0, sp, #4
 8006758:	f7ff fcf0 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
 800675c:	e7ec      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800675e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8006762:	430b      	orrs	r3, r1
 8006764:	d130      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006766:	4a14      	ldr	r2, [pc, #80]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006768:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800676a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800676e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006772:	d014      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006774:	d80d      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800677a:	d0aa      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006780:	d0af      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006782:	2b00      	cmp	r3, #0
 8006784:	f47f af11 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 8006788:	b005      	add	sp, #20
 800678a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800678e:	f7ff bcc3 	b.w	8006118 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d008      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800679c:	e792      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679e:	6810      	ldr	r0, [r2, #0]
 80067a0:	f010 0004 	ands.w	r0, r0, #4
 80067a4:	d0be      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a6:	6813      	ldr	r3, [r2, #0]
 80067a8:	e71c      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067aa:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 80067ac:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80067ae:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 80067b2:	bf18      	it	ne
 80067b4:	4618      	movne	r0, r3
 80067b6:	e7b5      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 80067b8:	58024400 	.word	0x58024400
 80067bc:	03d09000 	.word	0x03d09000
 80067c0:	017d7840 	.word	0x017d7840
 80067c4:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80067c8:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80067cc:	4308      	orrs	r0, r1
 80067ce:	f47f aeec 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80067d2:	4a0a      	ldr	r2, [pc, #40]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80067d4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80067d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80067da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067de:	d007      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80067e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e4:	f43f af75 	beq.w	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f aede 	bne.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80067ee:	e76b      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067f0:	6810      	ldr	r0, [r2, #0]
 80067f2:	e6cb      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 80067f4:	4802      	ldr	r0, [pc, #8]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80067f6:	e795      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 80067f8:	4802      	ldr	r0, [pc, #8]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067fa:	e793      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 80067fc:	58024400 	.word	0x58024400
 8006800:	00bb8000 	.word	0x00bb8000
 8006804:	003d0900 	.word	0x003d0900

08006808 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8006808:	6803      	ldr	r3, [r0, #0]
 800680a:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	f042 0208 	orr.w	r2, r2, #8
 8006812:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	f042 0210 	orr.w	r2, r2, #16
 800681a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 800682a:	f022 0203 	bic.w	r2, r2, #3
 800682e:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006836:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006838:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800683c:	2a04      	cmp	r2, #4
 800683e:	d00b      	beq.n	8006858 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006840:	068a      	lsls	r2, r1, #26
 8006842:	d509      	bpl.n	8006858 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006844:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006848:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800684c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	f042 0220 	orr.w	r2, r2, #32
 8006856:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006858:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800685c:	2a03      	cmp	r2, #3
 800685e:	d00b      	beq.n	8006878 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006860:	064a      	lsls	r2, r1, #25
 8006862:	d509      	bpl.n	8006878 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006864:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006868:	f042 0204 	orr.w	r2, r2, #4
 800686c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006876:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006878:	058a      	lsls	r2, r1, #22
 800687a:	d509      	bpl.n	8006890 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800687c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006880:	f042 0201 	orr.w	r2, r2, #1
 8006884:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800688e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006890:	05ca      	lsls	r2, r1, #23
 8006892:	d509      	bpl.n	80068a8 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006894:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006898:	f042 0208 	orr.w	r2, r2, #8
 800689c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80068ae:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 80068b2:	4770      	bx	lr

080068b4 <HAL_SPI_Init>:
{
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80068b6:	4604      	mov	r4, r0
 80068b8:	b908      	cbnz	r0, 80068be <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 80068ba:	2001      	movs	r0, #1
}
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068be:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c0:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068c2:	494d      	ldr	r1, [pc, #308]	@ (80069f8 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c4:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068c6:	428a      	cmp	r2, r1
 80068c8:	68c3      	ldr	r3, [r0, #12]
 80068ca:	d009      	beq.n	80068e0 <HAL_SPI_Init+0x2c>
 80068cc:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80068d0:	428a      	cmp	r2, r1
 80068d2:	d005      	beq.n	80068e0 <HAL_SPI_Init+0x2c>
 80068d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068d8:	428a      	cmp	r2, r1
 80068da:	d001      	beq.n	80068e0 <HAL_SPI_Init+0x2c>
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d8ec      	bhi.n	80068ba <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80068e0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80068e2:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80068e4:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80068e6:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80068e8:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80068ec:	4942      	ldr	r1, [pc, #264]	@ (80069f8 <HAL_SPI_Init+0x144>)
 80068ee:	428a      	cmp	r2, r1
 80068f0:	d073      	beq.n	80069da <HAL_SPI_Init+0x126>
 80068f2:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80068f6:	428a      	cmp	r2, r1
 80068f8:	d06f      	beq.n	80069da <HAL_SPI_Init+0x126>
 80068fa:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068fe:	428a      	cmp	r2, r1
 8006900:	d06b      	beq.n	80069da <HAL_SPI_Init+0x126>
 8006902:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006904:	d8d9      	bhi.n	80068ba <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006906:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800690a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800690e:	b923      	cbnz	r3, 800691a <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8006910:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006912:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8006916:	f7fc fb2d 	bl	8002f74 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800691a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800691c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800691e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006920:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 8006924:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006926:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800692e:	6893      	ldr	r3, [r2, #8]
 8006930:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006934:	69a3      	ldr	r3, [r4, #24]
 8006936:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800693a:	d104      	bne.n	8006946 <HAL_SPI_Init+0x92>
 800693c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8006940:	d14d      	bne.n	80069de <HAL_SPI_Init+0x12a>
 8006942:	2e00      	cmp	r6, #0
 8006944:	d050      	beq.n	80069e8 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006946:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 800694a:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800694c:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800694e:	d050      	beq.n	80069f2 <HAL_SPI_Init+0x13e>
 8006950:	2d06      	cmp	r5, #6
 8006952:	d94e      	bls.n	80069f2 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006954:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 8006958:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800695a:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800695e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006960:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006962:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006964:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006966:	433d      	orrs	r5, r7
 8006968:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800696a:	433d      	orrs	r5, r7
 800696c:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800696e:	433d      	orrs	r5, r7
 8006970:	ea45 050c 	orr.w	r5, r5, ip
 8006974:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006976:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006978:	432b      	orrs	r3, r5
 800697a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800697c:	432b      	orrs	r3, r5
 800697e:	6925      	ldr	r5, [r4, #16]
 8006980:	432b      	orrs	r3, r5
 8006982:	6965      	ldr	r5, [r4, #20]
 8006984:	432b      	orrs	r3, r5
 8006986:	6a25      	ldr	r5, [r4, #32]
 8006988:	432b      	orrs	r3, r5
 800698a:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800698c:	432b      	orrs	r3, r5
 800698e:	68a5      	ldr	r5, [r4, #8]
 8006990:	432b      	orrs	r3, r5
 8006992:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8006994:	432b      	orrs	r3, r5
 8006996:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8006998:	432b      	orrs	r3, r5
 800699a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800699c:	b959      	cbnz	r1, 80069b6 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800699e:	6893      	ldr	r3, [r2, #8]
 80069a0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80069a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069aa:	6893      	ldr	r3, [r2, #8]
 80069ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069b4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069be:	b128      	cbz	r0, 80069cc <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069c0:	68d3      	ldr	r3, [r2, #12]
 80069c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80069c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069c8:	430b      	orrs	r3, r1
 80069ca:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069cc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80069ce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069d0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80069d4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 80069d8:	e770      	b.n	80068bc <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80069da:	2b10      	cmp	r3, #16
 80069dc:	e792      	b.n	8006904 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069de:	2900      	cmp	r1, #0
 80069e0:	d1b1      	bne.n	8006946 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069e2:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 80069e6:	d1ae      	bne.n	8006946 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069e8:	6810      	ldr	r0, [r2, #0]
 80069ea:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 80069ee:	6010      	str	r0, [r2, #0]
 80069f0:	e7a9      	b.n	8006946 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80069f2:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 80069f6:	e7b2      	b.n	800695e <HAL_SPI_Init+0xaa>
 80069f8:	40013000 	.word	0x40013000

080069fc <HAL_SPI_Transmit>:
{
 80069fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a00:	4604      	mov	r4, r0
 8006a02:	461d      	mov	r5, r3
 8006a04:	4689      	mov	r9, r1
 8006a06:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a08:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8006a0a:	f7fc fe31 	bl	8003670 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a0e:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 8006a12:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	b2d8      	uxtb	r0, r3
 8006a18:	f040 8108 	bne.w	8006c2c <HAL_SPI_Transmit+0x230>
  if ((pData == NULL) || (Size == 0UL))
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	f000 80a3 	beq.w	8006b6a <HAL_SPI_Transmit+0x16e>
 8006a24:	f1b8 0f00 	cmp.w	r8, #0
 8006a28:	f000 809f 	beq.w	8006b6a <HAL_SPI_Transmit+0x16e>
  __HAL_LOCK(hspi);
 8006a2c:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f000 80fb 	beq.w	8006c2c <HAL_SPI_Transmit+0x230>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a36:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a38:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 8006a3a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a3e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a42:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a46:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a4a:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006a4e:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a52:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 8006a56:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8006a58:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006a5c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006a60:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006a64:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 8006a68:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a6a:	d139      	bne.n	8006ae0 <HAL_SPI_Transmit+0xe4>
    SPI_1LINE_TX(hspi);
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a72:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	f36f 020f 	bfc	r2, #0, #16
 8006a7a:	ea42 0208 	orr.w	r2, r2, r8
 8006a7e:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a88:	6862      	ldr	r2, [r4, #4]
 8006a8a:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8006a8e:	d103      	bne.n	8006a98 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a96:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006a98:	68e3      	ldr	r3, [r4, #12]
 8006a9a:	2b0f      	cmp	r3, #15
 8006a9c:	d835      	bhi.n	8006b0a <HAL_SPI_Transmit+0x10e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	d87a      	bhi.n	8006b98 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0UL)
 8006aa2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006aa6:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d033      	beq.n	8006b16 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006aae:	694b      	ldr	r3, [r1, #20]
 8006ab0:	0798      	lsls	r0, r3, #30
 8006ab2:	f140 80a1 	bpl.w	8006bf8 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006ab6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006aba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	f240 8081 	bls.w	8006bc6 <HAL_SPI_Transmit+0x1ca>
 8006ac4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006ac6:	2b40      	cmp	r3, #64	@ 0x40
 8006ac8:	d97d      	bls.n	8006bc6 <HAL_SPI_Transmit+0x1ca>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006aca:	f852 3b04 	ldr.w	r3, [r2], #4
 8006ace:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 8006ad0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ad4:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006ad6:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8006ade:	e7e0      	b.n	8006aa2 <HAL_SPI_Transmit+0xa6>
    SPI_2LINES_TX(hspi);
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006ae6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e7c2      	b.n	8006a74 <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006aee:	6953      	ldr	r3, [r2, #20]
 8006af0:	0798      	lsls	r0, r3, #30
 8006af2:	d523      	bpl.n	8006b3c <HAL_SPI_Transmit+0x140>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006af4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006af6:	f853 1b04 	ldr.w	r1, [r3], #4
 8006afa:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006afc:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006afe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006b0a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b0e:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1eb      	bne.n	8006aee <HAL_SPI_Transmit+0xf2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	071b      	lsls	r3, r3, #28
 8006b1c:	d576      	bpl.n	8006c0c <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f7ff fe72 	bl	8006808 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 8006b2a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b2c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8006b30:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	bf18      	it	ne
 8006b38:	2001      	movne	r0, #1
 8006b3a:	e016      	b.n	8006b6a <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3c:	f7fc fd98 	bl	8003670 <HAL_GetTick>
 8006b40:	1b80      	subs	r0, r0, r6
 8006b42:	42a8      	cmp	r0, r5
 8006b44:	d3e1      	bcc.n	8006b0a <HAL_SPI_Transmit+0x10e>
 8006b46:	1c69      	adds	r1, r5, #1
 8006b48:	d0df      	beq.n	8006b0a <HAL_SPI_Transmit+0x10e>
          SPI_CloseTransfer(hspi);
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff fe5c 	bl	8006808 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b50:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006b54:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b5a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006b64:	2300      	movs	r3, #0
 8006b66:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b6e:	694b      	ldr	r3, [r1, #20]
 8006b70:	079a      	lsls	r2, r3, #30
 8006b72:	d520      	bpl.n	8006bb6 <HAL_SPI_Transmit+0x1ba>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b74:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b78:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	2a01      	cmp	r2, #1
 8006b7e:	d912      	bls.n	8006ba6 <HAL_SPI_Transmit+0x1aa>
 8006b80:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006b82:	b182      	cbz	r2, 8006ba6 <HAL_SPI_Transmit+0x1aa>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b88:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b8a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006b8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006b90:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006b98:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b9c:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e4      	bne.n	8006b6e <HAL_SPI_Transmit+0x172>
 8006ba4:	e7b7      	b.n	8006b16 <HAL_SPI_Transmit+0x11a>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ba6:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006baa:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bac:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006bae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	e7ed      	b.n	8006b92 <HAL_SPI_Transmit+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb6:	f7fc fd5b 	bl	8003670 <HAL_GetTick>
 8006bba:	1b80      	subs	r0, r0, r6
 8006bbc:	42a8      	cmp	r0, r5
 8006bbe:	d3eb      	bcc.n	8006b98 <HAL_SPI_Transmit+0x19c>
 8006bc0:	1c6b      	adds	r3, r5, #1
 8006bc2:	d0e9      	beq.n	8006b98 <HAL_SPI_Transmit+0x19c>
 8006bc4:	e7c1      	b.n	8006b4a <HAL_SPI_Transmit+0x14e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006bc6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d909      	bls.n	8006be4 <HAL_SPI_Transmit+0x1e8>
 8006bd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006bd2:	b13b      	cbz	r3, 8006be4 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bd4:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006bd8:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8006bda:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bde:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006be0:	3b02      	subs	r3, #2
 8006be2:	e779      	b.n	8006ad8 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006be4:	7813      	ldrb	r3, [r2, #0]
 8006be6:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006bec:	3301      	adds	r3, #1
 8006bee:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006bf0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	e76f      	b.n	8006ad8 <HAL_SPI_Transmit+0xdc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf8:	f7fc fd3a 	bl	8003670 <HAL_GetTick>
 8006bfc:	1b80      	subs	r0, r0, r6
 8006bfe:	42a8      	cmp	r0, r5
 8006c00:	f4ff af4f 	bcc.w	8006aa2 <HAL_SPI_Transmit+0xa6>
 8006c04:	1c69      	adds	r1, r5, #1
 8006c06:	f43f af4c 	beq.w	8006aa2 <HAL_SPI_Transmit+0xa6>
 8006c0a:	e79e      	b.n	8006b4a <HAL_SPI_Transmit+0x14e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c0c:	f7fc fd30 	bl	8003670 <HAL_GetTick>
 8006c10:	1b80      	subs	r0, r0, r6
 8006c12:	4285      	cmp	r5, r0
 8006c14:	f63f af7f 	bhi.w	8006b16 <HAL_SPI_Transmit+0x11a>
 8006c18:	1c6a      	adds	r2, r5, #1
 8006c1a:	f43f af7c 	beq.w	8006b16 <HAL_SPI_Transmit+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c1e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006c22:	f043 0320 	orr.w	r3, r3, #32
 8006c26:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8006c2a:	e778      	b.n	8006b1e <HAL_SPI_Transmit+0x122>
    return HAL_BUSY;
 8006c2c:	2002      	movs	r0, #2
 8006c2e:	e79c      	b.n	8006b6a <HAL_SPI_Transmit+0x16e>

08006c30 <HAL_SPI_Receive>:
{
 8006c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	4604      	mov	r4, r0
 8006c36:	461e      	mov	r6, r3
 8006c38:	468a      	mov	sl, r1
 8006c3a:	4617      	mov	r7, r2
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006c3c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006c3e:	f8d0 9000 	ldr.w	r9, [r0]
  tickstart = HAL_GetTick();
 8006c42:	f7fc fd15 	bl	8003670 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006c46:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 8006c4a:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	b2d8      	uxtb	r0, r3
 8006c50:	f040 811c 	bne.w	8006e8c <HAL_SPI_Receive+0x25c>
  if ((pData == NULL) || (Size == 0UL))
 8006c54:	f1ba 0f00 	cmp.w	sl, #0
 8006c58:	d07d      	beq.n	8006d56 <HAL_SPI_Receive+0x126>
 8006c5a:	2f00      	cmp	r7, #0
 8006c5c:	d07b      	beq.n	8006d56 <HAL_SPI_Receive+0x126>
  __HAL_LOCK(hspi);
 8006c5e:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	f000 8112 	beq.w	8006e8c <HAL_SPI_Receive+0x25c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c68:	2304      	movs	r3, #4
    SPI_1LINE_RX(hspi);
 8006c6a:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 8006c6c:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c70:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c74:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c76:	f8c4 a064 	str.w	sl, [r4, #100]	@ 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c7a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pTxBuffPtr  = NULL;
 8006c7e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hspi->RxXferCount = Size;
 8006c80:	f8a4 706a 	strh.w	r7, [r4, #106]	@ 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006c84:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006c88:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferSize  = Size;
 8006c8c:	f8a4 7068 	strh.w	r7, [r4, #104]	@ 0x68
  hspi->TxISR       = NULL;
 8006c90:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c94:	68a3      	ldr	r3, [r4, #8]
 8006c96:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006c9a:	d132      	bne.n	8006d02 <HAL_SPI_Receive+0xd2>
    SPI_1LINE_RX(hspi);
 8006c9c:	680b      	ldr	r3, [r1, #0]
 8006c9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ca2:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ca4:	684b      	ldr	r3, [r1, #4]
 8006ca6:	f36f 030f 	bfc	r3, #0, #16
 8006caa:	433b      	orrs	r3, r7
 8006cac:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8006cae:	680b      	ldr	r3, [r1, #0]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb6:	6863      	ldr	r3, [r4, #4]
 8006cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cbc:	d103      	bne.n	8006cc6 <HAL_SPI_Receive+0x96>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006cbe:	680b      	ldr	r3, [r1, #0]
 8006cc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cc4:	600b      	str	r3, [r1, #0]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006cc6:	096d      	lsrs	r5, r5, #5
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006cc8:	68e3      	ldr	r3, [r4, #12]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006cca:	3501      	adds	r5, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ccc:	2b0f      	cmp	r3, #15
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006cce:	b2ad      	uxth	r5, r5
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006cd0:	d82e      	bhi.n	8006d30 <HAL_SPI_Receive+0x100>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	d878      	bhi.n	8006dc8 <HAL_SPI_Receive+0x198>
    while (hspi->RxXferCount > 0UL)
 8006cd6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d02c      	beq.n	8006d3a <HAL_SPI_Receive+0x10a>
      temp_sr_reg = hspi->Instance->SR;
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	6959      	ldr	r1, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	07d0      	lsls	r0, r2, #31
 8006ce8:	f140 8092 	bpl.w	8006e10 <HAL_SPI_Receive+0x1e0>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006cf0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cf2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006cfa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	e0ac      	b.n	8006e5c <HAL_SPI_Receive+0x22c>
    SPI_2LINES_RX(hspi);
 8006d02:	68cb      	ldr	r3, [r1, #12]
 8006d04:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8006d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d0c:	60cb      	str	r3, [r1, #12]
 8006d0e:	e7c9      	b.n	8006ca4 <HAL_SPI_Receive+0x74>
      temp_sr_reg = hspi->Instance->SR;
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	6959      	ldr	r1, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	07d0      	lsls	r0, r2, #31
 8006d18:	d51f      	bpl.n	8006d5a <HAL_SPI_Receive+0x12a>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d1e:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d22:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006d24:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 8006d30:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1ea      	bne.n	8006d10 <HAL_SPI_Receive+0xe0>
  SPI_CloseTransfer(hspi);
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff fd64 	bl	8006808 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 8006d46:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d48:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8006d4c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	bf18      	it	ne
 8006d54:	2001      	movne	r0, #1
}
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d5a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	42aa      	cmp	r2, r5
 8006d62:	d201      	bcs.n	8006d68 <HAL_SPI_Receive+0x138>
 8006d64:	040a      	lsls	r2, r1, #16
 8006d66:	d4d8      	bmi.n	8006d1a <HAL_SPI_Receive+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d68:	f7fc fc82 	bl	8003670 <HAL_GetTick>
 8006d6c:	eba0 0008 	sub.w	r0, r0, r8
 8006d70:	42b0      	cmp	r0, r6
 8006d72:	d3dd      	bcc.n	8006d30 <HAL_SPI_Receive+0x100>
 8006d74:	1c77      	adds	r7, r6, #1
 8006d76:	d0db      	beq.n	8006d30 <HAL_SPI_Receive+0x100>
          SPI_CloseTransfer(hspi);
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fd45 	bl	8006808 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006d82:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006d92:	2300      	movs	r3, #0
 8006d94:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
 8006d98:	e7dd      	b.n	8006d56 <HAL_SPI_Receive+0x126>
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d9a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	d225      	bcs.n	8006df0 <HAL_SPI_Receive+0x1c0>
 8006da4:	0411      	lsls	r1, r2, #16
 8006da6:	d523      	bpl.n	8006df0 <HAL_SPI_Receive+0x1c0>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006da8:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006db0:	3304      	adds	r3, #4
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006db2:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006db6:	f823 2c02 	strh.w	r2, [r3, #-2]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dba:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006dbc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006dc0:	3b02      	subs	r3, #2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 8006dc8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0b3      	beq.n	8006d3a <HAL_SPI_Receive+0x10a>
      temp_sr_reg = hspi->Instance->SR;
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	07d8      	lsls	r0, r3, #31
 8006dda:	d5de      	bpl.n	8006d9a <HAL_SPI_Receive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ddc:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006de2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de6:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006de8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006dec:	3b01      	subs	r3, #1
 8006dee:	e7e8      	b.n	8006dc2 <HAL_SPI_Receive+0x192>
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006df0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_SPI_Receive+0x1ce>
 8006dfa:	0493      	lsls	r3, r2, #18
 8006dfc:	d4ee      	bmi.n	8006ddc <HAL_SPI_Receive+0x1ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfe:	f7fc fc37 	bl	8003670 <HAL_GetTick>
 8006e02:	eba0 0008 	sub.w	r0, r0, r8
 8006e06:	42b0      	cmp	r0, r6
 8006e08:	d3de      	bcc.n	8006dc8 <HAL_SPI_Receive+0x198>
 8006e0a:	1c77      	adds	r7, r6, #1
 8006e0c:	d0dc      	beq.n	8006dc8 <HAL_SPI_Receive+0x198>
 8006e0e:	e7b3      	b.n	8006d78 <HAL_SPI_Receive+0x148>
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e10:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006e14:	b292      	uxth	r2, r2
 8006e16:	42aa      	cmp	r2, r5
 8006e18:	d224      	bcs.n	8006e64 <HAL_SPI_Receive+0x234>
 8006e1a:	040a      	lsls	r2, r1, #16
 8006e1c:	d522      	bpl.n	8006e64 <HAL_SPI_Receive+0x234>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e24:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006e32:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006e40:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e48:	6822      	ldr	r2, [r4, #0]
 8006e4a:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006e4e:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e52:	3301      	adds	r3, #1
 8006e54:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006e56:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006e5a:	3b04      	subs	r3, #4
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8006e62:	e738      	b.n	8006cd6 <HAL_SPI_Receive+0xa6>
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006e64:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	2a03      	cmp	r2, #3
 8006e6c:	d803      	bhi.n	8006e76 <HAL_SPI_Receive+0x246>
 8006e6e:	f411 4fc0 	tst.w	r1, #24576	@ 0x6000
 8006e72:	f47f af3b 	bne.w	8006cec <HAL_SPI_Receive+0xbc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e76:	f7fc fbfb 	bl	8003670 <HAL_GetTick>
 8006e7a:	eba0 0008 	sub.w	r0, r0, r8
 8006e7e:	42b0      	cmp	r0, r6
 8006e80:	f4ff af29 	bcc.w	8006cd6 <HAL_SPI_Receive+0xa6>
 8006e84:	1c73      	adds	r3, r6, #1
 8006e86:	f43f af26 	beq.w	8006cd6 <HAL_SPI_Receive+0xa6>
 8006e8a:	e775      	b.n	8006d78 <HAL_SPI_Receive+0x148>
    return HAL_BUSY;
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	e762      	b.n	8006d56 <HAL_SPI_Receive+0x126>

08006e90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e90:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e92:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e94:	f023 0302 	bic.w	r3, r3, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e98:	f022 0201 	bic.w	r2, r2, #1
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006ea0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006ea2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006eaa:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006eae:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb0:	688d      	ldr	r5, [r1, #8]
 8006eb2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb4:	4d12      	ldr	r5, [pc, #72]	@ (8006f00 <TIM_OC1_SetConfig+0x70>)
 8006eb6:	42a8      	cmp	r0, r5
 8006eb8:	d00f      	beq.n	8006eda <TIM_OC1_SetConfig+0x4a>
 8006eba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ebe:	42a8      	cmp	r0, r5
 8006ec0:	d00b      	beq.n	8006eda <TIM_OC1_SetConfig+0x4a>
 8006ec2:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8006ec6:	42a8      	cmp	r0, r5
 8006ec8:	d007      	beq.n	8006eda <TIM_OC1_SetConfig+0x4a>
 8006eca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ece:	42a8      	cmp	r0, r5
 8006ed0:	d003      	beq.n	8006eda <TIM_OC1_SetConfig+0x4a>
 8006ed2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ed6:	42a8      	cmp	r0, r5
 8006ed8:	d10b      	bne.n	8006ef2 <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eda:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006edc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006ee0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ee2:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee6:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eea:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eee:	4334      	orrs	r4, r6
 8006ef0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef6:	684a      	ldr	r2, [r1, #4]
 8006ef8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	6203      	str	r3, [r0, #32]
}
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000

08006f04 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f04:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f06:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8006f10:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f12:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f14:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006f16:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 8006f18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f1e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006f22:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f24:	688d      	ldr	r5, [r1, #8]
 8006f26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f2a:	4d14      	ldr	r5, [pc, #80]	@ (8006f7c <TIM_OC3_SetConfig+0x78>)
 8006f2c:	42a8      	cmp	r0, r5
 8006f2e:	d00f      	beq.n	8006f50 <TIM_OC3_SetConfig+0x4c>
 8006f30:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f34:	42a8      	cmp	r0, r5
 8006f36:	d00b      	beq.n	8006f50 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f38:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8006f3c:	42a8      	cmp	r0, r5
 8006f3e:	d10f      	bne.n	8006f60 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f40:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f44:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8006f48:	4334      	orrs	r4, r6
 8006f4a:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8006f4e:	e00e      	b.n	8006f6e <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f54:	68cd      	ldr	r5, [r1, #12]
 8006f56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5e:	e7ef      	b.n	8006f40 <TIM_OC3_SetConfig+0x3c>
 8006f60:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <TIM_OC3_SetConfig+0x7c>)
 8006f62:	42a8      	cmp	r0, r5
 8006f64:	d0ec      	beq.n	8006f40 <TIM_OC3_SetConfig+0x3c>
 8006f66:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f6a:	42a8      	cmp	r0, r5
 8006f6c:	d0e8      	beq.n	8006f40 <TIM_OC3_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f72:	684a      	ldr	r2, [r1, #4]
 8006f74:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f76:	6203      	str	r3, [r0, #32]
}
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40014400 	.word	0x40014400

08006f84 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f84:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f86:	6a02      	ldr	r2, [r0, #32]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8006f90:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f92:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f94:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006f96:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f9a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006f9e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa6:	688d      	ldr	r5, [r1, #8]
 8006fa8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	4d0e      	ldr	r5, [pc, #56]	@ (8006fe8 <TIM_OC4_SetConfig+0x64>)
 8006fae:	42a8      	cmp	r0, r5
 8006fb0:	d00f      	beq.n	8006fd2 <TIM_OC4_SetConfig+0x4e>
 8006fb2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fb6:	42a8      	cmp	r0, r5
 8006fb8:	d00b      	beq.n	8006fd2 <TIM_OC4_SetConfig+0x4e>
 8006fba:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8006fbe:	42a8      	cmp	r0, r5
 8006fc0:	d007      	beq.n	8006fd2 <TIM_OC4_SetConfig+0x4e>
 8006fc2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fc6:	42a8      	cmp	r0, r5
 8006fc8:	d003      	beq.n	8006fd2 <TIM_OC4_SetConfig+0x4e>
 8006fca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fce:	42a8      	cmp	r0, r5
 8006fd0:	d104      	bne.n	8006fdc <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd6:	694d      	ldr	r5, [r1, #20]
 8006fd8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fdc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fde:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe0:	684a      	ldr	r2, [r1, #4]
 8006fe2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe4:	6203      	str	r3, [r0, #32]
}
 8006fe6:	bd30      	pop	{r4, r5, pc}
 8006fe8:	40010000 	.word	0x40010000

08006fec <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fec:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fee:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ff0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ff4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
{
 8006ff8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ffa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006ffc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8006ffe:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx |= OC_Config->OCMode;
 8007000:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007002:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007006:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800700a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800700c:	688d      	ldr	r5, [r1, #8]
 800700e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007012:	4d0f      	ldr	r5, [pc, #60]	@ (8007050 <TIM_OC5_SetConfig+0x64>)
 8007014:	42a8      	cmp	r0, r5
 8007016:	d00f      	beq.n	8007038 <TIM_OC5_SetConfig+0x4c>
 8007018:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800701c:	42a8      	cmp	r0, r5
 800701e:	d00b      	beq.n	8007038 <TIM_OC5_SetConfig+0x4c>
 8007020:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8007024:	42a8      	cmp	r0, r5
 8007026:	d007      	beq.n	8007038 <TIM_OC5_SetConfig+0x4c>
 8007028:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800702c:	42a8      	cmp	r0, r5
 800702e:	d003      	beq.n	8007038 <TIM_OC5_SetConfig+0x4c>
 8007030:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007034:	42a8      	cmp	r0, r5
 8007036:	d104      	bne.n	8007042 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007038:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800703c:	694d      	ldr	r5, [r1, #20]
 800703e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007042:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007044:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007046:	684a      	ldr	r2, [r1, #4]
 8007048:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	6203      	str	r3, [r0, #32]
}
 800704c:	bd30      	pop	{r4, r5, pc}
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000

08007054 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007054:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007056:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007058:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800705c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
{
 8007060:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007062:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007064:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8007066:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007068:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800706a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800706e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007072:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007076:	688d      	ldr	r5, [r1, #8]
 8007078:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	4d0e      	ldr	r5, [pc, #56]	@ (80070b8 <TIM_OC6_SetConfig+0x64>)
 800707e:	42a8      	cmp	r0, r5
 8007080:	d00f      	beq.n	80070a2 <TIM_OC6_SetConfig+0x4e>
 8007082:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007086:	42a8      	cmp	r0, r5
 8007088:	d00b      	beq.n	80070a2 <TIM_OC6_SetConfig+0x4e>
 800708a:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 800708e:	42a8      	cmp	r0, r5
 8007090:	d007      	beq.n	80070a2 <TIM_OC6_SetConfig+0x4e>
 8007092:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007096:	42a8      	cmp	r0, r5
 8007098:	d003      	beq.n	80070a2 <TIM_OC6_SetConfig+0x4e>
 800709a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800709e:	42a8      	cmp	r0, r5
 80070a0:	d104      	bne.n	80070ac <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070a2:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a6:	694d      	ldr	r5, [r1, #20]
 80070a8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ae:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070b0:	684a      	ldr	r2, [r1, #4]
 80070b2:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b4:	6203      	str	r3, [r0, #32]
}
 80070b6:	bd30      	pop	{r4, r5, pc}
 80070b8:	40010000 	.word	0x40010000

080070bc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80070bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d12f      	bne.n	8007124 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c6:	4a18      	ldr	r2, [pc, #96]	@ (8007128 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070cc:	6803      	ldr	r3, [r0, #0]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01a      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d6:	d017      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070d8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00f      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00b      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070f0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d007      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 80070f8:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <HAL_TIM_Base_Start+0x4c>
 8007100:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007104:	4293      	cmp	r3, r2
 8007106:	d107      	bne.n	8007118 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007108:	6899      	ldr	r1, [r3, #8]
 800710a:	4a08      	ldr	r2, [pc, #32]	@ (800712c <HAL_TIM_Base_Start+0x70>)
 800710c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800710e:	2a06      	cmp	r2, #6
 8007110:	d006      	beq.n	8007120 <HAL_TIM_Base_Start+0x64>
 8007112:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007116:	d003      	beq.n	8007120 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007120:	2000      	movs	r0, #0
 8007122:	4770      	bx	lr
    return HAL_ERROR;
 8007124:	2001      	movs	r0, #1
}
 8007126:	4770      	bx	lr
 8007128:	40010000 	.word	0x40010000
 800712c:	00010007 	.word	0x00010007

08007130 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007130:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007134:	2b01      	cmp	r3, #1
 8007136:	d133      	bne.n	80071a0 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	2302      	movs	r3, #2
 800713a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800713e:	6803      	ldr	r3, [r0, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <HAL_TIM_Base_Start_IT+0x74>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01a      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007152:	d017      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 8007154:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 800715c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007160:	4293      	cmp	r3, r2
 8007162:	d00f      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 8007164:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007168:	4293      	cmp	r3, r2
 800716a:	d00b      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 800716c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 8007174:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <HAL_TIM_Base_Start_IT+0x54>
 800717c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007180:	4293      	cmp	r3, r2
 8007182:	d107      	bne.n	8007194 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007184:	6899      	ldr	r1, [r3, #8]
 8007186:	4a08      	ldr	r2, [pc, #32]	@ (80071a8 <HAL_TIM_Base_Start_IT+0x78>)
 8007188:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718a:	2a06      	cmp	r2, #6
 800718c:	d006      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x6c>
 800718e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007192:	d003      	beq.n	800719c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800719c:	2000      	movs	r0, #0
 800719e:	4770      	bx	lr
    return HAL_ERROR;
 80071a0:	2001      	movs	r0, #1
}
 80071a2:	4770      	bx	lr
 80071a4:	40010000 	.word	0x40010000
 80071a8:	00010007 	.word	0x00010007

080071ac <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 80071ac:	4770      	bx	lr

080071ae <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80071b4:	4770      	bx	lr

080071b6 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80071b6:	6803      	ldr	r3, [r0, #0]
{
 80071b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80071ba:	68dd      	ldr	r5, [r3, #12]
{
 80071bc:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80071be:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071c0:	07b2      	lsls	r2, r6, #30
 80071c2:	d50d      	bpl.n	80071e0 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071c4:	07a9      	lsls	r1, r5, #30
 80071c6:	d50b      	bpl.n	80071e0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c8:	f06f 0202 	mvn.w	r2, #2
 80071cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ce:	2201      	movs	r2, #1
 80071d0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	079a      	lsls	r2, r3, #30
 80071d6:	d075      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 80071d8:	f7ff ffea 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071dc:	2300      	movs	r3, #0
 80071de:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071e0:	0773      	lsls	r3, r6, #29
 80071e2:	d510      	bpl.n	8007206 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071e4:	0768      	lsls	r0, r5, #29
 80071e6:	d50e      	bpl.n	8007206 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f2:	2202      	movs	r2, #2
 80071f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80071fc:	d068      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80071fe:	f7ff ffd7 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	2300      	movs	r3, #0
 8007204:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007206:	0731      	lsls	r1, r6, #28
 8007208:	d50f      	bpl.n	800722a <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800720a:	072a      	lsls	r2, r5, #28
 800720c:	d50d      	bpl.n	800722a <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007214:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007218:	2204      	movs	r2, #4
 800721a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	079b      	lsls	r3, r3, #30
 8007220:	d05c      	beq.n	80072dc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007222:	f7ff ffc5 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	2300      	movs	r3, #0
 8007228:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800722a:	06f1      	lsls	r1, r6, #27
 800722c:	d510      	bpl.n	8007250 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800722e:	06ea      	lsls	r2, r5, #27
 8007230:	d50e      	bpl.n	8007250 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8007238:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800723a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800723c:	2208      	movs	r2, #8
 800723e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007246:	d04f      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8007248:	f7ff ffb2 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724c:	2300      	movs	r3, #0
 800724e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007250:	07f3      	lsls	r3, r6, #31
 8007252:	d508      	bpl.n	8007266 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007254:	07e8      	lsls	r0, r5, #31
 8007256:	d506      	bpl.n	8007266 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800725e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007260:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007262:	f7fb fc25 	bl	8002ab0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007266:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800726a:	d008      	beq.n	800727e <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800726c:	0629      	lsls	r1, r5, #24
 800726e:	d506      	bpl.n	800727e <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8007276:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007278:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800727a:	f000 fb0c 	bl	8007896 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800727e:	05f2      	lsls	r2, r6, #23
 8007280:	d508      	bpl.n	8007294 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007282:	062b      	lsls	r3, r5, #24
 8007284:	d506      	bpl.n	8007294 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800728c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800728e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007290:	f000 fb02 	bl	8007898 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007294:	0670      	lsls	r0, r6, #25
 8007296:	d508      	bpl.n	80072aa <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007298:	0669      	lsls	r1, r5, #25
 800729a:	d506      	bpl.n	80072aa <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80072a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80072a6:	f7ff ff85 	bl	80071b4 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072aa:	06b2      	lsls	r2, r6, #26
 80072ac:	d522      	bpl.n	80072f4 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072ae:	06ab      	lsls	r3, r5, #26
 80072b0:	d520      	bpl.n	80072f4 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80072b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072ba:	611a      	str	r2, [r3, #16]
}
 80072bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80072c0:	f000 bae8 	b.w	8007894 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c4:	f7ff ff73 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	4620      	mov	r0, r4
 80072ca:	f7ff ff72 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80072ce:	e785      	b.n	80071dc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d0:	f7ff ff6d 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff ff6c 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80072da:	e792      	b.n	8007202 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	f7ff ff67 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	4620      	mov	r0, r4
 80072e2:	f7ff ff66 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80072e6:	e79e      	b.n	8007226 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e8:	f7ff ff61 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff ff60 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80072f2:	e7ab      	b.n	800724c <HAL_TIM_IRQHandler+0x96>
}
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072f8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f8:	4a27      	ldr	r2, [pc, #156]	@ (8007398 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 80072fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072fc:	4290      	cmp	r0, r2
 80072fe:	d012      	beq.n	8007326 <TIM_Base_SetConfig+0x2e>
 8007300:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007304:	d00f      	beq.n	8007326 <TIM_Base_SetConfig+0x2e>
 8007306:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800730a:	4290      	cmp	r0, r2
 800730c:	d00b      	beq.n	8007326 <TIM_Base_SetConfig+0x2e>
 800730e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007312:	4290      	cmp	r0, r2
 8007314:	d007      	beq.n	8007326 <TIM_Base_SetConfig+0x2e>
 8007316:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800731a:	4290      	cmp	r0, r2
 800731c:	d003      	beq.n	8007326 <TIM_Base_SetConfig+0x2e>
 800731e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007322:	4290      	cmp	r0, r2
 8007324:	d108      	bne.n	8007338 <TIM_Base_SetConfig+0x40>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800732a:	684a      	ldr	r2, [r1, #4]
 800732c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800732e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007332:	68ca      	ldr	r2, [r1, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	e00a      	b.n	800734e <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007338:	4a18      	ldr	r2, [pc, #96]	@ (800739c <TIM_Base_SetConfig+0xa4>)
 800733a:	4290      	cmp	r0, r2
 800733c:	d0f7      	beq.n	800732e <TIM_Base_SetConfig+0x36>
 800733e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007342:	4290      	cmp	r0, r2
 8007344:	d0f3      	beq.n	800732e <TIM_Base_SetConfig+0x36>
 8007346:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800734a:	4290      	cmp	r0, r2
 800734c:	d0ef      	beq.n	800732e <TIM_Base_SetConfig+0x36>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800734e:	694a      	ldr	r2, [r1, #20]
 8007350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007354:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007356:	688a      	ldr	r2, [r1, #8]
 8007358:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800735a:	680a      	ldr	r2, [r1, #0]
 800735c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800735e:	4a0e      	ldr	r2, [pc, #56]	@ (8007398 <TIM_Base_SetConfig+0xa0>)
 8007360:	4290      	cmp	r0, r2
 8007362:	d00f      	beq.n	8007384 <TIM_Base_SetConfig+0x8c>
 8007364:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007368:	4290      	cmp	r0, r2
 800736a:	d00b      	beq.n	8007384 <TIM_Base_SetConfig+0x8c>
 800736c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007370:	4290      	cmp	r0, r2
 8007372:	d007      	beq.n	8007384 <TIM_Base_SetConfig+0x8c>
 8007374:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007378:	4290      	cmp	r0, r2
 800737a:	d003      	beq.n	8007384 <TIM_Base_SetConfig+0x8c>
 800737c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007380:	4290      	cmp	r0, r2
 8007382:	d101      	bne.n	8007388 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 8007384:	690a      	ldr	r2, [r1, #16]
 8007386:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007388:	6802      	ldr	r2, [r0, #0]
 800738a:	f042 0204 	orr.w	r2, r2, #4
 800738e:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8007390:	2201      	movs	r2, #1
 8007392:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8007394:	6003      	str	r3, [r0, #0]
}
 8007396:	4770      	bx	lr
 8007398:	40010000 	.word	0x40010000
 800739c:	40014000 	.word	0x40014000

080073a0 <HAL_TIM_Base_Init>:
{
 80073a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80073a2:	4604      	mov	r4, r0
 80073a4:	b350      	cbz	r0, 80073fc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80073a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80073aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80073ae:	b91b      	cbnz	r3, 80073b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80073b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80073b4:	f7fb ff9e 	bl	80032f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80073be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c2:	f7ff ff99 	bl	80072f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c6:	2301      	movs	r3, #1
  return HAL_OK;
 80073c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ca:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80073d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80073d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80073da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80073de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80073ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80073ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80073f2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80073fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7fc      	b.n	80073fa <HAL_TIM_Base_Init+0x5a>

08007400 <HAL_TIM_OC_Init>:
{
 8007400:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007402:	4604      	mov	r4, r0
 8007404:	b350      	cbz	r0, 800745c <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800740a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800740e:	b91b      	cbnz	r3, 8007418 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007410:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007414:	f7ff feca 	bl	80071ac <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800741e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007422:	f7ff ff69 	bl	80072f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007426:	2301      	movs	r3, #1
  return HAL_OK;
 8007428:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800742a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007432:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007436:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800743a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800743e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007446:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800744a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800744e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007452:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007456:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800745a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800745c:	2001      	movs	r0, #1
 800745e:	e7fc      	b.n	800745a <HAL_TIM_OC_Init+0x5a>

08007460 <HAL_TIM_PWM_Init>:
{
 8007460:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007462:	4604      	mov	r4, r0
 8007464:	b350      	cbz	r0, 80074bc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007466:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800746a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800746e:	b91b      	cbnz	r3, 8007478 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007470:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007474:	f7fb ff26 	bl	80032c4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800747e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007482:	f7ff ff39 	bl	80072f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007486:	2301      	movs	r3, #1
  return HAL_OK;
 8007488:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007492:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007496:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800749a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800749e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80074aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80074ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80074b2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80074b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80074ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074bc:	2001      	movs	r0, #1
 80074be:	e7fc      	b.n	80074ba <HAL_TIM_PWM_Init+0x5a>

080074c0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80074c0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c2:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 80074c4:	f023 0320 	bic.w	r3, r3, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c8:	f022 0210 	bic.w	r2, r2, #16
{
 80074cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ce:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80074d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80074d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074d6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80074da:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074e2:	688d      	ldr	r5, [r1, #8]
 80074e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074e8:	4d13      	ldr	r5, [pc, #76]	@ (8007538 <TIM_OC2_SetConfig+0x78>)
 80074ea:	42a8      	cmp	r0, r5
 80074ec:	d00f      	beq.n	800750e <TIM_OC2_SetConfig+0x4e>
 80074ee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80074f2:	42a8      	cmp	r0, r5
 80074f4:	d00b      	beq.n	800750e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f6:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 80074fa:	42a8      	cmp	r0, r5
 80074fc:	d10f      	bne.n	800751e <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074fe:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007502:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8007506:	4334      	orrs	r4, r6
 8007508:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
 800750c:	e00e      	b.n	800752c <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800750e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007512:	68cd      	ldr	r5, [r1, #12]
 8007514:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	e7ef      	b.n	80074fe <TIM_OC2_SetConfig+0x3e>
 800751e:	4d07      	ldr	r5, [pc, #28]	@ (800753c <TIM_OC2_SetConfig+0x7c>)
 8007520:	42a8      	cmp	r0, r5
 8007522:	d0ec      	beq.n	80074fe <TIM_OC2_SetConfig+0x3e>
 8007524:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007528:	42a8      	cmp	r0, r5
 800752a:	d0e8      	beq.n	80074fe <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800752c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800752e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007530:	684a      	ldr	r2, [r1, #4]
 8007532:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007534:	6203      	str	r3, [r0, #32]
}
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	40010000 	.word	0x40010000
 800753c:	40014400 	.word	0x40014400

08007540 <HAL_TIM_OC_ConfigChannel>:
{
 8007540:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8007542:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007546:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007548:	2b01      	cmp	r3, #1
 800754a:	d029      	beq.n	80075a0 <HAL_TIM_OC_ConfigChannel+0x60>
  switch (Channel)
 800754c:	2a0c      	cmp	r2, #12
 800754e:	d01f      	beq.n	8007590 <HAL_TIM_OC_ConfigChannel+0x50>
 8007550:	d809      	bhi.n	8007566 <HAL_TIM_OC_ConfigChannel+0x26>
 8007552:	2a04      	cmp	r2, #4
 8007554:	d014      	beq.n	8007580 <HAL_TIM_OC_ConfigChannel+0x40>
 8007556:	2a08      	cmp	r2, #8
 8007558:	d016      	beq.n	8007588 <HAL_TIM_OC_ConfigChannel+0x48>
 800755a:	b162      	cbz	r2, 8007576 <HAL_TIM_OC_ConfigChannel+0x36>
 800755c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800755e:	2300      	movs	r3, #0
 8007560:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007564:	bd10      	pop	{r4, pc}
  switch (Channel)
 8007566:	2a10      	cmp	r2, #16
 8007568:	d016      	beq.n	8007598 <HAL_TIM_OC_ConfigChannel+0x58>
 800756a:	2a14      	cmp	r2, #20
 800756c:	d1f6      	bne.n	800755c <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	f7ff fd70 	bl	8007054 <TIM_OC6_SetConfig>
      break;
 8007574:	e002      	b.n	800757c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	f7ff fc8a 	bl	8006e90 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800757c:	2000      	movs	r0, #0
 800757e:	e7ee      	b.n	800755e <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007580:	6800      	ldr	r0, [r0, #0]
 8007582:	f7ff ff9d 	bl	80074c0 <TIM_OC2_SetConfig>
      break;
 8007586:	e7f9      	b.n	800757c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007588:	6800      	ldr	r0, [r0, #0]
 800758a:	f7ff fcbb 	bl	8006f04 <TIM_OC3_SetConfig>
      break;
 800758e:	e7f5      	b.n	800757c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007590:	6800      	ldr	r0, [r0, #0]
 8007592:	f7ff fcf7 	bl	8006f84 <TIM_OC4_SetConfig>
      break;
 8007596:	e7f1      	b.n	800757c <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007598:	6800      	ldr	r0, [r0, #0]
 800759a:	f7ff fd27 	bl	8006fec <TIM_OC5_SetConfig>
      break;
 800759e:	e7ed      	b.n	800757c <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 80075a0:	2002      	movs	r0, #2
 80075a2:	e7df      	b.n	8007564 <HAL_TIM_OC_ConfigChannel+0x24>

080075a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80075a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80075a6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80075aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d073      	beq.n	8007698 <HAL_TIM_PWM_ConfigChannel+0xf4>
 80075b0:	2001      	movs	r0, #1
  switch (Channel)
 80075b2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80075b4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 80075b8:	d04e      	beq.n	8007658 <HAL_TIM_PWM_ConfigChannel+0xb4>
 80075ba:	d808      	bhi.n	80075ce <HAL_TIM_PWM_ConfigChannel+0x2a>
 80075bc:	2a04      	cmp	r2, #4
 80075be:	d02b      	beq.n	8007618 <HAL_TIM_PWM_ConfigChannel+0x74>
 80075c0:	2a08      	cmp	r2, #8
 80075c2:	d039      	beq.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x94>
 80075c4:	b1ba      	cbz	r2, 80075f6 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 80075c6:	2300      	movs	r3, #0
 80075c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80075ce:	2a10      	cmp	r2, #16
 80075d0:	d052      	beq.n	8007678 <HAL_TIM_PWM_ConfigChannel+0xd4>
 80075d2:	2a14      	cmp	r2, #20
 80075d4:	d1f7      	bne.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	f7ff fd3c 	bl	8007054 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075dc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075de:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80075e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075e4:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075e6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80075e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075ec:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80075f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80075f4:	e04e      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	f7ff fc4a 	bl	8006e90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075fc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075fe:	6983      	ldr	r3, [r0, #24]
 8007600:	f043 0308 	orr.w	r3, r3, #8
 8007604:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007606:	6983      	ldr	r3, [r0, #24]
 8007608:	f023 0304 	bic.w	r3, r3, #4
 800760c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800760e:	6983      	ldr	r3, [r0, #24]
 8007610:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007612:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007614:	2000      	movs	r0, #0
 8007616:	e7d6      	b.n	80075c6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	f7ff ff51 	bl	80074c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800761e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007620:	6983      	ldr	r3, [r0, #24]
 8007622:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007626:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007628:	6983      	ldr	r3, [r0, #24]
 800762a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800762e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007630:	6983      	ldr	r3, [r0, #24]
 8007632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007636:	e7ec      	b.n	8007612 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	f7ff fc63 	bl	8006f04 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800763e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007640:	69c3      	ldr	r3, [r0, #28]
 8007642:	f043 0308 	orr.w	r3, r3, #8
 8007646:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007648:	69c3      	ldr	r3, [r0, #28]
 800764a:	f023 0304 	bic.w	r3, r3, #4
 800764e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007650:	69c3      	ldr	r3, [r0, #28]
 8007652:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007654:	61c3      	str	r3, [r0, #28]
      break;
 8007656:	e7dd      	b.n	8007614 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	f7ff fc93 	bl	8006f84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800765e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007660:	69c3      	ldr	r3, [r0, #28]
 8007662:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007666:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007668:	69c3      	ldr	r3, [r0, #28]
 800766a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800766e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007670:	69c3      	ldr	r3, [r0, #28]
 8007672:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007676:	e7ed      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	f7ff fcb7 	bl	8006fec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800767e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007680:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007682:	f043 0308 	orr.w	r3, r3, #8
 8007686:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007688:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800768a:	f023 0304 	bic.w	r3, r3, #4
 800768e:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007690:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007692:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007694:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 8007696:	e7bd      	b.n	8007614 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8007698:	2002      	movs	r0, #2
 800769a:	e797      	b.n	80075cc <HAL_TIM_PWM_ConfigChannel+0x28>

0800769c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800769c:	b510      	push	{r4, lr}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800769e:	f001 010f 	and.w	r1, r1, #15
 80076a2:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80076a4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80076a6:	408c      	lsls	r4, r1

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80076a8:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 80076aa:	ea23 0304 	bic.w	r3, r3, r4
 80076ae:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	6202      	str	r2, [r0, #32]
}
 80076b6:	bd10      	pop	{r4, pc}

080076b8 <HAL_TIMEx_OCN_Start>:
{
 80076b8:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ba:	b929      	cbnz	r1, 80076c8 <HAL_TIMEx_OCN_Start+0x10>
 80076bc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d01d      	beq.n	8007700 <HAL_TIMEx_OCN_Start+0x48>
    return HAL_ERROR;
 80076c4:	2001      	movs	r0, #1
 80076c6:	e051      	b.n	800776c <HAL_TIMEx_OCN_Start+0xb4>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076c8:	2904      	cmp	r1, #4
 80076ca:	d107      	bne.n	80076dc <HAL_TIMEx_OCN_Start+0x24>
 80076cc:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d1f7      	bne.n	80076c4 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d4:	2302      	movs	r3, #2
 80076d6:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 80076da:	e014      	b.n	8007706 <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076dc:	2908      	cmp	r1, #8
 80076de:	d107      	bne.n	80076f0 <HAL_TIMEx_OCN_Start+0x38>
 80076e0:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d1ed      	bne.n	80076c4 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e8:	2302      	movs	r3, #2
 80076ea:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 80076ee:	e00a      	b.n	8007706 <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076f0:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d1e5      	bne.n	80076c4 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f8:	2302      	movs	r3, #2
 80076fa:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80076fe:	e002      	b.n	8007706 <HAL_TIMEx_OCN_Start+0x4e>
 8007700:	2302      	movs	r3, #2
 8007702:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	2204      	movs	r2, #4
 800770a:	f7ff ffc7 	bl	800769c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800770e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007714:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007716:	4b16      	ldr	r3, [pc, #88]	@ (8007770 <HAL_TIMEx_OCN_Start+0xb8>)
 8007718:	4298      	cmp	r0, r3
 800771a:	d01a      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 800771c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007720:	d017      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 8007722:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 8007726:	4298      	cmp	r0, r3
 8007728:	d013      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 800772a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800772e:	4298      	cmp	r0, r3
 8007730:	d00f      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 8007732:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007736:	4298      	cmp	r0, r3
 8007738:	d00b      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 800773a:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 800773e:	4298      	cmp	r0, r3
 8007740:	d007      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 8007742:	f5a3 436c 	sub.w	r3, r3, #60416	@ 0xec00
 8007746:	4298      	cmp	r0, r3
 8007748:	d003      	beq.n	8007752 <HAL_TIMEx_OCN_Start+0x9a>
 800774a:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800774e:	4298      	cmp	r0, r3
 8007750:	d107      	bne.n	8007762 <HAL_TIMEx_OCN_Start+0xaa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007752:	6882      	ldr	r2, [r0, #8]
 8007754:	4b07      	ldr	r3, [pc, #28]	@ (8007774 <HAL_TIMEx_OCN_Start+0xbc>)
 8007756:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	2b06      	cmp	r3, #6
 800775a:	d006      	beq.n	800776a <HAL_TIMEx_OCN_Start+0xb2>
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007760:	d003      	beq.n	800776a <HAL_TIMEx_OCN_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 8007762:	6803      	ldr	r3, [r0, #0]
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 800776a:	2000      	movs	r0, #0
}
 800776c:	bd08      	pop	{r3, pc}
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	00010007 	.word	0x00010007

08007778 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8007778:	f7ff bf9e 	b.w	80076b8 <HAL_TIMEx_OCN_Start>

0800777c <HAL_TIMEx_MasterConfigSynchronization>:
{
 800777c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800777e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007782:	4604      	mov	r4, r0
 8007784:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8007786:	2b01      	cmp	r3, #1
 8007788:	d03b      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0x86>
  tmpcr2 = htim->Instance->CR2;
 800778a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800778c:	4d1d      	ldr	r5, [pc, #116]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800778e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007792:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007794:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007796:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007798:	d002      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800779a:	4e1b      	ldr	r6, [pc, #108]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800779c:	42b3      	cmp	r3, r6
 800779e:	d103      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077a0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077a4:	684e      	ldr	r6, [r1, #4]
 80077a6:	4332      	orrs	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a8:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80077aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ae:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b0:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 80077b4:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	d019      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077bc:	d016      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077be:	4a13      	ldr	r2, [pc, #76]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00f      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00b      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077d4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80077d8:	4293      	cmp	r3, r2
 80077da:	d007      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077dc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80077e4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d104      	bne.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ec:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ee:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f2:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 80077f4:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80077f6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80077f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80077fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80077fe:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	40010000 	.word	0x40010000
 8007808:	40010400 	.word	0x40010400
 800780c:	40000400 	.word	0x40000400

08007810 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8007810:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8007812:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007816:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007818:	2b01      	cmp	r3, #1
 800781a:	d037      	beq.n	800788c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800781c:	68cb      	ldr	r3, [r1, #12]
 800781e:	6888      	ldr	r0, [r1, #8]
 8007820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007824:	4c1a      	ldr	r4, [pc, #104]	@ (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007826:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007828:	6848      	ldr	r0, [r1, #4]
 800782a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800782e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007830:	6808      	ldr	r0, [r1, #0]
 8007832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007836:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007838:	6908      	ldr	r0, [r1, #16]
 800783a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800783e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007840:	6948      	ldr	r0, [r1, #20]
 8007842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007846:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007848:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800784a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800784e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007850:	6988      	ldr	r0, [r1, #24]
 8007852:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8007856:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800785a:	6810      	ldr	r0, [r2, #0]
 800785c:	42a0      	cmp	r0, r4
 800785e:	d003      	beq.n	8007868 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 8007860:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8007864:	42a0      	cmp	r0, r4
 8007866:	d10c      	bne.n	8007882 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007868:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800786a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800786e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007872:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007874:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800787a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800787c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007880:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8007882:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8007884:	2000      	movs	r0, #0
 8007886:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 800788a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800788c:	2002      	movs	r0, #2
 800788e:	e7fc      	b.n	800788a <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8007890:	40010000 	.word	0x40010000

08007894 <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007894:	4770      	bx	lr

08007896 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007896:	4770      	bx	lr

08007898 <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007898:	4770      	bx	lr
	...

0800789c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800789c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800789e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	e852 3f00 	ldrex	r3, [r2]
 80078a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80078ac:	6802      	ldr	r2, [r0, #0]
 80078ae:	2900      	cmp	r1, #0
 80078b0:	d1f5      	bne.n	800789e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b2:	4c0f      	ldr	r4, [pc, #60]	@ (80078f0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	f102 0308 	add.w	r3, r2, #8
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f102 0c08 	add.w	ip, r2, #8
 80078c2:	e84c 3100 	strex	r1, r3, [ip]
 80078c6:	2900      	cmp	r1, #0
 80078c8:	d1f4      	bne.n	80078b4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d107      	bne.n	80078e0 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	e842 3100 	strex	r1, r3, [r2]
 80078dc:	2900      	cmp	r1, #0
 80078de:	d1f7      	bne.n	80078d0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e0:	2320      	movs	r3, #32
 80078e2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	2300      	movs	r3, #0
 80078e8:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ea:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	bf00      	nop
 80078f0:	effffffe 	.word	0xeffffffe

080078f4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80078f4:	4770      	bx	lr

080078f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078f6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078f8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007900:	f7f9 fea4 	bl	800164c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007904:	bd08      	pop	{r3, pc}

08007906 <HAL_UARTEx_RxEventCallback>:
}
 8007906:	4770      	bx	lr

08007908 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007908:	6803      	ldr	r3, [r0, #0]
{
 800790a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800790e:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 8007910:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007914:	681a      	ldr	r2, [r3, #0]
{
 8007916:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8007918:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800791a:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800791c:	d110      	bne.n	8007940 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800791e:	068e      	lsls	r6, r1, #26
 8007920:	f140 8097 	bpl.w	8007a52 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007924:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007928:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 800792c:	433e      	orrs	r6, r7
 800792e:	f000 8090 	beq.w	8007a52 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8007932:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8085 	beq.w	8007a44 <HAL_UART_IRQHandler+0x13c>
}
 800793a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800793e:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007940:	4ea6      	ldr	r6, [pc, #664]	@ (8007bdc <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007942:	48a7      	ldr	r0, [pc, #668]	@ (8007be0 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007944:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007946:	4010      	ands	r0, r2
 8007948:	4330      	orrs	r0, r6
 800794a:	f000 8082 	beq.w	8007a52 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800794e:	07cf      	lsls	r7, r1, #31
 8007950:	d509      	bpl.n	8007966 <HAL_UART_IRQHandler+0x5e>
 8007952:	05d0      	lsls	r0, r2, #23
 8007954:	d507      	bpl.n	8007966 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007956:	2001      	movs	r0, #1
 8007958:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800795a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800795e:	f040 0001 	orr.w	r0, r0, #1
 8007962:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007966:	078f      	lsls	r7, r1, #30
 8007968:	d509      	bpl.n	800797e <HAL_UART_IRQHandler+0x76>
 800796a:	07e8      	lsls	r0, r5, #31
 800796c:	d507      	bpl.n	800797e <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800796e:	2002      	movs	r0, #2
 8007970:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007972:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007976:	f040 0004 	orr.w	r0, r0, #4
 800797a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800797e:	074f      	lsls	r7, r1, #29
 8007980:	d509      	bpl.n	8007996 <HAL_UART_IRQHandler+0x8e>
 8007982:	07e8      	lsls	r0, r5, #31
 8007984:	d507      	bpl.n	8007996 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007986:	2004      	movs	r0, #4
 8007988:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800798a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800798e:	f040 0002 	orr.w	r0, r0, #2
 8007992:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007996:	070f      	lsls	r7, r1, #28
 8007998:	d50b      	bpl.n	80079b2 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800799a:	f002 0020 	and.w	r0, r2, #32
 800799e:	4330      	orrs	r0, r6
 80079a0:	d007      	beq.n	80079b2 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a2:	2008      	movs	r0, #8
 80079a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80079aa:	f040 0008 	orr.w	r0, r0, #8
 80079ae:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079b2:	050e      	lsls	r6, r1, #20
 80079b4:	d50a      	bpl.n	80079cc <HAL_UART_IRQHandler+0xc4>
 80079b6:	0150      	lsls	r0, r2, #5
 80079b8:	d508      	bpl.n	80079cc <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80079be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80079c4:	f043 0320 	orr.w	r3, r3, #32
 80079c8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d037      	beq.n	8007a44 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079d4:	068b      	lsls	r3, r1, #26
 80079d6:	d509      	bpl.n	80079ec <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079d8:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079dc:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 80079e0:	432a      	orrs	r2, r5
 80079e2:	d003      	beq.n	80079ec <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 80079e4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80079e6:	b10b      	cbz	r3, 80079ec <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 80079e8:	4620      	mov	r0, r4
 80079ea:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ec:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 80079ee:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80079f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079f4:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079f6:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079fe:	ea53 0502 	orrs.w	r5, r3, r2
 8007a02:	d021      	beq.n	8007a48 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8007a04:	f7ff ff4a 	bl	800789c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a08:	68b3      	ldr	r3, [r6, #8]
 8007a0a:	065f      	lsls	r7, r3, #25
 8007a0c:	d517      	bpl.n	8007a3e <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	f102 0308 	add.w	r3, r2, #8
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	3208      	adds	r2, #8
 8007a1e:	e842 3100 	strex	r1, r3, [r2]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d1f3      	bne.n	8007a0e <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 8007a26:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007a2a:	b140      	cbz	r0, 8007a3e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8007be4 <HAL_UART_IRQHandler+0x2dc>)
 8007a2e:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a30:	f7fc fbb6 	bl	80041a0 <HAL_DMA_Abort_IT>
 8007a34:	b130      	cbz	r0, 8007a44 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a36:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007a3a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007a3c:	e77d      	b.n	800793a <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7f9 fe04 	bl	800164c <HAL_UART_ErrorCallback>
}
 8007a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8007a48:	f7f9 fe00 	bl	800164c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4c:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8007a50:	e7f8      	b.n	8007a44 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a52:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007a54:	2801      	cmp	r0, #1
 8007a56:	f040 80b5 	bne.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a5a:	06ce      	lsls	r6, r1, #27
 8007a5c:	f140 80b2 	bpl.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a60:	06d0      	lsls	r0, r2, #27
 8007a62:	f140 80af 	bpl.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a66:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a68:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	0652      	lsls	r2, r2, #25
 8007a72:	d577      	bpl.n	8007b64 <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a74:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8007a78:	495b      	ldr	r1, [pc, #364]	@ (8007be8 <HAL_UART_IRQHandler+0x2e0>)
 8007a7a:	682a      	ldr	r2, [r5, #0]
 8007a7c:	428a      	cmp	r2, r1
 8007a7e:	d01e      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a80:	3118      	adds	r1, #24
 8007a82:	428a      	cmp	r2, r1
 8007a84:	d01b      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a86:	3118      	adds	r1, #24
 8007a88:	428a      	cmp	r2, r1
 8007a8a:	d018      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a8c:	3118      	adds	r1, #24
 8007a8e:	428a      	cmp	r2, r1
 8007a90:	d015      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a92:	3118      	adds	r1, #24
 8007a94:	428a      	cmp	r2, r1
 8007a96:	d012      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a98:	3118      	adds	r1, #24
 8007a9a:	428a      	cmp	r2, r1
 8007a9c:	d00f      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007a9e:	3118      	adds	r1, #24
 8007aa0:	428a      	cmp	r2, r1
 8007aa2:	d00c      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007aa4:	3118      	adds	r1, #24
 8007aa6:	428a      	cmp	r2, r1
 8007aa8:	d009      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007aaa:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8007aae:	428a      	cmp	r2, r1
 8007ab0:	d005      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007ab2:	3118      	adds	r1, #24
 8007ab4:	428a      	cmp	r2, r1
 8007ab6:	d002      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007ab8:	3118      	adds	r1, #24
 8007aba:	428a      	cmp	r2, r1
 8007abc:	d0ff      	beq.n	8007abe <HAL_UART_IRQHandler+0x1b6>
 8007abe:	6851      	ldr	r1, [r2, #4]
 8007ac0:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	d043      	beq.n	8007b4e <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac6:	4281      	cmp	r1, r0
 8007ac8:	d241      	bcs.n	8007b4e <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aca:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8007acc:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ad0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8007ad4:	d02f      	beq.n	8007b36 <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	e843 2100 	strex	r1, r2, [r3]
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d1f7      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	f103 0208 	add.w	r2, r3, #8
 8007aea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aee:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	f103 0008 	add.w	r0, r3, #8
 8007af6:	e840 2100 	strex	r1, r2, [r0]
 8007afa:	2900      	cmp	r1, #0
 8007afc:	d1f3      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	f103 0208 	add.w	r2, r3, #8
 8007b02:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	f103 0008 	add.w	r0, r3, #8
 8007b0e:	e840 2100 	strex	r1, r2, [r0]
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d1f3      	bne.n	8007afe <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b22:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	e843 2100 	strex	r1, r2, [r3]
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	d1f7      	bne.n	8007b1e <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b2e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007b32:	f7fc fa21 	bl	8003f78 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b36:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b38:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b3c:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b3e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007b42:	1ac9      	subs	r1, r1, r3
 8007b44:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff fedd 	bl	8007906 <HAL_UARTEx_RxEventCallback>
 8007b4c:	e77a      	b.n	8007a44 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b4e:	4281      	cmp	r1, r0
 8007b50:	f47f af78 	bne.w	8007a44 <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b54:	69eb      	ldr	r3, [r5, #28]
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5a:	f47f af73 	bne.w	8007a44 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	6723      	str	r3, [r4, #112]	@ 0x70
 8007b62:	e7f0      	b.n	8007b46 <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b64:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8007b68:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b6c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007b6e:	b289      	uxth	r1, r1
 8007b70:	2900      	cmp	r1, #0
 8007b72:	f43f af67 	beq.w	8007a44 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b76:	1a80      	subs	r0, r0, r2
 8007b78:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	f43f af62 	beq.w	8007a44 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b84:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	e843 2000 	strex	r0, r2, [r3]
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d1f7      	bne.n	8007b80 <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b90:	4d16      	ldr	r5, [pc, #88]	@ (8007bec <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	f103 0208 	add.w	r2, r3, #8
 8007b96:	e852 2f00 	ldrex	r2, [r2]
 8007b9a:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	f103 0608 	add.w	r6, r3, #8
 8007ba0:	e846 2000 	strex	r0, r2, [r6]
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1f4      	bne.n	8007b92 <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 8007ba8:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8007baa:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007bac:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	e843 2000 	strex	r0, r2, [r3]
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1f7      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
 8007bc2:	e7cc      	b.n	8007b5e <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bc4:	02cf      	lsls	r7, r1, #11
 8007bc6:	d513      	bpl.n	8007bf0 <HAL_UART_IRQHandler+0x2e8>
 8007bc8:	026e      	lsls	r6, r5, #9
 8007bca:	d511      	bpl.n	8007bf0 <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8007bd0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bd2:	621a      	str	r2, [r3, #32]
}
 8007bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007bd8:	f000 be18 	b.w	800880c <HAL_UARTEx_WakeupCallback>
 8007bdc:	10000001 	.word	0x10000001
 8007be0:	04000120 	.word	0x04000120
 8007be4:	080078f7 	.word	0x080078f7
 8007be8:	40020010 	.word	0x40020010
 8007bec:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bf0:	0608      	lsls	r0, r1, #24
 8007bf2:	d50b      	bpl.n	8007c0c <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bf4:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bf8:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 8007bfc:	4328      	orrs	r0, r5
 8007bfe:	d005      	beq.n	8007c0c <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 8007c00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f43f af1e 	beq.w	8007a44 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8007c08:	4620      	mov	r0, r4
 8007c0a:	e696      	b.n	800793a <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c0c:	064f      	lsls	r7, r1, #25
 8007c0e:	d511      	bpl.n	8007c34 <HAL_UART_IRQHandler+0x32c>
 8007c10:	0656      	lsls	r6, r2, #25
 8007c12:	d50f      	bpl.n	8007c34 <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	e843 2100 	strex	r1, r2, [r3]
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1f7      	bne.n	8007c14 <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c24:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c26:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8007c28:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 8007c2e:	f7ff fe61 	bl	80078f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c32:	e707      	b.n	8007a44 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c34:	020d      	lsls	r5, r1, #8
 8007c36:	d506      	bpl.n	8007c46 <HAL_UART_IRQHandler+0x33e>
 8007c38:	0050      	lsls	r0, r2, #1
 8007c3a:	d504      	bpl.n	8007c46 <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c3c:	4620      	mov	r0, r4
}
 8007c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c42:	f000 bde5 	b.w	8008810 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c46:	01cb      	lsls	r3, r1, #7
 8007c48:	f57f aefc 	bpl.w	8007a44 <HAL_UART_IRQHandler+0x13c>
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	f6bf aef9 	bge.w	8007a44 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c52:	4620      	mov	r0, r4
}
 8007c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c58:	f000 bdd9 	b.w	800880e <HAL_UARTEx_RxFifoFullCallback>

08007c5c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c5c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8007c60:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c64:	2a22      	cmp	r2, #34	@ 0x22
{
 8007c66:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c68:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c6a:	d155      	bne.n	8007d18 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c6e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007c70:	400b      	ands	r3, r1
 8007c72:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007c74:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007c76:	3301      	adds	r3, #1
 8007c78:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007c7a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c86:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d142      	bne.n	8007d16 <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	e852 3f00 	ldrex	r3, [r2]
 8007c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007c9e:	6803      	ldr	r3, [r0, #0]
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	d1f5      	bne.n	8007c90 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	f103 0208 	add.w	r2, r3, #8
 8007ca8:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	f103 0c08 	add.w	ip, r3, #8
 8007cb4:	e84c 2100 	strex	r1, r2, [ip]
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	d1f3      	bne.n	8007ca4 <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cbe:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cc4:	4a17      	ldr	r2, [pc, #92]	@ (8007d24 <UART_RxISR_8BIT+0xc8>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc6:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d105      	bne.n	8007cd8 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8007cce:	2a01      	cmp	r2, #1
 8007cd0:	d00e      	beq.n	8007cf0 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cd2:	f7f9 fc69 	bl	80015a8 <HAL_UART_RxCpltCallback>
 8007cd6:	e01e      	b.n	8007d16 <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	0211      	lsls	r1, r2, #8
 8007cdc:	d5f6      	bpl.n	8007ccc <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ce2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	e843 2100 	strex	r1, r2, [r3]
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d1f7      	bne.n	8007cde <UART_RxISR_8BIT+0x82>
 8007cee:	e7ed      	b.n	8007ccc <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	e843 2100 	strex	r1, r2, [r3]
 8007d00:	2900      	cmp	r1, #0
 8007d02:	d1f7      	bne.n	8007cf4 <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d04:	69da      	ldr	r2, [r3, #28]
 8007d06:	06d2      	lsls	r2, r2, #27
 8007d08:	d501      	bpl.n	8007d0e <UART_RxISR_8BIT+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007d12:	f7ff fdf8 	bl	8007906 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d16:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	f042 0208 	orr.w	r2, r2, #8
 8007d1e:	619a      	str	r2, [r3, #24]
}
 8007d20:	e7f9      	b.n	8007d16 <UART_RxISR_8BIT+0xba>
 8007d22:	bf00      	nop
 8007d24:	58000c00 	.word	0x58000c00

08007d28 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d28:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8007d2c:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d30:	2a22      	cmp	r2, #34	@ 0x22
{
 8007d32:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d34:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d36:	d152      	bne.n	8007dde <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d3a:	4011      	ands	r1, r2
 8007d3c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007d3e:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8007d42:	6582      	str	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007d44:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d50:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8007d54:	b292      	uxth	r2, r2
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d140      	bne.n	8007ddc <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d5e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	e843 2100 	strex	r1, r2, [r3]
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d1f7      	bne.n	8007d5a <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	f103 0208 	add.w	r2, r3, #8
 8007d6e:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	f103 0c08 	add.w	ip, r3, #8
 8007d7a:	e84c 2100 	strex	r1, r2, [ip]
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d1f3      	bne.n	8007d6a <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d82:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d84:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 8007d86:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8a:	4a17      	ldr	r2, [pc, #92]	@ (8007de8 <UART_RxISR_16BIT+0xc0>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d8c:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d105      	bne.n	8007d9e <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d92:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8007d94:	2a01      	cmp	r2, #1
 8007d96:	d00e      	beq.n	8007db6 <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d98:	f7f9 fc06 	bl	80015a8 <HAL_UART_RxCpltCallback>
 8007d9c:	e01e      	b.n	8007ddc <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	0211      	lsls	r1, r2, #8
 8007da2:	d5f6      	bpl.n	8007d92 <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	e843 2100 	strex	r1, r2, [r3]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	d1f7      	bne.n	8007da4 <UART_RxISR_16BIT+0x7c>
 8007db4:	e7ed      	b.n	8007d92 <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db6:	2200      	movs	r2, #0
 8007db8:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	e843 2100 	strex	r1, r2, [r3]
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	d1f7      	bne.n	8007dba <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dca:	69da      	ldr	r2, [r3, #28]
 8007dcc:	06d2      	lsls	r2, r2, #27
 8007dce:	d501      	bpl.n	8007dd4 <UART_RxISR_16BIT+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007dd8:	f7ff fd95 	bl	8007906 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ddc:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dde:	699a      	ldr	r2, [r3, #24]
 8007de0:	f042 0208 	orr.w	r2, r2, #8
 8007de4:	619a      	str	r2, [r3, #24]
}
 8007de6:	e7f9      	b.n	8007ddc <UART_RxISR_16BIT+0xb4>
 8007de8:	58000c00 	.word	0x58000c00

08007dec <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dec:	6803      	ldr	r3, [r0, #0]
{
 8007dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007df2:	69dd      	ldr	r5, [r3, #28]
{
 8007df4:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007df6:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007dfa:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dfc:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8007e00:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e04:	2a22      	cmp	r2, #34	@ 0x22
 8007e06:	f040 80b5 	bne.w	8007f74 <UART_RxISR_8BIT_FIFOEN+0x188>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e0a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 808b 	beq.w	8007f2a <UART_RxISR_8BIT_FIFOEN+0x13e>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e18:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e1c:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e20:	06ab      	lsls	r3, r5, #26
 8007e22:	f140 8082 	bpl.w	8007f2a <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e26:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e28:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e2c:	403b      	ands	r3, r7
 8007e2e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007e30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e32:	3301      	adds	r3, #1
 8007e34:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007e36:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e46:	0768      	lsls	r0, r5, #29
 8007e48:	d02a      	beq.n	8007ea0 <UART_RxISR_8BIT_FIFOEN+0xb4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e4a:	07e9      	lsls	r1, r5, #31
 8007e4c:	d50a      	bpl.n	8007e64 <UART_RxISR_8BIT_FIFOEN+0x78>
 8007e4e:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007e52:	d007      	beq.n	8007e64 <UART_RxISR_8BIT_FIFOEN+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e54:	2201      	movs	r2, #1
 8007e56:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e58:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007e5c:	f042 0201 	orr.w	r2, r2, #1
 8007e60:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e64:	07aa      	lsls	r2, r5, #30
 8007e66:	d508      	bpl.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x8e>
 8007e68:	b13e      	cbz	r6, 8007e7a <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e6e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007e72:	f042 0204 	orr.w	r2, r2, #4
 8007e76:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e7a:	0768      	lsls	r0, r5, #29
 8007e7c:	d508      	bpl.n	8007e90 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8007e7e:	b13e      	cbz	r6, 8007e90 <UART_RxISR_8BIT_FIFOEN+0xa4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e80:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e84:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007e88:	f043 0302 	orr.w	r3, r3, #2
 8007e8c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e90:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007e94:	b123      	cbz	r3, 8007ea0 <UART_RxISR_8BIT_FIFOEN+0xb4>
          HAL_UART_ErrorCallback(huart);
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7f9 fbd8 	bl	800164c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007ea0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1ba      	bne.n	8007e20 <UART_RxISR_8BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eaa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	e852 3f00 	ldrex	r3, [r2]
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	2900      	cmp	r1, #0
 8007ebc:	d1f5      	bne.n	8007eaa <UART_RxISR_8BIT_FIFOEN+0xbe>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ebe:	4830      	ldr	r0, [pc, #192]	@ (8007f80 <UART_RxISR_8BIT_FIFOEN+0x194>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	f103 0208 	add.w	r2, r3, #8
 8007ec4:	e852 2f00 	ldrex	r2, [r2]
 8007ec8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	f103 0508 	add.w	r5, r3, #8
 8007ece:	e845 2100 	strex	r1, r2, [r5]
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d1f4      	bne.n	8007ec0 <UART_RxISR_8BIT_FIFOEN+0xd4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ed8:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007eda:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ede:	4a29      	ldr	r2, [pc, #164]	@ (8007f84 <UART_RxISR_8BIT_FIFOEN+0x198>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee0:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00a      	beq.n	8007efc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	0211      	lsls	r1, r2, #8
 8007eea:	d507      	bpl.n	8007efc <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ef0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	e843 2100 	strex	r1, r2, [r3]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	d1f7      	bne.n	8007eec <UART_RxISR_8BIT_FIFOEN+0x100>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007efe:	2a01      	cmp	r2, #1
 8007f00:	d134      	bne.n	8007f6c <UART_RxISR_8BIT_FIFOEN+0x180>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	2200      	movs	r2, #0
 8007f04:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	e843 2100 	strex	r1, r2, [r3]
 8007f12:	2900      	cmp	r1, #0
 8007f14:	d1f7      	bne.n	8007f06 <UART_RxISR_8BIT_FIFOEN+0x11a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	06d2      	lsls	r2, r2, #27
 8007f1a:	d501      	bpl.n	8007f20 <UART_RxISR_8BIT_FIFOEN+0x134>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f20:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007f24:	4620      	mov	r0, r4
 8007f26:	f7ff fcee 	bl	8007906 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007f2e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f30:	b1d3      	cbz	r3, 8007f68 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007f32:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d916      	bls.n	8007f68 <UART_RxISR_8BIT_FIFOEN+0x17c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f102 0308 	add.w	r3, r2, #8
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	3208      	adds	r2, #8
 8007f4a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	2900      	cmp	r1, #0
 8007f52:	d1f2      	bne.n	8007f3a <UART_RxISR_8BIT_FIFOEN+0x14e>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8007f56:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f5c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	e842 3100 	strex	r1, r3, [r2]
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d1f7      	bne.n	8007f58 <UART_RxISR_8BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7f9 fb1b 	bl	80015a8 <HAL_UART_RxCpltCallback>
 8007f72:	e7da      	b.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0x13e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	f042 0208 	orr.w	r2, r2, #8
 8007f7a:	619a      	str	r2, [r3, #24]
}
 8007f7c:	e7f4      	b.n	8007f68 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007f7e:	bf00      	nop
 8007f80:	effffffe 	.word	0xeffffffe
 8007f84:	58000c00 	.word	0x58000c00
 8007f88:	08007c5d 	.word	0x08007c5d

08007f8c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f8c:	6803      	ldr	r3, [r0, #0]
{
 8007f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f92:	69dd      	ldr	r5, [r3, #28]
{
 8007f94:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f96:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f9a:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8007fa0:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fa4:	2a22      	cmp	r2, #34	@ 0x22
 8007fa6:	f040 80b2 	bne.w	800810e <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007faa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8088 	beq.w	80080c4 <UART_RxISR_16BIT_FIFOEN+0x138>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb4:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb8:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fbc:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fc0:	06ab      	lsls	r3, r5, #26
 8007fc2:	d57f      	bpl.n	80080c4 <UART_RxISR_16BIT_FIFOEN+0x138>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fc4:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007fc6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8007fca:	4039      	ands	r1, r7
 8007fcc:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8007fd0:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007fd2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	b292      	uxth	r2, r2
 8007fda:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fde:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fe0:	0768      	lsls	r0, r5, #29
 8007fe2:	d02a      	beq.n	800803a <UART_RxISR_16BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fe4:	07e9      	lsls	r1, r5, #31
 8007fe6:	d50a      	bpl.n	8007ffe <UART_RxISR_16BIT_FIFOEN+0x72>
 8007fe8:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007fec:	d007      	beq.n	8007ffe <UART_RxISR_16BIT_FIFOEN+0x72>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fee:	2201      	movs	r2, #1
 8007ff0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ffe:	07aa      	lsls	r2, r5, #30
 8008000:	d508      	bpl.n	8008014 <UART_RxISR_16BIT_FIFOEN+0x88>
 8008002:	b13e      	cbz	r6, 8008014 <UART_RxISR_16BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008004:	2202      	movs	r2, #2
 8008006:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008008:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800800c:	f042 0204 	orr.w	r2, r2, #4
 8008010:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008014:	0768      	lsls	r0, r5, #29
 8008016:	d508      	bpl.n	800802a <UART_RxISR_16BIT_FIFOEN+0x9e>
 8008018:	b13e      	cbz	r6, 800802a <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800801a:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800801e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008022:	f043 0302 	orr.w	r3, r3, #2
 8008026:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800802e:	b123      	cbz	r3, 800803a <UART_RxISR_16BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
 8008030:	4620      	mov	r0, r4
 8008032:	f7f9 fb0b 	bl	800164c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008036:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800803a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1bd      	bne.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008044:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	e852 3f00 	ldrex	r3, [r2]
 800804a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	2900      	cmp	r1, #0
 8008056:	d1f5      	bne.n	8008044 <UART_RxISR_16BIT_FIFOEN+0xb8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008058:	482f      	ldr	r0, [pc, #188]	@ (8008118 <UART_RxISR_16BIT_FIFOEN+0x18c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	f103 0208 	add.w	r2, r3, #8
 800805e:	e852 2f00 	ldrex	r2, [r2]
 8008062:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	f103 0508 	add.w	r5, r3, #8
 8008068:	e845 2100 	strex	r1, r2, [r5]
 800806c:	2900      	cmp	r1, #0
 800806e:	d1f4      	bne.n	800805a <UART_RxISR_16BIT_FIFOEN+0xce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008070:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008072:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008074:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008078:	4a28      	ldr	r2, [pc, #160]	@ (800811c <UART_RxISR_16BIT_FIFOEN+0x190>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800807a:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800807c:	4293      	cmp	r3, r2
 800807e:	d00a      	beq.n	8008096 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	0211      	lsls	r1, r2, #8
 8008084:	d507      	bpl.n	8008096 <UART_RxISR_16BIT_FIFOEN+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800808a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	e843 2100 	strex	r1, r2, [r3]
 8008092:	2900      	cmp	r1, #0
 8008094:	d1f7      	bne.n	8008086 <UART_RxISR_16BIT_FIFOEN+0xfa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008096:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008098:	2a01      	cmp	r2, #1
 800809a:	d134      	bne.n	8008106 <UART_RxISR_16BIT_FIFOEN+0x17a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809c:	2200      	movs	r2, #0
 800809e:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	e843 2100 	strex	r1, r2, [r3]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	d1f7      	bne.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x114>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080b0:	69da      	ldr	r2, [r3, #28]
 80080b2:	06d2      	lsls	r2, r2, #27
 80080b4:	d501      	bpl.n	80080ba <UART_RxISR_16BIT_FIFOEN+0x12e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b6:	2210      	movs	r2, #16
 80080b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80080be:	4620      	mov	r0, r4
 80080c0:	f7ff fc21 	bl	8007906 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080c8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ca:	b1d3      	cbz	r3, 8008102 <UART_RxISR_16BIT_FIFOEN+0x176>
 80080cc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d916      	bls.n	8008102 <UART_RxISR_16BIT_FIFOEN+0x176>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	f102 0308 	add.w	r3, r2, #8
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	3208      	adds	r2, #8
 80080e4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80080e8:	6822      	ldr	r2, [r4, #0]
 80080ea:	2900      	cmp	r1, #0
 80080ec:	d1f2      	bne.n	80080d4 <UART_RxISR_16BIT_FIFOEN+0x148>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80080ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <UART_RxISR_16BIT_FIFOEN+0x194>)
 80080f0:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080f6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	e842 3100 	strex	r1, r3, [r2]
 80080fe:	2900      	cmp	r1, #0
 8008100:	d1f7      	bne.n	80080f2 <UART_RxISR_16BIT_FIFOEN+0x166>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 8008106:	4620      	mov	r0, r4
 8008108:	f7f9 fa4e 	bl	80015a8 <HAL_UART_RxCpltCallback>
 800810c:	e7da      	b.n	80080c4 <UART_RxISR_16BIT_FIFOEN+0x138>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800810e:	699a      	ldr	r2, [r3, #24]
 8008110:	f042 0208 	orr.w	r2, r2, #8
 8008114:	619a      	str	r2, [r3, #24]
}
 8008116:	e7f4      	b.n	8008102 <UART_RxISR_16BIT_FIFOEN+0x176>
 8008118:	effffffe 	.word	0xeffffffe
 800811c:	58000c00 	.word	0x58000c00
 8008120:	08007d29 	.word	0x08007d29

08008124 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008124:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008126:	69c3      	ldr	r3, [r0, #28]
 8008128:	6881      	ldr	r1, [r0, #8]
{
 800812a:	b530      	push	{r4, r5, lr}
 800812c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800812e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008130:	6815      	ldr	r5, [r2, #0]
{
 8008132:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008134:	4301      	orrs	r1, r0
 8008136:	6960      	ldr	r0, [r4, #20]
 8008138:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800813a:	48a5      	ldr	r0, [pc, #660]	@ (80083d0 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800813c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800813e:	4028      	ands	r0, r5
 8008140:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008142:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008144:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008146:	6851      	ldr	r1, [r2, #4]
 8008148:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800814c:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800814e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008150:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008152:	49a0      	ldr	r1, [pc, #640]	@ (80083d4 <UART_SetConfig+0x2b0>)
 8008154:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 8008156:	bf1c      	itt	ne
 8008158:	6a21      	ldrne	r1, [r4, #32]
 800815a:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800815c:	6891      	ldr	r1, [r2, #8]
 800815e:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8008162:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008166:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008168:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800816a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800816c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800816e:	f021 010f 	bic.w	r1, r1, #15
 8008172:	4301      	orrs	r1, r0
 8008174:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008176:	4998      	ldr	r1, [pc, #608]	@ (80083d8 <UART_SetConfig+0x2b4>)
 8008178:	428a      	cmp	r2, r1
 800817a:	d112      	bne.n	80081a2 <UART_SetConfig+0x7e>
 800817c:	4a97      	ldr	r2, [pc, #604]	@ (80083dc <UART_SetConfig+0x2b8>)
 800817e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008180:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008184:	2a18      	cmp	r2, #24
 8008186:	f000 8101 	beq.w	800838c <UART_SetConfig+0x268>
 800818a:	d83b      	bhi.n	8008204 <UART_SetConfig+0xe0>
 800818c:	2a08      	cmp	r2, #8
 800818e:	f000 80f5 	beq.w	800837c <UART_SetConfig+0x258>
 8008192:	2a10      	cmp	r2, #16
 8008194:	f000 813a 	beq.w	800840c <UART_SetConfig+0x2e8>
 8008198:	2a00      	cmp	r2, #0
 800819a:	f000 80e9 	beq.w	8008370 <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 800819e:	2001      	movs	r0, #1
 80081a0:	e06a      	b.n	8008278 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081a2:	498f      	ldr	r1, [pc, #572]	@ (80083e0 <UART_SetConfig+0x2bc>)
 80081a4:	428a      	cmp	r2, r1
 80081a6:	d10d      	bne.n	80081c4 <UART_SetConfig+0xa0>
 80081a8:	4a8c      	ldr	r2, [pc, #560]	@ (80083dc <UART_SetConfig+0x2b8>)
 80081aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80081ac:	f002 0207 	and.w	r2, r2, #7
 80081b0:	2a05      	cmp	r2, #5
 80081b2:	d8f4      	bhi.n	800819e <UART_SetConfig+0x7a>
 80081b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80081b8:	00e2007e 	.word	0x00e2007e
 80081bc:	00ea012a 	.word	0x00ea012a
 80081c0:	002b0107 	.word	0x002b0107
 80081c4:	4987      	ldr	r1, [pc, #540]	@ (80083e4 <UART_SetConfig+0x2c0>)
 80081c6:	428a      	cmp	r2, r1
 80081c8:	d0ee      	beq.n	80081a8 <UART_SetConfig+0x84>
 80081ca:	4987      	ldr	r1, [pc, #540]	@ (80083e8 <UART_SetConfig+0x2c4>)
 80081cc:	428a      	cmp	r2, r1
 80081ce:	d0eb      	beq.n	80081a8 <UART_SetConfig+0x84>
 80081d0:	4986      	ldr	r1, [pc, #536]	@ (80083ec <UART_SetConfig+0x2c8>)
 80081d2:	428a      	cmp	r2, r1
 80081d4:	d0e8      	beq.n	80081a8 <UART_SetConfig+0x84>
 80081d6:	4986      	ldr	r1, [pc, #536]	@ (80083f0 <UART_SetConfig+0x2cc>)
 80081d8:	428a      	cmp	r2, r1
 80081da:	d0cf      	beq.n	800817c <UART_SetConfig+0x58>
 80081dc:	4985      	ldr	r1, [pc, #532]	@ (80083f4 <UART_SetConfig+0x2d0>)
 80081de:	428a      	cmp	r2, r1
 80081e0:	d0e2      	beq.n	80081a8 <UART_SetConfig+0x84>
 80081e2:	4985      	ldr	r1, [pc, #532]	@ (80083f8 <UART_SetConfig+0x2d4>)
 80081e4:	428a      	cmp	r2, r1
 80081e6:	d0df      	beq.n	80081a8 <UART_SetConfig+0x84>
 80081e8:	4b7a      	ldr	r3, [pc, #488]	@ (80083d4 <UART_SetConfig+0x2b0>)
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d1d7      	bne.n	800819e <UART_SetConfig+0x7a>
 80081ee:	4a7b      	ldr	r2, [pc, #492]	@ (80083dc <UART_SetConfig+0x2b8>)
 80081f0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d8d1      	bhi.n	800819e <UART_SetConfig+0x7a>
 80081fa:	e8df f003 	tbb	[pc, r3]
 80081fe:	4538      	.short	0x4538
 8008200:	0f594f4a 	.word	0x0f594f4a
 8008204:	2a20      	cmp	r2, #32
 8008206:	f000 80de 	beq.w	80083c6 <UART_SetConfig+0x2a2>
 800820a:	2a28      	cmp	r2, #40	@ 0x28
 800820c:	d1c7      	bne.n	800819e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800820e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008212:	f000 808a 	beq.w	800832a <UART_SetConfig+0x206>
 8008216:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800821a:	e0c4      	b.n	80083a6 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 800821c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008220:	4b76      	ldr	r3, [pc, #472]	@ (80083fc <UART_SetConfig+0x2d8>)
 8008222:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008224:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008226:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800822e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008232:	4299      	cmp	r1, r3
 8008234:	d8b3      	bhi.n	800819e <UART_SetConfig+0x7a>
 8008236:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800823a:	d8b0      	bhi.n	800819e <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800823c:	2300      	movs	r3, #0
 800823e:	4619      	mov	r1, r3
 8008240:	f7f8 fa62 	bl	8000708 <__aeabi_uldivmod>
 8008244:	462a      	mov	r2, r5
 8008246:	0209      	lsls	r1, r1, #8
 8008248:	086b      	lsrs	r3, r5, #1
 800824a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800824e:	0200      	lsls	r0, r0, #8
 8008250:	18c0      	adds	r0, r0, r3
 8008252:	f04f 0300 	mov.w	r3, #0
 8008256:	f141 0100 	adc.w	r1, r1, #0
 800825a:	f7f8 fa55 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800825e:	4b68      	ldr	r3, [pc, #416]	@ (8008400 <UART_SetConfig+0x2dc>)
 8008260:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008264:	429a      	cmp	r2, r3
 8008266:	d89a      	bhi.n	800819e <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	60d8      	str	r0, [r3, #12]
 800826c:	e003      	b.n	8008276 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800826e:	f7fd ff53 	bl	8006118 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8008272:	2800      	cmp	r0, #0
 8008274:	d1d4      	bne.n	8008220 <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 8008276:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8008278:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800827c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800827e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008280:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8008284:	b007      	add	sp, #28
 8008286:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008288:	4668      	mov	r0, sp
 800828a:	f7fd ff57 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800828e:	9801      	ldr	r0, [sp, #4]
        break;
 8008290:	e7ef      	b.n	8008272 <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008292:	a803      	add	r0, sp, #12
 8008294:	f7fd fffc 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008298:	9804      	ldr	r0, [sp, #16]
        break;
 800829a:	e7ea      	b.n	8008272 <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829c:	6813      	ldr	r3, [r2, #0]
 800829e:	4859      	ldr	r0, [pc, #356]	@ (8008404 <UART_SetConfig+0x2e0>)
 80082a0:	f013 0f20 	tst.w	r3, #32
 80082a4:	d0bc      	beq.n	8008220 <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80082ac:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80082ae:	e7b7      	b.n	8008220 <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 80082b0:	4855      	ldr	r0, [pc, #340]	@ (8008408 <UART_SetConfig+0x2e4>)
 80082b2:	e7b5      	b.n	8008220 <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b8:	d155      	bne.n	8008366 <UART_SetConfig+0x242>
 80082ba:	2300      	movs	r3, #0
    switch (clocksource)
 80082bc:	2b08      	cmp	r3, #8
 80082be:	f63f af6e 	bhi.w	800819e <UART_SetConfig+0x7a>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <UART_SetConfig+0x1a4>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	08008301 	.word	0x08008301
 80082d0:	0800819f 	.word	0x0800819f
 80082d4:	0800819f 	.word	0x0800819f
 80082d8:	08008307 	.word	0x08008307
 80082dc:	0800819f 	.word	0x0800819f
 80082e0:	0800819f 	.word	0x0800819f
 80082e4:	0800819f 	.word	0x0800819f
 80082e8:	08008311 	.word	0x08008311
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ec:	2304      	movs	r3, #4
 80082ee:	e7e5      	b.n	80082bc <UART_SetConfig+0x198>
 80082f0:	2308      	movs	r3, #8
 80082f2:	e7e3      	b.n	80082bc <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fd f91a 	bl	800552c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f8:	4603      	mov	r3, r0
    if (pclk != 0U)
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0bb      	beq.n	8008276 <UART_SetConfig+0x152>
 80082fe:	e014      	b.n	800832a <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008300:	f7fd f926 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
 8008304:	e7f8      	b.n	80082f8 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008306:	4668      	mov	r0, sp
 8008308:	f7fd ff18 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800830c:	9b01      	ldr	r3, [sp, #4]
        break;
 800830e:	e7f4      	b.n	80082fa <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008310:	a803      	add	r0, sp, #12
 8008312:	f7fd ffbd 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008316:	9b04      	ldr	r3, [sp, #16]
        break;
 8008318:	e7ef      	b.n	80082fa <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800831a:	f013 0f20 	tst.w	r3, #32
 800831e:	4b39      	ldr	r3, [pc, #228]	@ (8008404 <UART_SetConfig+0x2e0>)
 8008320:	d003      	beq.n	800832a <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008328:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800832a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800832c:	4a33      	ldr	r2, [pc, #204]	@ (80083fc <UART_SetConfig+0x2d8>)
 800832e:	6861      	ldr	r1, [r4, #4]
 8008330:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8008334:	fbb3 f3f2 	udiv	r3, r3, r2
 8008338:	084a      	lsrs	r2, r1, #1
 800833a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008342:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008346:	f1a3 0110 	sub.w	r1, r3, #16
 800834a:	4291      	cmp	r1, r2
 800834c:	f63f af27 	bhi.w	800819e <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008350:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008354:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008358:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800835a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800835c:	4313      	orrs	r3, r2
 800835e:	60cb      	str	r3, [r1, #12]
 8008360:	e789      	b.n	8008276 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8008362:	4b29      	ldr	r3, [pc, #164]	@ (8008408 <UART_SetConfig+0x2e4>)
 8008364:	e7e1      	b.n	800832a <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008366:	f7fd f8e1 	bl	800552c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800836a:	2800      	cmp	r0, #0
 800836c:	d083      	beq.n	8008276 <UART_SetConfig+0x152>
 800836e:	e01a      	b.n	80083a6 <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008374:	d0c4      	beq.n	8008300 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008376:	f7fd f8eb 	bl	8005550 <HAL_RCC_GetPCLK2Freq>
        break;
 800837a:	e7f6      	b.n	800836a <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008380:	d0b4      	beq.n	80082ec <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008382:	4668      	mov	r0, sp
 8008384:	f7fd feda 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008388:	9801      	ldr	r0, [sp, #4]
        break;
 800838a:	e7ee      	b.n	800836a <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800838c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008390:	4a12      	ldr	r2, [pc, #72]	@ (80083dc <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008392:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008394:	d0c1      	beq.n	800831a <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008396:	f013 0f20 	tst.w	r3, #32
 800839a:	481a      	ldr	r0, [pc, #104]	@ (8008404 <UART_SetConfig+0x2e0>)
 800839c:	d003      	beq.n	80083a6 <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80083a4:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083a8:	4a14      	ldr	r2, [pc, #80]	@ (80083fc <UART_SetConfig+0x2d8>)
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80083b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80083b4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80083b8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083bc:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80083c0:	f1a0 0210 	sub.w	r2, r0, #16
 80083c4:	e74e      	b.n	8008264 <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083ca:	d0ca      	beq.n	8008362 <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 80083cc:	480e      	ldr	r0, [pc, #56]	@ (8008408 <UART_SetConfig+0x2e4>)
 80083ce:	e7ea      	b.n	80083a6 <UART_SetConfig+0x282>
 80083d0:	cfff69f3 	.word	0xcfff69f3
 80083d4:	58000c00 	.word	0x58000c00
 80083d8:	40011000 	.word	0x40011000
 80083dc:	58024400 	.word	0x58024400
 80083e0:	40004400 	.word	0x40004400
 80083e4:	40004800 	.word	0x40004800
 80083e8:	40004c00 	.word	0x40004c00
 80083ec:	40005000 	.word	0x40005000
 80083f0:	40011400 	.word	0x40011400
 80083f4:	40007800 	.word	0x40007800
 80083f8:	40007c00 	.word	0x40007c00
 80083fc:	08012a38 	.word	0x08012a38
 8008400:	000ffcff 	.word	0x000ffcff
 8008404:	03d09000 	.word	0x03d09000
 8008408:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008410:	f43f af6e 	beq.w	80082f0 <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008414:	a803      	add	r0, sp, #12
 8008416:	f7fd ff3b 	bl	8006290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800841a:	9804      	ldr	r0, [sp, #16]
        break;
 800841c:	e7a5      	b.n	800836a <UART_SetConfig+0x246>
 800841e:	bf00      	nop

08008420 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008420:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008422:	071a      	lsls	r2, r3, #28
{
 8008424:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008426:	d506      	bpl.n	8008436 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008428:	6801      	ldr	r1, [r0, #0]
 800842a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800842c:	684a      	ldr	r2, [r1, #4]
 800842e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008432:	4322      	orrs	r2, r4
 8008434:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008436:	07dc      	lsls	r4, r3, #31
 8008438:	d506      	bpl.n	8008448 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800843a:	6801      	ldr	r1, [r0, #0]
 800843c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800843e:	684a      	ldr	r2, [r1, #4]
 8008440:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008444:	4322      	orrs	r2, r4
 8008446:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008448:	0799      	lsls	r1, r3, #30
 800844a:	d506      	bpl.n	800845a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800844c:	6801      	ldr	r1, [r0, #0]
 800844e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008450:	684a      	ldr	r2, [r1, #4]
 8008452:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008456:	4322      	orrs	r2, r4
 8008458:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800845a:	075a      	lsls	r2, r3, #29
 800845c:	d506      	bpl.n	800846c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800845e:	6801      	ldr	r1, [r0, #0]
 8008460:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008462:	684a      	ldr	r2, [r1, #4]
 8008464:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008468:	4322      	orrs	r2, r4
 800846a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800846c:	06dc      	lsls	r4, r3, #27
 800846e:	d506      	bpl.n	800847e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008470:	6801      	ldr	r1, [r0, #0]
 8008472:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008474:	688a      	ldr	r2, [r1, #8]
 8008476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800847a:	4322      	orrs	r2, r4
 800847c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800847e:	0699      	lsls	r1, r3, #26
 8008480:	d506      	bpl.n	8008490 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008482:	6801      	ldr	r1, [r0, #0]
 8008484:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008486:	688a      	ldr	r2, [r1, #8]
 8008488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800848c:	4322      	orrs	r2, r4
 800848e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008490:	065a      	lsls	r2, r3, #25
 8008492:	d510      	bpl.n	80084b6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008494:	6801      	ldr	r1, [r0, #0]
 8008496:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008498:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800849e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80084a2:	ea42 0204 	orr.w	r2, r2, r4
 80084a6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084a8:	d105      	bne.n	80084b6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084aa:	684a      	ldr	r2, [r1, #4]
 80084ac:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80084ae:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80084b2:	4322      	orrs	r2, r4
 80084b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084b6:	061b      	lsls	r3, r3, #24
 80084b8:	d506      	bpl.n	80084c8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ba:	6802      	ldr	r2, [r0, #0]
 80084bc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80084be:	6853      	ldr	r3, [r2, #4]
 80084c0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80084c4:	430b      	orrs	r3, r1
 80084c6:	6053      	str	r3, [r2, #4]
}
 80084c8:	bd10      	pop	{r4, pc}

080084ca <UART_WaitOnFlagUntilTimeout>:
{
 80084ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	4617      	mov	r7, r2
 80084d8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	69d3      	ldr	r3, [r2, #28]
 80084de:	ea35 0303 	bics.w	r3, r5, r3
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	42bb      	cmp	r3, r7
 80084ea:	d001      	beq.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80084ec:	2000      	movs	r0, #0
 80084ee:	e022      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80084f4:	d0f2      	beq.n	80084dc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f6:	f7fb f8bb 	bl	8003670 <HAL_GetTick>
 80084fa:	eba0 0008 	sub.w	r0, r0, r8
 80084fe:	4548      	cmp	r0, r9
 8008500:	d829      	bhi.n	8008556 <UART_WaitOnFlagUntilTimeout+0x8c>
 8008502:	f1b9 0f00 	cmp.w	r9, #0
 8008506:	d026      	beq.n	8008556 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008508:	6821      	ldr	r1, [r4, #0]
 800850a:	680b      	ldr	r3, [r1, #0]
 800850c:	075a      	lsls	r2, r3, #29
 800850e:	d5e4      	bpl.n	80084da <UART_WaitOnFlagUntilTimeout+0x10>
 8008510:	2d80      	cmp	r5, #128	@ 0x80
 8008512:	d0e2      	beq.n	80084da <UART_WaitOnFlagUntilTimeout+0x10>
 8008514:	2d40      	cmp	r5, #64	@ 0x40
 8008516:	d0e0      	beq.n	80084da <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008518:	69ce      	ldr	r6, [r1, #28]
 800851a:	f016 0608 	ands.w	r6, r6, #8
 800851e:	d00c      	beq.n	800853a <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008520:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8008522:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008524:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8008526:	f7ff f9b9 	bl	800789c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800852a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800852c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800852e:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8008532:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800853a:	69cb      	ldr	r3, [r1, #28]
 800853c:	051b      	lsls	r3, r3, #20
 800853e:	d5cc      	bpl.n	80084da <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008540:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8008544:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008546:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8008548:	f7ff f9a8 	bl	800789c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800854c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800854e:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008552:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8008556:	2003      	movs	r0, #3
 8008558:	e7ed      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0x6c>

0800855a <UART_CheckIdleState>:
{
 800855a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855c:	2600      	movs	r6, #0
{
 800855e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008564:	f7fb f884 	bl	8003670 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008568:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800856a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	071a      	lsls	r2, r3, #28
 8008570:	d51c      	bpl.n	80085ac <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008572:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008576:	4632      	mov	r2, r6
 8008578:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4603      	mov	r3, r0
 8008580:	4620      	mov	r0, r4
 8008582:	f7ff ffa2 	bl	80084ca <UART_WaitOnFlagUntilTimeout>
 8008586:	b188      	cbz	r0, 80085ac <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008588:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	e852 3f00 	ldrex	r3, [r2]
 800858e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	e842 3100 	strex	r1, r3, [r2]
 8008596:	2900      	cmp	r1, #0
 8008598:	d1f6      	bne.n	8008588 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800859a:	2320      	movs	r3, #32
 800859c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80085a0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80085a2:	2300      	movs	r3, #0
 80085a4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80085a8:	b002      	add	sp, #8
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	075b      	lsls	r3, r3, #29
 80085b2:	d524      	bpl.n	80085fe <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085be:	4620      	mov	r0, r4
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	462b      	mov	r3, r5
 80085c4:	f7ff ff81 	bl	80084ca <UART_WaitOnFlagUntilTimeout>
 80085c8:	b1c8      	cbz	r0, 80085fe <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	e852 3f00 	ldrex	r3, [r2]
 80085d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	2900      	cmp	r1, #0
 80085dc:	d1f5      	bne.n	80085ca <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	f102 0308 	add.w	r3, r2, #8
 80085e2:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	f102 0008 	add.w	r0, r2, #8
 80085ee:	e840 3100 	strex	r1, r3, [r0]
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d1f3      	bne.n	80085de <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80085f6:	2320      	movs	r3, #32
 80085f8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80085fc:	e7d0      	b.n	80085a0 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80085fe:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008600:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008602:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008606:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800860c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800860e:	e7c8      	b.n	80085a2 <UART_CheckIdleState+0x48>

08008610 <HAL_UART_Init>:
{
 8008610:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008612:	4604      	mov	r4, r0
 8008614:	b350      	cbz	r0, 800866c <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008616:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800861a:	b91b      	cbnz	r3, 8008624 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800861c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008620:	f7fa ff48 	bl	80034b4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8008626:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008628:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008634:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008636:	b113      	cbz	r3, 800863e <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8008638:	4620      	mov	r0, r4
 800863a:	f7ff fef1 	bl	8008420 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800863e:	4620      	mov	r0, r4
 8008640:	f7ff fd70 	bl	8008124 <UART_SetConfig>
 8008644:	2801      	cmp	r0, #1
 8008646:	d011      	beq.n	800866c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008648:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800864a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800865a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
}
 8008662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008666:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008668:	f7ff bf77 	b.w	800855a <UART_CheckIdleState>
}
 800866c:	2001      	movs	r0, #1
 800866e:	bd10      	pop	{r4, pc}

08008670 <UART_Start_Receive_IT>:
{
 8008670:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 8008672:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxISR       = NULL;
 8008674:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8008676:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8008678:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 800867c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8008680:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008684:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008686:	d131      	bne.n	80086ec <UART_Start_Receive_IT+0x7c>
 8008688:	6903      	ldr	r3, [r0, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008690:	bf18      	it	ne
 8008692:	23ff      	movne	r3, #255	@ 0xff
 8008694:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800869e:	2322      	movs	r3, #34	@ 0x22
 80086a0:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	f101 0308 	add.w	r3, r1, #8
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	3108      	adds	r1, #8
 80086b4:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 80086b8:	6803      	ldr	r3, [r0, #0]
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	d1f2      	bne.n	80086a4 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086be:	6e45      	ldr	r5, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c0:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086c2:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c6:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086c8:	d135      	bne.n	8008736 <UART_Start_Receive_IT+0xc6>
 80086ca:	f8b0 5068 	ldrh.w	r5, [r0, #104]	@ 0x68
 80086ce:	4295      	cmp	r5, r2
 80086d0:	d831      	bhi.n	8008736 <UART_Start_Receive_IT+0xc6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d2:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80086d6:	d129      	bne.n	800872c <UART_Start_Receive_IT+0xbc>
 80086d8:	b1c1      	cbz	r1, 800870c <UART_Start_Receive_IT+0x9c>
 80086da:	4a26      	ldr	r2, [pc, #152]	@ (8008774 <UART_Start_Receive_IT+0x104>)
 80086dc:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 80086ea:	e021      	b.n	8008730 <UART_Start_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 80086ec:	b929      	cbnz	r1, 80086fa <UART_Start_Receive_IT+0x8a>
 80086ee:	6903      	ldr	r3, [r0, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf0c      	ite	eq
 80086f4:	23ff      	moveq	r3, #255	@ 0xff
 80086f6:	237f      	movne	r3, #127	@ 0x7f
 80086f8:	e7cc      	b.n	8008694 <UART_Start_Receive_IT+0x24>
 80086fa:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80086fe:	d1c9      	bne.n	8008694 <UART_Start_Receive_IT+0x24>
 8008700:	6903      	ldr	r3, [r0, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf0c      	ite	eq
 8008706:	237f      	moveq	r3, #127	@ 0x7f
 8008708:	233f      	movne	r3, #63	@ 0x3f
 800870a:	e7c3      	b.n	8008694 <UART_Start_Receive_IT+0x24>
 800870c:	4a1a      	ldr	r2, [pc, #104]	@ (8008778 <UART_Start_Receive_IT+0x108>)
 800870e:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	f103 0208 	add.w	r2, r3, #8
 8008714:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008718:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	f103 0008 	add.w	r0, r3, #8
 8008720:	e840 2100 	strex	r1, r2, [r0]
 8008724:	2900      	cmp	r1, #0
 8008726:	d1f3      	bne.n	8008710 <UART_Start_Receive_IT+0xa0>
}
 8008728:	2000      	movs	r0, #0
 800872a:	bd30      	pop	{r4, r5, pc}
 800872c:	4a11      	ldr	r2, [pc, #68]	@ (8008774 <UART_Start_Receive_IT+0x104>)
 800872e:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008730:	2900      	cmp	r1, #0
 8008732:	d1d4      	bne.n	80086de <UART_Start_Receive_IT+0x6e>
 8008734:	e7ec      	b.n	8008710 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008736:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800873a:	d116      	bne.n	800876a <UART_Start_Receive_IT+0xfa>
 800873c:	b151      	cbz	r1, 8008754 <UART_Start_Receive_IT+0xe4>
 800873e:	4a0f      	ldr	r2, [pc, #60]	@ (800877c <UART_Start_Receive_IT+0x10c>)
 8008740:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008746:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	e843 2100 	strex	r1, r2, [r3]
 800874e:	2900      	cmp	r1, #0
 8008750:	d1f7      	bne.n	8008742 <UART_Start_Receive_IT+0xd2>
 8008752:	e7e9      	b.n	8008728 <UART_Start_Receive_IT+0xb8>
 8008754:	4a0a      	ldr	r2, [pc, #40]	@ (8008780 <UART_Start_Receive_IT+0x110>)
 8008756:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800875c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	e843 2100 	strex	r1, r2, [r3]
 8008764:	2900      	cmp	r1, #0
 8008766:	d1f7      	bne.n	8008758 <UART_Start_Receive_IT+0xe8>
 8008768:	e7de      	b.n	8008728 <UART_Start_Receive_IT+0xb8>
 800876a:	4a04      	ldr	r2, [pc, #16]	@ (800877c <UART_Start_Receive_IT+0x10c>)
 800876c:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800876e:	2900      	cmp	r1, #0
 8008770:	d0f2      	beq.n	8008758 <UART_Start_Receive_IT+0xe8>
 8008772:	e7e6      	b.n	8008742 <UART_Start_Receive_IT+0xd2>
 8008774:	08007ded 	.word	0x08007ded
 8008778:	08007f8d 	.word	0x08007f8d
 800877c:	08007c5d 	.word	0x08007c5d
 8008780:	08007d29 	.word	0x08007d29

08008784 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008784:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008788:	2b20      	cmp	r3, #32
{
 800878a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800878c:	d115      	bne.n	80087ba <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 800878e:	b1b9      	cbz	r1, 80087c0 <HAL_UART_Receive_IT+0x3c>
 8008790:	b1b2      	cbz	r2, 80087c0 <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008794:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008798:	4b0a      	ldr	r3, [pc, #40]	@ (80087c4 <HAL_UART_Receive_IT+0x40>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d00a      	beq.n	80087b4 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	d507      	bpl.n	80087b4 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	e844 3500 	strex	r5, r3, [r4]
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	d1f7      	bne.n	80087a4 <HAL_UART_Receive_IT+0x20>
}
 80087b4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80087b6:	f7ff bf5b 	b.w	8008670 <UART_Start_Receive_IT>
    return HAL_BUSY;
 80087ba:	2002      	movs	r0, #2
}
 80087bc:	bc30      	pop	{r4, r5}
 80087be:	4770      	bx	lr
      return HAL_ERROR;
 80087c0:	2001      	movs	r0, #1
 80087c2:	e7fb      	b.n	80087bc <HAL_UART_Receive_IT+0x38>
 80087c4:	58000c00 	.word	0x58000c00

080087c8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087c8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80087ca:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087cc:	b92b      	cbnz	r3, 80087da <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087d4:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087d8:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087da:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087dc:	4d09      	ldr	r5, [pc, #36]	@ (8008804 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087de:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e0:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80087e2:	4c09      	ldr	r4, [pc, #36]	@ (8008808 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087e4:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ea:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80087ec:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80087f4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087f8:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80087fa:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8008802:	e7e7      	b.n	80087d4 <UARTEx_SetNbDataToProcess+0xc>
 8008804:	08012a58 	.word	0x08012a58
 8008808:	08012a50 	.word	0x08012a50

0800880c <HAL_UARTEx_WakeupCallback>:
}
 800880c:	4770      	bx	lr

0800880e <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8008810:	4770      	bx	lr

08008812 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008812:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008816:	2b01      	cmp	r3, #1
 8008818:	d014      	beq.n	8008844 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800881c:	2324      	movs	r3, #36	@ 0x24
 800881e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008822:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008824:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008826:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008830:	2300      	movs	r3, #0
 8008832:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008834:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008836:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8008838:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800883c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8008840:	4618      	mov	r0, r3
 8008842:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008844:	2002      	movs	r0, #2
}
 8008846:	4770      	bx	lr

08008848 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008848:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800884a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800884e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008850:	2b01      	cmp	r3, #1
 8008852:	d017      	beq.n	8008884 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008854:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008856:	2324      	movs	r3, #36	@ 0x24
 8008858:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	f023 0301 	bic.w	r3, r3, #1
 8008864:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008866:	68ab      	ldr	r3, [r5, #8]
 8008868:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800886c:	4319      	orrs	r1, r3
 800886e:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008870:	f7ff ffaa 	bl	80087c8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008874:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008876:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008878:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800887c:	2000      	movs	r0, #0
 800887e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008882:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8008884:	2002      	movs	r0, #2
 8008886:	e7fc      	b.n	8008882 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08008888 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008888:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800888a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800888e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008890:	2b01      	cmp	r3, #1
 8008892:	d017      	beq.n	80088c4 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008894:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008896:	2324      	movs	r3, #36	@ 0x24
 8008898:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800889c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088a6:	68ab      	ldr	r3, [r5, #8]
 80088a8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80088ac:	4319      	orrs	r1, r3
 80088ae:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80088b0:	f7ff ff8a 	bl	80087c8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80088b4:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80088b8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80088bc:	2000      	movs	r0, #0
 80088be:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80088c4:	2002      	movs	r0, #2
 80088c6:	e7fc      	b.n	80088c2 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080088c8 <__cvt>:
 80088c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ca:	ed2d 8b02 	vpush	{d8}
 80088ce:	eeb0 8b40 	vmov.f64	d8, d0
 80088d2:	b085      	sub	sp, #20
 80088d4:	4617      	mov	r7, r2
 80088d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80088d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088da:	ee18 2a90 	vmov	r2, s17
 80088de:	f025 0520 	bic.w	r5, r5, #32
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	bfb6      	itet	lt
 80088e6:	222d      	movlt	r2, #45	@ 0x2d
 80088e8:	2200      	movge	r2, #0
 80088ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80088ee:	2d46      	cmp	r5, #70	@ 0x46
 80088f0:	460c      	mov	r4, r1
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	d004      	beq.n	8008900 <__cvt+0x38>
 80088f6:	2d45      	cmp	r5, #69	@ 0x45
 80088f8:	d100      	bne.n	80088fc <__cvt+0x34>
 80088fa:	3401      	adds	r4, #1
 80088fc:	2102      	movs	r1, #2
 80088fe:	e000      	b.n	8008902 <__cvt+0x3a>
 8008900:	2103      	movs	r1, #3
 8008902:	ab03      	add	r3, sp, #12
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	ab02      	add	r3, sp, #8
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4622      	mov	r2, r4
 800890c:	4633      	mov	r3, r6
 800890e:	eeb0 0b48 	vmov.f64	d0, d8
 8008912:	f000 ff31 	bl	8009778 <_dtoa_r>
 8008916:	2d47      	cmp	r5, #71	@ 0x47
 8008918:	d114      	bne.n	8008944 <__cvt+0x7c>
 800891a:	07fb      	lsls	r3, r7, #31
 800891c:	d50a      	bpl.n	8008934 <__cvt+0x6c>
 800891e:	1902      	adds	r2, r0, r4
 8008920:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008928:	bf08      	it	eq
 800892a:	9203      	streq	r2, [sp, #12]
 800892c:	2130      	movs	r1, #48	@ 0x30
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	4293      	cmp	r3, r2
 8008932:	d319      	bcc.n	8008968 <__cvt+0xa0>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008938:	1a1b      	subs	r3, r3, r0
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	b005      	add	sp, #20
 800893e:	ecbd 8b02 	vpop	{d8}
 8008942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008944:	2d46      	cmp	r5, #70	@ 0x46
 8008946:	eb00 0204 	add.w	r2, r0, r4
 800894a:	d1e9      	bne.n	8008920 <__cvt+0x58>
 800894c:	7803      	ldrb	r3, [r0, #0]
 800894e:	2b30      	cmp	r3, #48	@ 0x30
 8008950:	d107      	bne.n	8008962 <__cvt+0x9a>
 8008952:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895a:	bf1c      	itt	ne
 800895c:	f1c4 0401 	rsbne	r4, r4, #1
 8008960:	6034      	strne	r4, [r6, #0]
 8008962:	6833      	ldr	r3, [r6, #0]
 8008964:	441a      	add	r2, r3
 8008966:	e7db      	b.n	8008920 <__cvt+0x58>
 8008968:	1c5c      	adds	r4, r3, #1
 800896a:	9403      	str	r4, [sp, #12]
 800896c:	7019      	strb	r1, [r3, #0]
 800896e:	e7de      	b.n	800892e <__cvt+0x66>

08008970 <__exponent>:
 8008970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008972:	2900      	cmp	r1, #0
 8008974:	bfba      	itte	lt
 8008976:	4249      	neglt	r1, r1
 8008978:	232d      	movlt	r3, #45	@ 0x2d
 800897a:	232b      	movge	r3, #43	@ 0x2b
 800897c:	2909      	cmp	r1, #9
 800897e:	7002      	strb	r2, [r0, #0]
 8008980:	7043      	strb	r3, [r0, #1]
 8008982:	dd29      	ble.n	80089d8 <__exponent+0x68>
 8008984:	f10d 0307 	add.w	r3, sp, #7
 8008988:	461d      	mov	r5, r3
 800898a:	270a      	movs	r7, #10
 800898c:	461a      	mov	r2, r3
 800898e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008992:	fb07 1416 	mls	r4, r7, r6, r1
 8008996:	3430      	adds	r4, #48	@ 0x30
 8008998:	f802 4c01 	strb.w	r4, [r2, #-1]
 800899c:	460c      	mov	r4, r1
 800899e:	2c63      	cmp	r4, #99	@ 0x63
 80089a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80089a4:	4631      	mov	r1, r6
 80089a6:	dcf1      	bgt.n	800898c <__exponent+0x1c>
 80089a8:	3130      	adds	r1, #48	@ 0x30
 80089aa:	1e94      	subs	r4, r2, #2
 80089ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80089b0:	1c41      	adds	r1, r0, #1
 80089b2:	4623      	mov	r3, r4
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	d30a      	bcc.n	80089ce <__exponent+0x5e>
 80089b8:	f10d 0309 	add.w	r3, sp, #9
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	42ac      	cmp	r4, r5
 80089c0:	bf88      	it	hi
 80089c2:	2300      	movhi	r3, #0
 80089c4:	3302      	adds	r3, #2
 80089c6:	4403      	add	r3, r0
 80089c8:	1a18      	subs	r0, r3, r0
 80089ca:	b003      	add	sp, #12
 80089cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80089d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80089d6:	e7ed      	b.n	80089b4 <__exponent+0x44>
 80089d8:	2330      	movs	r3, #48	@ 0x30
 80089da:	3130      	adds	r1, #48	@ 0x30
 80089dc:	7083      	strb	r3, [r0, #2]
 80089de:	70c1      	strb	r1, [r0, #3]
 80089e0:	1d03      	adds	r3, r0, #4
 80089e2:	e7f1      	b.n	80089c8 <__exponent+0x58>
 80089e4:	0000      	movs	r0, r0
	...

080089e8 <_printf_float>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	b08d      	sub	sp, #52	@ 0x34
 80089ee:	460c      	mov	r4, r1
 80089f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80089f4:	4616      	mov	r6, r2
 80089f6:	461f      	mov	r7, r3
 80089f8:	4605      	mov	r5, r0
 80089fa:	f000 fdbd 	bl	8009578 <_localeconv_r>
 80089fe:	f8d0 b000 	ldr.w	fp, [r0]
 8008a02:	4658      	mov	r0, fp
 8008a04:	f7f7 fcbc 	bl	8000380 <strlen>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	9005      	str	r0, [sp, #20]
 8008a18:	3307      	adds	r3, #7
 8008a1a:	f023 0307 	bic.w	r3, r3, #7
 8008a1e:	f103 0108 	add.w	r1, r3, #8
 8008a22:	f8c8 1000 	str.w	r1, [r8]
 8008a26:	ed93 0b00 	vldr	d0, [r3]
 8008a2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008c88 <_printf_float+0x2a0>
 8008a2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008a32:	eeb4 7b46 	vcmp.f64	d7, d6
 8008a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008a3e:	dd24      	ble.n	8008a8a <_printf_float+0xa2>
 8008a40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a48:	d502      	bpl.n	8008a50 <_printf_float+0x68>
 8008a4a:	232d      	movs	r3, #45	@ 0x2d
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a50:	498f      	ldr	r1, [pc, #572]	@ (8008c90 <_printf_float+0x2a8>)
 8008a52:	4b90      	ldr	r3, [pc, #576]	@ (8008c94 <_printf_float+0x2ac>)
 8008a54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008a58:	bf8c      	ite	hi
 8008a5a:	4688      	movhi	r8, r1
 8008a5c:	4698      	movls	r8, r3
 8008a5e:	f022 0204 	bic.w	r2, r2, #4
 8008a62:	2303      	movs	r3, #3
 8008a64:	6123      	str	r3, [r4, #16]
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	f04f 0a00 	mov.w	sl, #0
 8008a6c:	9700      	str	r7, [sp, #0]
 8008a6e:	4633      	mov	r3, r6
 8008a70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a72:	4621      	mov	r1, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	f000 f9d1 	bl	8008e1c <_printf_common>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f040 8089 	bne.w	8008b92 <_printf_float+0x1aa>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b00d      	add	sp, #52	@ 0x34
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	d709      	bvc.n	8008aa8 <_printf_float+0xc0>
 8008a94:	ee10 3a90 	vmov	r3, s1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfbc      	itt	lt
 8008a9c:	232d      	movlt	r3, #45	@ 0x2d
 8008a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008aa2:	497d      	ldr	r1, [pc, #500]	@ (8008c98 <_printf_float+0x2b0>)
 8008aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8008c9c <_printf_float+0x2b4>)
 8008aa6:	e7d5      	b.n	8008a54 <_printf_float+0x6c>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008ab0:	d139      	bne.n	8008b26 <_printf_float+0x13e>
 8008ab2:	2306      	movs	r3, #6
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008aba:	2300      	movs	r3, #0
 8008abc:	6022      	str	r2, [r4, #0]
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ac2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ac6:	ab09      	add	r3, sp, #36	@ 0x24
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	6861      	ldr	r1, [r4, #4]
 8008acc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7ff fef9 	bl	80088c8 <__cvt>
 8008ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008adc:	4680      	mov	r8, r0
 8008ade:	d129      	bne.n	8008b34 <_printf_float+0x14c>
 8008ae0:	1cc8      	adds	r0, r1, #3
 8008ae2:	db02      	blt.n	8008aea <_printf_float+0x102>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	4299      	cmp	r1, r3
 8008ae8:	dd41      	ble.n	8008b6e <_printf_float+0x186>
 8008aea:	f1a9 0902 	sub.w	r9, r9, #2
 8008aee:	fa5f f989 	uxtb.w	r9, r9
 8008af2:	3901      	subs	r1, #1
 8008af4:	464a      	mov	r2, r9
 8008af6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008afc:	f7ff ff38 	bl	8008970 <__exponent>
 8008b00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b02:	1813      	adds	r3, r2, r0
 8008b04:	2a01      	cmp	r2, #1
 8008b06:	4682      	mov	sl, r0
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	dc02      	bgt.n	8008b12 <_printf_float+0x12a>
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	07d2      	lsls	r2, r2, #31
 8008b10:	d501      	bpl.n	8008b16 <_printf_float+0x12e>
 8008b12:	3301      	adds	r3, #1
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0a6      	beq.n	8008a6c <_printf_float+0x84>
 8008b1e:	232d      	movs	r3, #45	@ 0x2d
 8008b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b24:	e7a2      	b.n	8008a6c <_printf_float+0x84>
 8008b26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b2a:	d1c4      	bne.n	8008ab6 <_printf_float+0xce>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1c2      	bne.n	8008ab6 <_printf_float+0xce>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7bf      	b.n	8008ab4 <_printf_float+0xcc>
 8008b34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008b38:	d9db      	bls.n	8008af2 <_printf_float+0x10a>
 8008b3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008b3e:	d118      	bne.n	8008b72 <_printf_float+0x18a>
 8008b40:	2900      	cmp	r1, #0
 8008b42:	6863      	ldr	r3, [r4, #4]
 8008b44:	dd0b      	ble.n	8008b5e <_printf_float+0x176>
 8008b46:	6121      	str	r1, [r4, #16]
 8008b48:	b913      	cbnz	r3, 8008b50 <_printf_float+0x168>
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	07d0      	lsls	r0, r2, #31
 8008b4e:	d502      	bpl.n	8008b56 <_printf_float+0x16e>
 8008b50:	3301      	adds	r3, #1
 8008b52:	440b      	add	r3, r1
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b58:	f04f 0a00 	mov.w	sl, #0
 8008b5c:	e7db      	b.n	8008b16 <_printf_float+0x12e>
 8008b5e:	b913      	cbnz	r3, 8008b66 <_printf_float+0x17e>
 8008b60:	6822      	ldr	r2, [r4, #0]
 8008b62:	07d2      	lsls	r2, r2, #31
 8008b64:	d501      	bpl.n	8008b6a <_printf_float+0x182>
 8008b66:	3302      	adds	r3, #2
 8008b68:	e7f4      	b.n	8008b54 <_printf_float+0x16c>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7f2      	b.n	8008b54 <_printf_float+0x16c>
 8008b6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b74:	4299      	cmp	r1, r3
 8008b76:	db05      	blt.n	8008b84 <_printf_float+0x19c>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	6121      	str	r1, [r4, #16]
 8008b7c:	07d8      	lsls	r0, r3, #31
 8008b7e:	d5ea      	bpl.n	8008b56 <_printf_float+0x16e>
 8008b80:	1c4b      	adds	r3, r1, #1
 8008b82:	e7e7      	b.n	8008b54 <_printf_float+0x16c>
 8008b84:	2900      	cmp	r1, #0
 8008b86:	bfd4      	ite	le
 8008b88:	f1c1 0202 	rsble	r2, r1, #2
 8008b8c:	2201      	movgt	r2, #1
 8008b8e:	4413      	add	r3, r2
 8008b90:	e7e0      	b.n	8008b54 <_printf_float+0x16c>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	055a      	lsls	r2, r3, #21
 8008b96:	d407      	bmi.n	8008ba8 <_printf_float+0x1c0>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	4642      	mov	r2, r8
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d12a      	bne.n	8008bfc <_printf_float+0x214>
 8008ba6:	e76b      	b.n	8008a80 <_printf_float+0x98>
 8008ba8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008bac:	f240 80e0 	bls.w	8008d70 <_printf_float+0x388>
 8008bb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008bb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbc:	d133      	bne.n	8008c26 <_printf_float+0x23e>
 8008bbe:	4a38      	ldr	r2, [pc, #224]	@ (8008ca0 <_printf_float+0x2b8>)
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f af59 	beq.w	8008a80 <_printf_float+0x98>
 8008bce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008bd2:	4543      	cmp	r3, r8
 8008bd4:	db02      	blt.n	8008bdc <_printf_float+0x1f4>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	07d8      	lsls	r0, r3, #31
 8008bda:	d50f      	bpl.n	8008bfc <_printf_float+0x214>
 8008bdc:	9b05      	ldr	r3, [sp, #20]
 8008bde:	465a      	mov	r2, fp
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f af4a 	beq.w	8008a80 <_printf_float+0x98>
 8008bec:	f04f 0900 	mov.w	r9, #0
 8008bf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bf4:	f104 0a1a 	add.w	sl, r4, #26
 8008bf8:	45c8      	cmp	r8, r9
 8008bfa:	dc09      	bgt.n	8008c10 <_printf_float+0x228>
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	079b      	lsls	r3, r3, #30
 8008c00:	f100 8107 	bmi.w	8008e12 <_printf_float+0x42a>
 8008c04:	68e0      	ldr	r0, [r4, #12]
 8008c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c08:	4298      	cmp	r0, r3
 8008c0a:	bfb8      	it	lt
 8008c0c:	4618      	movlt	r0, r3
 8008c0e:	e739      	b.n	8008a84 <_printf_float+0x9c>
 8008c10:	2301      	movs	r3, #1
 8008c12:	4652      	mov	r2, sl
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f43f af30 	beq.w	8008a80 <_printf_float+0x98>
 8008c20:	f109 0901 	add.w	r9, r9, #1
 8008c24:	e7e8      	b.n	8008bf8 <_printf_float+0x210>
 8008c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc3b      	bgt.n	8008ca4 <_printf_float+0x2bc>
 8008c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca0 <_printf_float+0x2b8>)
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f af22 	beq.w	8008a80 <_printf_float+0x98>
 8008c3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c40:	ea59 0303 	orrs.w	r3, r9, r3
 8008c44:	d102      	bne.n	8008c4c <_printf_float+0x264>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	07d9      	lsls	r1, r3, #31
 8008c4a:	d5d7      	bpl.n	8008bfc <_printf_float+0x214>
 8008c4c:	9b05      	ldr	r3, [sp, #20]
 8008c4e:	465a      	mov	r2, fp
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	f43f af12 	beq.w	8008a80 <_printf_float+0x98>
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	f104 0b1a 	add.w	fp, r4, #26
 8008c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c66:	425b      	negs	r3, r3
 8008c68:	4553      	cmp	r3, sl
 8008c6a:	dc01      	bgt.n	8008c70 <_printf_float+0x288>
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	e794      	b.n	8008b9a <_printf_float+0x1b2>
 8008c70:	2301      	movs	r3, #1
 8008c72:	465a      	mov	r2, fp
 8008c74:	4631      	mov	r1, r6
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b8      	blx	r7
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	f43f af00 	beq.w	8008a80 <_printf_float+0x98>
 8008c80:	f10a 0a01 	add.w	sl, sl, #1
 8008c84:	e7ee      	b.n	8008c64 <_printf_float+0x27c>
 8008c86:	bf00      	nop
 8008c88:	ffffffff 	.word	0xffffffff
 8008c8c:	7fefffff 	.word	0x7fefffff
 8008c90:	0800b9ef 	.word	0x0800b9ef
 8008c94:	0800b9eb 	.word	0x0800b9eb
 8008c98:	0800b9f7 	.word	0x0800b9f7
 8008c9c:	0800b9f3 	.word	0x0800b9f3
 8008ca0:	0800b9fb 	.word	0x0800b9fb
 8008ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008caa:	4553      	cmp	r3, sl
 8008cac:	bfa8      	it	ge
 8008cae:	4653      	movge	r3, sl
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	4699      	mov	r9, r3
 8008cb4:	dc37      	bgt.n	8008d26 <_printf_float+0x33e>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9307      	str	r3, [sp, #28]
 8008cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cbe:	f104 021a 	add.w	r2, r4, #26
 8008cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008cc4:	9907      	ldr	r1, [sp, #28]
 8008cc6:	9306      	str	r3, [sp, #24]
 8008cc8:	eba3 0309 	sub.w	r3, r3, r9
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	dc31      	bgt.n	8008d34 <_printf_float+0x34c>
 8008cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd2:	459a      	cmp	sl, r3
 8008cd4:	dc3b      	bgt.n	8008d4e <_printf_float+0x366>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	07da      	lsls	r2, r3, #31
 8008cda:	d438      	bmi.n	8008d4e <_printf_float+0x366>
 8008cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cde:	ebaa 0903 	sub.w	r9, sl, r3
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ce8:	4599      	cmp	r9, r3
 8008cea:	bfa8      	it	ge
 8008cec:	4699      	movge	r9, r3
 8008cee:	f1b9 0f00 	cmp.w	r9, #0
 8008cf2:	dc34      	bgt.n	8008d5e <_printf_float+0x376>
 8008cf4:	f04f 0800 	mov.w	r8, #0
 8008cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cfc:	f104 0b1a 	add.w	fp, r4, #26
 8008d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d02:	ebaa 0303 	sub.w	r3, sl, r3
 8008d06:	eba3 0309 	sub.w	r3, r3, r9
 8008d0a:	4543      	cmp	r3, r8
 8008d0c:	f77f af76 	ble.w	8008bfc <_printf_float+0x214>
 8008d10:	2301      	movs	r3, #1
 8008d12:	465a      	mov	r2, fp
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f43f aeb0 	beq.w	8008a80 <_printf_float+0x98>
 8008d20:	f108 0801 	add.w	r8, r8, #1
 8008d24:	e7ec      	b.n	8008d00 <_printf_float+0x318>
 8008d26:	4642      	mov	r2, r8
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d1c1      	bne.n	8008cb6 <_printf_float+0x2ce>
 8008d32:	e6a5      	b.n	8008a80 <_printf_float+0x98>
 8008d34:	2301      	movs	r3, #1
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	9206      	str	r2, [sp, #24]
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f43f ae9e 	beq.w	8008a80 <_printf_float+0x98>
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	9a06      	ldr	r2, [sp, #24]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	9307      	str	r3, [sp, #28]
 8008d4c:	e7b9      	b.n	8008cc2 <_printf_float+0x2da>
 8008d4e:	9b05      	ldr	r3, [sp, #20]
 8008d50:	465a      	mov	r2, fp
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d1bf      	bne.n	8008cdc <_printf_float+0x2f4>
 8008d5c:	e690      	b.n	8008a80 <_printf_float+0x98>
 8008d5e:	9a06      	ldr	r2, [sp, #24]
 8008d60:	464b      	mov	r3, r9
 8008d62:	4442      	add	r2, r8
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d1c2      	bne.n	8008cf4 <_printf_float+0x30c>
 8008d6e:	e687      	b.n	8008a80 <_printf_float+0x98>
 8008d70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008d74:	f1b9 0f01 	cmp.w	r9, #1
 8008d78:	dc01      	bgt.n	8008d7e <_printf_float+0x396>
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d536      	bpl.n	8008dec <_printf_float+0x404>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4642      	mov	r2, r8
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae79 	beq.w	8008a80 <_printf_float+0x98>
 8008d8e:	9b05      	ldr	r3, [sp, #20]
 8008d90:	465a      	mov	r2, fp
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f ae71 	beq.w	8008a80 <_printf_float+0x98>
 8008d9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008da2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008daa:	f109 39ff 	add.w	r9, r9, #4294967295
 8008dae:	d018      	beq.n	8008de2 <_printf_float+0x3fa>
 8008db0:	464b      	mov	r3, r9
 8008db2:	f108 0201 	add.w	r2, r8, #1
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d10c      	bne.n	8008dda <_printf_float+0x3f2>
 8008dc0:	e65e      	b.n	8008a80 <_printf_float+0x98>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	465a      	mov	r2, fp
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	47b8      	blx	r7
 8008dcc:	3001      	adds	r0, #1
 8008dce:	f43f ae57 	beq.w	8008a80 <_printf_float+0x98>
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	45c8      	cmp	r8, r9
 8008dd8:	dbf3      	blt.n	8008dc2 <_printf_float+0x3da>
 8008dda:	4653      	mov	r3, sl
 8008ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008de0:	e6dc      	b.n	8008b9c <_printf_float+0x1b4>
 8008de2:	f04f 0800 	mov.w	r8, #0
 8008de6:	f104 0b1a 	add.w	fp, r4, #26
 8008dea:	e7f4      	b.n	8008dd6 <_printf_float+0x3ee>
 8008dec:	2301      	movs	r3, #1
 8008dee:	4642      	mov	r2, r8
 8008df0:	e7e1      	b.n	8008db6 <_printf_float+0x3ce>
 8008df2:	2301      	movs	r3, #1
 8008df4:	464a      	mov	r2, r9
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f ae3f 	beq.w	8008a80 <_printf_float+0x98>
 8008e02:	f108 0801 	add.w	r8, r8, #1
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	4543      	cmp	r3, r8
 8008e0e:	dcf0      	bgt.n	8008df2 <_printf_float+0x40a>
 8008e10:	e6f8      	b.n	8008c04 <_printf_float+0x21c>
 8008e12:	f04f 0800 	mov.w	r8, #0
 8008e16:	f104 0919 	add.w	r9, r4, #25
 8008e1a:	e7f4      	b.n	8008e06 <_printf_float+0x41e>

08008e1c <_printf_common>:
 8008e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e20:	4616      	mov	r6, r2
 8008e22:	4698      	mov	r8, r3
 8008e24:	688a      	ldr	r2, [r1, #8]
 8008e26:	690b      	ldr	r3, [r1, #16]
 8008e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	bfb8      	it	lt
 8008e30:	4613      	movlt	r3, r2
 8008e32:	6033      	str	r3, [r6, #0]
 8008e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e38:	4607      	mov	r7, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	b10a      	cbz	r2, 8008e42 <_printf_common+0x26>
 8008e3e:	3301      	adds	r3, #1
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	0699      	lsls	r1, r3, #26
 8008e46:	bf42      	ittt	mi
 8008e48:	6833      	ldrmi	r3, [r6, #0]
 8008e4a:	3302      	addmi	r3, #2
 8008e4c:	6033      	strmi	r3, [r6, #0]
 8008e4e:	6825      	ldr	r5, [r4, #0]
 8008e50:	f015 0506 	ands.w	r5, r5, #6
 8008e54:	d106      	bne.n	8008e64 <_printf_common+0x48>
 8008e56:	f104 0a19 	add.w	sl, r4, #25
 8008e5a:	68e3      	ldr	r3, [r4, #12]
 8008e5c:	6832      	ldr	r2, [r6, #0]
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	dc26      	bgt.n	8008eb2 <_printf_common+0x96>
 8008e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	3b00      	subs	r3, #0
 8008e6c:	bf18      	it	ne
 8008e6e:	2301      	movne	r3, #1
 8008e70:	0692      	lsls	r2, r2, #26
 8008e72:	d42b      	bmi.n	8008ecc <_printf_common+0xb0>
 8008e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	47c8      	blx	r9
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d01e      	beq.n	8008ec0 <_printf_common+0xa4>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	6922      	ldr	r2, [r4, #16]
 8008e86:	f003 0306 	and.w	r3, r3, #6
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	bf02      	ittt	eq
 8008e8e:	68e5      	ldreq	r5, [r4, #12]
 8008e90:	6833      	ldreq	r3, [r6, #0]
 8008e92:	1aed      	subeq	r5, r5, r3
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	bf0c      	ite	eq
 8008e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e9c:	2500      	movne	r5, #0
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	bfc4      	itt	gt
 8008ea2:	1a9b      	subgt	r3, r3, r2
 8008ea4:	18ed      	addgt	r5, r5, r3
 8008ea6:	2600      	movs	r6, #0
 8008ea8:	341a      	adds	r4, #26
 8008eaa:	42b5      	cmp	r5, r6
 8008eac:	d11a      	bne.n	8008ee4 <_printf_common+0xc8>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	e008      	b.n	8008ec4 <_printf_common+0xa8>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	4652      	mov	r2, sl
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	4638      	mov	r0, r7
 8008eba:	47c8      	blx	r9
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d103      	bne.n	8008ec8 <_printf_common+0xac>
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec8:	3501      	adds	r5, #1
 8008eca:	e7c6      	b.n	8008e5a <_printf_common+0x3e>
 8008ecc:	18e1      	adds	r1, r4, r3
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	2030      	movs	r0, #48	@ 0x30
 8008ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ed6:	4422      	add	r2, r4
 8008ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ee0:	3302      	adds	r3, #2
 8008ee2:	e7c7      	b.n	8008e74 <_printf_common+0x58>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	4641      	mov	r1, r8
 8008eea:	4638      	mov	r0, r7
 8008eec:	47c8      	blx	r9
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d0e6      	beq.n	8008ec0 <_printf_common+0xa4>
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7d9      	b.n	8008eaa <_printf_common+0x8e>
	...

08008ef8 <_printf_i>:
 8008ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008efc:	7e0f      	ldrb	r7, [r1, #24]
 8008efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f00:	2f78      	cmp	r7, #120	@ 0x78
 8008f02:	4691      	mov	r9, r2
 8008f04:	4680      	mov	r8, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	469a      	mov	sl, r3
 8008f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f0e:	d807      	bhi.n	8008f20 <_printf_i+0x28>
 8008f10:	2f62      	cmp	r7, #98	@ 0x62
 8008f12:	d80a      	bhi.n	8008f2a <_printf_i+0x32>
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	f000 80d1 	beq.w	80090bc <_printf_i+0x1c4>
 8008f1a:	2f58      	cmp	r7, #88	@ 0x58
 8008f1c:	f000 80b8 	beq.w	8009090 <_printf_i+0x198>
 8008f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f28:	e03a      	b.n	8008fa0 <_printf_i+0xa8>
 8008f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f2e:	2b15      	cmp	r3, #21
 8008f30:	d8f6      	bhi.n	8008f20 <_printf_i+0x28>
 8008f32:	a101      	add	r1, pc, #4	@ (adr r1, 8008f38 <_printf_i+0x40>)
 8008f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f38:	08008f91 	.word	0x08008f91
 8008f3c:	08008fa5 	.word	0x08008fa5
 8008f40:	08008f21 	.word	0x08008f21
 8008f44:	08008f21 	.word	0x08008f21
 8008f48:	08008f21 	.word	0x08008f21
 8008f4c:	08008f21 	.word	0x08008f21
 8008f50:	08008fa5 	.word	0x08008fa5
 8008f54:	08008f21 	.word	0x08008f21
 8008f58:	08008f21 	.word	0x08008f21
 8008f5c:	08008f21 	.word	0x08008f21
 8008f60:	08008f21 	.word	0x08008f21
 8008f64:	080090a3 	.word	0x080090a3
 8008f68:	08008fcf 	.word	0x08008fcf
 8008f6c:	0800905d 	.word	0x0800905d
 8008f70:	08008f21 	.word	0x08008f21
 8008f74:	08008f21 	.word	0x08008f21
 8008f78:	080090c5 	.word	0x080090c5
 8008f7c:	08008f21 	.word	0x08008f21
 8008f80:	08008fcf 	.word	0x08008fcf
 8008f84:	08008f21 	.word	0x08008f21
 8008f88:	08008f21 	.word	0x08008f21
 8008f8c:	08009065 	.word	0x08009065
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	1d1a      	adds	r2, r3, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6032      	str	r2, [r6, #0]
 8008f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e09c      	b.n	80090de <_printf_i+0x1e6>
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	6820      	ldr	r0, [r4, #0]
 8008fa8:	1d19      	adds	r1, r3, #4
 8008faa:	6031      	str	r1, [r6, #0]
 8008fac:	0606      	lsls	r6, r0, #24
 8008fae:	d501      	bpl.n	8008fb4 <_printf_i+0xbc>
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	e003      	b.n	8008fbc <_printf_i+0xc4>
 8008fb4:	0645      	lsls	r5, r0, #25
 8008fb6:	d5fb      	bpl.n	8008fb0 <_printf_i+0xb8>
 8008fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	da03      	bge.n	8008fc8 <_printf_i+0xd0>
 8008fc0:	232d      	movs	r3, #45	@ 0x2d
 8008fc2:	426d      	negs	r5, r5
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc8:	4858      	ldr	r0, [pc, #352]	@ (800912c <_printf_i+0x234>)
 8008fca:	230a      	movs	r3, #10
 8008fcc:	e011      	b.n	8008ff2 <_printf_i+0xfa>
 8008fce:	6821      	ldr	r1, [r4, #0]
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	0608      	lsls	r0, r1, #24
 8008fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fd8:	d402      	bmi.n	8008fe0 <_printf_i+0xe8>
 8008fda:	0649      	lsls	r1, r1, #25
 8008fdc:	bf48      	it	mi
 8008fde:	b2ad      	uxthmi	r5, r5
 8008fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fe2:	4852      	ldr	r0, [pc, #328]	@ (800912c <_printf_i+0x234>)
 8008fe4:	6033      	str	r3, [r6, #0]
 8008fe6:	bf14      	ite	ne
 8008fe8:	230a      	movne	r3, #10
 8008fea:	2308      	moveq	r3, #8
 8008fec:	2100      	movs	r1, #0
 8008fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ff2:	6866      	ldr	r6, [r4, #4]
 8008ff4:	60a6      	str	r6, [r4, #8]
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	db05      	blt.n	8009006 <_printf_i+0x10e>
 8008ffa:	6821      	ldr	r1, [r4, #0]
 8008ffc:	432e      	orrs	r6, r5
 8008ffe:	f021 0104 	bic.w	r1, r1, #4
 8009002:	6021      	str	r1, [r4, #0]
 8009004:	d04b      	beq.n	800909e <_printf_i+0x1a6>
 8009006:	4616      	mov	r6, r2
 8009008:	fbb5 f1f3 	udiv	r1, r5, r3
 800900c:	fb03 5711 	mls	r7, r3, r1, r5
 8009010:	5dc7      	ldrb	r7, [r0, r7]
 8009012:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009016:	462f      	mov	r7, r5
 8009018:	42bb      	cmp	r3, r7
 800901a:	460d      	mov	r5, r1
 800901c:	d9f4      	bls.n	8009008 <_printf_i+0x110>
 800901e:	2b08      	cmp	r3, #8
 8009020:	d10b      	bne.n	800903a <_printf_i+0x142>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	07df      	lsls	r7, r3, #31
 8009026:	d508      	bpl.n	800903a <_printf_i+0x142>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	6861      	ldr	r1, [r4, #4]
 800902c:	4299      	cmp	r1, r3
 800902e:	bfde      	ittt	le
 8009030:	2330      	movle	r3, #48	@ 0x30
 8009032:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009036:	f106 36ff 	addle.w	r6, r6, #4294967295
 800903a:	1b92      	subs	r2, r2, r6
 800903c:	6122      	str	r2, [r4, #16]
 800903e:	f8cd a000 	str.w	sl, [sp]
 8009042:	464b      	mov	r3, r9
 8009044:	aa03      	add	r2, sp, #12
 8009046:	4621      	mov	r1, r4
 8009048:	4640      	mov	r0, r8
 800904a:	f7ff fee7 	bl	8008e1c <_printf_common>
 800904e:	3001      	adds	r0, #1
 8009050:	d14a      	bne.n	80090e8 <_printf_i+0x1f0>
 8009052:	f04f 30ff 	mov.w	r0, #4294967295
 8009056:	b004      	add	sp, #16
 8009058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	f043 0320 	orr.w	r3, r3, #32
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	4832      	ldr	r0, [pc, #200]	@ (8009130 <_printf_i+0x238>)
 8009066:	2778      	movs	r7, #120	@ 0x78
 8009068:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	6831      	ldr	r1, [r6, #0]
 8009070:	061f      	lsls	r7, r3, #24
 8009072:	f851 5b04 	ldr.w	r5, [r1], #4
 8009076:	d402      	bmi.n	800907e <_printf_i+0x186>
 8009078:	065f      	lsls	r7, r3, #25
 800907a:	bf48      	it	mi
 800907c:	b2ad      	uxthmi	r5, r5
 800907e:	6031      	str	r1, [r6, #0]
 8009080:	07d9      	lsls	r1, r3, #31
 8009082:	bf44      	itt	mi
 8009084:	f043 0320 	orrmi.w	r3, r3, #32
 8009088:	6023      	strmi	r3, [r4, #0]
 800908a:	b11d      	cbz	r5, 8009094 <_printf_i+0x19c>
 800908c:	2310      	movs	r3, #16
 800908e:	e7ad      	b.n	8008fec <_printf_i+0xf4>
 8009090:	4826      	ldr	r0, [pc, #152]	@ (800912c <_printf_i+0x234>)
 8009092:	e7e9      	b.n	8009068 <_printf_i+0x170>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	f023 0320 	bic.w	r3, r3, #32
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	e7f6      	b.n	800908c <_printf_i+0x194>
 800909e:	4616      	mov	r6, r2
 80090a0:	e7bd      	b.n	800901e <_printf_i+0x126>
 80090a2:	6833      	ldr	r3, [r6, #0]
 80090a4:	6825      	ldr	r5, [r4, #0]
 80090a6:	6961      	ldr	r1, [r4, #20]
 80090a8:	1d18      	adds	r0, r3, #4
 80090aa:	6030      	str	r0, [r6, #0]
 80090ac:	062e      	lsls	r6, r5, #24
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	d501      	bpl.n	80090b6 <_printf_i+0x1be>
 80090b2:	6019      	str	r1, [r3, #0]
 80090b4:	e002      	b.n	80090bc <_printf_i+0x1c4>
 80090b6:	0668      	lsls	r0, r5, #25
 80090b8:	d5fb      	bpl.n	80090b2 <_printf_i+0x1ba>
 80090ba:	8019      	strh	r1, [r3, #0]
 80090bc:	2300      	movs	r3, #0
 80090be:	6123      	str	r3, [r4, #16]
 80090c0:	4616      	mov	r6, r2
 80090c2:	e7bc      	b.n	800903e <_printf_i+0x146>
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	1d1a      	adds	r2, r3, #4
 80090c8:	6032      	str	r2, [r6, #0]
 80090ca:	681e      	ldr	r6, [r3, #0]
 80090cc:	6862      	ldr	r2, [r4, #4]
 80090ce:	2100      	movs	r1, #0
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7f7 f905 	bl	80002e0 <memchr>
 80090d6:	b108      	cbz	r0, 80090dc <_printf_i+0x1e4>
 80090d8:	1b80      	subs	r0, r0, r6
 80090da:	6060      	str	r0, [r4, #4]
 80090dc:	6863      	ldr	r3, [r4, #4]
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	2300      	movs	r3, #0
 80090e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e6:	e7aa      	b.n	800903e <_printf_i+0x146>
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	4632      	mov	r2, r6
 80090ec:	4649      	mov	r1, r9
 80090ee:	4640      	mov	r0, r8
 80090f0:	47d0      	blx	sl
 80090f2:	3001      	adds	r0, #1
 80090f4:	d0ad      	beq.n	8009052 <_printf_i+0x15a>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	079b      	lsls	r3, r3, #30
 80090fa:	d413      	bmi.n	8009124 <_printf_i+0x22c>
 80090fc:	68e0      	ldr	r0, [r4, #12]
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	4298      	cmp	r0, r3
 8009102:	bfb8      	it	lt
 8009104:	4618      	movlt	r0, r3
 8009106:	e7a6      	b.n	8009056 <_printf_i+0x15e>
 8009108:	2301      	movs	r3, #1
 800910a:	4632      	mov	r2, r6
 800910c:	4649      	mov	r1, r9
 800910e:	4640      	mov	r0, r8
 8009110:	47d0      	blx	sl
 8009112:	3001      	adds	r0, #1
 8009114:	d09d      	beq.n	8009052 <_printf_i+0x15a>
 8009116:	3501      	adds	r5, #1
 8009118:	68e3      	ldr	r3, [r4, #12]
 800911a:	9903      	ldr	r1, [sp, #12]
 800911c:	1a5b      	subs	r3, r3, r1
 800911e:	42ab      	cmp	r3, r5
 8009120:	dcf2      	bgt.n	8009108 <_printf_i+0x210>
 8009122:	e7eb      	b.n	80090fc <_printf_i+0x204>
 8009124:	2500      	movs	r5, #0
 8009126:	f104 0619 	add.w	r6, r4, #25
 800912a:	e7f5      	b.n	8009118 <_printf_i+0x220>
 800912c:	0800b9fd 	.word	0x0800b9fd
 8009130:	0800ba0e 	.word	0x0800ba0e

08009134 <std>:
 8009134:	2300      	movs	r3, #0
 8009136:	b510      	push	{r4, lr}
 8009138:	4604      	mov	r4, r0
 800913a:	e9c0 3300 	strd	r3, r3, [r0]
 800913e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009142:	6083      	str	r3, [r0, #8]
 8009144:	8181      	strh	r1, [r0, #12]
 8009146:	6643      	str	r3, [r0, #100]	@ 0x64
 8009148:	81c2      	strh	r2, [r0, #14]
 800914a:	6183      	str	r3, [r0, #24]
 800914c:	4619      	mov	r1, r3
 800914e:	2208      	movs	r2, #8
 8009150:	305c      	adds	r0, #92	@ 0x5c
 8009152:	f000 fa09 	bl	8009568 <memset>
 8009156:	4b0d      	ldr	r3, [pc, #52]	@ (800918c <std+0x58>)
 8009158:	6263      	str	r3, [r4, #36]	@ 0x24
 800915a:	4b0d      	ldr	r3, [pc, #52]	@ (8009190 <std+0x5c>)
 800915c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800915e:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <std+0x60>)
 8009160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009162:	4b0d      	ldr	r3, [pc, #52]	@ (8009198 <std+0x64>)
 8009164:	6323      	str	r3, [r4, #48]	@ 0x30
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x68>)
 8009168:	6224      	str	r4, [r4, #32]
 800916a:	429c      	cmp	r4, r3
 800916c:	d006      	beq.n	800917c <std+0x48>
 800916e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009172:	4294      	cmp	r4, r2
 8009174:	d002      	beq.n	800917c <std+0x48>
 8009176:	33d0      	adds	r3, #208	@ 0xd0
 8009178:	429c      	cmp	r4, r3
 800917a:	d105      	bne.n	8009188 <std+0x54>
 800917c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f000 ba6c 	b.w	8009660 <__retarget_lock_init_recursive>
 8009188:	bd10      	pop	{r4, pc}
 800918a:	bf00      	nop
 800918c:	080093b9 	.word	0x080093b9
 8009190:	080093db 	.word	0x080093db
 8009194:	08009413 	.word	0x08009413
 8009198:	08009437 	.word	0x08009437
 800919c:	24000b4c 	.word	0x24000b4c

080091a0 <stdio_exit_handler>:
 80091a0:	4a02      	ldr	r2, [pc, #8]	@ (80091ac <stdio_exit_handler+0xc>)
 80091a2:	4903      	ldr	r1, [pc, #12]	@ (80091b0 <stdio_exit_handler+0x10>)
 80091a4:	4803      	ldr	r0, [pc, #12]	@ (80091b4 <stdio_exit_handler+0x14>)
 80091a6:	f000 b869 	b.w	800927c <_fwalk_sglue>
 80091aa:	bf00      	nop
 80091ac:	24000080 	.word	0x24000080
 80091b0:	0800aee1 	.word	0x0800aee1
 80091b4:	24000090 	.word	0x24000090

080091b8 <cleanup_stdio>:
 80091b8:	6841      	ldr	r1, [r0, #4]
 80091ba:	4b0c      	ldr	r3, [pc, #48]	@ (80091ec <cleanup_stdio+0x34>)
 80091bc:	4299      	cmp	r1, r3
 80091be:	b510      	push	{r4, lr}
 80091c0:	4604      	mov	r4, r0
 80091c2:	d001      	beq.n	80091c8 <cleanup_stdio+0x10>
 80091c4:	f001 fe8c 	bl	800aee0 <_fflush_r>
 80091c8:	68a1      	ldr	r1, [r4, #8]
 80091ca:	4b09      	ldr	r3, [pc, #36]	@ (80091f0 <cleanup_stdio+0x38>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <cleanup_stdio+0x1e>
 80091d0:	4620      	mov	r0, r4
 80091d2:	f001 fe85 	bl	800aee0 <_fflush_r>
 80091d6:	68e1      	ldr	r1, [r4, #12]
 80091d8:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <cleanup_stdio+0x3c>)
 80091da:	4299      	cmp	r1, r3
 80091dc:	d004      	beq.n	80091e8 <cleanup_stdio+0x30>
 80091de:	4620      	mov	r0, r4
 80091e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e4:	f001 be7c 	b.w	800aee0 <_fflush_r>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	24000b4c 	.word	0x24000b4c
 80091f0:	24000bb4 	.word	0x24000bb4
 80091f4:	24000c1c 	.word	0x24000c1c

080091f8 <global_stdio_init.part.0>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009228 <global_stdio_init.part.0+0x30>)
 80091fc:	4c0b      	ldr	r4, [pc, #44]	@ (800922c <global_stdio_init.part.0+0x34>)
 80091fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <global_stdio_init.part.0+0x38>)
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	4620      	mov	r0, r4
 8009204:	2200      	movs	r2, #0
 8009206:	2104      	movs	r1, #4
 8009208:	f7ff ff94 	bl	8009134 <std>
 800920c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009210:	2201      	movs	r2, #1
 8009212:	2109      	movs	r1, #9
 8009214:	f7ff ff8e 	bl	8009134 <std>
 8009218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800921c:	2202      	movs	r2, #2
 800921e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009222:	2112      	movs	r1, #18
 8009224:	f7ff bf86 	b.w	8009134 <std>
 8009228:	24000c84 	.word	0x24000c84
 800922c:	24000b4c 	.word	0x24000b4c
 8009230:	080091a1 	.word	0x080091a1

08009234 <__sfp_lock_acquire>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__sfp_lock_acquire+0x8>)
 8009236:	f000 ba14 	b.w	8009662 <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	24000c8d 	.word	0x24000c8d

08009240 <__sfp_lock_release>:
 8009240:	4801      	ldr	r0, [pc, #4]	@ (8009248 <__sfp_lock_release+0x8>)
 8009242:	f000 ba0f 	b.w	8009664 <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	24000c8d 	.word	0x24000c8d

0800924c <__sinit>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	f7ff fff0 	bl	8009234 <__sfp_lock_acquire>
 8009254:	6a23      	ldr	r3, [r4, #32]
 8009256:	b11b      	cbz	r3, 8009260 <__sinit+0x14>
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f7ff bff0 	b.w	8009240 <__sfp_lock_release>
 8009260:	4b04      	ldr	r3, [pc, #16]	@ (8009274 <__sinit+0x28>)
 8009262:	6223      	str	r3, [r4, #32]
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <__sinit+0x2c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f5      	bne.n	8009258 <__sinit+0xc>
 800926c:	f7ff ffc4 	bl	80091f8 <global_stdio_init.part.0>
 8009270:	e7f2      	b.n	8009258 <__sinit+0xc>
 8009272:	bf00      	nop
 8009274:	080091b9 	.word	0x080091b9
 8009278:	24000c84 	.word	0x24000c84

0800927c <_fwalk_sglue>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4607      	mov	r7, r0
 8009282:	4688      	mov	r8, r1
 8009284:	4614      	mov	r4, r2
 8009286:	2600      	movs	r6, #0
 8009288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800928c:	f1b9 0901 	subs.w	r9, r9, #1
 8009290:	d505      	bpl.n	800929e <_fwalk_sglue+0x22>
 8009292:	6824      	ldr	r4, [r4, #0]
 8009294:	2c00      	cmp	r4, #0
 8009296:	d1f7      	bne.n	8009288 <_fwalk_sglue+0xc>
 8009298:	4630      	mov	r0, r6
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d907      	bls.n	80092b4 <_fwalk_sglue+0x38>
 80092a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092a8:	3301      	adds	r3, #1
 80092aa:	d003      	beq.n	80092b4 <_fwalk_sglue+0x38>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4638      	mov	r0, r7
 80092b0:	47c0      	blx	r8
 80092b2:	4306      	orrs	r6, r0
 80092b4:	3568      	adds	r5, #104	@ 0x68
 80092b6:	e7e9      	b.n	800928c <_fwalk_sglue+0x10>

080092b8 <_puts_r>:
 80092b8:	6a03      	ldr	r3, [r0, #32]
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	6884      	ldr	r4, [r0, #8]
 80092be:	4605      	mov	r5, r0
 80092c0:	460e      	mov	r6, r1
 80092c2:	b90b      	cbnz	r3, 80092c8 <_puts_r+0x10>
 80092c4:	f7ff ffc2 	bl	800924c <__sinit>
 80092c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d405      	bmi.n	80092da <_puts_r+0x22>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	0598      	lsls	r0, r3, #22
 80092d2:	d402      	bmi.n	80092da <_puts_r+0x22>
 80092d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d6:	f000 f9c4 	bl	8009662 <__retarget_lock_acquire_recursive>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	0719      	lsls	r1, r3, #28
 80092de:	d502      	bpl.n	80092e6 <_puts_r+0x2e>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d135      	bne.n	8009352 <_puts_r+0x9a>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 f8e7 	bl	80094bc <__swsetup_r>
 80092ee:	b380      	cbz	r0, 8009352 <_puts_r+0x9a>
 80092f0:	f04f 35ff 	mov.w	r5, #4294967295
 80092f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092f6:	07da      	lsls	r2, r3, #31
 80092f8:	d405      	bmi.n	8009306 <_puts_r+0x4e>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	059b      	lsls	r3, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_puts_r+0x4e>
 8009300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009302:	f000 f9af 	bl	8009664 <__retarget_lock_release_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	2b00      	cmp	r3, #0
 800930c:	da04      	bge.n	8009318 <_puts_r+0x60>
 800930e:	69a2      	ldr	r2, [r4, #24]
 8009310:	429a      	cmp	r2, r3
 8009312:	dc17      	bgt.n	8009344 <_puts_r+0x8c>
 8009314:	290a      	cmp	r1, #10
 8009316:	d015      	beq.n	8009344 <_puts_r+0x8c>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	6022      	str	r2, [r4, #0]
 800931e:	7019      	strb	r1, [r3, #0]
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009326:	3b01      	subs	r3, #1
 8009328:	60a3      	str	r3, [r4, #8]
 800932a:	2900      	cmp	r1, #0
 800932c:	d1ed      	bne.n	800930a <_puts_r+0x52>
 800932e:	2b00      	cmp	r3, #0
 8009330:	da11      	bge.n	8009356 <_puts_r+0x9e>
 8009332:	4622      	mov	r2, r4
 8009334:	210a      	movs	r1, #10
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f881 	bl	800943e <__swbuf_r>
 800933c:	3001      	adds	r0, #1
 800933e:	d0d7      	beq.n	80092f0 <_puts_r+0x38>
 8009340:	250a      	movs	r5, #10
 8009342:	e7d7      	b.n	80092f4 <_puts_r+0x3c>
 8009344:	4622      	mov	r2, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f879 	bl	800943e <__swbuf_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d1e7      	bne.n	8009320 <_puts_r+0x68>
 8009350:	e7ce      	b.n	80092f0 <_puts_r+0x38>
 8009352:	3e01      	subs	r6, #1
 8009354:	e7e4      	b.n	8009320 <_puts_r+0x68>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	220a      	movs	r2, #10
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	e7ee      	b.n	8009340 <_puts_r+0x88>
	...

08009364 <puts>:
 8009364:	4b02      	ldr	r3, [pc, #8]	@ (8009370 <puts+0xc>)
 8009366:	4601      	mov	r1, r0
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	f7ff bfa5 	b.w	80092b8 <_puts_r>
 800936e:	bf00      	nop
 8009370:	2400008c 	.word	0x2400008c

08009374 <siprintf>:
 8009374:	b40e      	push	{r1, r2, r3}
 8009376:	b510      	push	{r4, lr}
 8009378:	b09d      	sub	sp, #116	@ 0x74
 800937a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	9006      	str	r0, [sp, #24]
 8009380:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009384:	480a      	ldr	r0, [pc, #40]	@ (80093b0 <siprintf+0x3c>)
 8009386:	9107      	str	r1, [sp, #28]
 8009388:	9104      	str	r1, [sp, #16]
 800938a:	490a      	ldr	r1, [pc, #40]	@ (80093b4 <siprintf+0x40>)
 800938c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009390:	9105      	str	r1, [sp, #20]
 8009392:	2400      	movs	r4, #0
 8009394:	a902      	add	r1, sp, #8
 8009396:	6800      	ldr	r0, [r0, #0]
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800939c:	f001 fc20 	bl	800abe0 <_svfiprintf_r>
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	701c      	strb	r4, [r3, #0]
 80093a4:	b01d      	add	sp, #116	@ 0x74
 80093a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093aa:	b003      	add	sp, #12
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	2400008c 	.word	0x2400008c
 80093b4:	ffff0208 	.word	0xffff0208

080093b8 <__sread>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	460c      	mov	r4, r1
 80093bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c0:	f000 f900 	bl	80095c4 <_read_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	bfab      	itete	ge
 80093c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093ca:	89a3      	ldrhlt	r3, [r4, #12]
 80093cc:	181b      	addge	r3, r3, r0
 80093ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093d2:	bfac      	ite	ge
 80093d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093d6:	81a3      	strhlt	r3, [r4, #12]
 80093d8:	bd10      	pop	{r4, pc}

080093da <__swrite>:
 80093da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093de:	461f      	mov	r7, r3
 80093e0:	898b      	ldrh	r3, [r1, #12]
 80093e2:	05db      	lsls	r3, r3, #23
 80093e4:	4605      	mov	r5, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	4616      	mov	r6, r2
 80093ea:	d505      	bpl.n	80093f8 <__swrite+0x1e>
 80093ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f0:	2302      	movs	r3, #2
 80093f2:	2200      	movs	r2, #0
 80093f4:	f000 f8d4 	bl	80095a0 <_lseek_r>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	4632      	mov	r2, r6
 8009406:	463b      	mov	r3, r7
 8009408:	4628      	mov	r0, r5
 800940a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	f000 b8eb 	b.w	80095e8 <_write_r>

08009412 <__sseek>:
 8009412:	b510      	push	{r4, lr}
 8009414:	460c      	mov	r4, r1
 8009416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941a:	f000 f8c1 	bl	80095a0 <_lseek_r>
 800941e:	1c43      	adds	r3, r0, #1
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	bf15      	itete	ne
 8009424:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800942a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800942e:	81a3      	strheq	r3, [r4, #12]
 8009430:	bf18      	it	ne
 8009432:	81a3      	strhne	r3, [r4, #12]
 8009434:	bd10      	pop	{r4, pc}

08009436 <__sclose>:
 8009436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943a:	f000 b8a1 	b.w	8009580 <_close_r>

0800943e <__swbuf_r>:
 800943e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009440:	460e      	mov	r6, r1
 8009442:	4614      	mov	r4, r2
 8009444:	4605      	mov	r5, r0
 8009446:	b118      	cbz	r0, 8009450 <__swbuf_r+0x12>
 8009448:	6a03      	ldr	r3, [r0, #32]
 800944a:	b90b      	cbnz	r3, 8009450 <__swbuf_r+0x12>
 800944c:	f7ff fefe 	bl	800924c <__sinit>
 8009450:	69a3      	ldr	r3, [r4, #24]
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	071a      	lsls	r2, r3, #28
 8009458:	d501      	bpl.n	800945e <__swbuf_r+0x20>
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	b943      	cbnz	r3, 8009470 <__swbuf_r+0x32>
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f82b 	bl	80094bc <__swsetup_r>
 8009466:	b118      	cbz	r0, 8009470 <__swbuf_r+0x32>
 8009468:	f04f 37ff 	mov.w	r7, #4294967295
 800946c:	4638      	mov	r0, r7
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	6922      	ldr	r2, [r4, #16]
 8009474:	1a98      	subs	r0, r3, r2
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	b2f6      	uxtb	r6, r6
 800947a:	4283      	cmp	r3, r0
 800947c:	4637      	mov	r7, r6
 800947e:	dc05      	bgt.n	800948c <__swbuf_r+0x4e>
 8009480:	4621      	mov	r1, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f001 fd2c 	bl	800aee0 <_fflush_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	d1ed      	bne.n	8009468 <__swbuf_r+0x2a>
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	3b01      	subs	r3, #1
 8009490:	60a3      	str	r3, [r4, #8]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	701e      	strb	r6, [r3, #0]
 800949a:	6962      	ldr	r2, [r4, #20]
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	429a      	cmp	r2, r3
 80094a0:	d004      	beq.n	80094ac <__swbuf_r+0x6e>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	07db      	lsls	r3, r3, #31
 80094a6:	d5e1      	bpl.n	800946c <__swbuf_r+0x2e>
 80094a8:	2e0a      	cmp	r6, #10
 80094aa:	d1df      	bne.n	800946c <__swbuf_r+0x2e>
 80094ac:	4621      	mov	r1, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f001 fd16 	bl	800aee0 <_fflush_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0d9      	beq.n	800946c <__swbuf_r+0x2e>
 80094b8:	e7d6      	b.n	8009468 <__swbuf_r+0x2a>
	...

080094bc <__swsetup_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4b29      	ldr	r3, [pc, #164]	@ (8009564 <__swsetup_r+0xa8>)
 80094c0:	4605      	mov	r5, r0
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	460c      	mov	r4, r1
 80094c6:	b118      	cbz	r0, 80094d0 <__swsetup_r+0x14>
 80094c8:	6a03      	ldr	r3, [r0, #32]
 80094ca:	b90b      	cbnz	r3, 80094d0 <__swsetup_r+0x14>
 80094cc:	f7ff febe 	bl	800924c <__sinit>
 80094d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d4:	0719      	lsls	r1, r3, #28
 80094d6:	d422      	bmi.n	800951e <__swsetup_r+0x62>
 80094d8:	06da      	lsls	r2, r3, #27
 80094da:	d407      	bmi.n	80094ec <__swsetup_r+0x30>
 80094dc:	2209      	movs	r2, #9
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ea:	e033      	b.n	8009554 <__swsetup_r+0x98>
 80094ec:	0758      	lsls	r0, r3, #29
 80094ee:	d512      	bpl.n	8009516 <__swsetup_r+0x5a>
 80094f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094f2:	b141      	cbz	r1, 8009506 <__swsetup_r+0x4a>
 80094f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094f8:	4299      	cmp	r1, r3
 80094fa:	d002      	beq.n	8009502 <__swsetup_r+0x46>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 fe99 	bl	800a234 <_free_r>
 8009502:	2300      	movs	r3, #0
 8009504:	6363      	str	r3, [r4, #52]	@ 0x34
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	2300      	movs	r3, #0
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0308 	orr.w	r3, r3, #8
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	b94b      	cbnz	r3, 8009536 <__swsetup_r+0x7a>
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952c:	d003      	beq.n	8009536 <__swsetup_r+0x7a>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f001 fd23 	bl	800af7c <__smakebuf_r>
 8009536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800953a:	f013 0201 	ands.w	r2, r3, #1
 800953e:	d00a      	beq.n	8009556 <__swsetup_r+0x9a>
 8009540:	2200      	movs	r2, #0
 8009542:	60a2      	str	r2, [r4, #8]
 8009544:	6962      	ldr	r2, [r4, #20]
 8009546:	4252      	negs	r2, r2
 8009548:	61a2      	str	r2, [r4, #24]
 800954a:	6922      	ldr	r2, [r4, #16]
 800954c:	b942      	cbnz	r2, 8009560 <__swsetup_r+0xa4>
 800954e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009552:	d1c5      	bne.n	80094e0 <__swsetup_r+0x24>
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	0799      	lsls	r1, r3, #30
 8009558:	bf58      	it	pl
 800955a:	6962      	ldrpl	r2, [r4, #20]
 800955c:	60a2      	str	r2, [r4, #8]
 800955e:	e7f4      	b.n	800954a <__swsetup_r+0x8e>
 8009560:	2000      	movs	r0, #0
 8009562:	e7f7      	b.n	8009554 <__swsetup_r+0x98>
 8009564:	2400008c 	.word	0x2400008c

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <_localeconv_r>:
 8009578:	4800      	ldr	r0, [pc, #0]	@ (800957c <_localeconv_r+0x4>)
 800957a:	4770      	bx	lr
 800957c:	240001cc 	.word	0x240001cc

08009580 <_close_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d06      	ldr	r5, [pc, #24]	@ (800959c <_close_r+0x1c>)
 8009584:	2300      	movs	r3, #0
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	f7f9 fda4 	bl	80030d8 <_close>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_close_r+0x1a>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_close_r+0x1a>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	24000c88 	.word	0x24000c88

080095a0 <_lseek_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	@ (80095c0 <_lseek_r+0x20>)
 80095a4:	4604      	mov	r4, r0
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	2200      	movs	r2, #0
 80095ac:	602a      	str	r2, [r5, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f7f9 fd9c 	bl	80030ec <_lseek>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_lseek_r+0x1e>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_lseek_r+0x1e>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	24000c88 	.word	0x24000c88

080095c4 <_read_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d07      	ldr	r5, [pc, #28]	@ (80095e4 <_read_r+0x20>)
 80095c8:	4604      	mov	r4, r0
 80095ca:	4608      	mov	r0, r1
 80095cc:	4611      	mov	r1, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	602a      	str	r2, [r5, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f7f9 fd64 	bl	80030a0 <_read>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_read_r+0x1e>
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_read_r+0x1e>
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	24000c88 	.word	0x24000c88

080095e8 <_write_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d07      	ldr	r5, [pc, #28]	@ (8009608 <_write_r+0x20>)
 80095ec:	4604      	mov	r4, r0
 80095ee:	4608      	mov	r0, r1
 80095f0:	4611      	mov	r1, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f7f9 fd60 	bl	80030bc <_write>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_write_r+0x1e>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_write_r+0x1e>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	24000c88 	.word	0x24000c88

0800960c <__errno>:
 800960c:	4b01      	ldr	r3, [pc, #4]	@ (8009614 <__errno+0x8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	2400008c 	.word	0x2400008c

08009618 <__libc_init_array>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4d0d      	ldr	r5, [pc, #52]	@ (8009650 <__libc_init_array+0x38>)
 800961c:	4c0d      	ldr	r4, [pc, #52]	@ (8009654 <__libc_init_array+0x3c>)
 800961e:	1b64      	subs	r4, r4, r5
 8009620:	10a4      	asrs	r4, r4, #2
 8009622:	2600      	movs	r6, #0
 8009624:	42a6      	cmp	r6, r4
 8009626:	d109      	bne.n	800963c <__libc_init_array+0x24>
 8009628:	4d0b      	ldr	r5, [pc, #44]	@ (8009658 <__libc_init_array+0x40>)
 800962a:	4c0c      	ldr	r4, [pc, #48]	@ (800965c <__libc_init_array+0x44>)
 800962c:	f002 f930 	bl	800b890 <_init>
 8009630:	1b64      	subs	r4, r4, r5
 8009632:	10a4      	asrs	r4, r4, #2
 8009634:	2600      	movs	r6, #0
 8009636:	42a6      	cmp	r6, r4
 8009638:	d105      	bne.n	8009646 <__libc_init_array+0x2e>
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009640:	4798      	blx	r3
 8009642:	3601      	adds	r6, #1
 8009644:	e7ee      	b.n	8009624 <__libc_init_array+0xc>
 8009646:	f855 3b04 	ldr.w	r3, [r5], #4
 800964a:	4798      	blx	r3
 800964c:	3601      	adds	r6, #1
 800964e:	e7f2      	b.n	8009636 <__libc_init_array+0x1e>
 8009650:	08012db0 	.word	0x08012db0
 8009654:	08012db0 	.word	0x08012db0
 8009658:	08012db0 	.word	0x08012db0
 800965c:	08012db4 	.word	0x08012db4

08009660 <__retarget_lock_init_recursive>:
 8009660:	4770      	bx	lr

08009662 <__retarget_lock_acquire_recursive>:
 8009662:	4770      	bx	lr

08009664 <__retarget_lock_release_recursive>:
 8009664:	4770      	bx	lr

08009666 <quorem>:
 8009666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966a:	6903      	ldr	r3, [r0, #16]
 800966c:	690c      	ldr	r4, [r1, #16]
 800966e:	42a3      	cmp	r3, r4
 8009670:	4607      	mov	r7, r0
 8009672:	db7e      	blt.n	8009772 <quorem+0x10c>
 8009674:	3c01      	subs	r4, #1
 8009676:	f101 0814 	add.w	r8, r1, #20
 800967a:	00a3      	lsls	r3, r4, #2
 800967c:	f100 0514 	add.w	r5, r0, #20
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800968c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009690:	3301      	adds	r3, #1
 8009692:	429a      	cmp	r2, r3
 8009694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009698:	fbb2 f6f3 	udiv	r6, r2, r3
 800969c:	d32e      	bcc.n	80096fc <quorem+0x96>
 800969e:	f04f 0a00 	mov.w	sl, #0
 80096a2:	46c4      	mov	ip, r8
 80096a4:	46ae      	mov	lr, r5
 80096a6:	46d3      	mov	fp, sl
 80096a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096ac:	b298      	uxth	r0, r3
 80096ae:	fb06 a000 	mla	r0, r6, r0, sl
 80096b2:	0c02      	lsrs	r2, r0, #16
 80096b4:	0c1b      	lsrs	r3, r3, #16
 80096b6:	fb06 2303 	mla	r3, r6, r3, r2
 80096ba:	f8de 2000 	ldr.w	r2, [lr]
 80096be:	b280      	uxth	r0, r0
 80096c0:	b292      	uxth	r2, r2
 80096c2:	1a12      	subs	r2, r2, r0
 80096c4:	445a      	add	r2, fp
 80096c6:	f8de 0000 	ldr.w	r0, [lr]
 80096ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096d8:	b292      	uxth	r2, r2
 80096da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096de:	45e1      	cmp	r9, ip
 80096e0:	f84e 2b04 	str.w	r2, [lr], #4
 80096e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096e8:	d2de      	bcs.n	80096a8 <quorem+0x42>
 80096ea:	9b00      	ldr	r3, [sp, #0]
 80096ec:	58eb      	ldr	r3, [r5, r3]
 80096ee:	b92b      	cbnz	r3, 80096fc <quorem+0x96>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	3b04      	subs	r3, #4
 80096f4:	429d      	cmp	r5, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	d32f      	bcc.n	800975a <quorem+0xf4>
 80096fa:	613c      	str	r4, [r7, #16]
 80096fc:	4638      	mov	r0, r7
 80096fe:	f001 f90b 	bl	800a918 <__mcmp>
 8009702:	2800      	cmp	r0, #0
 8009704:	db25      	blt.n	8009752 <quorem+0xec>
 8009706:	4629      	mov	r1, r5
 8009708:	2000      	movs	r0, #0
 800970a:	f858 2b04 	ldr.w	r2, [r8], #4
 800970e:	f8d1 c000 	ldr.w	ip, [r1]
 8009712:	fa1f fe82 	uxth.w	lr, r2
 8009716:	fa1f f38c 	uxth.w	r3, ip
 800971a:	eba3 030e 	sub.w	r3, r3, lr
 800971e:	4403      	add	r3, r0
 8009720:	0c12      	lsrs	r2, r2, #16
 8009722:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009726:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800972a:	b29b      	uxth	r3, r3
 800972c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009730:	45c1      	cmp	r9, r8
 8009732:	f841 3b04 	str.w	r3, [r1], #4
 8009736:	ea4f 4022 	mov.w	r0, r2, asr #16
 800973a:	d2e6      	bcs.n	800970a <quorem+0xa4>
 800973c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009744:	b922      	cbnz	r2, 8009750 <quorem+0xea>
 8009746:	3b04      	subs	r3, #4
 8009748:	429d      	cmp	r5, r3
 800974a:	461a      	mov	r2, r3
 800974c:	d30b      	bcc.n	8009766 <quorem+0x100>
 800974e:	613c      	str	r4, [r7, #16]
 8009750:	3601      	adds	r6, #1
 8009752:	4630      	mov	r0, r6
 8009754:	b003      	add	sp, #12
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	3b04      	subs	r3, #4
 800975e:	2a00      	cmp	r2, #0
 8009760:	d1cb      	bne.n	80096fa <quorem+0x94>
 8009762:	3c01      	subs	r4, #1
 8009764:	e7c6      	b.n	80096f4 <quorem+0x8e>
 8009766:	6812      	ldr	r2, [r2, #0]
 8009768:	3b04      	subs	r3, #4
 800976a:	2a00      	cmp	r2, #0
 800976c:	d1ef      	bne.n	800974e <quorem+0xe8>
 800976e:	3c01      	subs	r4, #1
 8009770:	e7ea      	b.n	8009748 <quorem+0xe2>
 8009772:	2000      	movs	r0, #0
 8009774:	e7ee      	b.n	8009754 <quorem+0xee>
	...

08009778 <_dtoa_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ed2d 8b02 	vpush	{d8}
 8009780:	69c7      	ldr	r7, [r0, #28]
 8009782:	b091      	sub	sp, #68	@ 0x44
 8009784:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009788:	ec55 4b10 	vmov	r4, r5, d0
 800978c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800978e:	9107      	str	r1, [sp, #28]
 8009790:	4681      	mov	r9, r0
 8009792:	9209      	str	r2, [sp, #36]	@ 0x24
 8009794:	930d      	str	r3, [sp, #52]	@ 0x34
 8009796:	b97f      	cbnz	r7, 80097b8 <_dtoa_r+0x40>
 8009798:	2010      	movs	r0, #16
 800979a:	f000 fd95 	bl	800a2c8 <malloc>
 800979e:	4602      	mov	r2, r0
 80097a0:	f8c9 001c 	str.w	r0, [r9, #28]
 80097a4:	b920      	cbnz	r0, 80097b0 <_dtoa_r+0x38>
 80097a6:	4ba0      	ldr	r3, [pc, #640]	@ (8009a28 <_dtoa_r+0x2b0>)
 80097a8:	21ef      	movs	r1, #239	@ 0xef
 80097aa:	48a0      	ldr	r0, [pc, #640]	@ (8009a2c <_dtoa_r+0x2b4>)
 80097ac:	f001 fc7c 	bl	800b0a8 <__assert_func>
 80097b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097b4:	6007      	str	r7, [r0, #0]
 80097b6:	60c7      	str	r7, [r0, #12]
 80097b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097bc:	6819      	ldr	r1, [r3, #0]
 80097be:	b159      	cbz	r1, 80097d8 <_dtoa_r+0x60>
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	604a      	str	r2, [r1, #4]
 80097c4:	2301      	movs	r3, #1
 80097c6:	4093      	lsls	r3, r2
 80097c8:	608b      	str	r3, [r1, #8]
 80097ca:	4648      	mov	r0, r9
 80097cc:	f000 fe72 	bl	800a4b4 <_Bfree>
 80097d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	1e2b      	subs	r3, r5, #0
 80097da:	bfbb      	ittet	lt
 80097dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097e0:	9303      	strlt	r3, [sp, #12]
 80097e2:	2300      	movge	r3, #0
 80097e4:	2201      	movlt	r2, #1
 80097e6:	bfac      	ite	ge
 80097e8:	6033      	strge	r3, [r6, #0]
 80097ea:	6032      	strlt	r2, [r6, #0]
 80097ec:	4b90      	ldr	r3, [pc, #576]	@ (8009a30 <_dtoa_r+0x2b8>)
 80097ee:	9e03      	ldr	r6, [sp, #12]
 80097f0:	43b3      	bics	r3, r6
 80097f2:	d110      	bne.n	8009816 <_dtoa_r+0x9e>
 80097f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009800:	4323      	orrs	r3, r4
 8009802:	f000 84e6 	beq.w	800a1d2 <_dtoa_r+0xa5a>
 8009806:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009808:	4f8a      	ldr	r7, [pc, #552]	@ (8009a34 <_dtoa_r+0x2bc>)
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 84e8 	beq.w	800a1e0 <_dtoa_r+0xa68>
 8009810:	1cfb      	adds	r3, r7, #3
 8009812:	f000 bce3 	b.w	800a1dc <_dtoa_r+0xa64>
 8009816:	ed9d 8b02 	vldr	d8, [sp, #8]
 800981a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	d10a      	bne.n	800983a <_dtoa_r+0xc2>
 8009824:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009826:	2301      	movs	r3, #1
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800982c:	b113      	cbz	r3, 8009834 <_dtoa_r+0xbc>
 800982e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009830:	4b81      	ldr	r3, [pc, #516]	@ (8009a38 <_dtoa_r+0x2c0>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	4f81      	ldr	r7, [pc, #516]	@ (8009a3c <_dtoa_r+0x2c4>)
 8009836:	f000 bcd3 	b.w	800a1e0 <_dtoa_r+0xa68>
 800983a:	aa0e      	add	r2, sp, #56	@ 0x38
 800983c:	a90f      	add	r1, sp, #60	@ 0x3c
 800983e:	4648      	mov	r0, r9
 8009840:	eeb0 0b48 	vmov.f64	d0, d8
 8009844:	f001 f918 	bl	800aa78 <__d2b>
 8009848:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800984c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800984e:	9001      	str	r0, [sp, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d045      	beq.n	80098e0 <_dtoa_r+0x168>
 8009854:	eeb0 7b48 	vmov.f64	d7, d8
 8009858:	ee18 1a90 	vmov	r1, s17
 800985c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009860:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009864:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009868:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800986c:	2500      	movs	r5, #0
 800986e:	ee07 1a90 	vmov	s15, r1
 8009872:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009876:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009a10 <_dtoa_r+0x298>
 800987a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800987e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009a18 <_dtoa_r+0x2a0>
 8009882:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009886:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009a20 <_dtoa_r+0x2a8>
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009892:	eeb0 7b46 	vmov.f64	d7, d6
 8009896:	eea4 7b05 	vfma.f64	d7, d4, d5
 800989a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800989e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80098a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a6:	ee16 8a90 	vmov	r8, s13
 80098aa:	d508      	bpl.n	80098be <_dtoa_r+0x146>
 80098ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80098b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80098b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b8:	bf18      	it	ne
 80098ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 80098be:	f1b8 0f16 	cmp.w	r8, #22
 80098c2:	d82b      	bhi.n	800991c <_dtoa_r+0x1a4>
 80098c4:	495e      	ldr	r1, [pc, #376]	@ (8009a40 <_dtoa_r+0x2c8>)
 80098c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80098ca:	ed91 7b00 	vldr	d7, [r1]
 80098ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80098d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d6:	d501      	bpl.n	80098dc <_dtoa_r+0x164>
 80098d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098dc:	2100      	movs	r1, #0
 80098de:	e01e      	b.n	800991e <_dtoa_r+0x1a6>
 80098e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098e2:	4413      	add	r3, r2
 80098e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80098e8:	2920      	cmp	r1, #32
 80098ea:	bfc1      	itttt	gt
 80098ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80098f0:	408e      	lslgt	r6, r1
 80098f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80098f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80098fa:	bfd6      	itet	le
 80098fc:	f1c1 0120 	rsble	r1, r1, #32
 8009900:	4331      	orrgt	r1, r6
 8009902:	fa04 f101 	lslle.w	r1, r4, r1
 8009906:	ee07 1a90 	vmov	s15, r1
 800990a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800990e:	3b01      	subs	r3, #1
 8009910:	ee17 1a90 	vmov	r1, s15
 8009914:	2501      	movs	r5, #1
 8009916:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800991a:	e7a8      	b.n	800986e <_dtoa_r+0xf6>
 800991c:	2101      	movs	r1, #1
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	1e53      	subs	r3, r2, #1
 8009922:	9306      	str	r3, [sp, #24]
 8009924:	bf45      	ittet	mi
 8009926:	f1c2 0301 	rsbmi	r3, r2, #1
 800992a:	9304      	strmi	r3, [sp, #16]
 800992c:	2300      	movpl	r3, #0
 800992e:	2300      	movmi	r3, #0
 8009930:	bf4c      	ite	mi
 8009932:	9306      	strmi	r3, [sp, #24]
 8009934:	9304      	strpl	r3, [sp, #16]
 8009936:	f1b8 0f00 	cmp.w	r8, #0
 800993a:	910c      	str	r1, [sp, #48]	@ 0x30
 800993c:	db18      	blt.n	8009970 <_dtoa_r+0x1f8>
 800993e:	9b06      	ldr	r3, [sp, #24]
 8009940:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009944:	4443      	add	r3, r8
 8009946:	9306      	str	r3, [sp, #24]
 8009948:	2300      	movs	r3, #0
 800994a:	9a07      	ldr	r2, [sp, #28]
 800994c:	2a09      	cmp	r2, #9
 800994e:	d845      	bhi.n	80099dc <_dtoa_r+0x264>
 8009950:	2a05      	cmp	r2, #5
 8009952:	bfc4      	itt	gt
 8009954:	3a04      	subgt	r2, #4
 8009956:	9207      	strgt	r2, [sp, #28]
 8009958:	9a07      	ldr	r2, [sp, #28]
 800995a:	f1a2 0202 	sub.w	r2, r2, #2
 800995e:	bfcc      	ite	gt
 8009960:	2400      	movgt	r4, #0
 8009962:	2401      	movle	r4, #1
 8009964:	2a03      	cmp	r2, #3
 8009966:	d844      	bhi.n	80099f2 <_dtoa_r+0x27a>
 8009968:	e8df f002 	tbb	[pc, r2]
 800996c:	0b173634 	.word	0x0b173634
 8009970:	9b04      	ldr	r3, [sp, #16]
 8009972:	2200      	movs	r2, #0
 8009974:	eba3 0308 	sub.w	r3, r3, r8
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	920a      	str	r2, [sp, #40]	@ 0x28
 800997c:	f1c8 0300 	rsb	r3, r8, #0
 8009980:	e7e3      	b.n	800994a <_dtoa_r+0x1d2>
 8009982:	2201      	movs	r2, #1
 8009984:	9208      	str	r2, [sp, #32]
 8009986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009988:	eb08 0b02 	add.w	fp, r8, r2
 800998c:	f10b 0a01 	add.w	sl, fp, #1
 8009990:	4652      	mov	r2, sl
 8009992:	2a01      	cmp	r2, #1
 8009994:	bfb8      	it	lt
 8009996:	2201      	movlt	r2, #1
 8009998:	e006      	b.n	80099a8 <_dtoa_r+0x230>
 800999a:	2201      	movs	r2, #1
 800999c:	9208      	str	r2, [sp, #32]
 800999e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dd29      	ble.n	80099f8 <_dtoa_r+0x280>
 80099a4:	4693      	mov	fp, r2
 80099a6:	4692      	mov	sl, r2
 80099a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80099ac:	2100      	movs	r1, #0
 80099ae:	2004      	movs	r0, #4
 80099b0:	f100 0614 	add.w	r6, r0, #20
 80099b4:	4296      	cmp	r6, r2
 80099b6:	d926      	bls.n	8009a06 <_dtoa_r+0x28e>
 80099b8:	6079      	str	r1, [r7, #4]
 80099ba:	4648      	mov	r0, r9
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	f000 fd39 	bl	800a434 <_Balloc>
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	4607      	mov	r7, r0
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d13e      	bne.n	8009a48 <_dtoa_r+0x2d0>
 80099ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <_dtoa_r+0x2cc>)
 80099cc:	4602      	mov	r2, r0
 80099ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80099d2:	e6ea      	b.n	80097aa <_dtoa_r+0x32>
 80099d4:	2200      	movs	r2, #0
 80099d6:	e7e1      	b.n	800999c <_dtoa_r+0x224>
 80099d8:	2200      	movs	r2, #0
 80099da:	e7d3      	b.n	8009984 <_dtoa_r+0x20c>
 80099dc:	2401      	movs	r4, #1
 80099de:	2200      	movs	r2, #0
 80099e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80099e4:	f04f 3bff 	mov.w	fp, #4294967295
 80099e8:	2100      	movs	r1, #0
 80099ea:	46da      	mov	sl, fp
 80099ec:	2212      	movs	r2, #18
 80099ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80099f0:	e7da      	b.n	80099a8 <_dtoa_r+0x230>
 80099f2:	2201      	movs	r2, #1
 80099f4:	9208      	str	r2, [sp, #32]
 80099f6:	e7f5      	b.n	80099e4 <_dtoa_r+0x26c>
 80099f8:	f04f 0b01 	mov.w	fp, #1
 80099fc:	46da      	mov	sl, fp
 80099fe:	465a      	mov	r2, fp
 8009a00:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009a04:	e7d0      	b.n	80099a8 <_dtoa_r+0x230>
 8009a06:	3101      	adds	r1, #1
 8009a08:	0040      	lsls	r0, r0, #1
 8009a0a:	e7d1      	b.n	80099b0 <_dtoa_r+0x238>
 8009a0c:	f3af 8000 	nop.w
 8009a10:	636f4361 	.word	0x636f4361
 8009a14:	3fd287a7 	.word	0x3fd287a7
 8009a18:	8b60c8b3 	.word	0x8b60c8b3
 8009a1c:	3fc68a28 	.word	0x3fc68a28
 8009a20:	509f79fb 	.word	0x509f79fb
 8009a24:	3fd34413 	.word	0x3fd34413
 8009a28:	0800ba2c 	.word	0x0800ba2c
 8009a2c:	0800ba43 	.word	0x0800ba43
 8009a30:	7ff00000 	.word	0x7ff00000
 8009a34:	0800ba28 	.word	0x0800ba28
 8009a38:	0800b9fc 	.word	0x0800b9fc
 8009a3c:	0800b9fb 	.word	0x0800b9fb
 8009a40:	08012a98 	.word	0x08012a98
 8009a44:	0800ba9b 	.word	0x0800ba9b
 8009a48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009a4c:	f1ba 0f0e 	cmp.w	sl, #14
 8009a50:	6010      	str	r0, [r2, #0]
 8009a52:	d86e      	bhi.n	8009b32 <_dtoa_r+0x3ba>
 8009a54:	2c00      	cmp	r4, #0
 8009a56:	d06c      	beq.n	8009b32 <_dtoa_r+0x3ba>
 8009a58:	f1b8 0f00 	cmp.w	r8, #0
 8009a5c:	f340 80b4 	ble.w	8009bc8 <_dtoa_r+0x450>
 8009a60:	4ac8      	ldr	r2, [pc, #800]	@ (8009d84 <_dtoa_r+0x60c>)
 8009a62:	f008 010f 	and.w	r1, r8, #15
 8009a66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009a6e:	ed92 7b00 	vldr	d7, [r2]
 8009a72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009a76:	f000 809b 	beq.w	8009bb0 <_dtoa_r+0x438>
 8009a7a:	4ac3      	ldr	r2, [pc, #780]	@ (8009d88 <_dtoa_r+0x610>)
 8009a7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a88:	f001 010f 	and.w	r1, r1, #15
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	48be      	ldr	r0, [pc, #760]	@ (8009d88 <_dtoa_r+0x610>)
 8009a90:	2900      	cmp	r1, #0
 8009a92:	f040 808f 	bne.w	8009bb4 <_dtoa_r+0x43c>
 8009a96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009aa2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	f000 80b3 	beq.w	8009c14 <_dtoa_r+0x49c>
 8009aae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009ab2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aba:	f140 80ab 	bpl.w	8009c14 <_dtoa_r+0x49c>
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	f000 80a7 	beq.w	8009c14 <_dtoa_r+0x49c>
 8009ac6:	f1bb 0f00 	cmp.w	fp, #0
 8009aca:	dd30      	ble.n	8009b2e <_dtoa_r+0x3b6>
 8009acc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ad8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009adc:	9105      	str	r1, [sp, #20]
 8009ade:	3201      	adds	r2, #1
 8009ae0:	465c      	mov	r4, fp
 8009ae2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ae6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009aea:	ee07 2a90 	vmov	s15, r2
 8009aee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009af2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009af6:	ee15 2a90 	vmov	r2, s11
 8009afa:	ec51 0b15 	vmov	r0, r1, d5
 8009afe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009b02:	2c00      	cmp	r4, #0
 8009b04:	f040 808a 	bne.w	8009c1c <_dtoa_r+0x4a4>
 8009b08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009b0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b10:	ec41 0b17 	vmov	d7, r0, r1
 8009b14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	f300 826a 	bgt.w	8009ff4 <_dtoa_r+0x87c>
 8009b20:	eeb1 7b47 	vneg.f64	d7, d7
 8009b24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2c:	d423      	bmi.n	8009b76 <_dtoa_r+0x3fe>
 8009b2e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	f2c0 8129 	blt.w	8009d8c <_dtoa_r+0x614>
 8009b3a:	f1b8 0f0e 	cmp.w	r8, #14
 8009b3e:	f300 8125 	bgt.w	8009d8c <_dtoa_r+0x614>
 8009b42:	4b90      	ldr	r3, [pc, #576]	@ (8009d84 <_dtoa_r+0x60c>)
 8009b44:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b48:	ed93 6b00 	vldr	d6, [r3]
 8009b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f280 80c8 	bge.w	8009ce4 <_dtoa_r+0x56c>
 8009b54:	f1ba 0f00 	cmp.w	sl, #0
 8009b58:	f300 80c4 	bgt.w	8009ce4 <_dtoa_r+0x56c>
 8009b5c:	d10b      	bne.n	8009b76 <_dtoa_r+0x3fe>
 8009b5e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009b62:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	f2c0 823c 	blt.w	8009fee <_dtoa_r+0x876>
 8009b76:	2400      	movs	r4, #0
 8009b78:	4625      	mov	r5, r4
 8009b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	463e      	mov	r6, r7
 8009b82:	f04f 0800 	mov.w	r8, #0
 8009b86:	4621      	mov	r1, r4
 8009b88:	4648      	mov	r0, r9
 8009b8a:	f000 fc93 	bl	800a4b4 <_Bfree>
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	f000 80a2 	beq.w	8009cd8 <_dtoa_r+0x560>
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	d005      	beq.n	8009ba6 <_dtoa_r+0x42e>
 8009b9a:	45a8      	cmp	r8, r5
 8009b9c:	d003      	beq.n	8009ba6 <_dtoa_r+0x42e>
 8009b9e:	4641      	mov	r1, r8
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	f000 fc87 	bl	800a4b4 <_Bfree>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4648      	mov	r0, r9
 8009baa:	f000 fc83 	bl	800a4b4 <_Bfree>
 8009bae:	e093      	b.n	8009cd8 <_dtoa_r+0x560>
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	e76c      	b.n	8009a8e <_dtoa_r+0x316>
 8009bb4:	07cc      	lsls	r4, r1, #31
 8009bb6:	d504      	bpl.n	8009bc2 <_dtoa_r+0x44a>
 8009bb8:	ed90 6b00 	vldr	d6, [r0]
 8009bbc:	3201      	adds	r2, #1
 8009bbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bc2:	1049      	asrs	r1, r1, #1
 8009bc4:	3008      	adds	r0, #8
 8009bc6:	e763      	b.n	8009a90 <_dtoa_r+0x318>
 8009bc8:	d022      	beq.n	8009c10 <_dtoa_r+0x498>
 8009bca:	f1c8 0100 	rsb	r1, r8, #0
 8009bce:	4a6d      	ldr	r2, [pc, #436]	@ (8009d84 <_dtoa_r+0x60c>)
 8009bd0:	f001 000f 	and.w	r0, r1, #15
 8009bd4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009bd8:	ed92 7b00 	vldr	d7, [r2]
 8009bdc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009be4:	4868      	ldr	r0, [pc, #416]	@ (8009d88 <_dtoa_r+0x610>)
 8009be6:	1109      	asrs	r1, r1, #4
 8009be8:	2400      	movs	r4, #0
 8009bea:	2202      	movs	r2, #2
 8009bec:	b929      	cbnz	r1, 8009bfa <_dtoa_r+0x482>
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	f43f af57 	beq.w	8009aa2 <_dtoa_r+0x32a>
 8009bf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bf8:	e753      	b.n	8009aa2 <_dtoa_r+0x32a>
 8009bfa:	07ce      	lsls	r6, r1, #31
 8009bfc:	d505      	bpl.n	8009c0a <_dtoa_r+0x492>
 8009bfe:	ed90 6b00 	vldr	d6, [r0]
 8009c02:	3201      	adds	r2, #1
 8009c04:	2401      	movs	r4, #1
 8009c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c0a:	1049      	asrs	r1, r1, #1
 8009c0c:	3008      	adds	r0, #8
 8009c0e:	e7ed      	b.n	8009bec <_dtoa_r+0x474>
 8009c10:	2202      	movs	r2, #2
 8009c12:	e746      	b.n	8009aa2 <_dtoa_r+0x32a>
 8009c14:	f8cd 8014 	str.w	r8, [sp, #20]
 8009c18:	4654      	mov	r4, sl
 8009c1a:	e762      	b.n	8009ae2 <_dtoa_r+0x36a>
 8009c1c:	4a59      	ldr	r2, [pc, #356]	@ (8009d84 <_dtoa_r+0x60c>)
 8009c1e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009c22:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c26:	9a08      	ldr	r2, [sp, #32]
 8009c28:	ec41 0b17 	vmov	d7, r0, r1
 8009c2c:	443c      	add	r4, r7
 8009c2e:	b34a      	cbz	r2, 8009c84 <_dtoa_r+0x50c>
 8009c30:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009c34:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009c38:	463e      	mov	r6, r7
 8009c3a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c3e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c46:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c4a:	ee14 2a90 	vmov	r2, s9
 8009c4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c52:	3230      	adds	r2, #48	@ 0x30
 8009c54:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c60:	f806 2b01 	strb.w	r2, [r6], #1
 8009c64:	d438      	bmi.n	8009cd8 <_dtoa_r+0x560>
 8009c66:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c72:	d46e      	bmi.n	8009d52 <_dtoa_r+0x5da>
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	f43f af5a 	beq.w	8009b2e <_dtoa_r+0x3b6>
 8009c7a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c82:	e7e0      	b.n	8009c46 <_dtoa_r+0x4ce>
 8009c84:	4621      	mov	r1, r4
 8009c86:	463e      	mov	r6, r7
 8009c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c8c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c94:	ee14 2a90 	vmov	r2, s9
 8009c98:	3230      	adds	r2, #48	@ 0x30
 8009c9a:	f806 2b01 	strb.w	r2, [r6], #1
 8009c9e:	42a6      	cmp	r6, r4
 8009ca0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ca4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ca8:	d119      	bne.n	8009cde <_dtoa_r+0x566>
 8009caa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009cae:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cb2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cba:	dc4a      	bgt.n	8009d52 <_dtoa_r+0x5da>
 8009cbc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009cc0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	f57f af31 	bpl.w	8009b2e <_dtoa_r+0x3b6>
 8009ccc:	460e      	mov	r6, r1
 8009cce:	3901      	subs	r1, #1
 8009cd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cd4:	2b30      	cmp	r3, #48	@ 0x30
 8009cd6:	d0f9      	beq.n	8009ccc <_dtoa_r+0x554>
 8009cd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009cdc:	e027      	b.n	8009d2e <_dtoa_r+0x5b6>
 8009cde:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ce2:	e7d5      	b.n	8009c90 <_dtoa_r+0x518>
 8009ce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ce8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009cec:	463e      	mov	r6, r7
 8009cee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009cf2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009cf6:	ee15 3a10 	vmov	r3, s10
 8009cfa:	3330      	adds	r3, #48	@ 0x30
 8009cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8009d00:	1bf3      	subs	r3, r6, r7
 8009d02:	459a      	cmp	sl, r3
 8009d04:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009d08:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d0c:	d132      	bne.n	8009d74 <_dtoa_r+0x5fc>
 8009d0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	dc18      	bgt.n	8009d4e <_dtoa_r+0x5d6>
 8009d1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d24:	d103      	bne.n	8009d2e <_dtoa_r+0x5b6>
 8009d26:	ee15 3a10 	vmov	r3, s10
 8009d2a:	07db      	lsls	r3, r3, #31
 8009d2c:	d40f      	bmi.n	8009d4e <_dtoa_r+0x5d6>
 8009d2e:	9901      	ldr	r1, [sp, #4]
 8009d30:	4648      	mov	r0, r9
 8009d32:	f000 fbbf 	bl	800a4b4 <_Bfree>
 8009d36:	2300      	movs	r3, #0
 8009d38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d3a:	7033      	strb	r3, [r6, #0]
 8009d3c:	f108 0301 	add.w	r3, r8, #1
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 824b 	beq.w	800a1e0 <_dtoa_r+0xa68>
 8009d4a:	601e      	str	r6, [r3, #0]
 8009d4c:	e248      	b.n	800a1e0 <_dtoa_r+0xa68>
 8009d4e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009d52:	4633      	mov	r3, r6
 8009d54:	461e      	mov	r6, r3
 8009d56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5a:	2a39      	cmp	r2, #57	@ 0x39
 8009d5c:	d106      	bne.n	8009d6c <_dtoa_r+0x5f4>
 8009d5e:	429f      	cmp	r7, r3
 8009d60:	d1f8      	bne.n	8009d54 <_dtoa_r+0x5dc>
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	3201      	adds	r2, #1
 8009d66:	9205      	str	r2, [sp, #20]
 8009d68:	2230      	movs	r2, #48	@ 0x30
 8009d6a:	703a      	strb	r2, [r7, #0]
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	3201      	adds	r2, #1
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e7b1      	b.n	8009cd8 <_dtoa_r+0x560>
 8009d74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d80:	d1b5      	bne.n	8009cee <_dtoa_r+0x576>
 8009d82:	e7d4      	b.n	8009d2e <_dtoa_r+0x5b6>
 8009d84:	08012a98 	.word	0x08012a98
 8009d88:	08012a70 	.word	0x08012a70
 8009d8c:	9908      	ldr	r1, [sp, #32]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	f000 80e9 	beq.w	8009f66 <_dtoa_r+0x7ee>
 8009d94:	9907      	ldr	r1, [sp, #28]
 8009d96:	2901      	cmp	r1, #1
 8009d98:	f300 80cb 	bgt.w	8009f32 <_dtoa_r+0x7ba>
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	f000 80c4 	beq.w	8009f2a <_dtoa_r+0x7b2>
 8009da2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009da6:	9e04      	ldr	r6, [sp, #16]
 8009da8:	461c      	mov	r4, r3
 8009daa:	9305      	str	r3, [sp, #20]
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9b06      	ldr	r3, [sp, #24]
 8009db4:	2101      	movs	r1, #1
 8009db6:	4413      	add	r3, r2
 8009db8:	4648      	mov	r0, r9
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	f000 fc2e 	bl	800a61c <__i2b>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b166      	cbz	r6, 8009de0 <_dtoa_r+0x668>
 8009dc6:	9a06      	ldr	r2, [sp, #24]
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	dd09      	ble.n	8009de0 <_dtoa_r+0x668>
 8009dcc:	42b2      	cmp	r2, r6
 8009dce:	9904      	ldr	r1, [sp, #16]
 8009dd0:	bfa8      	it	ge
 8009dd2:	4632      	movge	r2, r6
 8009dd4:	1a89      	subs	r1, r1, r2
 8009dd6:	9104      	str	r1, [sp, #16]
 8009dd8:	9906      	ldr	r1, [sp, #24]
 8009dda:	1ab6      	subs	r6, r6, r2
 8009ddc:	1a8a      	subs	r2, r1, r2
 8009dde:	9206      	str	r2, [sp, #24]
 8009de0:	b30b      	cbz	r3, 8009e26 <_dtoa_r+0x6ae>
 8009de2:	9a08      	ldr	r2, [sp, #32]
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	f000 80c5 	beq.w	8009f74 <_dtoa_r+0x7fc>
 8009dea:	2c00      	cmp	r4, #0
 8009dec:	f000 80bf 	beq.w	8009f6e <_dtoa_r+0x7f6>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4622      	mov	r2, r4
 8009df4:	4648      	mov	r0, r9
 8009df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009df8:	f000 fcc8 	bl	800a78c <__pow5mult>
 8009dfc:	9a01      	ldr	r2, [sp, #4]
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4605      	mov	r5, r0
 8009e02:	4648      	mov	r0, r9
 8009e04:	f000 fc20 	bl	800a648 <__multiply>
 8009e08:	9901      	ldr	r1, [sp, #4]
 8009e0a:	9005      	str	r0, [sp, #20]
 8009e0c:	4648      	mov	r0, r9
 8009e0e:	f000 fb51 	bl	800a4b4 <_Bfree>
 8009e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e14:	1b1b      	subs	r3, r3, r4
 8009e16:	f000 80b0 	beq.w	8009f7a <_dtoa_r+0x802>
 8009e1a:	9905      	ldr	r1, [sp, #20]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4648      	mov	r0, r9
 8009e20:	f000 fcb4 	bl	800a78c <__pow5mult>
 8009e24:	9001      	str	r0, [sp, #4]
 8009e26:	2101      	movs	r1, #1
 8009e28:	4648      	mov	r0, r9
 8009e2a:	f000 fbf7 	bl	800a61c <__i2b>
 8009e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e30:	4604      	mov	r4, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 81da 	beq.w	800a1ec <_dtoa_r+0xa74>
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	f000 fca5 	bl	800a78c <__pow5mult>
 8009e42:	9b07      	ldr	r3, [sp, #28]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	4604      	mov	r4, r0
 8009e48:	f300 80a0 	bgt.w	8009f8c <_dtoa_r+0x814>
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 8096 	bne.w	8009f80 <_dtoa_r+0x808>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	f040 8092 	bne.w	8009f84 <_dtoa_r+0x80c>
 8009e60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e64:	0d12      	lsrs	r2, r2, #20
 8009e66:	0512      	lsls	r2, r2, #20
 8009e68:	2a00      	cmp	r2, #0
 8009e6a:	f000 808d 	beq.w	8009f88 <_dtoa_r+0x810>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	3301      	adds	r3, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9306      	str	r3, [sp, #24]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 81b9 	beq.w	800a1f8 <_dtoa_r+0xa80>
 8009e86:	6922      	ldr	r2, [r4, #16]
 8009e88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e8c:	6910      	ldr	r0, [r2, #16]
 8009e8e:	f000 fb79 	bl	800a584 <__hi0bits>
 8009e92:	f1c0 0020 	rsb	r0, r0, #32
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	4418      	add	r0, r3
 8009e9a:	f010 001f 	ands.w	r0, r0, #31
 8009e9e:	f000 8081 	beq.w	8009fa4 <_dtoa_r+0x82c>
 8009ea2:	f1c0 0220 	rsb	r2, r0, #32
 8009ea6:	2a04      	cmp	r2, #4
 8009ea8:	dd73      	ble.n	8009f92 <_dtoa_r+0x81a>
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	f1c0 001c 	rsb	r0, r0, #28
 8009eb0:	4403      	add	r3, r0
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	9b06      	ldr	r3, [sp, #24]
 8009eb6:	4406      	add	r6, r0
 8009eb8:	4403      	add	r3, r0
 8009eba:	9306      	str	r3, [sp, #24]
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd05      	ble.n	8009ece <_dtoa_r+0x756>
 8009ec2:	9901      	ldr	r1, [sp, #4]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f000 fcba 	bl	800a840 <__lshift>
 8009ecc:	9001      	str	r0, [sp, #4]
 8009ece:	9b06      	ldr	r3, [sp, #24]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	dd05      	ble.n	8009ee0 <_dtoa_r+0x768>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	4648      	mov	r0, r9
 8009eda:	f000 fcb1 	bl	800a840 <__lshift>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d060      	beq.n	8009fa8 <_dtoa_r+0x830>
 8009ee6:	9801      	ldr	r0, [sp, #4]
 8009ee8:	4621      	mov	r1, r4
 8009eea:	f000 fd15 	bl	800a918 <__mcmp>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	da5a      	bge.n	8009fa8 <_dtoa_r+0x830>
 8009ef2:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	2300      	movs	r3, #0
 8009efc:	220a      	movs	r2, #10
 8009efe:	4648      	mov	r0, r9
 8009f00:	f000 fafa 	bl	800a4f8 <__multadd>
 8009f04:	9b08      	ldr	r3, [sp, #32]
 8009f06:	9001      	str	r0, [sp, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8177 	beq.w	800a1fc <_dtoa_r+0xa84>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	2300      	movs	r3, #0
 8009f12:	220a      	movs	r2, #10
 8009f14:	4648      	mov	r0, r9
 8009f16:	f000 faef 	bl	800a4f8 <__multadd>
 8009f1a:	f1bb 0f00 	cmp.w	fp, #0
 8009f1e:	4605      	mov	r5, r0
 8009f20:	dc6e      	bgt.n	800a000 <_dtoa_r+0x888>
 8009f22:	9b07      	ldr	r3, [sp, #28]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	dc48      	bgt.n	8009fba <_dtoa_r+0x842>
 8009f28:	e06a      	b.n	800a000 <_dtoa_r+0x888>
 8009f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009f30:	e739      	b.n	8009da6 <_dtoa_r+0x62e>
 8009f32:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	db07      	blt.n	8009f4a <_dtoa_r+0x7d2>
 8009f3a:	f1ba 0f00 	cmp.w	sl, #0
 8009f3e:	eba3 0404 	sub.w	r4, r3, r4
 8009f42:	db0b      	blt.n	8009f5c <_dtoa_r+0x7e4>
 8009f44:	9e04      	ldr	r6, [sp, #16]
 8009f46:	4652      	mov	r2, sl
 8009f48:	e72f      	b.n	8009daa <_dtoa_r+0x632>
 8009f4a:	1ae2      	subs	r2, r4, r3
 8009f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4e:	9e04      	ldr	r6, [sp, #16]
 8009f50:	4413      	add	r3, r2
 8009f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f54:	4652      	mov	r2, sl
 8009f56:	4623      	mov	r3, r4
 8009f58:	2400      	movs	r4, #0
 8009f5a:	e726      	b.n	8009daa <_dtoa_r+0x632>
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	eba2 060a 	sub.w	r6, r2, sl
 8009f62:	2200      	movs	r2, #0
 8009f64:	e721      	b.n	8009daa <_dtoa_r+0x632>
 8009f66:	9e04      	ldr	r6, [sp, #16]
 8009f68:	9d08      	ldr	r5, [sp, #32]
 8009f6a:	461c      	mov	r4, r3
 8009f6c:	e72a      	b.n	8009dc4 <_dtoa_r+0x64c>
 8009f6e:	9a01      	ldr	r2, [sp, #4]
 8009f70:	9205      	str	r2, [sp, #20]
 8009f72:	e752      	b.n	8009e1a <_dtoa_r+0x6a2>
 8009f74:	9901      	ldr	r1, [sp, #4]
 8009f76:	461a      	mov	r2, r3
 8009f78:	e751      	b.n	8009e1e <_dtoa_r+0x6a6>
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	e752      	b.n	8009e26 <_dtoa_r+0x6ae>
 8009f80:	2300      	movs	r3, #0
 8009f82:	e77b      	b.n	8009e7c <_dtoa_r+0x704>
 8009f84:	9b02      	ldr	r3, [sp, #8]
 8009f86:	e779      	b.n	8009e7c <_dtoa_r+0x704>
 8009f88:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f8a:	e778      	b.n	8009e7e <_dtoa_r+0x706>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f90:	e779      	b.n	8009e86 <_dtoa_r+0x70e>
 8009f92:	d093      	beq.n	8009ebc <_dtoa_r+0x744>
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	321c      	adds	r2, #28
 8009f98:	4413      	add	r3, r2
 8009f9a:	9304      	str	r3, [sp, #16]
 8009f9c:	9b06      	ldr	r3, [sp, #24]
 8009f9e:	4416      	add	r6, r2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	e78a      	b.n	8009eba <_dtoa_r+0x742>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	e7f5      	b.n	8009f94 <_dtoa_r+0x81c>
 8009fa8:	f1ba 0f00 	cmp.w	sl, #0
 8009fac:	f8cd 8014 	str.w	r8, [sp, #20]
 8009fb0:	46d3      	mov	fp, sl
 8009fb2:	dc21      	bgt.n	8009ff8 <_dtoa_r+0x880>
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	dd1e      	ble.n	8009ff8 <_dtoa_r+0x880>
 8009fba:	f1bb 0f00 	cmp.w	fp, #0
 8009fbe:	f47f addc 	bne.w	8009b7a <_dtoa_r+0x402>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	4648      	mov	r0, r9
 8009fca:	f000 fa95 	bl	800a4f8 <__multadd>
 8009fce:	4601      	mov	r1, r0
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	9801      	ldr	r0, [sp, #4]
 8009fd4:	f000 fca0 	bl	800a918 <__mcmp>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f77f adce 	ble.w	8009b7a <_dtoa_r+0x402>
 8009fde:	463e      	mov	r6, r7
 8009fe0:	2331      	movs	r3, #49	@ 0x31
 8009fe2:	f806 3b01 	strb.w	r3, [r6], #1
 8009fe6:	9b05      	ldr	r3, [sp, #20]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	e5c9      	b.n	8009b82 <_dtoa_r+0x40a>
 8009fee:	f8cd 8014 	str.w	r8, [sp, #20]
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	4625      	mov	r5, r4
 8009ff6:	e7f2      	b.n	8009fde <_dtoa_r+0x866>
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 8102 	beq.w	800a204 <_dtoa_r+0xa8c>
 800a000:	2e00      	cmp	r6, #0
 800a002:	dd05      	ble.n	800a010 <_dtoa_r+0x898>
 800a004:	4629      	mov	r1, r5
 800a006:	4632      	mov	r2, r6
 800a008:	4648      	mov	r0, r9
 800a00a:	f000 fc19 	bl	800a840 <__lshift>
 800a00e:	4605      	mov	r5, r0
 800a010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d058      	beq.n	800a0c8 <_dtoa_r+0x950>
 800a016:	6869      	ldr	r1, [r5, #4]
 800a018:	4648      	mov	r0, r9
 800a01a:	f000 fa0b 	bl	800a434 <_Balloc>
 800a01e:	4606      	mov	r6, r0
 800a020:	b928      	cbnz	r0, 800a02e <_dtoa_r+0x8b6>
 800a022:	4b82      	ldr	r3, [pc, #520]	@ (800a22c <_dtoa_r+0xab4>)
 800a024:	4602      	mov	r2, r0
 800a026:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a02a:	f7ff bbbe 	b.w	80097aa <_dtoa_r+0x32>
 800a02e:	692a      	ldr	r2, [r5, #16]
 800a030:	3202      	adds	r2, #2
 800a032:	0092      	lsls	r2, r2, #2
 800a034:	f105 010c 	add.w	r1, r5, #12
 800a038:	300c      	adds	r0, #12
 800a03a:	f001 f827 	bl	800b08c <memcpy>
 800a03e:	2201      	movs	r2, #1
 800a040:	4631      	mov	r1, r6
 800a042:	4648      	mov	r0, r9
 800a044:	f000 fbfc 	bl	800a840 <__lshift>
 800a048:	1c7b      	adds	r3, r7, #1
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	eb07 030b 	add.w	r3, r7, fp
 800a050:	9309      	str	r3, [sp, #36]	@ 0x24
 800a052:	9b02      	ldr	r3, [sp, #8]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	46a8      	mov	r8, r5
 800a05a:	9308      	str	r3, [sp, #32]
 800a05c:	4605      	mov	r5, r0
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	4621      	mov	r1, r4
 800a064:	f103 3bff 	add.w	fp, r3, #4294967295
 800a068:	f7ff fafd 	bl	8009666 <quorem>
 800a06c:	4641      	mov	r1, r8
 800a06e:	9002      	str	r0, [sp, #8]
 800a070:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a074:	9801      	ldr	r0, [sp, #4]
 800a076:	f000 fc4f 	bl	800a918 <__mcmp>
 800a07a:	462a      	mov	r2, r5
 800a07c:	9006      	str	r0, [sp, #24]
 800a07e:	4621      	mov	r1, r4
 800a080:	4648      	mov	r0, r9
 800a082:	f000 fc65 	bl	800a950 <__mdiff>
 800a086:	68c2      	ldr	r2, [r0, #12]
 800a088:	4606      	mov	r6, r0
 800a08a:	b9fa      	cbnz	r2, 800a0cc <_dtoa_r+0x954>
 800a08c:	4601      	mov	r1, r0
 800a08e:	9801      	ldr	r0, [sp, #4]
 800a090:	f000 fc42 	bl	800a918 <__mcmp>
 800a094:	4602      	mov	r2, r0
 800a096:	4631      	mov	r1, r6
 800a098:	4648      	mov	r0, r9
 800a09a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a09c:	f000 fa0a 	bl	800a4b4 <_Bfree>
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0a4:	9e04      	ldr	r6, [sp, #16]
 800a0a6:	ea42 0103 	orr.w	r1, r2, r3
 800a0aa:	9b08      	ldr	r3, [sp, #32]
 800a0ac:	4319      	orrs	r1, r3
 800a0ae:	d10f      	bne.n	800a0d0 <_dtoa_r+0x958>
 800a0b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0b4:	d028      	beq.n	800a108 <_dtoa_r+0x990>
 800a0b6:	9b06      	ldr	r3, [sp, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	dd02      	ble.n	800a0c2 <_dtoa_r+0x94a>
 800a0bc:	9b02      	ldr	r3, [sp, #8]
 800a0be:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a0c2:	f88b a000 	strb.w	sl, [fp]
 800a0c6:	e55e      	b.n	8009b86 <_dtoa_r+0x40e>
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	e7bd      	b.n	800a048 <_dtoa_r+0x8d0>
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	e7e2      	b.n	800a096 <_dtoa_r+0x91e>
 800a0d0:	9b06      	ldr	r3, [sp, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	db04      	blt.n	800a0e0 <_dtoa_r+0x968>
 800a0d6:	9907      	ldr	r1, [sp, #28]
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	9908      	ldr	r1, [sp, #32]
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	d120      	bne.n	800a122 <_dtoa_r+0x9aa>
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	ddee      	ble.n	800a0c2 <_dtoa_r+0x94a>
 800a0e4:	9901      	ldr	r1, [sp, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4648      	mov	r0, r9
 800a0ea:	f000 fba9 	bl	800a840 <__lshift>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	9001      	str	r0, [sp, #4]
 800a0f2:	f000 fc11 	bl	800a918 <__mcmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	dc03      	bgt.n	800a102 <_dtoa_r+0x98a>
 800a0fa:	d1e2      	bne.n	800a0c2 <_dtoa_r+0x94a>
 800a0fc:	f01a 0f01 	tst.w	sl, #1
 800a100:	d0df      	beq.n	800a0c2 <_dtoa_r+0x94a>
 800a102:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a106:	d1d9      	bne.n	800a0bc <_dtoa_r+0x944>
 800a108:	2339      	movs	r3, #57	@ 0x39
 800a10a:	f88b 3000 	strb.w	r3, [fp]
 800a10e:	4633      	mov	r3, r6
 800a110:	461e      	mov	r6, r3
 800a112:	3b01      	subs	r3, #1
 800a114:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a118:	2a39      	cmp	r2, #57	@ 0x39
 800a11a:	d052      	beq.n	800a1c2 <_dtoa_r+0xa4a>
 800a11c:	3201      	adds	r2, #1
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	e531      	b.n	8009b86 <_dtoa_r+0x40e>
 800a122:	2a00      	cmp	r2, #0
 800a124:	dd07      	ble.n	800a136 <_dtoa_r+0x9be>
 800a126:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a12a:	d0ed      	beq.n	800a108 <_dtoa_r+0x990>
 800a12c:	f10a 0301 	add.w	r3, sl, #1
 800a130:	f88b 3000 	strb.w	r3, [fp]
 800a134:	e527      	b.n	8009b86 <_dtoa_r+0x40e>
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a13a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a13e:	4293      	cmp	r3, r2
 800a140:	d029      	beq.n	800a196 <_dtoa_r+0xa1e>
 800a142:	9901      	ldr	r1, [sp, #4]
 800a144:	2300      	movs	r3, #0
 800a146:	220a      	movs	r2, #10
 800a148:	4648      	mov	r0, r9
 800a14a:	f000 f9d5 	bl	800a4f8 <__multadd>
 800a14e:	45a8      	cmp	r8, r5
 800a150:	9001      	str	r0, [sp, #4]
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	f04f 020a 	mov.w	r2, #10
 800a15a:	4641      	mov	r1, r8
 800a15c:	4648      	mov	r0, r9
 800a15e:	d107      	bne.n	800a170 <_dtoa_r+0x9f8>
 800a160:	f000 f9ca 	bl	800a4f8 <__multadd>
 800a164:	4680      	mov	r8, r0
 800a166:	4605      	mov	r5, r0
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	3301      	adds	r3, #1
 800a16c:	9304      	str	r3, [sp, #16]
 800a16e:	e776      	b.n	800a05e <_dtoa_r+0x8e6>
 800a170:	f000 f9c2 	bl	800a4f8 <__multadd>
 800a174:	4629      	mov	r1, r5
 800a176:	4680      	mov	r8, r0
 800a178:	2300      	movs	r3, #0
 800a17a:	220a      	movs	r2, #10
 800a17c:	4648      	mov	r0, r9
 800a17e:	f000 f9bb 	bl	800a4f8 <__multadd>
 800a182:	4605      	mov	r5, r0
 800a184:	e7f0      	b.n	800a168 <_dtoa_r+0x9f0>
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	bfcc      	ite	gt
 800a18c:	465e      	movgt	r6, fp
 800a18e:	2601      	movle	r6, #1
 800a190:	443e      	add	r6, r7
 800a192:	f04f 0800 	mov.w	r8, #0
 800a196:	9901      	ldr	r1, [sp, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	4648      	mov	r0, r9
 800a19c:	f000 fb50 	bl	800a840 <__lshift>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	9001      	str	r0, [sp, #4]
 800a1a4:	f000 fbb8 	bl	800a918 <__mcmp>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	dcb0      	bgt.n	800a10e <_dtoa_r+0x996>
 800a1ac:	d102      	bne.n	800a1b4 <_dtoa_r+0xa3c>
 800a1ae:	f01a 0f01 	tst.w	sl, #1
 800a1b2:	d1ac      	bne.n	800a10e <_dtoa_r+0x996>
 800a1b4:	4633      	mov	r3, r6
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1bc:	2a30      	cmp	r2, #48	@ 0x30
 800a1be:	d0fa      	beq.n	800a1b6 <_dtoa_r+0xa3e>
 800a1c0:	e4e1      	b.n	8009b86 <_dtoa_r+0x40e>
 800a1c2:	429f      	cmp	r7, r3
 800a1c4:	d1a4      	bne.n	800a110 <_dtoa_r+0x998>
 800a1c6:	9b05      	ldr	r3, [sp, #20]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	2331      	movs	r3, #49	@ 0x31
 800a1ce:	703b      	strb	r3, [r7, #0]
 800a1d0:	e4d9      	b.n	8009b86 <_dtoa_r+0x40e>
 800a1d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1d4:	4f16      	ldr	r7, [pc, #88]	@ (800a230 <_dtoa_r+0xab8>)
 800a1d6:	b11b      	cbz	r3, 800a1e0 <_dtoa_r+0xa68>
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	b011      	add	sp, #68	@ 0x44
 800a1e4:	ecbd 8b02 	vpop	{d8}
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	f77f ae2c 	ble.w	8009e4c <_dtoa_r+0x6d4>
 800a1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	e64c      	b.n	8009e96 <_dtoa_r+0x71e>
 800a1fc:	f1bb 0f00 	cmp.w	fp, #0
 800a200:	f77f aed8 	ble.w	8009fb4 <_dtoa_r+0x83c>
 800a204:	463e      	mov	r6, r7
 800a206:	9801      	ldr	r0, [sp, #4]
 800a208:	4621      	mov	r1, r4
 800a20a:	f7ff fa2c 	bl	8009666 <quorem>
 800a20e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a212:	f806 ab01 	strb.w	sl, [r6], #1
 800a216:	1bf2      	subs	r2, r6, r7
 800a218:	4593      	cmp	fp, r2
 800a21a:	ddb4      	ble.n	800a186 <_dtoa_r+0xa0e>
 800a21c:	9901      	ldr	r1, [sp, #4]
 800a21e:	2300      	movs	r3, #0
 800a220:	220a      	movs	r2, #10
 800a222:	4648      	mov	r0, r9
 800a224:	f000 f968 	bl	800a4f8 <__multadd>
 800a228:	9001      	str	r0, [sp, #4]
 800a22a:	e7ec      	b.n	800a206 <_dtoa_r+0xa8e>
 800a22c:	0800ba9b 	.word	0x0800ba9b
 800a230:	0800ba1f 	.word	0x0800ba1f

0800a234 <_free_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4605      	mov	r5, r0
 800a238:	2900      	cmp	r1, #0
 800a23a:	d041      	beq.n	800a2c0 <_free_r+0x8c>
 800a23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a240:	1f0c      	subs	r4, r1, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfb8      	it	lt
 800a246:	18e4      	addlt	r4, r4, r3
 800a248:	f000 f8e8 	bl	800a41c <__malloc_lock>
 800a24c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2c4 <_free_r+0x90>)
 800a24e:	6813      	ldr	r3, [r2, #0]
 800a250:	b933      	cbnz	r3, 800a260 <_free_r+0x2c>
 800a252:	6063      	str	r3, [r4, #4]
 800a254:	6014      	str	r4, [r2, #0]
 800a256:	4628      	mov	r0, r5
 800a258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a25c:	f000 b8e4 	b.w	800a428 <__malloc_unlock>
 800a260:	42a3      	cmp	r3, r4
 800a262:	d908      	bls.n	800a276 <_free_r+0x42>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	1821      	adds	r1, r4, r0
 800a268:	428b      	cmp	r3, r1
 800a26a:	bf01      	itttt	eq
 800a26c:	6819      	ldreq	r1, [r3, #0]
 800a26e:	685b      	ldreq	r3, [r3, #4]
 800a270:	1809      	addeq	r1, r1, r0
 800a272:	6021      	streq	r1, [r4, #0]
 800a274:	e7ed      	b.n	800a252 <_free_r+0x1e>
 800a276:	461a      	mov	r2, r3
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	b10b      	cbz	r3, 800a280 <_free_r+0x4c>
 800a27c:	42a3      	cmp	r3, r4
 800a27e:	d9fa      	bls.n	800a276 <_free_r+0x42>
 800a280:	6811      	ldr	r1, [r2, #0]
 800a282:	1850      	adds	r0, r2, r1
 800a284:	42a0      	cmp	r0, r4
 800a286:	d10b      	bne.n	800a2a0 <_free_r+0x6c>
 800a288:	6820      	ldr	r0, [r4, #0]
 800a28a:	4401      	add	r1, r0
 800a28c:	1850      	adds	r0, r2, r1
 800a28e:	4283      	cmp	r3, r0
 800a290:	6011      	str	r1, [r2, #0]
 800a292:	d1e0      	bne.n	800a256 <_free_r+0x22>
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	6053      	str	r3, [r2, #4]
 800a29a:	4408      	add	r0, r1
 800a29c:	6010      	str	r0, [r2, #0]
 800a29e:	e7da      	b.n	800a256 <_free_r+0x22>
 800a2a0:	d902      	bls.n	800a2a8 <_free_r+0x74>
 800a2a2:	230c      	movs	r3, #12
 800a2a4:	602b      	str	r3, [r5, #0]
 800a2a6:	e7d6      	b.n	800a256 <_free_r+0x22>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	1821      	adds	r1, r4, r0
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf04      	itt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	bf04      	itt	eq
 800a2b8:	1809      	addeq	r1, r1, r0
 800a2ba:	6021      	streq	r1, [r4, #0]
 800a2bc:	6054      	str	r4, [r2, #4]
 800a2be:	e7ca      	b.n	800a256 <_free_r+0x22>
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	24000c94 	.word	0x24000c94

0800a2c8 <malloc>:
 800a2c8:	4b02      	ldr	r3, [pc, #8]	@ (800a2d4 <malloc+0xc>)
 800a2ca:	4601      	mov	r1, r0
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	f000 b825 	b.w	800a31c <_malloc_r>
 800a2d2:	bf00      	nop
 800a2d4:	2400008c 	.word	0x2400008c

0800a2d8 <sbrk_aligned>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	4e0f      	ldr	r6, [pc, #60]	@ (800a318 <sbrk_aligned+0x40>)
 800a2dc:	460c      	mov	r4, r1
 800a2de:	6831      	ldr	r1, [r6, #0]
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	b911      	cbnz	r1, 800a2ea <sbrk_aligned+0x12>
 800a2e4:	f000 fec2 	bl	800b06c <_sbrk_r>
 800a2e8:	6030      	str	r0, [r6, #0]
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f000 febd 	bl	800b06c <_sbrk_r>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	d103      	bne.n	800a2fe <sbrk_aligned+0x26>
 800a2f6:	f04f 34ff 	mov.w	r4, #4294967295
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	1cc4      	adds	r4, r0, #3
 800a300:	f024 0403 	bic.w	r4, r4, #3
 800a304:	42a0      	cmp	r0, r4
 800a306:	d0f8      	beq.n	800a2fa <sbrk_aligned+0x22>
 800a308:	1a21      	subs	r1, r4, r0
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 feae 	bl	800b06c <_sbrk_r>
 800a310:	3001      	adds	r0, #1
 800a312:	d1f2      	bne.n	800a2fa <sbrk_aligned+0x22>
 800a314:	e7ef      	b.n	800a2f6 <sbrk_aligned+0x1e>
 800a316:	bf00      	nop
 800a318:	24000c90 	.word	0x24000c90

0800a31c <_malloc_r>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	1ccd      	adds	r5, r1, #3
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	2d00      	cmp	r5, #0
 800a330:	4606      	mov	r6, r0
 800a332:	db01      	blt.n	800a338 <_malloc_r+0x1c>
 800a334:	42a9      	cmp	r1, r5
 800a336:	d904      	bls.n	800a342 <_malloc_r+0x26>
 800a338:	230c      	movs	r3, #12
 800a33a:	6033      	str	r3, [r6, #0]
 800a33c:	2000      	movs	r0, #0
 800a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a418 <_malloc_r+0xfc>
 800a346:	f000 f869 	bl	800a41c <__malloc_lock>
 800a34a:	f8d8 3000 	ldr.w	r3, [r8]
 800a34e:	461c      	mov	r4, r3
 800a350:	bb44      	cbnz	r4, 800a3a4 <_malloc_r+0x88>
 800a352:	4629      	mov	r1, r5
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff ffbf 	bl	800a2d8 <sbrk_aligned>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	4604      	mov	r4, r0
 800a35e:	d158      	bne.n	800a412 <_malloc_r+0xf6>
 800a360:	f8d8 4000 	ldr.w	r4, [r8]
 800a364:	4627      	mov	r7, r4
 800a366:	2f00      	cmp	r7, #0
 800a368:	d143      	bne.n	800a3f2 <_malloc_r+0xd6>
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d04b      	beq.n	800a406 <_malloc_r+0xea>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	4639      	mov	r1, r7
 800a372:	4630      	mov	r0, r6
 800a374:	eb04 0903 	add.w	r9, r4, r3
 800a378:	f000 fe78 	bl	800b06c <_sbrk_r>
 800a37c:	4581      	cmp	r9, r0
 800a37e:	d142      	bne.n	800a406 <_malloc_r+0xea>
 800a380:	6821      	ldr	r1, [r4, #0]
 800a382:	1a6d      	subs	r5, r5, r1
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ffa6 	bl	800a2d8 <sbrk_aligned>
 800a38c:	3001      	adds	r0, #1
 800a38e:	d03a      	beq.n	800a406 <_malloc_r+0xea>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	442b      	add	r3, r5
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	f8d8 3000 	ldr.w	r3, [r8]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	bb62      	cbnz	r2, 800a3f8 <_malloc_r+0xdc>
 800a39e:	f8c8 7000 	str.w	r7, [r8]
 800a3a2:	e00f      	b.n	800a3c4 <_malloc_r+0xa8>
 800a3a4:	6822      	ldr	r2, [r4, #0]
 800a3a6:	1b52      	subs	r2, r2, r5
 800a3a8:	d420      	bmi.n	800a3ec <_malloc_r+0xd0>
 800a3aa:	2a0b      	cmp	r2, #11
 800a3ac:	d917      	bls.n	800a3de <_malloc_r+0xc2>
 800a3ae:	1961      	adds	r1, r4, r5
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	6025      	str	r5, [r4, #0]
 800a3b4:	bf18      	it	ne
 800a3b6:	6059      	strne	r1, [r3, #4]
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	bf08      	it	eq
 800a3bc:	f8c8 1000 	streq.w	r1, [r8]
 800a3c0:	5162      	str	r2, [r4, r5]
 800a3c2:	604b      	str	r3, [r1, #4]
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f000 f82f 	bl	800a428 <__malloc_unlock>
 800a3ca:	f104 000b 	add.w	r0, r4, #11
 800a3ce:	1d23      	adds	r3, r4, #4
 800a3d0:	f020 0007 	bic.w	r0, r0, #7
 800a3d4:	1ac2      	subs	r2, r0, r3
 800a3d6:	bf1c      	itt	ne
 800a3d8:	1a1b      	subne	r3, r3, r0
 800a3da:	50a3      	strne	r3, [r4, r2]
 800a3dc:	e7af      	b.n	800a33e <_malloc_r+0x22>
 800a3de:	6862      	ldr	r2, [r4, #4]
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	bf0c      	ite	eq
 800a3e4:	f8c8 2000 	streq.w	r2, [r8]
 800a3e8:	605a      	strne	r2, [r3, #4]
 800a3ea:	e7eb      	b.n	800a3c4 <_malloc_r+0xa8>
 800a3ec:	4623      	mov	r3, r4
 800a3ee:	6864      	ldr	r4, [r4, #4]
 800a3f0:	e7ae      	b.n	800a350 <_malloc_r+0x34>
 800a3f2:	463c      	mov	r4, r7
 800a3f4:	687f      	ldr	r7, [r7, #4]
 800a3f6:	e7b6      	b.n	800a366 <_malloc_r+0x4a>
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	d1fb      	bne.n	800a3f8 <_malloc_r+0xdc>
 800a400:	2300      	movs	r3, #0
 800a402:	6053      	str	r3, [r2, #4]
 800a404:	e7de      	b.n	800a3c4 <_malloc_r+0xa8>
 800a406:	230c      	movs	r3, #12
 800a408:	6033      	str	r3, [r6, #0]
 800a40a:	4630      	mov	r0, r6
 800a40c:	f000 f80c 	bl	800a428 <__malloc_unlock>
 800a410:	e794      	b.n	800a33c <_malloc_r+0x20>
 800a412:	6005      	str	r5, [r0, #0]
 800a414:	e7d6      	b.n	800a3c4 <_malloc_r+0xa8>
 800a416:	bf00      	nop
 800a418:	24000c94 	.word	0x24000c94

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	@ (800a424 <__malloc_lock+0x8>)
 800a41e:	f7ff b920 	b.w	8009662 <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	24000c8c 	.word	0x24000c8c

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	@ (800a430 <__malloc_unlock+0x8>)
 800a42a:	f7ff b91b 	b.w	8009664 <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	24000c8c 	.word	0x24000c8c

0800a434 <_Balloc>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	69c6      	ldr	r6, [r0, #28]
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Balloc+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7ff ff42 	bl	800a2c8 <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	61e0      	str	r0, [r4, #28]
 800a448:	b920      	cbnz	r0, 800a454 <_Balloc+0x20>
 800a44a:	4b18      	ldr	r3, [pc, #96]	@ (800a4ac <_Balloc+0x78>)
 800a44c:	4818      	ldr	r0, [pc, #96]	@ (800a4b0 <_Balloc+0x7c>)
 800a44e:	216b      	movs	r1, #107	@ 0x6b
 800a450:	f000 fe2a 	bl	800b0a8 <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	69e6      	ldr	r6, [r4, #28]
 800a45e:	68f3      	ldr	r3, [r6, #12]
 800a460:	b183      	cbz	r3, 800a484 <_Balloc+0x50>
 800a462:	69e3      	ldr	r3, [r4, #28]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a46a:	b9b8      	cbnz	r0, 800a49c <_Balloc+0x68>
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f605 	lsl.w	r6, r1, r5
 800a472:	1d72      	adds	r2, r6, #5
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fe34 	bl	800b0e4 <_calloc_r>
 800a47c:	b160      	cbz	r0, 800a498 <_Balloc+0x64>
 800a47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a482:	e00e      	b.n	800a4a2 <_Balloc+0x6e>
 800a484:	2221      	movs	r2, #33	@ 0x21
 800a486:	2104      	movs	r1, #4
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fe2b 	bl	800b0e4 <_calloc_r>
 800a48e:	69e3      	ldr	r3, [r4, #28]
 800a490:	60f0      	str	r0, [r6, #12]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e4      	bne.n	800a462 <_Balloc+0x2e>
 800a498:	2000      	movs	r0, #0
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	6802      	ldr	r2, [r0, #0]
 800a49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4a8:	e7f7      	b.n	800a49a <_Balloc+0x66>
 800a4aa:	bf00      	nop
 800a4ac:	0800ba2c 	.word	0x0800ba2c
 800a4b0:	0800baac 	.word	0x0800baac

0800a4b4 <_Bfree>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	69c6      	ldr	r6, [r0, #28]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b976      	cbnz	r6, 800a4dc <_Bfree+0x28>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f7ff ff02 	bl	800a2c8 <malloc>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	61e8      	str	r0, [r5, #28]
 800a4c8:	b920      	cbnz	r0, 800a4d4 <_Bfree+0x20>
 800a4ca:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <_Bfree+0x3c>)
 800a4cc:	4809      	ldr	r0, [pc, #36]	@ (800a4f4 <_Bfree+0x40>)
 800a4ce:	218f      	movs	r1, #143	@ 0x8f
 800a4d0:	f000 fdea 	bl	800b0a8 <__assert_func>
 800a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d8:	6006      	str	r6, [r0, #0]
 800a4da:	60c6      	str	r6, [r0, #12]
 800a4dc:	b13c      	cbz	r4, 800a4ee <_Bfree+0x3a>
 800a4de:	69eb      	ldr	r3, [r5, #28]
 800a4e0:	6862      	ldr	r2, [r4, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4e8:	6021      	str	r1, [r4, #0]
 800a4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	0800ba2c 	.word	0x0800ba2c
 800a4f4:	0800baac 	.word	0x0800baac

0800a4f8 <__multadd>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	690d      	ldr	r5, [r1, #16]
 800a4fe:	4607      	mov	r7, r0
 800a500:	460c      	mov	r4, r1
 800a502:	461e      	mov	r6, r3
 800a504:	f101 0c14 	add.w	ip, r1, #20
 800a508:	2000      	movs	r0, #0
 800a50a:	f8dc 3000 	ldr.w	r3, [ip]
 800a50e:	b299      	uxth	r1, r3
 800a510:	fb02 6101 	mla	r1, r2, r1, r6
 800a514:	0c1e      	lsrs	r6, r3, #16
 800a516:	0c0b      	lsrs	r3, r1, #16
 800a518:	fb02 3306 	mla	r3, r2, r6, r3
 800a51c:	b289      	uxth	r1, r1
 800a51e:	3001      	adds	r0, #1
 800a520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a524:	4285      	cmp	r5, r0
 800a526:	f84c 1b04 	str.w	r1, [ip], #4
 800a52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a52e:	dcec      	bgt.n	800a50a <__multadd+0x12>
 800a530:	b30e      	cbz	r6, 800a576 <__multadd+0x7e>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	42ab      	cmp	r3, r5
 800a536:	dc19      	bgt.n	800a56c <__multadd+0x74>
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	4638      	mov	r0, r7
 800a53c:	3101      	adds	r1, #1
 800a53e:	f7ff ff79 	bl	800a434 <_Balloc>
 800a542:	4680      	mov	r8, r0
 800a544:	b928      	cbnz	r0, 800a552 <__multadd+0x5a>
 800a546:	4602      	mov	r2, r0
 800a548:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <__multadd+0x84>)
 800a54a:	480d      	ldr	r0, [pc, #52]	@ (800a580 <__multadd+0x88>)
 800a54c:	21ba      	movs	r1, #186	@ 0xba
 800a54e:	f000 fdab 	bl	800b0a8 <__assert_func>
 800a552:	6922      	ldr	r2, [r4, #16]
 800a554:	3202      	adds	r2, #2
 800a556:	f104 010c 	add.w	r1, r4, #12
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	300c      	adds	r0, #12
 800a55e:	f000 fd95 	bl	800b08c <memcpy>
 800a562:	4621      	mov	r1, r4
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff ffa5 	bl	800a4b4 <_Bfree>
 800a56a:	4644      	mov	r4, r8
 800a56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a570:	3501      	adds	r5, #1
 800a572:	615e      	str	r6, [r3, #20]
 800a574:	6125      	str	r5, [r4, #16]
 800a576:	4620      	mov	r0, r4
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	0800ba9b 	.word	0x0800ba9b
 800a580:	0800baac 	.word	0x0800baac

0800a584 <__hi0bits>:
 800a584:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a588:	4603      	mov	r3, r0
 800a58a:	bf36      	itet	cc
 800a58c:	0403      	lslcc	r3, r0, #16
 800a58e:	2000      	movcs	r0, #0
 800a590:	2010      	movcc	r0, #16
 800a592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a596:	bf3c      	itt	cc
 800a598:	021b      	lslcc	r3, r3, #8
 800a59a:	3008      	addcc	r0, #8
 800a59c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a0:	bf3c      	itt	cc
 800a5a2:	011b      	lslcc	r3, r3, #4
 800a5a4:	3004      	addcc	r0, #4
 800a5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5aa:	bf3c      	itt	cc
 800a5ac:	009b      	lslcc	r3, r3, #2
 800a5ae:	3002      	addcc	r0, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	db05      	blt.n	800a5c0 <__hi0bits+0x3c>
 800a5b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5b8:	f100 0001 	add.w	r0, r0, #1
 800a5bc:	bf08      	it	eq
 800a5be:	2020      	moveq	r0, #32
 800a5c0:	4770      	bx	lr

0800a5c2 <__lo0bits>:
 800a5c2:	6803      	ldr	r3, [r0, #0]
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f013 0007 	ands.w	r0, r3, #7
 800a5ca:	d00b      	beq.n	800a5e4 <__lo0bits+0x22>
 800a5cc:	07d9      	lsls	r1, r3, #31
 800a5ce:	d421      	bmi.n	800a614 <__lo0bits+0x52>
 800a5d0:	0798      	lsls	r0, r3, #30
 800a5d2:	bf49      	itett	mi
 800a5d4:	085b      	lsrmi	r3, r3, #1
 800a5d6:	089b      	lsrpl	r3, r3, #2
 800a5d8:	2001      	movmi	r0, #1
 800a5da:	6013      	strmi	r3, [r2, #0]
 800a5dc:	bf5c      	itt	pl
 800a5de:	6013      	strpl	r3, [r2, #0]
 800a5e0:	2002      	movpl	r0, #2
 800a5e2:	4770      	bx	lr
 800a5e4:	b299      	uxth	r1, r3
 800a5e6:	b909      	cbnz	r1, 800a5ec <__lo0bits+0x2a>
 800a5e8:	0c1b      	lsrs	r3, r3, #16
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	b2d9      	uxtb	r1, r3
 800a5ee:	b909      	cbnz	r1, 800a5f4 <__lo0bits+0x32>
 800a5f0:	3008      	adds	r0, #8
 800a5f2:	0a1b      	lsrs	r3, r3, #8
 800a5f4:	0719      	lsls	r1, r3, #28
 800a5f6:	bf04      	itt	eq
 800a5f8:	091b      	lsreq	r3, r3, #4
 800a5fa:	3004      	addeq	r0, #4
 800a5fc:	0799      	lsls	r1, r3, #30
 800a5fe:	bf04      	itt	eq
 800a600:	089b      	lsreq	r3, r3, #2
 800a602:	3002      	addeq	r0, #2
 800a604:	07d9      	lsls	r1, r3, #31
 800a606:	d403      	bmi.n	800a610 <__lo0bits+0x4e>
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	f100 0001 	add.w	r0, r0, #1
 800a60e:	d003      	beq.n	800a618 <__lo0bits+0x56>
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	4770      	bx	lr
 800a614:	2000      	movs	r0, #0
 800a616:	4770      	bx	lr
 800a618:	2020      	movs	r0, #32
 800a61a:	4770      	bx	lr

0800a61c <__i2b>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	460c      	mov	r4, r1
 800a620:	2101      	movs	r1, #1
 800a622:	f7ff ff07 	bl	800a434 <_Balloc>
 800a626:	4602      	mov	r2, r0
 800a628:	b928      	cbnz	r0, 800a636 <__i2b+0x1a>
 800a62a:	4b05      	ldr	r3, [pc, #20]	@ (800a640 <__i2b+0x24>)
 800a62c:	4805      	ldr	r0, [pc, #20]	@ (800a644 <__i2b+0x28>)
 800a62e:	f240 1145 	movw	r1, #325	@ 0x145
 800a632:	f000 fd39 	bl	800b0a8 <__assert_func>
 800a636:	2301      	movs	r3, #1
 800a638:	6144      	str	r4, [r0, #20]
 800a63a:	6103      	str	r3, [r0, #16]
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	0800ba9b 	.word	0x0800ba9b
 800a644:	0800baac 	.word	0x0800baac

0800a648 <__multiply>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	4617      	mov	r7, r2
 800a64e:	690a      	ldr	r2, [r1, #16]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	429a      	cmp	r2, r3
 800a654:	bfa8      	it	ge
 800a656:	463b      	movge	r3, r7
 800a658:	4689      	mov	r9, r1
 800a65a:	bfa4      	itt	ge
 800a65c:	460f      	movge	r7, r1
 800a65e:	4699      	movge	r9, r3
 800a660:	693d      	ldr	r5, [r7, #16]
 800a662:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	eb05 060a 	add.w	r6, r5, sl
 800a66e:	42b3      	cmp	r3, r6
 800a670:	b085      	sub	sp, #20
 800a672:	bfb8      	it	lt
 800a674:	3101      	addlt	r1, #1
 800a676:	f7ff fedd 	bl	800a434 <_Balloc>
 800a67a:	b930      	cbnz	r0, 800a68a <__multiply+0x42>
 800a67c:	4602      	mov	r2, r0
 800a67e:	4b41      	ldr	r3, [pc, #260]	@ (800a784 <__multiply+0x13c>)
 800a680:	4841      	ldr	r0, [pc, #260]	@ (800a788 <__multiply+0x140>)
 800a682:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a686:	f000 fd0f 	bl	800b0a8 <__assert_func>
 800a68a:	f100 0414 	add.w	r4, r0, #20
 800a68e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a692:	4623      	mov	r3, r4
 800a694:	2200      	movs	r2, #0
 800a696:	4573      	cmp	r3, lr
 800a698:	d320      	bcc.n	800a6dc <__multiply+0x94>
 800a69a:	f107 0814 	add.w	r8, r7, #20
 800a69e:	f109 0114 	add.w	r1, r9, #20
 800a6a2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a6a6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a6aa:	9302      	str	r3, [sp, #8]
 800a6ac:	1beb      	subs	r3, r5, r7
 800a6ae:	3b15      	subs	r3, #21
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	3715      	adds	r7, #21
 800a6b8:	42bd      	cmp	r5, r7
 800a6ba:	bf38      	it	cc
 800a6bc:	2304      	movcc	r3, #4
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	9103      	str	r1, [sp, #12]
 800a6c4:	428b      	cmp	r3, r1
 800a6c6:	d80c      	bhi.n	800a6e2 <__multiply+0x9a>
 800a6c8:	2e00      	cmp	r6, #0
 800a6ca:	dd03      	ble.n	800a6d4 <__multiply+0x8c>
 800a6cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d055      	beq.n	800a780 <__multiply+0x138>
 800a6d4:	6106      	str	r6, [r0, #16]
 800a6d6:	b005      	add	sp, #20
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	f843 2b04 	str.w	r2, [r3], #4
 800a6e0:	e7d9      	b.n	800a696 <__multiply+0x4e>
 800a6e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6e6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ea:	d01f      	beq.n	800a72c <__multiply+0xe4>
 800a6ec:	46c4      	mov	ip, r8
 800a6ee:	46a1      	mov	r9, r4
 800a6f0:	2700      	movs	r7, #0
 800a6f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a6fa:	fa1f fb82 	uxth.w	fp, r2
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	fb0a 330b 	mla	r3, sl, fp, r3
 800a704:	443b      	add	r3, r7
 800a706:	f8d9 7000 	ldr.w	r7, [r9]
 800a70a:	0c12      	lsrs	r2, r2, #16
 800a70c:	0c3f      	lsrs	r7, r7, #16
 800a70e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a712:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a716:	b29b      	uxth	r3, r3
 800a718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a71c:	4565      	cmp	r5, ip
 800a71e:	f849 3b04 	str.w	r3, [r9], #4
 800a722:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a726:	d8e4      	bhi.n	800a6f2 <__multiply+0xaa>
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	50e7      	str	r7, [r4, r3]
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a732:	3104      	adds	r1, #4
 800a734:	f1b9 0f00 	cmp.w	r9, #0
 800a738:	d020      	beq.n	800a77c <__multiply+0x134>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	4647      	mov	r7, r8
 800a73e:	46a4      	mov	ip, r4
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	f8b7 b000 	ldrh.w	fp, [r7]
 800a748:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a74c:	fb09 220b 	mla	r2, r9, fp, r2
 800a750:	4452      	add	r2, sl
 800a752:	b29b      	uxth	r3, r3
 800a754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a758:	f84c 3b04 	str.w	r3, [ip], #4
 800a75c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a764:	f8bc 3000 	ldrh.w	r3, [ip]
 800a768:	fb09 330a 	mla	r3, r9, sl, r3
 800a76c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a770:	42bd      	cmp	r5, r7
 800a772:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a776:	d8e5      	bhi.n	800a744 <__multiply+0xfc>
 800a778:	9a01      	ldr	r2, [sp, #4]
 800a77a:	50a3      	str	r3, [r4, r2]
 800a77c:	3404      	adds	r4, #4
 800a77e:	e79f      	b.n	800a6c0 <__multiply+0x78>
 800a780:	3e01      	subs	r6, #1
 800a782:	e7a1      	b.n	800a6c8 <__multiply+0x80>
 800a784:	0800ba9b 	.word	0x0800ba9b
 800a788:	0800baac 	.word	0x0800baac

0800a78c <__pow5mult>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4615      	mov	r5, r2
 800a792:	f012 0203 	ands.w	r2, r2, #3
 800a796:	4607      	mov	r7, r0
 800a798:	460e      	mov	r6, r1
 800a79a:	d007      	beq.n	800a7ac <__pow5mult+0x20>
 800a79c:	4c25      	ldr	r4, [pc, #148]	@ (800a834 <__pow5mult+0xa8>)
 800a79e:	3a01      	subs	r2, #1
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7a6:	f7ff fea7 	bl	800a4f8 <__multadd>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	10ad      	asrs	r5, r5, #2
 800a7ae:	d03d      	beq.n	800a82c <__pow5mult+0xa0>
 800a7b0:	69fc      	ldr	r4, [r7, #28]
 800a7b2:	b97c      	cbnz	r4, 800a7d4 <__pow5mult+0x48>
 800a7b4:	2010      	movs	r0, #16
 800a7b6:	f7ff fd87 	bl	800a2c8 <malloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	61f8      	str	r0, [r7, #28]
 800a7be:	b928      	cbnz	r0, 800a7cc <__pow5mult+0x40>
 800a7c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a838 <__pow5mult+0xac>)
 800a7c2:	481e      	ldr	r0, [pc, #120]	@ (800a83c <__pow5mult+0xb0>)
 800a7c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7c8:	f000 fc6e 	bl	800b0a8 <__assert_func>
 800a7cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7d0:	6004      	str	r4, [r0, #0]
 800a7d2:	60c4      	str	r4, [r0, #12]
 800a7d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7dc:	b94c      	cbnz	r4, 800a7f2 <__pow5mult+0x66>
 800a7de:	f240 2171 	movw	r1, #625	@ 0x271
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	f7ff ff1a 	bl	800a61c <__i2b>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	f04f 0900 	mov.w	r9, #0
 800a7f6:	07eb      	lsls	r3, r5, #31
 800a7f8:	d50a      	bpl.n	800a810 <__pow5mult+0x84>
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4638      	mov	r0, r7
 800a800:	f7ff ff22 	bl	800a648 <__multiply>
 800a804:	4631      	mov	r1, r6
 800a806:	4680      	mov	r8, r0
 800a808:	4638      	mov	r0, r7
 800a80a:	f7ff fe53 	bl	800a4b4 <_Bfree>
 800a80e:	4646      	mov	r6, r8
 800a810:	106d      	asrs	r5, r5, #1
 800a812:	d00b      	beq.n	800a82c <__pow5mult+0xa0>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	b938      	cbnz	r0, 800a828 <__pow5mult+0x9c>
 800a818:	4622      	mov	r2, r4
 800a81a:	4621      	mov	r1, r4
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff13 	bl	800a648 <__multiply>
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	f8c0 9000 	str.w	r9, [r0]
 800a828:	4604      	mov	r4, r0
 800a82a:	e7e4      	b.n	800a7f6 <__pow5mult+0x6a>
 800a82c:	4630      	mov	r0, r6
 800a82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a832:	bf00      	nop
 800a834:	08012a60 	.word	0x08012a60
 800a838:	0800ba2c 	.word	0x0800ba2c
 800a83c:	0800baac 	.word	0x0800baac

0800a840 <__lshift>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	460c      	mov	r4, r1
 800a846:	6849      	ldr	r1, [r1, #4]
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	4607      	mov	r7, r0
 800a852:	4691      	mov	r9, r2
 800a854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a858:	f108 0601 	add.w	r6, r8, #1
 800a85c:	42b3      	cmp	r3, r6
 800a85e:	db0b      	blt.n	800a878 <__lshift+0x38>
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff fde7 	bl	800a434 <_Balloc>
 800a866:	4605      	mov	r5, r0
 800a868:	b948      	cbnz	r0, 800a87e <__lshift+0x3e>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b28      	ldr	r3, [pc, #160]	@ (800a910 <__lshift+0xd0>)
 800a86e:	4829      	ldr	r0, [pc, #164]	@ (800a914 <__lshift+0xd4>)
 800a870:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a874:	f000 fc18 	bl	800b0a8 <__assert_func>
 800a878:	3101      	adds	r1, #1
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	e7ee      	b.n	800a85c <__lshift+0x1c>
 800a87e:	2300      	movs	r3, #0
 800a880:	f100 0114 	add.w	r1, r0, #20
 800a884:	f100 0210 	add.w	r2, r0, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	4553      	cmp	r3, sl
 800a88c:	db33      	blt.n	800a8f6 <__lshift+0xb6>
 800a88e:	6920      	ldr	r0, [r4, #16]
 800a890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a894:	f104 0314 	add.w	r3, r4, #20
 800a898:	f019 091f 	ands.w	r9, r9, #31
 800a89c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8a4:	d02b      	beq.n	800a8fe <__lshift+0xbe>
 800a8a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a8aa:	468a      	mov	sl, r1
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a8b4:	4310      	orrs	r0, r2
 800a8b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8be:	459c      	cmp	ip, r3
 800a8c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8c4:	d8f3      	bhi.n	800a8ae <__lshift+0x6e>
 800a8c6:	ebac 0304 	sub.w	r3, ip, r4
 800a8ca:	3b15      	subs	r3, #21
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	f104 0015 	add.w	r0, r4, #21
 800a8d6:	4560      	cmp	r0, ip
 800a8d8:	bf88      	it	hi
 800a8da:	2304      	movhi	r3, #4
 800a8dc:	50ca      	str	r2, [r1, r3]
 800a8de:	b10a      	cbz	r2, 800a8e4 <__lshift+0xa4>
 800a8e0:	f108 0602 	add.w	r6, r8, #2
 800a8e4:	3e01      	subs	r6, #1
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	612e      	str	r6, [r5, #16]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f7ff fde2 	bl	800a4b4 <_Bfree>
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	e7c5      	b.n	800a88a <__lshift+0x4a>
 800a8fe:	3904      	subs	r1, #4
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	f841 2f04 	str.w	r2, [r1, #4]!
 800a908:	459c      	cmp	ip, r3
 800a90a:	d8f9      	bhi.n	800a900 <__lshift+0xc0>
 800a90c:	e7ea      	b.n	800a8e4 <__lshift+0xa4>
 800a90e:	bf00      	nop
 800a910:	0800ba9b 	.word	0x0800ba9b
 800a914:	0800baac 	.word	0x0800baac

0800a918 <__mcmp>:
 800a918:	690a      	ldr	r2, [r1, #16]
 800a91a:	4603      	mov	r3, r0
 800a91c:	6900      	ldr	r0, [r0, #16]
 800a91e:	1a80      	subs	r0, r0, r2
 800a920:	b530      	push	{r4, r5, lr}
 800a922:	d10e      	bne.n	800a942 <__mcmp+0x2a>
 800a924:	3314      	adds	r3, #20
 800a926:	3114      	adds	r1, #20
 800a928:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a92c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a930:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a934:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a938:	4295      	cmp	r5, r2
 800a93a:	d003      	beq.n	800a944 <__mcmp+0x2c>
 800a93c:	d205      	bcs.n	800a94a <__mcmp+0x32>
 800a93e:	f04f 30ff 	mov.w	r0, #4294967295
 800a942:	bd30      	pop	{r4, r5, pc}
 800a944:	42a3      	cmp	r3, r4
 800a946:	d3f3      	bcc.n	800a930 <__mcmp+0x18>
 800a948:	e7fb      	b.n	800a942 <__mcmp+0x2a>
 800a94a:	2001      	movs	r0, #1
 800a94c:	e7f9      	b.n	800a942 <__mcmp+0x2a>
	...

0800a950 <__mdiff>:
 800a950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	4689      	mov	r9, r1
 800a956:	4606      	mov	r6, r0
 800a958:	4611      	mov	r1, r2
 800a95a:	4648      	mov	r0, r9
 800a95c:	4614      	mov	r4, r2
 800a95e:	f7ff ffdb 	bl	800a918 <__mcmp>
 800a962:	1e05      	subs	r5, r0, #0
 800a964:	d112      	bne.n	800a98c <__mdiff+0x3c>
 800a966:	4629      	mov	r1, r5
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff fd63 	bl	800a434 <_Balloc>
 800a96e:	4602      	mov	r2, r0
 800a970:	b928      	cbnz	r0, 800a97e <__mdiff+0x2e>
 800a972:	4b3f      	ldr	r3, [pc, #252]	@ (800aa70 <__mdiff+0x120>)
 800a974:	f240 2137 	movw	r1, #567	@ 0x237
 800a978:	483e      	ldr	r0, [pc, #248]	@ (800aa74 <__mdiff+0x124>)
 800a97a:	f000 fb95 	bl	800b0a8 <__assert_func>
 800a97e:	2301      	movs	r3, #1
 800a980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a984:	4610      	mov	r0, r2
 800a986:	b003      	add	sp, #12
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98c:	bfbc      	itt	lt
 800a98e:	464b      	movlt	r3, r9
 800a990:	46a1      	movlt	r9, r4
 800a992:	4630      	mov	r0, r6
 800a994:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a998:	bfba      	itte	lt
 800a99a:	461c      	movlt	r4, r3
 800a99c:	2501      	movlt	r5, #1
 800a99e:	2500      	movge	r5, #0
 800a9a0:	f7ff fd48 	bl	800a434 <_Balloc>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	b918      	cbnz	r0, 800a9b0 <__mdiff+0x60>
 800a9a8:	4b31      	ldr	r3, [pc, #196]	@ (800aa70 <__mdiff+0x120>)
 800a9aa:	f240 2145 	movw	r1, #581	@ 0x245
 800a9ae:	e7e3      	b.n	800a978 <__mdiff+0x28>
 800a9b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9b4:	6926      	ldr	r6, [r4, #16]
 800a9b6:	60c5      	str	r5, [r0, #12]
 800a9b8:	f109 0310 	add.w	r3, r9, #16
 800a9bc:	f109 0514 	add.w	r5, r9, #20
 800a9c0:	f104 0e14 	add.w	lr, r4, #20
 800a9c4:	f100 0b14 	add.w	fp, r0, #20
 800a9c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	46d9      	mov	r9, fp
 800a9d4:	f04f 0c00 	mov.w	ip, #0
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	fa1f f38a 	uxth.w	r3, sl
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	b283      	uxth	r3, r0
 800a9ec:	1acb      	subs	r3, r1, r3
 800a9ee:	0c00      	lsrs	r0, r0, #16
 800a9f0:	4463      	add	r3, ip
 800a9f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa00:	4576      	cmp	r6, lr
 800aa02:	f849 3b04 	str.w	r3, [r9], #4
 800aa06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa0a:	d8e5      	bhi.n	800a9d8 <__mdiff+0x88>
 800aa0c:	1b33      	subs	r3, r6, r4
 800aa0e:	3b15      	subs	r3, #21
 800aa10:	f023 0303 	bic.w	r3, r3, #3
 800aa14:	3415      	adds	r4, #21
 800aa16:	3304      	adds	r3, #4
 800aa18:	42a6      	cmp	r6, r4
 800aa1a:	bf38      	it	cc
 800aa1c:	2304      	movcc	r3, #4
 800aa1e:	441d      	add	r5, r3
 800aa20:	445b      	add	r3, fp
 800aa22:	461e      	mov	r6, r3
 800aa24:	462c      	mov	r4, r5
 800aa26:	4544      	cmp	r4, r8
 800aa28:	d30e      	bcc.n	800aa48 <__mdiff+0xf8>
 800aa2a:	f108 0103 	add.w	r1, r8, #3
 800aa2e:	1b49      	subs	r1, r1, r5
 800aa30:	f021 0103 	bic.w	r1, r1, #3
 800aa34:	3d03      	subs	r5, #3
 800aa36:	45a8      	cmp	r8, r5
 800aa38:	bf38      	it	cc
 800aa3a:	2100      	movcc	r1, #0
 800aa3c:	440b      	add	r3, r1
 800aa3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa42:	b191      	cbz	r1, 800aa6a <__mdiff+0x11a>
 800aa44:	6117      	str	r7, [r2, #16]
 800aa46:	e79d      	b.n	800a984 <__mdiff+0x34>
 800aa48:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa4c:	46e6      	mov	lr, ip
 800aa4e:	0c08      	lsrs	r0, r1, #16
 800aa50:	fa1c fc81 	uxtah	ip, ip, r1
 800aa54:	4471      	add	r1, lr
 800aa56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa5a:	b289      	uxth	r1, r1
 800aa5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa60:	f846 1b04 	str.w	r1, [r6], #4
 800aa64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa68:	e7dd      	b.n	800aa26 <__mdiff+0xd6>
 800aa6a:	3f01      	subs	r7, #1
 800aa6c:	e7e7      	b.n	800aa3e <__mdiff+0xee>
 800aa6e:	bf00      	nop
 800aa70:	0800ba9b 	.word	0x0800ba9b
 800aa74:	0800baac 	.word	0x0800baac

0800aa78 <__d2b>:
 800aa78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	2101      	movs	r1, #1
 800aa80:	ec59 8b10 	vmov	r8, r9, d0
 800aa84:	4616      	mov	r6, r2
 800aa86:	f7ff fcd5 	bl	800a434 <_Balloc>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	b930      	cbnz	r0, 800aa9c <__d2b+0x24>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b23      	ldr	r3, [pc, #140]	@ (800ab20 <__d2b+0xa8>)
 800aa92:	4824      	ldr	r0, [pc, #144]	@ (800ab24 <__d2b+0xac>)
 800aa94:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa98:	f000 fb06 	bl	800b0a8 <__assert_func>
 800aa9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaa4:	b10d      	cbz	r5, 800aaaa <__d2b+0x32>
 800aaa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	f1b8 0300 	subs.w	r3, r8, #0
 800aab0:	d023      	beq.n	800aafa <__d2b+0x82>
 800aab2:	4668      	mov	r0, sp
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	f7ff fd84 	bl	800a5c2 <__lo0bits>
 800aaba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aabe:	b1d0      	cbz	r0, 800aaf6 <__d2b+0x7e>
 800aac0:	f1c0 0320 	rsb	r3, r0, #32
 800aac4:	fa02 f303 	lsl.w	r3, r2, r3
 800aac8:	430b      	orrs	r3, r1
 800aaca:	40c2      	lsrs	r2, r0
 800aacc:	6163      	str	r3, [r4, #20]
 800aace:	9201      	str	r2, [sp, #4]
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	61a3      	str	r3, [r4, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bf0c      	ite	eq
 800aad8:	2201      	moveq	r2, #1
 800aada:	2202      	movne	r2, #2
 800aadc:	6122      	str	r2, [r4, #16]
 800aade:	b1a5      	cbz	r5, 800ab0a <__d2b+0x92>
 800aae0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aae4:	4405      	add	r5, r0
 800aae6:	603d      	str	r5, [r7, #0]
 800aae8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aaec:	6030      	str	r0, [r6, #0]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	b003      	add	sp, #12
 800aaf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaf6:	6161      	str	r1, [r4, #20]
 800aaf8:	e7ea      	b.n	800aad0 <__d2b+0x58>
 800aafa:	a801      	add	r0, sp, #4
 800aafc:	f7ff fd61 	bl	800a5c2 <__lo0bits>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	6163      	str	r3, [r4, #20]
 800ab04:	3020      	adds	r0, #32
 800ab06:	2201      	movs	r2, #1
 800ab08:	e7e8      	b.n	800aadc <__d2b+0x64>
 800ab0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab12:	6038      	str	r0, [r7, #0]
 800ab14:	6918      	ldr	r0, [r3, #16]
 800ab16:	f7ff fd35 	bl	800a584 <__hi0bits>
 800ab1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab1e:	e7e5      	b.n	800aaec <__d2b+0x74>
 800ab20:	0800ba9b 	.word	0x0800ba9b
 800ab24:	0800baac 	.word	0x0800baac

0800ab28 <__ssputs_r>:
 800ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	688e      	ldr	r6, [r1, #8]
 800ab2e:	461f      	mov	r7, r3
 800ab30:	42be      	cmp	r6, r7
 800ab32:	680b      	ldr	r3, [r1, #0]
 800ab34:	4682      	mov	sl, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	4690      	mov	r8, r2
 800ab3a:	d82d      	bhi.n	800ab98 <__ssputs_r+0x70>
 800ab3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab44:	d026      	beq.n	800ab94 <__ssputs_r+0x6c>
 800ab46:	6965      	ldr	r5, [r4, #20]
 800ab48:	6909      	ldr	r1, [r1, #16]
 800ab4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab4e:	eba3 0901 	sub.w	r9, r3, r1
 800ab52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab56:	1c7b      	adds	r3, r7, #1
 800ab58:	444b      	add	r3, r9
 800ab5a:	106d      	asrs	r5, r5, #1
 800ab5c:	429d      	cmp	r5, r3
 800ab5e:	bf38      	it	cc
 800ab60:	461d      	movcc	r5, r3
 800ab62:	0553      	lsls	r3, r2, #21
 800ab64:	d527      	bpl.n	800abb6 <__ssputs_r+0x8e>
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7ff fbd8 	bl	800a31c <_malloc_r>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	b360      	cbz	r0, 800abca <__ssputs_r+0xa2>
 800ab70:	6921      	ldr	r1, [r4, #16]
 800ab72:	464a      	mov	r2, r9
 800ab74:	f000 fa8a 	bl	800b08c <memcpy>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	6126      	str	r6, [r4, #16]
 800ab86:	6165      	str	r5, [r4, #20]
 800ab88:	444e      	add	r6, r9
 800ab8a:	eba5 0509 	sub.w	r5, r5, r9
 800ab8e:	6026      	str	r6, [r4, #0]
 800ab90:	60a5      	str	r5, [r4, #8]
 800ab92:	463e      	mov	r6, r7
 800ab94:	42be      	cmp	r6, r7
 800ab96:	d900      	bls.n	800ab9a <__ssputs_r+0x72>
 800ab98:	463e      	mov	r6, r7
 800ab9a:	6820      	ldr	r0, [r4, #0]
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	4641      	mov	r1, r8
 800aba0:	f000 fa28 	bl	800aff4 <memmove>
 800aba4:	68a3      	ldr	r3, [r4, #8]
 800aba6:	1b9b      	subs	r3, r3, r6
 800aba8:	60a3      	str	r3, [r4, #8]
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	4433      	add	r3, r6
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	2000      	movs	r0, #0
 800abb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb6:	462a      	mov	r2, r5
 800abb8:	f000 faba 	bl	800b130 <_realloc_r>
 800abbc:	4606      	mov	r6, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d1e0      	bne.n	800ab84 <__ssputs_r+0x5c>
 800abc2:	6921      	ldr	r1, [r4, #16]
 800abc4:	4650      	mov	r0, sl
 800abc6:	f7ff fb35 	bl	800a234 <_free_r>
 800abca:	230c      	movs	r3, #12
 800abcc:	f8ca 3000 	str.w	r3, [sl]
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295
 800abdc:	e7e9      	b.n	800abb2 <__ssputs_r+0x8a>
	...

0800abe0 <_svfiprintf_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	4698      	mov	r8, r3
 800abe6:	898b      	ldrh	r3, [r1, #12]
 800abe8:	061b      	lsls	r3, r3, #24
 800abea:	b09d      	sub	sp, #116	@ 0x74
 800abec:	4607      	mov	r7, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	d510      	bpl.n	800ac16 <_svfiprintf_r+0x36>
 800abf4:	690b      	ldr	r3, [r1, #16]
 800abf6:	b973      	cbnz	r3, 800ac16 <_svfiprintf_r+0x36>
 800abf8:	2140      	movs	r1, #64	@ 0x40
 800abfa:	f7ff fb8f 	bl	800a31c <_malloc_r>
 800abfe:	6028      	str	r0, [r5, #0]
 800ac00:	6128      	str	r0, [r5, #16]
 800ac02:	b930      	cbnz	r0, 800ac12 <_svfiprintf_r+0x32>
 800ac04:	230c      	movs	r3, #12
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0c:	b01d      	add	sp, #116	@ 0x74
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	2340      	movs	r3, #64	@ 0x40
 800ac14:	616b      	str	r3, [r5, #20]
 800ac16:	2300      	movs	r3, #0
 800ac18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1a:	2320      	movs	r3, #32
 800ac1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac24:	2330      	movs	r3, #48	@ 0x30
 800ac26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800adc4 <_svfiprintf_r+0x1e4>
 800ac2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac2e:	f04f 0901 	mov.w	r9, #1
 800ac32:	4623      	mov	r3, r4
 800ac34:	469a      	mov	sl, r3
 800ac36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac3a:	b10a      	cbz	r2, 800ac40 <_svfiprintf_r+0x60>
 800ac3c:	2a25      	cmp	r2, #37	@ 0x25
 800ac3e:	d1f9      	bne.n	800ac34 <_svfiprintf_r+0x54>
 800ac40:	ebba 0b04 	subs.w	fp, sl, r4
 800ac44:	d00b      	beq.n	800ac5e <_svfiprintf_r+0x7e>
 800ac46:	465b      	mov	r3, fp
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f7ff ff6b 	bl	800ab28 <__ssputs_r>
 800ac52:	3001      	adds	r0, #1
 800ac54:	f000 80a7 	beq.w	800ada6 <_svfiprintf_r+0x1c6>
 800ac58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac5a:	445a      	add	r2, fp
 800ac5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 809f 	beq.w	800ada6 <_svfiprintf_r+0x1c6>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac72:	f10a 0a01 	add.w	sl, sl, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	9307      	str	r3, [sp, #28]
 800ac7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac80:	4654      	mov	r4, sl
 800ac82:	2205      	movs	r2, #5
 800ac84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac88:	484e      	ldr	r0, [pc, #312]	@ (800adc4 <_svfiprintf_r+0x1e4>)
 800ac8a:	f7f5 fb29 	bl	80002e0 <memchr>
 800ac8e:	9a04      	ldr	r2, [sp, #16]
 800ac90:	b9d8      	cbnz	r0, 800acca <_svfiprintf_r+0xea>
 800ac92:	06d0      	lsls	r0, r2, #27
 800ac94:	bf44      	itt	mi
 800ac96:	2320      	movmi	r3, #32
 800ac98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac9c:	0711      	lsls	r1, r2, #28
 800ac9e:	bf44      	itt	mi
 800aca0:	232b      	movmi	r3, #43	@ 0x2b
 800aca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aca6:	f89a 3000 	ldrb.w	r3, [sl]
 800acaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800acac:	d015      	beq.n	800acda <_svfiprintf_r+0xfa>
 800acae:	9a07      	ldr	r2, [sp, #28]
 800acb0:	4654      	mov	r4, sl
 800acb2:	2000      	movs	r0, #0
 800acb4:	f04f 0c0a 	mov.w	ip, #10
 800acb8:	4621      	mov	r1, r4
 800acba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acbe:	3b30      	subs	r3, #48	@ 0x30
 800acc0:	2b09      	cmp	r3, #9
 800acc2:	d94b      	bls.n	800ad5c <_svfiprintf_r+0x17c>
 800acc4:	b1b0      	cbz	r0, 800acf4 <_svfiprintf_r+0x114>
 800acc6:	9207      	str	r2, [sp, #28]
 800acc8:	e014      	b.n	800acf4 <_svfiprintf_r+0x114>
 800acca:	eba0 0308 	sub.w	r3, r0, r8
 800acce:	fa09 f303 	lsl.w	r3, r9, r3
 800acd2:	4313      	orrs	r3, r2
 800acd4:	9304      	str	r3, [sp, #16]
 800acd6:	46a2      	mov	sl, r4
 800acd8:	e7d2      	b.n	800ac80 <_svfiprintf_r+0xa0>
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	1d19      	adds	r1, r3, #4
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	9103      	str	r1, [sp, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bfbb      	ittet	lt
 800ace6:	425b      	neglt	r3, r3
 800ace8:	f042 0202 	orrlt.w	r2, r2, #2
 800acec:	9307      	strge	r3, [sp, #28]
 800acee:	9307      	strlt	r3, [sp, #28]
 800acf0:	bfb8      	it	lt
 800acf2:	9204      	strlt	r2, [sp, #16]
 800acf4:	7823      	ldrb	r3, [r4, #0]
 800acf6:	2b2e      	cmp	r3, #46	@ 0x2e
 800acf8:	d10a      	bne.n	800ad10 <_svfiprintf_r+0x130>
 800acfa:	7863      	ldrb	r3, [r4, #1]
 800acfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800acfe:	d132      	bne.n	800ad66 <_svfiprintf_r+0x186>
 800ad00:	9b03      	ldr	r3, [sp, #12]
 800ad02:	1d1a      	adds	r2, r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	9203      	str	r2, [sp, #12]
 800ad08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad0c:	3402      	adds	r4, #2
 800ad0e:	9305      	str	r3, [sp, #20]
 800ad10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800add4 <_svfiprintf_r+0x1f4>
 800ad14:	7821      	ldrb	r1, [r4, #0]
 800ad16:	2203      	movs	r2, #3
 800ad18:	4650      	mov	r0, sl
 800ad1a:	f7f5 fae1 	bl	80002e0 <memchr>
 800ad1e:	b138      	cbz	r0, 800ad30 <_svfiprintf_r+0x150>
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	eba0 000a 	sub.w	r0, r0, sl
 800ad26:	2240      	movs	r2, #64	@ 0x40
 800ad28:	4082      	lsls	r2, r0
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	3401      	adds	r4, #1
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad34:	4824      	ldr	r0, [pc, #144]	@ (800adc8 <_svfiprintf_r+0x1e8>)
 800ad36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad3a:	2206      	movs	r2, #6
 800ad3c:	f7f5 fad0 	bl	80002e0 <memchr>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d036      	beq.n	800adb2 <_svfiprintf_r+0x1d2>
 800ad44:	4b21      	ldr	r3, [pc, #132]	@ (800adcc <_svfiprintf_r+0x1ec>)
 800ad46:	bb1b      	cbnz	r3, 800ad90 <_svfiprintf_r+0x1b0>
 800ad48:	9b03      	ldr	r3, [sp, #12]
 800ad4a:	3307      	adds	r3, #7
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	3308      	adds	r3, #8
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad56:	4433      	add	r3, r6
 800ad58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5a:	e76a      	b.n	800ac32 <_svfiprintf_r+0x52>
 800ad5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad60:	460c      	mov	r4, r1
 800ad62:	2001      	movs	r0, #1
 800ad64:	e7a8      	b.n	800acb8 <_svfiprintf_r+0xd8>
 800ad66:	2300      	movs	r3, #0
 800ad68:	3401      	adds	r4, #1
 800ad6a:	9305      	str	r3, [sp, #20]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f04f 0c0a 	mov.w	ip, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad78:	3a30      	subs	r2, #48	@ 0x30
 800ad7a:	2a09      	cmp	r2, #9
 800ad7c:	d903      	bls.n	800ad86 <_svfiprintf_r+0x1a6>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0c6      	beq.n	800ad10 <_svfiprintf_r+0x130>
 800ad82:	9105      	str	r1, [sp, #20]
 800ad84:	e7c4      	b.n	800ad10 <_svfiprintf_r+0x130>
 800ad86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e7f0      	b.n	800ad72 <_svfiprintf_r+0x192>
 800ad90:	ab03      	add	r3, sp, #12
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	462a      	mov	r2, r5
 800ad96:	4b0e      	ldr	r3, [pc, #56]	@ (800add0 <_svfiprintf_r+0x1f0>)
 800ad98:	a904      	add	r1, sp, #16
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7fd fe24 	bl	80089e8 <_printf_float>
 800ada0:	1c42      	adds	r2, r0, #1
 800ada2:	4606      	mov	r6, r0
 800ada4:	d1d6      	bne.n	800ad54 <_svfiprintf_r+0x174>
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	065b      	lsls	r3, r3, #25
 800adaa:	f53f af2d 	bmi.w	800ac08 <_svfiprintf_r+0x28>
 800adae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adb0:	e72c      	b.n	800ac0c <_svfiprintf_r+0x2c>
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	462a      	mov	r2, r5
 800adb8:	4b05      	ldr	r3, [pc, #20]	@ (800add0 <_svfiprintf_r+0x1f0>)
 800adba:	a904      	add	r1, sp, #16
 800adbc:	4638      	mov	r0, r7
 800adbe:	f7fe f89b 	bl	8008ef8 <_printf_i>
 800adc2:	e7ed      	b.n	800ada0 <_svfiprintf_r+0x1c0>
 800adc4:	0800bb05 	.word	0x0800bb05
 800adc8:	0800bb0f 	.word	0x0800bb0f
 800adcc:	080089e9 	.word	0x080089e9
 800add0:	0800ab29 	.word	0x0800ab29
 800add4:	0800bb0b 	.word	0x0800bb0b

0800add8 <__sflush_r>:
 800add8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	0716      	lsls	r6, r2, #28
 800ade2:	4605      	mov	r5, r0
 800ade4:	460c      	mov	r4, r1
 800ade6:	d454      	bmi.n	800ae92 <__sflush_r+0xba>
 800ade8:	684b      	ldr	r3, [r1, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dc02      	bgt.n	800adf4 <__sflush_r+0x1c>
 800adee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dd48      	ble.n	800ae86 <__sflush_r+0xae>
 800adf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	d045      	beq.n	800ae86 <__sflush_r+0xae>
 800adfa:	2300      	movs	r3, #0
 800adfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae00:	682f      	ldr	r7, [r5, #0]
 800ae02:	6a21      	ldr	r1, [r4, #32]
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	d030      	beq.n	800ae6a <__sflush_r+0x92>
 800ae08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	0759      	lsls	r1, r3, #29
 800ae0e:	d505      	bpl.n	800ae1c <__sflush_r+0x44>
 800ae10:	6863      	ldr	r3, [r4, #4]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae16:	b10b      	cbz	r3, 800ae1c <__sflush_r+0x44>
 800ae18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae1a:	1ad2      	subs	r2, r2, r3
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b0      	blx	r6
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	d106      	bne.n	800ae3a <__sflush_r+0x62>
 800ae2c:	6829      	ldr	r1, [r5, #0]
 800ae2e:	291d      	cmp	r1, #29
 800ae30:	d82b      	bhi.n	800ae8a <__sflush_r+0xb2>
 800ae32:	4a2a      	ldr	r2, [pc, #168]	@ (800aedc <__sflush_r+0x104>)
 800ae34:	40ca      	lsrs	r2, r1
 800ae36:	07d6      	lsls	r6, r2, #31
 800ae38:	d527      	bpl.n	800ae8a <__sflush_r+0xb2>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6062      	str	r2, [r4, #4]
 800ae3e:	04d9      	lsls	r1, r3, #19
 800ae40:	6922      	ldr	r2, [r4, #16]
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	d504      	bpl.n	800ae50 <__sflush_r+0x78>
 800ae46:	1c42      	adds	r2, r0, #1
 800ae48:	d101      	bne.n	800ae4e <__sflush_r+0x76>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b903      	cbnz	r3, 800ae50 <__sflush_r+0x78>
 800ae4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae52:	602f      	str	r7, [r5, #0]
 800ae54:	b1b9      	cbz	r1, 800ae86 <__sflush_r+0xae>
 800ae56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	d002      	beq.n	800ae64 <__sflush_r+0x8c>
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f7ff f9e8 	bl	800a234 <_free_r>
 800ae64:	2300      	movs	r3, #0
 800ae66:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae68:	e00d      	b.n	800ae86 <__sflush_r+0xae>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b0      	blx	r6
 800ae70:	4602      	mov	r2, r0
 800ae72:	1c50      	adds	r0, r2, #1
 800ae74:	d1c9      	bne.n	800ae0a <__sflush_r+0x32>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0c6      	beq.n	800ae0a <__sflush_r+0x32>
 800ae7c:	2b1d      	cmp	r3, #29
 800ae7e:	d001      	beq.n	800ae84 <__sflush_r+0xac>
 800ae80:	2b16      	cmp	r3, #22
 800ae82:	d11e      	bne.n	800aec2 <__sflush_r+0xea>
 800ae84:	602f      	str	r7, [r5, #0]
 800ae86:	2000      	movs	r0, #0
 800ae88:	e022      	b.n	800aed0 <__sflush_r+0xf8>
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8e:	b21b      	sxth	r3, r3
 800ae90:	e01b      	b.n	800aeca <__sflush_r+0xf2>
 800ae92:	690f      	ldr	r7, [r1, #16]
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	d0f6      	beq.n	800ae86 <__sflush_r+0xae>
 800ae98:	0793      	lsls	r3, r2, #30
 800ae9a:	680e      	ldr	r6, [r1, #0]
 800ae9c:	bf08      	it	eq
 800ae9e:	694b      	ldreq	r3, [r1, #20]
 800aea0:	600f      	str	r7, [r1, #0]
 800aea2:	bf18      	it	ne
 800aea4:	2300      	movne	r3, #0
 800aea6:	eba6 0807 	sub.w	r8, r6, r7
 800aeaa:	608b      	str	r3, [r1, #8]
 800aeac:	f1b8 0f00 	cmp.w	r8, #0
 800aeb0:	dde9      	ble.n	800ae86 <__sflush_r+0xae>
 800aeb2:	6a21      	ldr	r1, [r4, #32]
 800aeb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aeb6:	4643      	mov	r3, r8
 800aeb8:	463a      	mov	r2, r7
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b0      	blx	r6
 800aebe:	2800      	cmp	r0, #0
 800aec0:	dc08      	bgt.n	800aed4 <__sflush_r+0xfc>
 800aec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	4407      	add	r7, r0
 800aed6:	eba8 0800 	sub.w	r8, r8, r0
 800aeda:	e7e7      	b.n	800aeac <__sflush_r+0xd4>
 800aedc:	20400001 	.word	0x20400001

0800aee0 <_fflush_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	b913      	cbnz	r3, 800aef0 <_fflush_r+0x10>
 800aeea:	2500      	movs	r5, #0
 800aeec:	4628      	mov	r0, r5
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	b118      	cbz	r0, 800aefa <_fflush_r+0x1a>
 800aef2:	6a03      	ldr	r3, [r0, #32]
 800aef4:	b90b      	cbnz	r3, 800aefa <_fflush_r+0x1a>
 800aef6:	f7fe f9a9 	bl	800924c <__sinit>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0f3      	beq.n	800aeea <_fflush_r+0xa>
 800af02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af04:	07d0      	lsls	r0, r2, #31
 800af06:	d404      	bmi.n	800af12 <_fflush_r+0x32>
 800af08:	0599      	lsls	r1, r3, #22
 800af0a:	d402      	bmi.n	800af12 <_fflush_r+0x32>
 800af0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af0e:	f7fe fba8 	bl	8009662 <__retarget_lock_acquire_recursive>
 800af12:	4628      	mov	r0, r5
 800af14:	4621      	mov	r1, r4
 800af16:	f7ff ff5f 	bl	800add8 <__sflush_r>
 800af1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af1c:	07da      	lsls	r2, r3, #31
 800af1e:	4605      	mov	r5, r0
 800af20:	d4e4      	bmi.n	800aeec <_fflush_r+0xc>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	059b      	lsls	r3, r3, #22
 800af26:	d4e1      	bmi.n	800aeec <_fflush_r+0xc>
 800af28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af2a:	f7fe fb9b 	bl	8009664 <__retarget_lock_release_recursive>
 800af2e:	e7dd      	b.n	800aeec <_fflush_r+0xc>

0800af30 <__swhatbuf_r>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	460c      	mov	r4, r1
 800af34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af38:	2900      	cmp	r1, #0
 800af3a:	b096      	sub	sp, #88	@ 0x58
 800af3c:	4615      	mov	r5, r2
 800af3e:	461e      	mov	r6, r3
 800af40:	da0d      	bge.n	800af5e <__swhatbuf_r+0x2e>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af48:	f04f 0100 	mov.w	r1, #0
 800af4c:	bf14      	ite	ne
 800af4e:	2340      	movne	r3, #64	@ 0x40
 800af50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af54:	2000      	movs	r0, #0
 800af56:	6031      	str	r1, [r6, #0]
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	b016      	add	sp, #88	@ 0x58
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	466a      	mov	r2, sp
 800af60:	f000 f862 	bl	800b028 <_fstat_r>
 800af64:	2800      	cmp	r0, #0
 800af66:	dbec      	blt.n	800af42 <__swhatbuf_r+0x12>
 800af68:	9901      	ldr	r1, [sp, #4]
 800af6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af72:	4259      	negs	r1, r3
 800af74:	4159      	adcs	r1, r3
 800af76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af7a:	e7eb      	b.n	800af54 <__swhatbuf_r+0x24>

0800af7c <__smakebuf_r>:
 800af7c:	898b      	ldrh	r3, [r1, #12]
 800af7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af80:	079d      	lsls	r5, r3, #30
 800af82:	4606      	mov	r6, r0
 800af84:	460c      	mov	r4, r1
 800af86:	d507      	bpl.n	800af98 <__smakebuf_r+0x1c>
 800af88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	2301      	movs	r3, #1
 800af92:	6163      	str	r3, [r4, #20]
 800af94:	b003      	add	sp, #12
 800af96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af98:	ab01      	add	r3, sp, #4
 800af9a:	466a      	mov	r2, sp
 800af9c:	f7ff ffc8 	bl	800af30 <__swhatbuf_r>
 800afa0:	9f00      	ldr	r7, [sp, #0]
 800afa2:	4605      	mov	r5, r0
 800afa4:	4639      	mov	r1, r7
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7ff f9b8 	bl	800a31c <_malloc_r>
 800afac:	b948      	cbnz	r0, 800afc2 <__smakebuf_r+0x46>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	059a      	lsls	r2, r3, #22
 800afb4:	d4ee      	bmi.n	800af94 <__smakebuf_r+0x18>
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	f043 0302 	orr.w	r3, r3, #2
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	e7e2      	b.n	800af88 <__smakebuf_r+0xc>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	6020      	str	r0, [r4, #0]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afd2:	b15b      	cbz	r3, 800afec <__smakebuf_r+0x70>
 800afd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd8:	4630      	mov	r0, r6
 800afda:	f000 f837 	bl	800b04c <_isatty_r>
 800afde:	b128      	cbz	r0, 800afec <__smakebuf_r+0x70>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	431d      	orrs	r5, r3
 800aff0:	81a5      	strh	r5, [r4, #12]
 800aff2:	e7cf      	b.n	800af94 <__smakebuf_r+0x18>

0800aff4 <memmove>:
 800aff4:	4288      	cmp	r0, r1
 800aff6:	b510      	push	{r4, lr}
 800aff8:	eb01 0402 	add.w	r4, r1, r2
 800affc:	d902      	bls.n	800b004 <memmove+0x10>
 800affe:	4284      	cmp	r4, r0
 800b000:	4623      	mov	r3, r4
 800b002:	d807      	bhi.n	800b014 <memmove+0x20>
 800b004:	1e43      	subs	r3, r0, #1
 800b006:	42a1      	cmp	r1, r4
 800b008:	d008      	beq.n	800b01c <memmove+0x28>
 800b00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b012:	e7f8      	b.n	800b006 <memmove+0x12>
 800b014:	4402      	add	r2, r0
 800b016:	4601      	mov	r1, r0
 800b018:	428a      	cmp	r2, r1
 800b01a:	d100      	bne.n	800b01e <memmove+0x2a>
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b026:	e7f7      	b.n	800b018 <memmove+0x24>

0800b028 <_fstat_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	@ (800b048 <_fstat_r+0x20>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	4611      	mov	r1, r2
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	f7f8 f852 	bl	80030de <_fstat>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d102      	bne.n	800b044 <_fstat_r+0x1c>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	b103      	cbz	r3, 800b044 <_fstat_r+0x1c>
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	bd38      	pop	{r3, r4, r5, pc}
 800b046:	bf00      	nop
 800b048:	24000c88 	.word	0x24000c88

0800b04c <_isatty_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d06      	ldr	r5, [pc, #24]	@ (800b068 <_isatty_r+0x1c>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	f7f8 f846 	bl	80030e8 <_isatty>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_isatty_r+0x1a>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_isatty_r+0x1a>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	24000c88 	.word	0x24000c88

0800b06c <_sbrk_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4d06      	ldr	r5, [pc, #24]	@ (800b088 <_sbrk_r+0x1c>)
 800b070:	2300      	movs	r3, #0
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	602b      	str	r3, [r5, #0]
 800b078:	f7f8 f83a 	bl	80030f0 <_sbrk>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_sbrk_r+0x1a>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b103      	cbz	r3, 800b086 <_sbrk_r+0x1a>
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	24000c88 	.word	0x24000c88

0800b08c <memcpy>:
 800b08c:	440a      	add	r2, r1
 800b08e:	4291      	cmp	r1, r2
 800b090:	f100 33ff 	add.w	r3, r0, #4294967295
 800b094:	d100      	bne.n	800b098 <memcpy+0xc>
 800b096:	4770      	bx	lr
 800b098:	b510      	push	{r4, lr}
 800b09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0a2:	4291      	cmp	r1, r2
 800b0a4:	d1f9      	bne.n	800b09a <memcpy+0xe>
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <__assert_func>:
 800b0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0aa:	4614      	mov	r4, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <__assert_func+0x2c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	68d8      	ldr	r0, [r3, #12]
 800b0b6:	b14c      	cbz	r4, 800b0cc <__assert_func+0x24>
 800b0b8:	4b07      	ldr	r3, [pc, #28]	@ (800b0d8 <__assert_func+0x30>)
 800b0ba:	9100      	str	r1, [sp, #0]
 800b0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0c0:	4906      	ldr	r1, [pc, #24]	@ (800b0dc <__assert_func+0x34>)
 800b0c2:	462b      	mov	r3, r5
 800b0c4:	f000 f870 	bl	800b1a8 <fiprintf>
 800b0c8:	f000 f880 	bl	800b1cc <abort>
 800b0cc:	4b04      	ldr	r3, [pc, #16]	@ (800b0e0 <__assert_func+0x38>)
 800b0ce:	461c      	mov	r4, r3
 800b0d0:	e7f3      	b.n	800b0ba <__assert_func+0x12>
 800b0d2:	bf00      	nop
 800b0d4:	2400008c 	.word	0x2400008c
 800b0d8:	0800bb1e 	.word	0x0800bb1e
 800b0dc:	0800bb2b 	.word	0x0800bb2b
 800b0e0:	0800bb59 	.word	0x0800bb59

0800b0e4 <_calloc_r>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	fba1 5402 	umull	r5, r4, r1, r2
 800b0ea:	b934      	cbnz	r4, 800b0fa <_calloc_r+0x16>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	f7ff f915 	bl	800a31c <_malloc_r>
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	b928      	cbnz	r0, 800b102 <_calloc_r+0x1e>
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	220c      	movs	r2, #12
 800b0fc:	6002      	str	r2, [r0, #0]
 800b0fe:	2600      	movs	r6, #0
 800b100:	e7f9      	b.n	800b0f6 <_calloc_r+0x12>
 800b102:	462a      	mov	r2, r5
 800b104:	4621      	mov	r1, r4
 800b106:	f7fe fa2f 	bl	8009568 <memset>
 800b10a:	e7f4      	b.n	800b0f6 <_calloc_r+0x12>

0800b10c <__ascii_mbtowc>:
 800b10c:	b082      	sub	sp, #8
 800b10e:	b901      	cbnz	r1, 800b112 <__ascii_mbtowc+0x6>
 800b110:	a901      	add	r1, sp, #4
 800b112:	b142      	cbz	r2, 800b126 <__ascii_mbtowc+0x1a>
 800b114:	b14b      	cbz	r3, 800b12a <__ascii_mbtowc+0x1e>
 800b116:	7813      	ldrb	r3, [r2, #0]
 800b118:	600b      	str	r3, [r1, #0]
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	1e10      	subs	r0, r2, #0
 800b11e:	bf18      	it	ne
 800b120:	2001      	movne	r0, #1
 800b122:	b002      	add	sp, #8
 800b124:	4770      	bx	lr
 800b126:	4610      	mov	r0, r2
 800b128:	e7fb      	b.n	800b122 <__ascii_mbtowc+0x16>
 800b12a:	f06f 0001 	mvn.w	r0, #1
 800b12e:	e7f8      	b.n	800b122 <__ascii_mbtowc+0x16>

0800b130 <_realloc_r>:
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	4607      	mov	r7, r0
 800b136:	4614      	mov	r4, r2
 800b138:	460d      	mov	r5, r1
 800b13a:	b921      	cbnz	r1, 800b146 <_realloc_r+0x16>
 800b13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b140:	4611      	mov	r1, r2
 800b142:	f7ff b8eb 	b.w	800a31c <_malloc_r>
 800b146:	b92a      	cbnz	r2, 800b154 <_realloc_r+0x24>
 800b148:	f7ff f874 	bl	800a234 <_free_r>
 800b14c:	4625      	mov	r5, r4
 800b14e:	4628      	mov	r0, r5
 800b150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b154:	f000 f841 	bl	800b1da <_malloc_usable_size_r>
 800b158:	4284      	cmp	r4, r0
 800b15a:	4606      	mov	r6, r0
 800b15c:	d802      	bhi.n	800b164 <_realloc_r+0x34>
 800b15e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b162:	d8f4      	bhi.n	800b14e <_realloc_r+0x1e>
 800b164:	4621      	mov	r1, r4
 800b166:	4638      	mov	r0, r7
 800b168:	f7ff f8d8 	bl	800a31c <_malloc_r>
 800b16c:	4680      	mov	r8, r0
 800b16e:	b908      	cbnz	r0, 800b174 <_realloc_r+0x44>
 800b170:	4645      	mov	r5, r8
 800b172:	e7ec      	b.n	800b14e <_realloc_r+0x1e>
 800b174:	42b4      	cmp	r4, r6
 800b176:	4622      	mov	r2, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	bf28      	it	cs
 800b17c:	4632      	movcs	r2, r6
 800b17e:	f7ff ff85 	bl	800b08c <memcpy>
 800b182:	4629      	mov	r1, r5
 800b184:	4638      	mov	r0, r7
 800b186:	f7ff f855 	bl	800a234 <_free_r>
 800b18a:	e7f1      	b.n	800b170 <_realloc_r+0x40>

0800b18c <__ascii_wctomb>:
 800b18c:	4603      	mov	r3, r0
 800b18e:	4608      	mov	r0, r1
 800b190:	b141      	cbz	r1, 800b1a4 <__ascii_wctomb+0x18>
 800b192:	2aff      	cmp	r2, #255	@ 0xff
 800b194:	d904      	bls.n	800b1a0 <__ascii_wctomb+0x14>
 800b196:	228a      	movs	r2, #138	@ 0x8a
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295
 800b19e:	4770      	bx	lr
 800b1a0:	700a      	strb	r2, [r1, #0]
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <fiprintf>:
 800b1a8:	b40e      	push	{r1, r2, r3}
 800b1aa:	b503      	push	{r0, r1, lr}
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	4805      	ldr	r0, [pc, #20]	@ (800b1c8 <fiprintf+0x20>)
 800b1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b6:	6800      	ldr	r0, [r0, #0]
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	f000 f83f 	bl	800b23c <_vfiprintf_r>
 800b1be:	b002      	add	sp, #8
 800b1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c4:	b003      	add	sp, #12
 800b1c6:	4770      	bx	lr
 800b1c8:	2400008c 	.word	0x2400008c

0800b1cc <abort>:
 800b1cc:	b508      	push	{r3, lr}
 800b1ce:	2006      	movs	r0, #6
 800b1d0:	f000 f974 	bl	800b4bc <raise>
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	f7f7 ff5d 	bl	8003094 <_exit>

0800b1da <_malloc_usable_size_r>:
 800b1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1de:	1f18      	subs	r0, r3, #4
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bfbc      	itt	lt
 800b1e4:	580b      	ldrlt	r3, [r1, r0]
 800b1e6:	18c0      	addlt	r0, r0, r3
 800b1e8:	4770      	bx	lr

0800b1ea <__sfputc_r>:
 800b1ea:	6893      	ldr	r3, [r2, #8]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	b410      	push	{r4}
 800b1f2:	6093      	str	r3, [r2, #8]
 800b1f4:	da08      	bge.n	800b208 <__sfputc_r+0x1e>
 800b1f6:	6994      	ldr	r4, [r2, #24]
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	db01      	blt.n	800b200 <__sfputc_r+0x16>
 800b1fc:	290a      	cmp	r1, #10
 800b1fe:	d103      	bne.n	800b208 <__sfputc_r+0x1e>
 800b200:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b204:	f7fe b91b 	b.w	800943e <__swbuf_r>
 800b208:	6813      	ldr	r3, [r2, #0]
 800b20a:	1c58      	adds	r0, r3, #1
 800b20c:	6010      	str	r0, [r2, #0]
 800b20e:	7019      	strb	r1, [r3, #0]
 800b210:	4608      	mov	r0, r1
 800b212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <__sfputs_r>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	4614      	mov	r4, r2
 800b220:	18d5      	adds	r5, r2, r3
 800b222:	42ac      	cmp	r4, r5
 800b224:	d101      	bne.n	800b22a <__sfputs_r+0x12>
 800b226:	2000      	movs	r0, #0
 800b228:	e007      	b.n	800b23a <__sfputs_r+0x22>
 800b22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b22e:	463a      	mov	r2, r7
 800b230:	4630      	mov	r0, r6
 800b232:	f7ff ffda 	bl	800b1ea <__sfputc_r>
 800b236:	1c43      	adds	r3, r0, #1
 800b238:	d1f3      	bne.n	800b222 <__sfputs_r+0xa>
 800b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b23c <_vfiprintf_r>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	460d      	mov	r5, r1
 800b242:	b09d      	sub	sp, #116	@ 0x74
 800b244:	4614      	mov	r4, r2
 800b246:	4698      	mov	r8, r3
 800b248:	4606      	mov	r6, r0
 800b24a:	b118      	cbz	r0, 800b254 <_vfiprintf_r+0x18>
 800b24c:	6a03      	ldr	r3, [r0, #32]
 800b24e:	b90b      	cbnz	r3, 800b254 <_vfiprintf_r+0x18>
 800b250:	f7fd fffc 	bl	800924c <__sinit>
 800b254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x2a>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x2a>
 800b260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b262:	f7fe f9fe 	bl	8009662 <__retarget_lock_acquire_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	071b      	lsls	r3, r3, #28
 800b26a:	d501      	bpl.n	800b270 <_vfiprintf_r+0x34>
 800b26c:	692b      	ldr	r3, [r5, #16]
 800b26e:	b99b      	cbnz	r3, 800b298 <_vfiprintf_r+0x5c>
 800b270:	4629      	mov	r1, r5
 800b272:	4630      	mov	r0, r6
 800b274:	f7fe f922 	bl	80094bc <__swsetup_r>
 800b278:	b170      	cbz	r0, 800b298 <_vfiprintf_r+0x5c>
 800b27a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b27c:	07dc      	lsls	r4, r3, #31
 800b27e:	d504      	bpl.n	800b28a <_vfiprintf_r+0x4e>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	b01d      	add	sp, #116	@ 0x74
 800b286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	0598      	lsls	r0, r3, #22
 800b28e:	d4f7      	bmi.n	800b280 <_vfiprintf_r+0x44>
 800b290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b292:	f7fe f9e7 	bl	8009664 <__retarget_lock_release_recursive>
 800b296:	e7f3      	b.n	800b280 <_vfiprintf_r+0x44>
 800b298:	2300      	movs	r3, #0
 800b29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29c:	2320      	movs	r3, #32
 800b29e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a6:	2330      	movs	r3, #48	@ 0x30
 800b2a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b458 <_vfiprintf_r+0x21c>
 800b2ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2b0:	f04f 0901 	mov.w	r9, #1
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	469a      	mov	sl, r3
 800b2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2bc:	b10a      	cbz	r2, 800b2c2 <_vfiprintf_r+0x86>
 800b2be:	2a25      	cmp	r2, #37	@ 0x25
 800b2c0:	d1f9      	bne.n	800b2b6 <_vfiprintf_r+0x7a>
 800b2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c6:	d00b      	beq.n	800b2e0 <_vfiprintf_r+0xa4>
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f7ff ffa2 	bl	800b218 <__sfputs_r>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	f000 80a7 	beq.w	800b428 <_vfiprintf_r+0x1ec>
 800b2da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2dc:	445a      	add	r2, fp
 800b2de:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 809f 	beq.w	800b428 <_vfiprintf_r+0x1ec>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f4:	f10a 0a01 	add.w	sl, sl, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	9307      	str	r3, [sp, #28]
 800b2fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b300:	931a      	str	r3, [sp, #104]	@ 0x68
 800b302:	4654      	mov	r4, sl
 800b304:	2205      	movs	r2, #5
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4853      	ldr	r0, [pc, #332]	@ (800b458 <_vfiprintf_r+0x21c>)
 800b30c:	f7f4 ffe8 	bl	80002e0 <memchr>
 800b310:	9a04      	ldr	r2, [sp, #16]
 800b312:	b9d8      	cbnz	r0, 800b34c <_vfiprintf_r+0x110>
 800b314:	06d1      	lsls	r1, r2, #27
 800b316:	bf44      	itt	mi
 800b318:	2320      	movmi	r3, #32
 800b31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b31e:	0713      	lsls	r3, r2, #28
 800b320:	bf44      	itt	mi
 800b322:	232b      	movmi	r3, #43	@ 0x2b
 800b324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b328:	f89a 3000 	ldrb.w	r3, [sl]
 800b32c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b32e:	d015      	beq.n	800b35c <_vfiprintf_r+0x120>
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	4654      	mov	r4, sl
 800b334:	2000      	movs	r0, #0
 800b336:	f04f 0c0a 	mov.w	ip, #10
 800b33a:	4621      	mov	r1, r4
 800b33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b340:	3b30      	subs	r3, #48	@ 0x30
 800b342:	2b09      	cmp	r3, #9
 800b344:	d94b      	bls.n	800b3de <_vfiprintf_r+0x1a2>
 800b346:	b1b0      	cbz	r0, 800b376 <_vfiprintf_r+0x13a>
 800b348:	9207      	str	r2, [sp, #28]
 800b34a:	e014      	b.n	800b376 <_vfiprintf_r+0x13a>
 800b34c:	eba0 0308 	sub.w	r3, r0, r8
 800b350:	fa09 f303 	lsl.w	r3, r9, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	9304      	str	r3, [sp, #16]
 800b358:	46a2      	mov	sl, r4
 800b35a:	e7d2      	b.n	800b302 <_vfiprintf_r+0xc6>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	1d19      	adds	r1, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9103      	str	r1, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfbb      	ittet	lt
 800b368:	425b      	neglt	r3, r3
 800b36a:	f042 0202 	orrlt.w	r2, r2, #2
 800b36e:	9307      	strge	r3, [sp, #28]
 800b370:	9307      	strlt	r3, [sp, #28]
 800b372:	bfb8      	it	lt
 800b374:	9204      	strlt	r2, [sp, #16]
 800b376:	7823      	ldrb	r3, [r4, #0]
 800b378:	2b2e      	cmp	r3, #46	@ 0x2e
 800b37a:	d10a      	bne.n	800b392 <_vfiprintf_r+0x156>
 800b37c:	7863      	ldrb	r3, [r4, #1]
 800b37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b380:	d132      	bne.n	800b3e8 <_vfiprintf_r+0x1ac>
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	1d1a      	adds	r2, r3, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	9203      	str	r2, [sp, #12]
 800b38a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b38e:	3402      	adds	r4, #2
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b468 <_vfiprintf_r+0x22c>
 800b396:	7821      	ldrb	r1, [r4, #0]
 800b398:	2203      	movs	r2, #3
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7f4 ffa0 	bl	80002e0 <memchr>
 800b3a0:	b138      	cbz	r0, 800b3b2 <_vfiprintf_r+0x176>
 800b3a2:	9b04      	ldr	r3, [sp, #16]
 800b3a4:	eba0 000a 	sub.w	r0, r0, sl
 800b3a8:	2240      	movs	r2, #64	@ 0x40
 800b3aa:	4082      	lsls	r2, r0
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	3401      	adds	r4, #1
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b6:	4829      	ldr	r0, [pc, #164]	@ (800b45c <_vfiprintf_r+0x220>)
 800b3b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3bc:	2206      	movs	r2, #6
 800b3be:	f7f4 ff8f 	bl	80002e0 <memchr>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d03f      	beq.n	800b446 <_vfiprintf_r+0x20a>
 800b3c6:	4b26      	ldr	r3, [pc, #152]	@ (800b460 <_vfiprintf_r+0x224>)
 800b3c8:	bb1b      	cbnz	r3, 800b412 <_vfiprintf_r+0x1d6>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	3307      	adds	r3, #7
 800b3ce:	f023 0307 	bic.w	r3, r3, #7
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	9303      	str	r3, [sp, #12]
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	443b      	add	r3, r7
 800b3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3dc:	e76a      	b.n	800b2b4 <_vfiprintf_r+0x78>
 800b3de:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	e7a8      	b.n	800b33a <_vfiprintf_r+0xfe>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fa:	3a30      	subs	r2, #48	@ 0x30
 800b3fc:	2a09      	cmp	r2, #9
 800b3fe:	d903      	bls.n	800b408 <_vfiprintf_r+0x1cc>
 800b400:	2b00      	cmp	r3, #0
 800b402:	d0c6      	beq.n	800b392 <_vfiprintf_r+0x156>
 800b404:	9105      	str	r1, [sp, #20]
 800b406:	e7c4      	b.n	800b392 <_vfiprintf_r+0x156>
 800b408:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40c:	4604      	mov	r4, r0
 800b40e:	2301      	movs	r3, #1
 800b410:	e7f0      	b.n	800b3f4 <_vfiprintf_r+0x1b8>
 800b412:	ab03      	add	r3, sp, #12
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	462a      	mov	r2, r5
 800b418:	4b12      	ldr	r3, [pc, #72]	@ (800b464 <_vfiprintf_r+0x228>)
 800b41a:	a904      	add	r1, sp, #16
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7fd fae3 	bl	80089e8 <_printf_float>
 800b422:	4607      	mov	r7, r0
 800b424:	1c78      	adds	r0, r7, #1
 800b426:	d1d6      	bne.n	800b3d6 <_vfiprintf_r+0x19a>
 800b428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42a:	07d9      	lsls	r1, r3, #31
 800b42c:	d405      	bmi.n	800b43a <_vfiprintf_r+0x1fe>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	059a      	lsls	r2, r3, #22
 800b432:	d402      	bmi.n	800b43a <_vfiprintf_r+0x1fe>
 800b434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b436:	f7fe f915 	bl	8009664 <__retarget_lock_release_recursive>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	065b      	lsls	r3, r3, #25
 800b43e:	f53f af1f 	bmi.w	800b280 <_vfiprintf_r+0x44>
 800b442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b444:	e71e      	b.n	800b284 <_vfiprintf_r+0x48>
 800b446:	ab03      	add	r3, sp, #12
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	462a      	mov	r2, r5
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <_vfiprintf_r+0x228>)
 800b44e:	a904      	add	r1, sp, #16
 800b450:	4630      	mov	r0, r6
 800b452:	f7fd fd51 	bl	8008ef8 <_printf_i>
 800b456:	e7e4      	b.n	800b422 <_vfiprintf_r+0x1e6>
 800b458:	0800bb05 	.word	0x0800bb05
 800b45c:	0800bb0f 	.word	0x0800bb0f
 800b460:	080089e9 	.word	0x080089e9
 800b464:	0800b219 	.word	0x0800b219
 800b468:	0800bb0b 	.word	0x0800bb0b

0800b46c <_raise_r>:
 800b46c:	291f      	cmp	r1, #31
 800b46e:	b538      	push	{r3, r4, r5, lr}
 800b470:	4605      	mov	r5, r0
 800b472:	460c      	mov	r4, r1
 800b474:	d904      	bls.n	800b480 <_raise_r+0x14>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	f04f 30ff 	mov.w	r0, #4294967295
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b482:	b112      	cbz	r2, 800b48a <_raise_r+0x1e>
 800b484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b488:	b94b      	cbnz	r3, 800b49e <_raise_r+0x32>
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f830 	bl	800b4f0 <_getpid_r>
 800b490:	4622      	mov	r2, r4
 800b492:	4601      	mov	r1, r0
 800b494:	4628      	mov	r0, r5
 800b496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b49a:	f000 b817 	b.w	800b4cc <_kill_r>
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d00a      	beq.n	800b4b8 <_raise_r+0x4c>
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	d103      	bne.n	800b4ae <_raise_r+0x42>
 800b4a6:	2316      	movs	r3, #22
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7e7      	b.n	800b47e <_raise_r+0x12>
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4798      	blx	r3
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e7e0      	b.n	800b47e <_raise_r+0x12>

0800b4bc <raise>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <raise+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f7ff bfd3 	b.w	800b46c <_raise_r>
 800b4c6:	bf00      	nop
 800b4c8:	2400008c 	.word	0x2400008c

0800b4cc <_kill_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	@ (800b4ec <_kill_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f7 fdd3 	bl	8003084 <_kill>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_kill_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_kill_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	24000c88 	.word	0x24000c88

0800b4f0 <_getpid_r>:
 800b4f0:	f7f7 bdc6 	b.w	8003080 <_getpid>

0800b4f4 <sqrtf>:
 800b4f4:	b508      	push	{r3, lr}
 800b4f6:	ed2d 8b02 	vpush	{d8}
 800b4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800b4fe:	f000 f9c4 	bl	800b88a <__ieee754_sqrtf>
 800b502:	eeb4 8a48 	vcmp.f32	s16, s16
 800b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50a:	d60c      	bvs.n	800b526 <sqrtf+0x32>
 800b50c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b52c <sqrtf+0x38>
 800b510:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b518:	d505      	bpl.n	800b526 <sqrtf+0x32>
 800b51a:	f7fe f877 	bl	800960c <__errno>
 800b51e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b522:	2321      	movs	r3, #33	@ 0x21
 800b524:	6003      	str	r3, [r0, #0]
 800b526:	ecbd 8b02 	vpop	{d8}
 800b52a:	bd08      	pop	{r3, pc}
 800b52c:	00000000 	.word	0x00000000

0800b530 <sinf_poly>:
 800b530:	07cb      	lsls	r3, r1, #31
 800b532:	d412      	bmi.n	800b55a <sinf_poly+0x2a>
 800b534:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b538:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800b53c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800b540:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b544:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800b548:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b54c:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b550:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b554:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b558:	4770      	bx	lr
 800b55a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800b55e:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b562:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800b566:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800b56a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b56e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800b572:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b576:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800b57a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b57e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b582:	e7e5      	b.n	800b550 <sinf_poly+0x20>
 800b584:	0000      	movs	r0, r0
	...

0800b588 <sinf>:
 800b588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b58a:	ee10 4a10 	vmov	r4, s0
 800b58e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b592:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800b596:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b59a:	eef0 7a40 	vmov.f32	s15, s0
 800b59e:	d218      	bcs.n	800b5d2 <sinf+0x4a>
 800b5a0:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b5a4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800b5a8:	d20a      	bcs.n	800b5c0 <sinf+0x38>
 800b5aa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b5ae:	d103      	bne.n	800b5b8 <sinf+0x30>
 800b5b0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800b5b4:	ed8d 1a01 	vstr	s2, [sp, #4]
 800b5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800b5bc:	b003      	add	sp, #12
 800b5be:	bd30      	pop	{r4, r5, pc}
 800b5c0:	483b      	ldr	r0, [pc, #236]	@ (800b6b0 <sinf+0x128>)
 800b5c2:	eeb0 0b46 	vmov.f64	d0, d6
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	b003      	add	sp, #12
 800b5ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ce:	f7ff bfaf 	b.w	800b530 <sinf_poly>
 800b5d2:	f240 422e 	movw	r2, #1070	@ 0x42e
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d824      	bhi.n	800b624 <sinf+0x9c>
 800b5da:	4b35      	ldr	r3, [pc, #212]	@ (800b6b0 <sinf+0x128>)
 800b5dc:	ed93 7b08 	vldr	d7, [r3, #32]
 800b5e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b5e8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800b5ec:	ee17 1a90 	vmov	r1, s15
 800b5f0:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800b5f4:	1609      	asrs	r1, r1, #24
 800b5f6:	ee07 1a90 	vmov	s15, r1
 800b5fa:	f001 0203 	and.w	r2, r1, #3
 800b5fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b602:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b606:	ed92 0b00 	vldr	d0, [r2]
 800b60a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800b60e:	f011 0f02 	tst.w	r1, #2
 800b612:	eea5 6b47 	vfms.f64	d6, d5, d7
 800b616:	bf08      	it	eq
 800b618:	4618      	moveq	r0, r3
 800b61a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b61e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b622:	e7d1      	b.n	800b5c8 <sinf+0x40>
 800b624:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800b628:	d237      	bcs.n	800b69a <sinf+0x112>
 800b62a:	4922      	ldr	r1, [pc, #136]	@ (800b6b4 <sinf+0x12c>)
 800b62c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800b630:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800b634:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800b638:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800b63c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b640:	6a10      	ldr	r0, [r2, #32]
 800b642:	6912      	ldr	r2, [r2, #16]
 800b644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b648:	40ab      	lsls	r3, r5
 800b64a:	fba0 5003 	umull	r5, r0, r0, r3
 800b64e:	4359      	muls	r1, r3
 800b650:	fbe3 0102 	umlal	r0, r1, r3, r2
 800b654:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800b658:	0f9d      	lsrs	r5, r3, #30
 800b65a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b65e:	1ac9      	subs	r1, r1, r3
 800b660:	f7f5 f824 	bl	80006ac <__aeabi_l2d>
 800b664:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800b668:	4b11      	ldr	r3, [pc, #68]	@ (800b6b0 <sinf+0x128>)
 800b66a:	f004 0203 	and.w	r2, r4, #3
 800b66e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b672:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800b6a8 <sinf+0x120>
 800b676:	ed92 0b00 	vldr	d0, [r2]
 800b67a:	ec41 0b17 	vmov	d7, r0, r1
 800b67e:	f014 0f02 	tst.w	r4, #2
 800b682:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b686:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800b68a:	4629      	mov	r1, r5
 800b68c:	bf08      	it	eq
 800b68e:	4618      	moveq	r0, r3
 800b690:	ee27 1b07 	vmul.f64	d1, d7, d7
 800b694:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b698:	e796      	b.n	800b5c8 <sinf+0x40>
 800b69a:	b003      	add	sp, #12
 800b69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a0:	f000 b8e4 	b.w	800b86c <__math_invalidf>
 800b6a4:	f3af 8000 	nop.w
 800b6a8:	54442d18 	.word	0x54442d18
 800b6ac:	3c1921fb 	.word	0x3c1921fb
 800b6b0:	08012cc8 	.word	0x08012cc8
 800b6b4:	08012c64 	.word	0x08012c64

0800b6b8 <sinf_poly>:
 800b6b8:	07cb      	lsls	r3, r1, #31
 800b6ba:	d412      	bmi.n	800b6e2 <sinf_poly+0x2a>
 800b6bc:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b6c0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800b6c4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800b6c8:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b6cc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800b6d0:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b6d4:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b6d8:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b6dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b6e0:	4770      	bx	lr
 800b6e2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800b6e6:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b6ea:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800b6ee:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800b6f2:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b6f6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800b6fa:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b6fe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800b702:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b706:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b70a:	e7e5      	b.n	800b6d8 <sinf_poly+0x20>
 800b70c:	0000      	movs	r0, r0
	...

0800b710 <cosf>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	ee10 4a10 	vmov	r4, s0
 800b716:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b71a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800b71e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800b722:	d21f      	bcs.n	800b764 <cosf+0x54>
 800b724:	ee27 7b07 	vmul.f64	d7, d7, d7
 800b728:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800b72c:	f0c0 8082 	bcc.w	800b834 <cosf+0x124>
 800b730:	ee27 4b07 	vmul.f64	d4, d7, d7
 800b734:	4b44      	ldr	r3, [pc, #272]	@ (800b848 <cosf+0x138>)
 800b736:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800b73a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800b73e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800b742:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b746:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800b74a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800b74e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800b752:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b756:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b75a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800b75e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	f240 422e 	movw	r2, #1070	@ 0x42e
 800b768:	4293      	cmp	r3, r2
 800b76a:	d829      	bhi.n	800b7c0 <cosf+0xb0>
 800b76c:	4b36      	ldr	r3, [pc, #216]	@ (800b848 <cosf+0x138>)
 800b76e:	ed93 6b08 	vldr	d6, [r3, #32]
 800b772:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b776:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800b77a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800b77e:	ee16 1a90 	vmov	r1, s13
 800b782:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800b786:	1609      	asrs	r1, r1, #24
 800b788:	ee06 1a90 	vmov	s13, r1
 800b78c:	f001 0203 	and.w	r2, r1, #3
 800b790:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b794:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b798:	ed92 0b00 	vldr	d0, [r2]
 800b79c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800b7a0:	f011 0f02 	tst.w	r1, #2
 800b7a4:	f081 0101 	eor.w	r1, r1, #1
 800b7a8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800b7ac:	bf08      	it	eq
 800b7ae:	4618      	moveq	r0, r3
 800b7b0:	ee27 1b07 	vmul.f64	d1, d7, d7
 800b7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b7bc:	f7ff bf7c 	b.w	800b6b8 <sinf_poly>
 800b7c0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800b7c4:	d232      	bcs.n	800b82c <cosf+0x11c>
 800b7c6:	4921      	ldr	r1, [pc, #132]	@ (800b84c <cosf+0x13c>)
 800b7c8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800b7cc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800b7d0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800b7d4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800b7d8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b7dc:	6a10      	ldr	r0, [r2, #32]
 800b7de:	6912      	ldr	r2, [r2, #16]
 800b7e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7e4:	40ab      	lsls	r3, r5
 800b7e6:	fba0 5003 	umull	r5, r0, r0, r3
 800b7ea:	4359      	muls	r1, r3
 800b7ec:	fbe3 0102 	umlal	r0, r1, r3, r2
 800b7f0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800b7f4:	0f9d      	lsrs	r5, r3, #30
 800b7f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b7fa:	1ac9      	subs	r1, r1, r3
 800b7fc:	f7f4 ff56 	bl	80006ac <__aeabi_l2d>
 800b800:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800b804:	4b10      	ldr	r3, [pc, #64]	@ (800b848 <cosf+0x138>)
 800b806:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800b840 <cosf+0x130>
 800b80a:	ec41 0b17 	vmov	d7, r0, r1
 800b80e:	f004 0203 	and.w	r2, r4, #3
 800b812:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b816:	ed92 0b00 	vldr	d0, [r2]
 800b81a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b81e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800b822:	f014 0f02 	tst.w	r4, #2
 800b826:	f085 0101 	eor.w	r1, r5, #1
 800b82a:	e7bf      	b.n	800b7ac <cosf+0x9c>
 800b82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b830:	f000 b81c 	b.w	800b86c <__math_invalidf>
 800b834:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b838:	e793      	b.n	800b762 <cosf+0x52>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
 800b840:	54442d18 	.word	0x54442d18
 800b844:	3c1921fb 	.word	0x3c1921fb
 800b848:	08012cc8 	.word	0x08012cc8
 800b84c:	08012c64 	.word	0x08012c64

0800b850 <with_errnof>:
 800b850:	b510      	push	{r4, lr}
 800b852:	ed2d 8b02 	vpush	{d8}
 800b856:	eeb0 8a40 	vmov.f32	s16, s0
 800b85a:	4604      	mov	r4, r0
 800b85c:	f7fd fed6 	bl	800960c <__errno>
 800b860:	eeb0 0a48 	vmov.f32	s0, s16
 800b864:	ecbd 8b02 	vpop	{d8}
 800b868:	6004      	str	r4, [r0, #0]
 800b86a:	bd10      	pop	{r4, pc}

0800b86c <__math_invalidf>:
 800b86c:	eef0 7a40 	vmov.f32	s15, s0
 800b870:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b874:	eef4 7a67 	vcmp.f32	s15, s15
 800b878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b880:	d602      	bvs.n	800b888 <__math_invalidf+0x1c>
 800b882:	2021      	movs	r0, #33	@ 0x21
 800b884:	f7ff bfe4 	b.w	800b850 <with_errnof>
 800b888:	4770      	bx	lr

0800b88a <__ieee754_sqrtf>:
 800b88a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b88e:	4770      	bx	lr

0800b890 <_init>:
 800b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b892:	bf00      	nop
 800b894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b896:	bc08      	pop	{r3}
 800b898:	469e      	mov	lr, r3
 800b89a:	4770      	bx	lr

0800b89c <_fini>:
 800b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89e:	bf00      	nop
 800b8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a2:	bc08      	pop	{r3}
 800b8a4:	469e      	mov	lr, r3
 800b8a6:	4770      	bx	lr
