
07-ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f18  0800b048  0800b048  0000c048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f60  08011f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011f68  08011f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011f6c  08011f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f0  24000000  08011f70  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000081c  240000f0  08012060  000130f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400090c  08012060  0001390c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a3c  00000000  00000000  0001311e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000329b  00000000  00000000  0002bb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c0  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fd8  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ab6c  00000000  00000000  00031290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b406  00000000  00000000  0006bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178649  00000000  00000000  00087202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff84b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c94  00000000  00000000  001ff890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  00205524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f0 	.word	0x240000f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b030 	.word	0x0800b030

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f4 	.word	0x240000f4
 80002dc:	0800b030 	.word	0x0800b030

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000398:	4b3f      	ldr	r3, [pc, #252]	@ (8000498 <MX_ADC3_Init+0x118>)
 800039a:	4a40      	ldr	r2, [pc, #256]	@ (800049c <MX_ADC3_Init+0x11c>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800039e:	4b3e      	ldr	r3, [pc, #248]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80003b0:	4b39      	ldr	r3, [pc, #228]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003b6:	4b38      	ldr	r3, [pc, #224]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80003bc:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003be:	2204      	movs	r2, #4
 80003c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 80003c2:	4b35      	ldr	r3, [pc, #212]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 1;
 80003c8:	4b33      	ldr	r3, [pc, #204]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ce:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d4:	4b30      	ldr	r3, [pc, #192]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003da:	4b2f      	ldr	r3, [pc, #188]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003dc:	2200      	movs	r2, #0
 80003de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80003f4:	4b28      	ldr	r3, [pc, #160]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <MX_ADC3_Init+0x118>)
 80003fc:	f003 fa16 	bl	800382c <HAL_ADC_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000406:	f000 fb45 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800040a:	2301      	movs	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040e:	2306      	movs	r3, #6
 8000410:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000412:	2306      	movs	r3, #6
 8000414:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000416:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800041a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800041c:	2304      	movs	r3, #4
 800041e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	481a      	ldr	r0, [pc, #104]	@ (8000498 <MX_ADC3_Init+0x118>)
 800042e:	f003 fd9f 	bl	8003f70 <HAL_ADC_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8000438:	f000 fb2c 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <MX_ADC3_Init+0x120>)
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000440:	230c      	movs	r3, #12
 8000442:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4813      	ldr	r0, [pc, #76]	@ (8000498 <MX_ADC3_Init+0x118>)
 800044a:	f003 fd91 	bl	8003f70 <HAL_ADC_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000454:	f000 fb1e 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <MX_ADC3_Init+0x124>)
 800045a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800045c:	2312      	movs	r3, #18
 800045e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	480c      	ldr	r0, [pc, #48]	@ (8000498 <MX_ADC3_Init+0x118>)
 8000466:	f003 fd83 	bl	8003f70 <HAL_ADC_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000470:	f000 fb10 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_ADC3_Init+0x128>)
 8000476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000478:	2318      	movs	r3, #24
 800047a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_ADC3_Init+0x118>)
 8000482:	f003 fd75 	bl	8003f70 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC3_Init+0x110>
  {
    Error_Handler();
 800048c:	f000 fb02 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2400010c 	.word	0x2400010c
 800049c:	58026000 	.word	0x58026000
 80004a0:	cfb80000 	.word	0xcfb80000
 80004a4:	cb840000 	.word	0xcb840000
 80004a8:	c7520000 	.word	0xc7520000

080004ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b0b4      	sub	sp, #208	@ 0xd0
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	22c0      	movs	r2, #192	@ 0xc0
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f00a f939 	bl	800a734 <memset>
  if(adcHandle->Instance==ADC3)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a28      	ldr	r2, [pc, #160]	@ (8000568 <HAL_ADC_MspInit+0xbc>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d149      	bne.n	8000560 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80004d0:	f04f 0300 	mov.w	r3, #0
 80004d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 80004d8:	230a      	movs	r3, #10
 80004da:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 80004dc:	233c      	movs	r3, #60	@ 0x3c
 80004de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80004e0:	2302      	movs	r3, #2
 80004e2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80004e4:	2302      	movs	r3, #2
 80004e6:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80004ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80004f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f6:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80004fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4618      	mov	r0, r3
 800050a:	f005 feb1 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000514:	f000 fabe 	bl	8000a94 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800051e:	4a13      	ldr	r2, [pc, #76]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 8000520:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 800052a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800052e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 8000538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_ADC_MspInit+0xc0>)
 8000548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000554:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000558:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800055c:	f002 feea 	bl	8003334 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000560:	bf00      	nop
 8000562:	37d0      	adds	r7, #208	@ 0xd0
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	58026000 	.word	0x58026000
 800056c:	58024400 	.word	0x58024400

08000570 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	4b3a      	ldr	r3, [pc, #232]	@ (8000670 <MX_GPIO_Init+0x100>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800058c:	4a38      	ldr	r2, [pc, #224]	@ (8000670 <MX_GPIO_Init+0x100>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000596:	4b36      	ldr	r3, [pc, #216]	@ (8000670 <MX_GPIO_Init+0x100>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005aa:	4a31      	ldr	r2, [pc, #196]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	4a29      	ldr	r2, [pc, #164]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005d2:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e6:	4a22      	ldr	r2, [pc, #136]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_GPIO_Init+0x100>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2108      	movs	r1, #8
 8000602:	481c      	ldr	r0, [pc, #112]	@ (8000674 <MX_GPIO_Init+0x104>)
 8000604:	f004 fe10 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800060e:	4819      	ldr	r0, [pc, #100]	@ (8000674 <MX_GPIO_Init+0x104>)
 8000610:	f004 fe0a 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 8000614:	2308      	movs	r3, #8
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	@ (8000674 <MX_GPIO_Init+0x104>)
 800062c:	f004 fc34 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <MX_GPIO_Init+0x108>)
 8000646:	f004 fc27 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800064a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_GPIO_Init+0x104>)
 8000664:	f004 fc18 	bl	8004e98 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58024400 	.word	0x58024400
 8000674:	58021000 	.word	0x58021000
 8000678:	58020800 	.word	0x58020800

0800067c <MPU_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MPU_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800068e:	f004 fb8b 	bl	8004da8 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000692:	2301      	movs	r3, #1
 8000694:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 8000696:	2300      	movs	r3, #0
 8000698:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 800069a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 800069e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006a0:	231b      	movs	r3, #27
 80006a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006a4:	2300      	movs	r3, #0
 80006a6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006bc:	2300      	movs	r3, #0
 80006be:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006c0:	463b      	mov	r3, r7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fba8 	bl	8004e18 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006d0:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 80006d6:	2316      	movs	r3, #22
 80006d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 80006da:	2305      	movs	r3, #5
 80006dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 80006de:	2301      	movs	r3, #1
 80006e0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fb8d 	bl	8004e18 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006fe:	2004      	movs	r0, #4
 8000700:	f004 fb6a 	bl	8004dd8 <HAL_MPU_Enable>
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000712:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11b      	bne.n	8000756 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800072a:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000732:	f3bf 8f4f 	dsb	sy
}
 8000736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000738:	f3bf 8f6f 	isb	sy
}
 800073c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a28      	ldr	r2, [pc, #160]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000756:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d138      	bne.n	80007d6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 8000766:	2200      	movs	r2, #0
 8000768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 8000774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000778:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	0b5b      	lsrs	r3, r3, #13
 800077e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000782:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800078c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	015a      	lsls	r2, r3, #5
 8000792:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000796:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800079c:	4911      	ldr	r1, [pc, #68]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 800079e:	4313      	orrs	r3, r2
 80007a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1ef      	bne.n	800078e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	60ba      	str	r2, [r7, #8]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e5      	bne.n	8000784 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
}
 80007bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <CPU_CACHE_Enable+0xd8>)
 80007c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
}
 80007ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d0:	f3bf 8f6f 	isb	sy
}
 80007d4:	e000      	b.n	80007d8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007d6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <LED_Blink>:

void LED_Blink(uint32_t delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2108      	movs	r1, #8
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <LED_Blink+0x38>)
 80007f6:	f004 fd17 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_Delay(delay - 1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fd36 	bl	8003270 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2108      	movs	r1, #8
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <LED_Blink+0x38>)
 800080a:	f004 fd0d 	bl	8005228 <HAL_GPIO_WritePin>
	HAL_Delay(500-1);
 800080e:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8000812:	f002 fd2d 	bl	8003270 <HAL_Delay>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58021000 	.word	0x58021000

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  #ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
  #endif
  MPU_Config();
 800082a:	f7ff ff27 	bl	800067c <MPU_Config>
  CPU_CACHE_Enable();
 800082e:	f7ff ff6d 	bl	800070c <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f002 fc8b 	bl	800314c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f87f 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f7ff fe99 	bl	8000570 <MX_GPIO_Init>
  MX_ADC3_Init();
 800083e:	f7ff fd9f 	bl	8000380 <MX_ADC3_Init>
  MX_SPI4_Init();
 8000842:	f000 f92f 	bl	8000aa4 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000846:	f000 fb37 	bl	8000eb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_Test();
 800084a:	f000 fc4f 	bl	80010ec <LCD_Test>

	/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800084e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000852:	2100      	movs	r1, #0
 8000854:	4830      	ldr	r0, [pc, #192]	@ (8000918 <main+0xf4>)
 8000856:	f004 f95f 	bl	8004b18 <HAL_ADCEx_Calibration_Start>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <main+0x40>
  {
    /* Calibration Error */
    Error_Handler();
 8000860:	f000 f918 	bl	8000a94 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for(uint32_t i = 0;i<(sizeof(uhADCxConvertedValue)/sizeof(uint16_t));i++)
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
 8000868:	e033      	b.n	80008d2 <main+0xae>
		{
			/*##-1- Start the conversion process #######################################*/
			if (HAL_ADC_Start(&hadc3) != HAL_OK)
 800086a:	482b      	ldr	r0, [pc, #172]	@ (8000918 <main+0xf4>)
 800086c:	f003 f980 	bl	8003b70 <HAL_ADC_Start>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0x56>
			{
				/* Start Conversation Error */
				Error_Handler();
 8000876:	f000 f90d 	bl	8000a94 <Error_Handler>
			}
			/*##-2- Wait for the end of conversion #####################################*/
			/*  For simplicity reasons, this example is just waiting till the end of the
					conversion, but application may perform other tasks while conversion
					operation is ongoing. */
			if (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 800087a:	2164      	movs	r1, #100	@ 0x64
 800087c:	4826      	ldr	r0, [pc, #152]	@ (8000918 <main+0xf4>)
 800087e:	f003 fa75 	bl	8003d6c <HAL_ADC_PollForConversion>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <main+0x6a>
			{
				/* End Of Conversion flag not set on time */
				Error_Handler();
 8000888:	f000 f904 	bl	8000a94 <Error_Handler>
 800088c:	e01e      	b.n	80008cc <main+0xa8>
			}
			else
			{
				/* ADC conversion completed */
				/*##-3- Get the converted value of regular channel  ########################*/
				uhADCxConvertedValue[i] = HAL_ADC_GetValue(&hadc3);
 800088e:	4822      	ldr	r0, [pc, #136]	@ (8000918 <main+0xf4>)
 8000890:	f003 fb60 	bl	8003f54 <HAL_ADC_GetValue>
 8000894:	4603      	mov	r3, r0
 8000896:	b299      	uxth	r1, r3
 8000898:	4a20      	ldr	r2, [pc, #128]	@ (800091c <main+0xf8>)
 800089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				/* Convert the result from 16 bit value to the voltage dimension (mV unit) */
				/* Vref = 3.3 V */
				uhADCxInputVoltage[i] = ((uhADCxConvertedValue[i] * 3300) / 0xFFFF);
 80008a0:	4a1e      	ldr	r2, [pc, #120]	@ (800091c <main+0xf8>)
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <main+0xfc>)
 80008b6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ba:	441a      	add	r2, r3
 80008bc:	13d2      	asrs	r2, r2, #15
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <main+0x100>)
 80008c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint32_t i = 0;i<(sizeof(uhADCxConvertedValue)/sizeof(uint16_t));i++)
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	3301      	adds	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80008d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d9c8      	bls.n	800086a <main+0x46>
			}
		}
		HAL_ADC_Stop(&hadc3);
 80008d8:	480f      	ldr	r0, [pc, #60]	@ (8000918 <main+0xf4>)
 80008da:	f003 fa13 	bl	8003d04 <HAL_ADC_Stop>

		#define V30  (620)  // mV, V30: 0.62V,datasheet P278
		#define Avg_Slope (2) // mV/¡ãC

		adc3_inp0  = uhADCxInputVoltage[0]; // mv
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <main+0x100>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a11      	ldr	r2, [pc, #68]	@ (8000928 <main+0x104>)
 80008e4:	6013      	str	r3, [r2, #0]
		vrefint    = uhADCxInputVoltage[1]; // type. 1200mV
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <main+0x100>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	4a10      	ldr	r2, [pc, #64]	@ (800092c <main+0x108>)
 80008ec:	6013      	str	r3, [r2, #0]
		tempsensor = ((int32_t)uhADCxInputVoltage[2] - V30)/Avg_Slope + 30; // ¡ãC
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <main+0x100>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	da00      	bge.n	80008fc <main+0xd8>
 80008fa:	3301      	adds	r3, #1
 80008fc:	105b      	asrs	r3, r3, #1
 80008fe:	331e      	adds	r3, #30
 8000900:	461a      	mov	r2, r3
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <main+0x10c>)
 8000904:	601a      	str	r2, [r3, #0]
		vbat       = uhADCxInputVoltage[3] * 4;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <main+0x100>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4a09      	ldr	r2, [pc, #36]	@ (8000934 <main+0x110>)
 800090e:	6013      	str	r3, [r2, #0]
		LCD_ShowString(0, 78, ST7735Ctx.Width, 16, 12, text);
		sprintf((char *)&text, " vbat: %4dmV", vbat);
		LCD_ShowString(0, 94, ST7735Ctx.Width, 16, 12, text);
		#endif

		LED_Blink(3);
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff69 	bl	80007e8 <LED_Blink>
  {
 8000916:	e7a5      	b.n	8000864 <main+0x40>
 8000918:	2400010c 	.word	0x2400010c
 800091c:	24000170 	.word	0x24000170
 8000920:	80008001 	.word	0x80008001
 8000924:	24000178 	.word	0x24000178
 8000928:	24000188 	.word	0x24000188
 800092c:	24000194 	.word	0x24000194
 8000930:	24000190 	.word	0x24000190
 8000934:	2400018c 	.word	0x2400018c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	@ 0x78
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000942:	224c      	movs	r2, #76	@ 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f009 fef4 	bl	800a734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2220      	movs	r2, #32
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f009 feed 	bl	800a734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800095a:	2002      	movs	r0, #2
 800095c:	f004 fc7e 	bl	800525c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b48      	ldr	r3, [pc, #288]	@ (8000a88 <SystemClock_Config+0x150>)
 8000966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000968:	4a47      	ldr	r2, [pc, #284]	@ (8000a88 <SystemClock_Config+0x150>)
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000970:	4b45      	ldr	r3, [pc, #276]	@ (8000a88 <SystemClock_Config+0x150>)
 8000972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <SystemClock_Config+0x154>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a43      	ldr	r2, [pc, #268]	@ (8000a8c <SystemClock_Config+0x154>)
 8000980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <SystemClock_Config+0x154>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000992:	bf00      	nop
 8000994:	4b3d      	ldr	r3, [pc, #244]	@ (8000a8c <SystemClock_Config+0x154>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009a0:	d1f8      	bne.n	8000994 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000a90 <SystemClock_Config+0x158>)
 80009a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a8:	4a39      	ldr	r2, [pc, #228]	@ (8000a90 <SystemClock_Config+0x158>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009b2:	4b37      	ldr	r3, [pc, #220]	@ (8000a90 <SystemClock_Config+0x158>)
 80009b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <SystemClock_Config+0x154>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a30      	ldr	r2, [pc, #192]	@ (8000a8c <SystemClock_Config+0x154>)
 80009ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <SystemClock_Config+0x154>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <SystemClock_Config+0x150>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009de:	4a2a      	ldr	r2, [pc, #168]	@ (8000a88 <SystemClock_Config+0x150>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e6:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <SystemClock_Config+0x150>)
 80009e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f2:	bf00      	nop
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <SystemClock_Config+0x154>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a00:	d1f8      	bne.n	80009f4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	2302      	movs	r3, #2
 8000a12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a14:	2305      	movs	r3, #5
 8000a16:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a18:	2360      	movs	r3, #96	@ 0x60
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 fc49 	bl	80052d0 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a44:	f000 f826 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	233f      	movs	r3, #63	@ 0x3f
 8000a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a54:	2308      	movs	r3, #8
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 f888 	bl	8005b84 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000a7a:	f000 f80b 	bl	8000a94 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3778      	adds	r7, #120	@ 0x78
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	58000400 	.word	0x58000400
 8000a8c:	58024800 	.word	0x58024800
 8000a90:	58024400 	.word	0x58024400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
		LED_Blink(500);
 8000a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9c:	f7ff fea4 	bl	80007e8 <LED_Blink>
 8000aa0:	e7fa      	b.n	8000a98 <Error_Handler+0x4>
	...

08000aa4 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000aaa:	4a29      	ldr	r2, [pc, #164]	@ (8000b50 <MX_SPI4_Init+0xac>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ab0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ab8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000abc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abe:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ad2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ada:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ade:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_SPI4_Init+0xa8>)
 8000b38:	f008 f898 	bl	8008c6c <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000b42:	f7ff ffa7 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	24000198 	.word	0x24000198
 8000b50:	40013400 	.word	0x40013400

08000b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ba      	sub	sp, #232	@ 0xe8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	22c0      	movs	r2, #192	@ 0xc0
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f009 fddd 	bl	800a734 <memset>
  if(spiHandle->Instance==SPI4)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <HAL_SPI_MspInit+0xc4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d145      	bne.n	8000c10 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f005 fb69 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000ba4:	f7ff ff76 	bl	8000a94 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bae:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000bb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_SPI_MspInit+0xc8>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000be4:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <HAL_SPI_MspInit+0xcc>)
 8000c0c:	f004 f944 	bl	8004e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	37e8      	adds	r7, #232	@ 0xe8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013400 	.word	0x40013400
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58021000 	.word	0x58021000

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c30:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_MspInit+0x54>)
 8000c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000c66:	f002 fb55 	bl	8003314 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f002 fb3e 	bl	80032ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f002 faad 	bl	8003230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f009 fd1a 	bl	800a744 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24080000 	.word	0x24080000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	24000220 	.word	0x24000220
 8000d44:	24000910 	.word	0x24000910

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b43      	ldr	r3, [pc, #268]	@ (8000e5c <SystemInit+0x114>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a42      	ldr	r2, [pc, #264]	@ (8000e5c <SystemInit+0x114>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5c:	4b40      	ldr	r3, [pc, #256]	@ (8000e60 <SystemInit+0x118>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d807      	bhi.n	8000d78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d68:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <SystemInit+0x118>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 030f 	bic.w	r3, r3, #15
 8000d70:	4a3b      	ldr	r2, [pc, #236]	@ (8000e60 <SystemInit+0x118>)
 8000d72:	f043 0307 	orr.w	r3, r3, #7
 8000d76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d78:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <SystemInit+0x11c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a39      	ldr	r2, [pc, #228]	@ (8000e64 <SystemInit+0x11c>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d84:	4b37      	ldr	r3, [pc, #220]	@ (8000e64 <SystemInit+0x11c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d8a:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <SystemInit+0x11c>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4935      	ldr	r1, [pc, #212]	@ (8000e64 <SystemInit+0x11c>)
 8000d90:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <SystemInit+0x120>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <SystemInit+0x118>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <SystemInit+0x118>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 030f 	bic.w	r3, r3, #15
 8000daa:	4a2d      	ldr	r2, [pc, #180]	@ (8000e60 <SystemInit+0x118>)
 8000dac:	f043 0307 	orr.w	r3, r3, #7
 8000db0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <SystemInit+0x11c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <SystemInit+0x11c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <SystemInit+0x11c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <SystemInit+0x11c>)
 8000dc6:	4a29      	ldr	r2, [pc, #164]	@ (8000e6c <SystemInit+0x124>)
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <SystemInit+0x11c>)
 8000dcc:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <SystemInit+0x128>)
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <SystemInit+0x11c>)
 8000dd2:	4a28      	ldr	r2, [pc, #160]	@ (8000e74 <SystemInit+0x12c>)
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <SystemInit+0x11c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <SystemInit+0x11c>)
 8000dde:	4a25      	ldr	r2, [pc, #148]	@ (8000e74 <SystemInit+0x12c>)
 8000de0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <SystemInit+0x11c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <SystemInit+0x11c>)
 8000dea:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <SystemInit+0x12c>)
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <SystemInit+0x11c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <SystemInit+0x11c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <SystemInit+0x11c>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <SystemInit+0x11c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <SystemInit+0x130>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <SystemInit+0x134>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e12:	d202      	bcs.n	8000e1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <SystemInit+0x138>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <SystemInit+0x11c>)
 8000e1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d113      	bne.n	8000e50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <SystemInit+0x11c>)
 8000e2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <SystemInit+0x11c>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <SystemInit+0x13c>)
 8000e3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <SystemInit+0x11c>)
 8000e42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e46:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <SystemInit+0x11c>)
 8000e48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	52002000 	.word	0x52002000
 8000e64:	58024400 	.word	0x58024400
 8000e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e6c:	02020200 	.word	0x02020200
 8000e70:	01ff0000 	.word	0x01ff0000
 8000e74:	01010280 	.word	0x01010280
 8000e78:	5c001000 	.word	0x5c001000
 8000e7c:	ffff0000 	.word	0xffff0000
 8000e80:	51008108 	.word	0x51008108
 8000e84:	52004000 	.word	0x52004000

08000e88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <ExitRun0Mode+0x2c>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <ExitRun0Mode+0x2c>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e98:	bf00      	nop
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <ExitRun0Mode+0x2c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f9      	beq.n	8000e9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	58024800 	.word	0x58024800

08000eb8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b096      	sub	sp, #88	@ 0x58
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	222c      	movs	r2, #44	@ 0x2c
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f009 fc25 	bl	800a734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eea:	4b39      	ldr	r3, [pc, #228]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000eec:	4a39      	ldr	r2, [pc, #228]	@ (8000fd4 <MX_TIM1_Init+0x11c>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000ef2:	220b      	movs	r2, #11
 8000ef4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000efc:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000efe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f16:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f18:	f008 fd15 	bl	8009946 <HAL_TIM_PWM_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f7ff fdb7 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f3a:	f009 faa7 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f44:	f7ff fda6 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	2360      	movs	r3, #96	@ 0x60
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f54:	2308      	movs	r3, #8
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4818      	ldr	r0, [pc, #96]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000f6e:	f008 fd41 	bl	80099f4 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f78:	f7ff fd8c 	bl	8000a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000fb2:	f009 faf9 	bl	800a5a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000fbc:	f7ff fd6a 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <MX_TIM1_Init+0x118>)
 8000fc2:	f000 f82b 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000fc6:	bf00      	nop
 8000fc8:	3758      	adds	r7, #88	@ 0x58
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000224 	.word	0x24000224
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_TIM_PWM_MspInit+0x40>)
 8000fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ff0:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_TIM_PWM_MspInit+0x40>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_TIM_PWM_MspInit+0x40>)
 8000ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40010000 	.word	0x40010000
 8001018:	58024400 	.word	0x58024400

0800101c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <HAL_TIM_MspPostInit+0x6c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11f      	bne.n	800107e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_TIM_MspPostInit+0x70>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a11      	ldr	r2, [pc, #68]	@ (800108c <HAL_TIM_MspPostInit+0x70>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_TIM_MspPostInit+0x70>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800105c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001060:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800106e:	2301      	movs	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <HAL_TIM_MspPostInit+0x74>)
 800107a:	f003 ff0d 	bl	8004e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010000 	.word	0x40010000
 800108c:	58024400 	.word	0x58024400
 8001090:	58021000 	.word	0x58021000

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001098:	f7ff fef6 	bl	8000e88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800109c:	f7ff fe54 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f009 fb43 	bl	800a750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fbab 	bl	8000824 <main>
  bx  lr
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d8:	240000f0 	.word	0x240000f0
  ldr r2, =_sidata
 80010dc:	08011f70 	.word	0x08011f70
  ldr r2, =_sbss
 80010e0:	240000f0 	.word	0x240000f0
  ldr r4, =_ebss
 80010e4:	2400090c 	.word	0x2400090c

080010e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC3_IRQHandler>
	...

080010ec <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 80010f2:	4b73      	ldr	r3, [pc, #460]	@ (80012c0 <LCD_Test+0x1d4>)
 80010f4:	2203      	movs	r2, #3
 80010f6:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 80010f8:	4b71      	ldr	r3, [pc, #452]	@ (80012c0 <LCD_Test+0x1d4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 80010fe:	4b70      	ldr	r3, [pc, #448]	@ (80012c0 <LCD_Test+0x1d4>)
 8001100:	2201      	movs	r2, #1
 8001102:	735a      	strb	r2, [r3, #13]

	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001104:	496f      	ldr	r1, [pc, #444]	@ (80012c4 <LCD_Test+0x1d8>)
 8001106:	4870      	ldr	r0, [pc, #448]	@ (80012c8 <LCD_Test+0x1dc>)
 8001108:	f000 fce8 	bl	8001adc <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 800110c:	4b6f      	ldr	r3, [pc, #444]	@ (80012cc <LCD_Test+0x1e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6b      	ldr	r2, [pc, #428]	@ (80012c0 <LCD_Test+0x1d4>)
 8001112:	2105      	movs	r1, #5
 8001114:	486c      	ldr	r0, [pc, #432]	@ (80012c8 <LCD_Test+0x1dc>)
 8001116:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001118:	4b6c      	ldr	r3, [pc, #432]	@ (80012cc <LCD_Test+0x1e0>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	496c      	ldr	r1, [pc, #432]	@ (80012d0 <LCD_Test+0x1e4>)
 800111e:	486a      	ldr	r0, [pc, #424]	@ (80012c8 <LCD_Test+0x1dc>)
 8001120:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f8e4 	bl	80012f0 <LCD_SetBrightness>
	
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001128:	4b68      	ldr	r3, [pc, #416]	@ (80012cc <LCD_Test+0x1e0>)
 800112a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800112c:	4b69      	ldr	r3, [pc, #420]	@ (80012d4 <LCD_Test+0x1e8>)
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	4865      	ldr	r0, [pc, #404]	@ (80012c8 <LCD_Test+0x1dc>)
 8001134:	47a0      	blx	r4

	
  uint32_t tick = get_tick();
 8001136:	f002 f88f 	bl	8003258 <HAL_GetTick>
 800113a:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800113c:	e06a      	b.n	8001214 <LCD_Test+0x128>
	{
		delay_ms(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f002 f896 	bl	8003270 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8001144:	f002 f888 	bl	8003258 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d80f      	bhi.n	8001174 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8001154:	f002 f880 	bl	8003258 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a5c      	ldr	r2, [pc, #368]	@ (80012d8 <LCD_Test+0x1ec>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	099b      	lsrs	r3, r3, #6
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f8bf 	bl	80012f0 <LCD_SetBrightness>
 8001172:	e04f      	b.n	8001214 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8001174:	f002 f870 	bl	8003258 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001182:	4293      	cmp	r3, r2
 8001184:	d83d      	bhi.n	8001202 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8001186:	f002 f867 	bl	8003258 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001194:	4a51      	ldr	r2, [pc, #324]	@ (80012dc <LCD_Test+0x1f0>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	463b      	mov	r3, r7
 800119e:	4950      	ldr	r1, [pc, #320]	@ (80012e0 <LCD_Test+0x1f4>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 faa5 	bl	800a6f0 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 80011a6:	4b46      	ldr	r3, [pc, #280]	@ (80012c0 <LCD_Test+0x1d4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	b298      	uxth	r0, r3
 80011b0:	4b43      	ldr	r3, [pc, #268]	@ (80012c0 <LCD_Test+0x1d4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	463b      	mov	r3, r7
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2310      	movs	r3, #16
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2310      	movs	r3, #16
 80011c0:	2101      	movs	r1, #1
 80011c2:	f000 fb3d 	bl	8001840 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <LCD_Test+0x1e0>)
 80011c8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <LCD_Test+0x1d4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	1edd      	subs	r5, r3, #3
 80011d0:	f002 f842 	bl	8003258 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011de:	4a38      	ldr	r2, [pc, #224]	@ (80012c0 <LCD_Test+0x1d4>)
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a3c      	ldr	r2, [pc, #240]	@ (80012d8 <LCD_Test+0x1ec>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	09db      	lsrs	r3, r3, #7
 80011ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	462a      	mov	r2, r5
 80011fa:	2100      	movs	r1, #0
 80011fc:	4832      	ldr	r0, [pc, #200]	@ (80012c8 <LCD_Test+0x1dc>)
 80011fe:	47a0      	blx	r4
 8001200:	e008      	b.n	8001214 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8001202:	f002 f829 	bl	8003258 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001210:	4293      	cmp	r3, r2
 8001212:	d808      	bhi.n	8001226 <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001218:	4832      	ldr	r0, [pc, #200]	@ (80012e4 <LCD_Test+0x1f8>)
 800121a:	f003 ffed 	bl	80051f8 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d18c      	bne.n	800113e <LCD_Test+0x52>
 8001224:	e004      	b.n	8001230 <LCD_Test+0x144>
			break;
 8001226:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001228:	e002      	b.n	8001230 <LCD_Test+0x144>
	{
		delay_ms(10);
 800122a:	200a      	movs	r0, #10
 800122c:	f002 f820 	bl	8003270 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001234:	482b      	ldr	r0, [pc, #172]	@ (80012e4 <LCD_Test+0x1f8>)
 8001236:	f003 ffdf 	bl	80051f8 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	d0f4      	beq.n	800122a <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 8001240:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001244:	2000      	movs	r0, #0
 8001246:	f000 f86f 	bl	8001328 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <LCD_Test+0x1e0>)
 800124c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <LCD_Test+0x1d4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <LCD_Test+0x1d4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2100      	movs	r1, #0
 8001258:	9101      	str	r1, [sp, #4]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	4819      	ldr	r0, [pc, #100]	@ (80012c8 <LCD_Test+0x1dc>)
 8001264:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8001266:	463b      	mov	r3, r7
 8001268:	491f      	ldr	r1, [pc, #124]	@ (80012e8 <LCD_Test+0x1fc>)
 800126a:	4618      	mov	r0, r3
 800126c:	f009 fa40 	bl	800a6f0 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <LCD_Test+0x1d4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	463b      	mov	r3, r7
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2310      	movs	r3, #16
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2310      	movs	r3, #16
 8001280:	2104      	movs	r1, #4
 8001282:	2004      	movs	r0, #4
 8001284:	f000 fadc 	bl	8001840 <LCD_ShowString>
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8001288:	f002 f822 	bl	80032d0 <HAL_GetDEVID>
 800128c:	4602      	mov	r2, r0
 800128e:	463b      	mov	r3, r7
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <LCD_Test+0x200>)
 8001292:	4618      	mov	r0, r3
 8001294:	f009 fa2c 	bl	800a6f0 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <LCD_Test+0x1d4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	463b      	mov	r3, r7
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	2310      	movs	r3, #16
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2310      	movs	r3, #16
 80012a8:	2116      	movs	r1, #22
 80012aa:	2004      	movs	r0, #4
 80012ac:	f000 fac8 	bl	8001840 <LCD_ShowString>
//	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
//	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);

	LCD_Light(100, 200);
 80012b0:	21c8      	movs	r1, #200	@ 0xc8
 80012b2:	2064      	movs	r0, #100	@ 0x64
 80012b4:	f000 f838 	bl	8001328 <LCD_Light>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	240002b0 	.word	0x240002b0
 80012c4:	24000008 	.word	0x24000008
 80012c8:	24000270 	.word	0x24000270
 80012cc:	2400002c 	.word	0x2400002c
 80012d0:	240002a8 	.word	0x240002a8
 80012d4:	0800bae4 	.word	0x0800bae4
 80012d8:	10624dd3 	.word	0x10624dd3
 80012dc:	cccccccd 	.word	0xcccccccd
 80012e0:	0800b048 	.word	0x0800b048
 80012e4:	58020800 	.word	0x58020800
 80012e8:	0800b050 	.word	0x0800b050
 80012ec:	0800b060 	.word	0x0800b060

080012f0 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <LCD_SetBrightness+0x1c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	24000224 	.word	0x24000224

08001310 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <LCD_GetBrightness+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	24000224 	.word	0x24000224

08001328 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8001332:	f7ff ffed 	bl	8001310 <LCD_GetBrightness>
 8001336:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 800133c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d05e      	beq.n	8001402 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	429a      	cmp	r2, r3
 800134a:	d05c      	beq.n	8001406 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001364:	ed97 7a07 	vldr	s14, [r7, #28]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137a:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001388:	ed97 7a06 	vldr	s14, [r7, #24]
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8001394:	edd7 6a07 	vldr	s13, [r7, #28]
 8001398:	ed97 7a06 	vldr	s14, [r7, #24]
 800139c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a0:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80013a4:	f001 ff58 	bl	8003258 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f001 ff60 	bl	8003270 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80013b0:	f001 ff52 	bl	8003258 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c6:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 80013ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80013ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80013e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff ff7c 	bl	80012f0 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d204      	bcs.n	800140a <LCD_Light+0xe2>
		delay_ms(1);
 8001400:	e7d3      	b.n	80013aa <LCD_Light+0x82>
		return;
 8001402:	bf00      	nop
 8001404:	e002      	b.n	800140c <LCD_Light+0xe4>
		return;
 8001406:	bf00      	nop
 8001408:	e000      	b.n	800140c <LCD_Light+0xe4>
		if(time_now >= time) break;
 800140a:	bf00      	nop
		
	}
}
 800140c:	3728      	adds	r7, #40	@ 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b097      	sub	sp, #92	@ 0x5c
 800141a:	af02      	add	r7, sp, #8
 800141c:	461e      	mov	r6, r3
 800141e:	4603      	mov	r3, r0
 8001420:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001422:	460b      	mov	r3, r1
 8001424:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001426:	4613      	mov	r3, r2
 8001428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800142c:	4633      	mov	r3, r6
 800142e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001432:	466b      	mov	r3, sp
 8001434:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8001436:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001438:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0=x;
 800143c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800143e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp=POINT_COLOR; 
 8001442:	4bb0      	ldr	r3, [pc, #704]	@ (8001704 <LCD_ShowChar+0x2f0>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 800144a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d101      	bne.n	8001456 <LCD_ShowChar+0x42>
 8001452:	2106      	movs	r1, #6
 8001454:	e000      	b.n	8001458 <LCD_ShowChar+0x44>
 8001456:	2108      	movs	r1, #8
 8001458:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 800145c:	1e4b      	subs	r3, r1, #1
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001460:	460a      	mov	r2, r1
 8001462:	2300      	movs	r3, #0
 8001464:	4692      	mov	sl, r2
 8001466:	469b      	mov	fp, r3
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001474:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001478:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800147c:	460b      	mov	r3, r1
 800147e:	005e      	lsls	r6, r3, #1
 8001480:	4603      	mov	r3, r0
 8001482:	3b01      	subs	r3, #1
 8001484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001486:	460a      	mov	r2, r1
 8001488:	2300      	movs	r3, #0
 800148a:	61ba      	str	r2, [r7, #24]
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	b2c3      	uxtb	r3, r0
 8001490:	2200      	movs	r2, #0
 8001492:	623b      	str	r3, [r7, #32]
 8001494:	627a      	str	r2, [r7, #36]	@ 0x24
 8001496:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800149a:	465b      	mov	r3, fp
 800149c:	6a3a      	ldr	r2, [r7, #32]
 800149e:	fb02 fc03 	mul.w	ip, r2, r3
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	4652      	mov	r2, sl
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	449c      	add	ip, r3
 80014ac:	4652      	mov	r2, sl
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	fba2 8903 	umull	r8, r9, r2, r3
 80014b4:	eb0c 0309 	add.w	r3, ip, r9
 80014b8:	4699      	mov	r9, r3
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80014c6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80014ca:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80014ce:	460a      	mov	r2, r1
 80014d0:	2300      	movs	r3, #0
 80014d2:	613a      	str	r2, [r7, #16]
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	b2c3      	uxtb	r3, r0
 80014d8:	2200      	movs	r2, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	60fa      	str	r2, [r7, #12]
 80014de:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014e2:	464b      	mov	r3, r9
 80014e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80014e8:	4652      	mov	r2, sl
 80014ea:	fb02 fc03 	mul.w	ip, r2, r3
 80014ee:	465b      	mov	r3, fp
 80014f0:	4642      	mov	r2, r8
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	449c      	add	ip, r3
 80014f8:	4642      	mov	r2, r8
 80014fa:	4653      	mov	r3, sl
 80014fc:	fba2 4503 	umull	r4, r5, r2, r3
 8001500:	eb0c 0305 	add.w	r3, ip, r5
 8001504:	461d      	mov	r5, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	012b      	lsls	r3, r5, #4
 8001510:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001514:	0122      	lsls	r2, r4, #4
 8001516:	460b      	mov	r3, r1
 8001518:	4602      	mov	r2, r0
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	3307      	adds	r3, #7
 8001522:	08db      	lsrs	r3, r3, #3
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	ebad 0d03 	sub.w	sp, sp, r3
 800152a:	ab02      	add	r3, sp, #8
 800152c:	3301      	adds	r3, #1
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8001534:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001538:	4619      	mov	r1, r3
 800153a:	4873      	ldr	r0, [pc, #460]	@ (8001708 <LCD_ShowChar+0x2f4>)
 800153c:	f001 fc2a 	bl	8002d94 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8001540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001544:	4619      	mov	r1, r3
 8001546:	4870      	ldr	r0, [pc, #448]	@ (8001708 <LCD_ShowChar+0x2f4>)
 8001548:	f001 fc36 	bl	8002db8 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800154c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001550:	3b20      	subs	r3, #32
 8001552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 800155c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 80a8 	bne.w	80016b6 <LCD_ShowChar+0x2a2>
	{
		for(t=0;t<size;t++)
 8001566:	2300      	movs	r3, #0
 8001568:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800156c:	e09b      	b.n	80016a6 <LCD_ShowChar+0x292>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 800156e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d10e      	bne.n	8001594 <LCD_ShowChar+0x180>
 8001576:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800157a:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 800157e:	4863      	ldr	r0, [pc, #396]	@ (800170c <LCD_ShowChar+0x2f8>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4403      	add	r3, r0
 800158a:	440b      	add	r3, r1
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001592:	e00a      	b.n	80015aa <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 8001594:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001598:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800159c:	495c      	ldr	r1, [pc, #368]	@ (8001710 <LCD_ShowChar+0x2fc>)
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	440a      	add	r2, r1
 80015a2:	4413      	add	r3, r2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			
			for(t1=0;t1<8;t1++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80015b0:	e06e      	b.n	8001690 <LCD_ShowChar+0x27c>
			{			    
				if(temp&0x80)
 80015b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da0e      	bge.n	80015d8 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80015ba:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001704 <LCD_ShowChar+0x2f0>)
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	e00e      	b.n	80015f6 <LCD_ShowChar+0x1e2>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80015d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <LCD_ShowChar+0x300>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001714 <LCD_ShowChar+0x300>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <LCD_ShowChar+0x2f0>)
 80015f4:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80015f6:	0872      	lsrs	r2, r6, #1
 80015f8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 80015fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461c      	mov	r4, r3
 8001606:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <LCD_ShowChar+0x2f0>)
 8001608:	8818      	ldrh	r0, [r3, #0]
 800160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	4422      	add	r2, r4
 8001612:	4601      	mov	r1, r0
 8001614:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001618:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800161c:	3301      	adds	r3, #1
 800161e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 8001622:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800162c:	429a      	cmp	r2, r3
 800162e:	d302      	bcc.n	8001636 <LCD_ShowChar+0x222>
 8001630:	2300      	movs	r3, #0
 8001632:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 8001636:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8001640:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001642:	3301      	adds	r3, #1
 8001644:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001646:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164a:	429a      	cmp	r2, r3
 800164c:	d304      	bcc.n	8001658 <LCD_ShowChar+0x244>
 800164e:	4a2d      	ldr	r2, [pc, #180]	@ (8001704 <LCD_ShowChar+0x2f0>)
 8001650:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001654:	8013      	strh	r3, [r2, #0]
 8001656:	e0e8      	b.n	800182a <LCD_ShowChar+0x416>
				if((y-y0)==size)
 8001658:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800165a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001664:	429a      	cmp	r2, r3
 8001666:	d10e      	bne.n	8001686 <LCD_ShowChar+0x272>
				{
					y=y0;
 8001668:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800166c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 800166e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001670:	3301      	adds	r3, #1
 8001672:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001674:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001678:	429a      	cmp	r2, r3
 800167a:	d30e      	bcc.n	800169a <LCD_ShowChar+0x286>
 800167c:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <LCD_ShowChar+0x2f0>)
 800167e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001682:	8013      	strh	r3, [r2, #0]
 8001684:	e0d1      	b.n	800182a <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 8001686:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800168a:	3301      	adds	r3, #1
 800168c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001690:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001694:	2b07      	cmp	r3, #7
 8001696:	d98c      	bls.n	80015b2 <LCD_ShowChar+0x19e>
 8001698:	e000      	b.n	800169c <LCD_ShowChar+0x288>
					break;
 800169a:	bf00      	nop
		for(t=0;t<size;t++)
 800169c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016a0:	3301      	adds	r3, #1
 80016a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80016a6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80016aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016ae:	429a      	cmp	r2, r3
 80016b0:	f4ff af5d 	bcc.w	800156e <LCD_ShowChar+0x15a>
 80016b4:	e09e      	b.n	80017f4 <LCD_ShowChar+0x3e0>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80016bc:	e093      	b.n	80017e6 <LCD_ShowChar+0x3d2>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80016be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	d10e      	bne.n	80016e4 <LCD_ShowChar+0x2d0>
 80016c6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016ca:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 80016ce:	480f      	ldr	r0, [pc, #60]	@ (800170c <LCD_ShowChar+0x2f8>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4403      	add	r3, r0
 80016da:	440b      	add	r3, r1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80016e2:	e00a      	b.n	80016fa <LCD_ShowChar+0x2e6>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80016e4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80016e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80016ec:	4908      	ldr	r1, [pc, #32]	@ (8001710 <LCD_ShowChar+0x2fc>)
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	440a      	add	r2, r1
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for(t1=0;t1<8;t1++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001700:	e066      	b.n	80017d0 <LCD_ShowChar+0x3bc>
 8001702:	bf00      	nop
 8001704:	24000028 	.word	0x24000028
 8001708:	24000270 	.word	0x24000270
 800170c:	0800b080 	.word	0x0800b080
 8001710:	0800b4f4 	.word	0x0800b4f4
 8001714:	240002ac 	.word	0x240002ac
			{			    
				if(temp&0x80)
 8001718:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800171c:	2b00      	cmp	r3, #0
 800171e:	da1b      	bge.n	8001758 <LCD_ShowChar+0x344>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001720:	4b45      	ldr	r3, [pc, #276]	@ (8001838 <LCD_ShowChar+0x424>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b21b      	sxth	r3, r3
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <LCD_ShowChar+0x424>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b218      	sxth	r0, r3
 8001738:	0872      	lsrs	r2, r6, #1
 800173a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 800173e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461c      	mov	r4, r3
 8001748:	b280      	uxth	r0, r0
 800174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174c:	fb01 f202 	mul.w	r2, r1, r2
 8001750:	4422      	add	r2, r4
 8001752:	4601      	mov	r1, r0
 8001754:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001758:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800175c:	3301      	adds	r3, #1
 800175e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if(count >= size) count =0;
 8001762:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800176c:	429a      	cmp	r2, r3
 800176e:	d302      	bcc.n	8001776 <LCD_ShowChar+0x362>
 8001770:	2300      	movs	r3, #0
 8001772:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				
				temp<<=1;
 8001776:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8001780:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001782:	3301      	adds	r3, #1
 8001784:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001786:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178a:	429a      	cmp	r2, r3
 800178c:	d304      	bcc.n	8001798 <LCD_ShowChar+0x384>
 800178e:	4a2a      	ldr	r2, [pc, #168]	@ (8001838 <LCD_ShowChar+0x424>)
 8001790:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001794:	8013      	strh	r3, [r2, #0]
 8001796:	e048      	b.n	800182a <LCD_ShowChar+0x416>
				if((y-y0)==size)
 8001798:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800179a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800179e:	1ad2      	subs	r2, r2, r3
 80017a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10e      	bne.n	80017c6 <LCD_ShowChar+0x3b2>
				{
					y=y0;
 80017a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80017ac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 80017ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017b0:	3301      	adds	r3, #1
 80017b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80017b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80017b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d30e      	bcc.n	80017da <LCD_ShowChar+0x3c6>
 80017bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <LCD_ShowChar+0x424>)
 80017be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80017c2:	8013      	strh	r3, [r2, #0]
 80017c4:	e031      	b.n	800182a <LCD_ShowChar+0x416>
			for(t1=0;t1<8;t1++)
 80017c6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80017ca:	3301      	adds	r3, #1
 80017cc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80017d0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d99f      	bls.n	8001718 <LCD_ShowChar+0x304>
 80017d8:	e000      	b.n	80017dc <LCD_ShowChar+0x3c8>
					break;
 80017da:	bf00      	nop
		for(t=0;t<size;t++)
 80017dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017e0:	3301      	adds	r3, #1
 80017e2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80017e6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80017ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017ee:	429a      	cmp	r2, r3
 80017f0:	f4ff af65 	bcc.w	80016be <LCD_ShowChar+0x2aa>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80017f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80017f8:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80017fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d101      	bne.n	8001808 <LCD_ShowChar+0x3f4>
 8001804:	2306      	movs	r3, #6
 8001806:	e000      	b.n	800180a <LCD_ShowChar+0x3f6>
 8001808:	2308      	movs	r3, #8
 800180a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001814:	4602      	mov	r2, r0
 8001816:	4809      	ldr	r0, [pc, #36]	@ (800183c <LCD_ShowChar+0x428>)
 8001818:	f001 f90e 	bl	8002a38 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <LCD_ShowChar+0x424>)
 800181e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001822:	8013      	strh	r3, [r2, #0]
 8001824:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001828:	e001      	b.n	800182e <LCD_ShowChar+0x41a>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800182a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 800182e:	3754      	adds	r7, #84	@ 0x54
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	24000028 	.word	0x24000028
 800183c:	24000270 	.word	0x24000270

08001840 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b087      	sub	sp, #28
 8001844:	af02      	add	r7, sp, #8
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4623      	mov	r3, r4
 8001850:	80fb      	strh	r3, [r7, #6]
 8001852:	4603      	mov	r3, r0
 8001854:	80bb      	strh	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4413      	add	r3, r2
 8001868:	807b      	strh	r3, [r7, #2]
	height+=y;
 800186a:	883a      	ldrh	r2, [r7, #0]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001872:	e024      	b.n	80018be <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	429a      	cmp	r2, r3
 800187a:	d307      	bcc.n	800188c <LCD_ShowString+0x4c>
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	80fb      	strh	r3, [r7, #6]
 8001880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001884:	b29a      	uxth	r2, r3
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d21d      	bcs.n	80018d0 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189c:	88b9      	ldrh	r1, [r7, #4]
 800189e:	88f8      	ldrh	r0, [r7, #6]
 80018a0:	2400      	movs	r4, #0
 80018a2:	9400      	str	r4, [sp, #0]
 80018a4:	f7ff fdb6 	bl	8001414 <LCD_ShowChar>
        x+=size/2;
 80018a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4413      	add	r3, r2
 80018b6:	80fb      	strh	r3, [r7, #6]
        p++;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80018c4:	d805      	bhi.n	80018d2 <LCD_ShowString+0x92>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b1f      	cmp	r3, #31
 80018cc:	d8d2      	bhi.n	8001874 <LCD_ShowString+0x34>
    }  
}
 80018ce:	e000      	b.n	80018d2 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80018d0:	bf00      	nop
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd90      	pop	{r4, r7, pc}
	...

080018dc <lcd_init>:

static int32_t lcd_init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80018e6:	2104      	movs	r1, #4
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <lcd_init+0x1c>)
 80018ea:	f008 fd0d 	bl	800a308 <HAL_TIMEx_PWMN_Start>
	return result;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	24000224 	.word	0x24000224

080018fc <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001900:	f001 fcaa 	bl	8003258 <HAL_GetTick>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001920:	481d      	ldr	r0, [pc, #116]	@ (8001998 <lcd_writereg+0x8c>)
 8001922:	f003 fc81 	bl	8005228 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192c:	481a      	ldr	r0, [pc, #104]	@ (8001998 <lcd_writereg+0x8c>)
 800192e:	f003 fc7b 	bl	8005228 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001932:	f107 010f 	add.w	r1, r7, #15
 8001936:	2364      	movs	r3, #100	@ 0x64
 8001938:	2201      	movs	r2, #1
 800193a:	4818      	ldr	r0, [pc, #96]	@ (800199c <lcd_writereg+0x90>)
 800193c:	f007 faba 	bl	8008eb4 <HAL_SPI_Transmit>
 8001940:	4603      	mov	r3, r0
 8001942:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194a:	4813      	ldr	r0, [pc, #76]	@ (8001998 <lcd_writereg+0x8c>)
 800194c:	f003 fc6c 	bl	8005228 <HAL_GPIO_WritePin>
	if(length > 0)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	b29a      	uxth	r2, r3
 800195a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	480e      	ldr	r0, [pc, #56]	@ (800199c <lcd_writereg+0x90>)
 8001962:	f007 faa7 	bl	8008eb4 <HAL_SPI_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001976:	4808      	ldr	r0, [pc, #32]	@ (8001998 <lcd_writereg+0x8c>)
 8001978:	f003 fc56 	bl	8005228 <HAL_GPIO_WritePin>
	if(result>0){
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	dd03      	ble.n	800198a <lcd_writereg+0x7e>
		result = -1;}
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e001      	b.n	800198e <lcd_writereg+0x82>
	else{
		result = 0;}
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
	return result;
 800198e:	697b      	ldr	r3, [r7, #20]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	58021000 	.word	0x58021000
 800199c:	24000198 	.word	0x24000198

080019a0 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019b2:	481b      	ldr	r0, [pc, #108]	@ (8001a20 <lcd_readreg+0x80>)
 80019b4:	f003 fc38 	bl	8005228 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <lcd_readreg+0x80>)
 80019c0:	f003 fc32 	bl	8005228 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80019c4:	1df9      	adds	r1, r7, #7
 80019c6:	2364      	movs	r3, #100	@ 0x64
 80019c8:	2201      	movs	r2, #1
 80019ca:	4816      	ldr	r0, [pc, #88]	@ (8001a24 <lcd_readreg+0x84>)
 80019cc:	f007 fa72 	bl	8008eb4 <HAL_SPI_Transmit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019da:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <lcd_readreg+0x80>)
 80019dc:	f003 fc24 	bl	8005228 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80019e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019e4:	2201      	movs	r2, #1
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	480e      	ldr	r0, [pc, #56]	@ (8001a24 <lcd_readreg+0x84>)
 80019ea:	f007 fc51 	bl	8009290 <HAL_SPI_Receive>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019fe:	4808      	ldr	r0, [pc, #32]	@ (8001a20 <lcd_readreg+0x80>)
 8001a00:	f003 fc12 	bl	8005228 <HAL_GPIO_WritePin>
	if(result>0){
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dd03      	ble.n	8001a12 <lcd_readreg+0x72>
		result = -1;}
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e001      	b.n	8001a16 <lcd_readreg+0x76>
	else{
		result = 0;}
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
	return result;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58021000 	.word	0x58021000
 8001a24:	24000198 	.word	0x24000198

08001a28 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <lcd_senddata+0x50>)
 8001a3a:	f003 fbf5 	bl	8005228 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	2364      	movs	r3, #100	@ 0x64
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <lcd_senddata+0x54>)
 8001a48:	f007 fa34 	bl	8008eb4 <HAL_SPI_Transmit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a56:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <lcd_senddata+0x50>)
 8001a58:	f003 fbe6 	bl	8005228 <HAL_GPIO_WritePin>
	if(result>0){
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dd03      	ble.n	8001a6a <lcd_senddata+0x42>
		result = -1;}
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e001      	b.n	8001a6e <lcd_senddata+0x46>
	else{
		result = 0;}
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
	return result;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58021000 	.word	0x58021000
 8001a7c:	24000198 	.word	0x24000198

08001a80 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a90:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <lcd_recvdata+0x54>)
 8001a92:	f003 fbc9 	bl	8005228 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <lcd_recvdata+0x58>)
 8001aa2:	f007 fbf5 	bl	8009290 <HAL_SPI_Receive>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab0:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <lcd_recvdata+0x54>)
 8001ab2:	f003 fbb9 	bl	8005228 <HAL_GPIO_WritePin>
	if(result>0){
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dd03      	ble.n	8001ac4 <lcd_recvdata+0x44>
		result = -1;}
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e001      	b.n	8001ac8 <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
	return result;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	58021000 	.word	0x58021000
 8001ad8:	24000198 	.word	0x24000198

08001adc <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	e03a      	b.n	8001b6a <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	891a      	ldrh	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a0f      	ldr	r2, [pc, #60]	@ (8001b74 <ST7735_RegisterBusIO+0x98>)
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <ST7735_RegisterBusIO+0x9c>)
 8001b3e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <ST7735_RegisterBusIO+0xa0>)
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <ST7735_RegisterBusIO+0xa4>)
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    pObj->Ctx.handle    = pObj;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30

    if(pObj->IO.Init != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4798      	blx	r3
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	e002      	b.n	8001b6a <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08002fe5 	.word	0x08002fe5
 8001b78:	0800300d 	.word	0x0800300d
 8001b7c:	08003037 	.word	0x08003037
 8001b80:	0800305b 	.word	0x0800305b

08001b84 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e3a6      	b.n	80022ec <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f103 0020 	add.w	r0, r3, #32
 8001ba8:	f107 0213 	add.w	r2, r7, #19
 8001bac:	2300      	movs	r3, #0
 8001bae:	2101      	movs	r1, #1
 8001bb0:	f001 fa92 	bl	80030d8 <st7735_write_reg>
 8001bb4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bb6:	2178      	movs	r1, #120	@ 0x78
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f001 fa60 	bl	800307e <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f103 0020 	add.w	r0, r3, #32
 8001bc8:	f107 0213 	add.w	r2, r7, #19
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2101      	movs	r1, #1
 8001bd0:	f001 fa82 	bl	80030d8 <st7735_write_reg>
 8001bd4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001bd6:	2178      	movs	r1, #120	@ 0x78
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f001 fa50 	bl	800307e <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f103 0020 	add.w	r0, r3, #32
 8001be8:	f107 0213 	add.w	r2, r7, #19
 8001bec:	2301      	movs	r3, #1
 8001bee:	2111      	movs	r1, #17
 8001bf0:	f001 fa72 	bl	80030d8 <st7735_write_reg>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f103 0020 	add.w	r0, r3, #32
 8001c02:	f107 0213 	add.w	r2, r7, #19
 8001c06:	2300      	movs	r3, #0
 8001c08:	21b1      	movs	r1, #177	@ 0xb1
 8001c0a:	f001 fa65 	bl	80030d8 <st7735_write_reg>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	4413      	add	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c16:	2301      	movs	r3, #1
 8001c18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3320      	adds	r3, #32
 8001c1e:	f107 0113 	add.w	r1, r7, #19
 8001c22:	2201      	movs	r2, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fa6c 	bl	8003102 <st7735_send_data>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	4413      	add	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c32:	232c      	movs	r3, #44	@ 0x2c
 8001c34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3320      	adds	r3, #32
 8001c3a:	f107 0113 	add.w	r1, r7, #19
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fa5e 	bl	8003102 <st7735_send_data>
 8001c46:	4602      	mov	r2, r0
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c4e:	232d      	movs	r3, #45	@ 0x2d
 8001c50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3320      	adds	r3, #32
 8001c56:	f107 0113 	add.w	r1, r7, #19
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fa50 	bl	8003102 <st7735_send_data>
 8001c62:	4602      	mov	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f103 0020 	add.w	r0, r3, #32
 8001c74:	f107 0213 	add.w	r2, r7, #19
 8001c78:	2301      	movs	r3, #1
 8001c7a:	21b2      	movs	r1, #178	@ 0xb2
 8001c7c:	f001 fa2c 	bl	80030d8 <st7735_write_reg>
 8001c80:	4602      	mov	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c88:	232c      	movs	r3, #44	@ 0x2c
 8001c8a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3320      	adds	r3, #32
 8001c90:	f107 0113 	add.w	r1, r7, #19
 8001c94:	2201      	movs	r2, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fa33 	bl	8003102 <st7735_send_data>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001ca4:	232d      	movs	r3, #45	@ 0x2d
 8001ca6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3320      	adds	r3, #32
 8001cac:	f107 0113 	add.w	r1, r7, #19
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fa25 	bl	8003102 <st7735_send_data>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f103 0020 	add.w	r0, r3, #32
 8001cca:	f107 0213 	add.w	r2, r7, #19
 8001cce:	2301      	movs	r3, #1
 8001cd0:	21b3      	movs	r1, #179	@ 0xb3
 8001cd2:	f001 fa01 	bl	80030d8 <st7735_write_reg>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001cde:	232c      	movs	r3, #44	@ 0x2c
 8001ce0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	f107 0113 	add.w	r1, r7, #19
 8001cea:	2201      	movs	r2, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fa08 	bl	8003102 <st7735_send_data>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001cfa:	232d      	movs	r3, #45	@ 0x2d
 8001cfc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3320      	adds	r3, #32
 8001d02:	f107 0113 	add.w	r1, r7, #19
 8001d06:	2201      	movs	r2, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f001 f9fa 	bl	8003102 <st7735_send_data>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	4413      	add	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001d16:	2301      	movs	r3, #1
 8001d18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3320      	adds	r3, #32
 8001d1e:	f107 0113 	add.w	r1, r7, #19
 8001d22:	2201      	movs	r2, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 f9ec 	bl	8003102 <st7735_send_data>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4413      	add	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001d32:	232c      	movs	r3, #44	@ 0x2c
 8001d34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3320      	adds	r3, #32
 8001d3a:	f107 0113 	add.w	r1, r7, #19
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 f9de 	bl	8003102 <st7735_send_data>
 8001d46:	4602      	mov	r2, r0
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001d4e:	232d      	movs	r3, #45	@ 0x2d
 8001d50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3320      	adds	r3, #32
 8001d56:	f107 0113 	add.w	r1, r7, #19
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f9d0 	bl	8003102 <st7735_send_data>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f103 0020 	add.w	r0, r3, #32
 8001d74:	f107 0213 	add.w	r2, r7, #19
 8001d78:	2301      	movs	r3, #1
 8001d7a:	21b4      	movs	r1, #180	@ 0xb4
 8001d7c:	f001 f9ac 	bl	80030d8 <st7735_write_reg>
 8001d80:	4602      	mov	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	4413      	add	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001d88:	23a2      	movs	r3, #162	@ 0xa2
 8001d8a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f103 0020 	add.w	r0, r3, #32
 8001d92:	f107 0213 	add.w	r2, r7, #19
 8001d96:	2301      	movs	r3, #1
 8001d98:	21c0      	movs	r1, #192	@ 0xc0
 8001d9a:	f001 f99d 	bl	80030d8 <st7735_write_reg>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001da6:	2302      	movs	r3, #2
 8001da8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3320      	adds	r3, #32
 8001dae:	f107 0113 	add.w	r1, r7, #19
 8001db2:	2201      	movs	r2, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 f9a4 	bl	8003102 <st7735_send_data>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001dc2:	2384      	movs	r3, #132	@ 0x84
 8001dc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3320      	adds	r3, #32
 8001dca:	f107 0113 	add.w	r1, r7, #19
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f996 	bl	8003102 <st7735_send_data>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4413      	add	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001dde:	23c5      	movs	r3, #197	@ 0xc5
 8001de0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f103 0020 	add.w	r0, r3, #32
 8001de8:	f107 0213 	add.w	r2, r7, #19
 8001dec:	2301      	movs	r3, #1
 8001dee:	21c1      	movs	r1, #193	@ 0xc1
 8001df0:	f001 f972 	bl	80030d8 <st7735_write_reg>
 8001df4:	4602      	mov	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	4413      	add	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f103 0020 	add.w	r0, r3, #32
 8001e06:	f107 0213 	add.w	r2, r7, #19
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	21c2      	movs	r1, #194	@ 0xc2
 8001e0e:	f001 f963 	bl	80030d8 <st7735_write_reg>
 8001e12:	4602      	mov	r2, r0
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	4413      	add	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3320      	adds	r3, #32
 8001e22:	f107 0113 	add.w	r1, r7, #19
 8001e26:	2201      	movs	r2, #1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 f96a 	bl	8003102 <st7735_send_data>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4413      	add	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001e36:	238a      	movs	r3, #138	@ 0x8a
 8001e38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f103 0020 	add.w	r0, r3, #32
 8001e40:	f107 0213 	add.w	r2, r7, #19
 8001e44:	2301      	movs	r3, #1
 8001e46:	21c3      	movs	r1, #195	@ 0xc3
 8001e48:	f001 f946 	bl	80030d8 <st7735_write_reg>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4413      	add	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001e54:	232a      	movs	r3, #42	@ 0x2a
 8001e56:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	f107 0113 	add.w	r1, r7, #19
 8001e60:	2201      	movs	r2, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 f94d 	bl	8003102 <st7735_send_data>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001e70:	238a      	movs	r3, #138	@ 0x8a
 8001e72:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f103 0020 	add.w	r0, r3, #32
 8001e7a:	f107 0213 	add.w	r2, r7, #19
 8001e7e:	2301      	movs	r3, #1
 8001e80:	21c4      	movs	r1, #196	@ 0xc4
 8001e82:	f001 f929 	bl	80030d8 <st7735_write_reg>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001e8e:	23ee      	movs	r3, #238	@ 0xee
 8001e90:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3320      	adds	r3, #32
 8001e96:	f107 0113 	add.w	r1, r7, #19
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 f930 	bl	8003102 <st7735_send_data>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001eaa:	230e      	movs	r3, #14
 8001eac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f103 0020 	add.w	r0, r3, #32
 8001eb4:	f107 0213 	add.w	r2, r7, #19
 8001eb8:	2301      	movs	r3, #1
 8001eba:	21c5      	movs	r1, #197	@ 0xc5
 8001ebc:	f001 f90c 	bl	80030d8 <st7735_write_reg>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7b1b      	ldrb	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f103 0020 	add.w	r0, r3, #32
 8001ed6:	f107 0213 	add.w	r2, r7, #19
 8001eda:	2300      	movs	r3, #0
 8001edc:	2121      	movs	r1, #33	@ 0x21
 8001ede:	f001 f8fb 	bl	80030d8 <st7735_write_reg>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e00c      	b.n	8001f06 <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f103 0020 	add.w	r0, r3, #32
 8001ef2:	f107 0213 	add.w	r2, r7, #19
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2120      	movs	r1, #32
 8001efa:	f001 f8ed 	bl	80030d8 <st7735_write_reg>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f103 0020 	add.w	r0, r3, #32
 8001f0c:	f107 0208 	add.w	r2, r7, #8
 8001f10:	2301      	movs	r3, #1
 8001f12:	213a      	movs	r1, #58	@ 0x3a
 8001f14:	f001 f8e0 	bl	80030d8 <st7735_write_reg>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001f20:	2302      	movs	r3, #2
 8001f22:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f103 0020 	add.w	r0, r3, #32
 8001f2a:	f107 0213 	add.w	r2, r7, #19
 8001f2e:	2301      	movs	r3, #1
 8001f30:	21e0      	movs	r1, #224	@ 0xe0
 8001f32:	f001 f8d1 	bl	80030d8 <st7735_write_reg>
 8001f36:	4602      	mov	r2, r0
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001f3e:	231c      	movs	r3, #28
 8001f40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3320      	adds	r3, #32
 8001f46:	f107 0113 	add.w	r1, r7, #19
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 f8d8 	bl	8003102 <st7735_send_data>
 8001f52:	4602      	mov	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3320      	adds	r3, #32
 8001f62:	f107 0113 	add.w	r1, r7, #19
 8001f66:	2201      	movs	r2, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 f8ca 	bl	8003102 <st7735_send_data>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001f76:	2312      	movs	r3, #18
 8001f78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	f107 0113 	add.w	r1, r7, #19
 8001f82:	2201      	movs	r2, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f8bc 	bl	8003102 <st7735_send_data>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4413      	add	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001f92:	2337      	movs	r3, #55	@ 0x37
 8001f94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3320      	adds	r3, #32
 8001f9a:	f107 0113 	add.w	r1, r7, #19
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 f8ae 	bl	8003102 <st7735_send_data>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001fae:	2332      	movs	r3, #50	@ 0x32
 8001fb0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	f107 0113 	add.w	r1, r7, #19
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 f8a0 	bl	8003102 <st7735_send_data>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001fca:	2329      	movs	r3, #41	@ 0x29
 8001fcc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3320      	adds	r3, #32
 8001fd2:	f107 0113 	add.w	r1, r7, #19
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 f892 	bl	8003102 <st7735_send_data>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001fe6:	232d      	movs	r3, #45	@ 0x2d
 8001fe8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3320      	adds	r3, #32
 8001fee:	f107 0113 	add.w	r1, r7, #19
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 f884 	bl	8003102 <st7735_send_data>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8002002:	2329      	movs	r3, #41	@ 0x29
 8002004:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3320      	adds	r3, #32
 800200a:	f107 0113 	add.w	r1, r7, #19
 800200e:	2201      	movs	r2, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f001 f876 	bl	8003102 <st7735_send_data>
 8002016:	4602      	mov	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 800201e:	2325      	movs	r3, #37	@ 0x25
 8002020:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3320      	adds	r3, #32
 8002026:	f107 0113 	add.w	r1, r7, #19
 800202a:	2201      	movs	r2, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f868 	bl	8003102 <st7735_send_data>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	4413      	add	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 800203a:	232b      	movs	r3, #43	@ 0x2b
 800203c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3320      	adds	r3, #32
 8002042:	f107 0113 	add.w	r1, r7, #19
 8002046:	2201      	movs	r2, #1
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f85a 	bl	8003102 <st7735_send_data>
 800204e:	4602      	mov	r2, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4413      	add	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8002056:	2339      	movs	r3, #57	@ 0x39
 8002058:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3320      	adds	r3, #32
 800205e:	f107 0113 	add.w	r1, r7, #19
 8002062:	2201      	movs	r2, #1
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f84c 	bl	8003102 <st7735_send_data>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3320      	adds	r3, #32
 800207a:	f107 0113 	add.w	r1, r7, #19
 800207e:	2201      	movs	r2, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f83e 	bl	8003102 <st7735_send_data>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4413      	add	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3320      	adds	r3, #32
 8002096:	f107 0113 	add.w	r1, r7, #19
 800209a:	2201      	movs	r2, #1
 800209c:	4618      	mov	r0, r3
 800209e:	f001 f830 	bl	8003102 <st7735_send_data>
 80020a2:	4602      	mov	r2, r0
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 80020aa:	2303      	movs	r3, #3
 80020ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3320      	adds	r3, #32
 80020b2:	f107 0113 	add.w	r1, r7, #19
 80020b6:	2201      	movs	r2, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 f822 	bl	8003102 <st7735_send_data>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80020c6:	2310      	movs	r3, #16
 80020c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3320      	adds	r3, #32
 80020ce:	f107 0113 	add.w	r1, r7, #19
 80020d2:	2201      	movs	r2, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f814 	bl	8003102 <st7735_send_data>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 80020e2:	2303      	movs	r3, #3
 80020e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f103 0020 	add.w	r0, r3, #32
 80020ec:	f107 0213 	add.w	r2, r7, #19
 80020f0:	2301      	movs	r3, #1
 80020f2:	21e1      	movs	r1, #225	@ 0xe1
 80020f4:	f000 fff0 	bl	80030d8 <st7735_write_reg>
 80020f8:	4602      	mov	r2, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4413      	add	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8002100:	231d      	movs	r3, #29
 8002102:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3320      	adds	r3, #32
 8002108:	f107 0113 	add.w	r1, r7, #19
 800210c:	2201      	movs	r2, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fff7 	bl	8003102 <st7735_send_data>
 8002114:	4602      	mov	r2, r0
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 800211c:	2307      	movs	r3, #7
 800211e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3320      	adds	r3, #32
 8002124:	f107 0113 	add.w	r1, r7, #19
 8002128:	2201      	movs	r2, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f000 ffe9 	bl	8003102 <st7735_send_data>
 8002130:	4602      	mov	r2, r0
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4413      	add	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8002138:	2306      	movs	r3, #6
 800213a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3320      	adds	r3, #32
 8002140:	f107 0113 	add.w	r1, r7, #19
 8002144:	2201      	movs	r2, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ffdb 	bl	8003102 <st7735_send_data>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4413      	add	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002154:	232e      	movs	r3, #46	@ 0x2e
 8002156:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3320      	adds	r3, #32
 800215c:	f107 0113 	add.w	r1, r7, #19
 8002160:	2201      	movs	r2, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f000 ffcd 	bl	8003102 <st7735_send_data>
 8002168:	4602      	mov	r2, r0
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4413      	add	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8002170:	232c      	movs	r3, #44	@ 0x2c
 8002172:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3320      	adds	r3, #32
 8002178:	f107 0113 	add.w	r1, r7, #19
 800217c:	2201      	movs	r2, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f000 ffbf 	bl	8003102 <st7735_send_data>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800218c:	2329      	movs	r3, #41	@ 0x29
 800218e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3320      	adds	r3, #32
 8002194:	f107 0113 	add.w	r1, r7, #19
 8002198:	2201      	movs	r2, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f000 ffb1 	bl	8003102 <st7735_send_data>
 80021a0:	4602      	mov	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80021a8:	232d      	movs	r3, #45	@ 0x2d
 80021aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3320      	adds	r3, #32
 80021b0:	f107 0113 	add.w	r1, r7, #19
 80021b4:	2201      	movs	r2, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 ffa3 	bl	8003102 <st7735_send_data>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021c4:	232e      	movs	r3, #46	@ 0x2e
 80021c6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3320      	adds	r3, #32
 80021cc:	f107 0113 	add.w	r1, r7, #19
 80021d0:	2201      	movs	r2, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ff95 	bl	8003102 <st7735_send_data>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80021e0:	232e      	movs	r3, #46	@ 0x2e
 80021e2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3320      	adds	r3, #32
 80021e8:	f107 0113 	add.w	r1, r7, #19
 80021ec:	2201      	movs	r2, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 ff87 	bl	8003102 <st7735_send_data>
 80021f4:	4602      	mov	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4413      	add	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80021fc:	2337      	movs	r3, #55	@ 0x37
 80021fe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3320      	adds	r3, #32
 8002204:	f107 0113 	add.w	r1, r7, #19
 8002208:	2201      	movs	r2, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f000 ff79 	bl	8003102 <st7735_send_data>
 8002210:	4602      	mov	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4413      	add	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8002218:	233f      	movs	r3, #63	@ 0x3f
 800221a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3320      	adds	r3, #32
 8002220:	f107 0113 	add.w	r1, r7, #19
 8002224:	2201      	movs	r2, #1
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ff6b 	bl	8003102 <st7735_send_data>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4413      	add	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002234:	2300      	movs	r3, #0
 8002236:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3320      	adds	r3, #32
 800223c:	f107 0113 	add.w	r1, r7, #19
 8002240:	2201      	movs	r2, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f000 ff5d 	bl	8003102 <st7735_send_data>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4413      	add	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3320      	adds	r3, #32
 8002258:	f107 0113 	add.w	r1, r7, #19
 800225c:	2201      	movs	r2, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f000 ff4f 	bl	8003102 <st7735_send_data>
 8002264:	4602      	mov	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800226c:	2302      	movs	r3, #2
 800226e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3320      	adds	r3, #32
 8002274:	f107 0113 	add.w	r1, r7, #19
 8002278:	2201      	movs	r2, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f000 ff41 	bl	8003102 <st7735_send_data>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8002288:	2310      	movs	r3, #16
 800228a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3320      	adds	r3, #32
 8002290:	f107 0113 	add.w	r1, r7, #19
 8002294:	2201      	movs	r2, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ff33 	bl	8003102 <st7735_send_data>
 800229c:	4602      	mov	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f103 0020 	add.w	r0, r3, #32
 80022ae:	f107 0213 	add.w	r2, r7, #19
 80022b2:	2301      	movs	r3, #1
 80022b4:	2113      	movs	r1, #19
 80022b6:	f000 ff0f 	bl	80030d8 <st7735_write_reg>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	4413      	add	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f103 0020 	add.w	r0, r3, #32
 80022c8:	f107 0213 	add.w	r2, r7, #19
 80022cc:	2301      	movs	r3, #1
 80022ce:	2129      	movs	r1, #41	@ 0x29
 80022d0:	f000 ff02 	bl	80030d8 <st7735_write_reg>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f944 	bl	800256c <ST7735_SetOrientation>
 80022e4:	4602      	mov	r2, r0
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4413      	add	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3320      	adds	r3, #32
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	21da      	movs	r1, #218	@ 0xda
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fec0 	bl	80030b2 <st7735_read_reg>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e02d      	b.n	800239c <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0020 	add.w	r0, r3, #32
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	3301      	adds	r3, #1
 800234c:	461a      	mov	r2, r3
 800234e:	21db      	movs	r1, #219	@ 0xdb
 8002350:	f000 feaf 	bl	80030b2 <st7735_read_reg>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e01c      	b.n	800239c <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0020 	add.w	r0, r3, #32
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	3302      	adds	r3, #2
 800236e:	461a      	mov	r2, r3
 8002370:	21dc      	movs	r1, #220	@ 0xdc
 8002372:	f000 fe9e 	bl	80030b2 <st7735_read_reg>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e00b      	b.n	800239c <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8002384:	7abb      	ldrb	r3, [r7, #10]
 8002386:	461a      	mov	r2, r3
 8002388:	7a7b      	ldrb	r3, [r7, #9]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	431a      	orrs	r2, r3
 800238e:	7a3b      	ldrb	r3, [r7, #8]
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0020 	add.w	r0, r3, #32
 80023ba:	f107 020b 	add.w	r2, r7, #11
 80023be:	2300      	movs	r3, #0
 80023c0:	2113      	movs	r1, #19
 80023c2:	f000 fe89 	bl	80030d8 <st7735_write_reg>
 80023c6:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023c8:	210a      	movs	r1, #10
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fe57 	bl	800307e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0020 	add.w	r0, r3, #32
 80023d6:	f107 020b 	add.w	r2, r7, #11
 80023da:	2300      	movs	r3, #0
 80023dc:	2129      	movs	r1, #41	@ 0x29
 80023de:	f000 fe7b 	bl	80030d8 <st7735_write_reg>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023ea:	210a      	movs	r1, #10
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fe46 	bl	800307e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 0020 	add.w	r0, r3, #32
 80023f8:	f107 020b 	add.w	r2, r7, #11
 80023fc:	2300      	movs	r3, #0
 80023fe:	2136      	movs	r1, #54	@ 0x36
 8002400:	f000 fe6a 	bl	80030d8 <st7735_write_reg>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4413      	add	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <ST7735_DisplayOn+0xc0>)
 800240e:	7b1b      	ldrb	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <ST7735_DisplayOn+0xc0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a14      	ldr	r2, [pc, #80]	@ (800246c <ST7735_DisplayOn+0xc4>)
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e006      	b.n	8002438 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <ST7735_DisplayOn+0xc0>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a0f      	ldr	r2, [pc, #60]	@ (800246c <ST7735_DisplayOn+0xc4>)
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002436:	b2db      	uxtb	r3, r3
 8002438:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	f107 010b 	add.w	r1, r7, #11
 8002442:	2201      	movs	r2, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fe5c 	bl	8003102 <st7735_send_data>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	240002b0 	.word	0x240002b0
 800246c:	24000078 	.word	0x24000078

08002470 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0020 	add.w	r0, r3, #32
 8002482:	f107 020b 	add.w	r2, r7, #11
 8002486:	2300      	movs	r3, #0
 8002488:	2113      	movs	r1, #19
 800248a:	f000 fe25 	bl	80030d8 <st7735_write_reg>
 800248e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8002490:	210a      	movs	r1, #10
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fdf3 	bl	800307e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0020 	add.w	r0, r3, #32
 800249e:	f107 020b 	add.w	r2, r7, #11
 80024a2:	2300      	movs	r3, #0
 80024a4:	2128      	movs	r1, #40	@ 0x28
 80024a6:	f000 fe17 	bl	80030d8 <st7735_write_reg>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80024b2:	210a      	movs	r1, #10
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fde2 	bl	800307e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f103 0020 	add.w	r0, r3, #32
 80024c0:	f107 020b 	add.w	r2, r7, #11
 80024c4:	2300      	movs	r3, #0
 80024c6:	2136      	movs	r1, #54	@ 0x36
 80024c8:	f000 fe06 	bl	80030d8 <st7735_write_reg>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024d4:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <ST7735_DisplayOff+0xc0>)
 80024d6:	7b1b      	ldrb	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <ST7735_DisplayOff+0xc0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <ST7735_DisplayOff+0xc4>)
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	e006      	b.n	8002500 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <ST7735_DisplayOff+0xc0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <ST7735_DisplayOff+0xc4>)
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3320      	adds	r3, #32
 8002506:	f107 010b 	add.w	r1, r7, #11
 800250a:	2201      	movs	r2, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fdf8 	bl	8003102 <st7735_send_data>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	240002b0 	.word	0x240002b0
 8002534:	24000078 	.word	0x24000078

08002538 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <ST7735_SetOrientation+0x1a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d119      	bne.n	80025ba <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7b5b      	ldrb	r3, [r3, #13]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 800258e:	4b3c      	ldr	r3, [pc, #240]	@ (8002680 <ST7735_SetOrientation+0x114>)
 8002590:	2250      	movs	r2, #80	@ 0x50
 8002592:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8002594:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <ST7735_SetOrientation+0x114>)
 8002596:	22a0      	movs	r2, #160	@ 0xa0
 8002598:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800259a:	e028      	b.n	80025ee <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	7b5b      	ldrb	r3, [r3, #13]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <ST7735_SetOrientation+0x40>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d120      	bne.n	80025ee <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80025b2:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025b4:	22a0      	movs	r2, #160	@ 0xa0
 80025b6:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025b8:	e019      	b.n	80025ee <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	7b5b      	ldrb	r3, [r3, #13]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80025c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025c4:	22a0      	movs	r2, #160	@ 0xa0
 80025c6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025ca:	2250      	movs	r2, #80	@ 0x50
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e00f      	b.n	80025f0 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7b5b      	ldrb	r3, [r3, #13]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <ST7735_SetOrientation+0x74>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	7b5b      	ldrb	r3, [r3, #13]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80025e0:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025e2:	22a0      	movs	r2, #160	@ 0xa0
 80025e4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	e000      	b.n	80025f0 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80025ee:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025f6:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7b1a      	ldrb	r2, [r3, #12]
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <ST7735_SetOrientation+0x114>)
 80025fe:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7b5a      	ldrb	r2, [r3, #13]
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <ST7735_SetOrientation+0x114>)
 8002606:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <ST7735_SetOrientation+0x114>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <ST7735_SetOrientation+0x114>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fbdf 	bl	8002ddc <ST7735_SetDisplayWindow>
 800261e:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <ST7735_SetOrientation+0x114>)
 8002622:	7b1b      	ldrb	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <ST7735_SetOrientation+0x114>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a15      	ldr	r2, [pc, #84]	@ (8002684 <ST7735_SetOrientation+0x118>)
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002636:	f043 0308 	orr.w	r3, r3, #8
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e006      	b.n	800264c <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <ST7735_SetOrientation+0x114>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <ST7735_SetOrientation+0x118>)
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800264a:	b2db      	uxtb	r3, r3
 800264c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f103 0020 	add.w	r0, r3, #32
 8002654:	f107 020b 	add.w	r2, r7, #11
 8002658:	2301      	movs	r3, #1
 800265a:	2136      	movs	r1, #54	@ 0x36
 800265c:	f000 fd3c 	bl	80030d8 <st7735_write_reg>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	240002b0 	.word	0x240002b0
 8002684:	24000078 	.word	0x24000078

08002688 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <ST7735_GetOrientation+0x20>)
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	240002b0 	.word	0x240002b0

080026ac <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80026b8:	4b59      	ldr	r3, [pc, #356]	@ (8002820 <ST7735_SetCursor+0x174>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d821      	bhi.n	8002704 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80026c0:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <ST7735_SetCursor+0x174>)
 80026c2:	7b5b      	ldrb	r3, [r3, #13]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10e      	bne.n	80026e6 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80026c8:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <ST7735_SetCursor+0x174>)
 80026ca:	7b1b      	ldrb	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <ST7735_SetCursor+0x32>
				Xpos += 26;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	331a      	adds	r3, #26
 80026d4:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3301      	adds	r3, #1
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e033      	b.n	8002746 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3318      	adds	r3, #24
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	e02f      	b.n	8002746 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80026e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <ST7735_SetCursor+0x174>)
 80026e8:	7b5b      	ldrb	r3, [r3, #13]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d12b      	bne.n	8002746 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <ST7735_SetCursor+0x174>)
 80026f0:	7b1b      	ldrb	r3, [r3, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d127      	bne.n	8002746 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3302      	adds	r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	e020      	b.n	8002746 <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002704:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <ST7735_SetCursor+0x174>)
 8002706:	7b5b      	ldrb	r3, [r3, #13]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10e      	bne.n	800272a <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 800270c:	4b44      	ldr	r3, [pc, #272]	@ (8002820 <ST7735_SetCursor+0x174>)
 800270e:	7b1b      	ldrb	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3301      	adds	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	331a      	adds	r3, #26
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e011      	b.n	8002746 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3318      	adds	r3, #24
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e00d      	b.n	8002746 <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800272a:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <ST7735_SetCursor+0x174>)
 800272c:	7b5b      	ldrb	r3, [r3, #13]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d109      	bne.n	8002746 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002732:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <ST7735_SetCursor+0x174>)
 8002734:	7b1b      	ldrb	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3302      	adds	r3, #2
 8002744:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f103 0020 	add.w	r0, r3, #32
 800274c:	f107 0213 	add.w	r2, r7, #19
 8002750:	2300      	movs	r3, #0
 8002752:	212a      	movs	r1, #42	@ 0x2a
 8002754:	f000 fcc0 	bl	80030d8 <st7735_write_reg>
 8002758:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	b2db      	uxtb	r3, r3
 8002760:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3320      	adds	r3, #32
 8002766:	f107 0113 	add.w	r1, r7, #19
 800276a:	2201      	movs	r2, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fcc8 	bl	8003102 <st7735_send_data>
 8002772:	4602      	mov	r2, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4413      	add	r3, r2
 8002778:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3320      	adds	r3, #32
 8002784:	f107 0113 	add.w	r1, r7, #19
 8002788:	2201      	movs	r2, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fcb9 	bl	8003102 <st7735_send_data>
 8002790:	4602      	mov	r2, r0
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	4413      	add	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f103 0020 	add.w	r0, r3, #32
 800279e:	f107 0213 	add.w	r2, r7, #19
 80027a2:	2300      	movs	r3, #0
 80027a4:	212b      	movs	r1, #43	@ 0x2b
 80027a6:	f000 fc97 	bl	80030d8 <st7735_write_reg>
 80027aa:	4602      	mov	r2, r0
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4413      	add	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3320      	adds	r3, #32
 80027be:	f107 0113 	add.w	r1, r7, #19
 80027c2:	2201      	movs	r2, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fc9c 	bl	8003102 <st7735_send_data>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4413      	add	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3320      	adds	r3, #32
 80027dc:	f107 0113 	add.w	r1, r7, #19
 80027e0:	2201      	movs	r2, #1
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc8d 	bl	8003102 <st7735_send_data>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f103 0020 	add.w	r0, r3, #32
 80027f6:	f107 0213 	add.w	r2, r7, #19
 80027fa:	2300      	movs	r3, #0
 80027fc:	212c      	movs	r1, #44	@ 0x2c
 80027fe:	f000 fc6b 	bl	80030d8 <st7735_write_reg>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4413      	add	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002816:	697b      	ldr	r3, [r7, #20]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	240002b0 	.word	0x240002b0

08002824 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b090      	sub	sp, #64	@ 0x40
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	330a      	adds	r3, #10
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	330b      	adds	r3, #11
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	441a      	add	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	441a      	add	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	330d      	adds	r3, #13
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	4413      	add	r3, r2
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3312      	adds	r3, #18
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3313      	adds	r3, #19
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	441a      	add	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3314      	adds	r3, #20
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	441a      	add	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3315      	adds	r3, #21
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	4413      	add	r3, r2
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3316      	adds	r3, #22
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	3317      	adds	r3, #23
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	441a      	add	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3318      	adds	r3, #24
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	441a      	add	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	3319      	adds	r3, #25
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	4413      	add	r3, r2
 80028b0:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3302      	adds	r3, #2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3303      	adds	r3, #3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	441a      	add	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3304      	adds	r3, #4
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	441a      	add	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	3305      	adds	r3, #5
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	4413      	add	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	4413      	add	r3, r2
 80028e8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80028ea:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fa6a 	bl	8002ddc <ST7735_SetDisplayWindow>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
 8002914:	e087      	b.n	8002a26 <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002916:	4b46      	ldr	r3, [pc, #280]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 8002918:	7b1b      	ldrb	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 800291e:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4a44      	ldr	r2, [pc, #272]	@ (8002a34 <ST7735_DrawBitmap+0x210>)
 8002924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002928:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800292a:	f043 0308 	orr.w	r3, r3, #8
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e005      	b.n	800293e <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8002932:	4b3f      	ldr	r3, [pc, #252]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a3f      	ldr	r2, [pc, #252]	@ (8002a34 <ST7735_DrawBitmap+0x210>)
 8002938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800293c:	b2db      	uxtb	r3, r3
 800293e:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f103 0020 	add.w	r0, r3, #32
 8002946:	f107 0213 	add.w	r2, r7, #19
 800294a:	2301      	movs	r3, #1
 800294c:	2136      	movs	r1, #54	@ 0x36
 800294e:	f000 fbc3 	bl	80030d8 <st7735_write_reg>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
 800295e:	e062      	b.n	8002a26 <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff fea1 	bl	80026ac <ST7735_SetCursor>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
 8002976:	e056      	b.n	8002a26 <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3320      	adds	r3, #32
 8002988:	f107 0114 	add.w	r1, r7, #20
 800298c:	2202      	movs	r2, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fbb7 	bl	8003102 <st7735_send_data>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80029a0:	e009      	b.n	80029b6 <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	3302      	adds	r3, #2
 80029a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pbmp += 2;
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	3302      	adds	r3, #2
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
      }while(counter < size);
 80029ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3e0      	bcc.n	8002978 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 80029b8:	7b1b      	ldrb	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80029be:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <ST7735_DrawBitmap+0x210>)
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e006      	b.n	80029e2 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80029d4:	4b16      	ldr	r3, [pc, #88]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a16      	ldr	r2, [pc, #88]	@ (8002a34 <ST7735_DrawBitmap+0x210>)
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f103 0020 	add.w	r0, r3, #32
 80029ea:	f107 0213 	add.w	r2, r7, #19
 80029ee:	2301      	movs	r3, #1
 80029f0:	2136      	movs	r1, #54	@ 0x36
 80029f2:	f000 fb71 	bl	80030d8 <st7735_write_reg>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a02:	e010      	b.n	8002a26 <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <ST7735_DrawBitmap+0x20c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	2100      	movs	r1, #0
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9e1 	bl	8002ddc <ST7735_SetDisplayWindow>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
  }

  return ret;
 8002a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	@ 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	240002b0 	.word	0x240002b0
 8002a34:	24000078 	.word	0x24000078

08002a38 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a52:	441a      	add	r2, r3
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <ST7735_FillRGBRect+0xcc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d806      	bhi.n	8002a6a <ST7735_FillRGBRect+0x32>
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	441a      	add	r2, r3
 8002a62:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <ST7735_FillRGBRect+0xcc>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d903      	bls.n	8002a72 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e042      	b.n	8002af8 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e03b      	b.n	8002af0 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f7ff fe12 	bl	80026ac <ST7735_SetCursor>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e029      	b.n	8002aea <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e013      	b.n	8002ac4 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	7811      	ldrb	r1, [r2, #0]
 8002aa4:	4a18      	ldr	r2, [pc, #96]	@ (8002b08 <ST7735_FillRGBRect+0xd0>)
 8002aa6:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	7811      	ldrb	r1, [r2, #0]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <ST7735_FillRGBRect+0xd0>)
 8002ab6:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	3302      	adds	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3e7      	bcc.n	8002a9c <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f103 0020 	add.w	r0, r3, #32
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	490b      	ldr	r1, [pc, #44]	@ (8002b08 <ST7735_FillRGBRect+0xd0>)
 8002ada:	f000 fb12 	bl	8003102 <st7735_send_data>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae8:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	3301      	adds	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3bf      	bcc.n	8002a78 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002af8:	69fb      	ldr	r3, [r7, #28]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	240002b0 	.word	0x240002b0
 8002b08:	240002c0 	.word	0x240002c0

08002b0c <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	441a      	add	r2, r3
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <ST7735_DrawHLine+0x98>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d903      	bls.n	8002b34 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e032      	b.n	8002b9a <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fdb7 	bl	80026ac <ST7735_SetCursor>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e026      	b.n	8002b9a <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	e010      	b.n	8002b74 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	0a1a      	lsrs	r2, r3, #8
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2d1      	uxtb	r1, r2
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <ST7735_DrawHLine+0x9c>)
 8002b5e:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	3301      	adds	r3, #1
 8002b66:	6a3a      	ldr	r2, [r7, #32]
 8002b68:	b2d1      	uxtb	r1, r2
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <ST7735_DrawHLine+0x9c>)
 8002b6c:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3301      	adds	r3, #1
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3ea      	bcc.n	8002b52 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f103 0020 	add.w	r0, r3, #32
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	461a      	mov	r2, r3
 8002b88:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <ST7735_DrawHLine+0x9c>)
 8002b8a:	f000 faba 	bl	8003102 <st7735_send_data>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	240002b0 	.word	0x240002b0
 8002ba8:	24000540 	.word	0x24000540

08002bac <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <ST7735_DrawVLine+0x64>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d903      	bls.n	8002bd4 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e018      	b.n	8002c06 <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e011      	b.n	8002bfe <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	441a      	add	r2, r3
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f841 	bl	8002c6c <ST7735_SetPixel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	617b      	str	r3, [r7, #20]
        break;
 8002bf6:	e006      	b.n	8002c06 <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3e9      	bcc.n	8002bda <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002c06:	697b      	ldr	r3, [r7, #20]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	240002b0 	.word	0x240002b0

08002c14 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e014      	b.n	8002c5a <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ff66 	bl	8002b0c <ST7735_DrawHLine>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	61fb      	str	r3, [r7, #28]
      break;
 8002c4c:	e009      	b.n	8002c62 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	3301      	adds	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3e6      	bcc.n	8002c30 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002c62:	69fb      	ldr	r3, [r7, #28]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	8a7b      	ldrh	r3, [r7, #18]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002c96:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <ST7735_SetPixel+0x84>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d204      	bcs.n	8002caa <ST7735_SetPixel+0x3e>
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <ST7735_SetPixel+0x84>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d303      	bcc.n	8002cb2 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e019      	b.n	8002ce6 <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fcf8 	bl	80026ac <ST7735_SetCursor>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e00d      	b.n	8002ce6 <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3320      	adds	r3, #32
 8002cce:	f107 0112 	add.w	r1, r7, #18
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fa14 	bl	8003102 <st7735_send_data>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002ce6:	697b      	ldr	r3, [r7, #20]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	240002b0 	.word	0x240002b0

08002cf4 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fcd0 	bl	80026ac <ST7735_SetCursor>
 8002d0c:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3320      	adds	r3, #32
 8002d12:	f107 0211 	add.w	r2, r7, #17
 8002d16:	212e      	movs	r1, #46	@ 0x2e
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f9ca 	bl	80030b2 <st7735_read_reg>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3320      	adds	r3, #32
 8002d2a:	f107 0111 	add.w	r1, r7, #17
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f9f8 	bl	8003126 <st7735_recv_data>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3320      	adds	r3, #32
 8002d42:	f107 0113 	add.w	r1, r7, #19
 8002d46:	2201      	movs	r2, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f9ec 	bl	8003126 <st7735_recv_data>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3320      	adds	r3, #32
 8002d5a:	f107 0112 	add.w	r1, r7, #18
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f9e0 	bl	8003126 <st7735_recv_data>
 8002d66:	4602      	mov	r2, r0
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	461a      	mov	r2, r3
 8002d72:	7cbb      	ldrb	r3, [r7, #18]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	441a      	add	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002d88:	697b      	ldr	r3, [r7, #20]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002d9e:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <ST7735_GetXSize+0x20>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	240002b0 	.word	0x240002b0

08002db8 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <ST7735_GetYSize+0x20>)
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	240002b0 	.word	0x240002b0

08002ddc <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002dea:	4b7d      	ldr	r3, [pc, #500]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d821      	bhi.n	8002e36 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002df2:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002df4:	7b5b      	ldrb	r3, [r3, #13]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d10e      	bne.n	8002e18 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002dfa:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002dfc:	7b1b      	ldrb	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	331a      	adds	r3, #26
 8002e06:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	e036      	b.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3318      	adds	r3, #24
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	e032      	b.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e18:	4b71      	ldr	r3, [pc, #452]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e1a:	7b5b      	ldrb	r3, [r3, #13]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d12e      	bne.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e22:	7b1b      	ldrb	r3, [r3, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d12a      	bne.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3301      	adds	r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	e023      	b.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002e36:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e38:	7b5b      	ldrb	r3, [r3, #13]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d111      	bne.n	8002e62 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002e3e:	4b68      	ldr	r3, [pc, #416]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	331a      	adds	r3, #26
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	e014      	b.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3318      	adds	r3, #24
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	e00d      	b.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002e62:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e64:	7b5b      	ldrb	r3, [r3, #13]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d109      	bne.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <ST7735_SetDisplayWindow+0x204>)
 8002e6c:	7b1b      	ldrb	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f103 0020 	add.w	r0, r3, #32
 8002e84:	f107 0213 	add.w	r2, r7, #19
 8002e88:	2300      	movs	r3, #0
 8002e8a:	212a      	movs	r1, #42	@ 0x2a
 8002e8c:	f000 f924 	bl	80030d8 <st7735_write_reg>
 8002e90:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	f107 0113 	add.w	r1, r7, #19
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f92c 	bl	8003102 <st7735_send_data>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4413      	add	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3320      	adds	r3, #32
 8002ebc:	f107 0113 	add.w	r1, r7, #19
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f91d 	bl	8003102 <st7735_send_data>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	4413      	add	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3320      	adds	r3, #32
 8002ee2:	f107 0113 	add.w	r1, r7, #19
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f90a 	bl	8003102 <st7735_send_data>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	f107 0113 	add.w	r1, r7, #19
 8002f10:	2201      	movs	r2, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f8f5 	bl	8003102 <st7735_send_data>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f103 0020 	add.w	r0, r3, #32
 8002f26:	f107 0213 	add.w	r2, r7, #19
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	212b      	movs	r1, #43	@ 0x2b
 8002f2e:	f000 f8d3 	bl	80030d8 <st7735_write_reg>
 8002f32:	4602      	mov	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4413      	add	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3320      	adds	r3, #32
 8002f46:	f107 0113 	add.w	r1, r7, #19
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f8d8 	bl	8003102 <st7735_send_data>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	4413      	add	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3320      	adds	r3, #32
 8002f64:	f107 0113 	add.w	r1, r7, #19
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f8c9 	bl	8003102 <st7735_send_data>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	4413      	add	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3320      	adds	r3, #32
 8002f8a:	f107 0113 	add.w	r1, r7, #19
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f8b6 	bl	8003102 <st7735_send_data>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	f107 0113 	add.w	r1, r7, #19
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f8a1 	bl	8003102 <st7735_send_data>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002fd4:	697b      	ldr	r3, [r7, #20]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	240002b0 	.word	0x240002b0

08002fe4 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	460b      	mov	r3, r1
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	7afa      	ldrb	r2, [r7, #11]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4610      	mov	r0, r2
 8003000:	4798      	blx	r3
 8003002:	4603      	mov	r3, r0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	460b      	mov	r3, r1
 800301a:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	7af8      	ldrb	r0, [r7, #11]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	4798      	blx	r3
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68b8      	ldr	r0, [r7, #8]
 8003072:	4798      	blx	r3
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4798      	blx	r3
 800308e:	4603      	mov	r3, r0
 8003090:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003092:	bf00      	nop
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4798      	blx	r3
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d8f5      	bhi.n	8003094 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	460b      	mov	r3, r1
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6910      	ldr	r0, [r2, #16]
 80030c8:	7af9      	ldrb	r1, [r7, #11]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	4603      	mov	r3, r0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	460b      	mov	r3, r1
 80030e6:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6918      	ldr	r0, [r3, #16]
 80030f0:	7af9      	ldrb	r1, [r7, #11]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	47a0      	blx	r4
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}

08003102 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6910      	ldr	r0, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4798      	blx	r3
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	6910      	ldr	r0, [r2, #16]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4798      	blx	r3
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003152:	2003      	movs	r0, #3
 8003154:	f001 fdf6 	bl	8004d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003158:	f002 feca 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <HAL_Init+0x68>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	4913      	ldr	r1, [pc, #76]	@ (80031b8 <HAL_Init+0x6c>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_Init+0x68>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	4a0e      	ldr	r2, [pc, #56]	@ (80031b8 <HAL_Init+0x6c>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	4a0b      	ldr	r2, [pc, #44]	@ (80031bc <HAL_Init+0x70>)
 800318e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003190:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <HAL_Init+0x74>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003196:	2000      	movs	r0, #0
 8003198:	f000 f814 	bl	80031c4 <HAL_InitTick>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e002      	b.n	80031ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031a6:	f7fd fd3d 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	0800b070 	.word	0x0800b070
 80031bc:	24000004 	.word	0x24000004
 80031c0:	24000000 	.word	0x24000000

080031c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_InitTick+0x60>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e021      	b.n	800321c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_InitTick+0x64>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_InitTick+0x60>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4619      	mov	r1, r3
 80031e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fdcd 	bl	8004d8e <HAL_SYSTICK_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00e      	b.n	800321c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b0f      	cmp	r3, #15
 8003202:	d80a      	bhi.n	800321a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003204:	2200      	movs	r2, #0
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f001 fda5 	bl	8004d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003210:	4a06      	ldr	r2, [pc, #24]	@ (800322c <HAL_InitTick+0x68>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2400009c 	.word	0x2400009c
 8003228:	24000000 	.word	0x24000000
 800322c:	24000098 	.word	0x24000098

08003230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_IncTick+0x20>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_IncTick+0x24>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4413      	add	r3, r2
 8003240:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <HAL_IncTick+0x24>)
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2400009c 	.word	0x2400009c
 8003254:	240007c0 	.word	0x240007c0

08003258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTick;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_GetTick+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	240007c0 	.word	0x240007c0

08003270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff ffee 	bl	8003258 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d005      	beq.n	8003296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_Delay+0x44>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003296:	bf00      	nop
 8003298:	f7ff ffde 	bl	8003258 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d8f7      	bhi.n	8003298 <HAL_Delay+0x28>
  {
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2400009c 	.word	0x2400009c

080032b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <HAL_GetREVID+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0c1b      	lsrs	r3, r3, #16
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	5c001000 	.word	0x5c001000

080032d0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80032d4:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <HAL_GetDEVID+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	5c001000 	.word	0x5c001000

080032ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 0202 	bic.w	r2, r3, #2
 80032fc:	4904      	ldr	r1, [pc, #16]	@ (8003310 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	58003c00 	.word	0x58003c00

08003314 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	58003c00 	.word	0x58003c00

08003334 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	4904      	ldr	r1, [pc, #16]	@ (800335c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	58000400 	.word	0x58000400

08003360 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <LL_ADC_SetChannelPreselection+0x24>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	0e9b      	lsrs	r3, r3, #26
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2201      	movs	r2, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	e015      	b.n	8003418 <LL_ADC_SetChannelPreselection+0x50>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	69d2      	ldr	r2, [r2, #28]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3360      	adds	r3, #96	@ 0x60
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	611a      	str	r2, [r3, #16]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3360      	adds	r3, #96	@ 0x60
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
  }
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3330      	adds	r3, #48	@ 0x30
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	211f      	movs	r1, #31
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0e9b      	lsrs	r3, r3, #26
 8003534:	f003 011f 	and.w	r1, r3, #31
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	431a      	orrs	r2, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3314      	adds	r3, #20
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0e5b      	lsrs	r3, r3, #25
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	0d1b      	lsrs	r3, r3, #20
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2107      	movs	r1, #7
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	401a      	ands	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0d1b      	lsrs	r3, r3, #20
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c4:	43db      	mvns	r3, r3
 80035c6:	401a      	ands	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0318 	and.w	r3, r3, #24
 80035ce:	4908      	ldr	r1, [pc, #32]	@ (80035f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80035d0:	40d9      	lsrs	r1, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	400b      	ands	r3, r1
 80035d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035da:	431a      	orrs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	000fffff 	.word	0x000fffff

080035f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 031f 	and.w	r3, r3, #31
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <LL_ADC_DisableDeepPowerDown+0x20>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6093      	str	r3, [r2, #8]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	5fffffc0 	.word	0x5fffffc0

08003650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003664:	d101      	bne.n	800366a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <LL_ADC_EnableInternalRegulator+0x24>)
 8003686:	4013      	ands	r3, r2
 8003688:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	6fffffc0 	.word	0x6fffffc0

080036a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b4:	d101      	bne.n	80036ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <LL_ADC_Enable+0x24>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	7fffffc0 	.word	0x7fffffc0

080036f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <LL_ADC_Disable+0x24>)
 80036fe:	4013      	ands	r3, r2
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	7fffffc0 	.word	0x7fffffc0

08003718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <LL_ADC_IsEnabled+0x18>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_ADC_IsEnabled+0x1a>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsDisableOngoing+0x18>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsDisableOngoing+0x1a>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <LL_ADC_REG_StartConversion+0x24>)
 8003772:	4013      	ands	r3, r2
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	7fffffc0 	.word	0x7fffffc0

0800378c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <LL_ADC_REG_StopConversion+0x24>)
 800379a:	4013      	ands	r3, r2
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	7fffffc0 	.word	0x7fffffc0

080037b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d101      	bne.n	80037cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <LL_ADC_INJ_StopConversion+0x24>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	7fffffc0 	.word	0x7fffffc0

08003804 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d101      	bne.n	800381c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e18f      	b.n	8003b66 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fc fe29 	bl	80004ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff feef 	bl	8003650 <LL_ADC_IsDeepPowerDownEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fed5 	bl	800362c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff0a 	bl	80036a0 <LL_ADC_IsInternalRegulatorEnabled>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff feee 	bl	8003678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b87      	ldr	r3, [pc, #540]	@ (8003abc <HAL_ADC_Init+0x290>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a87      	ldr	r2, [pc, #540]	@ (8003ac0 <HAL_ADC_Init+0x294>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff feed 	bl	80036a0 <LL_ADC_IsInternalRegulatorEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff61 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 80038f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8129 	bne.w	8003b54 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8125 	bne.w	8003b54 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fefa 	bl	8003718 <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d136      	bne.n	8003998 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_ADC_Init+0x112>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a63      	ldr	r2, [pc, #396]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10e      	bne.n	800395c <HAL_ADC_Init+0x130>
 800393e:	4861      	ldr	r0, [pc, #388]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003940:	f7ff feea 	bl	8003718 <LL_ADC_IsEnabled>
 8003944:	4604      	mov	r4, r0
 8003946:	4860      	ldr	r0, [pc, #384]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003948:	f7ff fee6 	bl	8003718 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	4323      	orrs	r3, r4
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_ADC_Init+0x142>
 800395c:	485b      	ldr	r0, [pc, #364]	@ (8003acc <HAL_ADC_Init+0x2a0>)
 800395e:	f7ff fedb 	bl	8003718 <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_ADC_Init+0x15a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a51      	ldr	r2, [pc, #324]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_ADC_Init+0x15e>
 8003986:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_ADC_Init+0x2a4>)
 8003988:	e000      	b.n	800398c <HAL_ADC_Init+0x160>
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_ADC_Init+0x2a8>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7ff fce4 	bl	8003360 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003998:	f7ff fc8e 	bl	80032b8 <HAL_GetREVID>
 800399c:	4603      	mov	r3, r0
 800399e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d914      	bls.n	80039d0 <HAL_ADC_Init+0x1a4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d110      	bne.n	80039d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7d5b      	ldrb	r3, [r3, #21]
 80039b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7f1b      	ldrb	r3, [r3, #28]
 80039c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039c8:	f043 030c 	orr.w	r3, r3, #12
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e00d      	b.n	80039ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7d5b      	ldrb	r3, [r3, #21]
 80039d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7f1b      	ldrb	r3, [r3, #28]
 80039e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7f1b      	ldrb	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	045b      	lsls	r3, r3, #17
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_ADC_Init+0x2ac>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff febc 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fede 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 8003a48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d15f      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d15c      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7d1b      	ldrb	r3, [r3, #20]
 8003a5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <HAL_ADC_Init+0x2b0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d130      	bne.n	8003ae4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_ADC_Init+0x2b4>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a96:	3a01      	subs	r2, #1
 8003a98:	0411      	lsls	r1, r2, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	611a      	str	r2, [r3, #16]
 8003ab8:	e01c      	b.n	8003af4 <HAL_ADC_Init+0x2c8>
 8003aba:	bf00      	nop
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	053e2d63 	.word	0x053e2d63
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022100 	.word	0x40022100
 8003acc:	58026000 	.word	0x58026000
 8003ad0:	40022300 	.word	0x40022300
 8003ad4:	58026300 	.word	0x58026300
 8003ad8:	fff0c003 	.word	0xfff0c003
 8003adc:	ffffbffc 	.word	0xffffbffc
 8003ae0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fec6 	bl	800489c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10c      	bne.n	8003b32 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	f023 010f 	bic.w	r1, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b30:	e007      	b.n	8003b42 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020f 	bic.w	r2, r2, #15
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b52:	e007      	b.n	8003b64 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop

08003b70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003cf0 <HAL_ADC_Start+0x180>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_ADC_Start+0x1c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf4 <HAL_ADC_Start+0x184>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_Start+0x20>
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf8 <HAL_ADC_Start+0x188>)
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_Start+0x22>
 8003b90:	4b5a      	ldr	r3, [pc, #360]	@ (8003cfc <HAL_ADC_Start+0x18c>)
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fd2e 	bl	80035f4 <LL_ADC_GetMultimode>
 8003b98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fe08 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 809a 	bne.w	8003ce0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Start+0x4a>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e095      	b.n	8003ce6 <HAL_ADC_Start+0x176>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fd80 	bl	80046c8 <ADC_Enable>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 8081 	bne.w	8003cd6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd8:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_ADC_Start+0x190>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a42      	ldr	r2, [pc, #264]	@ (8003cf4 <HAL_ADC_Start+0x184>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d002      	beq.n	8003bf4 <HAL_ADC_Start+0x84>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e000      	b.n	8003bf6 <HAL_ADC_Start+0x86>
 8003bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf0 <HAL_ADC_Start+0x180>)
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d002      	beq.n	8003c04 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1c:	d106      	bne.n	8003c2c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	f023 0206 	bic.w	r2, r3, #6
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c2a:	e002      	b.n	8003c32 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	221c      	movs	r2, #28
 8003c38:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_ADC_Start+0x184>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d002      	beq.n	8003c52 <HAL_ADC_Start+0xe2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	e000      	b.n	8003c54 <HAL_ADC_Start+0xe4>
 8003c52:	4b27      	ldr	r3, [pc, #156]	@ (8003cf0 <HAL_ADC_Start+0x180>)
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d008      	beq.n	8003c6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d002      	beq.n	8003c6e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b09      	cmp	r3, #9
 8003c6c:	d114      	bne.n	8003c98 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fd67 	bl	8003764 <LL_ADC_REG_StartConversion>
 8003c96:	e025      	b.n	8003ce4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <HAL_ADC_Start+0x184>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d002      	beq.n	8003cb4 <HAL_ADC_Start+0x144>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADC_Start+0x146>
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_ADC_Start+0x180>)
 8003cb6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ccc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd4:	e006      	b.n	8003ce4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003cde:	e001      	b.n	8003ce4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40022100 	.word	0x40022100
 8003cf8:	40022300 	.word	0x40022300
 8003cfc:	58026300 	.word	0x58026300
 8003d00:	fffff0fe 	.word	0xfffff0fe

08003d04 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_ADC_Stop+0x16>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e021      	b.n	8003d5e <HAL_ADC_Stop+0x5a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003d22:	2103      	movs	r1, #3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fc13 	bl	8004550 <ADC_ConversionStop>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fd51 	bl	80047dc <ADC_Disable>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d48:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <HAL_ADC_Stop+0x64>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	ffffeefe 	.word	0xffffeefe

08003d6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a72      	ldr	r2, [pc, #456]	@ (8003f44 <HAL_ADC_PollForConversion+0x1d8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_ADC_PollForConversion+0x1e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a70      	ldr	r2, [pc, #448]	@ (8003f48 <HAL_ADC_PollForConversion+0x1dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_PollForConversion+0x22>
 8003d8a:	4b70      	ldr	r3, [pc, #448]	@ (8003f4c <HAL_ADC_PollForConversion+0x1e0>)
 8003d8c:	e000      	b.n	8003d90 <HAL_ADC_PollForConversion+0x24>
 8003d8e:	4b70      	ldr	r3, [pc, #448]	@ (8003f50 <HAL_ADC_PollForConversion+0x1e4>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fc2f 	bl	80035f4 <LL_ADC_GetMultimode>
 8003d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d102      	bne.n	8003da6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003da0:	2308      	movs	r3, #8
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e037      	b.n	8003e16 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d002      	beq.n	8003db8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d111      	bne.n	8003ddc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0b1      	b.n	8003f3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003dda:	e01c      	b.n	8003e16 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a58      	ldr	r2, [pc, #352]	@ (8003f44 <HAL_ADC_PollForConversion+0x1d8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x84>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a57      	ldr	r2, [pc, #348]	@ (8003f48 <HAL_ADC_PollForConversion+0x1dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_PollForConversion+0x88>
 8003df0:	4b56      	ldr	r3, [pc, #344]	@ (8003f4c <HAL_ADC_PollForConversion+0x1e0>)
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_PollForConversion+0x8a>
 8003df4:	4b56      	ldr	r3, [pc, #344]	@ (8003f50 <HAL_ADC_PollForConversion+0x1e4>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fc0a 	bl	8003610 <LL_ADC_GetMultiDMATransfer>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e093      	b.n	8003f3a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003e12:	2304      	movs	r3, #4
 8003e14:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e16:	f7ff fa1f 	bl	8003258 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e1c:	e021      	b.n	8003e62 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d01d      	beq.n	8003e62 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e26:	f7ff fa17 	bl	8003258 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <HAL_ADC_PollForConversion+0xd0>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e06b      	b.n	8003f3a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0d6      	beq.n	8003e1e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fb28 	bl	80034d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7d5b      	ldrb	r3, [r3, #21]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d111      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_ADC_PollForConversion+0x1dc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x16a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_PollForConversion+0x16c>
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <HAL_ADC_PollForConversion+0x1d8>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d008      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d002      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d104      	bne.n	8003efc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e00c      	b.n	8003f16 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <HAL_ADC_PollForConversion+0x1dc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d002      	beq.n	8003f0c <HAL_ADC_PollForConversion+0x1a0>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_ADC_PollForConversion+0x1a2>
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <HAL_ADC_PollForConversion+0x1d8>)
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d104      	bne.n	8003f26 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e008      	b.n	8003f38 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	220c      	movs	r2, #12
 8003f36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40022100 	.word	0x40022100
 8003f4c:	40022300 	.word	0x40022300
 8003f50:	58026300 	.word	0x58026300

08003f54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b08d      	sub	sp, #52	@ 0x34
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x2a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e2c7      	b.n	800452a <HAL_ADC_ConfigChannel+0x5ba>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fc04 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 82ac 	bne.w	800450c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	db2c      	blt.n	8004016 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d108      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x6a>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	e016      	b.n	8004008 <HAL_ADC_ConfigChannel+0x98>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	613b      	str	r3, [r7, #16]
  return result;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e003      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	69d1      	ldr	r1, [r2, #28]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	430b      	orrs	r3, r1
 8004014:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7ff fa6a 	bl	80034fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fbc1 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8004032:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fbe3 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 800403e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 80b8 	bne.w	80041b8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	f040 80b4 	bne.w	80041b8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	461a      	mov	r2, r3
 800405e:	f7ff fa79 	bl	8003554 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004062:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <HAL_ADC_ConfigChannel+0x1b4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800406e:	d10b      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x118>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	089b      	lsrs	r3, r3, #2
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	e01d      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x154>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x13e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	e00a      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x154>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d02c      	beq.n	8004128 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6919      	ldr	r1, [r3, #16]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f7ff f9a7 	bl	800342e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6919      	ldr	r1, [r3, #16]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	7e5b      	ldrb	r3, [r3, #25]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x186>
 80040f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80040f4:	e000      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x188>
 80040f6:	2300      	movs	r3, #0
 80040f8:	461a      	mov	r2, r3
 80040fa:	f7ff f9d1 	bl	80034a0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	7e1b      	ldrb	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x1a4>
 800410e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004112:	e000      	b.n	8004116 <HAL_ADC_ConfigChannel+0x1a6>
 8004114:	2300      	movs	r3, #0
 8004116:	461a      	mov	r2, r3
 8004118:	f7ff f9a9 	bl	800346e <LL_ADC_SetDataRightShift>
 800411c:	e04c      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x248>
 800411e:	bf00      	nop
 8004120:	47ff0000 	.word	0x47ff0000
 8004124:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	069b      	lsls	r3, r3, #26
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004152:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	069b      	lsls	r3, r3, #26
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800416e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004176:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	069b      	lsls	r3, r3, #26
 8004180:	429a      	cmp	r2, r3
 8004182:	d107      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004192:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	069b      	lsls	r3, r3, #26
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff faab 	bl	8003718 <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 81aa 	bne.w	800451e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7ff f9e8 	bl	80035ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a87      	ldr	r2, [pc, #540]	@ (8004400 <HAL_ADC_ConfigChannel+0x490>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f040 809a 	bne.w	800431c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4984      	ldr	r1, [pc, #528]	@ (8004404 <HAL_ADC_ConfigChannel+0x494>)
 80041f2:	428b      	cmp	r3, r1
 80041f4:	d147      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x316>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4983      	ldr	r1, [pc, #524]	@ (8004408 <HAL_ADC_ConfigChannel+0x498>)
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d040      	beq.n	8004282 <HAL_ADC_ConfigChannel+0x312>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4981      	ldr	r1, [pc, #516]	@ (800440c <HAL_ADC_ConfigChannel+0x49c>)
 8004206:	428b      	cmp	r3, r1
 8004208:	d039      	beq.n	800427e <HAL_ADC_ConfigChannel+0x30e>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4980      	ldr	r1, [pc, #512]	@ (8004410 <HAL_ADC_ConfigChannel+0x4a0>)
 8004210:	428b      	cmp	r3, r1
 8004212:	d032      	beq.n	800427a <HAL_ADC_ConfigChannel+0x30a>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	497e      	ldr	r1, [pc, #504]	@ (8004414 <HAL_ADC_ConfigChannel+0x4a4>)
 800421a:	428b      	cmp	r3, r1
 800421c:	d02b      	beq.n	8004276 <HAL_ADC_ConfigChannel+0x306>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	497d      	ldr	r1, [pc, #500]	@ (8004418 <HAL_ADC_ConfigChannel+0x4a8>)
 8004224:	428b      	cmp	r3, r1
 8004226:	d024      	beq.n	8004272 <HAL_ADC_ConfigChannel+0x302>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	497b      	ldr	r1, [pc, #492]	@ (800441c <HAL_ADC_ConfigChannel+0x4ac>)
 800422e:	428b      	cmp	r3, r1
 8004230:	d01d      	beq.n	800426e <HAL_ADC_ConfigChannel+0x2fe>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	497a      	ldr	r1, [pc, #488]	@ (8004420 <HAL_ADC_ConfigChannel+0x4b0>)
 8004238:	428b      	cmp	r3, r1
 800423a:	d016      	beq.n	800426a <HAL_ADC_ConfigChannel+0x2fa>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4978      	ldr	r1, [pc, #480]	@ (8004424 <HAL_ADC_ConfigChannel+0x4b4>)
 8004242:	428b      	cmp	r3, r1
 8004244:	d00f      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x2f6>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4977      	ldr	r1, [pc, #476]	@ (8004428 <HAL_ADC_ConfigChannel+0x4b8>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d008      	beq.n	8004262 <HAL_ADC_ConfigChannel+0x2f2>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4975      	ldr	r1, [pc, #468]	@ (800442c <HAL_ADC_ConfigChannel+0x4bc>)
 8004256:	428b      	cmp	r3, r1
 8004258:	d101      	bne.n	800425e <HAL_ADC_ConfigChannel+0x2ee>
 800425a:	4b75      	ldr	r3, [pc, #468]	@ (8004430 <HAL_ADC_ConfigChannel+0x4c0>)
 800425c:	e05a      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800425e:	2300      	movs	r3, #0
 8004260:	e058      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004262:	4b74      	ldr	r3, [pc, #464]	@ (8004434 <HAL_ADC_ConfigChannel+0x4c4>)
 8004264:	e056      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004266:	4b74      	ldr	r3, [pc, #464]	@ (8004438 <HAL_ADC_ConfigChannel+0x4c8>)
 8004268:	e054      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800426a:	4b6e      	ldr	r3, [pc, #440]	@ (8004424 <HAL_ADC_ConfigChannel+0x4b4>)
 800426c:	e052      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800426e:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <HAL_ADC_ConfigChannel+0x4b0>)
 8004270:	e050      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004272:	4b72      	ldr	r3, [pc, #456]	@ (800443c <HAL_ADC_ConfigChannel+0x4cc>)
 8004274:	e04e      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004276:	4b72      	ldr	r3, [pc, #456]	@ (8004440 <HAL_ADC_ConfigChannel+0x4d0>)
 8004278:	e04c      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800427a:	4b72      	ldr	r3, [pc, #456]	@ (8004444 <HAL_ADC_ConfigChannel+0x4d4>)
 800427c:	e04a      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800427e:	4b72      	ldr	r3, [pc, #456]	@ (8004448 <HAL_ADC_ConfigChannel+0x4d8>)
 8004280:	e048      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004282:	2301      	movs	r3, #1
 8004284:	e046      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4970      	ldr	r1, [pc, #448]	@ (800444c <HAL_ADC_ConfigChannel+0x4dc>)
 800428c:	428b      	cmp	r3, r1
 800428e:	d140      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x3a2>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	495c      	ldr	r1, [pc, #368]	@ (8004408 <HAL_ADC_ConfigChannel+0x498>)
 8004296:	428b      	cmp	r3, r1
 8004298:	d039      	beq.n	800430e <HAL_ADC_ConfigChannel+0x39e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	495b      	ldr	r1, [pc, #364]	@ (800440c <HAL_ADC_ConfigChannel+0x49c>)
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d032      	beq.n	800430a <HAL_ADC_ConfigChannel+0x39a>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4959      	ldr	r1, [pc, #356]	@ (8004410 <HAL_ADC_ConfigChannel+0x4a0>)
 80042aa:	428b      	cmp	r3, r1
 80042ac:	d02b      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x396>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4958      	ldr	r1, [pc, #352]	@ (8004414 <HAL_ADC_ConfigChannel+0x4a4>)
 80042b4:	428b      	cmp	r3, r1
 80042b6:	d024      	beq.n	8004302 <HAL_ADC_ConfigChannel+0x392>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4956      	ldr	r1, [pc, #344]	@ (8004418 <HAL_ADC_ConfigChannel+0x4a8>)
 80042be:	428b      	cmp	r3, r1
 80042c0:	d01d      	beq.n	80042fe <HAL_ADC_ConfigChannel+0x38e>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4955      	ldr	r1, [pc, #340]	@ (800441c <HAL_ADC_ConfigChannel+0x4ac>)
 80042c8:	428b      	cmp	r3, r1
 80042ca:	d016      	beq.n	80042fa <HAL_ADC_ConfigChannel+0x38a>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4953      	ldr	r1, [pc, #332]	@ (8004420 <HAL_ADC_ConfigChannel+0x4b0>)
 80042d2:	428b      	cmp	r3, r1
 80042d4:	d00f      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0x386>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4952      	ldr	r1, [pc, #328]	@ (8004424 <HAL_ADC_ConfigChannel+0x4b4>)
 80042dc:	428b      	cmp	r3, r1
 80042de:	d008      	beq.n	80042f2 <HAL_ADC_ConfigChannel+0x382>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4951      	ldr	r1, [pc, #324]	@ (800442c <HAL_ADC_ConfigChannel+0x4bc>)
 80042e6:	428b      	cmp	r3, r1
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x37e>
 80042ea:	4b51      	ldr	r3, [pc, #324]	@ (8004430 <HAL_ADC_ConfigChannel+0x4c0>)
 80042ec:	e012      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 80042ee:	2300      	movs	r3, #0
 80042f0:	e010      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 80042f2:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <HAL_ADC_ConfigChannel+0x4c8>)
 80042f4:	e00e      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 80042f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004424 <HAL_ADC_ConfigChannel+0x4b4>)
 80042f8:	e00c      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 80042fa:	4b49      	ldr	r3, [pc, #292]	@ (8004420 <HAL_ADC_ConfigChannel+0x4b0>)
 80042fc:	e00a      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 80042fe:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <HAL_ADC_ConfigChannel+0x4cc>)
 8004300:	e008      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004302:	4b4f      	ldr	r3, [pc, #316]	@ (8004440 <HAL_ADC_ConfigChannel+0x4d0>)
 8004304:	e006      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004306:	4b4f      	ldr	r3, [pc, #316]	@ (8004444 <HAL_ADC_ConfigChannel+0x4d4>)
 8004308:	e004      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800430a:	4b4f      	ldr	r3, [pc, #316]	@ (8004448 <HAL_ADC_ConfigChannel+0x4d8>)
 800430c:	e002      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_ADC_ConfigChannel+0x3a4>
 8004312:	2300      	movs	r3, #0
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7ff f856 	bl	80033c8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f280 80fc 	bge.w	800451e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a36      	ldr	r2, [pc, #216]	@ (8004404 <HAL_ADC_ConfigChannel+0x494>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_ADC_ConfigChannel+0x3ca>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a45      	ldr	r2, [pc, #276]	@ (800444c <HAL_ADC_ConfigChannel+0x4dc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x3ce>
 800433a:	4b45      	ldr	r3, [pc, #276]	@ (8004450 <HAL_ADC_ConfigChannel+0x4e0>)
 800433c:	e000      	b.n	8004340 <HAL_ADC_ConfigChannel+0x3d0>
 800433e:	4b45      	ldr	r3, [pc, #276]	@ (8004454 <HAL_ADC_ConfigChannel+0x4e4>)
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f833 	bl	80033ac <LL_ADC_GetCommonPathInternalCh>
 8004346:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2d      	ldr	r2, [pc, #180]	@ (8004404 <HAL_ADC_ConfigChannel+0x494>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_ADC_ConfigChannel+0x3ec>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a3d      	ldr	r2, [pc, #244]	@ (800444c <HAL_ADC_ConfigChannel+0x4dc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d10e      	bne.n	800437a <HAL_ADC_ConfigChannel+0x40a>
 800435c:	4829      	ldr	r0, [pc, #164]	@ (8004404 <HAL_ADC_ConfigChannel+0x494>)
 800435e:	f7ff f9db 	bl	8003718 <LL_ADC_IsEnabled>
 8004362:	4604      	mov	r4, r0
 8004364:	4839      	ldr	r0, [pc, #228]	@ (800444c <HAL_ADC_ConfigChannel+0x4dc>)
 8004366:	f7ff f9d7 	bl	8003718 <LL_ADC_IsEnabled>
 800436a:	4603      	mov	r3, r0
 800436c:	4323      	orrs	r3, r4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e008      	b.n	800438c <HAL_ADC_ConfigChannel+0x41c>
 800437a:	4837      	ldr	r0, [pc, #220]	@ (8004458 <HAL_ADC_ConfigChannel+0x4e8>)
 800437c:	f7ff f9cc 	bl	8003718 <LL_ADC_IsEnabled>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80b3 	beq.w	80044f8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a31      	ldr	r2, [pc, #196]	@ (800445c <HAL_ADC_ConfigChannel+0x4ec>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d165      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x4f8>
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d160      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004458 <HAL_ADC_ConfigChannel+0x4e8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	f040 80b6 	bne.w	800451e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a13      	ldr	r2, [pc, #76]	@ (8004404 <HAL_ADC_ConfigChannel+0x494>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x456>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a22      	ldr	r2, [pc, #136]	@ (800444c <HAL_ADC_ConfigChannel+0x4dc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x45a>
 80043c6:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <HAL_ADC_ConfigChannel+0x4e0>)
 80043c8:	e000      	b.n	80043cc <HAL_ADC_ConfigChannel+0x45c>
 80043ca:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <HAL_ADC_ConfigChannel+0x4e4>)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe ffd6 	bl	8003386 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043da:	4b21      	ldr	r3, [pc, #132]	@ (8004460 <HAL_ADC_ConfigChannel+0x4f0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <HAL_ADC_ConfigChannel+0x4f4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	3301      	adds	r3, #1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80043ee:	e002      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f9      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043fc:	e08f      	b.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
 80043fe:	bf00      	nop
 8004400:	47ff0000 	.word	0x47ff0000
 8004404:	40022000 	.word	0x40022000
 8004408:	04300002 	.word	0x04300002
 800440c:	08600004 	.word	0x08600004
 8004410:	0c900008 	.word	0x0c900008
 8004414:	10c00010 	.word	0x10c00010
 8004418:	14f00020 	.word	0x14f00020
 800441c:	2a000400 	.word	0x2a000400
 8004420:	2e300800 	.word	0x2e300800
 8004424:	32601000 	.word	0x32601000
 8004428:	43210000 	.word	0x43210000
 800442c:	4b840000 	.word	0x4b840000
 8004430:	4fb80000 	.word	0x4fb80000
 8004434:	47520000 	.word	0x47520000
 8004438:	36902000 	.word	0x36902000
 800443c:	25b00200 	.word	0x25b00200
 8004440:	21800100 	.word	0x21800100
 8004444:	1d500080 	.word	0x1d500080
 8004448:	19200040 	.word	0x19200040
 800444c:	40022100 	.word	0x40022100
 8004450:	40022300 	.word	0x40022300
 8004454:	58026300 	.word	0x58026300
 8004458:	58026000 	.word	0x58026000
 800445c:	cb840000 	.word	0xcb840000
 8004460:	24000000 	.word	0x24000000
 8004464:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a31      	ldr	r2, [pc, #196]	@ (8004534 <HAL_ADC_ConfigChannel+0x5c4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11e      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x540>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d119      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	@ (8004538 <HAL_ADC_ConfigChannel+0x5c8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d14b      	bne.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	@ (800453c <HAL_ADC_ConfigChannel+0x5cc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_ADC_ConfigChannel+0x52a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <HAL_ADC_ConfigChannel+0x5d0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_ADC_ConfigChannel+0x52e>
 800449a:	4a2a      	ldr	r2, [pc, #168]	@ (8004544 <HAL_ADC_ConfigChannel+0x5d4>)
 800449c:	e000      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x530>
 800449e:	4a2a      	ldr	r2, [pc, #168]	@ (8004548 <HAL_ADC_ConfigChannel+0x5d8>)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f7fe ff6c 	bl	8003386 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ae:	e036      	b.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <HAL_ADC_ConfigChannel+0x5dc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d131      	bne.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d12c      	bne.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <HAL_ADC_ConfigChannel+0x5c8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d127      	bne.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1a      	ldr	r2, [pc, #104]	@ (800453c <HAL_ADC_ConfigChannel+0x5cc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_ADC_ConfigChannel+0x572>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <HAL_ADC_ConfigChannel+0x5d0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x576>
 80044e2:	4a18      	ldr	r2, [pc, #96]	@ (8004544 <HAL_ADC_ConfigChannel+0x5d4>)
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x578>
 80044e6:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <HAL_ADC_ConfigChannel+0x5d8>)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7fe ff48 	bl	8003386 <LL_ADC_SetCommonPathInternalCh>
 80044f6:	e012      	b.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800450a:	e008      	b.n	800451e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800452a:	4618      	mov	r0, r3
 800452c:	3734      	adds	r7, #52	@ 0x34
 800452e:	46bd      	mov	sp, r7
 8004530:	bd90      	pop	{r4, r7, pc}
 8004532:	bf00      	nop
 8004534:	c7520000 	.word	0xc7520000
 8004538:	58026000 	.word	0x58026000
 800453c:	40022000 	.word	0x40022000
 8004540:	40022100 	.word	0x40022100
 8004544:	40022300 	.word	0x40022300
 8004548:	58026300 	.word	0x58026300
 800454c:	cfb80000 	.word	0xcfb80000

08004550 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f924 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 800456c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f946 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 8004578:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8098 	beq.w	80046b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02a      	beq.n	80045ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7d5b      	ldrb	r3, [r3, #21]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d126      	bne.n	80045ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	7d1b      	ldrb	r3, [r3, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d122      	bne.n	80045ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045aa:	e014      	b.n	80045d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4a45      	ldr	r2, [pc, #276]	@ (80046c4 <ADC_ConversionStop+0x174>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d90d      	bls.n	80045d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c4:	f043 0201 	orr.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e074      	b.n	80046ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d1e3      	bne.n	80045ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2240      	movs	r2, #64	@ 0x40
 80045ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d014      	beq.n	800461c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff f8dc 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f899 	bl	800373e <LL_ADC_IsDisableOngoing>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff f8b8 	bl	800378c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d014      	beq.n	800464c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f8ec 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff f881 	bl	800373e <LL_ADC_IsDisableOngoing>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f8c8 	bl	80037dc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d005      	beq.n	800465e <ADC_ConversionStop+0x10e>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d105      	bne.n	8004664 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004658:	230c      	movs	r3, #12
 800465a:	617b      	str	r3, [r7, #20]
        break;
 800465c:	e005      	b.n	800466a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800465e:	2308      	movs	r3, #8
 8004660:	617b      	str	r3, [r7, #20]
        break;
 8004662:	e002      	b.n	800466a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004664:	2304      	movs	r3, #4
 8004666:	617b      	str	r3, [r7, #20]
        break;
 8004668:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800466a:	f7fe fdf5 	bl	8003258 <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004670:	e01b      	b.n	80046aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004672:	f7fe fdf1 	bl	8003258 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b05      	cmp	r3, #5
 800467e:	d914      	bls.n	80046aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e007      	b.n	80046ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1dc      	bne.n	8004672 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	000cdbff 	.word	0x000cdbff

080046c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff f81f 	bl	8003718 <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d16e      	bne.n	80047be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	4b38      	ldr	r3, [pc, #224]	@ (80047c8 <ADC_Enable+0x100>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	f043 0210 	orr.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e05a      	b.n	80047c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ffda 	bl	80036c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004714:	f7fe fda0 	bl	8003258 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <ADC_Enable+0x104>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <ADC_Enable+0x66>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <ADC_Enable+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <ADC_Enable+0x6a>
 800472e:	4b29      	ldr	r3, [pc, #164]	@ (80047d4 <ADC_Enable+0x10c>)
 8004730:	e000      	b.n	8004734 <ADC_Enable+0x6c>
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <ADC_Enable+0x110>)
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ff5d 	bl	80035f4 <LL_ADC_GetMultimode>
 800473a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a23      	ldr	r2, [pc, #140]	@ (80047d0 <ADC_Enable+0x108>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d002      	beq.n	800474c <ADC_Enable+0x84>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	e000      	b.n	800474e <ADC_Enable+0x86>
 800474c:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <ADC_Enable+0x104>)
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	4293      	cmp	r3, r2
 8004754:	d02c      	beq.n	80047b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d130      	bne.n	80047be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800475c:	e028      	b.n	80047b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe ffd8 	bl	8003718 <LL_ADC_IsEnabled>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ffa8 	bl	80036c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004778:	f7fe fd6e 	bl	8003258 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d914      	bls.n	80047b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d00d      	beq.n	80047b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a4:	f043 0201 	orr.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e007      	b.n	80047c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d1cf      	bne.n	800475e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	8000003f 	.word	0x8000003f
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40022100 	.word	0x40022100
 80047d4:	40022300 	.word	0x40022300
 80047d8:	58026300 	.word	0x58026300

080047dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe ffa8 	bl	800373e <LL_ADC_IsDisableOngoing>
 80047ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe ff8f 	bl	8003718 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d047      	beq.n	8004890 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d144      	bne.n	8004890 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030d 	and.w	r3, r3, #13
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10c      	bne.n	800482e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe ff69 	bl	80036f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2203      	movs	r2, #3
 8004824:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004826:	f7fe fd17 	bl	8003258 <HAL_GetTick>
 800482a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800482c:	e029      	b.n	8004882 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e023      	b.n	8004892 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800484a:	f7fe fd05 	bl	8003258 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d914      	bls.n	8004882 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e007      	b.n	8004892 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1dc      	bne.n	800484a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a7a      	ldr	r2, [pc, #488]	@ (8004a94 <ADC_ConfigureBoostMode+0x1f8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x1c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a79      	ldr	r2, [pc, #484]	@ (8004a98 <ADC_ConfigureBoostMode+0x1fc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d109      	bne.n	80048cc <ADC_ConfigureBoostMode+0x30>
 80048b8:	4b78      	ldr	r3, [pc, #480]	@ (8004a9c <ADC_ConfigureBoostMode+0x200>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <ADC_ConfigureBoostMode+0x42>
 80048cc:	4b74      	ldr	r3, [pc, #464]	@ (8004aa0 <ADC_ConfigureBoostMode+0x204>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01c      	beq.n	800491c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048e2:	f001 fc7f 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 80048e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048f0:	d010      	beq.n	8004914 <ADC_ConfigureBoostMode+0x78>
 80048f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048f6:	d873      	bhi.n	80049e0 <ADC_ConfigureBoostMode+0x144>
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d002      	beq.n	8004904 <ADC_ConfigureBoostMode+0x68>
 80048fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004902:	d16d      	bne.n	80049e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	60fb      	str	r3, [r7, #12]
        break;
 8004912:	e068      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	60fb      	str	r3, [r7, #12]
        break;
 800491a:	e064      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800491c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f002 feae 	bl	8007684 <HAL_RCCEx_GetPeriphCLKFreq>
 8004928:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004932:	d051      	beq.n	80049d8 <ADC_ConfigureBoostMode+0x13c>
 8004934:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004938:	d854      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800493a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800493e:	d047      	beq.n	80049d0 <ADC_ConfigureBoostMode+0x134>
 8004940:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004944:	d84e      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004946:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800494a:	d03d      	beq.n	80049c8 <ADC_ConfigureBoostMode+0x12c>
 800494c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004950:	d848      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004956:	d033      	beq.n	80049c0 <ADC_ConfigureBoostMode+0x124>
 8004958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800495c:	d842      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800495e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004962:	d029      	beq.n	80049b8 <ADC_ConfigureBoostMode+0x11c>
 8004964:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004968:	d83c      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800496a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800496e:	d01a      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004970:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004974:	d836      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004976:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800497a:	d014      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 800497c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004980:	d830      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004986:	d00e      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498c:	d82a      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800498e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004992:	d008      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004994:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004998:	d824      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800499a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800499e:	d002      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 80049a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049a4:	d11e      	bne.n	80049e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	0c9b      	lsrs	r3, r3, #18
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	60fb      	str	r3, [r7, #12]
        break;
 80049b6:	e016      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
        break;
 80049be:	e012      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	60fb      	str	r3, [r7, #12]
        break;
 80049c6:	e00e      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	60fb      	str	r3, [r7, #12]
        break;
 80049ce:	e00a      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	09db      	lsrs	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
        break;
 80049d6:	e006      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	60fb      	str	r3, [r7, #12]
        break;
 80049de:	e002      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80049e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80049e6:	f7fe fc67 	bl	80032b8 <HAL_GetREVID>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d815      	bhi.n	8004a20 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <ADC_ConfigureBoostMode+0x208>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d908      	bls.n	8004a0e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a0c:	e03e      	b.n	8004a8c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	e035      	b.n	8004a8c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa8 <ADC_ConfigureBoostMode+0x20c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d808      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	e025      	b.n	8004a8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a1a      	ldr	r2, [pc, #104]	@ (8004aac <ADC_ConfigureBoostMode+0x210>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d80a      	bhi.n	8004a5e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	e016      	b.n	8004a8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <ADC_ConfigureBoostMode+0x214>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d80a      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	e007      	b.n	8004a8c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a8a:	609a      	str	r2, [r3, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40022100 	.word	0x40022100
 8004a9c:	40022300 	.word	0x40022300
 8004aa0:	58026300 	.word	0x58026300
 8004aa4:	01312d00 	.word	0x01312d00
 8004aa8:	005f5e10 	.word	0x005f5e10
 8004aac:	00bebc20 	.word	0x00bebc20
 8004ab0:	017d7840 	.word	0x017d7840

08004ab4 <LL_ADC_StartCalibration>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <LL_ADC_StartCalibration+0x38>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	3ffeffc0 	.word	0x3ffeffc0

08004af0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b04:	d101      	bne.n	8004b0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_ADCEx_Calibration_Start+0x1e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e04c      	b.n	8004bd0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fe4c 	bl	80047dc <ADC_Disable>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d135      	bne.n	8004bba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b52:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff ffa4 	bl	8004ab4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b6c:	e014      	b.n	8004b98 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_ADCEx_Calibration_Start+0xc4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d30d      	bcc.n	8004b98 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	f023 0312 	bic.w	r3, r3, #18
 8004b84:	f043 0210 	orr.w	r2, r3, #16
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e01b      	b.n	8004bd0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ffa7 	bl	8004af0 <LL_ADC_IsCalibrationOnGoing>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e2      	bne.n	8004b6e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	f023 0303 	bic.w	r3, r3, #3
 8004bb0:	f043 0201 	orr.w	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8004bb8:	e005      	b.n	8004bc6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	ffffeefd 	.word	0xffffeefd
 8004bdc:	25c3f800 	.word	0x25c3f800

08004be0 <__NVIC_SetPriorityGrouping>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <__NVIC_SetPriorityGrouping+0x40>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <__NVIC_SetPriorityGrouping+0x44>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c0e:	4a04      	ldr	r2, [pc, #16]	@ (8004c20 <__NVIC_SetPriorityGrouping+0x40>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	60d3      	str	r3, [r2, #12]
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000ed00 	.word	0xe000ed00
 8004c24:	05fa0000 	.word	0x05fa0000

08004c28 <__NVIC_GetPriorityGrouping>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c2c:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <__NVIC_GetPriorityGrouping+0x18>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 0307 	and.w	r3, r3, #7
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <__NVIC_SetPriority>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	@ (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	@ (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <NVIC_EncodePriority>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	@ 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf28      	it	cs
 8004cb6:	2304      	movcs	r3, #4
 8004cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d902      	bls.n	8004cc8 <NVIC_EncodePriority+0x30>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	e000      	b.n	8004cca <NVIC_EncodePriority+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	401a      	ands	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43d9      	mvns	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	4313      	orrs	r3, r2
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	@ 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d10:	d301      	bcc.n	8004d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00f      	b.n	8004d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d16:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <SysTick_Config+0x40>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d1e:	210f      	movs	r1, #15
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	f7ff ff8e 	bl	8004c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <SysTick_Config+0x40>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <SysTick_Config+0x40>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010

08004d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff47 	bl	8004be0 <__NVIC_SetPriorityGrouping>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d68:	f7ff ff5e 	bl	8004c28 <__NVIC_GetPriorityGrouping>
 8004d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff90 	bl	8004c98 <NVIC_EncodePriority>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff5f 	bl	8004c44 <__NVIC_SetPriority>
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ffb2 	bl	8004d00 <SysTick_Config>
 8004d9c:	4603      	mov	r3, r0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004dac:	f3bf 8f5f 	dmb	sy
}
 8004db0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004db2:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <HAL_MPU_Disable+0x28>)
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	4a06      	ldr	r2, [pc, #24]	@ (8004dd0 <HAL_MPU_Disable+0x28>)
 8004db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dbc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <HAL_MPU_Disable+0x2c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	e000ed90 	.word	0xe000ed90

08004dd8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004de0:	4a0b      	ldr	r2, [pc, #44]	@ (8004e10 <HAL_MPU_Enable+0x38>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004dea:	4b0a      	ldr	r3, [pc, #40]	@ (8004e14 <HAL_MPU_Enable+0x3c>)
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	4a09      	ldr	r2, [pc, #36]	@ (8004e14 <HAL_MPU_Enable+0x3c>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004df6:	f3bf 8f4f 	dsb	sy
}
 8004dfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004dfc:	f3bf 8f6f 	isb	sy
}
 8004e00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	e000ed90 	.word	0xe000ed90
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	785a      	ldrb	r2, [r3, #1]
 8004e24:	4b1b      	ldr	r3, [pc, #108]	@ (8004e94 <HAL_MPU_ConfigRegion+0x7c>)
 8004e26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004e28:	4b1a      	ldr	r3, [pc, #104]	@ (8004e94 <HAL_MPU_ConfigRegion+0x7c>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_MPU_ConfigRegion+0x7c>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004e34:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <HAL_MPU_ConfigRegion+0x7c>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7b1b      	ldrb	r3, [r3, #12]
 8004e40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7adb      	ldrb	r3, [r3, #11]
 8004e46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7a9b      	ldrb	r3, [r3, #10]
 8004e4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7b5b      	ldrb	r3, [r3, #13]
 8004e56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7b9b      	ldrb	r3, [r3, #14]
 8004e5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7bdb      	ldrb	r3, [r3, #15]
 8004e66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	7a5b      	ldrb	r3, [r3, #9]
 8004e6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7a1b      	ldrb	r3, [r3, #8]
 8004e76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e80:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e84:	6113      	str	r3, [r2, #16]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	e000ed90 	.word	0xe000ed90

08004e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	@ 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ea6:	4b89      	ldr	r3, [pc, #548]	@ (80050cc <HAL_GPIO_Init+0x234>)
 8004ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eaa:	e194      	b.n	80051d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8186 	beq.w	80051d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d005      	beq.n	8004edc <HAL_GPIO_Init+0x44>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d130      	bne.n	8004f3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f12:	2201      	movs	r2, #1
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	f003 0201 	and.w	r2, r3, #1
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d017      	beq.n	8004f7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	2203      	movs	r2, #3
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d123      	bne.n	8004fce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	08da      	lsrs	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3208      	adds	r2, #8
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	08da      	lsrs	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3208      	adds	r2, #8
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	2203      	movs	r2, #3
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f003 0203 	and.w	r2, r3, #3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80e0 	beq.w	80051d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005010:	4b2f      	ldr	r3, [pc, #188]	@ (80050d0 <HAL_GPIO_Init+0x238>)
 8005012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005016:	4a2e      	ldr	r2, [pc, #184]	@ (80050d0 <HAL_GPIO_Init+0x238>)
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_GPIO_Init+0x238>)
 8005022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800502e:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <HAL_GPIO_Init+0x23c>)
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	3302      	adds	r3, #2
 8005036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	220f      	movs	r2, #15
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <HAL_GPIO_Init+0x240>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d052      	beq.n	8005100 <HAL_GPIO_Init+0x268>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <HAL_GPIO_Init+0x244>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d031      	beq.n	80050c6 <HAL_GPIO_Init+0x22e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <HAL_GPIO_Init+0x248>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <HAL_GPIO_Init+0x22a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <HAL_GPIO_Init+0x24c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d025      	beq.n	80050be <HAL_GPIO_Init+0x226>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <HAL_GPIO_Init+0x250>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01f      	beq.n	80050ba <HAL_GPIO_Init+0x222>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <HAL_GPIO_Init+0x254>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d019      	beq.n	80050b6 <HAL_GPIO_Init+0x21e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_GPIO_Init+0x258>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_GPIO_Init+0x21a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_GPIO_Init+0x25c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00d      	beq.n	80050ae <HAL_GPIO_Init+0x216>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_GPIO_Init+0x260>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <HAL_GPIO_Init+0x212>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a17      	ldr	r2, [pc, #92]	@ (80050fc <HAL_GPIO_Init+0x264>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <HAL_GPIO_Init+0x20e>
 80050a2:	2309      	movs	r3, #9
 80050a4:	e02d      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050a6:	230a      	movs	r3, #10
 80050a8:	e02b      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050aa:	2308      	movs	r3, #8
 80050ac:	e029      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050ae:	2307      	movs	r3, #7
 80050b0:	e027      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050b2:	2306      	movs	r3, #6
 80050b4:	e025      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050b6:	2305      	movs	r3, #5
 80050b8:	e023      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050ba:	2304      	movs	r3, #4
 80050bc:	e021      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050be:	2303      	movs	r3, #3
 80050c0:	e01f      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e01d      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e01b      	b.n	8005102 <HAL_GPIO_Init+0x26a>
 80050ca:	bf00      	nop
 80050cc:	58000080 	.word	0x58000080
 80050d0:	58024400 	.word	0x58024400
 80050d4:	58000400 	.word	0x58000400
 80050d8:	58020000 	.word	0x58020000
 80050dc:	58020400 	.word	0x58020400
 80050e0:	58020800 	.word	0x58020800
 80050e4:	58020c00 	.word	0x58020c00
 80050e8:	58021000 	.word	0x58021000
 80050ec:	58021400 	.word	0x58021400
 80050f0:	58021800 	.word	0x58021800
 80050f4:	58021c00 	.word	0x58021c00
 80050f8:	58022000 	.word	0x58022000
 80050fc:	58022400 	.word	0x58022400
 8005100:	2300      	movs	r3, #0
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	f002 0203 	and.w	r2, r2, #3
 8005108:	0092      	lsls	r2, r2, #2
 800510a:	4093      	lsls	r3, r2
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005112:	4938      	ldr	r1, [pc, #224]	@ (80051f4 <HAL_GPIO_Init+0x35c>)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800514e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f47f ae63 	bne.w	8004eac <HAL_GPIO_Init+0x14>
  }
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	3724      	adds	r7, #36	@ 0x24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	58000400 	.word	0x58000400

080051f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	e001      	b.n	800521a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
 8005234:	4613      	mov	r3, r2
 8005236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800523e:	887a      	ldrh	r2, [r7, #2]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005244:	e003      	b.n	800524e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	041a      	lsls	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005264:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <HAL_PWREx_ConfigSupply+0x70>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d00a      	beq.n	8005286 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005270:	4b16      	ldr	r3, [pc, #88]	@ (80052cc <HAL_PWREx_ConfigSupply+0x70>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e01f      	b.n	80052c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e01d      	b.n	80052c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <HAL_PWREx_ConfigSupply+0x70>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 0207 	bic.w	r2, r3, #7
 800528e:	490f      	ldr	r1, [pc, #60]	@ (80052cc <HAL_PWREx_ConfigSupply+0x70>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4313      	orrs	r3, r2
 8005294:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005296:	f7fd ffdf 	bl	8003258 <HAL_GetTick>
 800529a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800529c:	e009      	b.n	80052b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800529e:	f7fd ffdb 	bl	8003258 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80052ac:	d901      	bls.n	80052b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e007      	b.n	80052c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052b2:	4b06      	ldr	r3, [pc, #24]	@ (80052cc <HAL_PWREx_ConfigSupply+0x70>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052be:	d1ee      	bne.n	800529e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	58024800 	.word	0x58024800

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	@ 0x30
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f000 bc48 	b.w	8005b74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8088 	beq.w	8005402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f2:	4b99      	ldr	r3, [pc, #612]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052fc:	4b96      	ldr	r3, [pc, #600]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	2b10      	cmp	r3, #16
 8005306:	d007      	beq.n	8005318 <HAL_RCC_OscConfig+0x48>
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	2b18      	cmp	r3, #24
 800530c:	d111      	bne.n	8005332 <HAL_RCC_OscConfig+0x62>
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d10c      	bne.n	8005332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	4b8f      	ldr	r3, [pc, #572]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d06d      	beq.n	8005400 <HAL_RCC_OscConfig+0x130>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d169      	bne.n	8005400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f000 bc21 	b.w	8005b74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x7a>
 800533c:	4b86      	ldr	r3, [pc, #536]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a85      	ldr	r2, [pc, #532]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e02e      	b.n	80053a8 <HAL_RCC_OscConfig+0xd8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x9c>
 8005352:	4b81      	ldr	r3, [pc, #516]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a80      	ldr	r2, [pc, #512]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b7e      	ldr	r3, [pc, #504]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a7d      	ldr	r2, [pc, #500]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e01d      	b.n	80053a8 <HAL_RCC_OscConfig+0xd8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0xc0>
 8005376:	4b78      	ldr	r3, [pc, #480]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a77      	ldr	r2, [pc, #476]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800537c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4b75      	ldr	r3, [pc, #468]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a74      	ldr	r2, [pc, #464]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0xd8>
 8005390:	4b71      	ldr	r3, [pc, #452]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a70      	ldr	r2, [pc, #448]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b6e      	ldr	r3, [pc, #440]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80053a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd ff52 	bl	8003258 <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fd ff4e 	bl	8003258 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	@ 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e3d4      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053ca:	4b63      	ldr	r3, [pc, #396]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0xe8>
 80053d6:	e014      	b.n	8005402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd ff3e 	bl	8003258 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fd ff3a 	bl	8003258 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	@ 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e3c0      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053f2:	4b59      	ldr	r3, [pc, #356]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x110>
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80ca 	beq.w	80055a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005410:	4b51      	ldr	r3, [pc, #324]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005418:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_RCC_OscConfig+0x166>
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	2b18      	cmp	r3, #24
 800542a:	d156      	bne.n	80054da <HAL_RCC_OscConfig+0x20a>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d151      	bne.n	80054da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005436:	4b48      	ldr	r3, [pc, #288]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCC_OscConfig+0x17e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e392      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800544e:	4b42      	ldr	r3, [pc, #264]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0219 	bic.w	r2, r3, #25
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	493f      	ldr	r1, [pc, #252]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd fefa 	bl	8003258 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005468:	f7fd fef6 	bl	8003258 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e37c      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547a:	4b37      	ldr	r3, [pc, #220]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	f7fd ff17 	bl	80032b8 <HAL_GetREVID>
 800548a:	4603      	mov	r3, r0
 800548c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005490:	4293      	cmp	r3, r2
 8005492:	d817      	bhi.n	80054c4 <HAL_RCC_OscConfig+0x1f4>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d108      	bne.n	80054ae <HAL_RCC_OscConfig+0x1de>
 800549c:	4b2e      	ldr	r3, [pc, #184]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80054a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ac:	e07a      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	4926      	ldr	r1, [pc, #152]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c2:	e06f      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	4921      	ldr	r1, [pc, #132]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d8:	e064      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d047      	beq.n	8005572 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 0219 	bic.w	r2, r3, #25
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	491a      	ldr	r1, [pc, #104]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fd feb0 	bl	8003258 <HAL_GetTick>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fc:	f7fd feac 	bl	8003258 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e332      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551a:	f7fd fecd 	bl	80032b8 <HAL_GetREVID>
 800551e:	4603      	mov	r3, r0
 8005520:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005524:	4293      	cmp	r3, r2
 8005526:	d819      	bhi.n	800555c <HAL_RCC_OscConfig+0x28c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d108      	bne.n	8005542 <HAL_RCC_OscConfig+0x272>
 8005530:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005538:	4a07      	ldr	r2, [pc, #28]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553e:	6053      	str	r3, [r2, #4]
 8005540:	e030      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
 8005542:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	031b      	lsls	r3, r3, #12
 8005550:	4901      	ldr	r1, [pc, #4]	@ (8005558 <HAL_RCC_OscConfig+0x288>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
 8005556:	e025      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
 8005558:	58024400 	.word	0x58024400
 800555c:	4b9a      	ldr	r3, [pc, #616]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	4997      	ldr	r1, [pc, #604]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	604b      	str	r3, [r1, #4]
 8005570:	e018      	b.n	80055a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005572:	4b95      	ldr	r3, [pc, #596]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a94      	ldr	r2, [pc, #592]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fd fe6b 	bl	8003258 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005586:	f7fd fe67 	bl	8003258 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e2ed      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005598:	4b8b      	ldr	r3, [pc, #556]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f0      	bne.n	8005586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80a9 	beq.w	8005704 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b2:	4b85      	ldr	r3, [pc, #532]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055bc:	4b82      	ldr	r3, [pc, #520]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d007      	beq.n	80055d8 <HAL_RCC_OscConfig+0x308>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b18      	cmp	r3, #24
 80055cc:	d13a      	bne.n	8005644 <HAL_RCC_OscConfig+0x374>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d135      	bne.n	8005644 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d8:	4b7b      	ldr	r3, [pc, #492]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_OscConfig+0x320>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b80      	cmp	r3, #128	@ 0x80
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e2c1      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055f0:	f7fd fe62 	bl	80032b8 <HAL_GetREVID>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d817      	bhi.n	800562e <HAL_RCC_OscConfig+0x35e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	2b20      	cmp	r3, #32
 8005604:	d108      	bne.n	8005618 <HAL_RCC_OscConfig+0x348>
 8005606:	4b70      	ldr	r3, [pc, #448]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800560e:	4a6e      	ldr	r2, [pc, #440]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005614:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005616:	e075      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005618:	4b6b      	ldr	r3, [pc, #428]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	069b      	lsls	r3, r3, #26
 8005626:	4968      	ldr	r1, [pc, #416]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800562c:	e06a      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800562e:	4b66      	ldr	r3, [pc, #408]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	061b      	lsls	r3, r3, #24
 800563c:	4962      	ldr	r1, [pc, #392]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005642:	e05f      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d042      	beq.n	80056d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800564c:	4b5e      	ldr	r3, [pc, #376]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5d      	ldr	r2, [pc, #372]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fd fdfe 	bl	8003258 <HAL_GetTick>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005660:	f7fd fdfa 	bl	8003258 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e280      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005672:	4b55      	ldr	r3, [pc, #340]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800567e:	f7fd fe1b 	bl	80032b8 <HAL_GetREVID>
 8005682:	4603      	mov	r3, r0
 8005684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005688:	4293      	cmp	r3, r2
 800568a:	d817      	bhi.n	80056bc <HAL_RCC_OscConfig+0x3ec>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	2b20      	cmp	r3, #32
 8005692:	d108      	bne.n	80056a6 <HAL_RCC_OscConfig+0x3d6>
 8005694:	4b4c      	ldr	r3, [pc, #304]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800569c:	4a4a      	ldr	r2, [pc, #296]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800569e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056a2:	6053      	str	r3, [r2, #4]
 80056a4:	e02e      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
 80056a6:	4b48      	ldr	r3, [pc, #288]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	069b      	lsls	r3, r3, #26
 80056b4:	4944      	ldr	r1, [pc, #272]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	604b      	str	r3, [r1, #4]
 80056ba:	e023      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
 80056bc:	4b42      	ldr	r3, [pc, #264]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	493f      	ldr	r1, [pc, #252]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
 80056d0:	e018      	b.n	8005704 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056d2:	4b3d      	ldr	r3, [pc, #244]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3c      	ldr	r2, [pc, #240]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056de:	f7fd fdbb 	bl	8003258 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056e6:	f7fd fdb7 	bl	8003258 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e23d      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056f8:	4b33      	ldr	r3, [pc, #204]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d036      	beq.n	800577e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d019      	beq.n	800574c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005718:	4b2b      	ldr	r3, [pc, #172]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800571a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571c:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fd fd98 	bl	8003258 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572c:	f7fd fd94 	bl	8003258 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e21a      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800573e:	4b22      	ldr	r3, [pc, #136]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x45c>
 800574a:	e018      	b.n	800577e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574c:	4b1e      	ldr	r3, [pc, #120]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 800574e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005750:	4a1d      	ldr	r2, [pc, #116]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fd fd7e 	bl	8003258 <HAL_GetTick>
 800575c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005760:	f7fd fd7a 	bl	8003258 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e200      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005772:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d039      	beq.n	80057fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01c      	beq.n	80057cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0c      	ldr	r2, [pc, #48]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 8005798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800579c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800579e:	f7fd fd5b 	bl	8003258 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a6:	f7fd fd57 	bl	8003258 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e1dd      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057b8:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <HAL_RCC_OscConfig+0x4f8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x4d6>
 80057c4:	e01b      	b.n	80057fe <HAL_RCC_OscConfig+0x52e>
 80057c6:	bf00      	nop
 80057c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057cc:	4b9b      	ldr	r3, [pc, #620]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a9a      	ldr	r2, [pc, #616]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80057d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057d8:	f7fd fd3e 	bl	8003258 <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e0:	f7fd fd3a 	bl	8003258 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e1c0      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057f2:	4b92      	ldr	r3, [pc, #584]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8081 	beq.w	800590e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800580c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a40 <HAL_RCC_OscConfig+0x770>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a8b      	ldr	r2, [pc, #556]	@ (8005a40 <HAL_RCC_OscConfig+0x770>)
 8005812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005818:	f7fd fd1e 	bl	8003258 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005820:	f7fd fd1a 	bl	8003258 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b64      	cmp	r3, #100	@ 0x64
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1a0      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005832:	4b83      	ldr	r3, [pc, #524]	@ (8005a40 <HAL_RCC_OscConfig+0x770>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d106      	bne.n	8005854 <HAL_RCC_OscConfig+0x584>
 8005846:	4b7d      	ldr	r3, [pc, #500]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6713      	str	r3, [r2, #112]	@ 0x70
 8005852:	e02d      	b.n	80058b0 <HAL_RCC_OscConfig+0x5e0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10c      	bne.n	8005876 <HAL_RCC_OscConfig+0x5a6>
 800585c:	4b77      	ldr	r3, [pc, #476]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	4a76      	ldr	r2, [pc, #472]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	6713      	str	r3, [r2, #112]	@ 0x70
 8005868:	4b74      	ldr	r3, [pc, #464]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	4a73      	ldr	r2, [pc, #460]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800586e:	f023 0304 	bic.w	r3, r3, #4
 8005872:	6713      	str	r3, [r2, #112]	@ 0x70
 8005874:	e01c      	b.n	80058b0 <HAL_RCC_OscConfig+0x5e0>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b05      	cmp	r3, #5
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0x5c8>
 800587e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005882:	4a6e      	ldr	r2, [pc, #440]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005884:	f043 0304 	orr.w	r3, r3, #4
 8005888:	6713      	str	r3, [r2, #112]	@ 0x70
 800588a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a6b      	ldr	r2, [pc, #428]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6713      	str	r3, [r2, #112]	@ 0x70
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0x5e0>
 8005898:	4b68      	ldr	r3, [pc, #416]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	4a67      	ldr	r2, [pc, #412]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a4:	4b65      	ldr	r3, [pc, #404]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a64      	ldr	r2, [pc, #400]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80058aa:	f023 0304 	bic.w	r3, r3, #4
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d015      	beq.n	80058e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b8:	f7fd fcce 	bl	8003258 <HAL_GetTick>
 80058bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c0:	f7fd fcca 	bl	8003258 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e14e      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058d6:	4b59      	ldr	r3, [pc, #356]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ee      	beq.n	80058c0 <HAL_RCC_OscConfig+0x5f0>
 80058e2:	e014      	b.n	800590e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fd fcb8 	bl	8003258 <HAL_GetTick>
 80058e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fd fcb4 	bl	8003258 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e138      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005902:	4b4e      	ldr	r3, [pc, #312]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ee      	bne.n	80058ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 812d 	beq.w	8005b72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005918:	4b48      	ldr	r3, [pc, #288]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005920:	2b18      	cmp	r3, #24
 8005922:	f000 80bd 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	2b02      	cmp	r3, #2
 800592c:	f040 809e 	bne.w	8005a6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005930:	4b42      	ldr	r3, [pc, #264]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a41      	ldr	r2, [pc, #260]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fd fc8c 	bl	8003258 <HAL_GetTick>
 8005940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005944:	f7fd fc88 	bl	8003258 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e10e      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005956:	4b39      	ldr	r3, [pc, #228]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005962:	4b36      	ldr	r3, [pc, #216]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005966:	4b37      	ldr	r3, [pc, #220]	@ (8005a44 <HAL_RCC_OscConfig+0x774>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005972:	0112      	lsls	r2, r2, #4
 8005974:	430a      	orrs	r2, r1
 8005976:	4931      	ldr	r1, [pc, #196]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005978:	4313      	orrs	r3, r2
 800597a:	628b      	str	r3, [r1, #40]	@ 0x28
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	3b01      	subs	r3, #1
 8005982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	3b01      	subs	r3, #1
 800598c:	025b      	lsls	r3, r3, #9
 800598e:	b29b      	uxth	r3, r3
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	3b01      	subs	r3, #1
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	3b01      	subs	r3, #1
 80059a6:	061b      	lsls	r3, r3, #24
 80059a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059ac:	4923      	ldr	r1, [pc, #140]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059b2:	4b22      	ldr	r3, [pc, #136]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b6:	4a21      	ldr	r2, [pc, #132]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059be:	4b1f      	ldr	r3, [pc, #124]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c2:	4b21      	ldr	r3, [pc, #132]	@ (8005a48 <HAL_RCC_OscConfig+0x778>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059ca:	00d2      	lsls	r2, r2, #3
 80059cc:	491b      	ldr	r1, [pc, #108]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059d2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d6:	f023 020c 	bic.w	r2, r3, #12
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	4917      	ldr	r1, [pc, #92]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059e4:	4b15      	ldr	r3, [pc, #84]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	f023 0202 	bic.w	r2, r3, #2
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f0:	4912      	ldr	r1, [pc, #72]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059f6:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	4a10      	ldr	r2, [pc, #64]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a02:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	4a0d      	ldr	r2, [pc, #52]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	4a07      	ldr	r2, [pc, #28]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a26:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a04      	ldr	r2, [pc, #16]	@ (8005a3c <HAL_RCC_OscConfig+0x76c>)
 8005a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fd fc11 	bl	8003258 <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a38:	e011      	b.n	8005a5e <HAL_RCC_OscConfig+0x78e>
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	58024800 	.word	0x58024800
 8005a44:	fffffc0c 	.word	0xfffffc0c
 8005a48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fd fc04 	bl	8003258 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e08a      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5e:	4b47      	ldr	r3, [pc, #284]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x77c>
 8005a6a:	e082      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6c:	4b43      	ldr	r3, [pc, #268]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a42      	ldr	r2, [pc, #264]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd fbee 	bl	8003258 <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd fbea 	bl	8003258 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e070      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a92:	4b3a      	ldr	r3, [pc, #232]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x7b0>
 8005a9e:	e068      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005aa0:	4b36      	ldr	r3, [pc, #216]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aa6:	4b35      	ldr	r3, [pc, #212]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d031      	beq.n	8005b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0203 	and.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d12a      	bne.n	8005b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d122      	bne.n	8005b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d11a      	bne.n	8005b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0a5b      	lsrs	r3, r3, #9
 8005ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d111      	bne.n	8005b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d108      	bne.n	8005b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	0e1b      	lsrs	r3, r3, #24
 8005b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e02b      	b.n	8005b74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005b1c:	4b17      	ldr	r3, [pc, #92]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d01f      	beq.n	8005b72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b32:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	4a11      	ldr	r2, [pc, #68]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b3e:	f7fd fb8b 	bl	8003258 <HAL_GetTick>
 8005b42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b44:	bf00      	nop
 8005b46:	f7fd fb87 	bl	8003258 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d0f9      	beq.n	8005b46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b56:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <HAL_RCC_OscConfig+0x8b0>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b5e:	00d2      	lsls	r2, r2, #3
 8005b60:	4906      	ldr	r1, [pc, #24]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b66:	4b05      	ldr	r3, [pc, #20]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <HAL_RCC_OscConfig+0x8ac>)
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3730      	adds	r7, #48	@ 0x30
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	ffff0007 	.word	0xffff0007

08005b84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e19c      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b98:	4b8a      	ldr	r3, [pc, #552]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d910      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba6:	4b87      	ldr	r3, [pc, #540]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 020f 	bic.w	r2, r3, #15
 8005bae:	4985      	ldr	r1, [pc, #532]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b83      	ldr	r3, [pc, #524]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e184      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d908      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be4:	4b78      	ldr	r3, [pc, #480]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4975      	ldr	r1, [pc, #468]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	4b70      	ldr	r3, [pc, #448]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d908      	bls.n	8005c24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c12:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	496a      	ldr	r1, [pc, #424]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	4b64      	ldr	r3, [pc, #400]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d908      	bls.n	8005c52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c40:	4b61      	ldr	r3, [pc, #388]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	495e      	ldr	r1, [pc, #376]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	4b59      	ldr	r3, [pc, #356]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d908      	bls.n	8005c80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c6e:	4b56      	ldr	r3, [pc, #344]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4953      	ldr	r1, [pc, #332]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b4d      	ldr	r3, [pc, #308]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d908      	bls.n	8005cae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f023 020f 	bic.w	r2, r3, #15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4947      	ldr	r1, [pc, #284]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d055      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cba:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4940      	ldr	r1, [pc, #256]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d121      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0f6      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d107      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cec:	4b36      	ldr	r3, [pc, #216]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d115      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0ea      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d107      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d04:	4b30      	ldr	r3, [pc, #192]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0de      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d14:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0d6      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d24:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f023 0207 	bic.w	r2, r3, #7
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4925      	ldr	r1, [pc, #148]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d36:	f7fd fa8f 	bl	8003258 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3e:	f7fd fa8b 	bl	8003258 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0be      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d54:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1eb      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d208      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d82:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f023 020f 	bic.w	r2, r3, #15
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	490e      	ldr	r1, [pc, #56]	@ (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d214      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b08      	ldr	r3, [pc, #32]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 020f 	bic.w	r2, r3, #15
 8005daa:	4906      	ldr	r1, [pc, #24]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b04      	ldr	r3, [pc, #16]	@ (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e086      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
 8005dc4:	52002000 	.word	0x52002000
 8005dc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d208      	bcs.n	8005dfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de8:	4b3c      	ldr	r3, [pc, #240]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	4939      	ldr	r1, [pc, #228]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	4b34      	ldr	r3, [pc, #208]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d208      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e16:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	492e      	ldr	r1, [pc, #184]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	4b28      	ldr	r3, [pc, #160]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d208      	bcs.n	8005e56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e44:	4b25      	ldr	r3, [pc, #148]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4922      	ldr	r1, [pc, #136]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	4b1d      	ldr	r3, [pc, #116]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d208      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e72:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4917      	ldr	r1, [pc, #92]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e84:	f000 f834 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	4912      	ldr	r1, [pc, #72]	@ (8005ee0 <HAL_RCC_ClockConfig+0x35c>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee0 <HAL_RCC_ClockConfig+0x35c>)
 8005eac:	5cd3      	ldrb	r3, [r2, r3]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <HAL_RCC_ClockConfig+0x360>)
 8005eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee8 <HAL_RCC_ClockConfig+0x364>)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <HAL_RCC_ClockConfig+0x368>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fd f97c 	bl	80031c4 <HAL_InitTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	0800b070 	.word	0x0800b070
 8005ee4:	24000004 	.word	0x24000004
 8005ee8:	24000000 	.word	0x24000000
 8005eec:	24000098 	.word	0x24000098

08005ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005efe:	2b18      	cmp	r3, #24
 8005f00:	f200 8155 	bhi.w	80061ae <HAL_RCC_GetSysClockFreq+0x2be>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f71 	.word	0x08005f71
 8005f10:	080061af 	.word	0x080061af
 8005f14:	080061af 	.word	0x080061af
 8005f18:	080061af 	.word	0x080061af
 8005f1c:	080061af 	.word	0x080061af
 8005f20:	080061af 	.word	0x080061af
 8005f24:	080061af 	.word	0x080061af
 8005f28:	080061af 	.word	0x080061af
 8005f2c:	08005f97 	.word	0x08005f97
 8005f30:	080061af 	.word	0x080061af
 8005f34:	080061af 	.word	0x080061af
 8005f38:	080061af 	.word	0x080061af
 8005f3c:	080061af 	.word	0x080061af
 8005f40:	080061af 	.word	0x080061af
 8005f44:	080061af 	.word	0x080061af
 8005f48:	080061af 	.word	0x080061af
 8005f4c:	08005f9d 	.word	0x08005f9d
 8005f50:	080061af 	.word	0x080061af
 8005f54:	080061af 	.word	0x080061af
 8005f58:	080061af 	.word	0x080061af
 8005f5c:	080061af 	.word	0x080061af
 8005f60:	080061af 	.word	0x080061af
 8005f64:	080061af 	.word	0x080061af
 8005f68:	080061af 	.word	0x080061af
 8005f6c:	08005fa3 	.word	0x08005fa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f70:	4b94      	ldr	r3, [pc, #592]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f7c:	4b91      	ldr	r3, [pc, #580]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	08db      	lsrs	r3, r3, #3
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	4a90      	ldr	r2, [pc, #576]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f8e:	e111      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f90:	4b8d      	ldr	r3, [pc, #564]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f92:	61bb      	str	r3, [r7, #24]
      break;
 8005f94:	e10e      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f96:	4b8d      	ldr	r3, [pc, #564]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f98:	61bb      	str	r3, [r7, #24]
      break;
 8005f9a:	e10b      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f9e:	61bb      	str	r3, [r7, #24]
      break;
 8005fa0:	e108      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fa2:	4b88      	ldr	r3, [pc, #544]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005fac:	4b85      	ldr	r3, [pc, #532]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fb8:	4b82      	ldr	r3, [pc, #520]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fc2:	4b80      	ldr	r3, [pc, #512]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80e1 	beq.w	80061a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f000 8083 	beq.w	80060f4 <HAL_RCC_GetSysClockFreq+0x204>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	f200 80a1 	bhi.w	8006138 <HAL_RCC_GetSysClockFreq+0x248>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x114>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d056      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006002:	e099      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006004:	4b6f      	ldr	r3, [pc, #444]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02d      	beq.n	800606c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006010:	4b6c      	ldr	r3, [pc, #432]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	4a6b      	ldr	r2, [pc, #428]	@ (80061c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
 8006020:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b62      	ldr	r3, [pc, #392]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a02 	vldr	s12, [r7, #8]
 800604e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800606a:	e087      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b51      	ldr	r3, [pc, #324]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006092:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060ae:	e065      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b40      	ldr	r3, [pc, #256]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060f2:	e043      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b2f      	ldr	r3, [pc, #188]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a02 	vldr	s12, [r7, #8]
 800611a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006136:	e021      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b1e      	ldr	r3, [pc, #120]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a02 	vldr	s12, [r7, #8]
 800615e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800617a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800617c:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006180:	0a5b      	lsrs	r3, r3, #9
 8006182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006186:	3301      	adds	r3, #1
 8006188:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006194:	edd7 6a07 	vldr	s13, [r7, #28]
 8006198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a0:	ee17 3a90 	vmov	r3, s15
 80061a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80061a6:	e005      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
      break;
 80061ac:	e002      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80061ae:	4b07      	ldr	r3, [pc, #28]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061b0:	61bb      	str	r3, [r7, #24]
      break;
 80061b2:	bf00      	nop
  }

  return sysclockfreq;
 80061b4:	69bb      	ldr	r3, [r7, #24]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3724      	adds	r7, #36	@ 0x24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	58024400 	.word	0x58024400
 80061c8:	03d09000 	.word	0x03d09000
 80061cc:	003d0900 	.word	0x003d0900
 80061d0:	017d7840 	.word	0x017d7840
 80061d4:	46000000 	.word	0x46000000
 80061d8:	4c742400 	.word	0x4c742400
 80061dc:	4a742400 	.word	0x4a742400
 80061e0:	4bbebc20 	.word	0x4bbebc20

080061e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061ea:	f7ff fe81 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 80061ee:	4602      	mov	r2, r0
 80061f0:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x50>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	490f      	ldr	r1, [pc, #60]	@ (8006238 <HAL_RCC_GetHCLKFreq+0x54>)
 80061fc:	5ccb      	ldrb	r3, [r1, r3]
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <HAL_RCC_GetHCLKFreq+0x50>)
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	4a09      	ldr	r2, [pc, #36]	@ (8006238 <HAL_RCC_GetHCLKFreq+0x54>)
 8006212:	5cd3      	ldrb	r3, [r2, r3]
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	fa22 f303 	lsr.w	r3, r2, r3
 800621e:	4a07      	ldr	r2, [pc, #28]	@ (800623c <HAL_RCC_GetHCLKFreq+0x58>)
 8006220:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006222:	4a07      	ldr	r2, [pc, #28]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <HAL_RCC_GetHCLKFreq+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	58024400 	.word	0x58024400
 8006238:	0800b070 	.word	0x0800b070
 800623c:	24000004 	.word	0x24000004
 8006240:	24000000 	.word	0x24000000

08006244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006248:	f7ff ffcc 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	091b      	lsrs	r3, r3, #4
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4904      	ldr	r1, [pc, #16]	@ (800626c <HAL_RCC_GetPCLK1Freq+0x28>)
 800625a:	5ccb      	ldrb	r3, [r1, r3]
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	58024400 	.word	0x58024400
 800626c:	0800b070 	.word	0x0800b070

08006270 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006274:	b0ca      	sub	sp, #296	@ 0x128
 8006276:	af00      	add	r7, sp, #0
 8006278:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800627c:	2300      	movs	r3, #0
 800627e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006282:	2300      	movs	r3, #0
 8006284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006294:	2500      	movs	r5, #0
 8006296:	ea54 0305 	orrs.w	r3, r4, r5
 800629a:	d049      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062a6:	d02f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062ac:	d828      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b2:	d01a      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b8:	d822      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062c2:	d007      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062c4:	e01c      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4bb8      	ldr	r3, [pc, #736]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	4ab7      	ldr	r2, [pc, #732]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062d2:	e01a      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	3308      	adds	r3, #8
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f002 fb61 	bl	80089a4 <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062e8:	e00f      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	3328      	adds	r3, #40	@ 0x28
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f002 fc08 	bl	8008b08 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006312:	4ba5      	ldr	r3, [pc, #660]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006316:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006320:	4aa1      	ldr	r2, [pc, #644]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006322:	430b      	orrs	r3, r1
 8006324:	6513      	str	r3, [r2, #80]	@ 0x50
 8006326:	e003      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800633c:	f04f 0900 	mov.w	r9, #0
 8006340:	ea58 0309 	orrs.w	r3, r8, r9
 8006344:	d047      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634c:	2b04      	cmp	r3, #4
 800634e:	d82a      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006350:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800636d 	.word	0x0800636d
 800635c:	0800637b 	.word	0x0800637b
 8006360:	08006391 	.word	0x08006391
 8006364:	080063af 	.word	0x080063af
 8006368:	080063af 	.word	0x080063af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636c:	4b8e      	ldr	r3, [pc, #568]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	4a8d      	ldr	r2, [pc, #564]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006378:	e01a      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f002 fb0e 	bl	80089a4 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800638e:	e00f      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	3328      	adds	r3, #40	@ 0x28
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f002 fbb5 	bl	8008b08 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063a4:	e004      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ac:	e000      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b8:	4b7b      	ldr	r3, [pc, #492]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	f023 0107 	bic.w	r1, r3, #7
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	4a78      	ldr	r2, [pc, #480]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80063e2:	f04f 0b00 	mov.w	fp, #0
 80063e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80063ea:	d04c      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f6:	d030      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80063f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fc:	d829      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006400:	d02d      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006402:	2bc0      	cmp	r3, #192	@ 0xc0
 8006404:	d825      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d018      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800640a:	2b80      	cmp	r3, #128	@ 0x80
 800640c:	d821      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d007      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006416:	e01c      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006418:	4b63      	ldr	r3, [pc, #396]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4a62      	ldr	r2, [pc, #392]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800641e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006424:	e01c      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3308      	adds	r3, #8
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f002 fab8 	bl	80089a4 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800643a:	e011      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	3328      	adds	r3, #40	@ 0x28
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f002 fb5f 	bl	8008b08 <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006450:	e006      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006468:	4b4f      	ldr	r3, [pc, #316]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006476:	4a4c      	ldr	r2, [pc, #304]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006478:	430b      	orrs	r3, r1
 800647a:	6513      	str	r3, [r2, #80]	@ 0x50
 800647c:	e003      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006492:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006496:	2300      	movs	r3, #0
 8006498:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800649c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d053      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064b2:	d035      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80064b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064b8:	d82e      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064be:	d031      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80064c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064c4:	d828      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ca:	d01a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80064cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064d0:	d822      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80064d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064da:	d007      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80064dc:	e01c      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	4a31      	ldr	r2, [pc, #196]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064ea:	e01c      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	3308      	adds	r3, #8
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 fa55 	bl	80089a4 <RCCEx_PLL2_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006500:	e011      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	3328      	adds	r3, #40	@ 0x28
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f002 fafc 	bl	8008b08 <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006516:	e006      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651e:	e002      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006520:	bf00      	nop
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800652e:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800653e:	4a1a      	ldr	r2, [pc, #104]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006540:	430b      	orrs	r3, r1
 8006542:	6593      	str	r3, [r2, #88]	@ 0x58
 8006544:	e003      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800655a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006564:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006568:	460b      	mov	r3, r1
 800656a:	4313      	orrs	r3, r2
 800656c:	d056      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800657a:	d038      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800657c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006580:	d831      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006582:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006586:	d034      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006588:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800658c:	d82b      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800658e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006592:	d01d      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006594:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006598:	d825      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800659e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065a2:	d00a      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80065a4:	e01f      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ac:	4ba2      	ldr	r3, [pc, #648]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	4aa1      	ldr	r2, [pc, #644]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b8:	e01c      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	3308      	adds	r3, #8
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f002 f9ee 	bl	80089a4 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065ce:	e011      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	3328      	adds	r3, #40	@ 0x28
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fa95 	bl	8008b08 <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80065f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065fc:	4b8e      	ldr	r3, [pc, #568]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006600:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800660c:	4a8a      	ldr	r2, [pc, #552]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800660e:	430b      	orrs	r3, r1
 8006610:	6593      	str	r3, [r2, #88]	@ 0x58
 8006612:	e003      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006618:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800662c:	2300      	movs	r3, #0
 800662e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006632:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d03a      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006642:	2b30      	cmp	r3, #48	@ 0x30
 8006644:	d01f      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006646:	2b30      	cmp	r3, #48	@ 0x30
 8006648:	d819      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800664a:	2b20      	cmp	r3, #32
 800664c:	d00c      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800664e:	2b20      	cmp	r3, #32
 8006650:	d815      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d019      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006656:	2b10      	cmp	r3, #16
 8006658:	d111      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665a:	4b77      	ldr	r3, [pc, #476]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	4a76      	ldr	r2, [pc, #472]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006664:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006666:	e011      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	3308      	adds	r3, #8
 800666e:	2102      	movs	r1, #2
 8006670:	4618      	mov	r0, r3
 8006672:	f002 f997 	bl	80089a4 <RCCEx_PLL2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800667c:	e006      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006684:	e002      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800668a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006694:	4b68      	ldr	r3, [pc, #416]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006698:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a2:	4a65      	ldr	r2, [pc, #404]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80066be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d051      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066dc:	d035      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80066de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e2:	d82e      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066e8:	d031      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80066ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066ee:	d828      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f4:	d01a      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066fa:	d822      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006704:	d007      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006706:	e01c      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006708:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	4a4a      	ldr	r2, [pc, #296]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800670e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006714:	e01c      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3308      	adds	r3, #8
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f002 f940 	bl	80089a4 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800672a:	e011      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	3328      	adds	r3, #40	@ 0x28
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f002 f9e7 	bl	8008b08 <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006740:	e006      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006748:	e002      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800674a:	bf00      	nop
 800674c:	e000      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800674e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006758:	4b37      	ldr	r3, [pc, #220]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800675a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006766:	4a34      	ldr	r2, [pc, #208]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6513      	str	r3, [r2, #80]	@ 0x50
 800676c:	e003      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006786:	2300      	movs	r3, #0
 8006788:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800678c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d056      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a0:	d033      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80067a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a6:	d82c      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ac:	d02f      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80067ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067b2:	d826      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067b8:	d02b      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80067ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067be:	d820      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c4:	d012      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80067c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ca:	d81a      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d022      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d4:	d115      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	3308      	adds	r3, #8
 80067dc:	2101      	movs	r1, #1
 80067de:	4618      	mov	r0, r3
 80067e0:	f002 f8e0 	bl	80089a4 <RCCEx_PLL2_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80067ea:	e015      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	3328      	adds	r3, #40	@ 0x28
 80067f2:	2101      	movs	r1, #1
 80067f4:	4618      	mov	r0, r3
 80067f6:	f002 f987 	bl	8008b08 <RCCEx_PLL3_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006800:	e00a      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006808:	e006      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800680a:	bf00      	nop
 800680c:	e004      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800680e:	bf00      	nop
 8006810:	e002      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10d      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006824:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682e:	4a02      	ldr	r2, [pc, #8]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006830:	430b      	orrs	r3, r1
 8006832:	6513      	str	r3, [r2, #80]	@ 0x50
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006836:	bf00      	nop
 8006838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800685a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d055      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006868:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800686c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006870:	d033      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006876:	d82c      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687c:	d02f      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d826      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006884:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006888:	d02b      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800688a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800688e:	d820      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006894:	d012      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689a:	d81a      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d022      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80068a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a4:	d115      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	3308      	adds	r3, #8
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f002 f878 	bl	80089a4 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068ba:	e015      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c0:	3328      	adds	r3, #40	@ 0x28
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f002 f91f 	bl	8008b08 <RCCEx_PLL3_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068d0:	e00a      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068d8:	e006      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068da:	bf00      	nop
 80068dc:	e004      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80068e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068f0:	4ba3      	ldr	r3, [pc, #652]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006900:	4a9f      	ldr	r2, [pc, #636]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006902:	430b      	orrs	r3, r1
 8006904:	6593      	str	r3, [r2, #88]	@ 0x58
 8006906:	e003      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800691c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d037      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693a:	d00e      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800693c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006940:	d816      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d018      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694a:	d111      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800694c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	4a8b      	ldr	r2, [pc, #556]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006958:	e00f      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800695a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695e:	3308      	adds	r3, #8
 8006960:	2101      	movs	r1, #1
 8006962:	4618      	mov	r0, r3
 8006964:	f002 f81e 	bl	80089a4 <RCCEx_PLL2_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800696e:	e004      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006976:	e000      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006982:	4b7f      	ldr	r3, [pc, #508]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006986:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006990:	4a7b      	ldr	r2, [pc, #492]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006992:	430b      	orrs	r3, r1
 8006994:	6513      	str	r3, [r2, #80]	@ 0x50
 8006996:	e003      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80069b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4313      	orrs	r3, r2
 80069be:	d039      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d81c      	bhi.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80069ca:	a201      	add	r2, pc, #4	@ (adr r2, 80069d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	08006a0d 	.word	0x08006a0d
 80069d4:	080069e1 	.word	0x080069e1
 80069d8:	080069ef 	.word	0x080069ef
 80069dc:	08006a0d 	.word	0x08006a0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b67      	ldr	r3, [pc, #412]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a66      	ldr	r2, [pc, #408]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80069ec:	e00f      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	3308      	adds	r3, #8
 80069f4:	2102      	movs	r1, #2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 ffd4 	bl	80089a4 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a02:	e004      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a0a:	e000      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a16:	4b5a      	ldr	r3, [pc, #360]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1a:	f023 0103 	bic.w	r1, r3, #3
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a24:	4a56      	ldr	r2, [pc, #344]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a2a:	e003      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a44:	2300      	movs	r3, #0
 8006a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f000 809f 	beq.w	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a56:	4b4b      	ldr	r3, [pc, #300]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a62:	f7fc fbf9 	bl	8003258 <HAL_GetTick>
 8006a66:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a6c:	f7fc fbf4 	bl	8003258 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b64      	cmp	r3, #100	@ 0x64
 8006a7a:	d903      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a82:	e005      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a84:	4b3f      	ldr	r3, [pc, #252]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0ed      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d179      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a98:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006aa4:	4053      	eors	r3, r2
 8006aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d015      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aae:	4b34      	ldr	r3, [pc, #208]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aba:	4b31      	ldr	r3, [pc, #196]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abe:	4a30      	ldr	r2, [pc, #192]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	4a2d      	ldr	r2, [pc, #180]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ae6:	d118      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fc fbb6 	bl	8003258 <HAL_GetTick>
 8006aec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006af0:	e00d      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fc fbb1 	bl	8003258 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d903      	bls.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006b0c:	e005      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0eb      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d129      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b32:	d10e      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006b34:	4b12      	ldr	r3, [pc, #72]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b44:	091a      	lsrs	r2, r3, #4
 8006b46:	4b10      	ldr	r3, [pc, #64]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6113      	str	r3, [r2, #16]
 8006b50:	e005      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006b52:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4a0a      	ldr	r2, [pc, #40]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b5c:	6113      	str	r3, [r2, #16]
 8006b5e:	4b08      	ldr	r3, [pc, #32]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b60:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6e:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b70:	430b      	orrs	r3, r1
 8006b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b74:	e00e      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006b7e:	e009      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006b80:	58024400 	.word	0x58024400
 8006b84:	58024800 	.word	0x58024800
 8006b88:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 0301 	and.w	r3, r2, #1
 8006ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006baa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f000 8089 	beq.w	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bbc:	2b28      	cmp	r3, #40	@ 0x28
 8006bbe:	d86b      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006ca1 	.word	0x08006ca1
 8006bcc:	08006c99 	.word	0x08006c99
 8006bd0:	08006c99 	.word	0x08006c99
 8006bd4:	08006c99 	.word	0x08006c99
 8006bd8:	08006c99 	.word	0x08006c99
 8006bdc:	08006c99 	.word	0x08006c99
 8006be0:	08006c99 	.word	0x08006c99
 8006be4:	08006c99 	.word	0x08006c99
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006c99 	.word	0x08006c99
 8006bf0:	08006c99 	.word	0x08006c99
 8006bf4:	08006c99 	.word	0x08006c99
 8006bf8:	08006c99 	.word	0x08006c99
 8006bfc:	08006c99 	.word	0x08006c99
 8006c00:	08006c99 	.word	0x08006c99
 8006c04:	08006c99 	.word	0x08006c99
 8006c08:	08006c83 	.word	0x08006c83
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006c99 	.word	0x08006c99
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006c99 	.word	0x08006c99
 8006c1c:	08006c99 	.word	0x08006c99
 8006c20:	08006c99 	.word	0x08006c99
 8006c24:	08006c99 	.word	0x08006c99
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006c99 	.word	0x08006c99
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c99 	.word	0x08006c99
 8006c60:	08006c99 	.word	0x08006c99
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006ca1 	.word	0x08006ca1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	3308      	adds	r3, #8
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fe95 	bl	80089a4 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00f      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	3328      	adds	r3, #40	@ 0x28
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 ff3c 	bl	8008b08 <RCCEx_PLL3_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006c96:	e004      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006caa:	4bbf      	ldr	r3, [pc, #764]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb8:	4abb      	ldr	r2, [pc, #748]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cbe:	e003      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f002 0302 	and.w	r3, r2, #2
 8006cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cde:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d041      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cee:	2b05      	cmp	r3, #5
 8006cf0:	d824      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d11 	.word	0x08006d11
 8006d00:	08006d27 	.word	0x08006d27
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	3308      	adds	r3, #8
 8006d16:	2101      	movs	r1, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fe43 	bl	80089a4 <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d24:	e00f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	3328      	adds	r3, #40	@ 0x28
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 feea 	bl	8008b08 <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d3a:	e004      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d4e:	4b96      	ldr	r3, [pc, #600]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d52:	f023 0107 	bic.w	r1, r3, #7
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d5c:	4a92      	ldr	r2, [pc, #584]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d5e:	430b      	orrs	r3, r1
 8006d60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d62:	e003      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f002 0304 	and.w	r3, r2, #4
 8006d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	d044      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d94:	2b05      	cmp	r3, #5
 8006d96:	d825      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006d98:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006ded 	.word	0x08006ded
 8006da4:	08006db9 	.word	0x08006db9
 8006da8:	08006dcf 	.word	0x08006dcf
 8006dac:	08006ded 	.word	0x08006ded
 8006db0:	08006ded 	.word	0x08006ded
 8006db4:	08006ded 	.word	0x08006ded
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fdef 	bl	80089a4 <RCCEx_PLL2_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e00f      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3328      	adds	r3, #40	@ 0x28
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fe96 	bl	8008b08 <RCCEx_PLL3_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df6:	4b6c      	ldr	r3, [pc, #432]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	f023 0107 	bic.w	r1, r3, #7
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e06:	4a68      	ldr	r2, [pc, #416]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f002 0320 	and.w	r3, r2, #32
 8006e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d055      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e42:	d033      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e48:	d82c      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4e:	d02f      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e54:	d826      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e5a:	d02b      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e60:	d820      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e66:	d012      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6c:	d81a      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e76:	d115      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fd8f 	bl	80089a4 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e015      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e92:	3328      	adds	r3, #40	@ 0x28
 8006e94:	2102      	movs	r1, #2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fe36 	bl	8008b08 <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e00a      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eaa:	e006      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eac:	bf00      	nop
 8006eae:	e004      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eb0:	bf00      	nop
 8006eb2:	e002      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ec2:	4b39      	ldr	r3, [pc, #228]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed2:	4a35      	ldr	r2, [pc, #212]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ed8:	e003      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ef8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4313      	orrs	r3, r2
 8006f00:	d058      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f0e:	d033      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006f10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f14:	d82c      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1a:	d02f      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f20:	d826      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f26:	d02b      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006f28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f2c:	d820      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f32:	d012      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f38:	d81a      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d022      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f42:	d115      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	3308      	adds	r3, #8
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fd29 	bl	80089a4 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f58:	e015      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	3328      	adds	r3, #40	@ 0x28
 8006f60:	2102      	movs	r1, #2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fdd0 	bl	8008b08 <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f76:	e006      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f78:	bf00      	nop
 8006f7a:	e004      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f7c:	bf00      	nop
 8006f7e:	e002      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f80:	bf00      	nop
 8006f82:	e000      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10e      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f8e:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f9e:	4a02      	ldr	r2, [pc, #8]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006fa6:	bf00      	nop
 8006fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	d055      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fdc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fe0:	d033      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006fe2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006fe6:	d82c      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fec:	d02f      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff2:	d826      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ff4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ff8:	d02b      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ffa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ffe:	d820      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007000:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007004:	d012      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800700a:	d81a      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d022      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007014:	d115      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	3308      	adds	r3, #8
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fcc0 	bl	80089a4 <RCCEx_PLL2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800702a:	e015      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007030:	3328      	adds	r3, #40	@ 0x28
 8007032:	2102      	movs	r1, #2
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fd67 	bl	8008b08 <RCCEx_PLL3_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007040:	e00a      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007048:	e006      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800704a:	bf00      	nop
 800704c:	e004      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007060:	4ba1      	ldr	r3, [pc, #644]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007070:	4a9d      	ldr	r2, [pc, #628]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6593      	str	r3, [r2, #88]	@ 0x58
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 0308 	and.w	r3, r2, #8
 800708c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007096:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d01e      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b2:	3328      	adds	r3, #40	@ 0x28
 80070b4:	2102      	movs	r1, #2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f001 fd26 	bl	8008b08 <RCCEx_PLL3_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070c8:	4b87      	ldr	r3, [pc, #540]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d8:	4a83      	ldr	r2, [pc, #524]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070da:	430b      	orrs	r3, r1
 80070dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f002 0310 	and.w	r3, r2, #16
 80070ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070ee:	2300      	movs	r3, #0
 80070f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d01e      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710a:	d10c      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007110:	3328      	adds	r3, #40	@ 0x28
 8007112:	2102      	movs	r1, #2
 8007114:	4618      	mov	r0, r3
 8007116:	f001 fcf7 	bl	8008b08 <RCCEx_PLL3_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007126:	4b70      	ldr	r3, [pc, #448]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007136:	4a6c      	ldr	r2, [pc, #432]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007138:	430b      	orrs	r3, r1
 800713a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800714c:	2300      	movs	r3, #0
 800714e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007152:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d03e      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800715c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007168:	d022      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800716a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800716e:	d81b      	bhi.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d00b      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800717a:	e015      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800717c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007180:	3308      	adds	r3, #8
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fc0d 	bl	80089a4 <RCCEx_PLL2_Config>
 800718a:	4603      	mov	r3, r0
 800718c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007190:	e00f      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007196:	3328      	adds	r3, #40	@ 0x28
 8007198:	2102      	movs	r1, #2
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fcb4 	bl	8008b08 <RCCEx_PLL3_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071a6:	e004      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80071b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ba:	4b4b      	ldr	r3, [pc, #300]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80071ca:	4a47      	ldr	r2, [pc, #284]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d0:	e003      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80071e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071e8:	2300      	movs	r3, #0
 80071ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80071f0:	460b      	mov	r3, r1
 80071f2:	4313      	orrs	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007202:	d01f      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007204:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007208:	d818      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800720a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720e:	d003      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007214:	d007      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007216:	e011      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007218:	4b33      	ldr	r3, [pc, #204]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	4a32      	ldr	r2, [pc, #200]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800721e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007224:	e00f      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	3328      	adds	r3, #40	@ 0x28
 800722c:	2101      	movs	r1, #1
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fc6a 	bl	8008b08 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800723a:	e004      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800724e:	4b26      	ldr	r3, [pc, #152]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007252:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	4a22      	ldr	r2, [pc, #136]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007260:	430b      	orrs	r3, r1
 8007262:	6553      	str	r3, [r2, #84]	@ 0x54
 8007264:	e003      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800727a:	673b      	str	r3, [r7, #112]	@ 0x70
 800727c:	2300      	movs	r3, #0
 800727e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007280:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d034      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007298:	d007      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800729a:	e011      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729c:	4b12      	ldr	r3, [pc, #72]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a11      	ldr	r2, [pc, #68]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072a8:	e00e      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ae:	3308      	adds	r3, #8
 80072b0:	2102      	movs	r1, #2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fb76 	bl	80089a4 <RCCEx_PLL2_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072de:	4a02      	ldr	r2, [pc, #8]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072e4:	e006      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80072e6:	bf00      	nop
 80072e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007302:	2300      	movs	r3, #0
 8007304:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007306:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800730a:	460b      	mov	r3, r1
 800730c:	4313      	orrs	r3, r2
 800730e:	d00c      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	3328      	adds	r3, #40	@ 0x28
 8007316:	2102      	movs	r1, #2
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fbf5 	bl	8008b08 <RCCEx_PLL3_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007336:	663b      	str	r3, [r7, #96]	@ 0x60
 8007338:	2300      	movs	r3, #0
 800733a:	667b      	str	r3, [r7, #100]	@ 0x64
 800733c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d038      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800734e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007352:	d018      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007358:	d811      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800735a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800735e:	d014      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	d80b      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d011      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800736a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736e:	d106      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007370:	4bc3      	ldr	r3, [pc, #780]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	4ac2      	ldr	r2, [pc, #776]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800737a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800737c:	e008      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007398:	4bb9      	ldr	r3, [pc, #740]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a8:	4ab5      	ldr	r2, [pc, #724]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c6:	2300      	movs	r3, #0
 80073c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80073ce:	460b      	mov	r3, r1
 80073d0:	4313      	orrs	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073d4:	4baa      	ldr	r3, [pc, #680]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e2:	4aa7      	ldr	r2, [pc, #668]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073e4:	430b      	orrs	r3, r1
 80073e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80073f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80073f6:	2300      	movs	r3, #0
 80073f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80073fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073fe:	460b      	mov	r3, r1
 8007400:	4313      	orrs	r3, r2
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007404:	4b9e      	ldr	r3, [pc, #632]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007410:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007414:	4a9a      	ldr	r2, [pc, #616]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007416:	430b      	orrs	r3, r1
 8007418:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007428:	2300      	movs	r3, #0
 800742a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800742c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007430:	460b      	mov	r3, r1
 8007432:	4313      	orrs	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007436:	4b92      	ldr	r3, [pc, #584]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007444:	4a8e      	ldr	r2, [pc, #568]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007446:	430b      	orrs	r3, r1
 8007448:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007456:	643b      	str	r3, [r7, #64]	@ 0x40
 8007458:	2300      	movs	r3, #0
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44
 800745c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007460:	460b      	mov	r3, r1
 8007462:	4313      	orrs	r3, r2
 8007464:	d00e      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007466:	4b86      	ldr	r3, [pc, #536]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	4a85      	ldr	r2, [pc, #532]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800746c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007470:	6113      	str	r3, [r2, #16]
 8007472:	4b83      	ldr	r3, [pc, #524]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007474:	6919      	ldr	r1, [r3, #16]
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800747e:	4a80      	ldr	r2, [pc, #512]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007480:	430b      	orrs	r3, r1
 8007482:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007492:	2300      	movs	r3, #0
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007496:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074a0:	4b77      	ldr	r3, [pc, #476]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	4a74      	ldr	r2, [pc, #464]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074b0:	430b      	orrs	r3, r1
 80074b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074d0:	4b6b      	ldr	r3, [pc, #428]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e0:	4a67      	ldr	r2, [pc, #412]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074e2:	430b      	orrs	r3, r1
 80074e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	2100      	movs	r1, #0
 80074f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074fc:	460b      	mov	r3, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	d011      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007506:	3308      	adds	r3, #8
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fa4a 	bl	80089a4 <RCCEx_PLL2_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	2100      	movs	r1, #0
 8007530:	6239      	str	r1, [r7, #32]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
 8007538:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800753c:	460b      	mov	r3, r1
 800753e:	4313      	orrs	r3, r2
 8007540:	d011      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3308      	adds	r3, #8
 8007548:	2101      	movs	r1, #1
 800754a:	4618      	mov	r0, r3
 800754c:	f001 fa2a 	bl	80089a4 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	2100      	movs	r1, #0
 8007570:	61b9      	str	r1, [r7, #24]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800757c:	460b      	mov	r3, r1
 800757e:	4313      	orrs	r3, r2
 8007580:	d011      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	3308      	adds	r3, #8
 8007588:	2102      	movs	r1, #2
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fa0a 	bl	80089a4 <RCCEx_PLL2_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	2100      	movs	r1, #0
 80075b0:	6139      	str	r1, [r7, #16]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075bc:	460b      	mov	r3, r1
 80075be:	4313      	orrs	r3, r2
 80075c0:	d011      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	3328      	adds	r3, #40	@ 0x28
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 fa9c 	bl	8008b08 <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80075d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	2100      	movs	r1, #0
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075fc:	460b      	mov	r3, r1
 80075fe:	4313      	orrs	r3, r2
 8007600:	d011      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	3328      	adds	r3, #40	@ 0x28
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fa7c 	bl	8008b08 <RCCEx_PLL3_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	2100      	movs	r1, #0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	607b      	str	r3, [r7, #4]
 8007638:	e9d7 1200 	ldrd	r1, r2, [r7]
 800763c:	460b      	mov	r3, r1
 800763e:	4313      	orrs	r3, r2
 8007640:	d011      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	3328      	adds	r3, #40	@ 0x28
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fa5c 	bl	8008b08 <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007666:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e000      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800767a:	46bd      	mov	sp, r7
 800767c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007680:	58024400 	.word	0x58024400

08007684 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b090      	sub	sp, #64	@ 0x40
 8007688:	af00      	add	r7, sp, #0
 800768a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800768e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007692:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007696:	430b      	orrs	r3, r1
 8007698:	f040 8094 	bne.w	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800769c:	4b9e      	ldr	r3, [pc, #632]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800769e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	f200 8087 	bhi.w	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076f1 	.word	0x080076f1
 80076bc:	08007719 	.word	0x08007719
 80076c0:	080077b5 	.word	0x080077b5
 80076c4:	08007741 	.word	0x08007741
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076c8:	4b93      	ldr	r3, [pc, #588]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076d4:	d108      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 f810 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e4:	f000 bd45 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ec:	f000 bd41 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076f0:	4b89      	ldr	r3, [pc, #548]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076fc:	d108      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fe:	f107 0318 	add.w	r3, r7, #24
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fd54 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800770c:	f000 bd31 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	f000 bd2d 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007718:	4b7f      	ldr	r3, [pc, #508]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007724:	d108      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007726:	f107 030c 	add.w	r3, r7, #12
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fe94 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007734:	f000 bd1d 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773c:	f000 bd19 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007740:	4b75      	ldr	r3, [pc, #468]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007744:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800774a:	4b73      	ldr	r3, [pc, #460]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b04      	cmp	r3, #4
 8007754:	d10c      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800775c:	4b6e      	ldr	r3, [pc, #440]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	08db      	lsrs	r3, r3, #3
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	4a6d      	ldr	r2, [pc, #436]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800776e:	e01f      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007770:	4b69      	ldr	r3, [pc, #420]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800777c:	d106      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800777e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007784:	d102      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007786:	4b66      	ldr	r3, [pc, #408]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800778a:	e011      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800778c:	4b62      	ldr	r3, [pc, #392]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007798:	d106      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a0:	d102      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077a2:	4b60      	ldr	r3, [pc, #384]	@ (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a6:	e003      	b.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077ac:	f000 bce1 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077b0:	f000 bcdf 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b8:	f000 bcdb 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c0:	f000 bcd7 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80077c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80077cc:	430b      	orrs	r3, r1
 80077ce:	f040 80ad 	bne.w	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80077d2:	4b51      	ldr	r3, [pc, #324]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e2:	d056      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	f200 8090 	bhi.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80077f2:	f000 8088 	beq.w	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2bc0      	cmp	r3, #192	@ 0xc0
 80077fa:	f200 8088 	bhi.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2b80      	cmp	r3, #128	@ 0x80
 8007802:	d032      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	f200 8081 	bhi.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2b40      	cmp	r3, #64	@ 0x40
 8007816:	d014      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007818:	e079      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800781a:	4b3f      	ldr	r3, [pc, #252]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007826:	d108      	bne.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800782c:	4618      	mov	r0, r3
 800782e:	f000 ff67 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007836:	f000 bc9c 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783e:	f000 bc98 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007842:	4b35      	ldr	r3, [pc, #212]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800784a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800784e:	d108      	bne.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007850:	f107 0318 	add.w	r3, r7, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fcab 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800785e:	f000 bc88 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	f000 bc84 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800786a:	4b2b      	ldr	r3, [pc, #172]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007876:	d108      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007878:	f107 030c 	add.w	r3, r7, #12
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fdeb 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007886:	f000 bc74 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788e:	f000 bc70 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007892:	4b21      	ldr	r3, [pc, #132]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007896:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800789a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800789c:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d10c      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80078a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	4a18      	ldr	r2, [pc, #96]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078ba:	fa22 f303 	lsr.w	r3, r2, r3
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c0:	e01f      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078c2:	4b15      	ldr	r3, [pc, #84]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ce:	d106      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d6:	d102      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078dc:	e011      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078de:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ea:	d106      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	e003      	b.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078fe:	f000 bc38 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007902:	f000 bc36 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007906:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790a:	f000 bc32 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007912:	f000 bc2e 	b.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
 8007920:	003d0900 	.word	0x003d0900
 8007924:	017d7840 	.word	0x017d7840
 8007928:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800792c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007930:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007934:	430b      	orrs	r3, r1
 8007936:	f040 809c 	bne.w	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800793a:	4b9e      	ldr	r3, [pc, #632]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007942:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007946:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800794a:	d054      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007952:	f200 808b 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800795c:	f000 8083 	beq.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007966:	f200 8081 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007970:	d02f      	beq.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007978:	d878      	bhi.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	d004      	beq.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007986:	d012      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007988:	e070      	b.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800798a:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007996:	d107      	bne.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800799c:	4618      	mov	r0, r3
 800799e:	f000 feaf 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a6:	e3e4      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ac:	e3e1      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ae:	4b81      	ldr	r3, [pc, #516]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079ba:	d107      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079bc:	f107 0318 	add.w	r3, r7, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fbf5 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ca:	e3d2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d0:	e3cf      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079d2:	4b78      	ldr	r3, [pc, #480]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079de:	d107      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e0:	f107 030c 	add.w	r3, r7, #12
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fd37 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ee:	e3c0      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f4:	e3bd      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079f6:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a00:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d10c      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a12:	4b68      	ldr	r3, [pc, #416]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	08db      	lsrs	r3, r3, #3
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	4a66      	ldr	r2, [pc, #408]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a24:	e01e      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a26:	4b63      	ldr	r3, [pc, #396]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a32:	d106      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a3a:	d102      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a40:	e010      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a42:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a4e:	d106      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a56:	d102      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a58:	4b59      	ldr	r3, [pc, #356]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a5c:	e002      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a62:	e386      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a64:	e385      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a66:	4b57      	ldr	r3, [pc, #348]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6a:	e382      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a70:	e37f      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a76:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	f040 80a7 	bne.w	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007a80:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a84:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a90:	d055      	beq.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a98:	f200 8096 	bhi.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007aa2:	f000 8084 	beq.w	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007aac:	f200 808c 	bhi.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ab6:	d030      	beq.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007abe:	f200 8083 	bhi.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ace:	d012      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007ad0:	e07a      	b.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ad2:	4b38      	ldr	r3, [pc, #224]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ade:	d107      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fe0b 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aee:	e340      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af4:	e33d      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007af6:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b02:	d107      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b04:	f107 0318 	add.w	r3, r7, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fb51 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b12:	e32e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b18:	e32b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b1a:	4b26      	ldr	r3, [pc, #152]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b26:	d107      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b28:	f107 030c 	add.w	r3, r7, #12
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fc93 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b36:	e31c      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b3c:	e319      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b48:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d10c      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b5a:	4b16      	ldr	r3, [pc, #88]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	4a14      	ldr	r2, [pc, #80]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b66:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b6c:	e01e      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b6e:	4b11      	ldr	r3, [pc, #68]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b7a:	d106      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b82:	d102      	bne.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b84:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b88:	e010      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b96:	d106      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b9e:	d102      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ba0:	4b07      	ldr	r3, [pc, #28]	@ (8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba4:	e002      	b.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007baa:	e2e2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bac:	e2e1      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bae:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb2:	e2de      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007bb4:	58024400 	.word	0x58024400
 8007bb8:	03d09000 	.word	0x03d09000
 8007bbc:	003d0900 	.word	0x003d0900
 8007bc0:	017d7840 	.word	0x017d7840
 8007bc4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	e2d1      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	f040 809c 	bne.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007bdc:	4b93      	ldr	r3, [pc, #588]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007be4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bec:	d054      	beq.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bf4:	f200 808b 	bhi.w	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bfe:	f000 8083 	beq.w	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c08:	f200 8081 	bhi.w	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	d02f      	beq.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c1a:	d878      	bhi.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c28:	d012      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007c2a:	e070      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c38:	d107      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fd5e 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c48:	e293      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4e:	e290      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c50:	4b76      	ldr	r3, [pc, #472]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c5c:	d107      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5e:	f107 0318 	add.w	r3, r7, #24
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 faa4 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6c:	e281      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c72:	e27e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c74:	4b6d      	ldr	r3, [pc, #436]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c80:	d107      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c82:	f107 030c 	add.w	r3, r7, #12
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fbe6 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c90:	e26f      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c96:	e26c      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c98:	4b64      	ldr	r3, [pc, #400]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ca2:	4b62      	ldr	r3, [pc, #392]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d10c      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cb4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	08db      	lsrs	r3, r3, #3
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc6:	e01e      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cc8:	4b58      	ldr	r3, [pc, #352]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd4:	d106      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cdc:	d102      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cde:	4b55      	ldr	r3, [pc, #340]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce2:	e010      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ce4:	4b51      	ldr	r3, [pc, #324]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf0:	d106      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cf8:	d102      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cfe:	e002      	b.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d04:	e235      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d06:	e234      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d08:	4b4c      	ldr	r3, [pc, #304]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0c:	e231      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d12:	e22e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d18:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	f040 808f 	bne.w	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007d22:	4b42      	ldr	r3, [pc, #264]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d26:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d32:	d06b      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d3a:	d874      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d42:	d056      	beq.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d4a:	d86c      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d52:	d03b      	beq.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d5a:	d864      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d62:	d021      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d6a:	d85c      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d78:	d004      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007d7a:	e054      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d7c:	f7fe fa62 	bl	8006244 <HAL_RCC_GetPCLK1Freq>
 8007d80:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d82:	e1f6      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d84:	4b29      	ldr	r3, [pc, #164]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d90:	d107      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d92:	f107 0318 	add.w	r3, r7, #24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fa0a 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007da0:	e1e7      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da6:	e1e4      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007da8:	4b20      	ldr	r3, [pc, #128]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db4:	d107      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db6:	f107 030c 	add.w	r3, r7, #12
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fb4c 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dc4:	e1d5      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dca:	e1d2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dcc:	4b17      	ldr	r3, [pc, #92]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d109      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dd8:	4b14      	ldr	r3, [pc, #80]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dea:	e1c2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df0:	e1bf      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007df2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dfe:	d102      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e04:	e1b5      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e0a:	e1b2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e0c:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e18:	d102      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007e1a:	4b07      	ldr	r3, [pc, #28]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e1e:	e1a8      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e24:	e1a5      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2a:	e1a2      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e2c:	58024400 	.word	0x58024400
 8007e30:	03d09000 	.word	0x03d09000
 8007e34:	003d0900 	.word	0x003d0900
 8007e38:	017d7840 	.word	0x017d7840
 8007e3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	d173      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e5c:	d02f      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e64:	d863      	bhi.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e72:	d012      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007e74:	e05b      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e76:	4b92      	ldr	r3, [pc, #584]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e82:	d107      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e84:	f107 0318 	add.w	r3, r7, #24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f991 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e92:	e16e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e98:	e16b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e9a:	4b89      	ldr	r3, [pc, #548]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ea2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea6:	d107      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ea8:	f107 030c 	add.w	r3, r7, #12
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fad3 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb6:	e15c      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ebc:	e159      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ebe:	4b80      	ldr	r3, [pc, #512]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d10c      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eda:	4b79      	ldr	r3, [pc, #484]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	4a77      	ldr	r2, [pc, #476]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eec:	e01e      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eee:	4b74      	ldr	r3, [pc, #464]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efa:	d106      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f02:	d102      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f04:	4b70      	ldr	r3, [pc, #448]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f08:	e010      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f16:	d106      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1e:	d102      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f20:	4b6a      	ldr	r3, [pc, #424]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f24:	e002      	b.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f2a:	e122      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f2c:	e121      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	e11e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	d133      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007f40:	4b5f      	ldr	r3, [pc, #380]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f56:	d012      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007f58:	e023      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f5a:	4b59      	ldr	r3, [pc, #356]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f66:	d107      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fbc7 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f76:	e0fc      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f7c:	e0f9      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f7e:	4b50      	ldr	r3, [pc, #320]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f8c:	f107 0318 	add.w	r3, r7, #24
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f90d 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9a:	e0ea      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa0:	e0e7      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa6:	e0e4      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	f040 808d 	bne.w	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007fb6:	4b42      	ldr	r3, [pc, #264]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007fbe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fc6:	d06b      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fce:	d874      	bhi.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd6:	d056      	beq.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fde:	d86c      	bhi.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fe6:	d03b      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007fee:	d864      	bhi.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff6:	d021      	beq.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ffe:	d85c      	bhi.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800800c:	d004      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800800e:	e054      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008010:	f000 f8b8 	bl	8008184 <HAL_RCCEx_GetD3PCLK1Freq>
 8008014:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008016:	e0ac      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008018:	4b29      	ldr	r3, [pc, #164]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008024:	d107      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008026:	f107 0318 	add.w	r3, r7, #24
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f8c0 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008034:	e09d      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800803a:	e09a      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800803c:	4b20      	ldr	r3, [pc, #128]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008048:	d107      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fa02 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008058:	e08b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805e:	e088      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008060:	4b17      	ldr	r3, [pc, #92]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b04      	cmp	r3, #4
 800806a:	d109      	bne.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800806c:	4b14      	ldr	r3, [pc, #80]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	08db      	lsrs	r3, r3, #3
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	4a13      	ldr	r2, [pc, #76]	@ (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800807e:	e078      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e075      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008086:	4b0e      	ldr	r3, [pc, #56]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	d102      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008094:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008098:	e06b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809e:	e068      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ac:	d102      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80080ae:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b2:	e05e      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b8:	e05b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080be:	e058      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080c0:	58024400 	.word	0x58024400
 80080c4:	03d09000 	.word	0x03d09000
 80080c8:	003d0900 	.word	0x003d0900
 80080cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80080d8:	430b      	orrs	r3, r1
 80080da:	d148      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080dc:	4b27      	ldr	r3, [pc, #156]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ec:	d02a      	beq.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80080ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f4:	d838      	bhi.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80080f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008102:	d00d      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008104:	e030      	b.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008106:	4b1d      	ldr	r3, [pc, #116]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008112:	d102      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008114:	4b1a      	ldr	r3, [pc, #104]	@ (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008118:	e02b      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811e:	e028      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008120:	4b16      	ldr	r3, [pc, #88]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800812c:	d107      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800812e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fae4 	bl	8008700 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813c:	e019      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008142:	e016      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008144:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800814c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008150:	d107      	bne.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008152:	f107 0318 	add.w	r3, r7, #24
 8008156:	4618      	mov	r0, r3
 8008158:	f000 f82a 	bl	80081b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008160:	e007      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008166:	e004      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800816c:	e001      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008174:	4618      	mov	r0, r3
 8008176:	3740      	adds	r7, #64	@ 0x40
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	58024400 	.word	0x58024400
 8008180:	017d7840 	.word	0x017d7840

08008184 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008188:	f7fe f82c 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 800818c:	4602      	mov	r2, r0
 800818e:	4b06      	ldr	r3, [pc, #24]	@ (80081a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	091b      	lsrs	r3, r3, #4
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	4904      	ldr	r1, [pc, #16]	@ (80081ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800819a:	5ccb      	ldrb	r3, [r1, r3]
 800819c:	f003 031f 	and.w	r3, r3, #31
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	58024400 	.word	0x58024400
 80081ac:	0800b070 	.word	0x0800b070

080081b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b089      	sub	sp, #36	@ 0x24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b8:	4ba1      	ldr	r3, [pc, #644]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081c2:	4b9f      	ldr	r3, [pc, #636]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	0b1b      	lsrs	r3, r3, #12
 80081c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	091b      	lsrs	r3, r3, #4
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081da:	4b99      	ldr	r3, [pc, #612]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081de:	08db      	lsrs	r3, r3, #3
 80081e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	fb02 f303 	mul.w	r3, r2, r3
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8111 	beq.w	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b02      	cmp	r3, #2
 8008202:	f000 8083 	beq.w	800830c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b02      	cmp	r3, #2
 800820a:	f200 80a1 	bhi.w	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d003      	beq.n	800821c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d056      	beq.n	80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800821a:	e099      	b.n	8008350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800821c:	4b88      	ldr	r3, [pc, #544]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d02d      	beq.n	8008284 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008228:	4b85      	ldr	r3, [pc, #532]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	4a84      	ldr	r2, [pc, #528]	@ (8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	4b7b      	ldr	r3, [pc, #492]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008262:	ed97 6a03 	vldr	s12, [r7, #12]
 8008266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800826a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800827a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008282:	e087      	b.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800844c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b6a      	ldr	r3, [pc, #424]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c6:	e065      	b.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b59      	ldr	r3, [pc, #356]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800830a:	e043      	b.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834e:	e021      	b.n	8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800835e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008362:	4b37      	ldr	r3, [pc, #220]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	ed97 6a03 	vldr	s12, [r7, #12]
 8008376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800837a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008392:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008394:	4b2a      	ldr	r3, [pc, #168]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008398:	0a5b      	lsrs	r3, r3, #9
 800839a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ba:	ee17 2a90 	vmov	r2, s15
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80083c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e8:	ee17 2a90 	vmov	r2, s15
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80083f0:	4b13      	ldr	r3, [pc, #76]	@ (8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f4:	0e1b      	lsrs	r3, r3, #24
 80083f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840a:	edd7 6a07 	vldr	s13, [r7, #28]
 800840e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008416:	ee17 2a90 	vmov	r2, s15
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800841e:	e008      	b.n	8008432 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	609a      	str	r2, [r3, #8]
}
 8008432:	bf00      	nop
 8008434:	3724      	adds	r7, #36	@ 0x24
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	03d09000 	.word	0x03d09000
 8008448:	46000000 	.word	0x46000000
 800844c:	4c742400 	.word	0x4c742400
 8008450:	4a742400 	.word	0x4a742400
 8008454:	4bbebc20 	.word	0x4bbebc20

08008458 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008458:	b480      	push	{r7}
 800845a:	b089      	sub	sp, #36	@ 0x24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008460:	4ba1      	ldr	r3, [pc, #644]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008464:	f003 0303 	and.w	r3, r3, #3
 8008468:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800846a:	4b9f      	ldr	r3, [pc, #636]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008474:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008476:	4b9c      	ldr	r3, [pc, #624]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008482:	4b99      	ldr	r3, [pc, #612]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008486:	08db      	lsrs	r3, r3, #3
 8008488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8111 	beq.w	80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	f000 8083 	beq.w	80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	f200 80a1 	bhi.w	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d056      	beq.n	8008570 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084c2:	e099      	b.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084c4:	4b88      	ldr	r3, [pc, #544]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d02d      	beq.n	800852c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084d0:	4b85      	ldr	r3, [pc, #532]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	08db      	lsrs	r3, r3, #3
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	4a84      	ldr	r2, [pc, #528]	@ (80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fa:	4b7b      	ldr	r3, [pc, #492]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850a:	ed97 6a03 	vldr	s12, [r7, #12]
 800850e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800851e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800852a:	e087      	b.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800853a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853e:	4b6a      	ldr	r3, [pc, #424]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008552:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856e:	e065      	b.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008582:	4b59      	ldr	r3, [pc, #356]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008592:	ed97 6a03 	vldr	s12, [r7, #12]
 8008596:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800859a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b2:	e043      	b.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b48      	ldr	r3, [pc, #288]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f6:	e021      	b.n	800863c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b37      	ldr	r3, [pc, #220]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800860c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a03 	vldr	s12, [r7, #12]
 800861e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800863a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800863c:	4b2a      	ldr	r3, [pc, #168]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	0a5b      	lsrs	r3, r3, #9
 8008642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008656:	edd7 6a07 	vldr	s13, [r7, #28]
 800865a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008662:	ee17 2a90 	vmov	r2, s15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800866a:	4b1f      	ldr	r3, [pc, #124]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008684:	edd7 6a07 	vldr	s13, [r7, #28]
 8008688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008690:	ee17 2a90 	vmov	r2, s15
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008698:	4b13      	ldr	r3, [pc, #76]	@ (80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800869a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869c:	0e1b      	lsrs	r3, r3, #24
 800869e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086be:	ee17 2a90 	vmov	r2, s15
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086c6:	e008      	b.n	80086da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	609a      	str	r2, [r3, #8]
}
 80086da:	bf00      	nop
 80086dc:	3724      	adds	r7, #36	@ 0x24
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	58024400 	.word	0x58024400
 80086ec:	03d09000 	.word	0x03d09000
 80086f0:	46000000 	.word	0x46000000
 80086f4:	4c742400 	.word	0x4c742400
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	4bbebc20 	.word	0x4bbebc20

08008700 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	@ 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008708:	4ba0      	ldr	r3, [pc, #640]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800870a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870c:	f003 0303 	and.w	r3, r3, #3
 8008710:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008712:	4b9e      	ldr	r3, [pc, #632]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800871c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800871e:	4b9b      	ldr	r3, [pc, #620]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008728:	4b98      	ldr	r3, [pc, #608]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800872a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	fb02 f303 	mul.w	r3, r2, r3
 8008738:	ee07 3a90 	vmov	s15, r3
 800873c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008740:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8111 	beq.w	800896e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b02      	cmp	r3, #2
 8008750:	f000 8083 	beq.w	800885a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	2b02      	cmp	r3, #2
 8008758:	f200 80a1 	bhi.w	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d056      	beq.n	8008816 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008768:	e099      	b.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876a:	4b88      	ldr	r3, [pc, #544]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d02d      	beq.n	80087d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008776:	4b85      	ldr	r3, [pc, #532]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	4a83      	ldr	r2, [pc, #524]	@ (8008990 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008782:	fa22 f303 	lsr.w	r3, r2, r3
 8008786:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	ee07 3a90 	vmov	s15, r3
 8008798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a0:	4b7a      	ldr	r3, [pc, #488]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087cc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087d0:	e087      	b.n	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087dc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008998 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e4:	4b69      	ldr	r3, [pc, #420]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008814:	e065      	b.n	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008820:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800899c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008828:	4b58      	ldr	r3, [pc, #352]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008838:	ed97 6a03 	vldr	s12, [r7, #12]
 800883c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008848:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800884c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008854:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008858:	e043      	b.n	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008864:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80089a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886c:	4b47      	ldr	r3, [pc, #284]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800886e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008880:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008898:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889c:	e021      	b.n	80088e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008998 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b0:	4b36      	ldr	r3, [pc, #216]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008994 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80088e2:	4b2a      	ldr	r3, [pc, #168]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e6:	0a5b      	lsrs	r3, r3, #9
 80088e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008908:	ee17 2a90 	vmov	r2, s15
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008910:	4b1e      	ldr	r3, [pc, #120]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008914:	0c1b      	lsrs	r3, r3, #16
 8008916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800892a:	edd7 6a07 	vldr	s13, [r7, #28]
 800892e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008936:	ee17 2a90 	vmov	r2, s15
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800893e:	4b13      	ldr	r3, [pc, #76]	@ (800898c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008942:	0e1b      	lsrs	r3, r3, #24
 8008944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008958:	edd7 6a07 	vldr	s13, [r7, #28]
 800895c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008964:	ee17 2a90 	vmov	r2, s15
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800896c:	e008      	b.n	8008980 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	bf00      	nop
 8008982:	3724      	adds	r7, #36	@ 0x24
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	58024400 	.word	0x58024400
 8008990:	03d09000 	.word	0x03d09000
 8008994:	46000000 	.word	0x46000000
 8008998:	4c742400 	.word	0x4c742400
 800899c:	4a742400 	.word	0x4a742400
 80089a0:	4bbebc20 	.word	0x4bbebc20

080089a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089b2:	4b53      	ldr	r3, [pc, #332]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d101      	bne.n	80089c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e099      	b.n	8008af6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 80089c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ce:	f7fa fc43 	bl	8003258 <HAL_GetTick>
 80089d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089d4:	e008      	b.n	80089e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089d6:	f7fa fc3f 	bl	8003258 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d901      	bls.n	80089e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e086      	b.n	8008af6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089e8:	4b45      	ldr	r3, [pc, #276]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f0      	bne.n	80089d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089f4:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	031b      	lsls	r3, r3, #12
 8008a02:	493f      	ldr	r1, [pc, #252]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	025b      	lsls	r3, r3, #9
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	041b      	lsls	r3, r3, #16
 8008a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	061b      	lsls	r3, r3, #24
 8008a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a38:	4931      	ldr	r1, [pc, #196]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a3e:	4b30      	ldr	r3, [pc, #192]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	492d      	ldr	r1, [pc, #180]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a50:	4b2b      	ldr	r3, [pc, #172]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	f023 0220 	bic.w	r2, r3, #32
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	4928      	ldr	r1, [pc, #160]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a62:	4b27      	ldr	r3, [pc, #156]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	4a26      	ldr	r2, [pc, #152]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	f023 0310 	bic.w	r3, r3, #16
 8008a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a6e:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a72:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <RCCEx_PLL2_Config+0x160>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	69d2      	ldr	r2, [r2, #28]
 8008a7a:	00d2      	lsls	r2, r2, #3
 8008a7c:	4920      	ldr	r1, [pc, #128]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a82:	4b1f      	ldr	r3, [pc, #124]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	4a1e      	ldr	r2, [pc, #120]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	f043 0310 	orr.w	r3, r3, #16
 8008a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a94:	4b1a      	ldr	r3, [pc, #104]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a19      	ldr	r2, [pc, #100]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008aa0:	e00f      	b.n	8008ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d106      	bne.n	8008ab6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008aa8:	4b15      	ldr	r3, [pc, #84]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	4a14      	ldr	r2, [pc, #80]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ab4:	e005      	b.n	8008ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ab6:	4b12      	ldr	r3, [pc, #72]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aba:	4a11      	ldr	r2, [pc, #68]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008ac8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ace:	f7fa fbc3 	bl	8003258 <HAL_GetTick>
 8008ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ad4:	e008      	b.n	8008ae8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ad6:	f7fa fbbf 	bl	8003258 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e006      	b.n	8008af6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ae8:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <RCCEx_PLL2_Config+0x15c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	ffff0007 	.word	0xffff0007

08008b08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b16:	4b53      	ldr	r3, [pc, #332]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d101      	bne.n	8008b26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e099      	b.n	8008c5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b26:	4b4f      	ldr	r3, [pc, #316]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a4e      	ldr	r2, [pc, #312]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b32:	f7fa fb91 	bl	8003258 <HAL_GetTick>
 8008b36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b38:	e008      	b.n	8008b4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b3a:	f7fa fb8d 	bl	8003258 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e086      	b.n	8008c5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b4c:	4b45      	ldr	r3, [pc, #276]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1f0      	bne.n	8008b3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b58:	4b42      	ldr	r3, [pc, #264]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	051b      	lsls	r3, r3, #20
 8008b66:	493f      	ldr	r1, [pc, #252]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	025b      	lsls	r3, r3, #9
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	041b      	lsls	r3, r3, #16
 8008b8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	061b      	lsls	r3, r3, #24
 8008b98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b9c:	4931      	ldr	r1, [pc, #196]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ba2:	4b30      	ldr	r3, [pc, #192]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	492d      	ldr	r1, [pc, #180]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	4928      	ldr	r1, [pc, #160]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bc6:	4b27      	ldr	r3, [pc, #156]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	4a26      	ldr	r2, [pc, #152]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bd2:	4b24      	ldr	r3, [pc, #144]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd6:	4b24      	ldr	r3, [pc, #144]	@ (8008c68 <RCCEx_PLL3_Config+0x160>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	69d2      	ldr	r2, [r2, #28]
 8008bde:	00d2      	lsls	r2, r2, #3
 8008be0:	4920      	ldr	r1, [pc, #128]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008be6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfc:	4a19      	ldr	r2, [pc, #100]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008bfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c04:	e00f      	b.n	8008c26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d106      	bne.n	8008c1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c0c:	4b15      	ldr	r3, [pc, #84]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	4a14      	ldr	r2, [pc, #80]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c18:	e005      	b.n	8008c26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c1a:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	4a11      	ldr	r2, [pc, #68]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c26:	4b0f      	ldr	r3, [pc, #60]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c32:	f7fa fb11 	bl	8003258 <HAL_GetTick>
 8008c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c38:	e008      	b.n	8008c4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c3a:	f7fa fb0d 	bl	8003258 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e006      	b.n	8008c5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c4c:	4b05      	ldr	r3, [pc, #20]	@ (8008c64 <RCCEx_PLL3_Config+0x15c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0f0      	beq.n	8008c3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	58024400 	.word	0x58024400
 8008c68:	ffff0007 	.word	0xffff0007

08008c6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e10f      	b.n	8008e9e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a87      	ldr	r2, [pc, #540]	@ (8008ea8 <HAL_SPI_Init+0x23c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <HAL_SPI_Init+0x42>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a86      	ldr	r2, [pc, #536]	@ (8008eac <HAL_SPI_Init+0x240>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00a      	beq.n	8008cae <HAL_SPI_Init+0x42>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a84      	ldr	r2, [pc, #528]	@ (8008eb0 <HAL_SPI_Init+0x244>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d005      	beq.n	8008cae <HAL_SPI_Init+0x42>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d901      	bls.n	8008cae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e0f7      	b.n	8008e9e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fe2e 	bl	8009910 <SPI_GetPacketSize>
 8008cb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a7b      	ldr	r2, [pc, #492]	@ (8008ea8 <HAL_SPI_Init+0x23c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00c      	beq.n	8008cda <HAL_SPI_Init+0x6e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a79      	ldr	r2, [pc, #484]	@ (8008eac <HAL_SPI_Init+0x240>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <HAL_SPI_Init+0x6e>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a78      	ldr	r2, [pc, #480]	@ (8008eb0 <HAL_SPI_Init+0x244>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d002      	beq.n	8008cda <HAL_SPI_Init+0x6e>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d811      	bhi.n	8008cfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008cde:	4a72      	ldr	r2, [pc, #456]	@ (8008ea8 <HAL_SPI_Init+0x23c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d009      	beq.n	8008cf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a70      	ldr	r2, [pc, #448]	@ (8008eac <HAL_SPI_Init+0x240>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d004      	beq.n	8008cf8 <HAL_SPI_Init+0x8c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8008eb0 <HAL_SPI_Init+0x244>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d104      	bne.n	8008d02 <HAL_SPI_Init+0x96>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b10      	cmp	r3, #16
 8008cfc:	d901      	bls.n	8008d02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e0cd      	b.n	8008e9e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7f7 ff1c 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0201 	bic.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008d3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d48:	d119      	bne.n	8008d7e <HAL_SPI_Init+0x112>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d52:	d103      	bne.n	8008d5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10c      	bne.n	8008d7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d6c:	d107      	bne.n	8008d7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <HAL_SPI_Init+0x13e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d90b      	bls.n	8008daa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e007      	b.n	8008dba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008db8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69da      	ldr	r2, [r3, #28]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dcc:	ea42 0103 	orr.w	r1, r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e1a:	ea42 0103 	orr.w	r1, r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d113      	bne.n	8008e5a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40013000 	.word	0x40013000
 8008eac:	40003800 	.word	0x40003800
 8008eb0:	40003c00 	.word	0x40003c00

08008eb4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3320      	adds	r3, #32
 8008eca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ecc:	f7fa f9c4 	bl	8003258 <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d001      	beq.n	8008ee2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e1d1      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_SPI_Transmit+0x3a>
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e1c9      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_SPI_Transmit+0x4c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e1c2      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2203      	movs	r2, #3
 8008f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	88fa      	ldrh	r2, [r7, #6]
 8008f2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008f58:	d108      	bne.n	8008f6c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	e009      	b.n	8008f80 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f7e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	4b96      	ldr	r3, [pc, #600]	@ (80091e0 <HAL_SPI_Transmit+0x32c>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	88f9      	ldrh	r1, [r7, #6]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	430b      	orrs	r3, r1
 8008f92:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0201 	orr.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fac:	d107      	bne.n	8008fbe <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b0f      	cmp	r3, #15
 8008fc4:	d947      	bls.n	8009056 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008fc6:	e03f      	b.n	8009048 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d114      	bne.n	8009000 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ffe:	e023      	b.n	8009048 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009000:	f7fa f92a 	bl	8003258 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d803      	bhi.n	8009018 <HAL_SPI_Transmit+0x164>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d102      	bne.n	800901e <HAL_SPI_Transmit+0x16a>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d114      	bne.n	8009048 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fba8 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800902a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e11e      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1b9      	bne.n	8008fc8 <HAL_SPI_Transmit+0x114>
 8009054:	e0f1      	b.n	800923a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b07      	cmp	r3, #7
 800905c:	f240 80e6 	bls.w	800922c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009060:	e05d      	b.n	800911e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b02      	cmp	r3, #2
 800906e:	d132      	bne.n	80090d6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009076:	b29b      	uxth	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	d918      	bls.n	80090ae <HAL_SPI_Transmit+0x1fa>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d014      	beq.n	80090ae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009094:	1d1a      	adds	r2, r3, #4
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	3b02      	subs	r3, #2
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80090ac:	e037      	b.n	800911e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b2:	881a      	ldrh	r2, [r3, #0]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090bc:	1c9a      	adds	r2, r3, #2
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80090d4:	e023      	b.n	800911e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090d6:	f7fa f8bf 	bl	8003258 <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d803      	bhi.n	80090ee <HAL_SPI_Transmit+0x23a>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ec:	d102      	bne.n	80090f4 <HAL_SPI_Transmit+0x240>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d114      	bne.n	800911e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fb3d 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009100:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e0b3      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d19b      	bne.n	8009062 <HAL_SPI_Transmit+0x1ae>
 800912a:	e086      	b.n	800923a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b02      	cmp	r3, #2
 8009138:	d154      	bne.n	80091e4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b03      	cmp	r3, #3
 8009144:	d918      	bls.n	8009178 <HAL_SPI_Transmit+0x2c4>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800914a:	2b40      	cmp	r3, #64	@ 0x40
 800914c:	d914      	bls.n	8009178 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b04      	subs	r3, #4
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009176:	e059      	b.n	800922c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800917e:	b29b      	uxth	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d917      	bls.n	80091b4 <HAL_SPI_Transmit+0x300>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d013      	beq.n	80091b4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009190:	881a      	ldrh	r2, [r3, #0]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800919a:	1c9a      	adds	r2, r3, #2
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b02      	subs	r3, #2
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091b2:	e03b      	b.n	800922c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3320      	adds	r3, #32
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3b01      	subs	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80091de:	e025      	b.n	800922c <HAL_SPI_Transmit+0x378>
 80091e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091e4:	f7fa f838 	bl	8003258 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d803      	bhi.n	80091fc <HAL_SPI_Transmit+0x348>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fa:	d102      	bne.n	8009202 <HAL_SPI_Transmit+0x34e>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d114      	bne.n	800922c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fab6 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800920e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e02c      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	f47f af79 	bne.w	800912c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2200      	movs	r2, #0
 8009242:	2108      	movs	r1, #8
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fb35 	bl	80098b4 <SPI_WaitOnFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d007      	beq.n	8009260 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009256:	f043 0220 	orr.w	r2, r3, #32
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 fa87 	bl	8009774 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e000      	b.n	8009286 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009284:	2300      	movs	r3, #0
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	3301      	adds	r3, #1
 80092aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3330      	adds	r3, #48	@ 0x30
 80092b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092b4:	f7f9 ffd0 	bl	8003258 <HAL_GetTick>
 80092b8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d001      	beq.n	80092ca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80092c6:	2302      	movs	r3, #2
 80092c8:	e250      	b.n	800976c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Receive+0x46>
 80092d0:	88fb      	ldrh	r3, [r7, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e248      	b.n	800976c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_SPI_Receive+0x58>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e241      	b.n	800976c <HAL_SPI_Receive+0x4dc>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2204      	movs	r2, #4
 80092f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	88fa      	ldrh	r2, [r7, #6]
 800930a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009340:	d108      	bne.n	8009354 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e009      	b.n	8009368 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009366:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b95      	ldr	r3, [pc, #596]	@ (80095c4 <HAL_SPI_Receive+0x334>)
 8009370:	4013      	ands	r3, r2
 8009372:	88f9      	ldrh	r1, [r7, #6]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	430b      	orrs	r3, r1
 800937a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0201 	orr.w	r2, r2, #1
 800938a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009394:	d107      	bne.n	80093a6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	d96c      	bls.n	8009488 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80093ae:	e064      	b.n	800947a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d114      	bne.n	80093f0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80093d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d6:	1d1a      	adds	r2, r3, #4
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093ee:	e044      	b.n	800947a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	8bfa      	ldrh	r2, [r7, #30]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d919      	bls.n	8009432 <HAL_SPI_Receive+0x1a2>
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d014      	beq.n	8009432 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009410:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009412:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009418:	1d1a      	adds	r2, r3, #4
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29a      	uxth	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009430:	e023      	b.n	800947a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009432:	f7f9 ff11 	bl	8003258 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d803      	bhi.n	800944a <HAL_SPI_Receive+0x1ba>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d102      	bne.n	8009450 <HAL_SPI_Receive+0x1c0>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d114      	bne.n	800947a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f98f 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e178      	b.n	800976c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d194      	bne.n	80093b0 <HAL_SPI_Receive+0x120>
 8009486:	e15e      	b.n	8009746 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	2b07      	cmp	r3, #7
 800948e:	f240 8153 	bls.w	8009738 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009492:	e08f      	b.n	80095b4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d114      	bne.n	80094d4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	b292      	uxth	r2, r2
 80094b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ba:	1c9a      	adds	r2, r3, #2
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80094d2:	e06f      	b.n	80095b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8bfa      	ldrh	r2, [r7, #30]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d924      	bls.n	800952c <HAL_SPI_Receive+0x29c>
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01f      	beq.n	800952c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	b292      	uxth	r2, r2
 80094f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094fc:	1c9a      	adds	r2, r3, #2
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	8812      	ldrh	r2, [r2, #0]
 800950a:	b292      	uxth	r2, r2
 800950c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009512:	1c9a      	adds	r2, r3, #2
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b02      	subs	r3, #2
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800952a:	e043      	b.n	80095b4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	d119      	bne.n	800956c <HAL_SPI_Receive+0x2dc>
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d014      	beq.n	800956c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	8812      	ldrh	r2, [r2, #0]
 800954a:	b292      	uxth	r2, r2
 800954c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009552:	1c9a      	adds	r2, r3, #2
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800956a:	e023      	b.n	80095b4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800956c:	f7f9 fe74 	bl	8003258 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d803      	bhi.n	8009584 <HAL_SPI_Receive+0x2f4>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009582:	d102      	bne.n	800958a <HAL_SPI_Receive+0x2fa>
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d114      	bne.n	80095b4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f8f2 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e0db      	b.n	800976c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f af69 	bne.w	8009494 <HAL_SPI_Receive+0x204>
 80095c2:	e0c0      	b.n	8009746 <HAL_SPI_Receive+0x4b6>
 80095c4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d117      	bne.n	800960e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800960c:	e094      	b.n	8009738 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009614:	b29b      	uxth	r3, r3
 8009616:	8bfa      	ldrh	r2, [r7, #30]
 8009618:	429a      	cmp	r2, r3
 800961a:	d946      	bls.n	80096aa <HAL_SPI_Receive+0x41a>
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d041      	beq.n	80096aa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009686:	7812      	ldrb	r2, [r2, #0]
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b04      	subs	r3, #4
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096a8:	e046      	b.n	8009738 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d81c      	bhi.n	80096f0 <HAL_SPI_Receive+0x460>
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d017      	beq.n	80096f0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096cc:	7812      	ldrb	r2, [r2, #0]
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80096ee:	e023      	b.n	8009738 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096f0:	f7f9 fdb2 	bl	8003258 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d803      	bhi.n	8009708 <HAL_SPI_Receive+0x478>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d102      	bne.n	800970e <HAL_SPI_Receive+0x47e>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d114      	bne.n	8009738 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f830 	bl	8009774 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800971a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e019      	b.n	800976c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	f47f af41 	bne.w	80095c8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 f814 	bl	8009774 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800976a:	2300      	movs	r3, #0
  }
}
 800976c:	4618      	mov	r0, r3
 800976e:	3720      	adds	r7, #32
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0208 	orr.w	r2, r2, #8
 8009792:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0210 	orr.w	r2, r2, #16
 80097a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0201 	bic.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6919      	ldr	r1, [r3, #16]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4b3c      	ldr	r3, [pc, #240]	@ (80098b0 <SPI_CloseTransfer+0x13c>)
 80097c0:	400b      	ands	r3, r1
 80097c2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80097d2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d014      	beq.n	800980a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00f      	beq.n	800980a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0220 	orr.w	r2, r2, #32
 8009808:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b03      	cmp	r3, #3
 8009814:	d014      	beq.n	8009840 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00f      	beq.n	8009840 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009826:	f043 0204 	orr.w	r2, r3, #4
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699a      	ldr	r2, [r3, #24]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800983e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00f      	beq.n	800986a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009850:	f043 0201 	orr.w	r2, r3, #1
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009868:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00f      	beq.n	8009894 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800987a:	f043 0208 	orr.w	r2, r3, #8
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699a      	ldr	r2, [r3, #24]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009892:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	fffffc90 	.word	0xfffffc90

080098b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80098c4:	e010      	b.n	80098e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c6:	f7f9 fcc7 	bl	8003258 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d803      	bhi.n	80098de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d102      	bne.n	80098e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e00f      	b.n	8009908 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	695a      	ldr	r2, [r3, #20]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4013      	ands	r3, r2
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	bf0c      	ite	eq
 80098f8:	2301      	moveq	r3, #1
 80098fa:	2300      	movne	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	429a      	cmp	r2, r3
 8009904:	d0df      	beq.n	80098c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	3301      	adds	r3, #1
 8009928:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	3307      	adds	r3, #7
 800992e:	08db      	lsrs	r3, r3, #3
 8009930:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	fb02 f303 	mul.w	r3, r2, r3
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e049      	b.n	80099ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7f7 fb33 	bl	8000fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2202      	movs	r2, #2
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3304      	adds	r3, #4
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f000 f949 	bl	8009c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e0ff      	b.n	8009c12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b14      	cmp	r3, #20
 8009a1e:	f200 80f0 	bhi.w	8009c02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a22:	a201      	add	r2, pc, #4	@ (adr r2, 8009a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a7d 	.word	0x08009a7d
 8009a2c:	08009c03 	.word	0x08009c03
 8009a30:	08009c03 	.word	0x08009c03
 8009a34:	08009c03 	.word	0x08009c03
 8009a38:	08009abd 	.word	0x08009abd
 8009a3c:	08009c03 	.word	0x08009c03
 8009a40:	08009c03 	.word	0x08009c03
 8009a44:	08009c03 	.word	0x08009c03
 8009a48:	08009aff 	.word	0x08009aff
 8009a4c:	08009c03 	.word	0x08009c03
 8009a50:	08009c03 	.word	0x08009c03
 8009a54:	08009c03 	.word	0x08009c03
 8009a58:	08009b3f 	.word	0x08009b3f
 8009a5c:	08009c03 	.word	0x08009c03
 8009a60:	08009c03 	.word	0x08009c03
 8009a64:	08009c03 	.word	0x08009c03
 8009a68:	08009b81 	.word	0x08009b81
 8009a6c:	08009c03 	.word	0x08009c03
 8009a70:	08009c03 	.word	0x08009c03
 8009a74:	08009c03 	.word	0x08009c03
 8009a78:	08009bc1 	.word	0x08009bc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f96a 	bl	8009d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	699a      	ldr	r2, [r3, #24]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0208 	orr.w	r2, r2, #8
 8009a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699a      	ldr	r2, [r3, #24]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0204 	bic.w	r2, r2, #4
 8009aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6999      	ldr	r1, [r3, #24]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	691a      	ldr	r2, [r3, #16]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	619a      	str	r2, [r3, #24]
      break;
 8009aba:	e0a5      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 f9da 	bl	8009e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699a      	ldr	r2, [r3, #24]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6999      	ldr	r1, [r3, #24]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	021a      	lsls	r2, r3, #8
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	619a      	str	r2, [r3, #24]
      break;
 8009afc:	e084      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fa43 	bl	8009f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0208 	orr.w	r2, r2, #8
 8009b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 0204 	bic.w	r2, r2, #4
 8009b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69d9      	ldr	r1, [r3, #28]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	61da      	str	r2, [r3, #28]
      break;
 8009b3c:	e064      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68b9      	ldr	r1, [r7, #8]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 faab 	bl	800a0a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69da      	ldr	r2, [r3, #28]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69d9      	ldr	r1, [r3, #28]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	021a      	lsls	r2, r3, #8
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	61da      	str	r2, [r3, #28]
      break;
 8009b7e:	e043      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 faf4 	bl	800a174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0208 	orr.w	r2, r2, #8
 8009b9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0204 	bic.w	r2, r2, #4
 8009baa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009bbe:	e023      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fb38 	bl	800a23c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	021a      	lsls	r2, r3, #8
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009c00:	e002      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	75fb      	strb	r3, [r7, #23]
      break;
 8009c06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop

08009c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a43      	ldr	r2, [pc, #268]	@ (8009d3c <TIM_Base_SetConfig+0x120>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d013      	beq.n	8009c5c <TIM_Base_SetConfig+0x40>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c3a:	d00f      	beq.n	8009c5c <TIM_Base_SetConfig+0x40>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a40      	ldr	r2, [pc, #256]	@ (8009d40 <TIM_Base_SetConfig+0x124>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d00b      	beq.n	8009c5c <TIM_Base_SetConfig+0x40>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a3f      	ldr	r2, [pc, #252]	@ (8009d44 <TIM_Base_SetConfig+0x128>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d007      	beq.n	8009c5c <TIM_Base_SetConfig+0x40>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8009d48 <TIM_Base_SetConfig+0x12c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d003      	beq.n	8009c5c <TIM_Base_SetConfig+0x40>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a3d      	ldr	r2, [pc, #244]	@ (8009d4c <TIM_Base_SetConfig+0x130>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d108      	bne.n	8009c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a32      	ldr	r2, [pc, #200]	@ (8009d3c <TIM_Base_SetConfig+0x120>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d01f      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c7c:	d01b      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a2f      	ldr	r2, [pc, #188]	@ (8009d40 <TIM_Base_SetConfig+0x124>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d017      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a2e      	ldr	r2, [pc, #184]	@ (8009d44 <TIM_Base_SetConfig+0x128>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d013      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a2d      	ldr	r2, [pc, #180]	@ (8009d48 <TIM_Base_SetConfig+0x12c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d00f      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2c      	ldr	r2, [pc, #176]	@ (8009d4c <TIM_Base_SetConfig+0x130>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00b      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8009d50 <TIM_Base_SetConfig+0x134>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d007      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8009d54 <TIM_Base_SetConfig+0x138>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_Base_SetConfig+0x9a>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a29      	ldr	r2, [pc, #164]	@ (8009d58 <TIM_Base_SetConfig+0x13c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d108      	bne.n	8009cc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a14      	ldr	r2, [pc, #80]	@ (8009d3c <TIM_Base_SetConfig+0x120>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00f      	beq.n	8009d0e <TIM_Base_SetConfig+0xf2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a16      	ldr	r2, [pc, #88]	@ (8009d4c <TIM_Base_SetConfig+0x130>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00b      	beq.n	8009d0e <TIM_Base_SetConfig+0xf2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a15      	ldr	r2, [pc, #84]	@ (8009d50 <TIM_Base_SetConfig+0x134>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d007      	beq.n	8009d0e <TIM_Base_SetConfig+0xf2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a14      	ldr	r2, [pc, #80]	@ (8009d54 <TIM_Base_SetConfig+0x138>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d003      	beq.n	8009d0e <TIM_Base_SetConfig+0xf2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a13      	ldr	r2, [pc, #76]	@ (8009d58 <TIM_Base_SetConfig+0x13c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d103      	bne.n	8009d16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	691a      	ldr	r2, [r3, #16]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f043 0204 	orr.w	r2, r3, #4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40010400 	.word	0x40010400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800

08009d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	f023 0201 	bic.w	r2, r3, #1
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4b37      	ldr	r3, [pc, #220]	@ (8009e64 <TIM_OC1_SetConfig+0x108>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f023 0302 	bic.w	r3, r3, #2
 8009da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a2d      	ldr	r2, [pc, #180]	@ (8009e68 <TIM_OC1_SetConfig+0x10c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00f      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x7c>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a2c      	ldr	r2, [pc, #176]	@ (8009e6c <TIM_OC1_SetConfig+0x110>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x7c>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8009e70 <TIM_OC1_SetConfig+0x114>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x7c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a2a      	ldr	r2, [pc, #168]	@ (8009e74 <TIM_OC1_SetConfig+0x118>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_OC1_SetConfig+0x7c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a29      	ldr	r2, [pc, #164]	@ (8009e78 <TIM_OC1_SetConfig+0x11c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d10c      	bne.n	8009df2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f023 0308 	bic.w	r3, r3, #8
 8009dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f023 0304 	bic.w	r3, r3, #4
 8009df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e68 <TIM_OC1_SetConfig+0x10c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00f      	beq.n	8009e1a <TIM_OC1_SetConfig+0xbe>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8009e6c <TIM_OC1_SetConfig+0x110>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00b      	beq.n	8009e1a <TIM_OC1_SetConfig+0xbe>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1a      	ldr	r2, [pc, #104]	@ (8009e70 <TIM_OC1_SetConfig+0x114>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d007      	beq.n	8009e1a <TIM_OC1_SetConfig+0xbe>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a19      	ldr	r2, [pc, #100]	@ (8009e74 <TIM_OC1_SetConfig+0x118>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d003      	beq.n	8009e1a <TIM_OC1_SetConfig+0xbe>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a18      	ldr	r2, [pc, #96]	@ (8009e78 <TIM_OC1_SetConfig+0x11c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d111      	bne.n	8009e3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	621a      	str	r2, [r3, #32]
}
 8009e58:	bf00      	nop
 8009e5a:	371c      	adds	r7, #28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	fffeff8f 	.word	0xfffeff8f
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40010400 	.word	0x40010400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800

08009e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	f023 0210 	bic.w	r2, r3, #16
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4b34      	ldr	r3, [pc, #208]	@ (8009f78 <TIM_OC2_SetConfig+0xfc>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	021b      	lsls	r3, r3, #8
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0320 	bic.w	r3, r3, #32
 8009ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a29      	ldr	r2, [pc, #164]	@ (8009f7c <TIM_OC2_SetConfig+0x100>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d003      	beq.n	8009ee4 <TIM_OC2_SetConfig+0x68>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a28      	ldr	r2, [pc, #160]	@ (8009f80 <TIM_OC2_SetConfig+0x104>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d10d      	bne.n	8009f00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	011b      	lsls	r3, r3, #4
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009efe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a1e      	ldr	r2, [pc, #120]	@ (8009f7c <TIM_OC2_SetConfig+0x100>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00f      	beq.n	8009f28 <TIM_OC2_SetConfig+0xac>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <TIM_OC2_SetConfig+0x104>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00b      	beq.n	8009f28 <TIM_OC2_SetConfig+0xac>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a1c      	ldr	r2, [pc, #112]	@ (8009f84 <TIM_OC2_SetConfig+0x108>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <TIM_OC2_SetConfig+0xac>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f88 <TIM_OC2_SetConfig+0x10c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_OC2_SetConfig+0xac>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a1a      	ldr	r2, [pc, #104]	@ (8009f8c <TIM_OC2_SetConfig+0x110>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d113      	bne.n	8009f50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	feff8fff 	.word	0xfeff8fff
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	40010400 	.word	0x40010400
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40014400 	.word	0x40014400
 8009f8c:	40014800 	.word	0x40014800

08009f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4b33      	ldr	r3, [pc, #204]	@ (800a088 <TIM_OC3_SetConfig+0xf8>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a28      	ldr	r2, [pc, #160]	@ (800a08c <TIM_OC3_SetConfig+0xfc>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d003      	beq.n	8009ff6 <TIM_OC3_SetConfig+0x66>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a27      	ldr	r2, [pc, #156]	@ (800a090 <TIM_OC3_SetConfig+0x100>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d10d      	bne.n	800a012 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4313      	orrs	r3, r2
 800a008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <TIM_OC3_SetConfig+0xfc>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00f      	beq.n	800a03a <TIM_OC3_SetConfig+0xaa>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a1c      	ldr	r2, [pc, #112]	@ (800a090 <TIM_OC3_SetConfig+0x100>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00b      	beq.n	800a03a <TIM_OC3_SetConfig+0xaa>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a1b      	ldr	r2, [pc, #108]	@ (800a094 <TIM_OC3_SetConfig+0x104>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d007      	beq.n	800a03a <TIM_OC3_SetConfig+0xaa>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a1a      	ldr	r2, [pc, #104]	@ (800a098 <TIM_OC3_SetConfig+0x108>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d003      	beq.n	800a03a <TIM_OC3_SetConfig+0xaa>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a19      	ldr	r2, [pc, #100]	@ (800a09c <TIM_OC3_SetConfig+0x10c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d113      	bne.n	800a062 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4313      	orrs	r3, r2
 800a054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	621a      	str	r2, [r3, #32]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	fffeff8f 	.word	0xfffeff8f
 800a08c:	40010000 	.word	0x40010000
 800a090:	40010400 	.word	0x40010400
 800a094:	40014000 	.word	0x40014000
 800a098:	40014400 	.word	0x40014400
 800a09c:	40014800 	.word	0x40014800

0800a0a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4b24      	ldr	r3, [pc, #144]	@ (800a15c <TIM_OC4_SetConfig+0xbc>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	031b      	lsls	r3, r3, #12
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a19      	ldr	r2, [pc, #100]	@ (800a160 <TIM_OC4_SetConfig+0xc0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00f      	beq.n	800a120 <TIM_OC4_SetConfig+0x80>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a18      	ldr	r2, [pc, #96]	@ (800a164 <TIM_OC4_SetConfig+0xc4>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00b      	beq.n	800a120 <TIM_OC4_SetConfig+0x80>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a17      	ldr	r2, [pc, #92]	@ (800a168 <TIM_OC4_SetConfig+0xc8>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d007      	beq.n	800a120 <TIM_OC4_SetConfig+0x80>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a16      	ldr	r2, [pc, #88]	@ (800a16c <TIM_OC4_SetConfig+0xcc>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC4_SetConfig+0x80>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a15      	ldr	r2, [pc, #84]	@ (800a170 <TIM_OC4_SetConfig+0xd0>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d109      	bne.n	800a134 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	019b      	lsls	r3, r3, #6
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	621a      	str	r2, [r3, #32]
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	feff8fff 	.word	0xfeff8fff
 800a160:	40010000 	.word	0x40010000
 800a164:	40010400 	.word	0x40010400
 800a168:	40014000 	.word	0x40014000
 800a16c:	40014400 	.word	0x40014400
 800a170:	40014800 	.word	0x40014800

0800a174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	4b21      	ldr	r3, [pc, #132]	@ (800a224 <TIM_OC5_SetConfig+0xb0>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a1b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	041b      	lsls	r3, r3, #16
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a18      	ldr	r2, [pc, #96]	@ (800a228 <TIM_OC5_SetConfig+0xb4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00f      	beq.n	800a1ea <TIM_OC5_SetConfig+0x76>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <TIM_OC5_SetConfig+0xb8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00b      	beq.n	800a1ea <TIM_OC5_SetConfig+0x76>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a16      	ldr	r2, [pc, #88]	@ (800a230 <TIM_OC5_SetConfig+0xbc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d007      	beq.n	800a1ea <TIM_OC5_SetConfig+0x76>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <TIM_OC5_SetConfig+0xc0>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d003      	beq.n	800a1ea <TIM_OC5_SetConfig+0x76>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a14      	ldr	r2, [pc, #80]	@ (800a238 <TIM_OC5_SetConfig+0xc4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d109      	bne.n	800a1fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	021b      	lsls	r3, r3, #8
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	621a      	str	r2, [r3, #32]
}
 800a218:	bf00      	nop
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	fffeff8f 	.word	0xfffeff8f
 800a228:	40010000 	.word	0x40010000
 800a22c:	40010400 	.word	0x40010400
 800a230:	40014000 	.word	0x40014000
 800a234:	40014400 	.word	0x40014400
 800a238:	40014800 	.word	0x40014800

0800a23c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
 800a250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	4b22      	ldr	r3, [pc, #136]	@ (800a2f0 <TIM_OC6_SetConfig+0xb4>)
 800a268:	4013      	ands	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a27e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	051b      	lsls	r3, r3, #20
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a19      	ldr	r2, [pc, #100]	@ (800a2f4 <TIM_OC6_SetConfig+0xb8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00f      	beq.n	800a2b4 <TIM_OC6_SetConfig+0x78>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a18      	ldr	r2, [pc, #96]	@ (800a2f8 <TIM_OC6_SetConfig+0xbc>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00b      	beq.n	800a2b4 <TIM_OC6_SetConfig+0x78>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a17      	ldr	r2, [pc, #92]	@ (800a2fc <TIM_OC6_SetConfig+0xc0>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d007      	beq.n	800a2b4 <TIM_OC6_SetConfig+0x78>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a16      	ldr	r2, [pc, #88]	@ (800a300 <TIM_OC6_SetConfig+0xc4>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC6_SetConfig+0x78>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a15      	ldr	r2, [pc, #84]	@ (800a304 <TIM_OC6_SetConfig+0xc8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d109      	bne.n	800a2c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	029b      	lsls	r3, r3, #10
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	feff8fff 	.word	0xfeff8fff
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40010400 	.word	0x40010400
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40014400 	.word	0x40014400
 800a304:	40014800 	.word	0x40014800

0800a308 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <HAL_TIMEx_PWMN_Start+0x24>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b01      	cmp	r3, #1
 800a322:	bf14      	ite	ne
 800a324:	2301      	movne	r3, #1
 800a326:	2300      	moveq	r3, #0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	e022      	b.n	800a372 <HAL_TIMEx_PWMN_Start+0x6a>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d109      	bne.n	800a346 <HAL_TIMEx_PWMN_Start+0x3e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	bf14      	ite	ne
 800a33e:	2301      	movne	r3, #1
 800a340:	2300      	moveq	r3, #0
 800a342:	b2db      	uxtb	r3, r3
 800a344:	e015      	b.n	800a372 <HAL_TIMEx_PWMN_Start+0x6a>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d109      	bne.n	800a360 <HAL_TIMEx_PWMN_Start+0x58>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b01      	cmp	r3, #1
 800a356:	bf14      	ite	ne
 800a358:	2301      	movne	r3, #1
 800a35a:	2300      	moveq	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	e008      	b.n	800a372 <HAL_TIMEx_PWMN_Start+0x6a>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800a366:	b2db      	uxtb	r3, r3
 800a368:	2b01      	cmp	r3, #1
 800a36a:	bf14      	ite	ne
 800a36c:	2301      	movne	r3, #1
 800a36e:	2300      	moveq	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e073      	b.n	800a462 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d104      	bne.n	800a38a <HAL_TIMEx_PWMN_Start+0x82>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a388:	e013      	b.n	800a3b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d104      	bne.n	800a39a <HAL_TIMEx_PWMN_Start+0x92>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a398:	e00b      	b.n	800a3b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b08      	cmp	r3, #8
 800a39e:	d104      	bne.n	800a3aa <HAL_TIMEx_PWMN_Start+0xa2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3a8:	e003      	b.n	800a3b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2204      	movs	r2, #4
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f972 	bl	800a6a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a25      	ldr	r2, [pc, #148]	@ (800a46c <HAL_TIMEx_PWMN_Start+0x164>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d022      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3e2:	d01d      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a21      	ldr	r2, [pc, #132]	@ (800a470 <HAL_TIMEx_PWMN_Start+0x168>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d018      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a20      	ldr	r2, [pc, #128]	@ (800a474 <HAL_TIMEx_PWMN_Start+0x16c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d013      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a1e      	ldr	r2, [pc, #120]	@ (800a478 <HAL_TIMEx_PWMN_Start+0x170>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d00e      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a1d      	ldr	r2, [pc, #116]	@ (800a47c <HAL_TIMEx_PWMN_Start+0x174>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d009      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a1b      	ldr	r2, [pc, #108]	@ (800a480 <HAL_TIMEx_PWMN_Start+0x178>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d004      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0x118>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a1a      	ldr	r2, [pc, #104]	@ (800a484 <HAL_TIMEx_PWMN_Start+0x17c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d115      	bne.n	800a44c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	4b18      	ldr	r3, [pc, #96]	@ (800a488 <HAL_TIMEx_PWMN_Start+0x180>)
 800a428:	4013      	ands	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b06      	cmp	r3, #6
 800a430:	d015      	beq.n	800a45e <HAL_TIMEx_PWMN_Start+0x156>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a438:	d011      	beq.n	800a45e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0201 	orr.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a44a:	e008      	b.n	800a45e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0201 	orr.w	r2, r2, #1
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	e000      	b.n	800a460 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	40010000 	.word	0x40010000
 800a470:	40000400 	.word	0x40000400
 800a474:	40000800 	.word	0x40000800
 800a478:	40000c00 	.word	0x40000c00
 800a47c:	40010400 	.word	0x40010400
 800a480:	40001800 	.word	0x40001800
 800a484:	40014000 	.word	0x40014000
 800a488:	00010007 	.word	0x00010007

0800a48c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e06d      	b.n	800a580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a30      	ldr	r2, [pc, #192]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d004      	beq.n	800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a2f      	ldr	r2, [pc, #188]	@ (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d108      	bne.n	800a4ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a20      	ldr	r2, [pc, #128]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d022      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a516:	d01d      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a1d      	ldr	r2, [pc, #116]	@ (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d018      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a1c      	ldr	r2, [pc, #112]	@ (800a598 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d013      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1a      	ldr	r2, [pc, #104]	@ (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d00e      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a15      	ldr	r2, [pc, #84]	@ (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d009      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a16      	ldr	r2, [pc, #88]	@ (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d004      	beq.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a15      	ldr	r2, [pc, #84]	@ (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d10c      	bne.n	800a56e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a55a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	4313      	orrs	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	40010000 	.word	0x40010000
 800a590:	40010400 	.word	0x40010400
 800a594:	40000400 	.word	0x40000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	40000c00 	.word	0x40000c00
 800a5a0:	40001800 	.word	0x40001800
 800a5a4:	40014000 	.word	0x40014000

0800a5a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d101      	bne.n	800a5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e065      	b.n	800a690 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4313      	orrs	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	4313      	orrs	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	695b      	ldr	r3, [r3, #20]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a16      	ldr	r2, [pc, #88]	@ (800a69c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d004      	beq.n	800a652 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a14      	ldr	r2, [pc, #80]	@ (800a6a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d115      	bne.n	800a67e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	051b      	lsls	r3, r3, #20
 800a65e:	4313      	orrs	r3, r2
 800a660:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40010400 	.word	0x40010400

0800a6a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6a1a      	ldr	r2, [r3, #32]
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	43db      	mvns	r3, r3
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a1a      	ldr	r2, [r3, #32]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	621a      	str	r2, [r3, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <siprintf>:
 800a6f0:	b40e      	push	{r1, r2, r3}
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	b09d      	sub	sp, #116	@ 0x74
 800a6f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a6f8:	9002      	str	r0, [sp, #8]
 800a6fa:	9006      	str	r0, [sp, #24]
 800a6fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a700:	480a      	ldr	r0, [pc, #40]	@ (800a72c <siprintf+0x3c>)
 800a702:	9107      	str	r1, [sp, #28]
 800a704:	9104      	str	r1, [sp, #16]
 800a706:	490a      	ldr	r1, [pc, #40]	@ (800a730 <siprintf+0x40>)
 800a708:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70c:	9105      	str	r1, [sp, #20]
 800a70e:	2400      	movs	r4, #0
 800a710:	a902      	add	r1, sp, #8
 800a712:	6800      	ldr	r0, [r0, #0]
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a718:	f000 f994 	bl	800aa44 <_svfiprintf_r>
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	701c      	strb	r4, [r3, #0]
 800a720:	b01d      	add	sp, #116	@ 0x74
 800a722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a726:	b003      	add	sp, #12
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	240000a0 	.word	0x240000a0
 800a730:	ffff0208 	.word	0xffff0208

0800a734 <memset>:
 800a734:	4402      	add	r2, r0
 800a736:	4603      	mov	r3, r0
 800a738:	4293      	cmp	r3, r2
 800a73a:	d100      	bne.n	800a73e <memset+0xa>
 800a73c:	4770      	bx	lr
 800a73e:	f803 1b01 	strb.w	r1, [r3], #1
 800a742:	e7f9      	b.n	800a738 <memset+0x4>

0800a744 <__errno>:
 800a744:	4b01      	ldr	r3, [pc, #4]	@ (800a74c <__errno+0x8>)
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	240000a0 	.word	0x240000a0

0800a750 <__libc_init_array>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	4d0d      	ldr	r5, [pc, #52]	@ (800a788 <__libc_init_array+0x38>)
 800a754:	4c0d      	ldr	r4, [pc, #52]	@ (800a78c <__libc_init_array+0x3c>)
 800a756:	1b64      	subs	r4, r4, r5
 800a758:	10a4      	asrs	r4, r4, #2
 800a75a:	2600      	movs	r6, #0
 800a75c:	42a6      	cmp	r6, r4
 800a75e:	d109      	bne.n	800a774 <__libc_init_array+0x24>
 800a760:	4d0b      	ldr	r5, [pc, #44]	@ (800a790 <__libc_init_array+0x40>)
 800a762:	4c0c      	ldr	r4, [pc, #48]	@ (800a794 <__libc_init_array+0x44>)
 800a764:	f000 fc64 	bl	800b030 <_init>
 800a768:	1b64      	subs	r4, r4, r5
 800a76a:	10a4      	asrs	r4, r4, #2
 800a76c:	2600      	movs	r6, #0
 800a76e:	42a6      	cmp	r6, r4
 800a770:	d105      	bne.n	800a77e <__libc_init_array+0x2e>
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	f855 3b04 	ldr.w	r3, [r5], #4
 800a778:	4798      	blx	r3
 800a77a:	3601      	adds	r6, #1
 800a77c:	e7ee      	b.n	800a75c <__libc_init_array+0xc>
 800a77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a782:	4798      	blx	r3
 800a784:	3601      	adds	r6, #1
 800a786:	e7f2      	b.n	800a76e <__libc_init_array+0x1e>
 800a788:	08011f68 	.word	0x08011f68
 800a78c:	08011f68 	.word	0x08011f68
 800a790:	08011f68 	.word	0x08011f68
 800a794:	08011f6c 	.word	0x08011f6c

0800a798 <__retarget_lock_acquire_recursive>:
 800a798:	4770      	bx	lr

0800a79a <__retarget_lock_release_recursive>:
 800a79a:	4770      	bx	lr

0800a79c <_free_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4605      	mov	r5, r0
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	d041      	beq.n	800a828 <_free_r+0x8c>
 800a7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a8:	1f0c      	subs	r4, r1, #4
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	bfb8      	it	lt
 800a7ae:	18e4      	addlt	r4, r4, r3
 800a7b0:	f000 f8e0 	bl	800a974 <__malloc_lock>
 800a7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a82c <_free_r+0x90>)
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	b933      	cbnz	r3, 800a7c8 <_free_r+0x2c>
 800a7ba:	6063      	str	r3, [r4, #4]
 800a7bc:	6014      	str	r4, [r2, #0]
 800a7be:	4628      	mov	r0, r5
 800a7c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c4:	f000 b8dc 	b.w	800a980 <__malloc_unlock>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d908      	bls.n	800a7de <_free_r+0x42>
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	1821      	adds	r1, r4, r0
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	bf01      	itttt	eq
 800a7d4:	6819      	ldreq	r1, [r3, #0]
 800a7d6:	685b      	ldreq	r3, [r3, #4]
 800a7d8:	1809      	addeq	r1, r1, r0
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	e7ed      	b.n	800a7ba <_free_r+0x1e>
 800a7de:	461a      	mov	r2, r3
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b10b      	cbz	r3, 800a7e8 <_free_r+0x4c>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d9fa      	bls.n	800a7de <_free_r+0x42>
 800a7e8:	6811      	ldr	r1, [r2, #0]
 800a7ea:	1850      	adds	r0, r2, r1
 800a7ec:	42a0      	cmp	r0, r4
 800a7ee:	d10b      	bne.n	800a808 <_free_r+0x6c>
 800a7f0:	6820      	ldr	r0, [r4, #0]
 800a7f2:	4401      	add	r1, r0
 800a7f4:	1850      	adds	r0, r2, r1
 800a7f6:	4283      	cmp	r3, r0
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	d1e0      	bne.n	800a7be <_free_r+0x22>
 800a7fc:	6818      	ldr	r0, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	6053      	str	r3, [r2, #4]
 800a802:	4408      	add	r0, r1
 800a804:	6010      	str	r0, [r2, #0]
 800a806:	e7da      	b.n	800a7be <_free_r+0x22>
 800a808:	d902      	bls.n	800a810 <_free_r+0x74>
 800a80a:	230c      	movs	r3, #12
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	e7d6      	b.n	800a7be <_free_r+0x22>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	1821      	adds	r1, r4, r0
 800a814:	428b      	cmp	r3, r1
 800a816:	bf04      	itt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	bf04      	itt	eq
 800a820:	1809      	addeq	r1, r1, r0
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	6054      	str	r4, [r2, #4]
 800a826:	e7ca      	b.n	800a7be <_free_r+0x22>
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	bf00      	nop
 800a82c:	24000908 	.word	0x24000908

0800a830 <sbrk_aligned>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4e0f      	ldr	r6, [pc, #60]	@ (800a870 <sbrk_aligned+0x40>)
 800a834:	460c      	mov	r4, r1
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	4605      	mov	r5, r0
 800a83a:	b911      	cbnz	r1, 800a842 <sbrk_aligned+0x12>
 800a83c:	f000 fba4 	bl	800af88 <_sbrk_r>
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fb9f 	bl	800af88 <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d103      	bne.n	800a856 <sbrk_aligned+0x26>
 800a84e:	f04f 34ff 	mov.w	r4, #4294967295
 800a852:	4620      	mov	r0, r4
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	1cc4      	adds	r4, r0, #3
 800a858:	f024 0403 	bic.w	r4, r4, #3
 800a85c:	42a0      	cmp	r0, r4
 800a85e:	d0f8      	beq.n	800a852 <sbrk_aligned+0x22>
 800a860:	1a21      	subs	r1, r4, r0
 800a862:	4628      	mov	r0, r5
 800a864:	f000 fb90 	bl	800af88 <_sbrk_r>
 800a868:	3001      	adds	r0, #1
 800a86a:	d1f2      	bne.n	800a852 <sbrk_aligned+0x22>
 800a86c:	e7ef      	b.n	800a84e <sbrk_aligned+0x1e>
 800a86e:	bf00      	nop
 800a870:	24000904 	.word	0x24000904

0800a874 <_malloc_r>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	1ccd      	adds	r5, r1, #3
 800a87a:	f025 0503 	bic.w	r5, r5, #3
 800a87e:	3508      	adds	r5, #8
 800a880:	2d0c      	cmp	r5, #12
 800a882:	bf38      	it	cc
 800a884:	250c      	movcc	r5, #12
 800a886:	2d00      	cmp	r5, #0
 800a888:	4606      	mov	r6, r0
 800a88a:	db01      	blt.n	800a890 <_malloc_r+0x1c>
 800a88c:	42a9      	cmp	r1, r5
 800a88e:	d904      	bls.n	800a89a <_malloc_r+0x26>
 800a890:	230c      	movs	r3, #12
 800a892:	6033      	str	r3, [r6, #0]
 800a894:	2000      	movs	r0, #0
 800a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a970 <_malloc_r+0xfc>
 800a89e:	f000 f869 	bl	800a974 <__malloc_lock>
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	bb44      	cbnz	r4, 800a8fc <_malloc_r+0x88>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ffbf 	bl	800a830 <sbrk_aligned>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	d158      	bne.n	800a96a <_malloc_r+0xf6>
 800a8b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8bc:	4627      	mov	r7, r4
 800a8be:	2f00      	cmp	r7, #0
 800a8c0:	d143      	bne.n	800a94a <_malloc_r+0xd6>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d04b      	beq.n	800a95e <_malloc_r+0xea>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	eb04 0903 	add.w	r9, r4, r3
 800a8d0:	f000 fb5a 	bl	800af88 <_sbrk_r>
 800a8d4:	4581      	cmp	r9, r0
 800a8d6:	d142      	bne.n	800a95e <_malloc_r+0xea>
 800a8d8:	6821      	ldr	r1, [r4, #0]
 800a8da:	1a6d      	subs	r5, r5, r1
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ffa6 	bl	800a830 <sbrk_aligned>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d03a      	beq.n	800a95e <_malloc_r+0xea>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	442b      	add	r3, r5
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	bb62      	cbnz	r2, 800a950 <_malloc_r+0xdc>
 800a8f6:	f8c8 7000 	str.w	r7, [r8]
 800a8fa:	e00f      	b.n	800a91c <_malloc_r+0xa8>
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	1b52      	subs	r2, r2, r5
 800a900:	d420      	bmi.n	800a944 <_malloc_r+0xd0>
 800a902:	2a0b      	cmp	r2, #11
 800a904:	d917      	bls.n	800a936 <_malloc_r+0xc2>
 800a906:	1961      	adds	r1, r4, r5
 800a908:	42a3      	cmp	r3, r4
 800a90a:	6025      	str	r5, [r4, #0]
 800a90c:	bf18      	it	ne
 800a90e:	6059      	strne	r1, [r3, #4]
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	bf08      	it	eq
 800a914:	f8c8 1000 	streq.w	r1, [r8]
 800a918:	5162      	str	r2, [r4, r5]
 800a91a:	604b      	str	r3, [r1, #4]
 800a91c:	4630      	mov	r0, r6
 800a91e:	f000 f82f 	bl	800a980 <__malloc_unlock>
 800a922:	f104 000b 	add.w	r0, r4, #11
 800a926:	1d23      	adds	r3, r4, #4
 800a928:	f020 0007 	bic.w	r0, r0, #7
 800a92c:	1ac2      	subs	r2, r0, r3
 800a92e:	bf1c      	itt	ne
 800a930:	1a1b      	subne	r3, r3, r0
 800a932:	50a3      	strne	r3, [r4, r2]
 800a934:	e7af      	b.n	800a896 <_malloc_r+0x22>
 800a936:	6862      	ldr	r2, [r4, #4]
 800a938:	42a3      	cmp	r3, r4
 800a93a:	bf0c      	ite	eq
 800a93c:	f8c8 2000 	streq.w	r2, [r8]
 800a940:	605a      	strne	r2, [r3, #4]
 800a942:	e7eb      	b.n	800a91c <_malloc_r+0xa8>
 800a944:	4623      	mov	r3, r4
 800a946:	6864      	ldr	r4, [r4, #4]
 800a948:	e7ae      	b.n	800a8a8 <_malloc_r+0x34>
 800a94a:	463c      	mov	r4, r7
 800a94c:	687f      	ldr	r7, [r7, #4]
 800a94e:	e7b6      	b.n	800a8be <_malloc_r+0x4a>
 800a950:	461a      	mov	r2, r3
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	42a3      	cmp	r3, r4
 800a956:	d1fb      	bne.n	800a950 <_malloc_r+0xdc>
 800a958:	2300      	movs	r3, #0
 800a95a:	6053      	str	r3, [r2, #4]
 800a95c:	e7de      	b.n	800a91c <_malloc_r+0xa8>
 800a95e:	230c      	movs	r3, #12
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	4630      	mov	r0, r6
 800a964:	f000 f80c 	bl	800a980 <__malloc_unlock>
 800a968:	e794      	b.n	800a894 <_malloc_r+0x20>
 800a96a:	6005      	str	r5, [r0, #0]
 800a96c:	e7d6      	b.n	800a91c <_malloc_r+0xa8>
 800a96e:	bf00      	nop
 800a970:	24000908 	.word	0x24000908

0800a974 <__malloc_lock>:
 800a974:	4801      	ldr	r0, [pc, #4]	@ (800a97c <__malloc_lock+0x8>)
 800a976:	f7ff bf0f 	b.w	800a798 <__retarget_lock_acquire_recursive>
 800a97a:	bf00      	nop
 800a97c:	24000900 	.word	0x24000900

0800a980 <__malloc_unlock>:
 800a980:	4801      	ldr	r0, [pc, #4]	@ (800a988 <__malloc_unlock+0x8>)
 800a982:	f7ff bf0a 	b.w	800a79a <__retarget_lock_release_recursive>
 800a986:	bf00      	nop
 800a988:	24000900 	.word	0x24000900

0800a98c <__ssputs_r>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	688e      	ldr	r6, [r1, #8]
 800a992:	461f      	mov	r7, r3
 800a994:	42be      	cmp	r6, r7
 800a996:	680b      	ldr	r3, [r1, #0]
 800a998:	4682      	mov	sl, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4690      	mov	r8, r2
 800a99e:	d82d      	bhi.n	800a9fc <__ssputs_r+0x70>
 800a9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9a8:	d026      	beq.n	800a9f8 <__ssputs_r+0x6c>
 800a9aa:	6965      	ldr	r5, [r4, #20]
 800a9ac:	6909      	ldr	r1, [r1, #16]
 800a9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b2:	eba3 0901 	sub.w	r9, r3, r1
 800a9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ba:	1c7b      	adds	r3, r7, #1
 800a9bc:	444b      	add	r3, r9
 800a9be:	106d      	asrs	r5, r5, #1
 800a9c0:	429d      	cmp	r5, r3
 800a9c2:	bf38      	it	cc
 800a9c4:	461d      	movcc	r5, r3
 800a9c6:	0553      	lsls	r3, r2, #21
 800a9c8:	d527      	bpl.n	800aa1a <__ssputs_r+0x8e>
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7ff ff52 	bl	800a874 <_malloc_r>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	b360      	cbz	r0, 800aa2e <__ssputs_r+0xa2>
 800a9d4:	6921      	ldr	r1, [r4, #16]
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	f000 fae6 	bl	800afa8 <memcpy>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	6126      	str	r6, [r4, #16]
 800a9ea:	6165      	str	r5, [r4, #20]
 800a9ec:	444e      	add	r6, r9
 800a9ee:	eba5 0509 	sub.w	r5, r5, r9
 800a9f2:	6026      	str	r6, [r4, #0]
 800a9f4:	60a5      	str	r5, [r4, #8]
 800a9f6:	463e      	mov	r6, r7
 800a9f8:	42be      	cmp	r6, r7
 800a9fa:	d900      	bls.n	800a9fe <__ssputs_r+0x72>
 800a9fc:	463e      	mov	r6, r7
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	4632      	mov	r2, r6
 800aa02:	4641      	mov	r1, r8
 800aa04:	f000 faa6 	bl	800af54 <memmove>
 800aa08:	68a3      	ldr	r3, [r4, #8]
 800aa0a:	1b9b      	subs	r3, r3, r6
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4433      	add	r3, r6
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	2000      	movs	r0, #0
 800aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	f000 fad2 	bl	800afc4 <_realloc_r>
 800aa20:	4606      	mov	r6, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d1e0      	bne.n	800a9e8 <__ssputs_r+0x5c>
 800aa26:	6921      	ldr	r1, [r4, #16]
 800aa28:	4650      	mov	r0, sl
 800aa2a:	f7ff feb7 	bl	800a79c <_free_r>
 800aa2e:	230c      	movs	r3, #12
 800aa30:	f8ca 3000 	str.w	r3, [sl]
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	e7e9      	b.n	800aa16 <__ssputs_r+0x8a>
	...

0800aa44 <_svfiprintf_r>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4698      	mov	r8, r3
 800aa4a:	898b      	ldrh	r3, [r1, #12]
 800aa4c:	061b      	lsls	r3, r3, #24
 800aa4e:	b09d      	sub	sp, #116	@ 0x74
 800aa50:	4607      	mov	r7, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	4614      	mov	r4, r2
 800aa56:	d510      	bpl.n	800aa7a <_svfiprintf_r+0x36>
 800aa58:	690b      	ldr	r3, [r1, #16]
 800aa5a:	b973      	cbnz	r3, 800aa7a <_svfiprintf_r+0x36>
 800aa5c:	2140      	movs	r1, #64	@ 0x40
 800aa5e:	f7ff ff09 	bl	800a874 <_malloc_r>
 800aa62:	6028      	str	r0, [r5, #0]
 800aa64:	6128      	str	r0, [r5, #16]
 800aa66:	b930      	cbnz	r0, 800aa76 <_svfiprintf_r+0x32>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	b01d      	add	sp, #116	@ 0x74
 800aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa76:	2340      	movs	r3, #64	@ 0x40
 800aa78:	616b      	str	r3, [r5, #20]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7e:	2320      	movs	r3, #32
 800aa80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa84:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa88:	2330      	movs	r3, #48	@ 0x30
 800aa8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac28 <_svfiprintf_r+0x1e4>
 800aa8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa92:	f04f 0901 	mov.w	r9, #1
 800aa96:	4623      	mov	r3, r4
 800aa98:	469a      	mov	sl, r3
 800aa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9e:	b10a      	cbz	r2, 800aaa4 <_svfiprintf_r+0x60>
 800aaa0:	2a25      	cmp	r2, #37	@ 0x25
 800aaa2:	d1f9      	bne.n	800aa98 <_svfiprintf_r+0x54>
 800aaa4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa8:	d00b      	beq.n	800aac2 <_svfiprintf_r+0x7e>
 800aaaa:	465b      	mov	r3, fp
 800aaac:	4622      	mov	r2, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ff6b 	bl	800a98c <__ssputs_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	f000 80a7 	beq.w	800ac0a <_svfiprintf_r+0x1c6>
 800aabc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aabe:	445a      	add	r2, fp
 800aac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aac2:	f89a 3000 	ldrb.w	r3, [sl]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 809f 	beq.w	800ac0a <_svfiprintf_r+0x1c6>
 800aacc:	2300      	movs	r3, #0
 800aace:	f04f 32ff 	mov.w	r2, #4294967295
 800aad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad6:	f10a 0a01 	add.w	sl, sl, #1
 800aada:	9304      	str	r3, [sp, #16]
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aae4:	4654      	mov	r4, sl
 800aae6:	2205      	movs	r2, #5
 800aae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaec:	484e      	ldr	r0, [pc, #312]	@ (800ac28 <_svfiprintf_r+0x1e4>)
 800aaee:	f7f5 fbf7 	bl	80002e0 <memchr>
 800aaf2:	9a04      	ldr	r2, [sp, #16]
 800aaf4:	b9d8      	cbnz	r0, 800ab2e <_svfiprintf_r+0xea>
 800aaf6:	06d0      	lsls	r0, r2, #27
 800aaf8:	bf44      	itt	mi
 800aafa:	2320      	movmi	r3, #32
 800aafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab00:	0711      	lsls	r1, r2, #28
 800ab02:	bf44      	itt	mi
 800ab04:	232b      	movmi	r3, #43	@ 0x2b
 800ab06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab10:	d015      	beq.n	800ab3e <_svfiprintf_r+0xfa>
 800ab12:	9a07      	ldr	r2, [sp, #28]
 800ab14:	4654      	mov	r4, sl
 800ab16:	2000      	movs	r0, #0
 800ab18:	f04f 0c0a 	mov.w	ip, #10
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab22:	3b30      	subs	r3, #48	@ 0x30
 800ab24:	2b09      	cmp	r3, #9
 800ab26:	d94b      	bls.n	800abc0 <_svfiprintf_r+0x17c>
 800ab28:	b1b0      	cbz	r0, 800ab58 <_svfiprintf_r+0x114>
 800ab2a:	9207      	str	r2, [sp, #28]
 800ab2c:	e014      	b.n	800ab58 <_svfiprintf_r+0x114>
 800ab2e:	eba0 0308 	sub.w	r3, r0, r8
 800ab32:	fa09 f303 	lsl.w	r3, r9, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	46a2      	mov	sl, r4
 800ab3c:	e7d2      	b.n	800aae4 <_svfiprintf_r+0xa0>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	9103      	str	r1, [sp, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfbb      	ittet	lt
 800ab4a:	425b      	neglt	r3, r3
 800ab4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab50:	9307      	strge	r3, [sp, #28]
 800ab52:	9307      	strlt	r3, [sp, #28]
 800ab54:	bfb8      	it	lt
 800ab56:	9204      	strlt	r2, [sp, #16]
 800ab58:	7823      	ldrb	r3, [r4, #0]
 800ab5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab5c:	d10a      	bne.n	800ab74 <_svfiprintf_r+0x130>
 800ab5e:	7863      	ldrb	r3, [r4, #1]
 800ab60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab62:	d132      	bne.n	800abca <_svfiprintf_r+0x186>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	1d1a      	adds	r2, r3, #4
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	9203      	str	r2, [sp, #12]
 800ab6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab70:	3402      	adds	r4, #2
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac38 <_svfiprintf_r+0x1f4>
 800ab78:	7821      	ldrb	r1, [r4, #0]
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	f7f5 fbaf 	bl	80002e0 <memchr>
 800ab82:	b138      	cbz	r0, 800ab94 <_svfiprintf_r+0x150>
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	eba0 000a 	sub.w	r0, r0, sl
 800ab8a:	2240      	movs	r2, #64	@ 0x40
 800ab8c:	4082      	lsls	r2, r0
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	3401      	adds	r4, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab98:	4824      	ldr	r0, [pc, #144]	@ (800ac2c <_svfiprintf_r+0x1e8>)
 800ab9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab9e:	2206      	movs	r2, #6
 800aba0:	f7f5 fb9e 	bl	80002e0 <memchr>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d036      	beq.n	800ac16 <_svfiprintf_r+0x1d2>
 800aba8:	4b21      	ldr	r3, [pc, #132]	@ (800ac30 <_svfiprintf_r+0x1ec>)
 800abaa:	bb1b      	cbnz	r3, 800abf4 <_svfiprintf_r+0x1b0>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	3307      	adds	r3, #7
 800abb0:	f023 0307 	bic.w	r3, r3, #7
 800abb4:	3308      	adds	r3, #8
 800abb6:	9303      	str	r3, [sp, #12]
 800abb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abba:	4433      	add	r3, r6
 800abbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abbe:	e76a      	b.n	800aa96 <_svfiprintf_r+0x52>
 800abc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc4:	460c      	mov	r4, r1
 800abc6:	2001      	movs	r0, #1
 800abc8:	e7a8      	b.n	800ab1c <_svfiprintf_r+0xd8>
 800abca:	2300      	movs	r3, #0
 800abcc:	3401      	adds	r4, #1
 800abce:	9305      	str	r3, [sp, #20]
 800abd0:	4619      	mov	r1, r3
 800abd2:	f04f 0c0a 	mov.w	ip, #10
 800abd6:	4620      	mov	r0, r4
 800abd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abdc:	3a30      	subs	r2, #48	@ 0x30
 800abde:	2a09      	cmp	r2, #9
 800abe0:	d903      	bls.n	800abea <_svfiprintf_r+0x1a6>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0c6      	beq.n	800ab74 <_svfiprintf_r+0x130>
 800abe6:	9105      	str	r1, [sp, #20]
 800abe8:	e7c4      	b.n	800ab74 <_svfiprintf_r+0x130>
 800abea:	fb0c 2101 	mla	r1, ip, r1, r2
 800abee:	4604      	mov	r4, r0
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7f0      	b.n	800abd6 <_svfiprintf_r+0x192>
 800abf4:	ab03      	add	r3, sp, #12
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	462a      	mov	r2, r5
 800abfa:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <_svfiprintf_r+0x1f0>)
 800abfc:	a904      	add	r1, sp, #16
 800abfe:	4638      	mov	r0, r7
 800ac00:	f3af 8000 	nop.w
 800ac04:	1c42      	adds	r2, r0, #1
 800ac06:	4606      	mov	r6, r0
 800ac08:	d1d6      	bne.n	800abb8 <_svfiprintf_r+0x174>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	065b      	lsls	r3, r3, #25
 800ac0e:	f53f af2d 	bmi.w	800aa6c <_svfiprintf_r+0x28>
 800ac12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac14:	e72c      	b.n	800aa70 <_svfiprintf_r+0x2c>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4b05      	ldr	r3, [pc, #20]	@ (800ac34 <_svfiprintf_r+0x1f0>)
 800ac1e:	a904      	add	r1, sp, #16
 800ac20:	4638      	mov	r0, r7
 800ac22:	f000 f879 	bl	800ad18 <_printf_i>
 800ac26:	e7ed      	b.n	800ac04 <_svfiprintf_r+0x1c0>
 800ac28:	08011f2d 	.word	0x08011f2d
 800ac2c:	08011f37 	.word	0x08011f37
 800ac30:	00000000 	.word	0x00000000
 800ac34:	0800a98d 	.word	0x0800a98d
 800ac38:	08011f33 	.word	0x08011f33

0800ac3c <_printf_common>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	4616      	mov	r6, r2
 800ac42:	4698      	mov	r8, r3
 800ac44:	688a      	ldr	r2, [r1, #8]
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	bfb8      	it	lt
 800ac50:	4613      	movlt	r3, r2
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac58:	4607      	mov	r7, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b10a      	cbz	r2, 800ac62 <_printf_common+0x26>
 800ac5e:	3301      	adds	r3, #1
 800ac60:	6033      	str	r3, [r6, #0]
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	0699      	lsls	r1, r3, #26
 800ac66:	bf42      	ittt	mi
 800ac68:	6833      	ldrmi	r3, [r6, #0]
 800ac6a:	3302      	addmi	r3, #2
 800ac6c:	6033      	strmi	r3, [r6, #0]
 800ac6e:	6825      	ldr	r5, [r4, #0]
 800ac70:	f015 0506 	ands.w	r5, r5, #6
 800ac74:	d106      	bne.n	800ac84 <_printf_common+0x48>
 800ac76:	f104 0a19 	add.w	sl, r4, #25
 800ac7a:	68e3      	ldr	r3, [r4, #12]
 800ac7c:	6832      	ldr	r2, [r6, #0]
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	dc26      	bgt.n	800acd2 <_printf_common+0x96>
 800ac84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	3b00      	subs	r3, #0
 800ac8c:	bf18      	it	ne
 800ac8e:	2301      	movne	r3, #1
 800ac90:	0692      	lsls	r2, r2, #26
 800ac92:	d42b      	bmi.n	800acec <_printf_common+0xb0>
 800ac94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac98:	4641      	mov	r1, r8
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	47c8      	blx	r9
 800ac9e:	3001      	adds	r0, #1
 800aca0:	d01e      	beq.n	800ace0 <_printf_common+0xa4>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	f003 0306 	and.w	r3, r3, #6
 800acaa:	2b04      	cmp	r3, #4
 800acac:	bf02      	ittt	eq
 800acae:	68e5      	ldreq	r5, [r4, #12]
 800acb0:	6833      	ldreq	r3, [r6, #0]
 800acb2:	1aed      	subeq	r5, r5, r3
 800acb4:	68a3      	ldr	r3, [r4, #8]
 800acb6:	bf0c      	ite	eq
 800acb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acbc:	2500      	movne	r5, #0
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bfc4      	itt	gt
 800acc2:	1a9b      	subgt	r3, r3, r2
 800acc4:	18ed      	addgt	r5, r5, r3
 800acc6:	2600      	movs	r6, #0
 800acc8:	341a      	adds	r4, #26
 800acca:	42b5      	cmp	r5, r6
 800accc:	d11a      	bne.n	800ad04 <_printf_common+0xc8>
 800acce:	2000      	movs	r0, #0
 800acd0:	e008      	b.n	800ace4 <_printf_common+0xa8>
 800acd2:	2301      	movs	r3, #1
 800acd4:	4652      	mov	r2, sl
 800acd6:	4641      	mov	r1, r8
 800acd8:	4638      	mov	r0, r7
 800acda:	47c8      	blx	r9
 800acdc:	3001      	adds	r0, #1
 800acde:	d103      	bne.n	800ace8 <_printf_common+0xac>
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	3501      	adds	r5, #1
 800acea:	e7c6      	b.n	800ac7a <_printf_common+0x3e>
 800acec:	18e1      	adds	r1, r4, r3
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	2030      	movs	r0, #48	@ 0x30
 800acf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acf6:	4422      	add	r2, r4
 800acf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad00:	3302      	adds	r3, #2
 800ad02:	e7c7      	b.n	800ac94 <_printf_common+0x58>
 800ad04:	2301      	movs	r3, #1
 800ad06:	4622      	mov	r2, r4
 800ad08:	4641      	mov	r1, r8
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	47c8      	blx	r9
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d0e6      	beq.n	800ace0 <_printf_common+0xa4>
 800ad12:	3601      	adds	r6, #1
 800ad14:	e7d9      	b.n	800acca <_printf_common+0x8e>
	...

0800ad18 <_printf_i>:
 800ad18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	7e0f      	ldrb	r7, [r1, #24]
 800ad1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad20:	2f78      	cmp	r7, #120	@ 0x78
 800ad22:	4691      	mov	r9, r2
 800ad24:	4680      	mov	r8, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	469a      	mov	sl, r3
 800ad2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad2e:	d807      	bhi.n	800ad40 <_printf_i+0x28>
 800ad30:	2f62      	cmp	r7, #98	@ 0x62
 800ad32:	d80a      	bhi.n	800ad4a <_printf_i+0x32>
 800ad34:	2f00      	cmp	r7, #0
 800ad36:	f000 80d1 	beq.w	800aedc <_printf_i+0x1c4>
 800ad3a:	2f58      	cmp	r7, #88	@ 0x58
 800ad3c:	f000 80b8 	beq.w	800aeb0 <_printf_i+0x198>
 800ad40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad48:	e03a      	b.n	800adc0 <_printf_i+0xa8>
 800ad4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad4e:	2b15      	cmp	r3, #21
 800ad50:	d8f6      	bhi.n	800ad40 <_printf_i+0x28>
 800ad52:	a101      	add	r1, pc, #4	@ (adr r1, 800ad58 <_printf_i+0x40>)
 800ad54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adc5 	.word	0x0800adc5
 800ad60:	0800ad41 	.word	0x0800ad41
 800ad64:	0800ad41 	.word	0x0800ad41
 800ad68:	0800ad41 	.word	0x0800ad41
 800ad6c:	0800ad41 	.word	0x0800ad41
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800ad41 	.word	0x0800ad41
 800ad78:	0800ad41 	.word	0x0800ad41
 800ad7c:	0800ad41 	.word	0x0800ad41
 800ad80:	0800ad41 	.word	0x0800ad41
 800ad84:	0800aec3 	.word	0x0800aec3
 800ad88:	0800adef 	.word	0x0800adef
 800ad8c:	0800ae7d 	.word	0x0800ae7d
 800ad90:	0800ad41 	.word	0x0800ad41
 800ad94:	0800ad41 	.word	0x0800ad41
 800ad98:	0800aee5 	.word	0x0800aee5
 800ad9c:	0800ad41 	.word	0x0800ad41
 800ada0:	0800adef 	.word	0x0800adef
 800ada4:	0800ad41 	.word	0x0800ad41
 800ada8:	0800ad41 	.word	0x0800ad41
 800adac:	0800ae85 	.word	0x0800ae85
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	1d1a      	adds	r2, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6032      	str	r2, [r6, #0]
 800adb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adc0:	2301      	movs	r3, #1
 800adc2:	e09c      	b.n	800aefe <_printf_i+0x1e6>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	1d19      	adds	r1, r3, #4
 800adca:	6031      	str	r1, [r6, #0]
 800adcc:	0606      	lsls	r6, r0, #24
 800adce:	d501      	bpl.n	800add4 <_printf_i+0xbc>
 800add0:	681d      	ldr	r5, [r3, #0]
 800add2:	e003      	b.n	800addc <_printf_i+0xc4>
 800add4:	0645      	lsls	r5, r0, #25
 800add6:	d5fb      	bpl.n	800add0 <_printf_i+0xb8>
 800add8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800addc:	2d00      	cmp	r5, #0
 800adde:	da03      	bge.n	800ade8 <_printf_i+0xd0>
 800ade0:	232d      	movs	r3, #45	@ 0x2d
 800ade2:	426d      	negs	r5, r5
 800ade4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade8:	4858      	ldr	r0, [pc, #352]	@ (800af4c <_printf_i+0x234>)
 800adea:	230a      	movs	r3, #10
 800adec:	e011      	b.n	800ae12 <_printf_i+0xfa>
 800adee:	6821      	ldr	r1, [r4, #0]
 800adf0:	6833      	ldr	r3, [r6, #0]
 800adf2:	0608      	lsls	r0, r1, #24
 800adf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800adf8:	d402      	bmi.n	800ae00 <_printf_i+0xe8>
 800adfa:	0649      	lsls	r1, r1, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2ad      	uxthmi	r5, r5
 800ae00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae02:	4852      	ldr	r0, [pc, #328]	@ (800af4c <_printf_i+0x234>)
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	bf14      	ite	ne
 800ae08:	230a      	movne	r3, #10
 800ae0a:	2308      	moveq	r3, #8
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae12:	6866      	ldr	r6, [r4, #4]
 800ae14:	60a6      	str	r6, [r4, #8]
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	db05      	blt.n	800ae26 <_printf_i+0x10e>
 800ae1a:	6821      	ldr	r1, [r4, #0]
 800ae1c:	432e      	orrs	r6, r5
 800ae1e:	f021 0104 	bic.w	r1, r1, #4
 800ae22:	6021      	str	r1, [r4, #0]
 800ae24:	d04b      	beq.n	800aebe <_printf_i+0x1a6>
 800ae26:	4616      	mov	r6, r2
 800ae28:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae2c:	fb03 5711 	mls	r7, r3, r1, r5
 800ae30:	5dc7      	ldrb	r7, [r0, r7]
 800ae32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae36:	462f      	mov	r7, r5
 800ae38:	42bb      	cmp	r3, r7
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	d9f4      	bls.n	800ae28 <_printf_i+0x110>
 800ae3e:	2b08      	cmp	r3, #8
 800ae40:	d10b      	bne.n	800ae5a <_printf_i+0x142>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	07df      	lsls	r7, r3, #31
 800ae46:	d508      	bpl.n	800ae5a <_printf_i+0x142>
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	6861      	ldr	r1, [r4, #4]
 800ae4c:	4299      	cmp	r1, r3
 800ae4e:	bfde      	ittt	le
 800ae50:	2330      	movle	r3, #48	@ 0x30
 800ae52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae5a:	1b92      	subs	r2, r2, r6
 800ae5c:	6122      	str	r2, [r4, #16]
 800ae5e:	f8cd a000 	str.w	sl, [sp]
 800ae62:	464b      	mov	r3, r9
 800ae64:	aa03      	add	r2, sp, #12
 800ae66:	4621      	mov	r1, r4
 800ae68:	4640      	mov	r0, r8
 800ae6a:	f7ff fee7 	bl	800ac3c <_printf_common>
 800ae6e:	3001      	adds	r0, #1
 800ae70:	d14a      	bne.n	800af08 <_printf_i+0x1f0>
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	b004      	add	sp, #16
 800ae78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	f043 0320 	orr.w	r3, r3, #32
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	4832      	ldr	r0, [pc, #200]	@ (800af50 <_printf_i+0x238>)
 800ae86:	2778      	movs	r7, #120	@ 0x78
 800ae88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	6831      	ldr	r1, [r6, #0]
 800ae90:	061f      	lsls	r7, r3, #24
 800ae92:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae96:	d402      	bmi.n	800ae9e <_printf_i+0x186>
 800ae98:	065f      	lsls	r7, r3, #25
 800ae9a:	bf48      	it	mi
 800ae9c:	b2ad      	uxthmi	r5, r5
 800ae9e:	6031      	str	r1, [r6, #0]
 800aea0:	07d9      	lsls	r1, r3, #31
 800aea2:	bf44      	itt	mi
 800aea4:	f043 0320 	orrmi.w	r3, r3, #32
 800aea8:	6023      	strmi	r3, [r4, #0]
 800aeaa:	b11d      	cbz	r5, 800aeb4 <_printf_i+0x19c>
 800aeac:	2310      	movs	r3, #16
 800aeae:	e7ad      	b.n	800ae0c <_printf_i+0xf4>
 800aeb0:	4826      	ldr	r0, [pc, #152]	@ (800af4c <_printf_i+0x234>)
 800aeb2:	e7e9      	b.n	800ae88 <_printf_i+0x170>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	f023 0320 	bic.w	r3, r3, #32
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	e7f6      	b.n	800aeac <_printf_i+0x194>
 800aebe:	4616      	mov	r6, r2
 800aec0:	e7bd      	b.n	800ae3e <_printf_i+0x126>
 800aec2:	6833      	ldr	r3, [r6, #0]
 800aec4:	6825      	ldr	r5, [r4, #0]
 800aec6:	6961      	ldr	r1, [r4, #20]
 800aec8:	1d18      	adds	r0, r3, #4
 800aeca:	6030      	str	r0, [r6, #0]
 800aecc:	062e      	lsls	r6, r5, #24
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	d501      	bpl.n	800aed6 <_printf_i+0x1be>
 800aed2:	6019      	str	r1, [r3, #0]
 800aed4:	e002      	b.n	800aedc <_printf_i+0x1c4>
 800aed6:	0668      	lsls	r0, r5, #25
 800aed8:	d5fb      	bpl.n	800aed2 <_printf_i+0x1ba>
 800aeda:	8019      	strh	r1, [r3, #0]
 800aedc:	2300      	movs	r3, #0
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	4616      	mov	r6, r2
 800aee2:	e7bc      	b.n	800ae5e <_printf_i+0x146>
 800aee4:	6833      	ldr	r3, [r6, #0]
 800aee6:	1d1a      	adds	r2, r3, #4
 800aee8:	6032      	str	r2, [r6, #0]
 800aeea:	681e      	ldr	r6, [r3, #0]
 800aeec:	6862      	ldr	r2, [r4, #4]
 800aeee:	2100      	movs	r1, #0
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7f5 f9f5 	bl	80002e0 <memchr>
 800aef6:	b108      	cbz	r0, 800aefc <_printf_i+0x1e4>
 800aef8:	1b80      	subs	r0, r0, r6
 800aefa:	6060      	str	r0, [r4, #4]
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	6123      	str	r3, [r4, #16]
 800af00:	2300      	movs	r3, #0
 800af02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af06:	e7aa      	b.n	800ae5e <_printf_i+0x146>
 800af08:	6923      	ldr	r3, [r4, #16]
 800af0a:	4632      	mov	r2, r6
 800af0c:	4649      	mov	r1, r9
 800af0e:	4640      	mov	r0, r8
 800af10:	47d0      	blx	sl
 800af12:	3001      	adds	r0, #1
 800af14:	d0ad      	beq.n	800ae72 <_printf_i+0x15a>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	079b      	lsls	r3, r3, #30
 800af1a:	d413      	bmi.n	800af44 <_printf_i+0x22c>
 800af1c:	68e0      	ldr	r0, [r4, #12]
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	4298      	cmp	r0, r3
 800af22:	bfb8      	it	lt
 800af24:	4618      	movlt	r0, r3
 800af26:	e7a6      	b.n	800ae76 <_printf_i+0x15e>
 800af28:	2301      	movs	r3, #1
 800af2a:	4632      	mov	r2, r6
 800af2c:	4649      	mov	r1, r9
 800af2e:	4640      	mov	r0, r8
 800af30:	47d0      	blx	sl
 800af32:	3001      	adds	r0, #1
 800af34:	d09d      	beq.n	800ae72 <_printf_i+0x15a>
 800af36:	3501      	adds	r5, #1
 800af38:	68e3      	ldr	r3, [r4, #12]
 800af3a:	9903      	ldr	r1, [sp, #12]
 800af3c:	1a5b      	subs	r3, r3, r1
 800af3e:	42ab      	cmp	r3, r5
 800af40:	dcf2      	bgt.n	800af28 <_printf_i+0x210>
 800af42:	e7eb      	b.n	800af1c <_printf_i+0x204>
 800af44:	2500      	movs	r5, #0
 800af46:	f104 0619 	add.w	r6, r4, #25
 800af4a:	e7f5      	b.n	800af38 <_printf_i+0x220>
 800af4c:	08011f3e 	.word	0x08011f3e
 800af50:	08011f4f 	.word	0x08011f4f

0800af54 <memmove>:
 800af54:	4288      	cmp	r0, r1
 800af56:	b510      	push	{r4, lr}
 800af58:	eb01 0402 	add.w	r4, r1, r2
 800af5c:	d902      	bls.n	800af64 <memmove+0x10>
 800af5e:	4284      	cmp	r4, r0
 800af60:	4623      	mov	r3, r4
 800af62:	d807      	bhi.n	800af74 <memmove+0x20>
 800af64:	1e43      	subs	r3, r0, #1
 800af66:	42a1      	cmp	r1, r4
 800af68:	d008      	beq.n	800af7c <memmove+0x28>
 800af6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af72:	e7f8      	b.n	800af66 <memmove+0x12>
 800af74:	4402      	add	r2, r0
 800af76:	4601      	mov	r1, r0
 800af78:	428a      	cmp	r2, r1
 800af7a:	d100      	bne.n	800af7e <memmove+0x2a>
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af86:	e7f7      	b.n	800af78 <memmove+0x24>

0800af88 <_sbrk_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	@ (800afa4 <_sbrk_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f5 fea2 	bl	8000cdc <_sbrk>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_sbrk_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_sbrk_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	240008fc 	.word	0x240008fc

0800afa8 <memcpy>:
 800afa8:	440a      	add	r2, r1
 800afaa:	4291      	cmp	r1, r2
 800afac:	f100 33ff 	add.w	r3, r0, #4294967295
 800afb0:	d100      	bne.n	800afb4 <memcpy+0xc>
 800afb2:	4770      	bx	lr
 800afb4:	b510      	push	{r4, lr}
 800afb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afbe:	4291      	cmp	r1, r2
 800afc0:	d1f9      	bne.n	800afb6 <memcpy+0xe>
 800afc2:	bd10      	pop	{r4, pc}

0800afc4 <_realloc_r>:
 800afc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc8:	4607      	mov	r7, r0
 800afca:	4614      	mov	r4, r2
 800afcc:	460d      	mov	r5, r1
 800afce:	b921      	cbnz	r1, 800afda <_realloc_r+0x16>
 800afd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afd4:	4611      	mov	r1, r2
 800afd6:	f7ff bc4d 	b.w	800a874 <_malloc_r>
 800afda:	b92a      	cbnz	r2, 800afe8 <_realloc_r+0x24>
 800afdc:	f7ff fbde 	bl	800a79c <_free_r>
 800afe0:	4625      	mov	r5, r4
 800afe2:	4628      	mov	r0, r5
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	f000 f81a 	bl	800b020 <_malloc_usable_size_r>
 800afec:	4284      	cmp	r4, r0
 800afee:	4606      	mov	r6, r0
 800aff0:	d802      	bhi.n	800aff8 <_realloc_r+0x34>
 800aff2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aff6:	d8f4      	bhi.n	800afe2 <_realloc_r+0x1e>
 800aff8:	4621      	mov	r1, r4
 800affa:	4638      	mov	r0, r7
 800affc:	f7ff fc3a 	bl	800a874 <_malloc_r>
 800b000:	4680      	mov	r8, r0
 800b002:	b908      	cbnz	r0, 800b008 <_realloc_r+0x44>
 800b004:	4645      	mov	r5, r8
 800b006:	e7ec      	b.n	800afe2 <_realloc_r+0x1e>
 800b008:	42b4      	cmp	r4, r6
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	bf28      	it	cs
 800b010:	4632      	movcs	r2, r6
 800b012:	f7ff ffc9 	bl	800afa8 <memcpy>
 800b016:	4629      	mov	r1, r5
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff fbbf 	bl	800a79c <_free_r>
 800b01e:	e7f1      	b.n	800b004 <_realloc_r+0x40>

0800b020 <_malloc_usable_size_r>:
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f18      	subs	r0, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbc      	itt	lt
 800b02a:	580b      	ldrlt	r3, [r1, r0]
 800b02c:	18c0      	addlt	r0, r0, r3
 800b02e:	4770      	bx	lr

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
