
X1_Thorn_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000073fc  0800d358  0800d358  0000e358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014754  08014754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801475c  0801475c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014760  08014760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000024c  24000000  08014764  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005574  2400024c  080149b0  0001624c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240057c0  080149b0  000167c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001624c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043529  00000000  00000000  0001627a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008064  00000000  00000000  000597a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00019330  00000000  00000000  00061807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002238  00000000  00000000  0007ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002351  00000000  00000000  0007cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000bb72  00000000  00000000  0007f0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003fd51  00000000  00000000  0008ac33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018e8a6  00000000  00000000  000ca984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0025922a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006d9c  00000000  00000000  00259270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000075  00000000  00000000  0026000c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400024c 	.word	0x2400024c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d340 	.word	0x0800d340

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000250 	.word	0x24000250
 80002dc:	0800d340 	.word	0x0800d340

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <GroundCommands_Init>:
static uint8_t active;
esp32_commands_t curr_esp32_commands;

void GroundCommands_Init(void)
{
	esp32_Init();
 80006bc:	f000 b9e4 	b.w	8000a88 <esp32_Init>

080006c0 <Sensor_Init>:
}



void Sensor_Init(void)
{
 80006c0:	b507      	push	{r0, r1, r2, lr}

		//Init structure definition section
		BNO055_Init_t BNO055_InitStruct = {0};

		//Reset section
		ResetBNO055();
 80006c2:	f000 f8a7 	bl	8000814 <ResetBNO055>
		BNO055_InitStruct.Axis = DEFAULT_AXIS_REMAP;			//value will be entered by looking at the data sheet
		BNO055_InitStruct.Axis_sign = 0x3;						//value will be entered by looking at the data sheet - Y and Z must have switched signs
		BNO055_InitStruct.Clock_Source = CLOCK_EXTERNAL;		//CLOCK_EXTERNAL or CLOCK_INTERNAL
		BNO055_InitStruct.Mode = BNO055_NORMAL_MODE;			//BNO055_X_MODE   X:NORMAL, LOWPOWER, SUSPEND
		BNO055_InitStruct.OP_Modes = NDOF;
		BNO055_InitStruct.Unit_Sel = (UNIT_ORI_ANDROID | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_RPS | UNIT_ACC_MS2);
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <Sensor_Init+0x28>)
 80006c8:	9300      	str	r3, [sp, #0]
		BNO055_InitStruct.OP_Modes = NDOF;
 80006ca:	f248 030c 	movw	r3, #32780	@ 0x800c
 80006ce:	f8ad 3004 	strh.w	r3, [sp, #4]
		BNO055_InitStruct.ACC_Range = Range_4G;			//Range_X
 80006d2:	2301      	movs	r3, #1
 80006d4:	f88d 3006 	strb.w	r3, [sp, #6]
										//(UNIT_ORI_X | UNIT_TEMP_X | UNIT_EUL_X | UNIT_GYRO_X | UNIT_ACC_X)
		BNO055_Init(BNO055_InitStruct);
 80006d8:	ab02      	add	r3, sp, #8
 80006da:	e913 0003 	ldmdb	r3, {r0, r1}
//		Check_Status(&Status);
//		printf("Selftest Result: %d\t",Status.STresult);
//		printf("System Status: %d\t",Status.SYSStatus);
//		printf("System Error: %d\n",Status.SYSError);

}
 80006de:	b003      	add	sp, #12
 80006e0:	f85d eb04 	ldr.w	lr, [sp], #4
		BNO055_Init(BNO055_InitStruct);
 80006e4:	f000 b96e 	b.w	80009c4 <BNO055_Init>
 80006e8:	00032482 	.word	0x00032482

080006ec <Odometry_Init>:
	Sensor_Init();
 80006ec:	f7ff bfe8 	b.w	80006c0 <Sensor_Init>

080006f0 <TIM_PeriodElapsedCallback_TIM3>:
	return 1;
}


void TIM_PeriodElapsedCallback_TIM3(void)
{
 80006f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t idr = GPIOD->IDR;
 80006f2:	4b2e      	ldr	r3, [pc, #184]	@ (80007ac <TIM_PeriodElapsedCallback_TIM3+0xbc>)
	uint8_t motor1bit  = (idr >> 8) & 1;
	uint8_t motor2bit  = (idr >> 9) & 1;

	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 80006f4:	4d2e      	ldr	r5, [pc, #184]	@ (80007b0 <TIM_PeriodElapsedCallback_TIM3+0xc0>)
	uint32_t idr = GPIOD->IDR;
 80006f6:	691b      	ldr	r3, [r3, #16]
	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 80006f8:	482e      	ldr	r0, [pc, #184]	@ (80007b4 <TIM_PeriodElapsedCallback_TIM3+0xc4>)
 80006fa:	782c      	ldrb	r4, [r5, #0]
	uint8_t motor1bit  = (idr >> 8) & 1;
 80006fc:	f3c3 2200 	ubfx	r2, r3, #8, #1
	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 8000700:	7801      	ldrb	r1, [r0, #0]
	uint8_t motor2bit  = (idr >> 9) & 1;
 8000702:	f3c3 2340 	ubfx	r3, r3, #9, #1
	if (RX_motor1_started == 0 && RX_motor1_finished == 0)
 8000706:	bb54      	cbnz	r4, 800075e <TIM_PeriodElapsedCallback_TIM3+0x6e>
 8000708:	430a      	orrs	r2, r1
 800070a:	d101      	bne.n	8000710 <TIM_PeriodElapsedCallback_TIM3+0x20>
	{
		if (motor1bit == 0)
		{
			RX_motor1_started = 1;
 800070c:	2201      	movs	r2, #1
 800070e:	702a      	strb	r2, [r5, #0]
			RX_motor1_finished = 1;
		}
	}


	if (RX_motor2_started == 0 && RX_motor2_finished == 0)
 8000710:	4a29      	ldr	r2, [pc, #164]	@ (80007b8 <TIM_PeriodElapsedCallback_TIM3+0xc8>)
 8000712:	7811      	ldrb	r1, [r2, #0]
 8000714:	2900      	cmp	r1, #0
 8000716:	d134      	bne.n	8000782 <TIM_PeriodElapsedCallback_TIM3+0x92>
 8000718:	4928      	ldr	r1, [pc, #160]	@ (80007bc <TIM_PeriodElapsedCallback_TIM3+0xcc>)
 800071a:	7809      	ldrb	r1, [r1, #0]
 800071c:	4319      	orrs	r1, r3
 800071e:	d101      	bne.n	8000724 <TIM_PeriodElapsedCallback_TIM3+0x34>
	{
		if (motor2bit == 0)
		{
			RX_motor2_started = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	7013      	strb	r3, [r2, #0]
			RX_motor2_finished = 1;
		}
	}


	if (RX_motor1_finished && RX_motor2_finished)
 8000724:	7803      	ldrb	r3, [r0, #0]
 8000726:	b1c3      	cbz	r3, 800075a <TIM_PeriodElapsedCallback_TIM3+0x6a>
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <TIM_PeriodElapsedCallback_TIM3+0xcc>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b1ab      	cbz	r3, 800075a <TIM_PeriodElapsedCallback_TIM3+0x6a>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 800072e:	4824      	ldr	r0, [pc, #144]	@ (80007c0 <TIM_PeriodElapsedCallback_TIM3+0xd0>)
 8000730:	f006 fdba 	bl	80072a8 <HAL_TIM_Base_Stop_IT>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000734:	2300      	movs	r3, #0
		xSemaphoreGiveFromISR(xDshotRxDoneSemaphoreHandle, &xHigherPriorityTaskWoken);
 8000736:	a901      	add	r1, sp, #4
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000738:	9301      	str	r3, [sp, #4]
		xSemaphoreGiveFromISR(xDshotRxDoneSemaphoreHandle, &xHigherPriorityTaskWoken);
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <TIM_PeriodElapsedCallback_TIM3+0xd4>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f008 fd26 	bl	800918e <xQueueGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000742:	9b01      	ldr	r3, [sp, #4]
 8000744:	b14b      	cbz	r3, 800075a <TIM_PeriodElapsedCallback_TIM3+0x6a>
 8000746:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800074a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	f3bf 8f6f 	isb	sy
	}
}
 800075a:	b002      	add	sp, #8
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	else if (RX_motor1_started == 1 && RX_motor1_finished == 0)
 800075e:	2c01      	cmp	r4, #1
 8000760:	d1d6      	bne.n	8000710 <TIM_PeriodElapsedCallback_TIM3+0x20>
 8000762:	2900      	cmp	r1, #0
 8000764:	d1d4      	bne.n	8000710 <TIM_PeriodElapsedCallback_TIM3+0x20>
		if (motor1bitcnt < 20)
 8000766:	4d18      	ldr	r5, [pc, #96]	@ (80007c8 <TIM_PeriodElapsedCallback_TIM3+0xd8>)
 8000768:	7829      	ldrb	r1, [r5, #0]
 800076a:	2913      	cmp	r1, #19
			rawtelem1 = (rawtelem1 << 1) | motor1bit;
 800076c:	bf9b      	ittet	ls
 800076e:	4c17      	ldrls	r4, [pc, #92]	@ (80007cc <TIM_PeriodElapsedCallback_TIM3+0xdc>)
			motor1bitcnt++;
 8000770:	3101      	addls	r1, #1
			RX_motor1_finished = 1;
 8000772:	7004      	strbhi	r4, [r0, #0]
			rawtelem1 = (rawtelem1 << 1) | motor1bit;
 8000774:	6826      	ldrls	r6, [r4, #0]
			motor1bitcnt++;
 8000776:	bf9e      	ittt	ls
 8000778:	7029      	strbls	r1, [r5, #0]
			rawtelem1 = (rawtelem1 << 1) | motor1bit;
 800077a:	ea42 0246 	orrls.w	r2, r2, r6, lsl #1
 800077e:	6022      	strls	r2, [r4, #0]
			RX_motor1_finished = 1;
 8000780:	e7c6      	b.n	8000710 <TIM_PeriodElapsedCallback_TIM3+0x20>
	else if (RX_motor2_started == 1 && RX_motor2_finished == 0)
 8000782:	2901      	cmp	r1, #1
 8000784:	d1ce      	bne.n	8000724 <TIM_PeriodElapsedCallback_TIM3+0x34>
 8000786:	4c0d      	ldr	r4, [pc, #52]	@ (80007bc <TIM_PeriodElapsedCallback_TIM3+0xcc>)
 8000788:	7822      	ldrb	r2, [r4, #0]
 800078a:	2a00      	cmp	r2, #0
 800078c:	d1ca      	bne.n	8000724 <TIM_PeriodElapsedCallback_TIM3+0x34>
		if (motor2bitcnt < 20)
 800078e:	4d10      	ldr	r5, [pc, #64]	@ (80007d0 <TIM_PeriodElapsedCallback_TIM3+0xe0>)
 8000790:	782a      	ldrb	r2, [r5, #0]
 8000792:	2a13      	cmp	r2, #19
			rawtelem2 = (rawtelem2 << 1) | motor2bit;
 8000794:	bf9b      	ittet	ls
 8000796:	490f      	ldrls	r1, [pc, #60]	@ (80007d4 <TIM_PeriodElapsedCallback_TIM3+0xe4>)
			motor2bitcnt++;
 8000798:	3201      	addls	r2, #1
			RX_motor2_finished = 1;
 800079a:	7021      	strbhi	r1, [r4, #0]
			rawtelem2 = (rawtelem2 << 1) | motor2bit;
 800079c:	680c      	ldrls	r4, [r1, #0]
			motor2bitcnt++;
 800079e:	bf9e      	ittt	ls
 80007a0:	702a      	strbls	r2, [r5, #0]
			rawtelem2 = (rawtelem2 << 1) | motor2bit;
 80007a2:	ea43 0344 	orrls.w	r3, r3, r4, lsl #1
 80007a6:	600b      	strls	r3, [r1, #0]
			RX_motor2_finished = 1;
 80007a8:	e7bc      	b.n	8000724 <TIM_PeriodElapsedCallback_TIM3+0x34>
 80007aa:	bf00      	nop
 80007ac:	58020c00 	.word	0x58020c00
 80007b0:	2400027a 	.word	0x2400027a
 80007b4:	24000279 	.word	0x24000279
 80007b8:	24000272 	.word	0x24000272
 80007bc:	24000271 	.word	0x24000271
 80007c0:	24000b14 	.word	0x24000b14
 80007c4:	24000268 	.word	0x24000268
 80007c8:	24000278 	.word	0x24000278
 80007cc:	24000274 	.word	0x24000274
 80007d0:	24000270 	.word	0x24000270
 80007d4:	2400026c 	.word	0x2400026c

080007d8 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){
 80007d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 80007da:	2264      	movs	r2, #100	@ 0x64
 80007dc:	2301      	movs	r3, #1
void SelectPage(uint8_t page){
 80007de:	f88d 0017 	strb.w	r0, [sp, #23]
	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 80007e2:	2150      	movs	r1, #80	@ 0x50
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <SelectPage+0x34>)
 80007e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80007ea:	f10d 0217 	add.w	r2, sp, #23
 80007ee:	9200      	str	r2, [sp, #0]
 80007f0:	2207      	movs	r2, #7
 80007f2:	f004 f835 	bl	8004860 <HAL_I2C_Mem_Write>
 80007f6:	b110      	cbz	r0, 80007fe <SelectPage+0x26>
		printf("Register page replacement could not be set\n");
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <SelectPage+0x38>)
 80007fa:	f00a fc7b 	bl	800b0f4 <puts>
	}
	HAL_Delay(50);
 80007fe:	2032      	movs	r0, #50	@ 0x32
 8000800:	f002 fb6c 	bl	8002edc <HAL_Delay>
}
 8000804:	b007      	add	sp, #28
 8000806:	f85d fb04 	ldr.w	pc, [sp], #4
 800080a:	bf00      	nop
 800080c:	240008ac 	.word	0x240008ac
 8000810:	0800d358 	.word	0x0800d358

08000814 <ResetBNO055>:
  *
  * @param  None
  *
  * @retval None
  */
void ResetBNO055(void){
 8000814:	b570      	push	{r4, r5, r6, lr}

	uint8_t reset = 0x20;
 8000816:	2320      	movs	r3, #32
void ResetBNO055(void){
 8000818:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 800081a:	2464      	movs	r4, #100	@ 0x64
 800081c:	2150      	movs	r1, #80	@ 0x50
 800081e:	f10d 0216 	add.w	r2, sp, #22
	uint8_t reset = 0x20;
 8000822:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 8000826:	2301      	movs	r3, #1
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <ResetBNO055+0x64>)
 800082a:	9200      	str	r2, [sp, #0]
 800082c:	223f      	movs	r2, #63	@ 0x3f


	//If value of id register is not equal to BNO055 chip id which is 0xA0, wait until equal to each other
	while(chip_id != BNO055_ID) {

		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 800082e:	4d12      	ldr	r5, [pc, #72]	@ (8000878 <ResetBNO055+0x64>)
		printf("BNO055-> Undefined chip id\n");
 8000830:	4e12      	ldr	r6, [pc, #72]	@ (800087c <ResetBNO055+0x68>)
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 8000832:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000836:	f004 f813 	bl	8004860 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083e:	f002 fb4d 	bl	8002edc <HAL_Delay>
	uint8_t chip_id=0;
 8000842:	2300      	movs	r3, #0
 8000844:	f88d 3017 	strb.w	r3, [sp, #23]
	while(chip_id != BNO055_ID) {
 8000848:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800084c:	2ba0      	cmp	r3, #160	@ 0xa0
 800084e:	d101      	bne.n	8000854 <ResetBNO055+0x40>
		HAL_Delay(200);
	}
}
 8000850:	b006      	add	sp, #24
 8000852:	bd70      	pop	{r4, r5, r6, pc}
		HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 8000854:	2301      	movs	r3, #1
 8000856:	f10d 0217 	add.w	r2, sp, #23
 800085a:	2150      	movs	r1, #80	@ 0x50
 800085c:	4628      	mov	r0, r5
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	9200      	str	r2, [sp, #0]
 8000862:	2200      	movs	r2, #0
 8000864:	9402      	str	r4, [sp, #8]
 8000866:	f004 f8d5 	bl	8004a14 <HAL_I2C_Mem_Read>
		printf("BNO055-> Undefined chip id\n");
 800086a:	4630      	mov	r0, r6
 800086c:	f00a fc42 	bl	800b0f4 <puts>
		HAL_Delay(200);
 8000870:	20c8      	movs	r0, #200	@ 0xc8
 8000872:	f002 fb33 	bl	8002edc <HAL_Delay>
 8000876:	e7e7      	b.n	8000848 <ResetBNO055+0x34>
 8000878:	240008ac 	.word	0x240008ac
 800087c:	0800d383 	.word	0x0800d383

08000880 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){
 8000880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000882:	f88d 0017 	strb.w	r0, [sp, #23]

	SelectPage(PAGE_0);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ffa6 	bl	80007d8 <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 800088c:	2264      	movs	r2, #100	@ 0x64
 800088e:	2301      	movs	r3, #1
 8000890:	2150      	movs	r1, #80	@ 0x50
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <Set_Operation_Mode+0x48>)
 8000894:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000898:	f10d 0217 	add.w	r2, sp, #23
 800089c:	9200      	str	r2, [sp, #0]
 800089e:	223d      	movs	r2, #61	@ 0x3d
 80008a0:	f003 ffde 	bl	8004860 <HAL_I2C_Mem_Write>
 80008a4:	b158      	cbz	r0, 80008be <Set_Operation_Mode+0x3e>
		printf("Operation mode could not be set!\n");
 80008a6:	4809      	ldr	r0, [pc, #36]	@ (80008cc <Set_Operation_Mode+0x4c>)
	}
	else printf("Operation mode switching succeeded.\n");
 80008a8:	f00a fc24 	bl	800b0f4 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 80008ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80008b0:	b93b      	cbnz	r3, 80008c2 <Set_Operation_Mode+0x42>
 80008b2:	2013      	movs	r0, #19

	else HAL_Delay(9);
 80008b4:	f002 fb12 	bl	8002edc <HAL_Delay>

}
 80008b8:	b007      	add	sp, #28
 80008ba:	f85d fb04 	ldr.w	pc, [sp], #4
	else printf("Operation mode switching succeeded.\n");
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <Set_Operation_Mode+0x50>)
 80008c0:	e7f2      	b.n	80008a8 <Set_Operation_Mode+0x28>
	else HAL_Delay(9);
 80008c2:	2009      	movs	r0, #9
 80008c4:	e7f6      	b.n	80008b4 <Set_Operation_Mode+0x34>
 80008c6:	bf00      	nop
 80008c8:	240008ac 	.word	0x240008ac
 80008cc:	0800d39e 	.word	0x0800d39e
 80008d0:	0800d3bf 	.word	0x0800d3bf

080008d4 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){
 80008d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 80008d6:	2264      	movs	r2, #100	@ 0x64
 80008d8:	2301      	movs	r3, #1
void SetPowerMODE(uint8_t BNO055_){
 80008da:	f88d 0017 	strb.w	r0, [sp, #23]
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 80008de:	2150      	movs	r1, #80	@ 0x50
 80008e0:	480a      	ldr	r0, [pc, #40]	@ (800090c <SetPowerMODE+0x38>)
 80008e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80008e6:	f10d 0217 	add.w	r2, sp, #23
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	223e      	movs	r2, #62	@ 0x3e
 80008ee:	f003 ffb7 	bl	8004860 <HAL_I2C_Mem_Write>
 80008f2:	b140      	cbz	r0, 8000906 <SetPowerMODE+0x32>
	{
		printf("Power mode could not be set!\n");
 80008f4:	4806      	ldr	r0, [pc, #24]	@ (8000910 <SetPowerMODE+0x3c>)
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 80008f6:	f00a fbfd 	bl	800b0f4 <puts>
	}
	HAL_Delay(50);
 80008fa:	2032      	movs	r0, #50	@ 0x32
 80008fc:	f002 faee 	bl	8002edc <HAL_Delay>

}
 8000900:	b007      	add	sp, #28
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("Power mode switching succeeded.\n");
 8000906:	4803      	ldr	r0, [pc, #12]	@ (8000914 <SetPowerMODE+0x40>)
 8000908:	e7f5      	b.n	80008f6 <SetPowerMODE+0x22>
 800090a:	bf00      	nop
 800090c:	240008ac 	.word	0x240008ac
 8000910:	0800d3e3 	.word	0x0800d3e3
 8000914:	0800d400 	.word	0x0800d400

08000918 <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) {
 8000918:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 800091a:	2301      	movs	r3, #1
 800091c:	2264      	movs	r2, #100	@ 0x64
 800091e:	2150      	movs	r1, #80	@ 0x50
void Clock_Source(uint8_t source) {
 8000920:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <Clock_Source+0x24>)
 8000926:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800092a:	f10d 0217 	add.w	r2, sp, #23
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	223f      	movs	r2, #63	@ 0x3f
 8000932:	f003 ff95 	bl	8004860 <HAL_I2C_Mem_Write>
}
 8000936:	b007      	add	sp, #28
 8000938:	f85d fb04 	ldr.w	pc, [sp], #4
 800093c:	240008ac 	.word	0x240008ac

08000940 <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	b086      	sub	sp, #24

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8000944:	2401      	movs	r4, #1
 8000946:	2564      	movs	r5, #100	@ 0x64
 8000948:	4e11      	ldr	r6, [pc, #68]	@ (8000990 <BNO055_Axis+0x50>)
 800094a:	f10d 0317 	add.w	r3, sp, #23
 800094e:	2241      	movs	r2, #65	@ 0x41
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8000950:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 8000954:	4630      	mov	r0, r6
void BNO055_Axis(uint8_t remap, uint8_t sign){
 8000956:	f88d 1016 	strb.w	r1, [sp, #22]
	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 800095a:	2150      	movs	r1, #80	@ 0x50
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	4623      	mov	r3, r4
 8000960:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8000964:	f003 ff7c 	bl	8004860 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8000968:	2014      	movs	r0, #20
 800096a:	f002 fab7 	bl	8002edc <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 800096e:	f10d 0316 	add.w	r3, sp, #22
 8000972:	2242      	movs	r2, #66	@ 0x42
 8000974:	2150      	movs	r1, #80	@ 0x50
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	4630      	mov	r0, r6
 800097a:	4623      	mov	r3, r4
 800097c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8000980:	f003 ff6e 	bl	8004860 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000984:	4628      	mov	r0, r5
 8000986:	f002 faa9 	bl	8002edc <HAL_Delay>
}
 800098a:	b006      	add	sp, #24
 800098c:	bd70      	pop	{r4, r5, r6, pc}
 800098e:	bf00      	nop
 8000990:	240008ac 	.word	0x240008ac

08000994 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8000994:	b510      	push	{r4, lr}
 8000996:	b086      	sub	sp, #24

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 8000998:	2301      	movs	r3, #1
 800099a:	2464      	movs	r4, #100	@ 0x64
 800099c:	2150      	movs	r1, #80	@ 0x50
 800099e:	f10d 0217 	add.w	r2, sp, #23
void SET_Accel_Range(uint8_t range){
 80009a2:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <SET_Accel_Range+0x2c>)
 80009a8:	9200      	str	r2, [sp, #0]
 80009aa:	2208      	movs	r2, #8
 80009ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80009b0:	f003 ff56 	bl	8004860 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80009b4:	4620      	mov	r0, r4
 80009b6:	f002 fa91 	bl	8002edc <HAL_Delay>

}
 80009ba:	b006      	add	sp, #24
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	240008ac 	.word	0x240008ac

080009c4 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(BNO055_Init_t Init){
 80009c4:	b530      	push	{r4, r5, lr}
 80009c6:	b089      	sub	sp, #36	@ 0x24
	SelectPage(PAGE_0);
	HAL_Delay(50);

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 80009c8:	2464      	movs	r4, #100	@ 0x64
void BNO055_Init(BNO055_Init_t Init){
 80009ca:	ad04      	add	r5, sp, #16
 80009cc:	e885 0003 	stmia.w	r5, {r0, r1}
	Set_Operation_Mode(CONFIG_MODE);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff55 	bl	8000880 <Set_Operation_Mode>
	HAL_Delay(50);
 80009d6:	2032      	movs	r0, #50	@ 0x32
 80009d8:	f002 fa80 	bl	8002edc <HAL_Delay>
	SelectPage(PAGE_1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fefb 	bl	80007d8 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 80009e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80009e6:	f7ff ffd5 	bl	8000994 <SET_Accel_Range>
	HAL_Delay(50);
 80009ea:	2032      	movs	r0, #50	@ 0x32
 80009ec:	f002 fa76 	bl	8002edc <HAL_Delay>
	SelectPage(PAGE_0);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff fef1 	bl	80007d8 <SelectPage>
	HAL_Delay(50);
 80009f6:	2032      	movs	r0, #50	@ 0x32
 80009f8:	f002 fa70 	bl	8002edc <HAL_Delay>
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 80009fc:	2301      	movs	r3, #1
 80009fe:	f10d 021f 	add.w	r2, sp, #31
 8000a02:	2150      	movs	r1, #80	@ 0x50
 8000a04:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <BNO055_Init+0xbc>)
 8000a06:	9200      	str	r2, [sp, #0]
 8000a08:	2238      	movs	r2, #56	@ 0x38
 8000a0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a0e:	f004 f801 	bl	8004a14 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8000a12:	2032      	movs	r0, #50	@ 0x32
 8000a14:	f002 fa62 	bl	8002edc <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8000a18:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000a1c:	b933      	cbnz	r3, 8000a2c <BNO055_Init+0x68>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 8000a1e:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8000a22:	f7ff ff79 	bl	8000918 <Clock_Source>
		HAL_Delay(100);
 8000a26:	4620      	mov	r0, r4
 8000a28:	f002 fa58 	bl	8002edc <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8000a2c:	f89d 1012 	ldrb.w	r1, [sp, #18]
	HAL_Delay(100);

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 8000a30:	2464      	movs	r4, #100	@ 0x64
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8000a32:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8000a36:	f7ff ff83 	bl	8000940 <BNO055_Axis>
	HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	@ 0x64
 8000a3c:	f002 fa4e 	bl	8002edc <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 8000a40:	2301      	movs	r3, #1
 8000a42:	223b      	movs	r2, #59	@ 0x3b
 8000a44:	2150      	movs	r1, #80	@ 0x50
 8000a46:	9500      	str	r5, [sp, #0]
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <BNO055_Init+0xbc>)
 8000a4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000a4e:	f003 ff07 	bl	8004860 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8000a52:	4620      	mov	r0, r4
 8000a54:	f002 fa42 	bl	8002edc <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 8000a58:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8000a5c:	f7ff ff3a 	bl	80008d4 <SetPowerMODE>
	HAL_Delay(100);
 8000a60:	4620      	mov	r0, r4
 8000a62:	f002 fa3b 	bl	8002edc <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 8000a66:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000a6a:	f7ff ff09 	bl	8000880 <Set_Operation_Mode>
	HAL_Delay(100);
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f002 fa34 	bl	8002edc <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <BNO055_Init+0xc0>)
 8000a76:	f00a fb3d 	bl	800b0f4 <puts>
}
 8000a7a:	b009      	add	sp, #36	@ 0x24
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	240008ac 	.word	0x240008ac
 8000a84:	0800d420 	.word	0x0800d420

08000a88 <esp32_Init>:



void esp32_Init(void)
{
	HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4902      	ldr	r1, [pc, #8]	@ (8000a94 <esp32_Init+0xc>)
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <esp32_Init+0x10>)
 8000a8e:	f007 bfd5 	b.w	8008a3c <HAL_UART_Receive_IT>
 8000a92:	bf00      	nop
 8000a94:	24000291 	.word	0x24000291
 8000a98:	24000bf8 	.word	0x24000bf8

08000a9c <HAL_UART_RxCpltCallback>:
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 8000a9c:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <HAL_UART_RxCpltCallback+0x88>)
 8000a9e:	4298      	cmp	r0, r3
{
 8000aa0:	b470      	push	{r4, r5, r6}
    if (huart == &huart5)
 8000aa2:	d13d      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x84>
    {
        // 1) Clear Overrun just in case
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8000aa4:	6803      	ldr	r3, [r0, #0]
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	621a      	str	r2, [r3, #32]

        // 2) State machine
        switch (frame_state)
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <HAL_UART_RxCpltCallback+0x8c>)
 8000aac:	7813      	ldrb	r3, [r2, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d00e      	beq.n	8000ad0 <HAL_UART_RxCpltCallback+0x34>
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d016      	beq.n	8000ae4 <HAL_UART_RxCpltCallback+0x48>
 8000ab6:	b92b      	cbnz	r3, 8000ac4 <HAL_UART_RxCpltCallback+0x28>
        {
            case SYNC_WAIT_1:
                if (rx_byte == 0x55)
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_UART_RxCpltCallback+0x90>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b55      	cmp	r3, #85	@ 0x55
 8000abe:	d101      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x28>
                    frame_state = SYNC_WAIT_2;
 8000ac0:	2301      	movs	r3, #1
                {
                    // got full payload: copy to floats
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
                    uart_data_ready = true;
                    // restart framing
                    frame_state = SYNC_WAIT_1;
 8000ac2:	7013      	strb	r3, [r2, #0]
                }
                break;
        }

        // 3) re-arm for next byte
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4919      	ldr	r1, [pc, #100]	@ (8000b2c <HAL_UART_RxCpltCallback+0x90>)
 8000ac8:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <HAL_UART_RxCpltCallback+0x88>)
    }
}
 8000aca:	bc70      	pop	{r4, r5, r6}
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000acc:	f007 bfb6 	b.w	8008a3c <HAL_UART_Receive_IT>
                if (rx_byte == 0xAA)
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_UART_RxCpltCallback+0x90>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2baa      	cmp	r3, #170	@ 0xaa
 8000ad6:	f04f 0300 	mov.w	r3, #0
 8000ada:	d1f2      	bne.n	8000ac2 <HAL_UART_RxCpltCallback+0x26>
                    frame_state = SYNC_COLLECT;
 8000adc:	2102      	movs	r1, #2
 8000ade:	7011      	strb	r1, [r2, #0]
                    collect_count = 0;
 8000ae0:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <HAL_UART_RxCpltCallback+0x94>)
 8000ae2:	e7ee      	b.n	8000ac2 <HAL_UART_RxCpltCallback+0x26>
                collect_buf[collect_count++] = rx_byte;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_UART_RxCpltCallback+0x94>)
 8000ae6:	4c11      	ldr	r4, [pc, #68]	@ (8000b2c <HAL_UART_RxCpltCallback+0x90>)
 8000ae8:	7818      	ldrb	r0, [r3, #0]
 8000aea:	7824      	ldrb	r4, [r4, #0]
 8000aec:	1c41      	adds	r1, r0, #1
 8000aee:	b2c9      	uxtb	r1, r1
 8000af0:	7019      	strb	r1, [r3, #0]
                if (collect_count >= sizeof(collect_buf))
 8000af2:	2913      	cmp	r1, #19
                collect_buf[collect_count++] = rx_byte;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_UART_RxCpltCallback+0x98>)
 8000af6:	541c      	strb	r4, [r3, r0]
                if (collect_count >= sizeof(collect_buf))
 8000af8:	d9e4      	bls.n	8000ac4 <HAL_UART_RxCpltCallback+0x28>
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000afa:	4c0f      	ldr	r4, [pc, #60]	@ (8000b38 <HAL_UART_RxCpltCallback+0x9c>)
 8000afc:	f103 0610 	add.w	r6, r3, #16
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	3308      	adds	r3, #8
 8000b04:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000b08:	4625      	mov	r5, r4
 8000b0a:	42b3      	cmp	r3, r6
 8000b0c:	c503      	stmia	r5!, {r0, r1}
 8000b0e:	462c      	mov	r4, r5
 8000b10:	d1f6      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x64>
 8000b12:	6818      	ldr	r0, [r3, #0]
                    uart_data_ready = true;
 8000b14:	2101      	movs	r1, #1
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_UART_RxCpltCallback+0xa0>)
                    memcpy(received_floats, collect_buf, sizeof(collect_buf));
 8000b18:	6028      	str	r0, [r5, #0]
                    uart_data_ready = true;
 8000b1a:	7019      	strb	r1, [r3, #0]
                    frame_state = SYNC_WAIT_1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e7d0      	b.n	8000ac2 <HAL_UART_RxCpltCallback+0x26>
}
 8000b20:	bc70      	pop	{r4, r5, r6}
 8000b22:	4770      	bx	lr
 8000b24:	24000bf8 	.word	0x24000bf8
 8000b28:	2400028f 	.word	0x2400028f
 8000b2c:	24000291 	.word	0x24000291
 8000b30:	24000290 	.word	0x24000290
 8000b34:	2400027b 	.word	0x2400027b
 8000b38:	24000294 	.word	0x24000294
 8000b3c:	240002a8 	.word	0x240002a8

08000b40 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    if (huart == &huart5)
 8000b40:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <HAL_UART_ErrorCallback+0x18>)
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d106      	bne.n	8000b54 <HAL_UART_ErrorCallback+0x14>
    {
        // Clear the error flags
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8000b46:	2208      	movs	r2, #8
 8000b48:	6803      	ldr	r3, [r0, #0]
        // Optionally log huart5.ErrorCode
        // Re-arm reception so you don’t lock up
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000b4a:	4904      	ldr	r1, [pc, #16]	@ (8000b5c <HAL_UART_ErrorCallback+0x1c>)
        __HAL_UART_CLEAR_OREFLAG(&huart5);
 8000b4c:	621a      	str	r2, [r3, #32]
        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f007 bf74 	b.w	8008a3c <HAL_UART_Receive_IT>
    }
}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	24000bf8 	.word	0x24000bf8
 8000b5c:	24000291 	.word	0x24000291

08000b60 <lcd_gettick>:
	return result;
}

static int32_t lcd_gettick(void)
{
	return HAL_GetTick();
 8000b60:	f002 b9b6 	b.w	8002ed0 <HAL_GetTick>

08000b64 <lcd_recvdata>:
		result = 0;}
	return result;
}

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
	int32_t result;
	LCD_CS_RESET;
 8000b66:	4e0e      	ldr	r6, [pc, #56]	@ (8000ba0 <lcd_recvdata+0x3c>)
{
 8000b68:	4604      	mov	r4, r0
 8000b6a:	460d      	mov	r5, r1
	LCD_CS_RESET;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b74:	f003 fce6 	bl	8004544 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8000b78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b7c:	b2aa      	uxth	r2, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <lcd_recvdata+0x40>)
 8000b82:	f006 f8d3 	bl	8006d2c <HAL_SPI_Receive>
 8000b86:	4604      	mov	r4, r0
	LCD_CS_SET;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b90:	f003 fcd8 	bl	8004544 <HAL_GPIO_WritePin>
	if(result>0){
 8000b94:	1e20      	subs	r0, r4, #0
 8000b96:	bf18      	it	ne
 8000b98:	2001      	movne	r0, #1
		result = -1;}
	else{
		result = 0;}
	return result;
}
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	bf00      	nop
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	24000900 	.word	0x24000900

08000ba8 <lcd_senddata>:
{
 8000ba8:	b570      	push	{r4, r5, r6, lr}
	LCD_CS_RESET;
 8000baa:	4e0d      	ldr	r6, [pc, #52]	@ (8000be0 <lcd_senddata+0x38>)
{
 8000bac:	4604      	mov	r4, r0
 8000bae:	460d      	mov	r5, r1
	LCD_CS_RESET;
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb8:	f003 fcc4 	bl	8004544 <HAL_GPIO_WritePin>
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	b2aa      	uxth	r2, r5
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <lcd_senddata+0x3c>)
 8000bc4:	f005 ff98 	bl	8006af8 <HAL_SPI_Transmit>
 8000bc8:	4604      	mov	r4, r0
	LCD_CS_SET;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd2:	f003 fcb7 	bl	8004544 <HAL_GPIO_WritePin>
	if(result>0){
 8000bd6:	1e20      	subs	r0, r4, #0
 8000bd8:	bf18      	it	ne
 8000bda:	2001      	movne	r0, #1
}
 8000bdc:	4240      	negs	r0, r0
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	58021000 	.word	0x58021000
 8000be4:	24000900 	.word	0x24000900

08000be8 <lcd_readreg>:
{
 8000be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LCD_CS_RESET;
 8000bea:	4d19      	ldr	r5, [pc, #100]	@ (8000c50 <lcd_readreg+0x68>)
{
 8000bec:	460e      	mov	r6, r1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000bee:	4f19      	ldr	r7, [pc, #100]	@ (8000c54 <lcd_readreg+0x6c>)
	LCD_CS_RESET;
 8000bf0:	2200      	movs	r2, #0
{
 8000bf2:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 8000bf6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	f003 fca2 	bl	8004544 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000c00:	4628      	mov	r0, r5
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	f003 fc9c 	bl	8004544 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	f10d 0107 	add.w	r1, sp, #7
 8000c12:	2201      	movs	r2, #1
 8000c14:	4638      	mov	r0, r7
 8000c16:	f005 ff6f 	bl	8006af8 <HAL_SPI_Transmit>
	LCD_RS_SET;
 8000c1a:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000c1c:	4604      	mov	r4, r0
	LCD_RS_SET;
 8000c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c22:	4628      	mov	r0, r5
 8000c24:	f003 fc8e 	bl	8004544 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8000c28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4638      	mov	r0, r7
 8000c32:	f006 f87b 	bl	8006d2c <HAL_SPI_Receive>
 8000c36:	4404      	add	r4, r0
	LCD_CS_SET;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c40:	f003 fc80 	bl	8004544 <HAL_GPIO_WritePin>
	if(result>0){
 8000c44:	1e20      	subs	r0, r4, #0
 8000c46:	bf18      	it	ne
 8000c48:	2001      	movne	r0, #1
}
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	b003      	add	sp, #12
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	58021000 	.word	0x58021000
 8000c54:	24000900 	.word	0x24000900

08000c58 <lcd_writereg>:
{
 8000c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c5a:	4615      	mov	r5, r2
 8000c5c:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 8000c60:	2200      	movs	r2, #0
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <lcd_writereg+0x68>)
{
 8000c64:	460e      	mov	r6, r1
	LCD_CS_RESET;
 8000c66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c6a:	f003 fc6b 	bl	8004544 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c74:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <lcd_writereg+0x68>)
 8000c76:	f003 fc65 	bl	8004544 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f10d 0107 	add.w	r1, sp, #7
 8000c80:	2364      	movs	r3, #100	@ 0x64
 8000c82:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <lcd_writereg+0x6c>)
 8000c84:	f005 ff38 	bl	8006af8 <HAL_SPI_Transmit>
	LCD_RS_SET;
 8000c88:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8000c8a:	4604      	mov	r4, r0
	LCD_RS_SET;
 8000c8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <lcd_writereg+0x68>)
 8000c92:	f003 fc57 	bl	8004544 <HAL_GPIO_WritePin>
	if(length > 0)
 8000c96:	b13d      	cbz	r5, 8000ca8 <lcd_writereg+0x50>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8000c98:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c9c:	b2aa      	uxth	r2, r5
 8000c9e:	4631      	mov	r1, r6
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <lcd_writereg+0x6c>)
 8000ca2:	f005 ff29 	bl	8006af8 <HAL_SPI_Transmit>
 8000ca6:	4404      	add	r4, r0
	LCD_CS_SET;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cae:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <lcd_writereg+0x68>)
 8000cb0:	f003 fc48 	bl	8004544 <HAL_GPIO_WritePin>
	if(result>0){
 8000cb4:	1e20      	subs	r0, r4, #0
 8000cb6:	bf18      	it	ne
 8000cb8:	2001      	movne	r0, #1
}
 8000cba:	4240      	negs	r0, r0
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	58021000 	.word	0x58021000
 8000cc4:	24000900 	.word	0x24000900

08000cc8 <lcd_init>:
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <lcd_init+0x10>)
{
 8000ccc:	b508      	push	{r3, lr}
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8000cce:	f006 feaf 	bl	8007a30 <HAL_TIMEx_PWMN_Start>
}
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	bd08      	pop	{r3, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000bac 	.word	0x24000bac

08000cdc <LCD_Light>:
{
 8000cdc:	b570      	push	{r4, r5, r6, lr}
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000cde:	4e1c      	ldr	r6, [pc, #112]	@ (8000d50 <LCD_Light+0x74>)
{
 8000ce0:	460c      	mov	r4, r1
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000ce2:	6833      	ldr	r3, [r6, #0]
 8000ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
	if(Brightness_Now == Brightness_Dis)
 8000ce6:	4298      	cmp	r0, r3
{
 8000ce8:	ed2d 8b02 	vpush	{d8}
	if(Brightness_Now == Brightness_Dis)
 8000cec:	d02c      	beq.n	8000d48 <LCD_Light+0x6c>
	if(time == time_now)
 8000cee:	b359      	cbz	r1, 8000d48 <LCD_Light+0x6c>
	temp1 = Brightness_Now;
 8000cf0:	ee07 3a90 	vmov	s15, r3
	temp2 = temp2 - time;
 8000cf4:	ee07 1a10 	vmov	s14, r1
	temp1 = Brightness_Now;
 8000cf8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	temp1 = temp1 - Brightness_Dis;
 8000cfc:	ee07 0a90 	vmov	s15, r0
	temp2 = temp2 - time;
 8000d00:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8000d04:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d54 <LCD_Light+0x78>
	temp1 = temp1 - Brightness_Dis;
 8000d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
	temp2 = temp2 - time;
 8000d0c:	ee37 7a66 	vsub.f32	s14, s14, s13
	temp1 = temp1 - Brightness_Dis;
 8000d10:	ee78 7a67 	vsub.f32	s15, s16, s15
	k = temp1 / temp2;
 8000d14:	eec7 8a87 	vdiv.f32	s17, s15, s14
	uint32_t tick=get_tick();
 8000d18:	f002 f8da 	bl	8002ed0 <HAL_GetTick>
 8000d1c:	4605      	mov	r5, r0
		delay_ms(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f002 f8dc 	bl	8002edc <HAL_Delay>
		time_now = get_tick()-tick;
 8000d24:	f002 f8d4 	bl	8002ed0 <HAL_GetTick>
 8000d28:	1b40      	subs	r0, r0, r5
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000d2a:	6833      	ldr	r3, [r6, #0]
		temp2 = time_now - 0;
 8000d2c:	ee07 0a90 	vmov	s15, r0
		if(time_now >= time) break;
 8000d30:	4284      	cmp	r4, r0
		temp2 = time_now - 0;
 8000d32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		set = temp2*k + Brightness_Now;
 8000d36:	eef0 7a48 	vmov.f32	s15, s16
 8000d3a:	eee8 7a87 	vfma.f32	s15, s17, s14
		LCD_SetBrightness((uint32_t)set);
 8000d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000d42:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		if(time_now >= time) break;
 8000d46:	d8ea      	bhi.n	8000d1e <LCD_Light+0x42>
}
 8000d48:	ecbd 8b02 	vpop	{d8}
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000bac 	.word	0x24000bac
 8000d54:	00000000 	.word	0x00000000

08000d58 <LCD_ShowChar>:
{  							  
 8000d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d5c:	461c      	mov	r4, r3
 8000d5e:	b08f      	sub	sp, #60	@ 0x3c
	uint16_t colortemp=POINT_COLOR; 
 8000d60:	f8df 91f4 	ldr.w	r9, [pc, #500]	@ 8000f58 <LCD_ShowChar+0x200>
{  							  
 8000d64:	4616      	mov	r6, r2
	uint16_t write[size][size==12?6:8];
 8000d66:	2c0c      	cmp	r4, #12
{  							  
 8000d68:	af02      	add	r7, sp, #8
	uint16_t colortemp=POINT_COLOR; 
 8000d6a:	f8b9 3000 	ldrh.w	r3, [r9]
	uint16_t write[size][size==12?6:8];
 8000d6e:	466a      	mov	r2, sp
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8000d70:	f1a6 0620 	sub.w	r6, r6, #32
	uint16_t colortemp=POINT_COLOR; 
 8000d74:	61bb      	str	r3, [r7, #24]
	uint16_t write[size][size==12?6:8];
 8000d76:	bf14      	ite	ne
 8000d78:	2308      	movne	r3, #8
 8000d7a:	2306      	moveq	r3, #6
{  							  
 8000d7c:	f8c7 d00c 	str.w	sp, [r7, #12]
 8000d80:	6138      	str	r0, [r7, #16]
 8000d82:	f04f 0800 	mov.w	r8, #0
	uint16_t write[size][size==12?6:8];
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	4363      	muls	r3, r4
{  							  
 8000d8a:	f897 a058 	ldrb.w	sl, [r7, #88]	@ 0x58
 8000d8e:	6279      	str	r1, [r7, #36]	@ 0x24
  ST7735_GetXSize(&st7735_pObj,&w);
 8000d90:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
	uint16_t write[size][size==12?6:8];
 8000d94:	005b      	lsls	r3, r3, #1
  ST7735_GetXSize(&st7735_pObj,&w);
 8000d96:	486c      	ldr	r0, [pc, #432]	@ (8000f48 <LCD_ShowChar+0x1f0>)
	uint16_t write[size][size==12?6:8];
 8000d98:	3307      	adds	r3, #7
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8000da0:	469d      	mov	sp, r3
 8000da2:	ab02      	add	r3, sp, #8
 8000da4:	617b      	str	r3, [r7, #20]
  ST7735_GetXSize(&st7735_pObj,&w);
 8000da6:	f000 f9cf 	bl	8001148 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8000daa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000dae:	4866      	ldr	r0, [pc, #408]	@ (8000f48 <LCD_ShowChar+0x1f0>)
 8000db0:	f000 f9d2 	bl	8001158 <ST7735_GetYSize>
	if(!mode) //�ǵ��ӷ�ʽ
 8000db4:	b2f3      	uxtb	r3, r6
 8000db6:	f1ba 0f00 	cmp.w	sl, #0
 8000dba:	d04c      	beq.n	8000e56 <LCD_ShowChar+0xfe>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
	count = 0;
 8000dbe:	4641      	mov	r1, r8
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000dc0:	f8b9 6000 	ldrh.w	r6, [r9]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000dc4:	623a      	str	r2, [r7, #32]
 8000dc6:	4a61      	ldr	r2, [pc, #388]	@ (8000f4c <LCD_ShowChar+0x1f4>)
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000dc8:	ba76      	rev16	r6, r6
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000dca:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8000dce:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 8000dd2:	4a5f      	ldr	r2, [pc, #380]	@ (8000f50 <LCD_ShowChar+0x1f8>)
 8000dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000dd8:	b2b6      	uxth	r6, r6
 8000dda:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000de0:	4643      	mov	r3, r8
 8000de2:	fa5f f883 	uxtb.w	r8, r3
		for(t=0;t<size;t++)
 8000de6:	4544      	cmp	r4, r8
 8000de8:	d956      	bls.n	8000e98 <LCD_ShowChar+0x140>
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000dea:	2c0c      	cmp	r4, #12
 8000dec:	f102 0e08 	add.w	lr, r2, #8
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000df0:	ea4f 0858 	mov.w	r8, r8, lsr #1
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000df4:	bf08      	it	eq
 8000df6:	f81a 0003 	ldrbeq.w	r0, [sl, r3]
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8000dfa:	fa1f fe8e 	uxth.w	lr, lr
 8000dfe:	bf18      	it	ne
 8000e00:	f819 0003 	ldrbne.w	r0, [r9, r3]
				if(temp&0x80)
 8000e04:	0605      	lsls	r5, r0, #24
				y++;
 8000e06:	f102 0201 	add.w	r2, r2, #1
				temp<<=1;
 8000e0a:	ea4f 0040 	mov.w	r0, r0, lsl #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000e0e:	bf48      	it	mi
 8000e10:	69fd      	ldrmi	r5, [r7, #28]
				y++;
 8000e12:	b292      	uxth	r2, r2
				temp<<=1;
 8000e14:	b2c0      	uxtb	r0, r0
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000e16:	bf44      	itt	mi
 8000e18:	fb01 8b05 	mlami	fp, r1, r5, r8
 8000e1c:	697d      	ldrmi	r5, [r7, #20]
				count ++;
 8000e1e:	f101 0101 	add.w	r1, r1, #1
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8000e22:	bf48      	it	mi
 8000e24:	f825 601b 	strhmi.w	r6, [r5, fp, lsl #1]
				count ++;
 8000e28:	b289      	uxth	r1, r1
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000e2a:	6a3d      	ldr	r5, [r7, #32]
				if(count >= size) count =0;
 8000e2c:	428c      	cmp	r4, r1
 8000e2e:	bf98      	it	ls
 8000e30:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000e32:	42aa      	cmp	r2, r5
 8000e34:	d23c      	bcs.n	8000eb0 <LCD_ShowChar+0x158>
				if((y-y0)==size)
 8000e36:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000e38:	eba2 0b05 	sub.w	fp, r2, r5
 8000e3c:	455c      	cmp	r4, fp
 8000e3e:	d17e      	bne.n	8000f3e <LCD_ShowChar+0x1e6>
					x++;
 8000e40:	f10c 0c01 	add.w	ip, ip, #1
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
					x++;
 8000e46:	fa1f fc8c 	uxth.w	ip, ip
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000e4a:	4594      	cmp	ip, r2
 8000e4c:	d230      	bcs.n	8000eb0 <LCD_ShowChar+0x158>
					y=y0;
 8000e4e:	46ae      	mov	lr, r5
		for(t=0;t<size;t++)
 8000e50:	3301      	adds	r3, #1
	count = 0;
 8000e52:	4672      	mov	r2, lr
 8000e54:	e7c5      	b.n	8000de2 <LCD_ShowChar+0x8a>
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000e56:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <LCD_ShowChar+0x1fc>)
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000e58:	4640      	mov	r0, r8
 8000e5a:	4641      	mov	r1, r8
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000e5c:	8812      	ldrh	r2, [r2, #0]
 8000e5e:	ba52      	rev16	r2, r2
 8000e60:	b292      	uxth	r2, r2
 8000e62:	607a      	str	r2, [r7, #4]
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	ba52      	rev16	r2, r2
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	60ba      	str	r2, [r7, #8]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e6e:	603a      	str	r2, [r7, #0]
 8000e70:	4a36      	ldr	r2, [pc, #216]	@ (8000f4c <LCD_ShowChar+0x1f4>)
 8000e72:	eb02 1a03 	add.w	sl, r2, r3, lsl #4
 8000e76:	4a36      	ldr	r2, [pc, #216]	@ (8000f50 <LCD_ShowChar+0x1f8>)
 8000e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e7c:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	623a      	str	r2, [r7, #32]
	count = 0;
 8000e86:	4642      	mov	r2, r8
 8000e88:	fa5f fe80 	uxtb.w	lr, r0
		for(t=0;t<size;t++)
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d318      	bcc.n	8000ec2 <LCD_ShowChar+0x16a>
 8000e90:	b111      	cbz	r1, 8000e98 <LCD_ShowChar+0x140>
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <LCD_ShowChar+0x200>)
 8000e94:	f8a3 8000 	strh.w	r8, [r3]
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8000e98:	2c0c      	cmp	r4, #12
 8000e9a:	482b      	ldr	r0, [pc, #172]	@ (8000f48 <LCD_ShowChar+0x1f0>)
 8000e9c:	bf14      	ite	ne
 8000e9e:	2308      	movne	r3, #8
 8000ea0:	2306      	moveq	r3, #6
 8000ea2:	e9cd 3400 	strd	r3, r4, [sp]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	f000 fc3e 	bl	800172c <ST7735_FillRGBRect>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <LCD_ShowChar+0x200>)
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}   
 8000eba:	3734      	adds	r7, #52	@ 0x34
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000ec2:	2c0c      	cmp	r4, #12
 8000ec4:	f103 0c08 	add.w	ip, r3, #8
				write[count][t/2]=POINT_COLOR;
 8000ec8:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8000ecc:	bf08      	it	eq
 8000ece:	f81b 1000 	ldrbeq.w	r1, [fp, r0]
			else temp=asc2_1608[num][t];		 //����1608����
 8000ed2:	fa1f fc8c 	uxth.w	ip, ip
 8000ed6:	bf18      	it	ne
 8000ed8:	f81a 1000 	ldrbne.w	r1, [sl, r0]
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000edc:	f011 0f80 	tst.w	r1, #128	@ 0x80
				y++;
 8000ee0:	f103 0301 	add.w	r3, r3, #1
				temp<<=1;
 8000ee4:	ea4f 0141 	mov.w	r1, r1, lsl #1
				y++;
 8000ee8:	b29b      	uxth	r3, r3
				temp<<=1;
 8000eea:	b2c9      	uxtb	r1, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000eec:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 8000ef0:	bf18      	it	ne
 8000ef2:	46a8      	movne	r8, r5
				write[count][t/2]=POINT_COLOR;
 8000ef4:	69fd      	ldr	r5, [r7, #28]
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000ef6:	bf08      	it	eq
 8000ef8:	46b0      	moveq	r8, r6
				write[count][t/2]=POINT_COLOR;
 8000efa:	fb02 e905 	mla	r9, r2, r5, lr
 8000efe:	697d      	ldr	r5, [r7, #20]
				count ++;
 8000f00:	3201      	adds	r2, #1
				write[count][t/2]=POINT_COLOR;
 8000f02:	f825 8019 	strh.w	r8, [r5, r9, lsl #1]
				count ++;
 8000f06:	b292      	uxth	r2, r2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f08:	683d      	ldr	r5, [r7, #0]
				if(count >= size) count =0;
 8000f0a:	4294      	cmp	r4, r2
 8000f0c:	bf98      	it	ls
 8000f0e:	2200      	movls	r2, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f10:	42ab      	cmp	r3, r5
 8000f12:	d2cd      	bcs.n	8000eb0 <LCD_ShowChar+0x158>
				if((y-y0)==size)
 8000f14:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000f16:	eba3 0905 	sub.w	r9, r3, r5
 8000f1a:	454c      	cmp	r4, r9
 8000f1c:	d10c      	bne.n	8000f38 <LCD_ShowChar+0x1e0>
					x++;
 8000f1e:	6a3e      	ldr	r6, [r7, #32]
 8000f20:	3601      	adds	r6, #1
 8000f22:	b2b3      	uxth	r3, r6
 8000f24:	623b      	str	r3, [r7, #32]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000f26:	6a39      	ldr	r1, [r7, #32]
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d2c0      	bcs.n	8000eb0 <LCD_ShowChar+0x158>
					y=y0;
 8000f2e:	46ac      	mov	ip, r5
		for(t=0;t<size;t++)
 8000f30:	3001      	adds	r0, #1
	count = 0;
 8000f32:	4663      	mov	r3, ip
 8000f34:	2101      	movs	r1, #1
 8000f36:	e7a7      	b.n	8000e88 <LCD_ShowChar+0x130>
			for(t1=0;t1<8;t1++)
 8000f38:	4563      	cmp	r3, ip
 8000f3a:	d1cf      	bne.n	8000edc <LCD_ShowChar+0x184>
 8000f3c:	e7f8      	b.n	8000f30 <LCD_ShowChar+0x1d8>
			for(t1=0;t1<8;t1++)
 8000f3e:	4596      	cmp	lr, r2
 8000f40:	f47f af60 	bne.w	8000e04 <LCD_ShowChar+0xac>
 8000f44:	e784      	b.n	8000e50 <LCD_ShowChar+0xf8>
 8000f46:	bf00      	nop
 8000f48:	240002b0 	.word	0x240002b0
 8000f4c:	0800d61c 	.word	0x0800d61c
 8000f50:	0800dc0c 	.word	0x0800dc0c
 8000f54:	240002aa 	.word	0x240002aa
 8000f58:	24000000 	.word	0x24000000

08000f5c <LCD_ShowString>:
{         
 8000f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	width+=x;
 8000f60:	4402      	add	r2, r0
{         
 8000f62:	b085      	sub	sp, #20
 8000f64:	461f      	mov	r7, r3
 8000f66:	4604      	mov	r4, r0
 8000f68:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	width+=x;
 8000f6c:	b296      	uxth	r6, r2
	height+=y;
 8000f6e:	440f      	add	r7, r1
 8000f70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
{         
 8000f72:	460d      	mov	r5, r1
        x+=size/2;
 8000f74:	ea4f 0953 	mov.w	r9, r3, lsr #1
	height+=y;
 8000f78:	b2bf      	uxth	r7, r7
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000f7a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000f7e:	fa5f fa80 	uxtb.w	sl, r0
        LCD_ShowChar(x,y,*p,size,0);
 8000f82:	f04f 0b00 	mov.w	fp, #0
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000f86:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8000f8a:	f1a2 0120 	sub.w	r1, r2, #32
 8000f8e:	295e      	cmp	r1, #94	@ 0x5e
 8000f90:	d902      	bls.n	8000f98 <LCD_ShowString+0x3c>
}
 8000f92:	b005      	add	sp, #20
 8000f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(x>=width){x=x0;y+=size;}
 8000f98:	42b4      	cmp	r4, r6
 8000f9a:	bf22      	ittt	cs
 8000f9c:	18ed      	addcs	r5, r5, r3
 8000f9e:	4654      	movcs	r4, sl
 8000fa0:	b2ad      	uxthcs	r5, r5
        if(y>=height)break;//�˳�
 8000fa2:	42bd      	cmp	r5, r7
 8000fa4:	d2f5      	bcs.n	8000f92 <LCD_ShowString+0x36>
        LCD_ShowChar(x,y,*p,size,0);
 8000fa6:	4620      	mov	r0, r4
        x+=size/2;
 8000fa8:	444c      	add	r4, r9
        LCD_ShowChar(x,y,*p,size,0);
 8000faa:	4629      	mov	r1, r5
 8000fac:	f8cd b000 	str.w	fp, [sp]
 8000fb0:	9303      	str	r3, [sp, #12]
        x+=size/2;
 8000fb2:	b2a4      	uxth	r4, r4
        LCD_ShowChar(x,y,*p,size,0);
 8000fb4:	f7ff fed0 	bl	8000d58 <LCD_ShowChar>
        x+=size/2;
 8000fb8:	9b03      	ldr	r3, [sp, #12]
        p++;
 8000fba:	e7e4      	b.n	8000f86 <LCD_ShowString+0x2a>

08000fbc <LCD_LoadScreen>:
{
 8000fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	4c4f      	ldr	r4, [pc, #316]	@ (8001100 <LCD_LoadScreen+0x144>)
{
 8000fc4:	b089      	sub	sp, #36	@ 0x24
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000fc6:	4e4f      	ldr	r6, [pc, #316]	@ (8001104 <LCD_LoadScreen+0x148>)
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE;
 8000fc8:	60a3      	str	r3, [r4, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000fce:	494e      	ldr	r1, [pc, #312]	@ (8001108 <LCD_LoadScreen+0x14c>)
 8000fd0:	484e      	ldr	r0, [pc, #312]	@ (800110c <LCD_LoadScreen+0x150>)
	ST7735Ctx.Panel = HannStar_Panel;
 8000fd2:	81a3      	strh	r3, [r4, #12]
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000fd4:	f000 ff42 	bl	8001e5c <ST7735_RegisterBusIO>
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000fd8:	4f4d      	ldr	r7, [pc, #308]	@ (8001110 <LCD_LoadScreen+0x154>)
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000fda:	4622      	mov	r2, r4
 8000fdc:	6833      	ldr	r3, [r6, #0]
 8000fde:	2105      	movs	r1, #5
 8000fe0:	484a      	ldr	r0, [pc, #296]	@ (800110c <LCD_LoadScreen+0x150>)
 8000fe2:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8000fe4:	68b3      	ldr	r3, [r6, #8]
 8000fe6:	494b      	ldr	r1, [pc, #300]	@ (8001114 <LCD_LoadScreen+0x158>)
 8000fe8:	4848      	ldr	r0, [pc, #288]	@ (800110c <LCD_LoadScreen+0x150>)
 8000fea:	4798      	blx	r3
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000fec:	2200      	movs	r2, #0
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001124 <LCD_LoadScreen+0x168>
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8000ff4:	4611      	mov	r1, r2
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8000ff8:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
 8000ffa:	4b47      	ldr	r3, [pc, #284]	@ (8001118 <LCD_LoadScreen+0x15c>)
 8000ffc:	4843      	ldr	r0, [pc, #268]	@ (800110c <LCD_LoadScreen+0x150>)
 8000ffe:	47a8      	blx	r5
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001000:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8001120 <LCD_LoadScreen+0x164>
  uint32_t tick = get_tick();
 8001004:	f001 ff64 	bl	8002ed0 <HAL_GetTick>
 8001008:	4605      	mov	r5, r0
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800100a:	eba8 0800 	sub.w	r8, r8, r0
 800100e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001012:	4648      	mov	r0, r9
 8001014:	f003 fa90 	bl	8004538 <HAL_GPIO_ReadPin>
 8001018:	2801      	cmp	r0, #1
 800101a:	d04f      	beq.n	80010bc <LCD_LoadScreen+0x100>
		delay_ms(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f001 ff5d 	bl	8002edc <HAL_Delay>
		if (get_tick() - tick <= 1000)
 8001022:	f001 ff55 	bl	8002ed0 <HAL_GetTick>
 8001026:	1b40      	subs	r0, r0, r5
 8001028:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800102c:	d80b      	bhi.n	8001046 <LCD_LoadScreen+0x8a>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 800102e:	f001 ff4f 	bl	8002ed0 <HAL_GetTick>
 8001032:	2364      	movs	r3, #100	@ 0x64
 8001034:	1b40      	subs	r0, r0, r5
 8001036:	4358      	muls	r0, r3
 8001038:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103c:	fbb0 f0f3 	udiv	r0, r0, r3
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8001044:	e7e3      	b.n	800100e <LCD_LoadScreen+0x52>
		else if (get_tick() - tick <= 3000)
 8001046:	f001 ff43 	bl	8002ed0 <HAL_GetTick>
 800104a:	f640 3ab8 	movw	sl, #3000	@ 0xbb8
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	4550      	cmp	r0, sl
 8001052:	d82e      	bhi.n	80010b2 <LCD_LoadScreen+0xf6>
			sprintf((char *)&text, "%lu", (get_tick() - tick - 1000) / 10);
 8001054:	f001 ff3c 	bl	8002ed0 <HAL_GetTick>
 8001058:	f10d 0a0c 	add.w	sl, sp, #12
 800105c:	4440      	add	r0, r8
 800105e:	220a      	movs	r2, #10
 8001060:	492e      	ldr	r1, [pc, #184]	@ (800111c <LCD_LoadScreen+0x160>)
 8001062:	fbb0 f2f2 	udiv	r2, r0, r2
 8001066:	4650      	mov	r0, sl
 8001068:	f00a f84c 	bl	800b104 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 800106c:	8822      	ldrh	r2, [r4, #0]
 800106e:	2310      	movs	r3, #16
 8001070:	2101      	movs	r1, #1
 8001072:	f1a2 001e 	sub.w	r0, r2, #30
 8001076:	f8cd a004 	str.w	sl, [sp, #4]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	b280      	uxth	r0, r0
 800107e:	f7ff ff6d 	bl	8000f5c <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	f8d6 a038 	ldr.w	sl, [r6, #56]	@ 0x38
 8001088:	f1a3 0b03 	sub.w	fp, r3, #3
 800108c:	f001 ff20 	bl	8002ed0 <HAL_GetTick>
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	4440      	add	r0, r8
 8001094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001098:	2100      	movs	r1, #0
 800109a:	4358      	muls	r0, r3
 800109c:	2303      	movs	r3, #3
 800109e:	e9cd 3200 	strd	r3, r2, [sp]
 80010a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010a6:	465a      	mov	r2, fp
 80010a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <LCD_LoadScreen+0x150>)
 80010ae:	47d0      	blx	sl
 80010b0:	e7ad      	b.n	800100e <LCD_LoadScreen+0x52>
		else if (get_tick() - tick > 3000)
 80010b2:	f001 ff0d 	bl	8002ed0 <HAL_GetTick>
 80010b6:	1b40      	subs	r0, r0, r5
 80010b8:	4550      	cmp	r0, sl
 80010ba:	d9a8      	bls.n	800100e <LCD_LoadScreen+0x52>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80010bc:	4d18      	ldr	r5, [pc, #96]	@ (8001120 <LCD_LoadScreen+0x164>)
 80010be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c2:	4628      	mov	r0, r5
 80010c4:	f003 fa38 	bl	8004538 <HAL_GPIO_ReadPin>
 80010c8:	2801      	cmp	r0, #1
 80010ca:	d014      	beq.n	80010f6 <LCD_LoadScreen+0x13a>
	LCD_Light(0, 300);
 80010cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fe03 	bl	8000cdc <LCD_Light>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80010d6:	2200      	movs	r2, #0
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LCD_LoadScreen+0x150>)
 80010da:	9201      	str	r2, [sp, #4]
 80010dc:	4611      	mov	r1, r2
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	6bb5      	ldr	r5, [r6, #56]	@ 0x38
 80010e6:	47a8      	blx	r5
	LCD_Light(100, 200);
 80010e8:	21c8      	movs	r1, #200	@ 0xc8
 80010ea:	2064      	movs	r0, #100	@ 0x64
 80010ec:	f7ff fdf6 	bl	8000cdc <LCD_Light>
}
 80010f0:	b009      	add	sp, #36	@ 0x24
 80010f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delay_ms(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 fef0 	bl	8002edc <HAL_Delay>
 80010fc:	e7df      	b.n	80010be <LCD_LoadScreen+0x102>
 80010fe:	bf00      	nop
 8001100:	240007e8 	.word	0x240007e8
 8001104:	24000024 	.word	0x24000024
 8001108:	24000004 	.word	0x24000004
 800110c:	240002b0 	.word	0x240002b0
 8001110:	24000bac 	.word	0x24000bac
 8001114:	240002ac 	.word	0x240002ac
 8001118:	0800e080 	.word	0x0800e080
 800111c:	0800d447 	.word	0x0800d447
 8001120:	58020800 	.word	0x58020800
 8001124:	fffffc18 	.word	0xfffffc18

08001128 <ST7735_DeInit>:
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
  (void)(pObj);

  return ST7735_OK;
}
 8001128:	2000      	movs	r0, #0
 800112a:	4770      	bx	lr

0800112c <ST7735_SetBrightness>:
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
}
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	4770      	bx	lr

08001132 <ST7735_GetBrightness>:
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
}
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	4770      	bx	lr

08001138 <ST7735_GetOrientation>:
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{

  *Orientation = ST7735Ctx.Orientation;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <ST7735_GetOrientation+0xc>)

  return ST7735_OK;
}
 800113a:	2000      	movs	r0, #0
  *Orientation = ST7735Ctx.Orientation;
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	600b      	str	r3, [r1, #0]
}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	240007e8 	.word	0x240007e8

08001148 <ST7735_GetXSize>:
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8001148:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <ST7735_GetXSize+0xc>)

  return ST7735_OK;
}
 800114a:	2000      	movs	r0, #0
  *XSize = ST7735Ctx.Width;
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	600b      	str	r3, [r1, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	240007e8 	.word	0x240007e8

08001158 <ST7735_GetYSize>:
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <ST7735_GetYSize+0xc>)

  return ST7735_OK;
}
 800115a:	2000      	movs	r0, #0
  *YSize = ST7735Ctx.Height;
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	600b      	str	r3, [r1, #0]
}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	240007e8 	.word	0x240007e8

08001168 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8001168:	4603      	mov	r3, r0
 800116a:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.ReadReg(Reg, pData);
 800116c:	4611      	mov	r1, r2
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4718      	bx	r3

08001172 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8001172:	b410      	push	{r4}
 8001174:	4604      	mov	r4, r0
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.WriteReg(Reg, pData, Length);
 800117a:	461a      	mov	r2, r3
 800117c:	68e4      	ldr	r4, [r4, #12]
 800117e:	4623      	mov	r3, r4
}
 8001180:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(Reg, pData, Length);
 8001184:	4718      	bx	r3

08001186 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001186:	4603      	mov	r3, r0
 8001188:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.SendData(pData, Length);
 800118a:	4611      	mov	r1, r2
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4718      	bx	r3

08001190 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001190:	4603      	mov	r3, r0
 8001192:	4608      	mov	r0, r1
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.RecvData(pData, Length);
 8001194:	4611      	mov	r1, r2
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4718      	bx	r3
	...

0800119c <ST7735_SetDisplayWindow>:
{
 800119c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80011a0:	4616      	mov	r6, r2
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80011a2:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <ST7735_SetDisplayWindow+0x140>)
{
 80011a4:	460f      	mov	r7, r1
 80011a6:	4699      	mov	r9, r3
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80011a8:	6891      	ldr	r1, [r2, #8]
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80011aa:	7b53      	ldrb	r3, [r2, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80011ac:	2901      	cmp	r1, #1
 80011ae:	f200 8082 	bhi.w	80012b6 <ST7735_SetDisplayWindow+0x11a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d178      	bne.n	80012a8 <ST7735_SetDisplayWindow+0x10c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80011b6:	7b13      	ldrb	r3, [r2, #12]
 80011b8:	b913      	cbnz	r3, 80011c0 <ST7735_SetDisplayWindow+0x24>
				Xpos += 26;
 80011ba:	371a      	adds	r7, #26
				Ypos += 1;
 80011bc:	3601      	adds	r6, #1
 80011be:	e000      	b.n	80011c2 <ST7735_SetDisplayWindow+0x26>
				Xpos += 24;
 80011c0:	3718      	adds	r7, #24
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80011c2:	f100 0520 	add.w	r5, r0, #32
 80011c6:	f10d 0207 	add.w	r2, sp, #7
 80011ca:	2300      	movs	r3, #0
 80011cc:	212a      	movs	r1, #42	@ 0x2a
 80011ce:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 80011d0:	fa5f f887 	uxtb.w	r8, r7
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80011d4:	f000 fe6d 	bl	8001eb2 <st7735_write_reg>
 80011d8:	4604      	mov	r4, r0
  tmp = (uint8_t)(Xpos >> 8U);
 80011da:	0a3b      	lsrs	r3, r7, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011dc:	f10d 0107 	add.w	r1, sp, #7
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 80011e0:	f109 39ff 	add.w	r9, r9, #4294967295
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos >> 8U);
 80011e8:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011ec:	f000 fe68 	bl	8001ec0 <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011f0:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011f4:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 80011fa:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80011fe:	f000 fe5f 	bl	8001ec0 <st7735_send_data>
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001202:	eb09 0107 	add.w	r1, r9, r7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001206:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001208:	2201      	movs	r2, #1
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 800120a:	0a09      	lsrs	r1, r1, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800120c:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 800120e:	44c8      	add	r8, r9
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001210:	b2f7      	uxtb	r7, r6
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001212:	f88d 1007 	strb.w	r1, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001216:	f10d 0107 	add.w	r1, sp, #7
 800121a:	f000 fe51 	bl	8001ec0 <st7735_send_data>
 800121e:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001220:	f10d 0107 	add.w	r1, sp, #7
 8001224:	2201      	movs	r2, #1
 8001226:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001228:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800122c:	f000 fe48 	bl	8001ec0 <st7735_send_data>
 8001230:	4404      	add	r4, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001232:	f10d 0207 	add.w	r2, sp, #7
 8001236:	2300      	movs	r3, #0
 8001238:	212b      	movs	r1, #43	@ 0x2b
 800123a:	4628      	mov	r0, r5
 800123c:	f000 fe39 	bl	8001eb2 <st7735_write_reg>
 8001240:	4404      	add	r4, r0
  tmp = (uint8_t)(Ypos >> 8U);
 8001242:	0a33      	lsrs	r3, r6, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001244:	f10d 0107 	add.w	r1, sp, #7
 8001248:	2201      	movs	r2, #1
 800124a:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos >> 8U);
 800124c:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001250:	f000 fe36 	bl	8001ec0 <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001254:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001258:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos & 0xFFU);
 800125e:	f88d 7007 	strb.w	r7, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001262:	f000 fe2d 	bl	8001ec0 <st7735_send_data>
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001268:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800126a:	f10d 0107 	add.w	r1, sp, #7
 800126e:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001270:	f103 38ff 	add.w	r8, r3, #4294967295
 8001274:	eb08 0206 	add.w	r2, r8, r6
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001278:	4447      	add	r7, r8
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800127a:	0a12      	lsrs	r2, r2, #8
 800127c:	f88d 2007 	strb.w	r2, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	f000 fe1d 	bl	8001ec0 <st7735_send_data>
 8001286:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	f10d 0107 	add.w	r1, sp, #7
 800128e:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001290:	f88d 7007 	strb.w	r7, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001294:	f000 fe14 	bl	8001ec0 <st7735_send_data>
  if(ret != ST7735_OK)
 8001298:	42c4      	cmn	r4, r0
}
 800129a:	bf14      	ite	ne
 800129c:	f04f 30ff 	movne.w	r0, #4294967295
 80012a0:	2000      	moveq	r0, #0
 80012a2:	b003      	add	sp, #12
 80012a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d18a      	bne.n	80011c2 <ST7735_SetDisplayWindow+0x26>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80012ac:	7b13      	ldrb	r3, [r2, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d187      	bne.n	80011c2 <ST7735_SetDisplayWindow+0x26>
				Xpos += 2;
 80012b2:	3702      	adds	r7, #2
 80012b4:	e782      	b.n	80011bc <ST7735_SetDisplayWindow+0x20>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <ST7735_SetDisplayWindow+0x12c>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80012ba:	7b13      	ldrb	r3, [r2, #12]
				Xpos += 1;
 80012bc:	3701      	adds	r7, #1
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80012be:	b90b      	cbnz	r3, 80012c4 <ST7735_SetDisplayWindow+0x128>
				Ypos += 26;
 80012c0:	361a      	adds	r6, #26
 80012c2:	e77e      	b.n	80011c2 <ST7735_SetDisplayWindow+0x26>
				Ypos += 24;
 80012c4:	3618      	adds	r6, #24
 80012c6:	e77c      	b.n	80011c2 <ST7735_SetDisplayWindow+0x26>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	f47f af7a 	bne.w	80011c2 <ST7735_SetDisplayWindow+0x26>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80012ce:	7b13      	ldrb	r3, [r2, #12]
 80012d0:	2b01      	cmp	r3, #1
				Xpos += 1;
 80012d2:	bf04      	itt	eq
 80012d4:	3701      	addeq	r7, #1
				Ypos += 2;
 80012d6:	3602      	addeq	r6, #2
 80012d8:	e773      	b.n	80011c2 <ST7735_SetDisplayWindow+0x26>
 80012da:	bf00      	nop
 80012dc:	240007e8 	.word	0x240007e8

080012e0 <ST7735_SetOrientation>:
{
 80012e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80012e2:	688a      	ldr	r2, [r1, #8]
{
 80012e4:	4605      	mov	r5, r0
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80012e6:	7b4b      	ldrb	r3, [r1, #13]
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	4c23      	ldr	r4, [pc, #140]	@ (8001378 <ST7735_SetOrientation+0x98>)
 80012ec:	d831      	bhi.n	8001352 <ST7735_SetOrientation+0x72>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d12a      	bne.n	8001348 <ST7735_SetOrientation+0x68>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 80012f2:	2050      	movs	r0, #80	@ 0x50
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80012f4:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80012f6:	20a0      	movs	r0, #160	@ 0xa0
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80012f8:	6060      	str	r0, [r4, #4]
	ST7735Ctx.Orientation = pDriver->Orientation;
 80012fa:	60a2      	str	r2, [r4, #8]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80012fc:	4628      	mov	r0, r5
	ST7735Ctx.Panel = pDriver->Panel;
 80012fe:	7b0a      	ldrb	r2, [r1, #12]
	ST7735Ctx.Type = pDriver->Type;
 8001300:	7363      	strb	r3, [r4, #13]
	ST7735Ctx.Panel = pDriver->Panel;
 8001302:	7322      	strb	r2, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8001304:	2200      	movs	r2, #0
 8001306:	6863      	ldr	r3, [r4, #4]
 8001308:	4611      	mov	r1, r2
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	f7ff ff45 	bl	800119c <ST7735_SetDisplayWindow>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001312:	7b22      	ldrb	r2, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8001314:	4606      	mov	r6, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <ST7735_SetOrientation+0x9c>)
 8001318:	bb42      	cbnz	r2, 800136c <ST7735_SetOrientation+0x8c>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800131a:	68a2      	ldr	r2, [r4, #8]
 800131c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001320:	791b      	ldrb	r3, [r3, #4]
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	f88d 300f 	strb.w	r3, [sp, #15]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 800132a:	f10d 020f 	add.w	r2, sp, #15
 800132e:	2301      	movs	r3, #1
 8001330:	2136      	movs	r1, #54	@ 0x36
 8001332:	f105 0020 	add.w	r0, r5, #32
 8001336:	f000 fdbc 	bl	8001eb2 <st7735_write_reg>
  if(ret != ST7735_OK)
 800133a:	42c6      	cmn	r6, r0
}
 800133c:	bf14      	ite	ne
 800133e:	f04f 30ff 	movne.w	r0, #4294967295
 8001342:	2000      	moveq	r0, #0
 8001344:	b004      	add	sp, #16
 8001346:	bd70      	pop	{r4, r5, r6, pc}
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8001348:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800134c:	d1d5      	bne.n	80012fa <ST7735_SetOrientation+0x1a>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 800134e:	2080      	movs	r0, #128	@ 0x80
 8001350:	e7d0      	b.n	80012f4 <ST7735_SetOrientation+0x14>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001352:	2b01      	cmp	r3, #1
 8001354:	d103      	bne.n	800135e <ST7735_SetOrientation+0x7e>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8001356:	20a0      	movs	r0, #160	@ 0xa0
 8001358:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800135a:	2050      	movs	r0, #80	@ 0x50
 800135c:	e7cc      	b.n	80012f8 <ST7735_SetOrientation+0x18>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 800135e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8001362:	d1ca      	bne.n	80012fa <ST7735_SetOrientation+0x1a>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8001364:	20a0      	movs	r0, #160	@ 0xa0
 8001366:	6020      	str	r0, [r4, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8001368:	2080      	movs	r0, #128	@ 0x80
 800136a:	e7c5      	b.n	80012f8 <ST7735_SetOrientation+0x18>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800136c:	68a2      	ldr	r2, [r4, #8]
 800136e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	e7d7      	b.n	8001326 <ST7735_SetOrientation+0x46>
 8001376:	bf00      	nop
 8001378:	240007e8 	.word	0x240007e8
 800137c:	080144cc 	.word	0x080144cc

08001380 <ST7735_SetCursor>:
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <ST7735_SetCursor+0xdc>)
{
 8001382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001384:	460d      	mov	r5, r1
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001386:	6899      	ldr	r1, [r3, #8]
{
 8001388:	4614      	mov	r4, r2
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 800138a:	7b5a      	ldrb	r2, [r3, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800138c:	2901      	cmp	r1, #1
 800138e:	d854      	bhi.n	800143a <ST7735_SetCursor+0xba>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001390:	2a01      	cmp	r2, #1
 8001392:	d14b      	bne.n	800142c <ST7735_SetCursor+0xac>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001394:	7b1b      	ldrb	r3, [r3, #12]
 8001396:	b913      	cbnz	r3, 800139e <ST7735_SetCursor+0x1e>
				Xpos += 26;
 8001398:	351a      	adds	r5, #26
				Ypos += 1;
 800139a:	3401      	adds	r4, #1
 800139c:	e000      	b.n	80013a0 <ST7735_SetCursor+0x20>
				Xpos += 24;
 800139e:	3518      	adds	r5, #24
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80013a0:	f100 0720 	add.w	r7, r0, #32
 80013a4:	f10d 0207 	add.w	r2, sp, #7
 80013a8:	2300      	movs	r3, #0
 80013aa:	212a      	movs	r1, #42	@ 0x2a
 80013ac:	4638      	mov	r0, r7
 80013ae:	f000 fd80 	bl	8001eb2 <st7735_write_reg>
 80013b2:	4606      	mov	r6, r0
  tmp = (uint8_t)(Xpos >> 8U);
 80013b4:	0a2b      	lsrs	r3, r5, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013b6:	f10d 0107 	add.w	r1, sp, #7
 80013ba:	2201      	movs	r2, #1
 80013bc:	4638      	mov	r0, r7
  tmp = (uint8_t)(Xpos >> 8U);
 80013be:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013c2:	f000 fd7d 	bl	8001ec0 <st7735_send_data>
 80013c6:	4406      	add	r6, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013c8:	f10d 0107 	add.w	r1, sp, #7
 80013cc:	2201      	movs	r2, #1
 80013ce:	4638      	mov	r0, r7
  tmp = (uint8_t)(Xpos & 0xFFU);
 80013d0:	f88d 5007 	strb.w	r5, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013d4:	f000 fd74 	bl	8001ec0 <st7735_send_data>
 80013d8:	1835      	adds	r5, r6, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80013da:	f10d 0207 	add.w	r2, sp, #7
 80013de:	2300      	movs	r3, #0
 80013e0:	212b      	movs	r1, #43	@ 0x2b
 80013e2:	4638      	mov	r0, r7
 80013e4:	f000 fd65 	bl	8001eb2 <st7735_write_reg>
 80013e8:	4405      	add	r5, r0
  tmp = (uint8_t)(Ypos >> 8U);
 80013ea:	0a23      	lsrs	r3, r4, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013ec:	f10d 0107 	add.w	r1, sp, #7
 80013f0:	2201      	movs	r2, #1
 80013f2:	4638      	mov	r0, r7
  tmp = (uint8_t)(Ypos >> 8U);
 80013f4:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013f8:	f000 fd62 	bl	8001ec0 <st7735_send_data>
 80013fc:	4405      	add	r5, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013fe:	f10d 0107 	add.w	r1, sp, #7
 8001402:	2201      	movs	r2, #1
 8001404:	4638      	mov	r0, r7
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001406:	f88d 4007 	strb.w	r4, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800140a:	f000 fd59 	bl	8001ec0 <st7735_send_data>
 800140e:	4405      	add	r5, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001410:	2300      	movs	r3, #0
 8001412:	f10d 0207 	add.w	r2, sp, #7
 8001416:	212c      	movs	r1, #44	@ 0x2c
 8001418:	4638      	mov	r0, r7
 800141a:	f000 fd4a 	bl	8001eb2 <st7735_write_reg>
  if(ret != ST7735_OK)
 800141e:	42c5      	cmn	r5, r0
}
 8001420:	bf14      	ite	ne
 8001422:	f04f 30ff 	movne.w	r0, #4294967295
 8001426:	2000      	moveq	r0, #0
 8001428:	b003      	add	sp, #12
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800142c:	2a02      	cmp	r2, #2
 800142e:	d1b7      	bne.n	80013a0 <ST7735_SetCursor+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001430:	7b1b      	ldrb	r3, [r3, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d1b4      	bne.n	80013a0 <ST7735_SetCursor+0x20>
				Xpos += 2;
 8001436:	3502      	adds	r5, #2
 8001438:	e7af      	b.n	800139a <ST7735_SetCursor+0x1a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 800143a:	2a01      	cmp	r2, #1
 800143c:	d106      	bne.n	800144c <ST7735_SetCursor+0xcc>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	b913      	cbnz	r3, 8001448 <ST7735_SetCursor+0xc8>
				Xpos += 1;
 8001442:	3501      	adds	r5, #1
				Ypos += 26;
 8001444:	341a      	adds	r4, #26
 8001446:	e7ab      	b.n	80013a0 <ST7735_SetCursor+0x20>
				Ypos += 24;
 8001448:	3418      	adds	r4, #24
 800144a:	e7a9      	b.n	80013a0 <ST7735_SetCursor+0x20>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800144c:	2a02      	cmp	r2, #2
 800144e:	d1a7      	bne.n	80013a0 <ST7735_SetCursor+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001450:	7b1b      	ldrb	r3, [r3, #12]
 8001452:	2b01      	cmp	r3, #1
				Xpos += 1;
 8001454:	bf04      	itt	eq
 8001456:	3501      	addeq	r5, #1
				Ypos += 2;
 8001458:	3402      	addeq	r4, #2
 800145a:	e7a1      	b.n	80013a0 <ST7735_SetCursor+0x20>
 800145c:	240007e8 	.word	0x240007e8

08001460 <ST7735_DrawBitmap>:
{
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001464:	4c3c      	ldr	r4, [pc, #240]	@ (8001558 <ST7735_DrawBitmap+0xf8>)
{
 8001466:	b085      	sub	sp, #20
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001468:	f8d3 c016 	ldr.w	ip, [r3, #22]
{
 800146c:	4607      	mov	r7, r0
  y_pos = ST7735Ctx.Height - Ypos - height;
 800146e:	6866      	ldr	r6, [r4, #4]
{
 8001470:	468a      	mov	sl, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001472:	f8d3 500a 	ldr.w	r5, [r3, #10]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001476:	1ab6      	subs	r6, r6, r2
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8001478:	f8d3 9002 	ldr.w	r9, [r3, #2]
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800147c:	f8cd c000 	str.w	ip, [sp]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001480:	eba6 060c 	sub.w	r6, r6, ip
  size = size - index;
 8001484:	eba9 0905 	sub.w	r9, r9, r5
  pbmp = pBmp + index;
 8001488:	441d      	add	r5, r3
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800148a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800148e:	4632      	mov	r2, r6
 8001490:	f7ff fe84 	bl	800119c <ST7735_SetDisplayWindow>
 8001494:	b128      	cbz	r0, 80014a2 <ST7735_DrawBitmap+0x42>
    ret = ST7735_ERROR;
 8001496:	f04f 36ff 	mov.w	r6, #4294967295
}
 800149a:	4630      	mov	r0, r6
 800149c:	b005      	add	sp, #20
 800149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80014a2:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800155c <ST7735_DrawBitmap+0xfc>
 80014a6:	68a3      	ldr	r3, [r4, #8]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80014a8:	7b22      	ldrb	r2, [r4, #12]
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80014aa:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80014ae:	b90a      	cbnz	r2, 80014b4 <ST7735_DrawBitmap+0x54>
 80014b0:	f043 0308 	orr.w	r3, r3, #8
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80014b4:	f107 0b20 	add.w	fp, r7, #32
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80014b8:	f88d 300b 	strb.w	r3, [sp, #11]
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80014bc:	f10d 020b 	add.w	r2, sp, #11
 80014c0:	2301      	movs	r3, #1
 80014c2:	2136      	movs	r1, #54	@ 0x36
 80014c4:	4658      	mov	r0, fp
 80014c6:	f000 fcf4 	bl	8001eb2 <st7735_write_reg>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d1e3      	bne.n	8001496 <ST7735_DrawBitmap+0x36>
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 80014ce:	4632      	mov	r2, r6
 80014d0:	4651      	mov	r1, sl
 80014d2:	4638      	mov	r0, r7
 80014d4:	f7ff ff54 	bl	8001380 <ST7735_SetCursor>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d1dc      	bne.n	8001496 <ST7735_DrawBitmap+0x36>
 80014dc:	f105 0a02 	add.w	sl, r5, #2
      }while(counter < size);
 80014e0:	f1c5 25ff 	rsb	r5, r5, #4278255360	@ 0xff00ff00
 80014e4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80014e8:	35fe      	adds	r5, #254	@ 0xfe
        pixel_val[0] = *(pbmp + 1);
 80014ea:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 80014ee:	2202      	movs	r2, #2
 80014f0:	a903      	add	r1, sp, #12
 80014f2:	4658      	mov	r0, fp
        pixel_val[0] = *(pbmp + 1);
 80014f4:	f88d 300c 	strb.w	r3, [sp, #12]
        pixel_val[1] = *(pbmp);
 80014f8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 80014fc:	f88d 300d 	strb.w	r3, [sp, #13]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8001500:	f000 fcde 	bl	8001ec0 <st7735_send_data>
 8001504:	4606      	mov	r6, r0
 8001506:	bb20      	cbnz	r0, 8001552 <ST7735_DrawBitmap+0xf2>
      }while(counter < size);
 8001508:	f10a 0a02 	add.w	sl, sl, #2
 800150c:	eb05 030a 	add.w	r3, r5, sl
 8001510:	4599      	cmp	r9, r3
 8001512:	d8ea      	bhi.n	80014ea <ST7735_DrawBitmap+0x8a>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001514:	68a3      	ldr	r3, [r4, #8]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001516:	7b22      	ldrb	r2, [r4, #12]
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001518:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 800151c:	f898 3004 	ldrb.w	r3, [r8, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001520:	b90a      	cbnz	r2, 8001526 <ST7735_DrawBitmap+0xc6>
 8001522:	f043 0308 	orr.w	r3, r3, #8
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001526:	f10d 020b 	add.w	r2, sp, #11
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800152a:	f88d 300b 	strb.w	r3, [sp, #11]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 800152e:	2136      	movs	r1, #54	@ 0x36
 8001530:	2301      	movs	r3, #1
 8001532:	4658      	mov	r0, fp
 8001534:	f000 fcbd 	bl	8001eb2 <st7735_write_reg>
 8001538:	4602      	mov	r2, r0
 800153a:	2800      	cmp	r0, #0
 800153c:	d1ab      	bne.n	8001496 <ST7735_DrawBitmap+0x36>
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 800153e:	6863      	ldr	r3, [r4, #4]
 8001540:	4601      	mov	r1, r0
 8001542:	4638      	mov	r0, r7
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	f7ff fe28 	bl	800119c <ST7735_SetDisplayWindow>
 800154c:	2800      	cmp	r0, #0
 800154e:	d0a4      	beq.n	800149a <ST7735_DrawBitmap+0x3a>
 8001550:	e7a1      	b.n	8001496 <ST7735_DrawBitmap+0x36>
          ret = ST7735_ERROR;
 8001552:	f04f 36ff 	mov.w	r6, #4294967295
 8001556:	e7dd      	b.n	8001514 <ST7735_DrawBitmap+0xb4>
 8001558:	240007e8 	.word	0x240007e8
 800155c:	080144cc 	.word	0x080144cc

08001560 <ST7735_DrawHLine>:
{
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((Xpos + Length) > ST7735Ctx.Width)
 8001562:	4f14      	ldr	r7, [pc, #80]	@ (80015b4 <ST7735_DrawHLine+0x54>)
{
 8001564:	461c      	mov	r4, r3
  if((Xpos + Length) > ST7735Ctx.Width)
 8001566:	18cb      	adds	r3, r1, r3
{
 8001568:	4605      	mov	r5, r0
  if((Xpos + Length) > ST7735Ctx.Width)
 800156a:	683f      	ldr	r7, [r7, #0]
{
 800156c:	9e06      	ldr	r6, [sp, #24]
  if((Xpos + Length) > ST7735Ctx.Width)
 800156e:	42bb      	cmp	r3, r7
 8001570:	d902      	bls.n	8001578 <ST7735_DrawHLine+0x18>
    ret = ST7735_ERROR;
 8001572:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8001578:	f7ff ff02 	bl	8001380 <ST7735_SetCursor>
 800157c:	4602      	mov	r2, r0
 800157e:	2800      	cmp	r0, #0
 8001580:	d1f7      	bne.n	8001572 <ST7735_DrawHLine+0x12>
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8001582:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <ST7735_DrawHLine+0x58>)
    for(i = 0; i < Length; i++)
 8001588:	42a2      	cmp	r2, r4
 800158a:	f103 0302 	add.w	r3, r3, #2
 800158e:	d10a      	bne.n	80015a6 <ST7735_DrawHLine+0x46>
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	4909      	ldr	r1, [pc, #36]	@ (80015b8 <ST7735_DrawHLine+0x58>)
 8001594:	f105 0020 	add.w	r0, r5, #32
 8001598:	f000 fc92 	bl	8001ec0 <st7735_send_data>
 800159c:	3800      	subs	r0, #0
 800159e:	bf18      	it	ne
 80015a0:	2001      	movne	r0, #1
 80015a2:	4240      	negs	r0, r0
  return ret;
 80015a4:	e7e7      	b.n	8001576 <ST7735_DrawHLine+0x16>
    for(i = 0; i < Length; i++)
 80015a6:	3201      	adds	r2, #1
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80015a8:	f803 1c02 	strb.w	r1, [r3, #-2]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 80015ac:	f803 6c01 	strb.w	r6, [r3, #-1]
    for(i = 0; i < Length; i++)
 80015b0:	e7ea      	b.n	8001588 <ST7735_DrawHLine+0x28>
 80015b2:	bf00      	nop
 80015b4:	240007e8 	.word	0x240007e8
 80015b8:	240002e8 	.word	0x240002e8

080015bc <ST7735_FillRect>:
{
 80015bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80015c0:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 80015c4:	4607      	mov	r7, r0
 80015c6:	4688      	mov	r8, r1
 80015c8:	4614      	mov	r4, r2
 80015ca:	4699      	mov	r9, r3
 80015cc:	4415      	add	r5, r2
  for(i = 0; i < Height; i++)
 80015ce:	42ac      	cmp	r4, r5
 80015d0:	d103      	bne.n	80015da <ST7735_FillRect+0x1e>
  int32_t ret = ST7735_OK;
 80015d2:	2000      	movs	r0, #0
}
 80015d4:	b003      	add	sp, #12
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 80015da:	464b      	mov	r3, r9
 80015dc:	4622      	mov	r2, r4
 80015de:	4641      	mov	r1, r8
 80015e0:	4638      	mov	r0, r7
 80015e2:	9600      	str	r6, [sp, #0]
 80015e4:	f7ff ffbc 	bl	8001560 <ST7735_DrawHLine>
 80015e8:	b908      	cbnz	r0, 80015ee <ST7735_FillRect+0x32>
    y_pos++;
 80015ea:	3401      	adds	r4, #1
  for(i = 0; i < Height; i++)
 80015ec:	e7ef      	b.n	80015ce <ST7735_FillRect+0x12>
      ret = ST7735_ERROR;
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80015f2:	e7ef      	b.n	80015d4 <ST7735_FillRect+0x18>

080015f4 <ST7735_SetPixel>:
{
 80015f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80015f6:	0a1e      	lsrs	r6, r3, #8
{
 80015f8:	4604      	mov	r4, r0
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80015fa:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <ST7735_SetPixel+0x44>)
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8001600:	f8ad 6006 	strh.w	r6, [sp, #6]
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001604:	681e      	ldr	r6, [r3, #0]
 8001606:	428e      	cmp	r6, r1
 8001608:	d803      	bhi.n	8001612 <ST7735_SetPixel+0x1e>
    ret = ST7735_ERROR;
 800160a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800160e:	b002      	add	sp, #8
 8001610:	bd70      	pop	{r4, r5, r6, pc}
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4293      	cmp	r3, r2
 8001616:	d9f8      	bls.n	800160a <ST7735_SetPixel+0x16>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8001618:	f7ff feb2 	bl	8001380 <ST7735_SetCursor>
 800161c:	2800      	cmp	r0, #0
 800161e:	d1f4      	bne.n	800160a <ST7735_SetPixel+0x16>
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8001620:	2202      	movs	r2, #2
 8001622:	f10d 0106 	add.w	r1, sp, #6
 8001626:	f104 0020 	add.w	r0, r4, #32
 800162a:	f000 fc49 	bl	8001ec0 <st7735_send_data>
 800162e:	3800      	subs	r0, #0
 8001630:	bf18      	it	ne
 8001632:	2001      	movne	r0, #1
 8001634:	4240      	negs	r0, r0
  return ret;
 8001636:	e7ea      	b.n	800160e <ST7735_SetPixel+0x1a>
 8001638:	240007e8 	.word	0x240007e8

0800163c <ST7735_DrawVLine>:
{
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((Ypos + Length) > ST7735Ctx.Height)
 800163e:	18d5      	adds	r5, r2, r3
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <ST7735_DrawVLine+0x34>)
{
 8001642:	4606      	mov	r6, r0
 8001644:	460f      	mov	r7, r1
  if((Ypos + Length) > ST7735Ctx.Height)
 8001646:	685b      	ldr	r3, [r3, #4]
{
 8001648:	4614      	mov	r4, r2
  if((Ypos + Length) > ST7735Ctx.Height)
 800164a:	429d      	cmp	r5, r3
 800164c:	d90b      	bls.n	8001666 <ST7735_DrawVLine+0x2a>
    ret = ST7735_ERROR;
 800164e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8001654:	4622      	mov	r2, r4
 8001656:	9b06      	ldr	r3, [sp, #24]
 8001658:	4639      	mov	r1, r7
 800165a:	4630      	mov	r0, r6
 800165c:	3401      	adds	r4, #1
 800165e:	f7ff ffc9 	bl	80015f4 <ST7735_SetPixel>
 8001662:	2800      	cmp	r0, #0
 8001664:	d1f3      	bne.n	800164e <ST7735_DrawVLine+0x12>
    for(counter = 0; counter < Length; counter++)
 8001666:	42a5      	cmp	r5, r4
 8001668:	d1f4      	bne.n	8001654 <ST7735_DrawVLine+0x18>
  int32_t ret = ST7735_OK;
 800166a:	2000      	movs	r0, #0
  return ret;
 800166c:	e7f1      	b.n	8001652 <ST7735_DrawVLine+0x16>
 800166e:	bf00      	nop
 8001670:	240007e8 	.word	0x240007e8

08001674 <ST7735_ReadID>:
{
 8001674:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001676:	f100 0420 	add.w	r4, r0, #32
{
 800167a:	460d      	mov	r5, r1
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 800167c:	aa01      	add	r2, sp, #4
 800167e:	21da      	movs	r1, #218	@ 0xda
 8001680:	4620      	mov	r0, r4
 8001682:	f000 fc13 	bl	8001eac <st7735_read_reg>
 8001686:	b118      	cbz	r0, 8001690 <ST7735_ReadID+0x1c>
    ret = ST7735_ERROR;
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
}
 800168c:	b003      	add	sp, #12
 800168e:	bd30      	pop	{r4, r5, pc}
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8001690:	f10d 0205 	add.w	r2, sp, #5
 8001694:	21db      	movs	r1, #219	@ 0xdb
 8001696:	4620      	mov	r0, r4
 8001698:	f000 fc08 	bl	8001eac <st7735_read_reg>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1f3      	bne.n	8001688 <ST7735_ReadID+0x14>
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 80016a0:	f10d 0206 	add.w	r2, sp, #6
 80016a4:	21dc      	movs	r1, #220	@ 0xdc
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fc00 	bl	8001eac <st7735_read_reg>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1eb      	bne.n	8001688 <ST7735_ReadID+0x14>
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 80016b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	602b      	str	r3, [r5, #0]
  return ret;
 80016c6:	e7e1      	b.n	800168c <ST7735_ReadID+0x18>

080016c8 <ST7735_GetPixel>:
{
 80016c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ca:	4605      	mov	r5, r0
 80016cc:	461e      	mov	r6, r3
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 80016ce:	f7ff fe57 	bl	8001380 <ST7735_SetCursor>
 80016d2:	4604      	mov	r4, r0
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 80016d4:	3520      	adds	r5, #32
 80016d6:	f10d 0207 	add.w	r2, sp, #7
 80016da:	212e      	movs	r1, #46	@ 0x2e
 80016dc:	4628      	mov	r0, r5
 80016de:	f000 fbe5 	bl	8001eac <st7735_read_reg>
 80016e2:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80016e4:	f10d 0107 	add.w	r1, sp, #7
 80016e8:	2201      	movs	r2, #1
 80016ea:	4628      	mov	r0, r5
 80016ec:	f000 fbeb 	bl	8001ec6 <st7735_recv_data>
 80016f0:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80016f2:	f10d 0105 	add.w	r1, sp, #5
 80016f6:	2201      	movs	r2, #1
 80016f8:	4628      	mov	r0, r5
 80016fa:	f000 fbe4 	bl	8001ec6 <st7735_recv_data>
 80016fe:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	f10d 0106 	add.w	r1, sp, #6
 8001706:	4628      	mov	r0, r5
 8001708:	f000 fbdd 	bl	8001ec6 <st7735_recv_data>
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800170c:	f89d 2006 	ldrb.w	r2, [sp, #6]
  if(ret != ST7735_OK)
 8001710:	42c4      	cmn	r4, r0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8001712:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8001716:	bf18      	it	ne
 8001718:	f04f 30ff 	movne.w	r0, #4294967295
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800171c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 8001720:	bf08      	it	eq
 8001722:	2000      	moveq	r0, #0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8001724:	6033      	str	r3, [r6, #0]
}
 8001726:	b002      	add	sp, #8
 8001728:	bd70      	pop	{r4, r5, r6, pc}
	...

0800172c <ST7735_FillRGBRect>:
{
 800172c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001730:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001732:	461c      	mov	r4, r3
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8001734:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <ST7735_FillRGBRect+0x8c>)
{
 8001736:	468a      	mov	sl, r1
 8001738:	4615      	mov	r5, r2
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 800173a:	4439      	add	r1, r7
 800173c:	681a      	ldr	r2, [r3, #0]
{
 800173e:	4681      	mov	r9, r0
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8001740:	4291      	cmp	r1, r2
 8001742:	d836      	bhi.n	80017b2 <ST7735_FillRGBRect+0x86>
 8001744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	eb05 0802 	add.w	r8, r5, r2
 800174c:	4598      	cmp	r8, r3
 800174e:	d830      	bhi.n	80017b2 <ST7735_FillRGBRect+0x86>
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8001750:	f100 0320 	add.w	r3, r0, #32
 8001754:	007f      	lsls	r7, r7, #1
  int32_t ret = ST7735_OK;
 8001756:	2600      	movs	r6, #0
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8001758:	9301      	str	r3, [sp, #4]
    for(j = 0; j < Height; j++)
 800175a:	45a8      	cmp	r8, r5
 800175c:	d103      	bne.n	8001766 <ST7735_FillRGBRect+0x3a>
}
 800175e:	4630      	mov	r0, r6
 8001760:	b003      	add	sp, #12
 8001762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8001766:	462a      	mov	r2, r5
 8001768:	4651      	mov	r1, sl
 800176a:	4648      	mov	r0, r9
 800176c:	f7ff fe08 	bl	8001380 <ST7735_SetCursor>
 8001770:	b9d8      	cbnz	r0, 80017aa <ST7735_FillRGBRect+0x7e>
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <ST7735_FillRGBRect+0x90>)
 8001774:	eb04 0b07 	add.w	fp, r4, r7
        for(i = 0; i < Width; i++)
 8001778:	455c      	cmp	r4, fp
 800177a:	f102 0202 	add.w	r2, r2, #2
 800177e:	d10b      	bne.n	8001798 <ST7735_FillRGBRect+0x6c>
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8001780:	463a      	mov	r2, r7
 8001782:	490e      	ldr	r1, [pc, #56]	@ (80017bc <ST7735_FillRGBRect+0x90>)
 8001784:	9801      	ldr	r0, [sp, #4]
 8001786:	f000 fb9b 	bl	8001ec0 <st7735_send_data>
          ret = ST7735_ERROR;
 800178a:	2800      	cmp	r0, #0
 800178c:	bf18      	it	ne
 800178e:	f04f 36ff 	movne.w	r6, #4294967295
    for(j = 0; j < Height; j++)
 8001792:	3501      	adds	r5, #1
  int32_t ret = ST7735_OK;
 8001794:	465c      	mov	r4, fp
 8001796:	e7e0      	b.n	800175a <ST7735_FillRGBRect+0x2e>
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8001798:	7821      	ldrb	r1, [r4, #0]
          rgb_data +=2;
 800179a:	3402      	adds	r4, #2
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 800179c:	f802 1c02 	strb.w	r1, [r2, #-2]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 80017a0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80017a4:	f802 1c01 	strb.w	r1, [r2, #-1]
        for(i = 0; i < Width; i++)
 80017a8:	e7e6      	b.n	8001778 <ST7735_FillRGBRect+0x4c>
 80017aa:	46a3      	mov	fp, r4
        ret = ST7735_ERROR;
 80017ac:	f04f 36ff 	mov.w	r6, #4294967295
 80017b0:	e7ef      	b.n	8001792 <ST7735_FillRGBRect+0x66>
    ret = ST7735_ERROR;
 80017b2:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 80017b6:	e7d2      	b.n	800175e <ST7735_FillRGBRect+0x32>
 80017b8:	240007e8 	.word	0x240007e8
 80017bc:	24000568 	.word	0x24000568

080017c0 <ST7735_IO_Delay.isra.0>:
/**
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
 80017c0:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80017c2:	69c3      	ldr	r3, [r0, #28]
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
 80017c4:	4604      	mov	r4, r0
 80017c6:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80017c8:	4798      	blx	r3
 80017ca:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80017cc:	69e3      	ldr	r3, [r4, #28]
 80017ce:	4798      	blx	r3
 80017d0:	1b83      	subs	r3, r0, r6
 80017d2:	42ab      	cmp	r3, r5
 80017d4:	d3fa      	bcc.n	80017cc <ST7735_IO_Delay.isra.0+0xc>
  {
  }
  return ST7735_OK;
}
 80017d6:	bd70      	pop	{r4, r5, r6, pc}

080017d8 <ST7735_Init>:
{
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017dc:	b085      	sub	sp, #20
  if(pObj == NULL)
 80017de:	4607      	mov	r7, r0
{
 80017e0:	e9cd 2100 	strd	r2, r1, [sp]
  if(pObj == NULL)
 80017e4:	2800      	cmp	r0, #0
 80017e6:	f000 82ae 	beq.w	8001d46 <ST7735_Init+0x56e>
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017ea:	f100 0520 	add.w	r5, r0, #32
    tmp = 0x00U;
 80017ee:	f04f 0800 	mov.w	r8, #0
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017f2:	f10d 020f 	add.w	r2, sp, #15
 80017f6:	2101      	movs	r1, #1
 80017f8:	4643      	mov	r3, r8
 80017fa:	4628      	mov	r0, r5
    tmp = 0x00U;
 80017fc:	f88d 800f 	strb.w	r8, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001800:	f000 fb57 	bl	8001eb2 <st7735_write_reg>
		(void)ST7735_IO_Delay(pObj, 120);
 8001804:	2178      	movs	r1, #120	@ 0x78
 8001806:	4638      	mov	r0, r7
 8001808:	f7ff ffda 	bl	80017c0 <ST7735_IO_Delay.isra.0>
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800180c:	4643      	mov	r3, r8
 800180e:	f10d 020f 	add.w	r2, sp, #15
 8001812:	2101      	movs	r1, #1
 8001814:	4628      	mov	r0, r5
		tmp = 0x00U;
 8001816:	f88d 800f 	strb.w	r8, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800181a:	f000 fb4a 	bl	8001eb2 <st7735_write_reg>
		(void)ST7735_IO_Delay(pObj, 120);
 800181e:	2178      	movs	r1, #120	@ 0x78
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001820:	4604      	mov	r4, r0
		(void)ST7735_IO_Delay(pObj, 120);
 8001822:	4638      	mov	r0, r7
 8001824:	f7ff ffcc 	bl	80017c0 <ST7735_IO_Delay.isra.0>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001828:	2301      	movs	r3, #1
 800182a:	f10d 020f 	add.w	r2, sp, #15
 800182e:	2111      	movs	r1, #17
 8001830:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001832:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001836:	f000 fb3c 	bl	8001eb2 <st7735_write_reg>
 800183a:	4404      	add	r4, r0
    tmp = 0x01U;
 800183c:	2601      	movs	r6, #1
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 800183e:	4643      	mov	r3, r8
 8001840:	f10d 020f 	add.w	r2, sp, #15
 8001844:	21b1      	movs	r1, #177	@ 0xb1
 8001846:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001848:	f04f 0a2c 	mov.w	sl, #44	@ 0x2c
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 800184c:	f000 fb31 	bl	8001eb2 <st7735_write_reg>
 8001850:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001852:	4632      	mov	r2, r6
 8001854:	f10d 010f 	add.w	r1, sp, #15
 8001858:	4628      	mov	r0, r5
    tmp = 0x01U;
 800185a:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800185e:	f000 fb2f 	bl	8001ec0 <st7735_send_data>
 8001862:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001864:	4632      	mov	r2, r6
 8001866:	f10d 010f 	add.w	r1, sp, #15
 800186a:	4628      	mov	r0, r5
    tmp = 0x2DU;
 800186c:	f04f 092d 	mov.w	r9, #45	@ 0x2d
    tmp = 0x2CU;
 8001870:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001874:	f000 fb24 	bl	8001ec0 <st7735_send_data>
 8001878:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800187a:	4632      	mov	r2, r6
 800187c:	f10d 010f 	add.w	r1, sp, #15
 8001880:	4628      	mov	r0, r5
    tmp = 0x2DU;
 8001882:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001886:	f000 fb1b 	bl	8001ec0 <st7735_send_data>
 800188a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 800188c:	4633      	mov	r3, r6
 800188e:	f10d 020f 	add.w	r2, sp, #15
 8001892:	21b2      	movs	r1, #178	@ 0xb2
 8001894:	4628      	mov	r0, r5
    tmp = 0x01U;
 8001896:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 800189a:	f000 fb0a 	bl	8001eb2 <st7735_write_reg>
 800189e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018a0:	4632      	mov	r2, r6
 80018a2:	f10d 010f 	add.w	r1, sp, #15
 80018a6:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80018a8:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ac:	f000 fb08 	bl	8001ec0 <st7735_send_data>
 80018b0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018b2:	4632      	mov	r2, r6
 80018b4:	f10d 010f 	add.w	r1, sp, #15
 80018b8:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80018ba:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018be:	f000 faff 	bl	8001ec0 <st7735_send_data>
 80018c2:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80018c4:	4633      	mov	r3, r6
 80018c6:	f10d 020f 	add.w	r2, sp, #15
 80018ca:	21b3      	movs	r1, #179	@ 0xb3
 80018cc:	4628      	mov	r0, r5
    tmp = 0x01U;
 80018ce:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80018d2:	f000 faee 	bl	8001eb2 <st7735_write_reg>
 80018d6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018d8:	4632      	mov	r2, r6
 80018da:	f10d 010f 	add.w	r1, sp, #15
 80018de:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80018e0:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018e4:	f000 faec 	bl	8001ec0 <st7735_send_data>
 80018e8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ea:	4632      	mov	r2, r6
 80018ec:	f10d 010f 	add.w	r1, sp, #15
 80018f0:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80018f2:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f6:	f000 fae3 	bl	8001ec0 <st7735_send_data>
 80018fa:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018fc:	4632      	mov	r2, r6
 80018fe:	f10d 010f 	add.w	r1, sp, #15
 8001902:	4628      	mov	r0, r5
    tmp = 0x01U;
 8001904:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001908:	f000 fada 	bl	8001ec0 <st7735_send_data>
 800190c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800190e:	4632      	mov	r2, r6
 8001910:	f10d 010f 	add.w	r1, sp, #15
 8001914:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001916:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800191a:	f000 fad1 	bl	8001ec0 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800191e:	4632      	mov	r2, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001920:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001922:	f10d 010f 	add.w	r1, sp, #15
 8001926:	4628      	mov	r0, r5
    tmp = 0x2DU;
 8001928:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800192c:	f000 fac8 	bl	8001ec0 <st7735_send_data>
    tmp = 0x07U;
 8001930:	2307      	movs	r3, #7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001932:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001934:	f10d 020f 	add.w	r2, sp, #15
 8001938:	21b4      	movs	r1, #180	@ 0xb4
    tmp = 0x07U;
 800193a:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800193e:	4628      	mov	r0, r5
 8001940:	4633      	mov	r3, r6
    tmp = 0xC5U;
 8001942:	f04f 09c5 	mov.w	r9, #197	@ 0xc5
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001946:	f000 fab4 	bl	8001eb2 <st7735_write_reg>
    tmp = 0xA2U;
 800194a:	23a2      	movs	r3, #162	@ 0xa2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800194c:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 800194e:	f10d 020f 	add.w	r2, sp, #15
 8001952:	21c0      	movs	r1, #192	@ 0xc0
    tmp = 0xA2U;
 8001954:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001958:	4628      	mov	r0, r5
 800195a:	4633      	mov	r3, r6
 800195c:	f000 faa9 	bl	8001eb2 <st7735_write_reg>
    tmp = 0x02U;
 8001960:	2302      	movs	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001962:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001964:	4632      	mov	r2, r6
 8001966:	f10d 010f 	add.w	r1, sp, #15
 800196a:	4628      	mov	r0, r5
    tmp = 0x02U;
 800196c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001970:	f000 faa6 	bl	8001ec0 <st7735_send_data>
    tmp = 0x84U;
 8001974:	2384      	movs	r3, #132	@ 0x84
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001976:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001978:	4632      	mov	r2, r6
 800197a:	f10d 010f 	add.w	r1, sp, #15
 800197e:	4628      	mov	r0, r5
    tmp = 0x84U;
 8001980:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001984:	f000 fa9c 	bl	8001ec0 <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001988:	4633      	mov	r3, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800198a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800198c:	f10d 020f 	add.w	r2, sp, #15
 8001990:	21c1      	movs	r1, #193	@ 0xc1
 8001992:	4628      	mov	r0, r5
    tmp = 0xC5U;
 8001994:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001998:	f000 fa8b 	bl	8001eb2 <st7735_write_reg>
    tmp = 0x0AU;
 800199c:	230a      	movs	r3, #10
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800199e:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80019a0:	f10d 020f 	add.w	r2, sp, #15
 80019a4:	21c2      	movs	r1, #194	@ 0xc2
    tmp = 0x0AU;
 80019a6:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80019aa:	4628      	mov	r0, r5
 80019ac:	4633      	mov	r3, r6
    tmp = 0x8AU;
 80019ae:	f04f 0a8a 	mov.w	sl, #138	@ 0x8a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 80019b2:	f000 fa7e 	bl	8001eb2 <st7735_write_reg>
 80019b6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019b8:	4632      	mov	r2, r6
 80019ba:	f10d 010f 	add.w	r1, sp, #15
 80019be:	4628      	mov	r0, r5
    tmp = 0x00U;
 80019c0:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019c4:	f000 fa7c 	bl	8001ec0 <st7735_send_data>
 80019c8:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80019ca:	4633      	mov	r3, r6
 80019cc:	f10d 020f 	add.w	r2, sp, #15
 80019d0:	21c3      	movs	r1, #195	@ 0xc3
 80019d2:	4628      	mov	r0, r5
    tmp = 0x8AU;
 80019d4:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80019d8:	f000 fa6b 	bl	8001eb2 <st7735_write_reg>
    tmp = 0x2AU;
 80019dc:	232a      	movs	r3, #42	@ 0x2a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80019de:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019e0:	4632      	mov	r2, r6
 80019e2:	f10d 010f 	add.w	r1, sp, #15
 80019e6:	4628      	mov	r0, r5
    tmp = 0x2AU;
 80019e8:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019ec:	f000 fa68 	bl	8001ec0 <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019f0:	4633      	mov	r3, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019f2:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019f4:	f10d 020f 	add.w	r2, sp, #15
 80019f8:	21c4      	movs	r1, #196	@ 0xc4
 80019fa:	4628      	mov	r0, r5
    tmp = 0x8AU;
 80019fc:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001a00:	f000 fa57 	bl	8001eb2 <st7735_write_reg>
    tmp = 0xEEU;
 8001a04:	23ee      	movs	r3, #238	@ 0xee
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001a06:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a08:	4632      	mov	r2, r6
 8001a0a:	f10d 010f 	add.w	r1, sp, #15
 8001a0e:	4628      	mov	r0, r5
    tmp = 0xEEU;
 8001a10:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a14:	f000 fa54 	bl	8001ec0 <st7735_send_data>
    tmp = 0x0EU;
 8001a18:	230e      	movs	r3, #14
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a1a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001a1c:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x0EU;
 8001a20:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001a24:	4649      	mov	r1, r9
 8001a26:	4633      	mov	r3, r6
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f000 fa42 	bl	8001eb2 <st7735_write_reg>
		if (pDriver->Panel == HannStar_Panel) {
 8001a2e:	9b00      	ldr	r3, [sp, #0]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001a30:	4404      	add	r4, r0
		if (pDriver->Panel == HannStar_Panel) {
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 8181 	bne.w	8001d3c <ST7735_Init+0x564>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001a3a:	f10d 020f 	add.w	r2, sp, #15
 8001a3e:	2121      	movs	r1, #33	@ 0x21
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001a40:	4628      	mov	r0, r5
    tmp = 0x07U;
 8001a42:	f04f 0b07 	mov.w	fp, #7
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001a46:	f000 fa34 	bl	8001eb2 <st7735_write_reg>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001a4a:	2301      	movs	r3, #1
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001a4c:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001a4e:	aa01      	add	r2, sp, #4
 8001a50:	213a      	movs	r1, #58	@ 0x3a
 8001a52:	4628      	mov	r0, r5
 8001a54:	f000 fa2d 	bl	8001eb2 <st7735_write_reg>
    tmp = 0x02U;
 8001a58:	f04f 0302 	mov.w	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001a5c:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a5e:	f10d 020f 	add.w	r2, sp, #15
 8001a62:	21e0      	movs	r1, #224	@ 0xe0
    tmp = 0x02U;
 8001a64:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a68:	4628      	mov	r0, r5
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f000 fa21 	bl	8001eb2 <st7735_write_reg>
    tmp = 0x1CU;
 8001a70:	231c      	movs	r3, #28
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a72:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f10d 010f 	add.w	r1, sp, #15
 8001a7a:	4628      	mov	r0, r5
    tmp = 0x1CU;
 8001a7c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a80:	f000 fa1e 	bl	8001ec0 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a84:	2201      	movs	r2, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a86:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a88:	f10d 010f 	add.w	r1, sp, #15
 8001a8c:	4628      	mov	r0, r5
    tmp = 0x07U;
 8001a8e:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a92:	f000 fa15 	bl	8001ec0 <st7735_send_data>
    tmp = 0x12U;
 8001a96:	2312      	movs	r3, #18
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a98:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f10d 010f 	add.w	r1, sp, #15
 8001aa0:	4628      	mov	r0, r5
    tmp = 0x12U;
 8001aa2:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001aa6:	f000 fa0b 	bl	8001ec0 <st7735_send_data>
    tmp = 0x37U;
 8001aaa:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001aae:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ab0:	f10d 010f 	add.w	r1, sp, #15
    tmp = 0x37U;
 8001ab4:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ab8:	4628      	mov	r0, r5
 8001aba:	2201      	movs	r2, #1
    tmp = 0x29U;
 8001abc:	f04f 0829 	mov.w	r8, #41	@ 0x29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ac0:	f000 f9fe 	bl	8001ec0 <st7735_send_data>
    tmp = 0x32U;
 8001ac4:	2332      	movs	r3, #50	@ 0x32
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ac6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f10d 010f 	add.w	r1, sp, #15
 8001ace:	4628      	mov	r0, r5
    tmp = 0x32U;
 8001ad0:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ad4:	f000 f9f4 	bl	8001ec0 <st7735_send_data>
 8001ad8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f10d 010f 	add.w	r1, sp, #15
 8001ae0:	4628      	mov	r0, r5
    tmp = 0x29U;
 8001ae2:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ae6:	f000 f9eb 	bl	8001ec0 <st7735_send_data>
    tmp = 0x2DU;
 8001aea:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001aee:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001af0:	f10d 000f 	add.w	r0, sp, #15
 8001af4:	2201      	movs	r2, #1
    tmp = 0x2DU;
 8001af6:	f88d 100f 	strb.w	r1, [sp, #15]
    tmp = 0x00U;
 8001afa:	f04f 0900 	mov.w	r9, #0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001afe:	4601      	mov	r1, r0
 8001b00:	4628      	mov	r0, r5
 8001b02:	f000 f9dd 	bl	8001ec0 <st7735_send_data>
 8001b06:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b08:	f10d 000f 	add.w	r0, sp, #15
 8001b0c:	2201      	movs	r2, #1
    tmp = 0x29U;
 8001b0e:	f88d 800f 	strb.w	r8, [sp, #15]
    tmp = 0x01U;
 8001b12:	2601      	movs	r6, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b14:	4601      	mov	r1, r0
 8001b16:	4628      	mov	r0, r5
 8001b18:	f000 f9d2 	bl	8001ec0 <st7735_send_data>
 8001b1c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b1e:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x25U;
 8001b22:	2325      	movs	r3, #37	@ 0x25
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b24:	2201      	movs	r2, #1
    tmp = 0x10U;
 8001b26:	f04f 0a10 	mov.w	sl, #16
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	4628      	mov	r0, r5
    tmp = 0x25U;
 8001b2e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b32:	f000 f9c5 	bl	8001ec0 <st7735_send_data>
 8001b36:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b38:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2BU;
 8001b3c:	232b      	movs	r3, #43	@ 0x2b
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4601      	mov	r1, r0
 8001b42:	4628      	mov	r0, r5
    tmp = 0x2BU;
 8001b44:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b48:	f000 f9ba 	bl	8001ec0 <st7735_send_data>
 8001b4c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b4e:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x39U;
 8001b52:	2339      	movs	r3, #57	@ 0x39
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	4601      	mov	r1, r0
 8001b58:	4628      	mov	r0, r5
    tmp = 0x39U;
 8001b5a:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b5e:	f000 f9af 	bl	8001ec0 <st7735_send_data>
 8001b62:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b64:	f10d 000f 	add.w	r0, sp, #15
 8001b68:	2201      	movs	r2, #1
    tmp = 0x00U;
 8001b6a:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4628      	mov	r0, r5
 8001b72:	f000 f9a5 	bl	8001ec0 <st7735_send_data>
 8001b76:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b78:	f10d 000f 	add.w	r0, sp, #15
 8001b7c:	4632      	mov	r2, r6
    tmp = 0x01U;
 8001b7e:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b82:	4601      	mov	r1, r0
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 f99b 	bl	8001ec0 <st7735_send_data>
 8001b8a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b8c:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x03U;
 8001b90:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b92:	4632      	mov	r2, r6
 8001b94:	4601      	mov	r1, r0
 8001b96:	4628      	mov	r0, r5
    tmp = 0x03U;
 8001b98:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b9c:	f000 f990 	bl	8001ec0 <st7735_send_data>
 8001ba0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ba2:	f10d 000f 	add.w	r0, sp, #15
 8001ba6:	4632      	mov	r2, r6
    tmp = 0x10U;
 8001ba8:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bac:	4601      	mov	r1, r0
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 f986 	bl	8001ec0 <st7735_send_data>
    tmp = 0x03U;
 8001bb4:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bb6:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001bb8:	f10d 000f 	add.w	r0, sp, #15
 8001bbc:	21e1      	movs	r1, #225	@ 0xe1
    tmp = 0x03U;
 8001bbe:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4633      	mov	r3, r6
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f000 f973 	bl	8001eb2 <st7735_write_reg>
 8001bcc:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bce:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x1DU;
 8001bd2:	231d      	movs	r3, #29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	4628      	mov	r0, r5
    tmp = 0x1DU;
 8001bda:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bde:	f000 f96f 	bl	8001ec0 <st7735_send_data>
 8001be2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001be4:	f10d 000f 	add.w	r0, sp, #15
 8001be8:	4632      	mov	r2, r6
    tmp = 0x07U;
 8001bea:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bee:	4601      	mov	r1, r0
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f000 f965 	bl	8001ec0 <st7735_send_data>
 8001bf6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bf8:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x06U;
 8001bfc:	2306      	movs	r3, #6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bfe:	4632      	mov	r2, r6
    tmp = 0x2EU;
 8001c00:	f04f 0b2e 	mov.w	fp, #46	@ 0x2e
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c04:	4601      	mov	r1, r0
 8001c06:	4628      	mov	r0, r5
    tmp = 0x06U;
 8001c08:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c0c:	f000 f958 	bl	8001ec0 <st7735_send_data>
 8001c10:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c12:	f10d 000f 	add.w	r0, sp, #15
 8001c16:	4632      	mov	r2, r6
    tmp = 0x2EU;
 8001c18:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f000 f94e 	bl	8001ec0 <st7735_send_data>
 8001c24:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c26:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2CU;
 8001c2a:	232c      	movs	r3, #44	@ 0x2c
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001c32:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c36:	f000 f943 	bl	8001ec0 <st7735_send_data>
 8001c3a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3c:	f10d 000f 	add.w	r0, sp, #15
 8001c40:	4632      	mov	r2, r6
    tmp = 0x29U;
 8001c42:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c46:	4601      	mov	r1, r0
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f000 f939 	bl	8001ec0 <st7735_send_data>
    tmp = 0x2DU;
 8001c4e:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c52:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c54:	4632      	mov	r2, r6
    tmp = 0x2DU;
 8001c56:	f88d 100f 	strb.w	r1, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f10d 010f 	add.w	r1, sp, #15
 8001c60:	f000 f92e 	bl	8001ec0 <st7735_send_data>
 8001c64:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c66:	4632      	mov	r2, r6
 8001c68:	f10d 010f 	add.w	r1, sp, #15
 8001c6c:	4628      	mov	r0, r5
    tmp = 0x2EU;
 8001c6e:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c72:	f000 f925 	bl	8001ec0 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c76:	4632      	mov	r2, r6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c78:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c7a:	f10d 010f 	add.w	r1, sp, #15
 8001c7e:	4628      	mov	r0, r5
    tmp = 0x2EU;
 8001c80:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c84:	f000 f91c 	bl	8001ec0 <st7735_send_data>
    tmp = 0x37U;
 8001c88:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c8c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c8e:	f10d 010f 	add.w	r1, sp, #15
    tmp = 0x37U;
 8001c92:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c96:	4628      	mov	r0, r5
 8001c98:	4632      	mov	r2, r6
 8001c9a:	f000 f911 	bl	8001ec0 <st7735_send_data>
    tmp = 0x3FU;
 8001c9e:	233f      	movs	r3, #63	@ 0x3f
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ca0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ca2:	4632      	mov	r2, r6
 8001ca4:	f10d 010f 	add.w	r1, sp, #15
 8001ca8:	4628      	mov	r0, r5
    tmp = 0x3FU;
 8001caa:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cae:	f000 f907 	bl	8001ec0 <st7735_send_data>
 8001cb2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cb4:	4632      	mov	r2, r6
 8001cb6:	f10d 010f 	add.w	r1, sp, #15
 8001cba:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001cbc:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cc0:	f000 f8fe 	bl	8001ec0 <st7735_send_data>
 8001cc4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cc6:	4632      	mov	r2, r6
 8001cc8:	f10d 010f 	add.w	r1, sp, #15
 8001ccc:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001cce:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cd2:	f000 f8f5 	bl	8001ec0 <st7735_send_data>
    tmp = 0x02U;
 8001cd6:	f04f 0302 	mov.w	r3, #2
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cda:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cdc:	4632      	mov	r2, r6
 8001cde:	f10d 010f 	add.w	r1, sp, #15
 8001ce2:	4628      	mov	r0, r5
    tmp = 0x02U;
 8001ce4:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ce8:	f000 f8ea 	bl	8001ec0 <st7735_send_data>
 8001cec:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cee:	4632      	mov	r2, r6
 8001cf0:	f10d 010f 	add.w	r1, sp, #15
 8001cf4:	4628      	mov	r0, r5
    tmp = 0x10U;
 8001cf6:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cfa:	f000 f8e1 	bl	8001ec0 <st7735_send_data>
 8001cfe:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001d00:	4633      	mov	r3, r6
 8001d02:	f10d 020f 	add.w	r2, sp, #15
 8001d06:	2113      	movs	r1, #19
 8001d08:	4628      	mov	r0, r5
    tmp  = 0x00U;
 8001d0a:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001d0e:	f000 f8d0 	bl	8001eb2 <st7735_write_reg>
 8001d12:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001d14:	4633      	mov	r3, r6
 8001d16:	f10d 020f 	add.w	r2, sp, #15
 8001d1a:	4641      	mov	r1, r8
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f000 f8c8 	bl	8001eb2 <st7735_write_reg>
 8001d22:	4404      	add	r4, r0
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001d24:	9900      	ldr	r1, [sp, #0]
 8001d26:	4638      	mov	r0, r7
 8001d28:	f7ff fada 	bl	80012e0 <ST7735_SetOrientation>
  if(ret != ST7735_OK)
 8001d2c:	42c4      	cmn	r4, r0
 8001d2e:	bf14      	ite	ne
 8001d30:	f04f 30ff 	movne.w	r0, #4294967295
 8001d34:	4648      	moveq	r0, r9
}
 8001d36:	b005      	add	sp, #20
 8001d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	f10d 020f 	add.w	r2, sp, #15
 8001d42:	2120      	movs	r1, #32
 8001d44:	e67c      	b.n	8001a40 <ST7735_Init+0x268>
    ret = ST7735_ERROR;
 8001d46:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001d4a:	e7f4      	b.n	8001d36 <ST7735_Init+0x55e>

08001d4c <ST7735_DisplayOff>:
{
 8001d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tmp = 0;
 8001d4e:	2700      	movs	r7, #0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001d50:	f100 0520 	add.w	r5, r0, #32
{
 8001d54:	4606      	mov	r6, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001d56:	f10d 0207 	add.w	r2, sp, #7
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2113      	movs	r1, #19
 8001d5e:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 8001d60:	f88d 7007 	strb.w	r7, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001d64:	f000 f8a5 	bl	8001eb2 <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8001d68:	210a      	movs	r1, #10
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001d6a:	4604      	mov	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8001d6c:	4630      	mov	r0, r6
 8001d6e:	f7ff fd27 	bl	80017c0 <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8001d72:	463b      	mov	r3, r7
 8001d74:	f10d 0207 	add.w	r2, sp, #7
 8001d78:	2128      	movs	r1, #40	@ 0x28
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f000 f899 	bl	8001eb2 <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8001d80:	210a      	movs	r1, #10
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8001d82:	4404      	add	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8001d84:	4630      	mov	r0, r6
 8001d86:	f7ff fd1b 	bl	80017c0 <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	f10d 0207 	add.w	r2, sp, #7
 8001d90:	2136      	movs	r1, #54	@ 0x36
 8001d92:	4628      	mov	r0, r5
 8001d94:	f000 f88d 	bl	8001eb2 <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001d98:	4a0c      	ldr	r2, [pc, #48]	@ (8001dcc <ST7735_DisplayOff+0x80>)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <ST7735_DisplayOff+0x84>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001d9c:	4404      	add	r4, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001d9e:	7b11      	ldrb	r1, [r2, #12]
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001da0:	6892      	ldr	r2, [r2, #8]
 8001da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	b909      	cbnz	r1, 8001dae <ST7735_DisplayOff+0x62>
 8001daa:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f10d 0107 	add.w	r1, sp, #7
 8001db4:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001db6:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dba:	f000 f881 	bl	8001ec0 <st7735_send_data>
  if(ret != ST7735_OK)
 8001dbe:	42c4      	cmn	r4, r0
}
 8001dc0:	bf14      	ite	ne
 8001dc2:	f04f 30ff 	movne.w	r0, #4294967295
 8001dc6:	2000      	moveq	r0, #0
 8001dc8:	b003      	add	sp, #12
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dcc:	240007e8 	.word	0x240007e8
 8001dd0:	080144cc 	.word	0x080144cc

08001dd4 <ST7735_DisplayOn>:
{
 8001dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tmp = 0;
 8001dd6:	2700      	movs	r7, #0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001dd8:	f100 0520 	add.w	r5, r0, #32
{
 8001ddc:	4606      	mov	r6, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001dde:	f10d 0207 	add.w	r2, sp, #7
 8001de2:	463b      	mov	r3, r7
 8001de4:	2113      	movs	r1, #19
 8001de6:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 8001de8:	f88d 7007 	strb.w	r7, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001dec:	f000 f861 	bl	8001eb2 <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8001df0:	210a      	movs	r1, #10
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001df2:	4604      	mov	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8001df4:	4630      	mov	r0, r6
 8001df6:	f7ff fce3 	bl	80017c0 <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	f10d 0207 	add.w	r2, sp, #7
 8001e00:	2129      	movs	r1, #41	@ 0x29
 8001e02:	4628      	mov	r0, r5
 8001e04:	f000 f855 	bl	8001eb2 <st7735_write_reg>
  (void)ST7735_IO_Delay(pObj, 10);
 8001e08:	210a      	movs	r1, #10
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001e0a:	4404      	add	r4, r0
  (void)ST7735_IO_Delay(pObj, 10);
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f7ff fcd7 	bl	80017c0 <ST7735_IO_Delay.isra.0>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001e12:	463b      	mov	r3, r7
 8001e14:	f10d 0207 	add.w	r2, sp, #7
 8001e18:	2136      	movs	r1, #54	@ 0x36
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f000 f849 	bl	8001eb2 <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e20:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <ST7735_DisplayOn+0x80>)
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <ST7735_DisplayOn+0x84>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001e24:	4404      	add	r4, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e26:	7b11      	ldrb	r1, [r2, #12]
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001e28:	6892      	ldr	r2, [r2, #8]
 8001e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	b909      	cbnz	r1, 8001e36 <ST7735_DisplayOn+0x62>
 8001e32:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	f10d 0107 	add.w	r1, sp, #7
 8001e3c:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e3e:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e42:	f000 f83d 	bl	8001ec0 <st7735_send_data>
  if(ret != ST7735_OK)
 8001e46:	42c4      	cmn	r4, r0
}
 8001e48:	bf14      	ite	ne
 8001e4a:	f04f 30ff 	movne.w	r0, #4294967295
 8001e4e:	2000      	moveq	r0, #0
 8001e50:	b003      	add	sp, #12
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	240007e8 	.word	0x240007e8
 8001e58:	080144cc 	.word	0x080144cc

08001e5c <ST7735_RegisterBusIO>:
  if(pObj == NULL)
 8001e5c:	b1d0      	cbz	r0, 8001e94 <ST7735_RegisterBusIO+0x38>
    pObj->IO.DeInit    = pIO->DeInit;
 8001e5e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8001e60:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e62:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8001e64:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8001e66:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8001e68:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e6a:	68ca      	ldr	r2, [r1, #12]
 8001e6c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e6e:	690a      	ldr	r2, [r1, #16]
 8001e70:	6102      	str	r2, [r0, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001e72:	694a      	ldr	r2, [r1, #20]
 8001e74:	6142      	str	r2, [r0, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001e76:	698a      	ldr	r2, [r1, #24]
 8001e78:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e7a:	69ca      	ldr	r2, [r1, #28]
 8001e7c:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <ST7735_RegisterBusIO+0x40>)
 8001e80:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001e82:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <ST7735_RegisterBusIO+0x44>)
 8001e84:	6202      	str	r2, [r0, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001e86:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <ST7735_RegisterBusIO+0x48>)
 8001e88:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <ST7735_RegisterBusIO+0x4c>)
    pObj->Ctx.handle    = pObj;
 8001e8c:	e9c0 200b 	strd	r2, r0, [r0, #44]	@ 0x2c
    if(pObj->IO.Init != NULL)
 8001e90:	b103      	cbz	r3, 8001e94 <ST7735_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 8001e92:	4718      	bx	r3
}
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	08001169 	.word	0x08001169
 8001ea0:	08001173 	.word	0x08001173
 8001ea4:	08001187 	.word	0x08001187
 8001ea8:	08001191 	.word	0x08001191

08001eac <st7735_read_reg>:
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8001eac:	6843      	ldr	r3, [r0, #4]
 8001eae:	6900      	ldr	r0, [r0, #16]
 8001eb0:	4718      	bx	r3

08001eb2 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8001eb2:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001eb4:	6804      	ldr	r4, [r0, #0]
 8001eb6:	6900      	ldr	r0, [r0, #16]
 8001eb8:	46a4      	mov	ip, r4
}
 8001eba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001ebe:	4760      	bx	ip

08001ec0 <st7735_send_data>:
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->SendData(ctx->handle, pdata, length);
 8001ec0:	6883      	ldr	r3, [r0, #8]
 8001ec2:	6900      	ldr	r0, [r0, #16]
 8001ec4:	4718      	bx	r3

08001ec6 <st7735_recv_data>:
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->RecvData(ctx->handle, pdata, length);
 8001ec6:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 8001eca:	4718      	bx	r3

08001ecc <Test_Run>:
/* USER CODE END Variable Declaration */



void Test_Run(void)
{
 8001ecc:	b508      	push	{r3, lr}

    LCD_LoadScreen();
 8001ece:	f7ff f875 	bl	8000fbc <LCD_LoadScreen>
//    ESP32_Test();
    GroundCommands_Test();
//    AttitudeMPC_Test();


}
 8001ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    GroundCommands_Test();
 8001ed6:	f000 b801 	b.w	8001edc <GroundCommands_Test>
	...

08001edc <GroundCommands_Test>:
static uint32_t timdelta1,timdelta2;



void GroundCommands_Test(void)
{
 8001edc:	b583      	push	{r0, r1, r7, lr}

	Odometry_Init();
	GroundCommands_Init();
	HAL_Delay(1000);

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001ede:	4c29      	ldr	r4, [pc, #164]	@ (8001f84 <GroundCommands_Test+0xa8>)
	Odometry_Init();
 8001ee0:	f7fe fc04 	bl	80006ec <Odometry_Init>
	GroundCommands_Init();
 8001ee4:	f7fe fbea 	bl	80006bc <GroundCommands_Init>
	HAL_Delay(1000);
 8001ee8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eec:	f000 fff6 	bl	8002edc <HAL_Delay>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4824      	ldr	r0, [pc, #144]	@ (8001f88 <GroundCommands_Test+0xac>)
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <GroundCommands_Test+0xb0>)
 8001efa:	4611      	mov	r1, r2
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	47a8      	blx	r5
    HAL_TIM_Base_Start_IT(&htim17);
    HAL_TIM_Base_Start(&htim17);

    while (1)
    {
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8001f04:	4e22      	ldr	r6, [pc, #136]	@ (8001f90 <GroundCommands_Test+0xb4>)
    HAL_TIM_Base_Start_IT(&htim17);
 8001f06:	4823      	ldr	r0, [pc, #140]	@ (8001f94 <GroundCommands_Test+0xb8>)
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8001f08:	4f23      	ldr	r7, [pc, #140]	@ (8001f98 <GroundCommands_Test+0xbc>)
    HAL_TIM_Base_Start_IT(&htim17);
 8001f0a:	f005 f98f 	bl	800722c <HAL_TIM_Base_Start_IT>
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8001f0e:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8001fa0 <GroundCommands_Test+0xc4>
    HAL_TIM_Base_Start(&htim17);
 8001f12:	4820      	ldr	r0, [pc, #128]	@ (8001f94 <GroundCommands_Test+0xb8>)
 8001f14:	f005 f950 	bl	80071b8 <HAL_TIM_Base_Start>
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8001f18:	ed96 7a03 	vldr	s14, [r6, #12]
  	  LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
 8001f1c:	2510      	movs	r5, #16
  	  sprintf((char *)&text, "q0=%.2f q1=%.2f                  ",curr_reference.q0_ref,curr_reference.q1_ref);
 8001f1e:	edd6 6a02 	vldr	s13, [r6, #8]
 8001f22:	4641      	mov	r1, r8
 8001f24:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001f28:	481b      	ldr	r0, [pc, #108]	@ (8001f98 <GroundCommands_Test+0xbc>)
 8001f2a:	ed8d 7b00 	vstr	d7, [sp]
 8001f2e:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8001f32:	ec53 2b17 	vmov	r2, r3, d7
 8001f36:	f009 f8e5 	bl	800b104 <siprintf>
  	  LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	8822      	ldrh	r2, [r4, #0]
 8001f3e:	2114      	movs	r1, #20
 8001f40:	2004      	movs	r0, #4
 8001f42:	9701      	str	r7, [sp, #4]
 8001f44:	9500      	str	r5, [sp, #0]
 8001f46:	f7ff f809 	bl	8000f5c <LCD_ShowString>

  	  sprintf((char *)&text, "q2=%.2f q3=%.2f                  ",curr_reference.q2_ref,curr_reference.q3_ref);
 8001f4a:	ed96 7a05 	vldr	s14, [r6, #20]
 8001f4e:	edd6 6a04 	vldr	s13, [r6, #16]
 8001f52:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001f56:	4911      	ldr	r1, [pc, #68]	@ (8001f9c <GroundCommands_Test+0xc0>)
 8001f58:	480f      	ldr	r0, [pc, #60]	@ (8001f98 <GroundCommands_Test+0xbc>)
 8001f5a:	ed8d 7b00 	vstr	d7, [sp]
 8001f5e:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
 8001f62:	ec53 2b17 	vmov	r2, r3, d7
 8001f66:	f009 f8cd 	bl	800b104 <siprintf>
  	  LCD_ShowString(4, 35, ST7735Ctx.Width, 16, 16, text);
 8001f6a:	462b      	mov	r3, r5
 8001f6c:	8822      	ldrh	r2, [r4, #0]
 8001f6e:	2123      	movs	r1, #35	@ 0x23
 8001f70:	2004      	movs	r0, #4
 8001f72:	e9cd 5700 	strd	r5, r7, [sp]
 8001f76:	f7fe fff1 	bl	8000f5c <LCD_ShowString>

  	  HAL_Delay(50);
 8001f7a:	2032      	movs	r0, #50	@ 0x32
 8001f7c:	f000 ffae 	bl	8002edc <HAL_Delay>
    while (1)
 8001f80:	e7ca      	b.n	8001f18 <GroundCommands_Test+0x3c>
 8001f82:	bf00      	nop
 8001f84:	240007e8 	.word	0x240007e8
 8001f88:	240002b0 	.word	0x240002b0
 8001f8c:	24000024 	.word	0x24000024
 8001f90:	2400082c 	.word	0x2400082c
 8001f94:	24000ac8 	.word	0x24000ac8
 8001f98:	240007f8 	.word	0x240007f8
 8001f9c:	0800d46d 	.word	0x0800d46d
 8001fa0:	0800d44b 	.word	0x0800d44b

08001fa4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001fa4:	b500      	push	{lr}
 8001fa6:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fa8:	221c      	movs	r2, #28
 8001faa:	2100      	movs	r1, #0
 8001fac:	a801      	add	r0, sp, #4
 8001fae:	f009 f9a3 	bl	800b2f8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001fb2:	4819      	ldr	r0, [pc, #100]	@ (8002018 <MX_ADC3_Init+0x74>)
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <MX_ADC3_Init+0x78>)
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fb6:	2204      	movs	r2, #4
  hadc3.Instance = ADC3;
 8001fb8:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001fba:	2300      	movs	r3, #0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fbc:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8001fbe:	2201      	movs	r2, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001fc0:	8283      	strh	r3, [r0, #20]
  hadc3.Init.NbrOfConversion = 1;
 8001fc2:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8001fc4:	7702      	strb	r2, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc3.Init.OversamplingMode = DISABLE;
 8001fc6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001fca:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fcc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd0:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fd4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fd8:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001fdc:	f001 fa44 	bl	8003468 <HAL_ADC_Init>
 8001fe0:	b108      	cbz	r0, 8001fe6 <MX_ADC3_Init+0x42>
  {
    Error_Handler();
 8001fe2:	f000 fa4b 	bl	800247c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <MX_ADC3_Init+0x7c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fea:	f240 71ff 	movw	r1, #2047	@ 0x7ff
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fee:	480a      	ldr	r0, [pc, #40]	@ (8002018 <MX_ADC3_Init+0x74>)
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001ff0:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  sConfig.Offset = 0;
 8001ffc:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ffe:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 8002000:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002002:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002006:	f000 ff9b 	bl	8002f40 <HAL_ADC_ConfigChannel>
 800200a:	b108      	cbz	r0, 8002010 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 800200c:	f000 fa36 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002010:	b009      	add	sp, #36	@ 0x24
 8002012:	f85d fb04 	ldr.w	pc, [sp], #4
 8002016:	bf00      	nop
 8002018:	24000844 	.word	0x24000844
 800201c:	58026000 	.word	0x58026000
 8002020:	cb840000 	.word	0xcb840000

08002024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002024:	b510      	push	{r4, lr}
 8002026:	b0b2      	sub	sp, #200	@ 0xc8
 8002028:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800202a:	22c0      	movs	r2, #192	@ 0xc0
 800202c:	2100      	movs	r1, #0
 800202e:	a802      	add	r0, sp, #8
 8002030:	f009 f962 	bl	800b2f8 <memset>
  if(adcHandle->Instance==ADC3)
 8002034:	6822      	ldr	r2, [r4, #0]
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_ADC_MspInit+0x68>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d124      	bne.n	8002086 <HAL_ADC_MspInit+0x62>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800203c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002040:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2N = 40;
    PeriphClkInitStruct.PLL2.PLL2P = 2;
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
    PeriphClkInitStruct.PLL2.PLL2R = 2;
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002042:	2180      	movs	r1, #128	@ 0x80
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002044:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002046:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 800204a:	2206      	movs	r2, #6
 800204c:	2328      	movs	r3, #40	@ 0x28
 800204e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002052:	2302      	movs	r3, #2
 8002054:	2201      	movs	r2, #1
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002056:	9308      	str	r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002058:	e9cd 3206 	strd	r3, r2, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800205c:	2320      	movs	r3, #32
 800205e:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	f003 fbf1 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	b108      	cbz	r0, 800206c <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8002068:	f000 fa08 	bl	800247c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_ADC_MspInit+0x6c>)
 800206e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002072:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002076:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002086:	b032      	add	sp, #200	@ 0xc8
 8002088:	bd10      	pop	{r4, pc}
 800208a:	bf00      	nop
 800208c:	58026000 	.word	0x58026000
 8002090:	58024400 	.word	0x58024400

08002094 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <MX_DMA_Init+0x44>)
{
 8002096:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002098:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800209c:	2105      	movs	r1, #5
 800209e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80020a8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80020b6:	f001 faf1 	bl	800369c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020ba:	200b      	movs	r0, #11
 80020bc:	f001 fb20 	bl	8003700 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2105      	movs	r1, #5
 80020c4:	200c      	movs	r0, #12
 80020c6:	f001 fae9 	bl	800369c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020ca:	200c      	movs	r0, #12

}
 80020cc:	b003      	add	sp, #12
 80020ce:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020d2:	f001 bb15 	b.w	8003700 <HAL_NVIC_EnableIRQ>
 80020d6:	bf00      	nop
 80020d8:	58024400 	.word	0x58024400

080020dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f006 fdcc 	bl	8008c7c <osDelay>
  for(;;)
 80020e4:	e7fb      	b.n	80020de <StartDefaultTask+0x2>
	...

080020e8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80020e8:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020ea:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <MX_FREERTOS_Init+0x14>)
 80020ec:	2100      	movs	r1, #0
 80020ee:	4804      	ldr	r0, [pc, #16]	@ (8002100 <MX_FREERTOS_Init+0x18>)
 80020f0:	f006 fd80 	bl	8008bf4 <osThreadNew>
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <MX_FREERTOS_Init+0x1c>)
 80020f6:	6018      	str	r0, [r3, #0]
}
 80020f8:	bd08      	pop	{r3, pc}
 80020fa:	bf00      	nop
 80020fc:	080144ec 	.word	0x080144ec
 8002100:	080020dd 	.word	0x080020dd
 8002104:	240008a8 	.word	0x240008a8

08002108 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	2214      	movs	r2, #20
 800210e:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 8002110:	4e3e      	ldr	r6, [pc, #248]	@ (800220c <MX_GPIO_Init+0x104>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	a807      	add	r0, sp, #28

  /*Configure GPIO pin : E3_Pin */
  GPIO_InitStruct.Pin = E3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002116:	f009 f8ef 	bl	800b2f8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800211a:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <MX_GPIO_Init+0x108>)
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 800211c:	4630      	mov	r0, r6
 800211e:	f642 0108 	movw	r1, #10248	@ 0x2808
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002122:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002128:	f042 0210 	orr.w	r2, r2, #16
 800212c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002134:	f002 0210 	and.w	r2, r2, #16
 8002138:	9201      	str	r2, [sp, #4]
 800213a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002140:	f042 0204 	orr.w	r2, r2, #4
 8002144:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800214c:	f002 0204 	and.w	r2, r2, #4
 8002150:	9202      	str	r2, [sp, #8]
 8002152:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002158:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800215c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002164:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002168:	9203      	str	r2, [sp, #12]
 800216a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800217c:	f002 0201 	and.w	r2, r2, #1
 8002180:	9204      	str	r2, [sp, #16]
 8002182:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002188:	f042 0202 	orr.w	r2, r2, #2
 800218c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002190:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002194:	f002 0202 	and.w	r2, r2, #2
 8002198:	9205      	str	r2, [sp, #20]
 800219a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80021a0:	f042 0208 	orr.w	r2, r2, #8
 80021a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	9306      	str	r3, [sp, #24]
 80021b4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, E3_Pin|LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_RESET);
 80021b6:	f002 f9c5 	bl	8004544 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 80021bc:	a907      	add	r1, sp, #28
 80021be:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f002 f8ce 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80021cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80021d0:	a907      	add	r1, sp, #28
 80021d2:	4810      	ldr	r0, [pc, #64]	@ (8002214 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021d8:	2302      	movs	r3, #2
 80021da:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f002 f8c4 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 80021e0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e4:	a907      	add	r1, sp, #28
 80021e6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f2:	f002 f8b9 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : DShotRX_MOTOR1_Pin DShotRX_MOTOR2_Pin */
  GPIO_InitStruct.Pin = DShotRX_MOTOR1_Pin|DShotRX_MOTOR2_Pin;
 80021f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	a907      	add	r1, sp, #28
 80021fc:	4806      	ldr	r0, [pc, #24]	@ (8002218 <MX_GPIO_Init+0x110>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fe:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002204:	f002 f8b0 	bl	8004368 <HAL_GPIO_Init>

}
 8002208:	b00c      	add	sp, #48	@ 0x30
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	58021000 	.word	0x58021000
 8002210:	58024400 	.word	0x58024400
 8002214:	58020800 	.word	0x58020800
 8002218:	58020c00 	.word	0x58020c00

0800221c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800221c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800221e:	4812      	ldr	r0, [pc, #72]	@ (8002268 <MX_I2C2_Init+0x4c>)
  hi2c2.Init.Timing = 0x00B03FDB;
 8002220:	4a12      	ldr	r2, [pc, #72]	@ (800226c <MX_I2C2_Init+0x50>)
 8002222:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <MX_I2C2_Init+0x54>)
 8002224:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002228:	2300      	movs	r3, #0
 800222a:	2201      	movs	r2, #1
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
 800222c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002230:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002234:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002238:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800223a:	f002 fabc 	bl	80047b6 <HAL_I2C_Init>
 800223e:	b108      	cbz	r0, 8002244 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
 8002240:	f000 f91c 	bl	800247c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002244:	2100      	movs	r1, #0
 8002246:	4808      	ldr	r0, [pc, #32]	@ (8002268 <MX_I2C2_Init+0x4c>)
 8002248:	f002 fcc2 	bl	8004bd0 <HAL_I2CEx_ConfigAnalogFilter>
 800224c:	b108      	cbz	r0, 8002252 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
 800224e:	f000 f915 	bl	800247c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002252:	2100      	movs	r1, #0
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <MX_I2C2_Init+0x4c>)
 8002256:	f002 fce1 	bl	8004c1c <HAL_I2CEx_ConfigDigitalFilter>
 800225a:	b118      	cbz	r0, 8002264 <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800225c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002260:	f000 b90c 	b.w	800247c <Error_Handler>
}
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	240008ac 	.word	0x240008ac
 800226c:	40005800 	.word	0x40005800
 8002270:	00b03fdb 	.word	0x00b03fdb

08002274 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	b0b9      	sub	sp, #228	@ 0xe4
 8002278:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227a:	2214      	movs	r2, #20
 800227c:	2100      	movs	r1, #0
 800227e:	a803      	add	r0, sp, #12
 8002280:	f009 f83a 	bl	800b2f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	22c0      	movs	r2, #192	@ 0xc0
 8002286:	2100      	movs	r1, #0
 8002288:	a808      	add	r0, sp, #32
 800228a:	f009 f835 	bl	800b2f8 <memset>
  if(i2cHandle->Instance==I2C2)
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <HAL_I2C_MspInit+0xa4>)
 8002292:	429a      	cmp	r2, r3
 8002294:	d13d      	bne.n	8002312 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002296:	2208      	movs	r2, #8
 8002298:	2300      	movs	r3, #0
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800229c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a0:	f003 fad2 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	b108      	cbz	r0, 80022aa <HAL_I2C_MspInit+0x36>
    {
      Error_Handler();
 80022a6:	f000 f8e9 	bl	800247c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4c1c      	ldr	r4, [pc, #112]	@ (800231c <HAL_I2C_MspInit+0xa8>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2601      	movs	r6, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b0:	2504      	movs	r5, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	a903      	add	r1, sp, #12
 80022b8:	4819      	ldr	r0, [pc, #100]	@ (8002320 <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80022c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022c6:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f002 f843 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	a903      	add	r1, sp, #12
 80022e8:	480d      	ldr	r0, [pc, #52]	@ (8002320 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ea:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ec:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022f2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f002 f837 	bl	8004368 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022fa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80022fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002302:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8002306:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 800230a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002312:	b039      	add	sp, #228	@ 0xe4
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	bf00      	nop
 8002318:	40005800 	.word	0x40005800
 800231c:	58024400 	.word	0x58024400
 8002320:	58020400 	.word	0x58020400

08002324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002324:	b510      	push	{r4, lr}
 8002326:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002328:	224c      	movs	r2, #76	@ 0x4c
 800232a:	2100      	movs	r1, #0
 800232c:	a809      	add	r0, sp, #36	@ 0x24
 800232e:	f008 ffe3 	bl	800b2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	a801      	add	r0, sp, #4
 8002338:	f008 ffde 	bl	800b2f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800233c:	2002      	movs	r0, #2
 800233e:	f002 fc93 	bl	8004c68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <SystemClock_Config+0xb0>)
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800234e:	619a      	str	r2, [r3, #24]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <SystemClock_Config+0xb4>)
 800235a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800235c:	f041 0101 	orr.w	r1, r1, #1
 8002360:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002362:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002364:	f002 0201 	and.w	r2, r2, #1
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	0494      	lsls	r4, r2, #18
 8002370:	d5fc      	bpl.n	800236c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002376:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002378:	2005      	movs	r0, #5
 800237a:	22c0      	movs	r2, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800237c:	2408      	movs	r4, #8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237e:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002382:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002384:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002388:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 800238c:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800238e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002390:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002396:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002398:	e9cd 4319 	strd	r4, r3, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f002 fc88 	bl	8004cb0 <HAL_RCC_OscConfig>
 80023a0:	b108      	cbz	r0, 80023a6 <SystemClock_Config+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a6:	223f      	movs	r2, #63	@ 0x3f
 80023a8:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023aa:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80023b0:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80023b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80023b6:	e9cd 0403 	strd	r0, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023ba:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80023be:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80023c2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023c6:	f002 ffbd 	bl	8005344 <HAL_RCC_ClockConfig>
 80023ca:	b108      	cbz	r0, 80023d0 <SystemClock_Config+0xac>
 80023cc:	b672      	cpsid	i
  while (1)
 80023ce:	e7fe      	b.n	80023ce <SystemClock_Config+0xaa>
}
 80023d0:	b01c      	add	sp, #112	@ 0x70
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	58024800 	.word	0x58024800
 80023d8:	58000400 	.word	0x58000400

080023dc <main>:
{
 80023dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023de:	2100      	movs	r1, #0
 80023e0:	2210      	movs	r2, #16
 80023e2:	4668      	mov	r0, sp
 80023e4:	f008 ff88 	bl	800b2f8 <memset>
  HAL_MPU_Disable();
 80023e8:	f001 f998 	bl	800371c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023ec:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023ee:	2200      	movs	r2, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023f0:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023f2:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023f6:	f248 731f 	movw	r3, #34591	@ 0x871f
 80023fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80023fe:	f240 1301 	movw	r3, #257	@ 0x101
 8002402:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002404:	f001 f9a8 	bl	8003758 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002408:	2004      	movs	r0, #4
 800240a:	f001 f995 	bl	8003738 <HAL_MPU_Enable>
  HAL_Init();
 800240e:	f000 fd25 	bl	8002e5c <HAL_Init>
  SystemClock_Config();
 8002412:	f7ff ff87 	bl	8002324 <SystemClock_Config>
  MX_GPIO_Init();
 8002416:	f7ff fe77 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 800241a:	f7ff fe3b 	bl	8002094 <MX_DMA_Init>
  MX_TIM1_Init();
 800241e:	f000 fbb5 	bl	8002b8c <MX_TIM1_Init>
  MX_SPI4_Init();
 8002422:	f000 f82d 	bl	8002480 <MX_SPI4_Init>
  MX_ADC3_Init();
 8002426:	f7ff fdbd 	bl	8001fa4 <MX_ADC3_Init>
  MX_TIM17_Init();
 800242a:	f000 fa67 	bl	80028fc <MX_TIM17_Init>
  MX_I2C2_Init();
 800242e:	f7ff fef5 	bl	800221c <MX_I2C2_Init>
  MX_UART5_Init();
 8002432:	f000 fc63 	bl	8002cfc <MX_UART5_Init>
  MX_TIM3_Init();
 8002436:	f000 fc07 	bl	8002c48 <MX_TIM3_Init>
  MX_TIM16_Init();
 800243a:	f000 fa15 	bl	8002868 <MX_TIM16_Init>
  Test_Run();
 800243e:	f7ff fd45 	bl	8001ecc <Test_Run>
  osKernelInitialize();
 8002442:	f006 fbab 	bl	8008b9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002446:	f7ff fe4f 	bl	80020e8 <MX_FREERTOS_Init>
  osKernelStart();
 800244a:	f006 fbb9 	bl	8008bc0 <osKernelStart>
  while (1)
 800244e:	e7fe      	b.n	800244e <main+0x72>

08002450 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3)
 8002450:	6802      	ldr	r2, [r0, #0]
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002454:	429a      	cmp	r2, r3
{
 8002456:	b510      	push	{r4, lr}
 8002458:	4604      	mov	r4, r0
	if (htim->Instance == TIM3)
 800245a:	d101      	bne.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x10>
		TIM_PeriodElapsedCallback_TIM3();
 800245c:	f7fe f948 	bl	80006f0 <TIM_PeriodElapsedCallback_TIM3>
  if (htim->Instance == TIM7)
 8002460:	6822      	ldr	r2, [r4, #0]
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002464:	429a      	cmp	r2, r3
 8002466:	d103      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x20>
}
 8002468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_IncTick();
 800246c:	f000 bd24 	b.w	8002eb8 <HAL_IncTick>
}
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	40000400 	.word	0x40000400
 8002478:	40001400 	.word	0x40001400

0800247c <Error_Handler>:
 800247c:	b672      	cpsid	i
  while (1)
 800247e:	e7fe      	b.n	800247e <Error_Handler+0x2>

08002480 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002480:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002482:	4816      	ldr	r0, [pc, #88]	@ (80024dc <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002484:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002488:	4a15      	ldr	r2, [pc, #84]	@ (80024e0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800248a:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800248e:	f04f 6c80 	mov.w	ip, #67108864	@ 0x4000000
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002492:	e9c0 2300 	strd	r2, r3, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002496:	2307      	movs	r3, #7
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002498:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800249c:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024a0:	e9c0 c206 	strd	ip, r2, [r0, #24]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a4:	2300      	movs	r3, #0
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 80024b2:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024b6:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024ba:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024be:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024c2:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024c6:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024ca:	f004 fa71 	bl	80069b0 <HAL_SPI_Init>
 80024ce:	b118      	cbz	r0, 80024d8 <MX_SPI4_Init+0x58>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80024d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80024d4:	f7ff bfd2 	b.w	800247c <Error_Handler>
}
 80024d8:	bd08      	pop	{r3, pc}
 80024da:	bf00      	nop
 80024dc:	24000900 	.word	0x24000900
 80024e0:	40013400 	.word	0x40013400

080024e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024e4:	b510      	push	{r4, lr}
 80024e6:	b0b8      	sub	sp, #224	@ 0xe0
 80024e8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	2214      	movs	r2, #20
 80024ec:	2100      	movs	r1, #0
 80024ee:	a803      	add	r0, sp, #12
 80024f0:	f008 ff02 	bl	800b2f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f4:	22c0      	movs	r2, #192	@ 0xc0
 80024f6:	2100      	movs	r1, #0
 80024f8:	a808      	add	r0, sp, #32
 80024fa:	f008 fefd 	bl	800b2f8 <memset>
  if(spiHandle->Instance==SPI4)
 80024fe:	6822      	ldr	r2, [r4, #0]
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_SPI_MspInit+0x8c>)
 8002502:	429a      	cmp	r2, r3
 8002504:	d131      	bne.n	800256a <HAL_SPI_MspInit+0x86>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800250a:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800250e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002512:	f003 f999 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	b108      	cbz	r0, 800251c <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8002518:	f7ff ffb0 	bl	800247c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800251e:	a903      	add	r1, sp, #12
 8002520:	4815      	ldr	r0, [pc, #84]	@ (8002578 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002522:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002526:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800252a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800252e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002532:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800253a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002562:	2305      	movs	r3, #5
 8002564:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002566:	f001 feff 	bl	8004368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800256a:	b038      	add	sp, #224	@ 0xe0
 800256c:	bd10      	pop	{r4, pc}
 800256e:	bf00      	nop
 8002570:	40013400 	.word	0x40013400
 8002574:	58024400 	.word	0x58024400
 8002578:	58021000 	.word	0x58021000

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4c13      	ldr	r4, [pc, #76]	@ (80025cc <HAL_MspInit+0x50>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	210f      	movs	r1, #15
 8002584:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002588:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 8002594:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025a0:	f001 f87c 	bl	800369c <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80025a4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ac:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 80025b0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 80025b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9b01      	ldr	r3, [sp, #4]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80025bc:	f000 fcb0 	bl	8002f20 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80025c0:	2002      	movs	r0, #2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	b002      	add	sp, #8
 80025c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80025c8:	f000 bca0 	b.w	8002f0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 80025cc:	58024400 	.word	0x58024400

080025d0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d0:	280f      	cmp	r0, #15
{
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
 80025d6:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d8:	d902      	bls.n	80025e0 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim7);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80025dc:	b00a      	add	sp, #40	@ 0x28
 80025de:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80025e0:	4601      	mov	r1, r0
 80025e2:	2200      	movs	r2, #0
 80025e4:	2037      	movs	r0, #55	@ 0x37
 80025e6:	f001 f859 	bl	800369c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025ea:	2037      	movs	r0, #55	@ 0x37
 80025ec:	f001 f888 	bl	8003700 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80025f0:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025f2:	4669      	mov	r1, sp
 80025f4:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80025f6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM7_CLK_ENABLE();
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_InitTick+0x88>)
 80025fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002612:	f003 f803 	bl	800561c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002616:	9b07      	ldr	r3, [sp, #28]
 8002618:	b9c3      	cbnz	r3, 800264c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800261a:	f002 ffdb 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 800261e:	4c0f      	ldr	r4, [pc, #60]	@ (800265c <HAL_InitTick+0x8c>)
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <HAL_InitTick+0x90>)
 8002622:	6023      	str	r3, [r4, #0]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002624:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002628:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_InitTick+0x94>)
 800262c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002630:	3801      	subs	r0, #1
  htim7.Init.ClockDivision = 0;
 8002632:	2300      	movs	r3, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 8002634:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002636:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8002638:	6123      	str	r3, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800263c:	f004 ff46 	bl	80074cc <HAL_TIM_Base_Init>
 8002640:	2800      	cmp	r0, #0
 8002642:	d1ca      	bne.n	80025da <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim7);
 8002644:	4620      	mov	r0, r4
 8002646:	f004 fdf1 	bl	800722c <HAL_TIM_Base_Start_IT>
 800264a:	e7c7      	b.n	80025dc <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800264c:	f002 ffc2 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8002650:	0040      	lsls	r0, r0, #1
 8002652:	e7e4      	b.n	800261e <HAL_InitTick+0x4e>
 8002654:	2400007c 	.word	0x2400007c
 8002658:	58024400 	.word	0x58024400
 800265c:	24000988 	.word	0x24000988
 8002660:	40001400 	.word	0x40001400
 8002664:	000f4240 	.word	0x000f4240

08002668 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler>

0800266a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <HardFault_Handler>

0800266c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler>

0800266e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <BusFault_Handler>

08002670 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler>

08002672 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002672:	4770      	bx	lr

08002674 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002674:	4801      	ldr	r0, [pc, #4]	@ (800267c <DMA1_Stream0_IRQHandler+0x8>)
 8002676:	f001 bca7 	b.w	8003fc8 <HAL_DMA_IRQHandler>
 800267a:	bf00      	nop
 800267c:	24000a50 	.word	0x24000a50

08002680 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002680:	4801      	ldr	r0, [pc, #4]	@ (8002688 <DMA1_Stream1_IRQHandler+0x8>)
 8002682:	f001 bca1 	b.w	8003fc8 <HAL_DMA_IRQHandler>
 8002686:	bf00      	nop
 8002688:	240009d8 	.word	0x240009d8

0800268c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800268c:	4801      	ldr	r0, [pc, #4]	@ (8002694 <UART5_IRQHandler+0x8>)
 800268e:	f005 ba97 	b.w	8007bc0 <HAL_UART_IRQHandler>
 8002692:	bf00      	nop
 8002694:	24000bf8 	.word	0x24000bf8

08002698 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002698:	4801      	ldr	r0, [pc, #4]	@ (80026a0 <TIM7_IRQHandler+0x8>)
 800269a:	f004 be22 	b.w	80072e2 <HAL_TIM_IRQHandler>
 800269e:	bf00      	nop
 80026a0:	24000988 	.word	0x24000988

080026a4 <TIM16_IRQHandler>:
void TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026a4:	4801      	ldr	r0, [pc, #4]	@ (80026ac <TIM16_IRQHandler+0x8>)
 80026a6:	f004 be1c 	b.w	80072e2 <HAL_TIM_IRQHandler>
 80026aa:	bf00      	nop
 80026ac:	24000b14 	.word	0x24000b14

080026b0 <TIM17_IRQHandler>:
void TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80026b0:	4801      	ldr	r0, [pc, #4]	@ (80026b8 <TIM17_IRQHandler+0x8>)
 80026b2:	f004 be16 	b.w	80072e2 <HAL_TIM_IRQHandler>
 80026b6:	bf00      	nop
 80026b8:	24000ac8 	.word	0x24000ac8

080026bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80026bc:	2001      	movs	r0, #1
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026c2:	f008 fec9 	bl	800b458 <__errno>
 80026c6:	2316      	movs	r3, #22
 80026c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	bd08      	pop	{r3, pc}

080026d0 <_exit>:

void _exit (int status)
{
 80026d0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80026d2:	f008 fec1 	bl	800b458 <__errno>
 80026d6:	2316      	movs	r3, #22
 80026d8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80026da:	e7fe      	b.n	80026da <_exit+0xa>

080026dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	460d      	mov	r5, r1
 80026e0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	460e      	mov	r6, r1
 80026e4:	1b73      	subs	r3, r6, r5
 80026e6:	429c      	cmp	r4, r3
 80026e8:	dc01      	bgt.n	80026ee <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80026ea:	4620      	mov	r0, r4
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80026ee:	f3af 8000 	nop.w
 80026f2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	e7f5      	b.n	80026e4 <_read+0x8>

080026f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	460d      	mov	r5, r1
 80026fc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	460e      	mov	r6, r1
 8002700:	1b73      	subs	r3, r6, r5
 8002702:	429c      	cmp	r4, r3
 8002704:	dc01      	bgt.n	800270a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002706:	4620      	mov	r0, r4
 8002708:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800270a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800270e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	e7f5      	b.n	8002700 <_write+0x8>

08002714 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	4770      	bx	lr

0800271a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800271a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800271e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002720:	604b      	str	r3, [r1, #4]
}
 8002722:	4770      	bx	lr

08002724 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002724:	2001      	movs	r0, #1
 8002726:	4770      	bx	lr

08002728 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002728:	2000      	movs	r0, #0
 800272a:	4770      	bx	lr

0800272c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4a0b      	ldr	r2, [pc, #44]	@ (800275c <_sbrk+0x30>)
{
 800272e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002730:	6811      	ldr	r1, [r2, #0]
{
 8002732:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002734:	b909      	cbnz	r1, 800273a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <_sbrk+0x34>)
 8002738:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	4909      	ldr	r1, [pc, #36]	@ (8002764 <_sbrk+0x38>)
 800273e:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <_sbrk+0x3c>)
 8002740:	4403      	add	r3, r0
 8002742:	1b09      	subs	r1, r1, r4
 8002744:	428b      	cmp	r3, r1
 8002746:	d906      	bls.n	8002756 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002748:	f008 fe86 	bl	800b458 <__errno>
 800274c:	230c      	movs	r3, #12
 800274e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002750:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002754:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002756:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002758:	e7fc      	b.n	8002754 <_sbrk+0x28>
 800275a:	bf00      	nop
 800275c:	240009d4 	.word	0x240009d4
 8002760:	240057c0 	.word	0x240057c0
 8002764:	24080000 	.word	0x24080000
 8002768:	00000400 	.word	0x00000400

0800276c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800276c:	4a2e      	ldr	r2, [pc, #184]	@ (8002828 <SystemInit+0xbc>)
 800276e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002776:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800277a:	4a2c      	ldr	r2, [pc, #176]	@ (800282c <SystemInit+0xc0>)
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	2b06      	cmp	r3, #6
 8002784:	d805      	bhi.n	8002792 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f023 030f 	bic.w	r3, r3, #15
 800278c:	f043 0307 	orr.w	r3, r3, #7
 8002790:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <SystemInit+0xc4>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027a0:	4a24      	ldr	r2, [pc, #144]	@ (8002834 <SystemInit+0xc8>)
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a6:	4921      	ldr	r1, [pc, #132]	@ (800282c <SystemInit+0xc0>)
  RCC->CR &= 0xEAF6ED7FU;
 80027a8:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027aa:	680a      	ldr	r2, [r1, #0]
 80027ac:	0710      	lsls	r0, r2, #28
 80027ae:	d505      	bpl.n	80027bc <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027b0:	680a      	ldr	r2, [r1, #0]
 80027b2:	f022 020f 	bic.w	r2, r2, #15
 80027b6:	f042 0207 	orr.w	r2, r2, #7
 80027ba:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027bc:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027be:	491e      	ldr	r1, [pc, #120]	@ (8002838 <SystemInit+0xcc>)
  RCC->D1CFGR = 0x00000000;
 80027c0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80027c2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80027c4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80027c6:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027c8:	491c      	ldr	r1, [pc, #112]	@ (800283c <SystemInit+0xd0>)
 80027ca:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027cc:	491c      	ldr	r1, [pc, #112]	@ (8002840 <SystemInit+0xd4>)
 80027ce:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027d2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027d6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80027e0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027e2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <SystemInit+0xd8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f36f 030f 	bfc	r3, #0, #16
 80027ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f0:	d203      	bcs.n	80027fa <SystemInit+0x8e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <SystemInit+0xdc>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <SystemInit+0xc4>)
 80027fc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002800:	04d2      	lsls	r2, r2, #19
 8002802:	d40f      	bmi.n	8002824 <SystemInit+0xb8>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002804:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002808:	f243 01d2 	movw	r1, #12498	@ 0x30d2
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800280c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002810:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <SystemInit+0xe0>)
 8002816:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002818:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800281c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002820:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00
 800282c:	52002000 	.word	0x52002000
 8002830:	58024400 	.word	0x58024400
 8002834:	eaf6ed7f 	.word	0xeaf6ed7f
 8002838:	02020200 	.word	0x02020200
 800283c:	01ff0000 	.word	0x01ff0000
 8002840:	01010280 	.word	0x01010280
 8002844:	5c001000 	.word	0x5c001000
 8002848:	51008000 	.word	0x51008000
 800284c:	52004000 	.word	0x52004000

08002850 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <ExitRun0Mode+0x14>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	f042 0202 	orr.w	r2, r2, #2
 8002858:	60da      	str	r2, [r3, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	0492      	lsls	r2, r2, #18
 800285e:	d5fc      	bpl.n	800285a <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	58024800 	.word	0x58024800

08002868 <MX_TIM16_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002868:	b510      	push	{r4, lr}
 800286a:	b092      	sub	sp, #72	@ 0x48

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800286c:	221c      	movs	r2, #28
 800286e:	2100      	movs	r1, #0
 8002870:	4668      	mov	r0, sp
 8002872:	f008 fd41 	bl	800b2f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002876:	222c      	movs	r2, #44	@ 0x2c
 8002878:	2100      	movs	r1, #0
 800287a:	a807      	add	r0, sp, #28
 800287c:	f008 fd3c 	bl	800b2f8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002880:	481c      	ldr	r0, [pc, #112]	@ (80028f4 <MX_TIM16_Init+0x8c>)
  htim16.Init.Prescaler = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <MX_TIM16_Init+0x90>)
 8002886:	e9c0 2300 	strd	r2, r3, [r0]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 640;
 800288a:	f44f 7220 	mov.w	r2, #640	@ 0x280
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002898:	f004 fe18 	bl	80074cc <HAL_TIM_Base_Init>
 800289c:	b108      	cbz	r0, 80028a2 <MX_TIM16_Init+0x3a>
  {
    Error_Handler();
 800289e:	f7ff fded 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80028a2:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <MX_TIM16_Init+0x8c>)
 80028a4:	f004 fe42 	bl	800752c <HAL_TIM_OC_Init>
 80028a8:	b108      	cbz	r0, 80028ae <MX_TIM16_Init+0x46>
  {
    Error_Handler();
 80028aa:	f7ff fde7 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80028ae:	2400      	movs	r4, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b0:	4669      	mov	r1, sp
 80028b2:	4810      	ldr	r0, [pc, #64]	@ (80028f4 <MX_TIM16_Init+0x8c>)
 80028b4:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b6:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 80028b8:	e9cd 4400 	strd	r4, r4, [sp]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c4:	f004 fed2 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 80028c8:	b108      	cbz	r0, 80028ce <MX_TIM16_Init+0x66>
  {
    Error_Handler();
 80028ca:	f7ff fdd7 	bl	800247c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80028d2:	a907      	add	r1, sp, #28
 80028d4:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <MX_TIM16_Init+0x8c>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028d6:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028d8:	9411      	str	r4, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028da:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028de:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028e2:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80028e6:	f005 f8ef 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 80028ea:	b108      	cbz	r0, 80028f0 <MX_TIM16_Init+0x88>
  {
    Error_Handler();
 80028ec:	f7ff fdc6 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80028f0:	b012      	add	sp, #72	@ 0x48
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	24000b14 	.word	0x24000b14
 80028f8:	40014400 	.word	0x40014400

080028fc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80028fc:	b510      	push	{r4, lr}
 80028fe:	b092      	sub	sp, #72	@ 0x48

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002900:	221c      	movs	r2, #28
 8002902:	2100      	movs	r1, #0
 8002904:	4668      	mov	r0, sp
 8002906:	f008 fcf7 	bl	800b2f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800290a:	222c      	movs	r2, #44	@ 0x2c
 800290c:	2100      	movs	r1, #0
 800290e:	a807      	add	r0, sp, #28
 8002910:	f008 fcf2 	bl	800b2f8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002914:	481d      	ldr	r0, [pc, #116]	@ (800298c <MX_TIM17_Init+0x90>)
  htim17.Init.Prescaler = 239;
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <MX_TIM17_Init+0x94>)
 8002918:	23ef      	movs	r3, #239	@ 0xef
 800291a:	e9c0 2300 	strd	r2, r3, [r0]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 9999;
 800291e:	2300      	movs	r3, #0
 8002920:	f242 720f 	movw	r2, #9999	@ 0x270f
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
 8002924:	e9c0 3304 	strd	r3, r3, [r0, #16]
  htim17.Init.Period = 9999;
 8002928:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800292e:	f004 fdcd 	bl	80074cc <HAL_TIM_Base_Init>
 8002932:	b108      	cbz	r0, 8002938 <MX_TIM17_Init+0x3c>
  {
    Error_Handler();
 8002934:	f7ff fda2 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8002938:	4814      	ldr	r0, [pc, #80]	@ (800298c <MX_TIM17_Init+0x90>)
 800293a:	f004 fdf7 	bl	800752c <HAL_TIM_OC_Init>
 800293e:	b108      	cbz	r0, 8002944 <MX_TIM17_Init+0x48>
  {
    Error_Handler();
 8002940:	f7ff fd9c 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002944:	2400      	movs	r4, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002946:	4669      	mov	r1, sp
 8002948:	4810      	ldr	r0, [pc, #64]	@ (800298c <MX_TIM17_Init+0x90>)
 800294a:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800294c:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 800294e:	e9cd 4400 	strd	r4, r4, [sp]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002952:	e9cd 4402 	strd	r4, r4, [sp, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002956:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800295a:	f004 fe87 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 800295e:	b108      	cbz	r0, 8002964 <MX_TIM17_Init+0x68>
  {
    Error_Handler();
 8002960:	f7ff fd8c 	bl	800247c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002968:	a907      	add	r1, sp, #28
 800296a:	4808      	ldr	r0, [pc, #32]	@ (800298c <MX_TIM17_Init+0x90>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800296c:	940b      	str	r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800296e:	9411      	str	r4, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002970:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002974:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002978:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800297c:	f005 f8a4 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002980:	b108      	cbz	r0, 8002986 <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 8002982:	f7ff fd7b 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002986:	b012      	add	sp, #72	@ 0x48
 8002988:	bd10      	pop	{r4, pc}
 800298a:	bf00      	nop
 800298c:	24000ac8 	.word	0x24000ac8
 8002990:	40014800 	.word	0x40014800

08002994 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8002994:	6802      	ldr	r2, [r0, #0]
{
 8002996:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_TIM_PWM_MspInit+0x28>)
 800299a:	429a      	cmp	r2, r3
 800299c:	d10c      	bne.n	80029b8 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_TIM_PWM_MspInit+0x2c>)
 80029a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80029ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80029b8:	b002      	add	sp, #8
 80029ba:	4770      	bx	lr
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400

080029c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80029c4:	6803      	ldr	r3, [r0, #0]
 80029c6:	4a43      	ldr	r2, [pc, #268]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x110>)
 80029c8:	4293      	cmp	r3, r2
{
 80029ca:	b530      	push	{r4, r5, lr}
 80029cc:	4605      	mov	r5, r0
 80029ce:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM3)
 80029d0:	d14e      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_TIM_Base_MspInit+0x114>)
    hdma_tim3_ch1.Instance = DMA1_Stream0;
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 80029d8:	4c40      	ldr	r4, [pc, #256]	@ (8002adc <HAL_TIM_Base_MspInit+0x118>)
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	f04f 0e40 	mov.w	lr, #64	@ 0x40
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80029e2:	f8df c10c 	ldr.w	ip, [pc, #268]	@ 8002af0 <HAL_TIM_Base_MspInit+0x12c>
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80029e6:	4620      	mov	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e8:	f042 0202 	orr.w	r2, r2, #2
 80029ec:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002a00:	2317      	movs	r3, #23
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a02:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002a06:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	2300      	movs	r3, #0
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002a10:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002a14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a18:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002a20:	f000 ff96 	bl	8003950 <HAL_DMA_Init>
 8002a24:	b108      	cbz	r0, 8002a2a <HAL_TIM_Base_MspInit+0x66>
    {
      Error_Handler();
 8002a26:	f7ff fd29 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002a2a:	626c      	str	r4, [r5, #36]	@ 0x24

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream1;
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002a2c:	2318      	movs	r3, #24
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae0 <HAL_TIM_Base_MspInit+0x11c>)
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a30:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002a34:	63a5      	str	r5, [r4, #56]	@ 0x38
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a36:	2140      	movs	r1, #64	@ 0x40
    hdma_tim3_ch2.Instance = DMA1_Stream1;
 8002a38:	4c2a      	ldr	r4, [pc, #168]	@ (8002ae4 <HAL_TIM_Base_MspInit+0x120>)
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002a3a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a42:	2300      	movs	r3, #0
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a44:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002a4c:	4620      	mov	r0, r4
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002a4e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002a52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a56:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002a5e:	f000 ff77 	bl	8003950 <HAL_DMA_Init>
 8002a62:	b108      	cbz	r0, 8002a68 <HAL_TIM_Base_MspInit+0xa4>
    {
      Error_Handler();
 8002a64:	f7ff fd0a 	bl	800247c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002a68:	62ac      	str	r4, [r5, #40]	@ 0x28
 8002a6a:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002a6c:	b005      	add	sp, #20
 8002a6e:	bd30      	pop	{r4, r5, pc}
  else if(tim_baseHandle->Instance==TIM16)
 8002a70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae8 <HAL_TIM_Base_MspInit+0x124>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d117      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a76:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_TIM_Base_MspInit+0x114>)
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8002a78:	2075      	movs	r0, #117	@ 0x75
 8002a7a:	2105      	movs	r1, #5
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002a80:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002a84:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8002a88:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 8002a96:	f000 fe01 	bl	800369c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002a9a:	2075      	movs	r0, #117	@ 0x75
}
 8002a9c:	b005      	add	sp, #20
 8002a9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002aa2:	f000 be2d 	b.w	8003700 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM17)
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_TIM_Base_MspInit+0x128>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d1df      	bne.n	8002a6c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_TIM_Base_MspInit+0x114>)
    HAL_NVIC_SetPriority(TIM17_IRQn, 5, 0);
 8002aae:	2076      	movs	r0, #118	@ 0x76
 8002ab0:	2105      	movs	r1, #5
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ab2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002ab6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002aba:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    HAL_NVIC_SetPriority(TIM17_IRQn, 5, 0);
 8002abe:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac8:	9303      	str	r3, [sp, #12]
 8002aca:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 5, 0);
 8002acc:	f000 fde6 	bl	800369c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002ad0:	2076      	movs	r0, #118	@ 0x76
 8002ad2:	e7e3      	b.n	8002a9c <HAL_TIM_Base_MspInit+0xd8>
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	24000a50 	.word	0x24000a50
 8002ae0:	40020028 	.word	0x40020028
 8002ae4:	240009d8 	.word	0x240009d8
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800
 8002af0:	40020010 	.word	0x40020010

08002af4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002af4:	b510      	push	{r4, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	2214      	movs	r2, #20
 8002afc:	2100      	movs	r1, #0
 8002afe:	a803      	add	r0, sp, #12
 8002b00:	f008 fbfa 	bl	800b2f8 <memset>
  if(timHandle->Instance==TIM1)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_TIM_MspPostInit+0x84>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d119      	bne.n	8002b40 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_TIM_MspPostInit+0x88>)
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b12:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b18:	f042 0210 	orr.w	r2, r2, #16
 8002b1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b32:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b34:	4812      	ldr	r0, [pc, #72]	@ (8002b80 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b36:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = DShotTX_MOTOR1_Pin|DShotTX_MOTOR2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f001 fc16 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b3c:	b008      	add	sp, #32
 8002b3e:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8002b40:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_TIM_MspPostInit+0x90>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d1fa      	bne.n	8002b3c <HAL_TIM_MspPostInit+0x48>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	480f      	ldr	r0, [pc, #60]	@ (8002b88 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	e9cd 1205 	strd	r1, r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	a903      	add	r1, sp, #12
 8002b76:	e7df      	b.n	8002b38 <HAL_TIM_MspPostInit+0x44>
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58021000 	.word	0x58021000
 8002b84:	40000400 	.word	0x40000400
 8002b88:	58020000 	.word	0x58020000

08002b8c <MX_TIM1_Init>:
{
 8002b8c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8e:	2400      	movs	r4, #0
{
 8002b90:	b096      	sub	sp, #88	@ 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b92:	221c      	movs	r2, #28
 8002b94:	4621      	mov	r1, r4
 8002b96:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b98:	9403      	str	r4, [sp, #12]
 8002b9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9e:	f008 fbab 	bl	800b2f8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ba2:	222c      	movs	r2, #44	@ 0x2c
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	eb0d 0002 	add.w	r0, sp, r2
 8002baa:	f008 fba5 	bl	800b2f8 <memset>
  htim1.Instance = TIM1;
 8002bae:	4824      	ldr	r0, [pc, #144]	@ (8002c40 <MX_TIM1_Init+0xb4>)
  htim1.Init.Prescaler = 12-1;
 8002bb0:	230b      	movs	r3, #11
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <MX_TIM1_Init+0xb8>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 12-1;
 8002bb6:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 10000-1;
 8002bba:	f242 730f 	movw	r3, #9999	@ 0x270f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	e9c0 4405 	strd	r4, r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc6:	f004 fce1 	bl	800758c <HAL_TIM_PWM_Init>
 8002bca:	b108      	cbz	r0, 8002bd0 <MX_TIM1_Init+0x44>
    Error_Handler();
 8002bcc:	f7ff fc56 	bl	800247c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd0:	a901      	add	r1, sp, #4
 8002bd2:	481b      	ldr	r0, [pc, #108]	@ (8002c40 <MX_TIM1_Init+0xb4>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd4:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bd6:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bda:	f004 ff2b 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8002bde:	b108      	cbz	r0, 8002be4 <MX_TIM1_Init+0x58>
    Error_Handler();
 8002be0:	f7ff fc4c 	bl	800247c <Error_Handler>
  sConfigOC.Pulse = 0;
 8002be4:	2400      	movs	r4, #0
 8002be6:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be8:	2204      	movs	r2, #4
 8002bea:	a904      	add	r1, sp, #16
 8002bec:	4814      	ldr	r0, [pc, #80]	@ (8002c40 <MX_TIM1_Init+0xb4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bee:	9406      	str	r4, [sp, #24]
  sConfigOC.Pulse = 0;
 8002bf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002bf4:	2308      	movs	r3, #8
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bf6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfa:	e9cd 3407 	strd	r3, r4, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bfe:	f004 fd67 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002c02:	b108      	cbz	r0, 8002c08 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002c04:	f7ff fc3a 	bl	800247c <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c0c:	a90b      	add	r1, sp, #44	@ 0x2c
 8002c0e:	480c      	ldr	r0, [pc, #48]	@ (8002c40 <MX_TIM1_Init+0xb4>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c10:	940f      	str	r4, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c12:	9412      	str	r4, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c14:	9415      	str	r4, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c16:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c1e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c22:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c26:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c2a:	f004 ff4d 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c2e:	b108      	cbz	r0, 8002c34 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8002c30:	f7ff fc24 	bl	800247c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <MX_TIM1_Init+0xb4>)
 8002c36:	f7ff ff5d 	bl	8002af4 <HAL_TIM_MspPostInit>
}
 8002c3a:	b016      	add	sp, #88	@ 0x58
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000bac 	.word	0x24000bac
 8002c44:	40010000 	.word	0x40010000

08002c48 <MX_TIM3_Init>:
{
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	a803      	add	r0, sp, #12
 8002c54:	f008 fb50 	bl	800b2f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c58:	221c      	movs	r2, #28
 8002c5a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5e:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c62:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c66:	f008 fb47 	bl	800b2f8 <memset>
  htim3.Instance = TIM3;
 8002c6a:	4822      	ldr	r0, [pc, #136]	@ (8002cf4 <MX_TIM3_Init+0xac>)
 8002c6c:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <MX_TIM3_Init+0xb0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6e:	6084      	str	r4, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c70:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 0;
 8002c72:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 800;
 8002c76:	f44f 7348 	mov.w	r3, #800	@ 0x320
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c7e:	f004 fc25 	bl	80074cc <HAL_TIM_Base_Init>
 8002c82:	b108      	cbz	r0, 8002c88 <MX_TIM3_Init+0x40>
    Error_Handler();
 8002c84:	f7ff fbfa 	bl	800247c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c8c:	a903      	add	r1, sp, #12
 8002c8e:	4819      	ldr	r0, [pc, #100]	@ (8002cf4 <MX_TIM3_Init+0xac>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c90:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c92:	f004 fda3 	bl	80077dc <HAL_TIM_ConfigClockSource>
 8002c96:	b108      	cbz	r0, 8002c9c <MX_TIM3_Init+0x54>
    Error_Handler();
 8002c98:	f7ff fbf0 	bl	800247c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c9c:	4815      	ldr	r0, [pc, #84]	@ (8002cf4 <MX_TIM3_Init+0xac>)
 8002c9e:	f004 fc75 	bl	800758c <HAL_TIM_PWM_Init>
 8002ca2:	b108      	cbz	r0, 8002ca8 <MX_TIM3_Init+0x60>
    Error_Handler();
 8002ca4:	f7ff fbea 	bl	800247c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca8:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002caa:	4669      	mov	r1, sp
 8002cac:	4811      	ldr	r0, [pc, #68]	@ (8002cf4 <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cae:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb0:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb2:	f004 febf 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb6:	b108      	cbz	r0, 8002cbc <MX_TIM3_Init+0x74>
    Error_Handler();
 8002cb8:	f7ff fbe0 	bl	800247c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cbc:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	a907      	add	r1, sp, #28
 8002cc2:	480c      	ldr	r0, [pc, #48]	@ (8002cf4 <MX_TIM3_Init+0xac>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc4:	940b      	str	r4, [sp, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8002cc6:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cce:	f004 fcff 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002cd2:	b108      	cbz	r0, 8002cd8 <MX_TIM3_Init+0x90>
    Error_Handler();
 8002cd4:	f7ff fbd2 	bl	800247c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cd8:	2204      	movs	r2, #4
 8002cda:	a907      	add	r1, sp, #28
 8002cdc:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <MX_TIM3_Init+0xac>)
 8002cde:	f004 fcf7 	bl	80076d0 <HAL_TIM_PWM_ConfigChannel>
 8002ce2:	b108      	cbz	r0, 8002ce8 <MX_TIM3_Init+0xa0>
    Error_Handler();
 8002ce4:	f7ff fbca 	bl	800247c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <MX_TIM3_Init+0xac>)
 8002cea:	f7ff ff03 	bl	8002af4 <HAL_TIM_MspPostInit>
}
 8002cee:	b00e      	add	sp, #56	@ 0x38
 8002cf0:	bd10      	pop	{r4, pc}
 8002cf2:	bf00      	nop
 8002cf4:	24000b60 	.word	0x24000b60
 8002cf8:	40000400 	.word	0x40000400

08002cfc <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002cfe:	4816      	ldr	r0, [pc, #88]	@ (8002d58 <MX_UART5_Init+0x5c>)
  huart5.Init.BaudRate = 115200;
 8002d00:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002d04:	4a15      	ldr	r2, [pc, #84]	@ (8002d5c <MX_UART5_Init+0x60>)
 8002d06:	e9c0 2300 	strd	r2, r3, [r0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	2300      	movs	r3, #0
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002d0c:	220c      	movs	r2, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002d0e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002d12:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d14:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d18:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1c:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002d20:	f005 fdd2 	bl	80088c8 <HAL_UART_Init>
 8002d24:	b108      	cbz	r0, 8002d2a <MX_UART5_Init+0x2e>
  {
    Error_Handler();
 8002d26:	f7ff fba9 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	480a      	ldr	r0, [pc, #40]	@ (8002d58 <MX_UART5_Init+0x5c>)
 8002d2e:	f005 fee7 	bl	8008b00 <HAL_UARTEx_SetTxFifoThreshold>
 8002d32:	b108      	cbz	r0, 8002d38 <MX_UART5_Init+0x3c>
  {
    Error_Handler();
 8002d34:	f7ff fba2 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4807      	ldr	r0, [pc, #28]	@ (8002d58 <MX_UART5_Init+0x5c>)
 8002d3c:	f005 ff00 	bl	8008b40 <HAL_UARTEx_SetRxFifoThreshold>
 8002d40:	b108      	cbz	r0, 8002d46 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 8002d42:	f7ff fb9b 	bl	800247c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002d46:	4804      	ldr	r0, [pc, #16]	@ (8002d58 <MX_UART5_Init+0x5c>)
 8002d48:	f005 febf 	bl	8008aca <HAL_UARTEx_DisableFifoMode>
 8002d4c:	b118      	cbz	r0, 8002d56 <MX_UART5_Init+0x5a>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d52:	f7ff bb93 	b.w	800247c <Error_Handler>
}
 8002d56:	bd08      	pop	{r3, pc}
 8002d58:	24000bf8 	.word	0x24000bf8
 8002d5c:	40005000 	.word	0x40005000

08002d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d60:	b510      	push	{r4, lr}
 8002d62:	b0b8      	sub	sp, #224	@ 0xe0
 8002d64:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	2214      	movs	r2, #20
 8002d68:	2100      	movs	r1, #0
 8002d6a:	a803      	add	r0, sp, #12
 8002d6c:	f008 fac4 	bl	800b2f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d70:	22c0      	movs	r2, #192	@ 0xc0
 8002d72:	2100      	movs	r1, #0
 8002d74:	a808      	add	r0, sp, #32
 8002d76:	f008 fabf 	bl	800b2f8 <memset>
  if(uartHandle->Instance==UART5)
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_UART_MspInit+0x98>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d138      	bne.n	8002df4 <HAL_UART_MspInit+0x94>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002d82:	2202      	movs	r2, #2
 8002d84:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002d88:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d8c:	f002 fd5c 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	b108      	cbz	r0, 8002d96 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8002d92:	f7ff fb73 	bl	800247c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d96:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_UART_MspInit+0x9c>)
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	a903      	add	r1, sp, #12
 8002d9c:	4818      	ldr	r0, [pc, #96]	@ (8002e00 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d9e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002da2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002da6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002daa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002dae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002db2:	9201      	str	r2, [sp, #4]
 8002db4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002dba:	f042 0202 	orr.w	r2, r2, #2
 8002dbe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002dd8:	230e      	movs	r3, #14
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002dde:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de0:	f001 fac2 	bl	8004368 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002de4:	2035      	movs	r0, #53	@ 0x35
 8002de6:	4622      	mov	r2, r4
 8002de8:	2105      	movs	r1, #5
 8002dea:	f000 fc57 	bl	800369c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002dee:	2035      	movs	r0, #53	@ 0x35
 8002df0:	f000 fc86 	bl	8003700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002df4:	b038      	add	sp, #224	@ 0xe0
 8002df6:	bd10      	pop	{r4, pc}
 8002df8:	40005000 	.word	0x40005000
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	58020400 	.word	0x58020400

08002e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002e40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002e08:	f7ff fd22 	bl	8002850 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e0c:	f7ff fcae 	bl	800276c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	480c      	ldr	r0, [pc, #48]	@ (8002e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e12:	490d      	ldr	r1, [pc, #52]	@ (8002e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e14:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e28:	4c0a      	ldr	r4, [pc, #40]	@ (8002e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e36:	f008 fb15 	bl	800b464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3a:	f7ff facf 	bl	80023dc <main>
  bx  lr
 8002e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e48:	2400024c 	.word	0x2400024c
  ldr r2, =_sidata
 8002e4c:	08014764 	.word	0x08014764
  ldr r2, =_sbss
 8002e50:	2400024c 	.word	0x2400024c
  ldr r4, =_ebss
 8002e54:	240057c0 	.word	0x240057c0

08002e58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC3_IRQHandler>
	...

08002e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5e:	2003      	movs	r0, #3
 8002e60:	f000 fc0a 	bl	8003678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e64:	f002 f9cc 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8002e68:	490f      	ldr	r1, [pc, #60]	@ (8002ea8 <HAL_Init+0x4c>)
 8002e6a:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <HAL_Init+0x50>)
 8002e6c:	698b      	ldr	r3, [r1, #24]
 8002e6e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7a:	698b      	ldr	r3, [r1, #24]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb0 <HAL_Init+0x54>)
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa20 f303 	lsr.w	r3, r0, r3
 8002e8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e8e:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_Init+0x58>)
 8002e90:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e92:	200f      	movs	r0, #15
 8002e94:	f7ff fb9c 	bl	80025d0 <HAL_InitTick>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	b918      	cbnz	r0, 8002ea4 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff fb6e 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ea4:	2401      	movs	r4, #1
 8002ea6:	e7fb      	b.n	8002ea0 <HAL_Init+0x44>
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	08014510 	.word	0x08014510
 8002eb0:	24000070 	.word	0x24000070
 8002eb4:	24000074 	.word	0x24000074

08002eb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002eb8:	4a03      	ldr	r2, [pc, #12]	@ (8002ec8 <HAL_IncTick+0x10>)
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <HAL_IncTick+0x14>)
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	440b      	add	r3, r1
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	24000c8c 	.word	0x24000c8c
 8002ecc:	24000078 	.word	0x24000078

08002ed0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ed0:	4b01      	ldr	r3, [pc, #4]	@ (8002ed8 <HAL_GetTick+0x8>)
 8002ed2:	6818      	ldr	r0, [r3, #0]
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	24000c8c 	.word	0x24000c8c

08002edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff fff6 	bl	8002ed0 <HAL_GetTick>
 8002ee4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee8:	bf1e      	ittt	ne
 8002eea:	4b04      	ldrne	r3, [pc, #16]	@ (8002efc <HAL_Delay+0x20>)
 8002eec:	781b      	ldrbne	r3, [r3, #0]
 8002eee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	1b43      	subs	r3, r0, r5
 8002ef6:	42a3      	cmp	r3, r4
 8002ef8:	d3fa      	bcc.n	8002ef0 <HAL_Delay+0x14>
  {
  }
}
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	24000078 	.word	0x24000078

08002f00 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002f00:	4b01      	ldr	r3, [pc, #4]	@ (8002f08 <HAL_GetREVID+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
}
 8002f04:	0c00      	lsrs	r0, r0, #16
 8002f06:	4770      	bx	lr
 8002f08:	5c001000 	.word	0x5c001000

08002f0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002f0c:	4a03      	ldr	r2, [pc, #12]	@ (8002f1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	f023 0302 	bic.w	r3, r3, #2
 8002f14:	4303      	orrs	r3, r0
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	58003c00 	.word	0x58003c00

08002f20 <HAL_SYSCFG_DisableVREFBUF>:
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002f20:	4a02      	ldr	r2, [pc, #8]	@ (8002f2c <HAL_SYSCFG_DisableVREFBUF+0xc>)
 8002f22:	6813      	ldr	r3, [r2, #0]
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]
}
 8002f2a:	4770      	bx	lr
 8002f2c:	58003c00 	.word	0x58003c00

08002f30 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f30:	6880      	ldr	r0, [r0, #8]
}
 8002f32:	f000 0001 	and.w	r0, r0, #1
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f38:	6880      	ldr	r0, [r0, #8]
}
 8002f3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f40:	2300      	movs	r3, #0
{
 8002f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8002f44:	9301      	str	r3, [sp, #4]
{
 8002f46:	4605      	mov	r5, r0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f48:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f000 81ec 	beq.w	800332a <HAL_ADC_ConfigChannel+0x3ea>
 8002f52:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f54:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002f56:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ffec 	bl	8002f38 <LL_ADC_REG_IsConversionOngoing>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	f040 8180 	bne.w	8003266 <HAL_ADC_ConfigChannel+0x326>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f66:	680a      	ldr	r2, [r1, #0]
 8002f68:	2a00      	cmp	r2, #0
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f6a:	ea4f 6092 	mov.w	r0, r2, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f6e:	db07      	blt.n	8002f80 <HAL_ADC_ConfigChannel+0x40>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f70:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8002f74:	2e00      	cmp	r6, #0
 8002f76:	d176      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x126>
 8002f78:	4084      	lsls	r4, r0
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	4322      	orrs	r2, r4
 8002f7e:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f80:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f82:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
  MODIFY_REG(*preg,
 8002f86:	271f      	movs	r7, #31
 8002f88:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f8c:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8002f8e:	f004 041f 	and.w	r4, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f92:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8002f96:	40a7      	lsls	r7, r4
 8002f98:	40a0      	lsls	r0, r4
 8002f9a:	f85c 2006 	ldr.w	r2, [ip, r6]
 8002f9e:	ea22 0207 	bic.w	r2, r2, r7
 8002fa2:	4302      	orrs	r2, r0
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f84c 2006 	str.w	r2, [ip, r6]
 8002faa:	f7ff ffc5 	bl	8002f38 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb4:	4302      	orrs	r2, r0
 8002fb6:	d14b      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x110>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fb8:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fba:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8002fbe:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fc0:	0dc4      	lsrs	r4, r0, #23
  MODIFY_REG(*preg,
 8002fc2:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fc6:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8002fca:	4086      	lsls	r6, r0
 8002fcc:	593a      	ldr	r2, [r7, r4]
 8002fce:	ea22 0206 	bic.w	r2, r2, r6
 8002fd2:	688e      	ldr	r6, [r1, #8]
 8002fd4:	4086      	lsls	r6, r0
 8002fd6:	4332      	orrs	r2, r6
 8002fd8:	513a      	str	r2, [r7, r4]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fda:	4aa6      	ldr	r2, [pc, #664]	@ (8003274 <HAL_ADC_ConfigChannel+0x334>)
 8002fdc:	6948      	ldr	r0, [r1, #20]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8002fe4:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	d145      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x138>
 8002fec:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002ff0:	0052      	lsls	r2, r2, #1
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ff2:	690f      	ldr	r7, [r1, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ff4:	4090      	lsls	r0, r2
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ff6:	680c      	ldr	r4, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ff8:	2f04      	cmp	r7, #4
 8002ffa:	d045      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x148>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffc:	f103 0660 	add.w	r6, r3, #96	@ 0x60
    MODIFY_REG(*preg,
 8003000:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003004:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8003008:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800300c:	4322      	orrs	r2, r4
 800300e:	4302      	orrs	r2, r0
 8003010:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003014:	7e48      	ldrb	r0, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003016:	690c      	ldr	r4, [r1, #16]
 8003018:	1e47      	subs	r7, r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800301a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800301e:	4278      	negs	r0, r7
 8003020:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003024:	4178      	adcs	r0, r7
 8003026:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
 800302a:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800302e:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003030:	690c      	ldr	r4, [r1, #16]
 8003032:	f102 3cff 	add.w	ip, r2, #4294967295
 8003036:	6918      	ldr	r0, [r3, #16]
 8003038:	f004 041f 	and.w	r4, r4, #31
 800303c:	f1dc 0200 	rsbs	r2, ip, #0
 8003040:	f420 40f0 	bic.w	r0, r0, #30720	@ 0x7800
 8003044:	eb42 020c 	adc.w	r2, r2, ip
 8003048:	02d2      	lsls	r2, r2, #11
 800304a:	40a2      	lsls	r2, r4
 800304c:	4302      	orrs	r2, r0
 800304e:	611a      	str	r2, [r3, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff6d 	bl	8002f30 <LL_ADC_IsEnabled>
 8003056:	2800      	cmp	r0, #0
 8003058:	d03d      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x196>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305a:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305c:	2300      	movs	r3, #0
 800305e:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003062:	b003      	add	sp, #12
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800306a:	fab2 f282 	clz	r2, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800306e:	2401      	movs	r4, #1
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	4094      	lsls	r4, r2
 8003076:	e780      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x3a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003078:	f012 0f10 	tst.w	r2, #16
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	d0b5      	beq.n	8002fec <HAL_ADC_ConfigChannel+0xac>
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	f002 0208 	and.w	r2, r2, #8
 8003086:	e7b4      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0xb2>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308a:	06a0      	lsls	r0, r4, #26
 800308c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003090:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003094:	d103      	bne.n	800309e <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003096:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003098:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800309c:	661a      	str	r2, [r3, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800309e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030a0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80030a4:	4290      	cmp	r0, r2
 80030a6:	d103      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x170>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030ae:	665a      	str	r2, [r3, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030b2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80030b6:	4290      	cmp	r0, r2
 80030b8:	d103      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x182>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030bc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030c0:	669a      	str	r2, [r3, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030c4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80030c8:	4290      	cmp	r0, r2
 80030ca:	d1c1      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x110>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030d2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80030d4:	e7bc      	b.n	8003050 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030d6:	680c      	ldr	r4, [r1, #0]
 80030d8:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80030da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80030de:	f3c4 0113 	ubfx	r1, r4, #0, #20
 80030e2:	f000 0618 	and.w	r6, r0, #24
 80030e6:	ea22 0201 	bic.w	r2, r2, r1
 80030ea:	4963      	ldr	r1, [pc, #396]	@ (8003278 <HAL_ADC_ConfigChannel+0x338>)
 80030ec:	40f1      	lsrs	r1, r6
 80030ee:	4021      	ands	r1, r4
 80030f0:	430a      	orrs	r2, r1
 80030f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030f6:	4a61      	ldr	r2, [pc, #388]	@ (800327c <HAL_ADC_ConfigChannel+0x33c>)
 80030f8:	4290      	cmp	r0, r2
 80030fa:	d161      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x280>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80030fc:	4a60      	ldr	r2, [pc, #384]	@ (8003280 <HAL_ADC_ConfigChannel+0x340>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12c      	bne.n	800315c <HAL_ADC_ConfigChannel+0x21c>
 8003102:	4a60      	ldr	r2, [pc, #384]	@ (8003284 <HAL_ADC_ConfigChannel+0x344>)
 8003104:	4294      	cmp	r4, r2
 8003106:	f000 8093 	beq.w	8003230 <HAL_ADC_ConfigChannel+0x2f0>
 800310a:	4a5f      	ldr	r2, [pc, #380]	@ (8003288 <HAL_ADC_ConfigChannel+0x348>)
 800310c:	4294      	cmp	r4, r2
 800310e:	f000 8091 	beq.w	8003234 <HAL_ADC_ConfigChannel+0x2f4>
 8003112:	4a5e      	ldr	r2, [pc, #376]	@ (800328c <HAL_ADC_ConfigChannel+0x34c>)
 8003114:	4294      	cmp	r4, r2
 8003116:	f000 808f 	beq.w	8003238 <HAL_ADC_ConfigChannel+0x2f8>
 800311a:	4a5d      	ldr	r2, [pc, #372]	@ (8003290 <HAL_ADC_ConfigChannel+0x350>)
 800311c:	4294      	cmp	r4, r2
 800311e:	f000 808d 	beq.w	800323c <HAL_ADC_ConfigChannel+0x2fc>
 8003122:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003126:	3210      	adds	r2, #16
 8003128:	4294      	cmp	r4, r2
 800312a:	f000 8089 	beq.w	8003240 <HAL_ADC_ConfigChannel+0x300>
 800312e:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_ADC_ConfigChannel+0x354>)
 8003130:	4294      	cmp	r4, r2
 8003132:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8003136:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 800313a:	d035      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 800313c:	4294      	cmp	r4, r2
 800313e:	d032      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x266>
 8003140:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003148:	4294      	cmp	r4, r2
 800314a:	d02a      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x262>
 800314c:	4a52      	ldr	r2, [pc, #328]	@ (8003298 <HAL_ADC_ConfigChannel+0x358>)
 800314e:	4294      	cmp	r4, r2
 8003150:	d06c      	beq.n	800322c <HAL_ADC_ConfigChannel+0x2ec>
 8003152:	4a52      	ldr	r2, [pc, #328]	@ (800329c <HAL_ADC_ConfigChannel+0x35c>)
 8003154:	4294      	cmp	r4, r2
 8003156:	d177      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x308>
 8003158:	4a51      	ldr	r2, [pc, #324]	@ (80032a0 <HAL_ADC_ConfigChannel+0x360>)
 800315a:	e025      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 800315c:	4a51      	ldr	r2, [pc, #324]	@ (80032a4 <HAL_ADC_ConfigChannel+0x364>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d172      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x308>
 8003162:	4a48      	ldr	r2, [pc, #288]	@ (8003284 <HAL_ADC_ConfigChannel+0x344>)
 8003164:	4294      	cmp	r4, r2
 8003166:	d063      	beq.n	8003230 <HAL_ADC_ConfigChannel+0x2f0>
 8003168:	4a47      	ldr	r2, [pc, #284]	@ (8003288 <HAL_ADC_ConfigChannel+0x348>)
 800316a:	4294      	cmp	r4, r2
 800316c:	d062      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x2f4>
 800316e:	4a47      	ldr	r2, [pc, #284]	@ (800328c <HAL_ADC_ConfigChannel+0x34c>)
 8003170:	4294      	cmp	r4, r2
 8003172:	d061      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x2f8>
 8003174:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <HAL_ADC_ConfigChannel+0x350>)
 8003176:	4294      	cmp	r4, r2
 8003178:	d060      	beq.n	800323c <HAL_ADC_ConfigChannel+0x2fc>
 800317a:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 800317e:	3210      	adds	r2, #16
 8003180:	4294      	cmp	r4, r2
 8003182:	d05d      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x300>
 8003184:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_ADC_ConfigChannel+0x354>)
 8003186:	4294      	cmp	r4, r2
 8003188:	d05c      	beq.n	8003244 <HAL_ADC_ConfigChannel+0x304>
 800318a:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 800318e:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8003192:	4294      	cmp	r4, r2
 8003194:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319c:	d004      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 800319e:	4294      	cmp	r4, r2
 80031a0:	d1d7      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x212>
 80031a2:	4a41      	ldr	r2, [pc, #260]	@ (80032a8 <HAL_ADC_ConfigChannel+0x368>)
 80031a4:	e000      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 80031a6:	4a41      	ldr	r2, [pc, #260]	@ (80032ac <HAL_ADC_ConfigChannel+0x36c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80031ac:	fab2 f282 	clz	r2, r2
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80031b0:	2101      	movs	r1, #1
 80031b2:	f002 021f 	and.w	r2, r2, #31
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	430a      	orrs	r2, r1
 80031be:	61da      	str	r2, [r3, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031c0:	2c00      	cmp	r4, #0
 80031c2:	f6bf af4a 	bge.w	800305a <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003280 <HAL_ADC_ConfigChannel+0x340>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d13f      	bne.n	800324c <HAL_ADC_ConfigChannel+0x30c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031cc:	f502 7240 	add.w	r2, r2, #768	@ 0x300
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031d0:	482b      	ldr	r0, [pc, #172]	@ (8003280 <HAL_ADC_ConfigChannel+0x340>)
 80031d2:	6892      	ldr	r2, [r2, #8]
 80031d4:	f7ff feac 	bl	8002f30 <LL_ADC_IsEnabled>
 80031d8:	4601      	mov	r1, r0
 80031da:	4832      	ldr	r0, [pc, #200]	@ (80032a4 <HAL_ADC_ConfigChannel+0x364>)
 80031dc:	f7ff fea8 	bl	8002f30 <LL_ADC_IsEnabled>
 80031e0:	4301      	orrs	r1, r0
 80031e2:	d140      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x326>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031e4:	4832      	ldr	r0, [pc, #200]	@ (80032b0 <HAL_ADC_ConfigChannel+0x370>)
 80031e6:	f002 71e0 	and.w	r1, r2, #29360128	@ 0x1c00000
 80031ea:	4284      	cmp	r4, r0
 80031ec:	d176      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x39c>
 80031ee:	0214      	lsls	r4, r2, #8
 80031f0:	f53f af33 	bmi.w	800305a <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f4:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <HAL_ADC_ConfigChannel+0x374>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f47f af2f 	bne.w	800305a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031fc:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8003200:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003204:	430b      	orrs	r3, r1
 8003206:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800320a:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320e:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <HAL_ADC_ConfigChannel+0x378>)
 8003210:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_ADC_ConfigChannel+0x37c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fbb3 f3f2 	udiv	r3, r3, r2
 8003218:	3301      	adds	r3, #1
 800321a:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 800321c:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800321e:	9b01      	ldr	r3, [sp, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f43f af1a 	beq.w	800305a <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	3b01      	subs	r3, #1
 800322a:	e7f7      	b.n	800321c <HAL_ADC_ConfigChannel+0x2dc>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800322c:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <HAL_ADC_ConfigChannel+0x380>)
 800322e:	e7bb      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 8003230:	2201      	movs	r2, #1
 8003232:	e7b9      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 8003234:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <HAL_ADC_ConfigChannel+0x384>)
 8003236:	e7b7      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 8003238:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_ADC_ConfigChannel+0x388>)
 800323a:	e7b5      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 800323c:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_ADC_ConfigChannel+0x38c>)
 800323e:	e7b3      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 8003240:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_ADC_ConfigChannel+0x390>)
 8003242:	e7b1      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
 8003244:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_ADC_ConfigChannel+0x394>)
 8003246:	e7af      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003248:	2201      	movs	r2, #1
 800324a:	e7b6      	b.n	80031ba <HAL_ADC_ConfigChannel+0x27a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800324c:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <HAL_ADC_ConfigChannel+0x364>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d102      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x318>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003252:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8003256:	e7bb      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x290>
 8003258:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <HAL_ADC_ConfigChannel+0x398>)
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325a:	4816      	ldr	r0, [pc, #88]	@ (80032b4 <HAL_ADC_ConfigChannel+0x374>)
 800325c:	6892      	ldr	r2, [r2, #8]
 800325e:	f7ff fe67 	bl	8002f30 <LL_ADC_IsEnabled>
 8003262:	2800      	cmp	r0, #0
 8003264:	d0be      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x2a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003266:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003268:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	656b      	str	r3, [r5, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003270:	e6f4      	b.n	800305c <HAL_ADC_ConfigChannel+0x11c>
 8003272:	bf00      	nop
 8003274:	5c001000 	.word	0x5c001000
 8003278:	000fffff 	.word	0x000fffff
 800327c:	47ff0000 	.word	0x47ff0000
 8003280:	40022000 	.word	0x40022000
 8003284:	04300002 	.word	0x04300002
 8003288:	08600004 	.word	0x08600004
 800328c:	0c900008 	.word	0x0c900008
 8003290:	10c00010 	.word	0x10c00010
 8003294:	2a000400 	.word	0x2a000400
 8003298:	43210000 	.word	0x43210000
 800329c:	4b840000 	.word	0x4b840000
 80032a0:	4fb80000 	.word	0x4fb80000
 80032a4:	40022100 	.word	0x40022100
 80032a8:	36902000 	.word	0x36902000
 80032ac:	32601000 	.word	0x32601000
 80032b0:	cb840000 	.word	0xcb840000
 80032b4:	58026000 	.word	0x58026000
 80032b8:	24000074 	.word	0x24000074
 80032bc:	00030d40 	.word	0x00030d40
 80032c0:	47520000 	.word	0x47520000
 80032c4:	19200040 	.word	0x19200040
 80032c8:	1d500080 	.word	0x1d500080
 80032cc:	21800100 	.word	0x21800100
 80032d0:	25b00200 	.word	0x25b00200
 80032d4:	2e300800 	.word	0x2e300800
 80032d8:	58026300 	.word	0x58026300
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032dc:	4814      	ldr	r0, [pc, #80]	@ (8003330 <HAL_ADC_ConfigChannel+0x3f0>)
 80032de:	4284      	cmp	r4, r0
 80032e0:	d110      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x3c4>
 80032e2:	01d0      	lsls	r0, r2, #7
 80032e4:	f53f aeb9 	bmi.w	800305a <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	4a12      	ldr	r2, [pc, #72]	@ (8003334 <HAL_ADC_ConfigChannel+0x3f4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f47f aeb5 	bne.w	800305a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032f0:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 80032f4:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80032f8:	430b      	orrs	r3, r1
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
}
 8003302:	e6aa      	b.n	800305a <HAL_ADC_ConfigChannel+0x11a>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003304:	480c      	ldr	r0, [pc, #48]	@ (8003338 <HAL_ADC_ConfigChannel+0x3f8>)
 8003306:	4284      	cmp	r4, r0
 8003308:	f47f aea7 	bne.w	800305a <HAL_ADC_ConfigChannel+0x11a>
 800330c:	0252      	lsls	r2, r2, #9
 800330e:	f53f aea4 	bmi.w	800305a <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003312:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <HAL_ADC_ConfigChannel+0x3f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f47f aea0 	bne.w	800305a <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800331a:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 800331e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003322:	430b      	orrs	r3, r1
 8003324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003328:	e7e9      	b.n	80032fe <HAL_ADC_ConfigChannel+0x3be>
  __HAL_LOCK(hadc);
 800332a:	2002      	movs	r0, #2
 800332c:	e699      	b.n	8003062 <HAL_ADC_ConfigChannel+0x122>
 800332e:	bf00      	nop
 8003330:	c7520000 	.word	0xc7520000
 8003334:	58026000 	.word	0x58026000
 8003338:	cfb80000 	.word	0xcfb80000

0800333c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800333c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800333e:	4a43      	ldr	r2, [pc, #268]	@ (800344c <ADC_ConfigureBoostMode+0x110>)
{
 8003340:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003342:	6803      	ldr	r3, [r0, #0]
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <ADC_ConfigureBoostMode+0x14>
 8003348:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800334c:	4293      	cmp	r3, r2
 800334e:	d125      	bne.n	800339c <ADC_ConfigureBoostMode+0x60>
 8003350:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <ADC_ConfigureBoostMode+0x114>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b9fb      	cbnz	r3, 80033a0 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003360:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003364:	2100      	movs	r1, #0
 8003366:	f003 f965 	bl	8006634 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800336a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800336c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800336e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003372:	d04a      	beq.n	800340a <ADC_ConfigureBoostMode+0xce>
 8003374:	d83f      	bhi.n	80033f6 <ADC_ConfigureBoostMode+0xba>
 8003376:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800337a:	d044      	beq.n	8003406 <ADC_ConfigureBoostMode+0xca>
 800337c:	d836      	bhi.n	80033ec <ADC_ConfigureBoostMode+0xb0>
 800337e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003382:	d008      	beq.n	8003396 <ADC_ConfigureBoostMode+0x5a>
 8003384:	d82c      	bhi.n	80033e0 <ADC_ConfigureBoostMode+0xa4>
 8003386:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800338a:	d004      	beq.n	8003396 <ADC_ConfigureBoostMode+0x5a>
 800338c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003390:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8003394:	d116      	bne.n	80033c4 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003396:	0c9b      	lsrs	r3, r3, #18
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	e00f      	b.n	80033bc <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800339c:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <ADC_ConfigureBoostMode+0x118>)
 800339e:	e7d8      	b.n	8003352 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 80033a0:	f002 f8f6 	bl	8005590 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80033a4:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80033a6:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 80033a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ac:	d005      	beq.n	80033ba <ADC_ConfigureBoostMode+0x7e>
 80033ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033b2:	d006      	beq.n	80033c2 <ADC_ConfigureBoostMode+0x86>
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b8:	d104      	bne.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033ba:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033bc:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80033c0:	e000      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 80033c2:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80033c4:	f7ff fd9c 	bl	8002f00 <HAL_GetREVID>
 80033c8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80033cc:	4298      	cmp	r0, r3
 80033ce:	682b      	ldr	r3, [r5, #0]
 80033d0:	d823      	bhi.n	800341a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 80033d2:	4a21      	ldr	r2, [pc, #132]	@ (8003458 <ADC_ConfigureBoostMode+0x11c>)
 80033d4:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033d6:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 80033d8:	d91b      	bls.n	8003412 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033de:	e01a      	b.n	8003416 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 80033e0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033e4:	d0d7      	beq.n	8003396 <ADC_ConfigureBoostMode+0x5a>
 80033e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033ea:	e7d3      	b.n	8003394 <ADC_ConfigureBoostMode+0x58>
 80033ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f0:	d1e8      	bne.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 80033f2:	0944      	lsrs	r4, r0, #5
        break;
 80033f4:	e7e6      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 80033f6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033fa:	d008      	beq.n	800340e <ADC_ConfigureBoostMode+0xd2>
 80033fc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003400:	d1e0      	bne.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8003402:	0a04      	lsrs	r4, r0, #8
        break;
 8003404:	e7de      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8003406:	0904      	lsrs	r4, r0, #4
        break;
 8003408:	e7dc      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 800340a:	0984      	lsrs	r4, r0, #6
        break;
 800340c:	e7da      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 800340e:	09c4      	lsrs	r4, r0, #7
        break;
 8003410:	e7d8      	b.n	80033c4 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003416:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003418:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800341a:	4a10      	ldr	r2, [pc, #64]	@ (800345c <ADC_ConfigureBoostMode+0x120>)
 800341c:	4294      	cmp	r4, r2
 800341e:	d803      	bhi.n	8003428 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003426:	e7f6      	b.n	8003416 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8003428:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <ADC_ConfigureBoostMode+0x124>)
 800342a:	4294      	cmp	r4, r2
 800342c:	d803      	bhi.n	8003436 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003434:	e7d1      	b.n	80033da <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8003436:	4a0b      	ldr	r2, [pc, #44]	@ (8003464 <ADC_ConfigureBoostMode+0x128>)
 8003438:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	bf96      	itet	ls
 800343e:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003442:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003446:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800344a:	e7e4      	b.n	8003416 <ADC_ConfigureBoostMode+0xda>
 800344c:	40022000 	.word	0x40022000
 8003450:	40022300 	.word	0x40022300
 8003454:	58026300 	.word	0x58026300
 8003458:	01312d00 	.word	0x01312d00
 800345c:	00bebc21 	.word	0x00bebc21
 8003460:	017d7841 	.word	0x017d7841
 8003464:	02faf081 	.word	0x02faf081

08003468 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8003468:	2300      	movs	r3, #0
{
 800346a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (hadc == NULL)
 800346c:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800346e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003470:	2800      	cmp	r0, #0
 8003472:	f000 80ed 	beq.w	8003650 <HAL_ADC_Init+0x1e8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003476:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8003478:	b925      	cbnz	r5, 8003484 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 800347a:	f7fe fdd3 	bl	8002024 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800347e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003480:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003484:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	0090      	lsls	r0, r2, #2
 800348a:	d505      	bpl.n	8003498 <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8003492:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003496:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	00d1      	lsls	r1, r2, #3
 800349c:	f140 809e 	bpl.w	80035dc <HAL_ADC_Init+0x174>
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	00d2      	lsls	r2, r2, #3
 80034a4:	f100 80b0 	bmi.w	8003608 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80034aa:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ac:	f042 0210 	orr.w	r2, r2, #16
 80034b0:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	65a2      	str	r2, [r4, #88]	@ 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fd3c 	bl	8002f38 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034c2:	f002 0210 	and.w	r2, r2, #16
 80034c6:	4302      	orrs	r2, r0
 80034c8:	f040 80be 	bne.w	8003648 <HAL_ADC_Init+0x1e0>
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ce:	4618      	mov	r0, r3
    ADC_STATE_CLR_SET(hadc->State,
 80034d0:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80034d4:	f042 0202 	orr.w	r2, r2, #2
 80034d8:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034da:	f7ff fd29 	bl	8002f30 <LL_ADC_IsEnabled>
 80034de:	b988      	cbnz	r0, 8003504 <HAL_ADC_Init+0x9c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003654 <HAL_ADC_Init+0x1ec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_Init+0x88>
 80034e6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f040 808e 	bne.w	800360c <HAL_ADC_Init+0x1a4>
 80034f0:	4858      	ldr	r0, [pc, #352]	@ (8003654 <HAL_ADC_Init+0x1ec>)
 80034f2:	f7ff fd1d 	bl	8002f30 <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4857      	ldr	r0, [pc, #348]	@ (8003658 <HAL_ADC_Init+0x1f0>)
 80034fa:	f7ff fd19 	bl	8002f30 <LL_ADC_IsEnabled>
 80034fe:	4303      	orrs	r3, r0
 8003500:	f000 8092 	beq.w	8003628 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003504:	f7ff fcfc 	bl	8002f00 <HAL_GetREVID>
 8003508:	f241 0303 	movw	r3, #4099	@ 0x1003
 800350c:	68a2      	ldr	r2, [r4, #8]
 800350e:	4298      	cmp	r0, r3
 8003510:	7f21      	ldrb	r1, [r4, #28]
 8003512:	7d60      	ldrb	r0, [r4, #21]
 8003514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003516:	f240 8089 	bls.w	800362c <HAL_ADC_Init+0x1c4>
 800351a:	2a10      	cmp	r2, #16
 800351c:	f040 8086 	bne.w	800362c <HAL_ADC_Init+0x1c4>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003520:	040a      	lsls	r2, r1, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003522:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8003526:	4313      	orrs	r3, r2
 8003528:	f043 031c 	orr.w	r3, r3, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800352c:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800352e:	bf02      	ittt	eq
 8003530:	6a22      	ldreq	r2, [r4, #32]
 8003532:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003536:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800353c:	b122      	cbz	r2, 8003548 <HAL_ADC_Init+0xe0>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800353e:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003542:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003544:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003546:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	4944      	ldr	r1, [pc, #272]	@ (800365c <HAL_ADC_Init+0x1f4>)
 800354c:	68d0      	ldr	r0, [r2, #12]
 800354e:	4001      	ands	r1, r0
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003550:	4610      	mov	r0, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003552:	4319      	orrs	r1, r3
 8003554:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003556:	f7ff fcef 	bl	8002f38 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800355a:	6893      	ldr	r3, [r2, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003560:	4303      	orrs	r3, r0
 8003562:	d127      	bne.n	80035b4 <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003564:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003566:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003568:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800356c:	f023 0303 	bic.w	r3, r3, #3
 8003570:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8003574:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003576:	430b      	orrs	r3, r1
 8003578:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800357a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800357e:	2b01      	cmp	r3, #1
 8003580:	d15a      	bne.n	8003638 <HAL_ADC_Init+0x1d0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003582:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003584:	6910      	ldr	r0, [r2, #16]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 800358c:	4333      	orrs	r3, r6
 800358e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003592:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003594:	430b      	orrs	r3, r1
 8003596:	4932      	ldr	r1, [pc, #200]	@ (8003660 <HAL_ADC_Init+0x1f8>)
 8003598:	4001      	ands	r1, r0
 800359a:	430b      	orrs	r3, r1
 800359c:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035a0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80035a2:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80035a4:	6913      	ldr	r3, [r2, #16]
 80035a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035a8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80035b0:	f7ff fec4 	bl	800333c <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b4:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035b6:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d141      	bne.n	8003640 <HAL_ADC_Init+0x1d8>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035bc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80035be:	69a3      	ldr	r3, [r4, #24]
 80035c0:	f021 010f 	bic.w	r1, r1, #15
 80035c4:	3b01      	subs	r3, #1
 80035c6:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035cc:	f023 0303 	bic.w	r3, r3, #3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80035d6:	4628      	mov	r0, r5
 80035d8:	b002      	add	sp, #8
 80035da:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80035dc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035de:	4921      	ldr	r1, [pc, #132]	@ (8003664 <HAL_ADC_Init+0x1fc>)
 80035e0:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 80035e4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80035e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003668 <HAL_ADC_Init+0x200>)
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80035f6:	3201      	adds	r2, #1
      wait_loop_index--;
 80035f8:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80035fa:	9a01      	ldr	r2, [sp, #4]
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	f43f af4f 	beq.w	80034a0 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8003602:	9a01      	ldr	r2, [sp, #4]
 8003604:	3a01      	subs	r2, #1
 8003606:	e7f7      	b.n	80035f8 <HAL_ADC_Init+0x190>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	2500      	movs	r5, #0
 800360a:	e756      	b.n	80034ba <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800360c:	4817      	ldr	r0, [pc, #92]	@ (800366c <HAL_ADC_Init+0x204>)
 800360e:	f7ff fc8f 	bl	8002f30 <LL_ADC_IsEnabled>
 8003612:	2800      	cmp	r0, #0
 8003614:	f47f af76 	bne.w	8003504 <HAL_ADC_Init+0x9c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003618:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800361a:	6893      	ldr	r3, [r2, #8]
 800361c:	6861      	ldr	r1, [r4, #4]
 800361e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003622:	430b      	orrs	r3, r1
 8003624:	6093      	str	r3, [r2, #8]
}
 8003626:	e76d      	b.n	8003504 <HAL_ADC_Init+0x9c>
 8003628:	4a12      	ldr	r2, [pc, #72]	@ (8003674 <HAL_ADC_Init+0x20c>)
 800362a:	e7f6      	b.n	800361a <HAL_ADC_Init+0x1b2>
                  hadc->Init.Overrun                                                    |
 800362c:	4313      	orrs	r3, r2
 800362e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003632:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003636:	e779      	b.n	800352c <HAL_ADC_Init+0xc4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003638:	6913      	ldr	r3, [r2, #16]
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	e7af      	b.n	80035a0 <HAL_ADC_Init+0x138>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003640:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003642:	f023 030f 	bic.w	r3, r3, #15
 8003646:	e7bf      	b.n	80035c8 <HAL_ADC_Init+0x160>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003648:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800364a:	f043 0310 	orr.w	r3, r3, #16
 800364e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8003650:	2501      	movs	r5, #1
 8003652:	e7c0      	b.n	80035d6 <HAL_ADC_Init+0x16e>
 8003654:	40022000 	.word	0x40022000
 8003658:	40022100 	.word	0x40022100
 800365c:	fff0c003 	.word	0xfff0c003
 8003660:	fc00f81e 	.word	0xfc00f81e
 8003664:	00030d40 	.word	0x00030d40
 8003668:	24000074 	.word	0x24000074
 800366c:	58026000 	.word	0x58026000
 8003670:	58026300 	.word	0x58026300
 8003674:	40022300 	.word	0x40022300

08003678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4907      	ldr	r1, [pc, #28]	@ (8003698 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800367c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800367e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003686:	0412      	lsls	r2, r2, #16
 8003688:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003694:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369e:	b530      	push	{r4, r5, lr}
 80036a0:	68dc      	ldr	r4, [r3, #12]
 80036a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	bf28      	it	cs
 80036b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b8:	bf8c      	ite	hi
 80036ba:	3c03      	subhi	r4, #3
 80036bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036be:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80036c2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	fa03 f304 	lsl.w	r3, r3, r4
 80036d4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80036dc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80036de:	db06      	blt.n	80036ee <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80036e4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80036e8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80036ec:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ee:	f000 000f 	and.w	r0, r0, #15
 80036f2:	4a02      	ldr	r2, [pc, #8]	@ (80036fc <HAL_NVIC_SetPriority+0x60>)
 80036f4:	5413      	strb	r3, [r2, r0]
 80036f6:	e7f9      	b.n	80036ec <HAL_NVIC_SetPriority+0x50>
 80036f8:	e000ed00 	.word	0xe000ed00
 80036fc:	e000ed14 	.word	0xe000ed14

08003700 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003700:	2800      	cmp	r0, #0
 8003702:	db07      	blt.n	8003714 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003704:	2301      	movs	r3, #1
 8003706:	0941      	lsrs	r1, r0, #5
 8003708:	f000 001f 	and.w	r0, r0, #31
 800370c:	4a02      	ldr	r2, [pc, #8]	@ (8003718 <HAL_NVIC_EnableIRQ+0x18>)
 800370e:	4083      	lsls	r3, r0
 8003710:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800371c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <HAL_MPU_Disable+0x18>)
 8003722:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003724:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_MPU_Enable+0x1c>)
 800373a:	f040 0001 	orr.w	r0, r0, #1
 800373e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003744:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800374a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800374e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003758:	7843      	ldrb	r3, [r0, #1]
 800375a:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <HAL_MPU_ConfigRegion+0x54>)
 800375c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003760:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800376c:	6843      	ldr	r3, [r0, #4]
 800376e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003772:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003774:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003776:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003778:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800377c:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377e:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003780:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003782:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003786:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003788:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800378c:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800378e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003792:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003794:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003798:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800379a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800379e:	7a01      	ldrb	r1, [r0, #8]
 80037a0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037a4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b0:	6803      	ldr	r3, [r0, #0]
{
 80037b2:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b4:	4923      	ldr	r1, [pc, #140]	@ (8003844 <DMA_CalcBaseAndBitshift+0x94>)
 80037b6:	428b      	cmp	r3, r1
{
 80037b8:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ba:	d031      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037bc:	3118      	adds	r1, #24
 80037be:	428b      	cmp	r3, r1
 80037c0:	d02e      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037c2:	3118      	adds	r1, #24
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d02b      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037c8:	3118      	adds	r1, #24
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d028      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037ce:	3118      	adds	r1, #24
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d025      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037d4:	3118      	adds	r1, #24
 80037d6:	428b      	cmp	r3, r1
 80037d8:	d022      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037da:	3118      	adds	r1, #24
 80037dc:	428b      	cmp	r3, r1
 80037de:	d01f      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037e0:	3118      	adds	r1, #24
 80037e2:	428b      	cmp	r3, r1
 80037e4:	d01c      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037e6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d018      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037ee:	3118      	adds	r1, #24
 80037f0:	428b      	cmp	r3, r1
 80037f2:	d015      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037f4:	3118      	adds	r1, #24
 80037f6:	428b      	cmp	r3, r1
 80037f8:	d012      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 80037fa:	3118      	adds	r1, #24
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d00f      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 8003800:	3118      	adds	r1, #24
 8003802:	428b      	cmp	r3, r1
 8003804:	d00c      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 8003806:	3118      	adds	r1, #24
 8003808:	428b      	cmp	r3, r1
 800380a:	d009      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 800380c:	3118      	adds	r1, #24
 800380e:	428b      	cmp	r3, r1
 8003810:	d006      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
 8003812:	3118      	adds	r1, #24
 8003814:	428b      	cmp	r3, r1
 8003816:	d003      	beq.n	8003820 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003818:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800381c:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 800381e:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003820:	b2dc      	uxtb	r4, r3
 8003822:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003824:	4808      	ldr	r0, [pc, #32]	@ (8003848 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003826:	3c10      	subs	r4, #16
 8003828:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800382c:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 8003830:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003832:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003834:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8003838:	f020 0003 	bic.w	r0, r0, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800383c:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800383e:	bf88      	it	hi
 8003840:	3004      	addhi	r0, #4
 8003842:	e7eb      	b.n	800381c <DMA_CalcBaseAndBitshift+0x6c>
 8003844:	40020010 	.word	0x40020010
 8003848:	08014520 	.word	0x08014520

0800384c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800384c:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800384e:	4920      	ldr	r1, [pc, #128]	@ (80038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003850:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003852:	428a      	cmp	r2, r1
 8003854:	d028      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8003856:	3114      	adds	r1, #20
 8003858:	428a      	cmp	r2, r1
 800385a:	d025      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 800385c:	3114      	adds	r1, #20
 800385e:	428a      	cmp	r2, r1
 8003860:	d022      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8003862:	3114      	adds	r1, #20
 8003864:	428a      	cmp	r2, r1
 8003866:	d01f      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8003868:	3114      	adds	r1, #20
 800386a:	428a      	cmp	r2, r1
 800386c:	d01c      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 800386e:	3114      	adds	r1, #20
 8003870:	428a      	cmp	r2, r1
 8003872:	d019      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8003874:	3114      	adds	r1, #20
 8003876:	428a      	cmp	r2, r1
 8003878:	d016      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 800387a:	3114      	adds	r1, #20
 800387c:	428a      	cmp	r2, r1
 800387e:	d013      	beq.n	80038a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003880:	2118      	movs	r1, #24
 8003882:	3b10      	subs	r3, #16
 8003884:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003888:	4912      	ldr	r1, [pc, #72]	@ (80038d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800388a:	4411      	add	r1, r2
 800388c:	29a8      	cmp	r1, #168	@ 0xa8
 800388e:	d91c      	bls.n	80038ca <DMA_CalcDMAMUXChannelBaseAndMask+0x7e>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003890:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003894:	2101      	movs	r1, #1
 8003896:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800389a:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038a4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038a6:	e00c      	b.n	80038c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038a8:	2214      	movs	r2, #20
 80038aa:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038ac:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038ae:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038b2:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038bc:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
 80038c0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038c2:	6683      	str	r3, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038c4:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
  }
}
 80038c8:	4770      	bx	lr
      stream_number += 8U;
 80038ca:	3308      	adds	r3, #8
 80038cc:	e7e0      	b.n	8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 80038ce:	bf00      	nop
 80038d0:	58025408 	.word	0x58025408
 80038d4:	bffdfbf0 	.word	0xbffdfbf0
 80038d8:	40020880 	.word	0x40020880
 80038dc:	58025880 	.word	0x58025880

080038e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038e0:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038e2:	1e51      	subs	r1, r2, #1
 80038e4:	2907      	cmp	r1, #7
{
 80038e6:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80038e8:	d821      	bhi.n	800392e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	4c13      	ldr	r4, [pc, #76]	@ (800393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	d01e      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80038f2:	3414      	adds	r4, #20
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d01b      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80038f8:	3414      	adds	r4, #20
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	d018      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80038fe:	3414      	adds	r4, #20
 8003900:	42a3      	cmp	r3, r4
 8003902:	d015      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003904:	3414      	adds	r4, #20
 8003906:	42a3      	cmp	r3, r4
 8003908:	d012      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800390a:	3414      	adds	r4, #20
 800390c:	42a3      	cmp	r3, r4
 800390e:	d00f      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003910:	3414      	adds	r4, #20
 8003912:	42a3      	cmp	r3, r4
 8003914:	d00c      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8003916:	3414      	adds	r4, #20
 8003918:	42a3      	cmp	r3, r4
 800391a:	d009      	beq.n	8003930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 800391e:	4413      	add	r3, r2
 8003920:	4a08      	ldr	r2, [pc, #32]	@ (8003944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8003922:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003924:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003928:	2301      	movs	r3, #1
 800392a:	408b      	lsls	r3, r1
 800392c:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 800392e:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8003932:	4413      	add	r3, r2
 8003934:	4a05      	ldr	r2, [pc, #20]	@ (800394c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8003936:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003938:	e7f4      	b.n	8003924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 800393a:	bf00      	nop
 800393c:	58025408 	.word	0x58025408
 8003940:	1000823f 	.word	0x1000823f
 8003944:	40020940 	.word	0x40020940
 8003948:	1600963f 	.word	0x1600963f
 800394c:	58025940 	.word	0x58025940

08003950 <HAL_DMA_Init>:
{
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff fabc 	bl	8002ed0 <HAL_GetTick>
 8003958:	4606      	mov	r6, r0
  if(hdma == NULL)
 800395a:	2c00      	cmp	r4, #0
 800395c:	f000 80a9 	beq.w	8003ab2 <HAL_DMA_Init+0x162>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	4d6f      	ldr	r5, [pc, #444]	@ (8003b20 <HAL_DMA_Init+0x1d0>)
 8003964:	42ab      	cmp	r3, r5
 8003966:	d064      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 8003968:	4a6e      	ldr	r2, [pc, #440]	@ (8003b24 <HAL_DMA_Init+0x1d4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d061      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 800396e:	3218      	adds	r2, #24
 8003970:	4293      	cmp	r3, r2
 8003972:	d05e      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 8003974:	3218      	adds	r2, #24
 8003976:	4293      	cmp	r3, r2
 8003978:	d05b      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 800397a:	3218      	adds	r2, #24
 800397c:	4293      	cmp	r3, r2
 800397e:	d058      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 8003980:	3218      	adds	r2, #24
 8003982:	4293      	cmp	r3, r2
 8003984:	d055      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 8003986:	3218      	adds	r2, #24
 8003988:	4293      	cmp	r3, r2
 800398a:	d052      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 800398c:	3218      	adds	r2, #24
 800398e:	4293      	cmp	r3, r2
 8003990:	d04f      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 8003992:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003996:	4293      	cmp	r3, r2
 8003998:	d04b      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 800399a:	3218      	adds	r2, #24
 800399c:	4293      	cmp	r3, r2
 800399e:	d048      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039a0:	3218      	adds	r2, #24
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039a6:	3218      	adds	r2, #24
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d042      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039ac:	3218      	adds	r2, #24
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03f      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039b2:	3218      	adds	r2, #24
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d03c      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039b8:	3218      	adds	r2, #24
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d039      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
 80039be:	3218      	adds	r2, #24
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_Init+0xe2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039c4:	4a58      	ldr	r2, [pc, #352]	@ (8003b28 <HAL_DMA_Init+0x1d8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f040 812f 	bne.w	8003c2a <HAL_DMA_Init+0x2da>
    hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	2202      	movs	r2, #2
 80039ce:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80039d2:	2200      	movs	r2, #0
 80039d4:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039d8:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039da:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039dc:	2a40      	cmp	r2, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039de:	f36f 1010 	bfc	r0, #4, #13
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039e2:	f000 8140 	beq.w	8003c66 <HAL_DMA_Init+0x316>
 80039e6:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80039ea:	424a      	negs	r2, r1
 80039ec:	414a      	adcs	r2, r1
 80039ee:	0392      	lsls	r2, r2, #14
 80039f0:	e9d4 1603 	ldrd	r1, r6, [r4, #12]
 80039f4:	4331      	orrs	r1, r6
 80039f6:	6966      	ldr	r6, [r4, #20]
 80039f8:	4331      	orrs	r1, r6
 80039fa:	69a6      	ldr	r6, [r4, #24]
 80039fc:	4331      	orrs	r1, r6
 80039fe:	69e6      	ldr	r6, [r4, #28]
 8003a00:	4331      	orrs	r1, r6
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a02:	6a26      	ldr	r6, [r4, #32]
 8003a04:	ea40 1016 	orr.w	r0, r0, r6, lsr #4
 8003a08:	ea40 01d1 	orr.w	r1, r0, r1, lsr #3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a0c:	4620      	mov	r0, r4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a0e:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a10:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a12:	4a46      	ldr	r2, [pc, #280]	@ (8003b2c <HAL_DMA_Init+0x1dc>)
 8003a14:	441a      	add	r2, r3
 8003a16:	2314      	movs	r3, #20
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a20:	f7ff fec6 	bl	80037b0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a24:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003a26:	f003 021f 	and.w	r2, r3, #31
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	6043      	str	r3, [r0, #4]
 8003a30:	e092      	b.n	8003b58 <HAL_DMA_Init+0x208>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a32:	2202      	movs	r2, #2
 8003a34:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d427      	bmi.n	8003a9e <HAL_DMA_Init+0x14e>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a4e:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a50:	4837      	ldr	r0, [pc, #220]	@ (8003b30 <HAL_DMA_Init+0x1e0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a54:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8003a56:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8003a5a:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5c:	6926      	ldr	r6, [r4, #16]
 8003a5e:	4333      	orrs	r3, r6
 8003a60:	6966      	ldr	r6, [r4, #20]
 8003a62:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a64:	69e6      	ldr	r6, [r4, #28]
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a6a:	6a26      	ldr	r6, [r4, #32]
 8003a6c:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a6e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8003a70:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8003a72:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a76:	bf02      	ittt	eq
 8003a78:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8003a7c:	4338      	orreq	r0, r7
 8003a7e:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a80:	482c      	ldr	r0, [pc, #176]	@ (8003b34 <HAL_DMA_Init+0x1e4>)
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	f36f 000f 	bfc	r0, #0, #16
 8003a88:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8003a8c:	d31b      	bcc.n	8003ac6 <HAL_DMA_Init+0x176>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a8e:	6860      	ldr	r0, [r4, #4]
 8003a90:	282e      	cmp	r0, #46	@ 0x2e
 8003a92:	d810      	bhi.n	8003ab6 <HAL_DMA_Init+0x166>
 8003a94:	2828      	cmp	r0, #40	@ 0x28
 8003a96:	d916      	bls.n	8003ac6 <HAL_DMA_Init+0x176>
        registerValue |= DMA_SxCR_TRBUFF;
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a9c:	e013      	b.n	8003ac6 <HAL_DMA_Init+0x176>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a9e:	f7ff fa17 	bl	8002ed0 <HAL_GetTick>
 8003aa2:	1b80      	subs	r0, r0, r6
 8003aa4:	2805      	cmp	r0, #5
 8003aa6:	d9ce      	bls.n	8003a46 <HAL_DMA_Init+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003aac:	2303      	movs	r3, #3
 8003aae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
}
 8003ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab6:	383f      	subs	r0, #63	@ 0x3f
 8003ab8:	2813      	cmp	r0, #19
 8003aba:	d804      	bhi.n	8003ac6 <HAL_DMA_Init+0x176>
 8003abc:	4f1e      	ldr	r7, [pc, #120]	@ (8003b38 <HAL_DMA_Init+0x1e8>)
 8003abe:	fa27 f000 	lsr.w	r0, r7, r0
 8003ac2:	07c7      	lsls	r7, r0, #31
 8003ac4:	d4e8      	bmi.n	8003a98 <HAL_DMA_Init+0x148>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ac6:	6013      	str	r3, [r2, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac8:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003aca:	6953      	ldr	r3, [r2, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003acc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003ad0:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad4:	d136      	bne.n	8003b44 <HAL_DMA_Init+0x1f4>
      registerValue |= hdma->Init.FIFOThreshold;
 8003ad6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003ada:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003adc:	b396      	cbz	r6, 8003b44 <HAL_DMA_Init+0x1f4>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ade:	b939      	cbnz	r1, 8003af0 <HAL_DMA_Init+0x1a0>
    switch (hdma->Init.FIFOThreshold)
 8003ae0:	2801      	cmp	r0, #1
 8003ae2:	d015      	beq.n	8003b10 <HAL_DMA_Init+0x1c0>
 8003ae4:	f030 0102 	bics.w	r1, r0, #2
 8003ae8:	d12c      	bne.n	8003b44 <HAL_DMA_Init+0x1f4>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	01f0      	lsls	r0, r6, #7
 8003aec:	d52a      	bpl.n	8003b44 <HAL_DMA_Init+0x1f4>
 8003aee:	e012      	b.n	8003b16 <HAL_DMA_Init+0x1c6>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003af4:	d122      	bne.n	8003b3c <HAL_DMA_Init+0x1ec>
    switch (hdma->Init.FIFOThreshold)
 8003af6:	2803      	cmp	r0, #3
 8003af8:	d824      	bhi.n	8003b44 <HAL_DMA_Init+0x1f4>
 8003afa:	a101      	add	r1, pc, #4	@ (adr r1, 8003b00 <HAL_DMA_Init+0x1b0>)
 8003afc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8003b00:	08003b17 	.word	0x08003b17
 8003b04:	08003aeb 	.word	0x08003aeb
 8003b08:	08003b17 	.word	0x08003b17
 8003b0c:	08003b11 	.word	0x08003b11
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b10:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8003b14:	d116      	bne.n	8003b44 <HAL_DMA_Init+0x1f4>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b16:	2340      	movs	r3, #64	@ 0x40
 8003b18:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e7c7      	b.n	8003aae <HAL_DMA_Init+0x15e>
 8003b1e:	bf00      	nop
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	58025408 	.word	0x58025408
 8003b2c:	a7fdabf8 	.word	0xa7fdabf8
 8003b30:	fe10803f 	.word	0xfe10803f
 8003b34:	5c001000 	.word	0x5c001000
 8003b38:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8003b3c:	2802      	cmp	r0, #2
 8003b3e:	d9ea      	bls.n	8003b16 <HAL_DMA_Init+0x1c6>
 8003b40:	2803      	cmp	r0, #3
 8003b42:	d0d2      	beq.n	8003aea <HAL_DMA_Init+0x19a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b44:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff fe32 	bl	80037b0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b4c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003b4e:	f003 021f 	and.w	r2, r3, #31
 8003b52:	233f      	movs	r3, #63	@ 0x3f
 8003b54:	4093      	lsls	r3, r2
 8003b56:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	42ab      	cmp	r3, r5
 8003b5c:	d045      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b5e:	4a45      	ldr	r2, [pc, #276]	@ (8003c74 <HAL_DMA_Init+0x324>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d042      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b64:	3218      	adds	r2, #24
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03f      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b6a:	3218      	adds	r2, #24
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03c      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b70:	3218      	adds	r2, #24
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d039      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b76:	3218      	adds	r2, #24
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d036      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b7c:	3218      	adds	r2, #24
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d033      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b82:	3218      	adds	r2, #24
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d030      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b88:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d02c      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b90:	3218      	adds	r2, #24
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d029      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b96:	3218      	adds	r2, #24
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d026      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003b9c:	3218      	adds	r2, #24
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d023      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003ba2:	3218      	adds	r2, #24
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d020      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003ba8:	3218      	adds	r2, #24
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bae:	3218      	adds	r2, #24
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01a      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bb4:	3218      	adds	r2, #24
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d017      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bba:	4a2f      	ldr	r2, [pc, #188]	@ (8003c78 <HAL_DMA_Init+0x328>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d014      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bc0:	3214      	adds	r2, #20
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d011      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bc6:	3214      	adds	r2, #20
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bcc:	3214      	adds	r2, #20
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bd2:	3214      	adds	r2, #20
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d008      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bd8:	3214      	adds	r2, #20
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d005      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003bde:	3214      	adds	r2, #20
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d002      	beq.n	8003bea <HAL_DMA_Init+0x29a>
 8003be4:	3214      	adds	r2, #20
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d119      	bne.n	8003c1e <HAL_DMA_Init+0x2ce>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bea:	4620      	mov	r0, r4
 8003bec:	2500      	movs	r5, #0
 8003bee:	f7ff fe2d 	bl	800384c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf2:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bf4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bf8:	bf04      	itt	eq
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c02:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c04:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c06:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c08:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8003c0c:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c0e:	d82c      	bhi.n	8003c6a <HAL_DMA_Init+0x31a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c10:	f7ff fe66 	bl	80038e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c14:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003c16:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c18:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8003c1c:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003c20:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c22:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003c24:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8003c28:	e744      	b.n	8003ab4 <HAL_DMA_Init+0x164>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c2a:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_DMA_Init+0x32c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	f43f aecd 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c32:	3214      	adds	r2, #20
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f43f aec9 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c3a:	3214      	adds	r2, #20
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	f43f aec5 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c42:	3214      	adds	r2, #20
 8003c44:	4293      	cmp	r3, r2
 8003c46:	f43f aec1 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c4a:	3214      	adds	r2, #20
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f43f aebd 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c52:	3214      	adds	r2, #20
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f43f aeb9 	beq.w	80039cc <HAL_DMA_Init+0x7c>
 8003c5a:	3214      	adds	r2, #20
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f43f aeb5 	beq.w	80039cc <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c62:	2340      	movs	r3, #64	@ 0x40
 8003c64:	e721      	b.n	8003aaa <HAL_DMA_Init+0x15a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c66:	2210      	movs	r2, #16
 8003c68:	e6c2      	b.n	80039f0 <HAL_DMA_Init+0xa0>
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c6a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c6e:	6765      	str	r5, [r4, #116]	@ 0x74
 8003c70:	e7d5      	b.n	8003c1e <HAL_DMA_Init+0x2ce>
 8003c72:	bf00      	nop
 8003c74:	40020028 	.word	0x40020028
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c

08003c80 <HAL_DMA_Abort>:
{
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7ff f924 	bl	8002ed0 <HAL_GetTick>
 8003c88:	4607      	mov	r7, r0
  if(hdma == NULL)
 8003c8a:	b145      	cbz	r5, 8003c9e <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c8c:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d006      	beq.n	8003ca2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8003c9e:	2001      	movs	r0, #1
}
 8003ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ca2:	682c      	ldr	r4, [r5, #0]
 8003ca4:	4e7c      	ldr	r6, [pc, #496]	@ (8003e98 <HAL_DMA_Abort+0x218>)
 8003ca6:	42b4      	cmp	r4, r6
 8003ca8:	d05b      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003caa:	4b7c      	ldr	r3, [pc, #496]	@ (8003e9c <HAL_DMA_Abort+0x21c>)
 8003cac:	429c      	cmp	r4, r3
 8003cae:	d058      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d055      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	d052      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d04f      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d04c      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cc8:	3318      	adds	r3, #24
 8003cca:	429c      	cmp	r4, r3
 8003ccc:	d049      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cce:	3318      	adds	r3, #24
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	d046      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cd4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d042      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cdc:	3318      	adds	r3, #24
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	d03f      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	d03c      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003ce8:	3318      	adds	r3, #24
 8003cea:	429c      	cmp	r4, r3
 8003cec:	d039      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cee:	3318      	adds	r3, #24
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	429c      	cmp	r4, r3
 8003cf8:	d033      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d030      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
 8003d00:	3318      	adds	r3, #24
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d02d      	beq.n	8003d62 <HAL_DMA_Abort+0xe2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f023 030e 	bic.w	r3, r3, #14
 8003d0c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d0e:	4b64      	ldr	r3, [pc, #400]	@ (8003ea0 <HAL_DMA_Abort+0x220>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d12f      	bne.n	8003d74 <HAL_DMA_Abort+0xf4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d14:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 8003d16:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d18:	6813      	ldr	r3, [r2, #0]
 8003d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d1e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d20:	d03d      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d22:	4b5e      	ldr	r3, [pc, #376]	@ (8003e9c <HAL_DMA_Abort+0x21c>)
 8003d24:	429c      	cmp	r4, r3
 8003d26:	d03a      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d28:	3318      	adds	r3, #24
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	d037      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d2e:	3318      	adds	r3, #24
 8003d30:	429c      	cmp	r4, r3
 8003d32:	d034      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d34:	3318      	adds	r3, #24
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d031      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	d02e      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d40:	3318      	adds	r3, #24
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d02b      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d46:	3318      	adds	r3, #24
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	d028      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d4c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d024      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d54:	3318      	adds	r3, #24
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d021      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d01e      	beq.n	8003d9e <HAL_DMA_Abort+0x11e>
 8003d60:	e01d      	b.n	8003d9e <HAL_DMA_Abort+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	f023 031e 	bic.w	r3, r3, #30
 8003d68:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d6a:	6963      	ldr	r3, [r4, #20]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d70:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d72:	e7cf      	b.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea4 <HAL_DMA_Abort+0x224>)
 8003d76:	429c      	cmp	r4, r3
 8003d78:	d0cc      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	d0c9      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d80:	3314      	adds	r3, #20
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d0c6      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d86:	3314      	adds	r3, #20
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d0c3      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d0c0      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d92:	3314      	adds	r3, #20
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d0bd      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
 8003d98:	3314      	adds	r3, #20
 8003d9a:	429c      	cmp	r4, r3
 8003d9c:	d0ba      	beq.n	8003d14 <HAL_DMA_Abort+0x94>
    __HAL_DMA_DISABLE(hdma);
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	07db      	lsls	r3, r3, #31
 8003daa:	d447      	bmi.n	8003e3c <HAL_DMA_Abort+0x1bc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dac:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dae:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db0:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db2:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003db4:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db8:	d04b      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dba:	4938      	ldr	r1, [pc, #224]	@ (8003e9c <HAL_DMA_Abort+0x21c>)
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	d048      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dc0:	3118      	adds	r1, #24
 8003dc2:	428b      	cmp	r3, r1
 8003dc4:	d045      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dc6:	3118      	adds	r1, #24
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d042      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dcc:	3118      	adds	r1, #24
 8003dce:	428b      	cmp	r3, r1
 8003dd0:	d03f      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dd2:	3118      	adds	r1, #24
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d03c      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dd8:	3118      	adds	r1, #24
 8003dda:	428b      	cmp	r3, r1
 8003ddc:	d039      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dde:	3118      	adds	r1, #24
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d036      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003de4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d032      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dec:	3118      	adds	r1, #24
 8003dee:	428b      	cmp	r3, r1
 8003df0:	d02f      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003df2:	3118      	adds	r1, #24
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d02c      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003df8:	3118      	adds	r1, #24
 8003dfa:	428b      	cmp	r3, r1
 8003dfc:	d029      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003dfe:	3118      	adds	r1, #24
 8003e00:	428b      	cmp	r3, r1
 8003e02:	d026      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003e04:	3118      	adds	r1, #24
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d023      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003e0a:	3118      	adds	r1, #24
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d020      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
 8003e10:	3118      	adds	r1, #24
 8003e12:	428b      	cmp	r3, r1
 8003e14:	d01d      	beq.n	8003e52 <HAL_DMA_Abort+0x1d2>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e16:	2101      	movs	r1, #1
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <HAL_DMA_Abort+0x220>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d11a      	bne.n	8003e5a <HAL_DMA_Abort+0x1da>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e24:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8003e28:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8003e2a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8003e2c:	bb5b      	cbnz	r3, 8003e86 <HAL_DMA_Abort+0x206>
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8003e30:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003e32:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003e36:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8003e3a:	e731      	b.n	8003ca0 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e3c:	f7ff f848 	bl	8002ed0 <HAL_GetTick>
 8003e40:	1bc0      	subs	r0, r0, r7
 8003e42:	2805      	cmp	r0, #5
 8003e44:	d9af      	bls.n	8003da6 <HAL_DMA_Abort+0x126>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e46:	2320      	movs	r3, #32
 8003e48:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003e50:	e722      	b.n	8003c98 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e52:	233f      	movs	r3, #63	@ 0x3f
 8003e54:	4093      	lsls	r3, r2
 8003e56:	6083      	str	r3, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e58:	e7e4      	b.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <HAL_DMA_Abort+0x224>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d0e1      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e60:	3214      	adds	r2, #20
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d0de      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e66:	3214      	adds	r2, #20
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d0db      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e6c:	3214      	adds	r2, #20
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d0d8      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e72:	3214      	adds	r2, #20
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d0d5      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e78:	3214      	adds	r2, #20
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d0d2      	beq.n	8003e24 <HAL_DMA_Abort+0x1a4>
 8003e7e:	3214      	adds	r2, #20
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d1d4      	bne.n	8003e2e <HAL_DMA_Abort+0x1ae>
 8003e84:	e7ce      	b.n	8003e24 <HAL_DMA_Abort+0x1a4>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	e7cb      	b.n	8003e2e <HAL_DMA_Abort+0x1ae>
 8003e96:	bf00      	nop
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	58025408 	.word	0x58025408
 8003ea4:	5802541c 	.word	0x5802541c

08003ea8 <HAL_DMA_Abort_IT>:
{
 8003ea8:	b508      	push	{r3, lr}
  if(hdma == NULL)
 8003eaa:	b128      	cbz	r0, 8003eb8 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eac:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
 8003eba:	e05d      	b.n	8003f78 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ebc:	6803      	ldr	r3, [r0, #0]
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8003fbc <HAL_DMA_Abort_IT+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d051      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ec4:	3218      	adds	r2, #24
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d04e      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003eca:	3218      	adds	r2, #24
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d04b      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ed0:	3218      	adds	r2, #24
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d048      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ed6:	3218      	adds	r2, #24
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003edc:	3218      	adds	r2, #24
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d042      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ee2:	3218      	adds	r2, #24
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d03f      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ee8:	3218      	adds	r2, #24
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d03c      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003eee:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d038      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003ef6:	3218      	adds	r2, #24
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d035      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003efc:	3218      	adds	r2, #24
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d032      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003f02:	3218      	adds	r2, #24
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d02f      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003f08:	3218      	adds	r2, #24
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003f0e:	3218      	adds	r2, #24
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d029      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003f14:	3218      	adds	r2, #24
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d026      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
 8003f1a:	3218      	adds	r2, #24
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d023      	beq.n	8003f68 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f022 020e 	bic.w	r2, r2, #14
 8003f26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f30:	4a23      	ldr	r2, [pc, #140]	@ (8003fc0 <HAL_DMA_Abort_IT+0x118>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d121      	bne.n	8003f7a <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f36:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f3e:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f40:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4093      	lsls	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4e:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 8003f52:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003f54:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003f56:	b32b      	cbz	r3, 8003fa4 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5e:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f60:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e01d      	b.n	8003fa4 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f68:	2204      	movs	r2, #4
 8003f6a:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f76:	2000      	movs	r0, #0
}
 8003f78:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f7a:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <HAL_DMA_Abort_IT+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d0da      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f80:	3214      	adds	r2, #20
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d0d7      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f86:	3214      	adds	r2, #20
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d0d4      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f8c:	3214      	adds	r2, #20
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d0d1      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f92:	3214      	adds	r2, #20
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d0ce      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f98:	3214      	adds	r2, #20
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d0cb      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
 8003f9e:	3214      	adds	r2, #20
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d0c8      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8003faa:	2300      	movs	r3, #0
 8003fac:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8003fb0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0df      	beq.n	8003f76 <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8003fb6:	4798      	blx	r3
 8003fb8:	e7dd      	b.n	8003f76 <HAL_DMA_Abort_IT+0xce>
 8003fba:	bf00      	nop
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	58025408 	.word	0x58025408
 8003fc4:	5802541c 	.word	0x5802541c

08003fc8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
{
 8003fca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8003fce:	9301      	str	r3, [sp, #4]
{
 8003fd0:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd2:	4b84      	ldr	r3, [pc, #528]	@ (80041e4 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fd4:	4f84      	ldr	r7, [pc, #528]	@ (80041e8 <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd6:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fd8:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fdc:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8003fde:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8003fe2:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fe6:	d047      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8003fe8:	4a80      	ldr	r2, [pc, #512]	@ (80041ec <HAL_DMA_IRQHandler+0x224>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d044      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8003fee:	3218      	adds	r2, #24
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d041      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8003ff4:	3218      	adds	r2, #24
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03e      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8003ffa:	3218      	adds	r2, #24
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d03b      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004000:	3218      	adds	r2, #24
 8004002:	4293      	cmp	r3, r2
 8004004:	d038      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004006:	3218      	adds	r2, #24
 8004008:	4293      	cmp	r3, r2
 800400a:	d035      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 800400c:	3218      	adds	r2, #24
 800400e:	4293      	cmp	r3, r2
 8004010:	d032      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004012:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004016:	4293      	cmp	r3, r2
 8004018:	d02e      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 800401a:	3218      	adds	r2, #24
 800401c:	4293      	cmp	r3, r2
 800401e:	d02b      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004020:	3218      	adds	r2, #24
 8004022:	4293      	cmp	r3, r2
 8004024:	d028      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004026:	3218      	adds	r2, #24
 8004028:	4293      	cmp	r3, r2
 800402a:	d025      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 800402c:	3218      	adds	r2, #24
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004032:	3218      	adds	r2, #24
 8004034:	4293      	cmp	r3, r2
 8004036:	d01f      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 8004038:	3218      	adds	r2, #24
 800403a:	4293      	cmp	r3, r2
 800403c:	d01c      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
 800403e:	3218      	adds	r2, #24
 8004040:	4293      	cmp	r3, r2
 8004042:	d019      	beq.n	8004078 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004044:	4a6a      	ldr	r2, [pc, #424]	@ (80041f0 <HAL_DMA_IRQHandler+0x228>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f040 8136 	bne.w	80042b8 <HAL_DMA_IRQHandler+0x2f0>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800404c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800404e:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004050:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004052:	f001 011f 	and.w	r1, r1, #31
 8004056:	4088      	lsls	r0, r1
 8004058:	ea10 0f0c 	tst.w	r0, ip
 800405c:	f000 8153 	beq.w	8004306 <HAL_DMA_IRQHandler+0x33e>
 8004060:	0756      	lsls	r6, r2, #29
 8004062:	f140 8150 	bpl.w	8004306 <HAL_DMA_IRQHandler+0x33e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004066:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004068:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406a:	f140 8144 	bpl.w	80042f6 <HAL_DMA_IRQHandler+0x32e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800406e:	03d3      	lsls	r3, r2, #15
 8004070:	f100 8147 	bmi.w	8004302 <HAL_DMA_IRQHandler+0x33a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004074:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004076:	e0a0      	b.n	80041ba <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004078:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800407a:	2108      	movs	r1, #8
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	4091      	lsls	r1, r2
 8004082:	ea11 0f08 	tst.w	r1, r8
 8004086:	d00b      	beq.n	80040a0 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	0740      	lsls	r0, r0, #29
 800408c:	d508      	bpl.n	80040a0 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	f020 0004 	bic.w	r0, r0, #4
 8004094:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004096:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004098:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800409a:	f041 0101 	orr.w	r1, r1, #1
 800409e:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a0:	fa28 f102 	lsr.w	r1, r8, r2
 80040a4:	07c8      	lsls	r0, r1, #31
 80040a6:	d509      	bpl.n	80040bc <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	0609      	lsls	r1, r1, #24
 80040ac:	d506      	bpl.n	80040bc <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040ae:	2101      	movs	r1, #1
 80040b0:	4091      	lsls	r1, r2
 80040b2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80040b6:	f041 0102 	orr.w	r1, r1, #2
 80040ba:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040bc:	2104      	movs	r1, #4
 80040be:	4091      	lsls	r1, r2
 80040c0:	ea11 0f08 	tst.w	r1, r8
 80040c4:	d007      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	0780      	lsls	r0, r0, #30
 80040ca:	d504      	bpl.n	80040d6 <HAL_DMA_IRQHandler+0x10e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040cc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040ce:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80040d0:	f041 0104 	orr.w	r1, r1, #4
 80040d4:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040d6:	2110      	movs	r1, #16
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	ea12 0f08 	tst.w	r2, r8
 80040e0:	d00f      	beq.n	8004102 <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	0709      	lsls	r1, r1, #28
 80040e6:	d50c      	bpl.n	8004102 <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e8:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	0350      	lsls	r0, r2, #13
 80040ee:	d56c      	bpl.n	80041ca <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0319      	lsls	r1, r3, #12
 80040f4:	d401      	bmi.n	80040fa <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 80040f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040f8:	e000      	b.n	80040fc <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040fa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 80040fc:	b10b      	cbz	r3, 8004102 <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 80040fe:	4620      	mov	r0, r4
 8004100:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004102:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004104:	2120      	movs	r1, #32
 8004106:	f002 021f 	and.w	r2, r2, #31
 800410a:	4091      	lsls	r1, r2
 800410c:	ea11 0f08 	tst.w	r1, r8
 8004110:	d07a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	42bb      	cmp	r3, r7
 8004116:	d02d      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004118:	4834      	ldr	r0, [pc, #208]	@ (80041ec <HAL_DMA_IRQHandler+0x224>)
 800411a:	4283      	cmp	r3, r0
 800411c:	d02a      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800411e:	3018      	adds	r0, #24
 8004120:	4283      	cmp	r3, r0
 8004122:	d027      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004124:	3018      	adds	r0, #24
 8004126:	4283      	cmp	r3, r0
 8004128:	d024      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800412a:	3018      	adds	r0, #24
 800412c:	4283      	cmp	r3, r0
 800412e:	d021      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004130:	3018      	adds	r0, #24
 8004132:	4283      	cmp	r3, r0
 8004134:	d01e      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004136:	3018      	adds	r0, #24
 8004138:	4283      	cmp	r3, r0
 800413a:	d01b      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800413c:	3018      	adds	r0, #24
 800413e:	4283      	cmp	r3, r0
 8004140:	d018      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004142:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8004146:	4283      	cmp	r3, r0
 8004148:	d014      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800414a:	3018      	adds	r0, #24
 800414c:	4283      	cmp	r3, r0
 800414e:	d011      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004150:	3018      	adds	r0, #24
 8004152:	4283      	cmp	r3, r0
 8004154:	d00e      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004156:	3018      	adds	r0, #24
 8004158:	4283      	cmp	r3, r0
 800415a:	d00b      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800415c:	3018      	adds	r0, #24
 800415e:	4283      	cmp	r3, r0
 8004160:	d008      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004162:	3018      	adds	r0, #24
 8004164:	4283      	cmp	r3, r0
 8004166:	d005      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 8004168:	3018      	adds	r0, #24
 800416a:	4283      	cmp	r3, r0
 800416c:	d002      	beq.n	8004174 <HAL_DMA_IRQHandler+0x1ac>
 800416e:	3018      	adds	r0, #24
 8004170:	4283      	cmp	r3, r0
 8004172:	d132      	bne.n	80041da <HAL_DMA_IRQHandler+0x212>
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	f010 0f10 	tst.w	r0, #16
 800417a:	d045      	beq.n	8004208 <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800417e:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
 8004182:	2904      	cmp	r1, #4
 8004184:	d136      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	f021 0116 	bic.w	r1, r1, #22
 800418c:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004194:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004196:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004198:	b909      	cbnz	r1, 800419e <HAL_DMA_IRQHandler+0x1d6>
 800419a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800419c:	b119      	cbz	r1, 80041a6 <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	f021 0108 	bic.w	r1, r1, #8
 80041a4:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041a6:	233f      	movs	r3, #63	@ 0x3f
 80041a8:	4093      	lsls	r3, r2
 80041aa:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80041b2:	2300      	movs	r3, #0
 80041b4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80041b8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8098 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x328>
        hdma->XferErrorCallback(hdma);
 80041c0:	4620      	mov	r0, r4
}
 80041c2:	b002      	add	sp, #8
 80041c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80041c8:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	05d2      	lsls	r2, r2, #23
 80041ce:	d492      	bmi.n	80040f6 <HAL_DMA_IRQHandler+0x12e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f022 0208 	bic.w	r2, r2, #8
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e78d      	b.n	80040f6 <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	f010 0f02 	tst.w	r0, #2
 80041e0:	e7cb      	b.n	800417a <HAL_DMA_IRQHandler+0x1b2>
 80041e2:	bf00      	nop
 80041e4:	24000074 	.word	0x24000074
 80041e8:	40020010 	.word	0x40020010
 80041ec:	40020028 	.word	0x40020028
 80041f0:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	0350      	lsls	r0, r2, #13
 80041f8:	d543      	bpl.n	8004282 <HAL_DMA_IRQHandler+0x2ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0319      	lsls	r1, r3, #12
 80041fe:	d44d      	bmi.n	800429c <HAL_DMA_IRQHandler+0x2d4>
            if(hdma->XferM1CpltCallback != NULL)
 8004200:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 8004202:	b10b      	cbz	r3, 8004208 <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8004204:	4620      	mov	r0, r4
 8004206:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004208:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800420a:	2b00      	cmp	r3, #0
 800420c:	d070      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x328>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800420e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004210:	07da      	lsls	r2, r3, #31
 8004212:	d54f      	bpl.n	80042b4 <HAL_DMA_IRQHandler+0x2ec>
        hdma->State = HAL_DMA_STATE_ABORT;
 8004214:	2304      	movs	r3, #4
 8004216:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	42bb      	cmp	r3, r7
 800421e:	d01e      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004220:	4a4f      	ldr	r2, [pc, #316]	@ (8004360 <HAL_DMA_IRQHandler+0x398>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01b      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004226:	3218      	adds	r2, #24
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 800422c:	3218      	adds	r2, #24
 800422e:	4293      	cmp	r3, r2
 8004230:	d015      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004232:	3218      	adds	r2, #24
 8004234:	4293      	cmp	r3, r2
 8004236:	d012      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004238:	3218      	adds	r2, #24
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 800423e:	3218      	adds	r2, #24
 8004240:	4293      	cmp	r3, r2
 8004242:	d00c      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004244:	3218      	adds	r2, #24
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 800424a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800424e:	4293      	cmp	r3, r2
 8004250:	d005      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004252:	3218      	adds	r2, #24
 8004254:	4293      	cmp	r3, r2
 8004256:	d002      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 8004258:	3218      	adds	r2, #24
 800425a:	4293      	cmp	r3, r2
 800425c:	d0ff      	beq.n	800425e <HAL_DMA_IRQHandler+0x296>
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004266:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800426a:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 800426e:	9a01      	ldr	r2, [sp, #4]
 8004270:	3201      	adds	r2, #1
 8004272:	42b2      	cmp	r2, r6
 8004274:	9201      	str	r2, [sp, #4]
 8004276:	d913      	bls.n	80042a0 <HAL_DMA_IRQHandler+0x2d8>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	07db      	lsls	r3, r3, #31
 800427c:	d414      	bmi.n	80042a8 <HAL_DMA_IRQHandler+0x2e0>
          hdma->State = HAL_DMA_STATE_READY;
 800427e:	2301      	movs	r3, #1
 8004280:	e013      	b.n	80042aa <HAL_DMA_IRQHandler+0x2e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0x2d4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	f021 0110 	bic.w	r1, r1, #16
 8004290:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004292:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8004294:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004298:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          if(hdma->XferCpltCallback != NULL)
 800429c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800429e:	e7b0      	b.n	8004202 <HAL_DMA_IRQHandler+0x23a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	07d7      	lsls	r7, r2, #31
 80042a4:	d4e3      	bmi.n	800426e <HAL_DMA_IRQHandler+0x2a6>
 80042a6:	e7e7      	b.n	8004278 <HAL_DMA_IRQHandler+0x2b0>
          hdma->State = HAL_DMA_STATE_ERROR;
 80042a8:	2303      	movs	r3, #3
      hdma->State = HAL_DMA_STATE_READY;
 80042aa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80042ae:	2300      	movs	r3, #0
 80042b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 80042b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80042b6:	e780      	b.n	80041ba <HAL_DMA_IRQHandler+0x1f2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <HAL_DMA_IRQHandler+0x39c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f43f aec6 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042c0:	3214      	adds	r2, #20
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f43f aec2 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042c8:	3214      	adds	r2, #20
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f43f aebe 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042d0:	3214      	adds	r2, #20
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f43f aeba 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042d8:	3214      	adds	r2, #20
 80042da:	4293      	cmp	r3, r2
 80042dc:	f43f aeb6 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042e0:	3214      	adds	r2, #20
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f43f aeb2 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
 80042e8:	3214      	adds	r2, #20
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f43f aeae 	beq.w	800404c <HAL_DMA_IRQHandler+0x84>
}
 80042f0:	b002      	add	sp, #8
 80042f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042f6:	0697      	lsls	r7, r2, #26
 80042f8:	d403      	bmi.n	8004302 <HAL_DMA_IRQHandler+0x33a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f022 0204 	bic.w	r2, r2, #4
 8004300:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004304:	e759      	b.n	80041ba <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004306:	2002      	movs	r0, #2
 8004308:	4088      	lsls	r0, r1
 800430a:	ea10 0f0c 	tst.w	r0, ip
 800430e:	d016      	beq.n	800433e <HAL_DMA_IRQHandler+0x376>
 8004310:	0796      	lsls	r6, r2, #30
 8004312:	d514      	bpl.n	800433e <HAL_DMA_IRQHandler+0x376>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004314:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004316:	0410      	lsls	r0, r2, #16
 8004318:	d503      	bpl.n	8004322 <HAL_DMA_IRQHandler+0x35a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800431a:	03d1      	lsls	r1, r2, #15
 800431c:	d40d      	bmi.n	800433a <HAL_DMA_IRQHandler+0x372>
          if(hdma->XferM1CpltCallback != NULL)
 800431e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004320:	e74b      	b.n	80041ba <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004322:	f012 0220 	ands.w	r2, r2, #32
 8004326:	d108      	bne.n	800433a <HAL_DMA_IRQHandler+0x372>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	f021 010a 	bic.w	r1, r1, #10
 800432e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004330:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004332:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004336:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800433a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800433c:	e73d      	b.n	80041ba <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800433e:	2008      	movs	r0, #8
 8004340:	4088      	lsls	r0, r1
 8004342:	ea10 0f0c 	tst.w	r0, ip
 8004346:	d0d3      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x328>
 8004348:	0712      	lsls	r2, r2, #28
 800434a:	d5d1      	bpl.n	80042f0 <HAL_DMA_IRQHandler+0x328>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	f022 020e 	bic.w	r2, r2, #14
 8004352:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004354:	2301      	movs	r3, #1
 8004356:	fa03 f101 	lsl.w	r1, r3, r1
 800435a:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800435c:	6563      	str	r3, [r4, #84]	@ 0x54
 800435e:	e7a4      	b.n	80042aa <HAL_DMA_IRQHandler+0x2e2>
 8004360:	40020028 	.word	0x40020028
 8004364:	5802541c 	.word	0x5802541c

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800436c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8004534 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004372:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004376:	680a      	ldr	r2, [r1, #0]
 8004378:	fa32 f503 	lsrs.w	r5, r2, r3
 800437c:	d102      	bne.n	8004384 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800437e:	b003      	add	sp, #12
 8004380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004384:	2501      	movs	r5, #1
 8004386:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800438a:	ea18 0202 	ands.w	r2, r8, r2
 800438e:	f000 80bb 	beq.w	8004508 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004392:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004394:	2703      	movs	r7, #3
 8004396:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800439a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800439e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043a2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043a4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043a8:	2f01      	cmp	r7, #1
 80043aa:	d834      	bhi.n	8004416 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80043ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043ae:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b2:	68cf      	ldr	r7, [r1, #12]
 80043b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80043b8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80043bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80043be:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c0:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c4:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80043c8:	409f      	lsls	r7, r3
 80043ca:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80043ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80043d0:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d2:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043d4:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d8:	688f      	ldr	r7, [r1, #8]
 80043da:	fa07 f70e 	lsl.w	r7, r7, lr
 80043de:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80043e2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e4:	d119      	bne.n	800441a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80043e6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043ea:	f003 0a07 	and.w	sl, r3, #7
 80043ee:	f04f 0b0f 	mov.w	fp, #15
 80043f2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80043f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80043fa:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043fe:	fa0b fb0a 	lsl.w	fp, fp, sl
 8004402:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004406:	690f      	ldr	r7, [r1, #16]
 8004408:	fa07 f70a 	lsl.w	r7, r7, sl
 800440c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8004410:	f8c8 7020 	str.w	r7, [r8, #32]
 8004414:	e001      	b.n	800441a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004416:	2d03      	cmp	r5, #3
 8004418:	d1da      	bne.n	80043d0 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800441a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800441c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004420:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004424:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004428:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800442c:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800442e:	d06b      	beq.n	8004508 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004430:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8004434:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004438:	f003 0c03 	and.w	ip, r3, #3
 800443c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004440:	f045 0502 	orr.w	r5, r5, #2
 8004444:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004448:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8004450:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8004454:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004458:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445c:	f005 0502 	and.w	r5, r5, #2
 8004460:	9501      	str	r5, [sp, #4]
 8004462:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004464:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004466:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800446a:	4d31      	ldr	r5, [pc, #196]	@ (8004530 <HAL_GPIO_Init+0x1c8>)
 800446c:	42a8      	cmp	r0, r5
 800446e:	d04d      	beq.n	800450c <HAL_GPIO_Init+0x1a4>
 8004470:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004474:	42a8      	cmp	r0, r5
 8004476:	d04b      	beq.n	8004510 <HAL_GPIO_Init+0x1a8>
 8004478:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800447c:	42a8      	cmp	r0, r5
 800447e:	d049      	beq.n	8004514 <HAL_GPIO_Init+0x1ac>
 8004480:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004484:	42a8      	cmp	r0, r5
 8004486:	d047      	beq.n	8004518 <HAL_GPIO_Init+0x1b0>
 8004488:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800448c:	42a8      	cmp	r0, r5
 800448e:	d045      	beq.n	800451c <HAL_GPIO_Init+0x1b4>
 8004490:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004494:	42a8      	cmp	r0, r5
 8004496:	d043      	beq.n	8004520 <HAL_GPIO_Init+0x1b8>
 8004498:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800449c:	42a8      	cmp	r0, r5
 800449e:	d041      	beq.n	8004524 <HAL_GPIO_Init+0x1bc>
 80044a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80044a4:	42a8      	cmp	r0, r5
 80044a6:	d03f      	beq.n	8004528 <HAL_GPIO_Init+0x1c0>
 80044a8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80044ac:	42a8      	cmp	r0, r5
 80044ae:	d03d      	beq.n	800452c <HAL_GPIO_Init+0x1c4>
 80044b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80044b4:	42a8      	cmp	r0, r5
 80044b6:	bf14      	ite	ne
 80044b8:	250a      	movne	r5, #10
 80044ba:	2509      	moveq	r5, #9
 80044bc:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044c0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044c4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c8:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80044ca:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80044ce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80044d0:	bf0c      	ite	eq
 80044d2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80044d4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80044da:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80044dc:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80044de:	bf0c      	ite	eq
 80044e0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80044e2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80044e8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80044ea:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80044ee:	bf0c      	ite	eq
 80044f0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80044f2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80044f6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80044fa:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80044fe:	bf54      	ite	pl
 8004500:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8004502:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8004504:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8004508:	3301      	adds	r3, #1
 800450a:	e734      	b.n	8004376 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800450c:	2500      	movs	r5, #0
 800450e:	e7d5      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004510:	2501      	movs	r5, #1
 8004512:	e7d3      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004514:	2502      	movs	r5, #2
 8004516:	e7d1      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004518:	2503      	movs	r5, #3
 800451a:	e7cf      	b.n	80044bc <HAL_GPIO_Init+0x154>
 800451c:	2504      	movs	r5, #4
 800451e:	e7cd      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004520:	2505      	movs	r5, #5
 8004522:	e7cb      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004524:	2506      	movs	r5, #6
 8004526:	e7c9      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004528:	2507      	movs	r5, #7
 800452a:	e7c7      	b.n	80044bc <HAL_GPIO_Init+0x154>
 800452c:	2508      	movs	r5, #8
 800452e:	e7c5      	b.n	80044bc <HAL_GPIO_Init+0x154>
 8004530:	58020000 	.word	0x58020000
 8004534:	58024400 	.word	0x58024400

08004538 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004538:	6903      	ldr	r3, [r0, #16]
 800453a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800453c:	bf14      	ite	ne
 800453e:	2001      	movne	r0, #1
 8004540:	2000      	moveq	r0, #0
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004544:	b10a      	cbz	r2, 800454a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004546:	6181      	str	r1, [r0, #24]
  }
}
 8004548:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800454a:	0409      	lsls	r1, r1, #16
 800454c:	e7fb      	b.n	8004546 <HAL_GPIO_WritePin+0x2>

0800454e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800454e:	6803      	ldr	r3, [r0, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	0791      	lsls	r1, r2, #30
 8004554:	d501      	bpl.n	800455a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	07d2      	lsls	r2, r2, #31
 800455e:	d403      	bmi.n	8004568 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	619a      	str	r2, [r3, #24]
  }
}
 8004568:	4770      	bx	lr
	...

0800456c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800456c:	b530      	push	{r4, r5, lr}
 800456e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004570:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004574:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004576:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004578:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800457a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004580:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004582:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800458a:	ea20 0002 	bic.w	r0, r0, r2
 800458e:	4303      	orrs	r3, r0
 8004590:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004592:	bd30      	pop	{r4, r5, pc}
 8004594:	03ff63ff 	.word	0x03ff63ff

08004598 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8004598:	6803      	ldr	r3, [r0, #0]
{
 800459a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800459e:	699c      	ldr	r4, [r3, #24]
{
 80045a0:	4605      	mov	r5, r0
 80045a2:	460f      	mov	r7, r1
 80045a4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045a6:	f014 0410 	ands.w	r4, r4, #16
 80045aa:	d06f      	beq.n	800468c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80045ac:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80045b0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	0690      	lsls	r0, r2, #26
 80045ba:	d461      	bmi.n	8004680 <I2C_IsErrorOccurred+0xe8>
 80045bc:	f1b8 0f00 	cmp.w	r8, #0
 80045c0:	d035      	beq.n	800462e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80045c2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80045c6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80045c8:	682e      	ldr	r6, [r5, #0]
 80045ca:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045cc:	05d9      	lsls	r1, r3, #23
 80045ce:	d505      	bpl.n	80045dc <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80045d4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80045d8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045da:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045dc:	055a      	lsls	r2, r3, #21
 80045de:	d505      	bpl.n	80045ec <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80045e4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80045e8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ea:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ec:	059b      	lsls	r3, r3, #22
 80045ee:	d54f      	bpl.n	8004690 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045f8:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80045fa:	4628      	mov	r0, r5
 80045fc:	f7ff ffa7 	bl	800454e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004600:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8004602:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004604:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8004608:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800460c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8004616:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004618:	4323      	orrs	r3, r4
 800461a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	2320      	movs	r3, #32
 800461e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004622:	2300      	movs	r3, #0
 8004624:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8004628:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800462c:	e032      	b.n	8004694 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800462e:	1c7a      	adds	r2, r7, #1
 8004630:	d0c1      	beq.n	80045b6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fc4d 	bl	8002ed0 <HAL_GetTick>
 8004636:	1b80      	subs	r0, r0, r6
 8004638:	42b8      	cmp	r0, r7
 800463a:	d801      	bhi.n	8004640 <I2C_IsErrorOccurred+0xa8>
 800463c:	2f00      	cmp	r7, #0
 800463e:	d1b9      	bne.n	80045b4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004644:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004648:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800464a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800464c:	0400      	lsls	r0, r0, #16
 800464e:	d50a      	bpl.n	8004666 <I2C_IsErrorOccurred+0xce>
 8004650:	0449      	lsls	r1, r1, #17
 8004652:	d408      	bmi.n	8004666 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8004654:	2a20      	cmp	r2, #32
 8004656:	d006      	beq.n	8004666 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800465e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004660:	f7fe fc36 	bl	8002ed0 <HAL_GetTick>
 8004664:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004666:	682b      	ldr	r3, [r5, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	069b      	lsls	r3, r3, #26
 800466c:	d4a2      	bmi.n	80045b4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800466e:	f7fe fc2f 	bl	8002ed0 <HAL_GetTick>
 8004672:	1b80      	subs	r0, r0, r6
 8004674:	2819      	cmp	r0, #25
 8004676:	d9f6      	bls.n	8004666 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800467a:	f04f 0801 	mov.w	r8, #1
 800467e:	e799      	b.n	80045b4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8004680:	f1b8 0f00 	cmp.w	r8, #0
 8004684:	d19d      	bne.n	80045c2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004686:	2220      	movs	r2, #32
 8004688:	61da      	str	r2, [r3, #28]
 800468a:	e79a      	b.n	80045c2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	4620      	mov	r0, r4
 800468e:	e79b      	b.n	80045c8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8004690:	2800      	cmp	r0, #0
 8004692:	d1b2      	bne.n	80045fa <I2C_IsErrorOccurred+0x62>
}
 8004694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004698 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4604      	mov	r4, r0
 800469c:	460d      	mov	r5, r1
 800469e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	079b      	lsls	r3, r3, #30
 80046a6:	d501      	bpl.n	80046ac <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80046a8:	2000      	movs	r0, #0
 80046aa:	e01f      	b.n	80046ec <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ac:	4632      	mov	r2, r6
 80046ae:	4629      	mov	r1, r5
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ff71 	bl	8004598 <I2C_IsErrorOccurred>
 80046b6:	b9c0      	cbnz	r0, 80046ea <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	1c6a      	adds	r2, r5, #1
 80046ba:	d0f1      	beq.n	80046a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe fc08 	bl	8002ed0 <HAL_GetTick>
 80046c0:	1b80      	subs	r0, r0, r6
 80046c2:	42a8      	cmp	r0, r5
 80046c4:	d801      	bhi.n	80046ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	d1ea      	bne.n	80046a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f013 0302 	ands.w	r3, r3, #2
 80046d2:	d1e5      	bne.n	80046a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80046d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	f042 0220 	orr.w	r2, r2, #32
 80046de:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	2220      	movs	r2, #32
 80046e2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80046ea:	2001      	movs	r0, #1
}
 80046ec:	bd70      	pop	{r4, r5, r6, pc}

080046ee <I2C_WaitOnFlagUntilTimeout>:
{
 80046ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80046f6:	4604      	mov	r4, r0
 80046f8:	460f      	mov	r7, r1
 80046fa:	4616      	mov	r6, r2
 80046fc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	ea37 0303 	bics.w	r3, r7, r3
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	42b3      	cmp	r3, r6
 800470e:	d001      	beq.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004710:	2000      	movs	r0, #0
 8004712:	e025      	b.n	8004760 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004714:	4642      	mov	r2, r8
 8004716:	4629      	mov	r1, r5
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff3d 	bl	8004598 <I2C_IsErrorOccurred>
 800471e:	b9f0      	cbnz	r0, 800475e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8004720:	1c6b      	adds	r3, r5, #1
 8004722:	d0ec      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fe fbd4 	bl	8002ed0 <HAL_GetTick>
 8004728:	eba0 0008 	sub.w	r0, r0, r8
 800472c:	42a8      	cmp	r0, r5
 800472e:	d801      	bhi.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x46>
 8004730:	2d00      	cmp	r5, #0
 8004732:	d1e4      	bne.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	ea37 0303 	bics.w	r3, r7, r3
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	42b3      	cmp	r3, r6
 8004744:	d1db      	bne.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004746:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800474e:	2320      	movs	r3, #32
 8004750:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800475a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800475e:	2001      	movs	r0, #1
}
 8004760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004764 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4604      	mov	r4, r0
 8004768:	460d      	mov	r5, r1
 800476a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	069b      	lsls	r3, r3, #26
 8004772:	d501      	bpl.n	8004778 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	e01d      	b.n	80047b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004778:	4632      	mov	r2, r6
 800477a:	4629      	mov	r1, r5
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ff0b 	bl	8004598 <I2C_IsErrorOccurred>
 8004782:	b9b0      	cbnz	r0, 80047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fe fba4 	bl	8002ed0 <HAL_GetTick>
 8004788:	1b80      	subs	r0, r0, r6
 800478a:	42a8      	cmp	r0, r5
 800478c:	d801      	bhi.n	8004792 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800478e:	2d00      	cmp	r5, #0
 8004790:	d1ec      	bne.n	800476c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f013 0320 	ands.w	r3, r3, #32
 800479a:	d1e7      	bne.n	800476c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800479e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	f042 0220 	orr.w	r2, r2, #32
 80047a6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	2220      	movs	r2, #32
 80047aa:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80047b2:	2001      	movs	r0, #1
}
 80047b4:	bd70      	pop	{r4, r5, r6, pc}

080047b6 <HAL_I2C_Init>:
{
 80047b6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80047b8:	4604      	mov	r4, r0
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d04e      	beq.n	800485c <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047be:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80047c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80047c6:	b91b      	cbnz	r3, 80047d0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80047c8:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80047cc:	f7fd fd52 	bl	8002274 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d0:	2324      	movs	r3, #36	@ 0x24
 80047d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047f4:	2901      	cmp	r1, #1
 80047f6:	d106      	bne.n	8004806 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047fc:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	e007      	b.n	8004816 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004806:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800480a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800480c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800480e:	d1f6      	bne.n	80047fe <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004816:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004820:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004824:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800482e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004832:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004834:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800483a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800483c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800484c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004850:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004854:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800485a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800485c:	2001      	movs	r0, #1
 800485e:	e7fc      	b.n	800485a <HAL_I2C_Init+0xa4>

08004860 <HAL_I2C_Mem_Write>:
{
 8004860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800486a:	4604      	mov	r4, r0
 800486c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800486e:	2b20      	cmp	r3, #32
{
 8004870:	4616      	mov	r6, r2
 8004872:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004876:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800487a:	f040 80c6 	bne.w	8004a0a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800487e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004880:	b113      	cbz	r3, 8004888 <HAL_I2C_Mem_Write+0x28>
 8004882:	f1ba 0f00 	cmp.w	sl, #0
 8004886:	d106      	bne.n	8004896 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800488c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800488e:	2001      	movs	r0, #1
}
 8004890:	b003      	add	sp, #12
 8004892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004896:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800489a:	2b01      	cmp	r3, #1
 800489c:	f000 80b5 	beq.w	8004a0a <HAL_I2C_Mem_Write+0x1aa>
 80048a0:	f04f 0b01 	mov.w	fp, #1
 80048a4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80048a8:	f7fe fb12 	bl	8002ed0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ac:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80048ae:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048b0:	9000      	str	r0, [sp, #0]
 80048b2:	465a      	mov	r2, fp
 80048b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7ff ff18 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d1e5      	bne.n	800488e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c2:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 80048c4:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048c6:	fa5f f289 	uxtb.w	r2, r9
 80048ca:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d0:	2340      	movs	r3, #64	@ 0x40
 80048d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80048d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048da:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80048dc:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048de:	4b4c      	ldr	r3, [pc, #304]	@ (8004a10 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80048e0:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048ea:	f7ff fe3f 	bl	800456c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ee:	462a      	mov	r2, r5
 80048f0:	4641      	mov	r1, r8
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7ff fed0 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f8:	bb18      	cbnz	r0, 8004942 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048fa:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048fe:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004900:	d115      	bne.n	800492e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	2200      	movs	r2, #0
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	4643      	mov	r3, r8
 800490e:	9500      	str	r5, [sp, #0]
 8004910:	f7ff feed 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 8004914:	b9a8      	cbnz	r0, 8004942 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004916:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2bff      	cmp	r3, #255	@ 0xff
 800491c:	d815      	bhi.n	800494a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800491e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004920:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004924:	b292      	uxth	r2, r2
 8004926:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	9000      	str	r0, [sp, #0]
 800492c:	e012      	b.n	8004954 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800492e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004930:	4641      	mov	r1, r8
 8004932:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004934:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004936:	462a      	mov	r2, r5
 8004938:	f7ff feae 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 800493c:	b908      	cbnz	r0, 8004942 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	e7df      	b.n	8004902 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004948:	e7a1      	b.n	800488e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800494a:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800494c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004950:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004952:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004954:	4639      	mov	r1, r7
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff fe08 	bl	800456c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	462a      	mov	r2, r5
 800495e:	4641      	mov	r1, r8
 8004960:	4620      	mov	r0, r4
 8004962:	f7ff fe99 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 8004966:	2800      	cmp	r0, #0
 8004968:	d191      	bne.n	800488e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800496a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004972:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004974:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004976:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004978:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800497a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800497c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800497e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004980:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004982:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004984:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004986:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004988:	b29b      	uxth	r3, r3
 800498a:	b1b3      	cbz	r3, 80049ba <HAL_I2C_Mem_Write+0x15a>
 800498c:	b9aa      	cbnz	r2, 80049ba <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800498e:	4643      	mov	r3, r8
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	4620      	mov	r0, r4
 8004994:	9500      	str	r5, [sp, #0]
 8004996:	f7ff feaa 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 800499a:	2800      	cmp	r0, #0
 800499c:	f47f af77 	bne.w	800488e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2bff      	cmp	r3, #255	@ 0xff
 80049a6:	d928      	bls.n	80049fa <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049a8:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ae:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049b0:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049b2:	4639      	mov	r1, r7
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7ff fdd9 	bl	800456c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80049ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1cc      	bne.n	800495c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	462a      	mov	r2, r5
 80049c4:	4641      	mov	r1, r8
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff fecc 	bl	8004764 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f47f af5e 	bne.w	800488e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	2120      	movs	r1, #32
 80049d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80049de:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80049e2:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80049f0:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049f4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80049f8:	e74a      	b.n	8004890 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80049fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004a00:	b292      	uxth	r2, r2
 8004a02:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	9000      	str	r0, [sp, #0]
 8004a08:	e7d3      	b.n	80049b2 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8004a0a:	2002      	movs	r0, #2
 8004a0c:	e740      	b.n	8004890 <HAL_I2C_Mem_Write+0x30>
 8004a0e:	bf00      	nop
 8004a10:	80002000 	.word	0x80002000

08004a14 <HAL_I2C_Mem_Read>:
{
 8004a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8004a1e:	4604      	mov	r4, r0
 8004a20:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a22:	2b20      	cmp	r3, #32
{
 8004a24:	4616      	mov	r6, r2
 8004a26:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004a2a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2e:	f040 80c9 	bne.w	8004bc4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8004a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a34:	b113      	cbz	r3, 8004a3c <HAL_I2C_Mem_Read+0x28>
 8004a36:	f1ba 0f00 	cmp.w	sl, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a40:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004a42:	2001      	movs	r0, #1
}
 8004a44:	b003      	add	sp, #12
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004a4a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	f000 80b8 	beq.w	8004bc4 <HAL_I2C_Mem_Read+0x1b0>
 8004a54:	f04f 0b01 	mov.w	fp, #1
 8004a58:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fa38 	bl	8002ed0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a60:	2319      	movs	r3, #25
 8004a62:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004a64:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a66:	465a      	mov	r2, fp
 8004a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fe3e 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d1e4      	bne.n	8004a42 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a78:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8004a7a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a7c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a7e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a82:	2240      	movs	r2, #64	@ 0x40
 8004a84:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8004a88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8a:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a8c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004a8e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a90:	4a4d      	ldr	r2, [pc, #308]	@ (8004bc8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004a92:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a96:	9200      	str	r2, [sp, #0]
 8004a98:	fa5f f289 	uxtb.w	r2, r9
 8004a9c:	f7ff fd66 	bl	800456c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fdf7 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aaa:	bb20      	cbnz	r0, 8004af6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aac:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab2:	d116      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab4:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2140      	movs	r1, #64	@ 0x40
 8004aba:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004abc:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	4643      	mov	r3, r8
 8004ac0:	9500      	str	r5, [sp, #0]
 8004ac2:	f7ff fe14 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	b9b0      	cbnz	r0, 8004af6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2bff      	cmp	r3, #255	@ 0xff
 8004ace:	4b3f      	ldr	r3, [pc, #252]	@ (8004bcc <HAL_I2C_Mem_Read+0x1b8>)
 8004ad0:	d815      	bhi.n	8004afe <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004ad2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004ad4:	b292      	uxth	r2, r2
 8004ad6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ae0:	e012      	b.n	8004b08 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aea:	462a      	mov	r2, r5
 8004aec:	f7ff fdd4 	bl	8004698 <I2C_WaitOnTXISFlagUntilTimeout>
 8004af0:	b908      	cbnz	r0, 8004af6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	e7de      	b.n	8004ab4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004af6:	2300      	movs	r3, #0
 8004af8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004afc:	e7a1      	b.n	8004a42 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004afe:	22ff      	movs	r2, #255	@ 0xff
 8004b00:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b08:	4639      	mov	r1, r7
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7ff fd2e 	bl	800456c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b10:	4643      	mov	r3, r8
 8004b12:	2200      	movs	r2, #0
 8004b14:	2104      	movs	r1, #4
 8004b16:	4620      	mov	r0, r4
 8004b18:	9500      	str	r5, [sp, #0]
 8004b1a:	f7ff fde8 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d18f      	bne.n	8004a42 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b28:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004b2c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004b2e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004b30:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004b32:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004b34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b36:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004b38:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004b3a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	b1b3      	cbz	r3, 8004b74 <HAL_I2C_Mem_Read+0x160>
 8004b46:	b9aa      	cbnz	r2, 8004b74 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b48:	4643      	mov	r3, r8
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	9500      	str	r5, [sp, #0]
 8004b50:	f7ff fdcd 	bl	80046ee <I2C_WaitOnFlagUntilTimeout>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	f47f af74 	bne.w	8004a42 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2bff      	cmp	r3, #255	@ 0xff
 8004b60:	d928      	bls.n	8004bb4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b62:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b68:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b6a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f7ff fcfc 	bl	800456c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004b74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1c9      	bne.n	8004b10 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7c:	462a      	mov	r2, r5
 8004b7e:	4641      	mov	r1, r8
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff fdef 	bl	8004764 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f47f af5b 	bne.w	8004a42 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	2120      	movs	r1, #32
 8004b90:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004b98:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004b9c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004baa:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bae:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004bb2:	e747      	b.n	8004a44 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004bb4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	9000      	str	r0, [sp, #0]
 8004bc2:	e7d3      	b.n	8004b6c <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	e73d      	b.n	8004a44 <HAL_I2C_Mem_Read+0x30>
 8004bc8:	80002000 	.word	0x80002000
 8004bcc:	80002400 	.word	0x80002400

08004bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8004bd6:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd8:	2a20      	cmp	r2, #32
 8004bda:	b2d4      	uxtb	r4, r2
 8004bdc:	d11c      	bne.n	8004c18 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bde:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004be2:	2a01      	cmp	r2, #1
 8004be4:	d018      	beq.n	8004c18 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be6:	2224      	movs	r2, #36	@ 0x24
 8004be8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bec:	6802      	ldr	r2, [r0, #0]
 8004bee:	6810      	ldr	r0, [r2, #0]
 8004bf0:	f020 0001 	bic.w	r0, r0, #1
 8004bf4:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf6:	6810      	ldr	r0, [r2, #0]
 8004bf8:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004bfc:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bfe:	6810      	ldr	r0, [r2, #0]
 8004c00:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c02:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c04:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004c06:	6811      	ldr	r1, [r2, #0]
 8004c08:	f041 0101 	orr.w	r1, r1, #1
 8004c0c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004c12:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c16:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004c18:	2002      	movs	r0, #2
 8004c1a:	e7fc      	b.n	8004c16 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004c1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c1c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c1e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8004c22:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c24:	2a20      	cmp	r2, #32
 8004c26:	b2d4      	uxtb	r4, r2
 8004c28:	d11b      	bne.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c2a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	d017      	beq.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c32:	2224      	movs	r2, #36	@ 0x24
 8004c34:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c38:	6802      	ldr	r2, [r0, #0]
 8004c3a:	6810      	ldr	r0, [r2, #0]
 8004c3c:	f020 0001 	bic.w	r0, r0, #1
 8004c40:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c42:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c44:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c48:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8004c4e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004c50:	6811      	ldr	r1, [r2, #0]
 8004c52:	f041 0101 	orr.w	r1, r1, #1
 8004c56:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004c5c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c60:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004c62:	2002      	movs	r0, #2
 8004c64:	e7fc      	b.n	8004c60 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08004c68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c68:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c6a:	4c10      	ldr	r4, [pc, #64]	@ (8004cac <HAL_PWREx_ConfigSupply+0x44>)
 8004c6c:	68e3      	ldr	r3, [r4, #12]
 8004c6e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c72:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c74:	d105      	bne.n	8004c82 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	1a18      	subs	r0, r3, r0
 8004c7c:	bf18      	it	ne
 8004c7e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004c80:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	4318      	orrs	r0, r3
 8004c88:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8004c8a:	f7fe f921 	bl	8002ed0 <HAL_GetTick>
 8004c8e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	049b      	lsls	r3, r3, #18
 8004c94:	d501      	bpl.n	8004c9a <HAL_PWREx_ConfigSupply+0x32>
      return HAL_OK;
 8004c96:	2000      	movs	r0, #0
 8004c98:	e7f2      	b.n	8004c80 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c9a:	f7fe f919 	bl	8002ed0 <HAL_GetTick>
 8004c9e:	1b40      	subs	r0, r0, r5
 8004ca0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004ca4:	d9f4      	bls.n	8004c90 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e7ea      	b.n	8004c80 <HAL_PWREx_ConfigSupply+0x18>
 8004caa:	bf00      	nop
 8004cac:	58024800 	.word	0x58024800

08004cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d074      	beq.n	8004da2 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb8:	6803      	ldr	r3, [r0, #0]
 8004cba:	07d8      	lsls	r0, r3, #31
 8004cbc:	d45e      	bmi.n	8004d7c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	0799      	lsls	r1, r3, #30
 8004cc2:	f100 80ad 	bmi.w	8004e20 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	06da      	lsls	r2, r3, #27
 8004cca:	d527      	bpl.n	8004d1c <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ccc:	4a9c      	ldr	r2, [pc, #624]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004cce:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d007      	beq.n	8004cea <HAL_RCC_OscConfig+0x3a>
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	f040 8103 	bne.w	8004ee6 <HAL_RCC_OscConfig+0x236>
 8004ce0:	f001 0303 	and.w	r3, r1, #3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 80fe 	bne.w	8004ee6 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	05db      	lsls	r3, r3, #23
 8004cee:	d502      	bpl.n	8004cf6 <HAL_RCC_OscConfig+0x46>
 8004cf0:	69e3      	ldr	r3, [r4, #28]
 8004cf2:	2b80      	cmp	r3, #128	@ 0x80
 8004cf4:	d155      	bne.n	8004da2 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cf6:	f7fe f903 	bl	8002f00 <HAL_GetREVID>
 8004cfa:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004cfe:	6a21      	ldr	r1, [r4, #32]
 8004d00:	4298      	cmp	r0, r3
 8004d02:	4b8f      	ldr	r3, [pc, #572]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004d04:	f200 80e8 	bhi.w	8004ed8 <HAL_RCC_OscConfig+0x228>
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	2920      	cmp	r1, #32
 8004d0c:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8004d10:	bf0c      	ite	eq
 8004d12:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8004d16:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8004d1a:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	0719      	lsls	r1, r3, #28
 8004d20:	f100 8123 	bmi.w	8004f6a <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	069a      	lsls	r2, r3, #26
 8004d28:	f100 8144 	bmi.w	8004fb4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	075d      	lsls	r5, r3, #29
 8004d30:	d51e      	bpl.n	8004d70 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d32:	4d84      	ldr	r5, [pc, #528]	@ (8004f44 <HAL_RCC_OscConfig+0x294>)
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d3a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d3c:	f7fe f8c8 	bl	8002ed0 <HAL_GetTick>
 8004d40:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	05da      	lsls	r2, r3, #23
 8004d46:	f140 815a 	bpl.w	8004ffe <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	68a3      	ldr	r3, [r4, #8]
 8004d4c:	4d7c      	ldr	r5, [pc, #496]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	f040 815c 	bne.w	800500c <HAL_RCC_OscConfig+0x35c>
 8004d54:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004d60:	f7fe f8b6 	bl	8002ed0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d64:	4e76      	ldr	r6, [pc, #472]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004d66:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d68:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004d6a:	079b      	lsls	r3, r3, #30
 8004d6c:	f140 8174 	bpl.w	8005058 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004d72:	2900      	cmp	r1, #0
 8004d74:	f040 8177 	bne.w	8005066 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e02b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d7c:	4a70      	ldr	r2, [pc, #448]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004d7e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d80:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0xe6>
 8004d8a:	2b18      	cmp	r3, #24
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCC_OscConfig+0xf6>
 8004d8e:	f001 0303 	and.w	r3, r1, #3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	039a      	lsls	r2, r3, #14
 8004d9a:	d590      	bpl.n	8004cbe <HAL_RCC_OscConfig+0xe>
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d18d      	bne.n	8004cbe <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004da2:	2001      	movs	r0, #1
 8004da4:	e016      	b.n	8004dd4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	4d65      	ldr	r5, [pc, #404]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dae:	d112      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x126>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004db8:	f7fe f88a 	bl	8002ed0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dbc:	4e60      	ldr	r6, [pc, #384]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8004dbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	039b      	lsls	r3, r3, #14
 8004dc4:	f53f af7b 	bmi.w	8004cbe <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fe f882 	bl	8002ed0 <HAL_GetTick>
 8004dcc:	1b40      	subs	r0, r0, r5
 8004dce:	2864      	cmp	r0, #100	@ 0x64
 8004dd0:	d9f6      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004dd2:	2003      	movs	r0, #3
}
 8004dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd6:	b9a3      	cbnz	r3, 8004e02 <HAL_RCC_OscConfig+0x152>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	602b      	str	r3, [r5, #0]
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004de6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004de8:	f7fe f872 	bl	8002ed0 <HAL_GetTick>
 8004dec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	039f      	lsls	r7, r3, #14
 8004df2:	f57f af64 	bpl.w	8004cbe <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df6:	f7fe f86b 	bl	8002ed0 <HAL_GetTick>
 8004dfa:	1b80      	subs	r0, r0, r6
 8004dfc:	2864      	cmp	r0, #100	@ 0x64
 8004dfe:	d9f6      	bls.n	8004dee <HAL_RCC_OscConfig+0x13e>
 8004e00:	e7e7      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e06:	682b      	ldr	r3, [r5, #0]
 8004e08:	d103      	bne.n	8004e12 <HAL_RCC_OscConfig+0x162>
 8004e0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	e7ce      	b.n	8004db0 <HAL_RCC_OscConfig+0x100>
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1e:	e7ca      	b.n	8004db6 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e20:	4947      	ldr	r1, [pc, #284]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004e22:	68e2      	ldr	r2, [r4, #12]
 8004e24:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e26:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e28:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_OscConfig+0x186>
 8004e2e:	2b18      	cmp	r3, #24
 8004e30:	d12a      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1d8>
 8004e32:	0780      	lsls	r0, r0, #30
 8004e34:	d128      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e36:	680b      	ldr	r3, [r1, #0]
 8004e38:	075b      	lsls	r3, r3, #29
 8004e3a:	d501      	bpl.n	8004e40 <HAL_RCC_OscConfig+0x190>
 8004e3c:	2a00      	cmp	r2, #0
 8004e3e:	d0b0      	beq.n	8004da2 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e40:	4d3f      	ldr	r5, [pc, #252]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	f023 0319 	bic.w	r3, r3, #25
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e4c:	f7fe f840 	bl	8002ed0 <HAL_GetTick>
 8004e50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	075f      	lsls	r7, r3, #29
 8004e56:	d511      	bpl.n	8004e7c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	f7fe f852 	bl	8002f00 <HAL_GetREVID>
 8004e5c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004e60:	6922      	ldr	r2, [r4, #16]
 8004e62:	4298      	cmp	r0, r3
 8004e64:	686b      	ldr	r3, [r5, #4]
 8004e66:	d822      	bhi.n	8004eae <HAL_RCC_OscConfig+0x1fe>
 8004e68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e6c:	2a40      	cmp	r2, #64	@ 0x40
 8004e6e:	bf0c      	ite	eq
 8004e70:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8004e74:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004e78:	606b      	str	r3, [r5, #4]
 8004e7a:	e724      	b.n	8004cc6 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fe f828 	bl	8002ed0 <HAL_GetTick>
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	2802      	cmp	r0, #2
 8004e84:	d9e5      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1a2>
 8004e86:	e7a4      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e88:	4d2d      	ldr	r5, [pc, #180]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e8a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e8c:	b1a2      	cbz	r2, 8004eb8 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e8e:	f023 0319 	bic.w	r3, r3, #25
 8004e92:	4313      	orrs	r3, r2
 8004e94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e96:	f7fe f81b 	bl	8002ed0 <HAL_GetTick>
 8004e9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	0758      	lsls	r0, r3, #29
 8004ea0:	d4da      	bmi.n	8004e58 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fe f815 	bl	8002ed0 <HAL_GetTick>
 8004ea6:	1b80      	subs	r0, r0, r6
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d9f7      	bls.n	8004e9c <HAL_RCC_OscConfig+0x1ec>
 8004eac:	e791      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004eb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004eb6:	e7df      	b.n	8004e78 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ebe:	f7fe f807 	bl	8002ed0 <HAL_GetTick>
 8004ec2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	0759      	lsls	r1, r3, #29
 8004ec8:	f57f aefd 	bpl.w	8004cc6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fe f800 	bl	8002ed0 <HAL_GetTick>
 8004ed0:	1b80      	subs	r0, r0, r6
 8004ed2:	2802      	cmp	r0, #2
 8004ed4:	d9f6      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x214>
 8004ed6:	e77c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8004ede:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ee2:	60da      	str	r2, [r3, #12]
 8004ee4:	e71a      	b.n	8004d1c <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ee6:	69e3      	ldr	r3, [r4, #28]
 8004ee8:	4d15      	ldr	r5, [pc, #84]	@ (8004f40 <HAL_RCC_OscConfig+0x290>)
 8004eea:	b36b      	cbz	r3, 8004f48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ef4:	f7fd ffec 	bl	8002ed0 <HAL_GetTick>
 8004ef8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004efa:	682b      	ldr	r3, [r5, #0]
 8004efc:	05df      	lsls	r7, r3, #23
 8004efe:	d511      	bpl.n	8004f24 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f00:	f7fd fffe 	bl	8002f00 <HAL_GetREVID>
 8004f04:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004f08:	6a22      	ldr	r2, [r4, #32]
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	d810      	bhi.n	8004f30 <HAL_RCC_OscConfig+0x280>
 8004f0e:	686b      	ldr	r3, [r5, #4]
 8004f10:	2a20      	cmp	r2, #32
 8004f12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f16:	bf0c      	ite	eq
 8004f18:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004f1c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004f20:	606b      	str	r3, [r5, #4]
 8004f22:	e6fb      	b.n	8004d1c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f24:	f7fd ffd4 	bl	8002ed0 <HAL_GetTick>
 8004f28:	1b80      	subs	r0, r0, r6
 8004f2a:	2802      	cmp	r0, #2
 8004f2c:	d9e5      	bls.n	8004efa <HAL_RCC_OscConfig+0x24a>
 8004f2e:	e750      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f30:	68eb      	ldr	r3, [r5, #12]
 8004f32:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004f36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f3a:	60eb      	str	r3, [r5, #12]
 8004f3c:	e6ee      	b.n	8004d1c <HAL_RCC_OscConfig+0x6c>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
 8004f44:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f50:	f7fd ffbe 	bl	8002ed0 <HAL_GetTick>
 8004f54:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	05d8      	lsls	r0, r3, #23
 8004f5a:	f57f aedf 	bpl.w	8004d1c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f5e:	f7fd ffb7 	bl	8002ed0 <HAL_GetTick>
 8004f62:	1b80      	subs	r0, r0, r6
 8004f64:	2802      	cmp	r0, #2
 8004f66:	d9f6      	bls.n	8004f56 <HAL_RCC_OscConfig+0x2a6>
 8004f68:	e733      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f6a:	6963      	ldr	r3, [r4, #20]
 8004f6c:	4da3      	ldr	r5, [pc, #652]	@ (80051fc <HAL_RCC_OscConfig+0x54c>)
 8004f6e:	b183      	cbz	r3, 8004f92 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8004f70:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004f78:	f7fd ffaa 	bl	8002ed0 <HAL_GetTick>
 8004f7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f7e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004f80:	079b      	lsls	r3, r3, #30
 8004f82:	f53f aecf 	bmi.w	8004d24 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f86:	f7fd ffa3 	bl	8002ed0 <HAL_GetTick>
 8004f8a:	1b80      	subs	r0, r0, r6
 8004f8c:	2802      	cmp	r0, #2
 8004f8e:	d9f6      	bls.n	8004f7e <HAL_RCC_OscConfig+0x2ce>
 8004f90:	e71f      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8004f92:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004f9a:	f7fd ff99 	bl	8002ed0 <HAL_GetTick>
 8004f9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fa0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004fa2:	079f      	lsls	r7, r3, #30
 8004fa4:	f57f aebe 	bpl.w	8004d24 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fd ff92 	bl	8002ed0 <HAL_GetTick>
 8004fac:	1b80      	subs	r0, r0, r6
 8004fae:	2802      	cmp	r0, #2
 8004fb0:	d9f6      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x2f0>
 8004fb2:	e70e      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fb4:	69a3      	ldr	r3, [r4, #24]
 8004fb6:	4d91      	ldr	r5, [pc, #580]	@ (80051fc <HAL_RCC_OscConfig+0x54c>)
 8004fb8:	b183      	cbz	r3, 8004fdc <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fc0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004fc2:	f7fd ff85 	bl	8002ed0 <HAL_GetTick>
 8004fc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	0498      	lsls	r0, r3, #18
 8004fcc:	f53f aeae 	bmi.w	8004d2c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd0:	f7fd ff7e 	bl	8002ed0 <HAL_GetTick>
 8004fd4:	1b80      	subs	r0, r0, r6
 8004fd6:	2802      	cmp	r0, #2
 8004fd8:	d9f6      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x318>
 8004fda:	e6fa      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fe2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004fe4:	f7fd ff74 	bl	8002ed0 <HAL_GetTick>
 8004fe8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	0499      	lsls	r1, r3, #18
 8004fee:	f57f ae9d 	bpl.w	8004d2c <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff2:	f7fd ff6d 	bl	8002ed0 <HAL_GetTick>
 8004ff6:	1b80      	subs	r0, r0, r6
 8004ff8:	2802      	cmp	r0, #2
 8004ffa:	d9f6      	bls.n	8004fea <HAL_RCC_OscConfig+0x33a>
 8004ffc:	e6e9      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fd ff67 	bl	8002ed0 <HAL_GetTick>
 8005002:	1b80      	subs	r0, r0, r6
 8005004:	2864      	cmp	r0, #100	@ 0x64
 8005006:	f67f ae9c 	bls.w	8004d42 <HAL_RCC_OscConfig+0x92>
 800500a:	e6e2      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500c:	b9b3      	cbnz	r3, 800503c <HAL_RCC_OscConfig+0x38c>
 800500e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	672b      	str	r3, [r5, #112]	@ 0x70
 800501a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005022:	f7fd ff55 	bl	8002ed0 <HAL_GetTick>
 8005026:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005028:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800502a:	0798      	lsls	r0, r3, #30
 800502c:	f57f aea0 	bpl.w	8004d70 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fd ff4e 	bl	8002ed0 <HAL_GetTick>
 8005034:	1b80      	subs	r0, r0, r6
 8005036:	42b8      	cmp	r0, r7
 8005038:	d9f6      	bls.n	8005028 <HAL_RCC_OscConfig+0x378>
 800503a:	e6ca      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503c:	2b05      	cmp	r3, #5
 800503e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005040:	d103      	bne.n	800504a <HAL_RCC_OscConfig+0x39a>
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	672b      	str	r3, [r5, #112]	@ 0x70
 8005048:	e684      	b.n	8004d54 <HAL_RCC_OscConfig+0xa4>
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	672b      	str	r3, [r5, #112]	@ 0x70
 8005050:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005052:	f023 0304 	bic.w	r3, r3, #4
 8005056:	e680      	b.n	8004d5a <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fd ff3a 	bl	8002ed0 <HAL_GetTick>
 800505c:	1b40      	subs	r0, r0, r5
 800505e:	42b8      	cmp	r0, r7
 8005060:	f67f ae82 	bls.w	8004d68 <HAL_RCC_OscConfig+0xb8>
 8005064:	e6b5      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005066:	4d65      	ldr	r5, [pc, #404]	@ (80051fc <HAL_RCC_OscConfig+0x54c>)
 8005068:	692b      	ldr	r3, [r5, #16]
 800506a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800506e:	2b18      	cmp	r3, #24
 8005070:	d078      	beq.n	8005164 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 8005072:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005074:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8005076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800507a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800507c:	d165      	bne.n	800514a <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800507e:	f7fd ff27 	bl	8002ed0 <HAL_GetTick>
 8005082:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	0199      	lsls	r1, r3, #6
 8005088:	d459      	bmi.n	800513e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800508c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800508e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	4313      	orrs	r3, r2
 8005098:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800509a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800509e:	62ab      	str	r3, [r5, #40]	@ 0x28
 80050a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80050a4:	3b01      	subs	r3, #1
 80050a6:	3a01      	subs	r2, #1
 80050a8:	025b      	lsls	r3, r3, #9
 80050aa:	0412      	lsls	r2, r2, #16
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80050b2:	4313      	orrs	r3, r2
 80050b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80050b6:	3a01      	subs	r2, #1
 80050b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050bc:	4313      	orrs	r3, r2
 80050be:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0612      	lsls	r2, r2, #24
 80050c4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80050c8:	4313      	orrs	r3, r2
 80050ca:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80050cc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050d4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80050d6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80050d8:	f36f 03cf 	bfc	r3, #3, #13
 80050dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050e0:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80050e4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80050e6:	f023 030c 	bic.w	r3, r3, #12
 80050ea:	4313      	orrs	r3, r2
 80050ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80050f0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80050f2:	f023 0302 	bic.w	r3, r3, #2
 80050f6:	4313      	orrs	r3, r2
 80050f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005102:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005108:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800510a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800510c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005110:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8005112:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005120:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005122:	f7fd fed5 	bl	8002ed0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005126:	4d35      	ldr	r5, [pc, #212]	@ (80051fc <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 8005128:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	019a      	lsls	r2, r3, #6
 800512e:	f53f ae23 	bmi.w	8004d78 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005132:	f7fd fecd 	bl	8002ed0 <HAL_GetTick>
 8005136:	1b00      	subs	r0, r0, r4
 8005138:	2802      	cmp	r0, #2
 800513a:	d9f6      	bls.n	800512a <HAL_RCC_OscConfig+0x47a>
 800513c:	e649      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513e:	f7fd fec7 	bl	8002ed0 <HAL_GetTick>
 8005142:	1b80      	subs	r0, r0, r6
 8005144:	2802      	cmp	r0, #2
 8005146:	d99d      	bls.n	8005084 <HAL_RCC_OscConfig+0x3d4>
 8005148:	e643      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800514a:	f7fd fec1 	bl	8002ed0 <HAL_GetTick>
 800514e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	019b      	lsls	r3, r3, #6
 8005154:	f57f ae10 	bpl.w	8004d78 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd feba 	bl	8002ed0 <HAL_GetTick>
 800515c:	1b00      	subs	r0, r0, r4
 800515e:	2802      	cmp	r0, #2
 8005160:	d9f6      	bls.n	8005150 <HAL_RCC_OscConfig+0x4a0>
 8005162:	e636      	b.n	8004dd2 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005164:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005166:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005168:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516a:	f43f ae1a 	beq.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005172:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005174:	4281      	cmp	r1, r0
 8005176:	f47f ae14 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800517a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005180:	428a      	cmp	r2, r1
 8005182:	f47f ae0e 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005186:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005188:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800518c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800518e:	4291      	cmp	r1, r2
 8005190:	f47f ae07 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005194:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005196:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800519a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800519c:	4291      	cmp	r1, r2
 800519e:	f47f ae00 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80051a4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80051a8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051aa:	4291      	cmp	r1, r2
 80051ac:	f47f adf9 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051b0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80051b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80051b6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051b8:	4293      	cmp	r3, r2
 80051ba:	f47f adf2 	bne.w	8004da2 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051be:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051c0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051c2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	f43f add6 	beq.w	8004d78 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 80051cc:	4d0b      	ldr	r5, [pc, #44]	@ (80051fc <HAL_RCC_OscConfig+0x54c>)
 80051ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80051d6:	f7fd fe7b 	bl	8002ed0 <HAL_GetTick>
 80051da:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051dc:	f7fd fe78 	bl	8002ed0 <HAL_GetTick>
 80051e0:	42b0      	cmp	r0, r6
 80051e2:	d0fb      	beq.n	80051dc <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80051e6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80051e8:	f36f 03cf 	bfc	r3, #3, #13
 80051ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051f0:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80051f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80051fa:	e5bd      	b.n	8004d78 <HAL_RCC_OscConfig+0xc8>
 80051fc:	58024400 	.word	0x58024400

08005200 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005200:	4b49      	ldr	r3, [pc, #292]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x128>)
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8005208:	2a10      	cmp	r2, #16
{
 800520a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800520c:	f000 8088 	beq.w	8005320 <HAL_RCC_GetSysClockFreq+0x120>
 8005210:	2a18      	cmp	r2, #24
 8005212:	d00c      	beq.n	800522e <HAL_RCC_GetSysClockFreq+0x2e>
 8005214:	2a00      	cmp	r2, #0
 8005216:	f040 8085 	bne.w	8005324 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4843      	ldr	r0, [pc, #268]	@ (800532c <HAL_RCC_GetSysClockFreq+0x12c>)
 800521e:	f012 0f20 	tst.w	r2, #32
 8005222:	d003      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800522a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800522c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800522e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005230:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005232:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8005234:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005238:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800523c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800523e:	d0f5      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005240:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005244:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005248:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800524c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005250:	4362      	muls	r2, r4
 8005252:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 8005256:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800525c:	ee06 2a90 	vmov	s13, r2
 8005260:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8005264:	d04e      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x104>
 8005266:	2902      	cmp	r1, #2
 8005268:	d03e      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xe8>
 800526a:	2900      	cmp	r1, #0
 800526c:	d14a      	bne.n	8005304 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d527      	bpl.n	80052c4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005278:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800527e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005284:	ee07 2a90 	vmov	s15, r2
 8005288:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800528c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005290:	ee07 3a10 	vmov	s14, r3
 8005294:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005298:	ee37 7a26 	vadd.f32	s14, s14, s13
 800529c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80052a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052a4:	4b20      	ldr	r3, [pc, #128]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x128>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80052ac:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052ae:	ee07 3a10 	vmov	s14, r3
 80052b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80052b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80052ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80052be:	ee17 0a90 	vmov	r0, s15
 80052c2:	e7b3      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80052da:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005330 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052de:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80052e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 80052e6:	e7dd      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 80052fe:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8005334 <HAL_RCC_GetSysClockFreq+0x134>
 8005302:	e7ec      	b.n	80052de <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee77 7a86 	vadd.f32	s15, s15, s12
 800531a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8005338 <HAL_RCC_GetSysClockFreq+0x138>
 800531e:	e7de      	b.n	80052de <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005320:	4806      	ldr	r0, [pc, #24]	@ (800533c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005322:	e783      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005324:	4806      	ldr	r0, [pc, #24]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x140>)
 8005326:	e781      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x2c>
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	4c742400 	.word	0x4c742400
 8005334:	4bbebc20 	.word	0x4bbebc20
 8005338:	4a742400 	.word	0x4a742400
 800533c:	017d7840 	.word	0x017d7840
 8005340:	003d0900 	.word	0x003d0900

08005344 <HAL_RCC_ClockConfig>:
{
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800534a:	4604      	mov	r4, r0
 800534c:	b910      	cbnz	r0, 8005354 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800534e:	2001      	movs	r0, #1
}
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4a88      	ldr	r2, [pc, #544]	@ (8005578 <HAL_RCC_ClockConfig+0x234>)
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	428b      	cmp	r3, r1
 800535e:	f0c0 8093 	bcc.w	8005488 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	075f      	lsls	r7, r3, #29
 8005366:	f100 809b 	bmi.w	80054a0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536a:	071e      	lsls	r6, r3, #28
 800536c:	d50b      	bpl.n	8005386 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800536e:	4983      	ldr	r1, [pc, #524]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 8005370:	6960      	ldr	r0, [r4, #20]
 8005372:	69ca      	ldr	r2, [r1, #28]
 8005374:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005378:	4290      	cmp	r0, r2
 800537a:	d904      	bls.n	8005386 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800537c:	69ca      	ldr	r2, [r1, #28]
 800537e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005382:	4302      	orrs	r2, r0
 8005384:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005386:	06d8      	lsls	r0, r3, #27
 8005388:	d50b      	bpl.n	80053a2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800538a:	497c      	ldr	r1, [pc, #496]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 800538c:	69a0      	ldr	r0, [r4, #24]
 800538e:	69ca      	ldr	r2, [r1, #28]
 8005390:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005394:	4290      	cmp	r0, r2
 8005396:	d904      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005398:	69ca      	ldr	r2, [r1, #28]
 800539a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800539e:	4302      	orrs	r2, r0
 80053a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053a2:	0699      	lsls	r1, r3, #26
 80053a4:	d50b      	bpl.n	80053be <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053a6:	4975      	ldr	r1, [pc, #468]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 80053a8:	69e0      	ldr	r0, [r4, #28]
 80053aa:	6a0a      	ldr	r2, [r1, #32]
 80053ac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80053b0:	4290      	cmp	r0, r2
 80053b2:	d904      	bls.n	80053be <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053b4:	6a0a      	ldr	r2, [r1, #32]
 80053b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80053ba:	4302      	orrs	r2, r0
 80053bc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053be:	079a      	lsls	r2, r3, #30
 80053c0:	d50b      	bpl.n	80053da <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053c2:	496e      	ldr	r1, [pc, #440]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 80053c4:	68e0      	ldr	r0, [r4, #12]
 80053c6:	698a      	ldr	r2, [r1, #24]
 80053c8:	f002 020f 	and.w	r2, r2, #15
 80053cc:	4290      	cmp	r0, r2
 80053ce:	d904      	bls.n	80053da <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	698a      	ldr	r2, [r1, #24]
 80053d2:	f022 020f 	bic.w	r2, r2, #15
 80053d6:	4302      	orrs	r2, r0
 80053d8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053da:	07df      	lsls	r7, r3, #31
 80053dc:	d46e      	bmi.n	80054bc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	079e      	lsls	r6, r3, #30
 80053e2:	f100 80a1 	bmi.w	8005528 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053e6:	4964      	ldr	r1, [pc, #400]	@ (8005578 <HAL_RCC_ClockConfig+0x234>)
 80053e8:	680a      	ldr	r2, [r1, #0]
 80053ea:	f002 020f 	and.w	r2, r2, #15
 80053ee:	42aa      	cmp	r2, r5
 80053f0:	f200 80a8 	bhi.w	8005544 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053f4:	0758      	lsls	r0, r3, #29
 80053f6:	f100 80b1 	bmi.w	800555c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fa:	0719      	lsls	r1, r3, #28
 80053fc:	d50b      	bpl.n	8005416 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fe:	495f      	ldr	r1, [pc, #380]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 8005400:	6960      	ldr	r0, [r4, #20]
 8005402:	69ca      	ldr	r2, [r1, #28]
 8005404:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005408:	4290      	cmp	r0, r2
 800540a:	d204      	bcs.n	8005416 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540c:	69ca      	ldr	r2, [r1, #28]
 800540e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005412:	4302      	orrs	r2, r0
 8005414:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005416:	06da      	lsls	r2, r3, #27
 8005418:	d50b      	bpl.n	8005432 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800541a:	4958      	ldr	r1, [pc, #352]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 800541c:	69a0      	ldr	r0, [r4, #24]
 800541e:	69ca      	ldr	r2, [r1, #28]
 8005420:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005424:	4290      	cmp	r0, r2
 8005426:	d204      	bcs.n	8005432 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005428:	69ca      	ldr	r2, [r1, #28]
 800542a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800542e:	4302      	orrs	r2, r0
 8005430:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005432:	069b      	lsls	r3, r3, #26
 8005434:	d50b      	bpl.n	800544e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005436:	4a51      	ldr	r2, [pc, #324]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 8005438:	69e1      	ldr	r1, [r4, #28]
 800543a:	6a13      	ldr	r3, [r2, #32]
 800543c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005440:	4299      	cmp	r1, r3
 8005442:	d204      	bcs.n	800544e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005444:	6a13      	ldr	r3, [r2, #32]
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	430b      	orrs	r3, r1
 800544c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800544e:	f7ff fed7 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8005452:	494a      	ldr	r1, [pc, #296]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 8005454:	4a4a      	ldr	r2, [pc, #296]	@ (8005580 <HAL_RCC_ClockConfig+0x23c>)
 8005456:	698b      	ldr	r3, [r1, #24]
 8005458:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800545c:	5cd3      	ldrb	r3, [r2, r3]
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005464:	698b      	ldr	r3, [r1, #24]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	4a45      	ldr	r2, [pc, #276]	@ (8005584 <HAL_RCC_ClockConfig+0x240>)
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	fa20 f303 	lsr.w	r3, r0, r3
 8005476:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8005478:	4b43      	ldr	r3, [pc, #268]	@ (8005588 <HAL_RCC_ClockConfig+0x244>)
 800547a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800547c:	4b43      	ldr	r3, [pc, #268]	@ (800558c <HAL_RCC_ClockConfig+0x248>)
}
 800547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	f7fd b8a4 	b.w	80025d0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	f023 030f 	bic.w	r3, r3, #15
 800548e:	430b      	orrs	r3, r1
 8005490:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	428b      	cmp	r3, r1
 800549a:	f47f af58 	bne.w	800534e <HAL_RCC_ClockConfig+0xa>
 800549e:	e760      	b.n	8005362 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a0:	4936      	ldr	r1, [pc, #216]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 80054a2:	6920      	ldr	r0, [r4, #16]
 80054a4:	698a      	ldr	r2, [r1, #24]
 80054a6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80054aa:	4290      	cmp	r0, r2
 80054ac:	f67f af5d 	bls.w	800536a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b0:	698a      	ldr	r2, [r1, #24]
 80054b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80054b6:	4302      	orrs	r2, r0
 80054b8:	618a      	str	r2, [r1, #24]
 80054ba:	e756      	b.n	800536a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054bc:	4b2f      	ldr	r3, [pc, #188]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 80054be:	68a1      	ldr	r1, [r4, #8]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ca:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054cc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ce:	2902      	cmp	r1, #2
 80054d0:	d11d      	bne.n	800550e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054d2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d6:	f43f af3a 	beq.w	800534e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054da:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054dc:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e0:	4f26      	ldr	r7, [pc, #152]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	f022 0207 	bic.w	r2, r2, #7
 80054e6:	430a      	orrs	r2, r1
 80054e8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 80054ea:	f7fd fcf1 	bl	8002ed0 <HAL_GetTick>
 80054ee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6862      	ldr	r2, [r4, #4]
 80054f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054f8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80054fc:	f43f af6f 	beq.w	80053de <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fd fce6 	bl	8002ed0 <HAL_GetTick>
 8005504:	1b80      	subs	r0, r0, r6
 8005506:	4540      	cmp	r0, r8
 8005508:	d9f2      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800550a:	2003      	movs	r0, #3
 800550c:	e720      	b.n	8005350 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550e:	2903      	cmp	r1, #3
 8005510:	d102      	bne.n	8005518 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005512:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005516:	e7de      	b.n	80054d6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005518:	2901      	cmp	r1, #1
 800551a:	d102      	bne.n	8005522 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800551c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005520:	e7d9      	b.n	80054d6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005522:	f012 0f04 	tst.w	r2, #4
 8005526:	e7d6      	b.n	80054d6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005528:	4914      	ldr	r1, [pc, #80]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 800552a:	68e0      	ldr	r0, [r4, #12]
 800552c:	698a      	ldr	r2, [r1, #24]
 800552e:	f002 020f 	and.w	r2, r2, #15
 8005532:	4290      	cmp	r0, r2
 8005534:	f4bf af57 	bcs.w	80053e6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	698a      	ldr	r2, [r1, #24]
 800553a:	f022 020f 	bic.w	r2, r2, #15
 800553e:	4302      	orrs	r2, r0
 8005540:	618a      	str	r2, [r1, #24]
 8005542:	e750      	b.n	80053e6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005544:	680a      	ldr	r2, [r1, #0]
 8005546:	f022 020f 	bic.w	r2, r2, #15
 800554a:	432a      	orrs	r2, r5
 800554c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	680a      	ldr	r2, [r1, #0]
 8005550:	f002 020f 	and.w	r2, r2, #15
 8005554:	42aa      	cmp	r2, r5
 8005556:	f47f aefa 	bne.w	800534e <HAL_RCC_ClockConfig+0xa>
 800555a:	e74b      	b.n	80053f4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800555c:	4907      	ldr	r1, [pc, #28]	@ (800557c <HAL_RCC_ClockConfig+0x238>)
 800555e:	6920      	ldr	r0, [r4, #16]
 8005560:	698a      	ldr	r2, [r1, #24]
 8005562:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005566:	4290      	cmp	r0, r2
 8005568:	f4bf af47 	bcs.w	80053fa <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800556c:	698a      	ldr	r2, [r1, #24]
 800556e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005572:	4302      	orrs	r2, r0
 8005574:	618a      	str	r2, [r1, #24]
 8005576:	e740      	b.n	80053fa <HAL_RCC_ClockConfig+0xb6>
 8005578:	52002000 	.word	0x52002000
 800557c:	58024400 	.word	0x58024400
 8005580:	08014510 	.word	0x08014510
 8005584:	24000070 	.word	0x24000070
 8005588:	24000074 	.word	0x24000074
 800558c:	2400007c 	.word	0x2400007c

08005590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005590:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005592:	f7ff fe35 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 8005596:	4a0b      	ldr	r2, [pc, #44]	@ (80055c4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005598:	490b      	ldr	r1, [pc, #44]	@ (80055c8 <HAL_RCC_GetHCLKFreq+0x38>)
 800559a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800559c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800559e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055b0:	5c88      	ldrb	r0, [r1, r2]
 80055b2:	4a06      	ldr	r2, [pc, #24]	@ (80055cc <HAL_RCC_GetHCLKFreq+0x3c>)
 80055b4:	f000 001f 	and.w	r0, r0, #31
 80055b8:	fa23 f000 	lsr.w	r0, r3, r0
 80055bc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055be:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <HAL_RCC_GetHCLKFreq+0x40>)
 80055c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80055c2:	bd08      	pop	{r3, pc}
 80055c4:	58024400 	.word	0x58024400
 80055c8:	08014510 	.word	0x08014510
 80055cc:	24000070 	.word	0x24000070
 80055d0:	24000074 	.word	0x24000074

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055d6:	f7ff ffdb 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80055dc:	4a05      	ldr	r2, [pc, #20]	@ (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055ea:	40d8      	lsrs	r0, r3
 80055ec:	bd08      	pop	{r3, pc}
 80055ee:	bf00      	nop
 80055f0:	58024400 	.word	0x58024400
 80055f4:	08014510 	.word	0x08014510

080055f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055fa:	f7ff ffc9 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 80055fe:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005600:	4a05      	ldr	r2, [pc, #20]	@ (8005618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005608:	5cd3      	ldrb	r3, [r2, r3]
 800560a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800560e:	40d8      	lsrs	r0, r3
 8005610:	bd08      	pop	{r3, pc}
 8005612:	bf00      	nop
 8005614:	58024400 	.word	0x58024400
 8005618:	08014510 	.word	0x08014510

0800561c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800561c:	233f      	movs	r3, #63	@ 0x3f
 800561e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005620:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_RCC_GetClockConfig+0x4c>)
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	f002 0207 	and.w	r2, r2, #7
 8005628:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8005630:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	f002 020f 	and.w	r2, r2, #15
 8005638:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005640:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005648:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005650:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005658:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800565a:	4b04      	ldr	r3, [pc, #16]	@ (800566c <HAL_RCC_GetClockConfig+0x50>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	600b      	str	r3, [r1, #0]
}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	52002000 	.word	0x52002000

08005670 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005672:	4c39      	ldr	r4, [pc, #228]	@ (8005758 <RCCEx_PLL2_Config+0xe8>)
{
 8005674:	4606      	mov	r6, r0
 8005676:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005678:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d067      	beq.n	8005752 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005688:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fd fc21 	bl	8002ed0 <HAL_GetTick>
 800568e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	011a      	lsls	r2, r3, #4
 8005694:	d449      	bmi.n	800572a <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005696:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005698:	6832      	ldr	r2, [r6, #0]
 800569a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800569e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80056a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056a4:	68b3      	ldr	r3, [r6, #8]
 80056a6:	68f2      	ldr	r2, [r6, #12]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	3a01      	subs	r2, #1
 80056ac:	025b      	lsls	r3, r3, #9
 80056ae:	0412      	lsls	r2, r2, #16
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80056b6:	4313      	orrs	r3, r2
 80056b8:	6872      	ldr	r2, [r6, #4]
 80056ba:	3a01      	subs	r2, #1
 80056bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c0:	4313      	orrs	r3, r2
 80056c2:	6932      	ldr	r2, [r6, #16]
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0612      	lsls	r2, r2, #24
 80056c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80056cc:	4313      	orrs	r3, r2
 80056ce:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056d2:	6972      	ldr	r2, [r6, #20]
 80056d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056d8:	4313      	orrs	r3, r2
 80056da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056de:	69b2      	ldr	r2, [r6, #24]
 80056e0:	f023 0320 	bic.w	r3, r3, #32
 80056e4:	4313      	orrs	r3, r2
 80056e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80056f2:	69f2      	ldr	r2, [r6, #28]
 80056f4:	f36f 03cf 	bfc	r3, #3, #13
 80056f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80056fc:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005700:	f043 0310 	orr.w	r3, r3, #16
 8005704:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005706:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005708:	b9b5      	cbnz	r5, 8005738 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800570a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800570e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005710:	4c11      	ldr	r4, [pc, #68]	@ (8005758 <RCCEx_PLL2_Config+0xe8>)
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005718:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fd fbd9 	bl	8002ed0 <HAL_GetTick>
 800571e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	d50f      	bpl.n	8005746 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 8005726:	2000      	movs	r0, #0
 8005728:	e005      	b.n	8005736 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800572a:	f7fd fbd1 	bl	8002ed0 <HAL_GetTick>
 800572e:	1bc0      	subs	r0, r0, r7
 8005730:	2802      	cmp	r0, #2
 8005732:	d9ad      	bls.n	8005690 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8005734:	2003      	movs	r0, #3
}
 8005736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005738:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800573a:	bf0c      	ite	eq
 800573c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005740:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8005744:	e7e3      	b.n	800570e <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005746:	f7fd fbc3 	bl	8002ed0 <HAL_GetTick>
 800574a:	1b40      	subs	r0, r0, r5
 800574c:	2802      	cmp	r0, #2
 800574e:	d9e7      	bls.n	8005720 <RCCEx_PLL2_Config+0xb0>
 8005750:	e7f0      	b.n	8005734 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 8005752:	2001      	movs	r0, #1
 8005754:	e7ef      	b.n	8005736 <RCCEx_PLL2_Config+0xc6>
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400

0800575c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800575e:	4c39      	ldr	r4, [pc, #228]	@ (8005844 <RCCEx_PLL3_Config+0xe8>)
{
 8005760:	4606      	mov	r6, r0
 8005762:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005764:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b03      	cmp	r3, #3
 800576c:	d067      	beq.n	800583e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005774:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005776:	f7fd fbab 	bl	8002ed0 <HAL_GetTick>
 800577a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	d449      	bmi.n	8005816 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005782:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800578a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800578e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005790:	68b3      	ldr	r3, [r6, #8]
 8005792:	68f2      	ldr	r2, [r6, #12]
 8005794:	3b01      	subs	r3, #1
 8005796:	3a01      	subs	r2, #1
 8005798:	025b      	lsls	r3, r3, #9
 800579a:	0412      	lsls	r2, r2, #16
 800579c:	b29b      	uxth	r3, r3
 800579e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80057a2:	4313      	orrs	r3, r2
 80057a4:	6872      	ldr	r2, [r6, #4]
 80057a6:	3a01      	subs	r2, #1
 80057a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ac:	4313      	orrs	r3, r2
 80057ae:	6932      	ldr	r2, [r6, #16]
 80057b0:	3a01      	subs	r2, #1
 80057b2:	0612      	lsls	r2, r2, #24
 80057b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80057b8:	4313      	orrs	r3, r2
 80057ba:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057be:	6972      	ldr	r2, [r6, #20]
 80057c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057c4:	4313      	orrs	r3, r2
 80057c6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057ca:	69b2      	ldr	r2, [r6, #24]
 80057cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80057de:	69f2      	ldr	r2, [r6, #28]
 80057e0:	f36f 03cf 	bfc	r3, #3, #13
 80057e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80057e8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80057f4:	b9b5      	cbnz	r5, 8005824 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057fc:	4c11      	ldr	r4, [pc, #68]	@ (8005844 <RCCEx_PLL3_Config+0xe8>)
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005804:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005806:	f7fd fb63 	bl	8002ed0 <HAL_GetTick>
 800580a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	d50f      	bpl.n	8005832 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 8005812:	2000      	movs	r0, #0
 8005814:	e005      	b.n	8005822 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005816:	f7fd fb5b 	bl	8002ed0 <HAL_GetTick>
 800581a:	1bc0      	subs	r0, r0, r7
 800581c:	2802      	cmp	r0, #2
 800581e:	d9ad      	bls.n	800577c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8005820:	2003      	movs	r0, #3
}
 8005822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8005824:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005826:	bf0c      	ite	eq
 8005828:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800582c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8005830:	e7e3      	b.n	80057fa <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005832:	f7fd fb4d 	bl	8002ed0 <HAL_GetTick>
 8005836:	1b40      	subs	r0, r0, r5
 8005838:	2802      	cmp	r0, #2
 800583a:	d9e7      	bls.n	800580c <RCCEx_PLL3_Config+0xb0>
 800583c:	e7f0      	b.n	8005820 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800583e:	2001      	movs	r0, #1
 8005840:	e7ef      	b.n	8005822 <RCCEx_PLL3_Config+0xc6>
 8005842:	bf00      	nop
 8005844:	58024400 	.word	0x58024400

08005848 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800584c:	6803      	ldr	r3, [r0, #0]
{
 800584e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005850:	0118      	lsls	r0, r3, #4
 8005852:	d51e      	bpl.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005854:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8005856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800585a:	d02b      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800585c:	d80f      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800585e:	b1d3      	cbz	r3, 8005896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005864:	d01d      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8005866:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	05d9      	lsls	r1, r3, #23
 800586c:	d551      	bpl.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 800586e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8005870:	2b04      	cmp	r3, #4
 8005872:	d84d      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8005874:	e8df f003 	tbb	[pc, r3]
 8005878:	29463f24 	.word	0x29463f24
 800587c:	29          	.byte	0x29
 800587d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800587e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005882:	d1f0      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005884:	4a85      	ldr	r2, [pc, #532]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005886:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8005888:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800588a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800588e:	430b      	orrs	r3, r1
 8005890:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005892:	2600      	movs	r6, #0
 8005894:	e7e8      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005896:	4a81      	ldr	r2, [pc, #516]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005898:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800589a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800589e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80058a0:	e7f0      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a2:	2102      	movs	r1, #2
 80058a4:	f105 0008 	add.w	r0, r5, #8
 80058a8:	f7ff fee2 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ac:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1da      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80058b2:	e7e7      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058b4:	2102      	movs	r1, #2
 80058b6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80058ba:	f7ff ff4f 	bl	800575c <RCCEx_PLL3_Config>
 80058be:	e7f5      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c0:	4a76      	ldr	r2, [pc, #472]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058c2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80058c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 80058ca:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 80058cc:	bb1c      	cbnz	r4, 8005916 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ce:	4a73      	ldr	r2, [pc, #460]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058d0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80058d2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	430b      	orrs	r3, r1
 80058da:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	059a      	lsls	r2, r3, #22
 80058e0:	d528      	bpl.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 80058e2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80058e4:	2b80      	cmp	r3, #128	@ 0x80
 80058e6:	d043      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80058e8:	d817      	bhi.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80058ea:	b3a3      	cbz	r3, 8005956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80058ec:	2b40      	cmp	r3, #64	@ 0x40
 80058ee:	d038      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80058f0:	2601      	movs	r6, #1
 80058f2:	4634      	mov	r4, r6
 80058f4:	e01e      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f6:	2100      	movs	r1, #0
 80058f8:	f105 0008 	add.w	r0, r5, #8
 80058fc:	f7ff feb8 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005900:	4604      	mov	r4, r0
        break;
 8005902:	e7e3      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005904:	2100      	movs	r1, #0
 8005906:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800590a:	f7ff ff27 	bl	800575c <RCCEx_PLL3_Config>
 800590e:	e7f7      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005910:	2601      	movs	r6, #1
 8005912:	4634      	mov	r4, r6
 8005914:	e7e2      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x94>
      status = ret;
 8005916:	4626      	mov	r6, r4
 8005918:	e7e0      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 800591a:	2bc0      	cmp	r3, #192	@ 0xc0
 800591c:	d002      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800591e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005922:	d1e5      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 8005924:	bb54      	cbnz	r4, 800597c <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005926:	4a5d      	ldr	r2, [pc, #372]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005928:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800592a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800592c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8005930:	430b      	orrs	r3, r1
 8005932:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	055b      	lsls	r3, r3, #21
 8005938:	d531      	bpl.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 800593a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 800593e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005942:	d049      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005944:	d81c      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d039      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x176>
 800594a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800594e:	d03c      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005950:	2601      	movs	r6, #1
 8005952:	4634      	mov	r4, r6
 8005954:	e023      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005956:	4a51      	ldr	r2, [pc, #324]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005958:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800595a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005960:	e7e0      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005962:	2100      	movs	r1, #0
 8005964:	f105 0008 	add.w	r0, r5, #8
 8005968:	f7ff fe82 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800596c:	4604      	mov	r4, r0
        break;
 800596e:	e7d9      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005970:	2100      	movs	r1, #0
 8005972:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005976:	f7ff fef1 	bl	800575c <RCCEx_PLL3_Config>
 800597a:	e7f7      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x124>
      status = ret;
 800597c:	4626      	mov	r6, r4
 800597e:	e7d9      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005980:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005984:	d002      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8005986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800598a:	d1e1      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 800598c:	bb54      	cbnz	r4, 80059e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800598e:	4a43      	ldr	r2, [pc, #268]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005990:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8005994:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005996:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800599a:	430b      	orrs	r3, r1
 800599c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800599e:	682b      	ldr	r3, [r5, #0]
 80059a0:	051f      	lsls	r7, r3, #20
 80059a2:	d530      	bpl.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 80059a4:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 80059a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ac:	d045      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80059ae:	d81b      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80059b0:	b3b3      	cbz	r3, 8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80059b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059b6:	d039      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80059b8:	2601      	movs	r6, #1
 80059ba:	4634      	mov	r4, r6
 80059bc:	e023      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059be:	4a37      	ldr	r2, [pc, #220]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059c0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80059c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80059c8:	e7e0      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ca:	2100      	movs	r1, #0
 80059cc:	f105 0008 	add.w	r0, r5, #8
 80059d0:	f7ff fe4e 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d4:	4604      	mov	r4, r0
        break;
 80059d6:	e7d9      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d8:	2100      	movs	r1, #0
 80059da:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80059de:	f7ff febd 	bl	800575c <RCCEx_PLL3_Config>
 80059e2:	e7f7      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      status = ret;
 80059e4:	4626      	mov	r6, r4
 80059e6:	e7da      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 80059e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059ec:	d002      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80059ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059f2:	d1e1      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 80059f4:	bb3c      	cbnz	r4, 8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059f6:	4a29      	ldr	r2, [pc, #164]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059f8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 80059fc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80059fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005a02:	430b      	orrs	r3, r1
 8005a04:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	0198      	lsls	r0, r3, #6
 8005a0a:	d528      	bpl.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8005a0c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d03b      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005a12:	d81a      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a14:	b1db      	cbz	r3, 8005a4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d031      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8005a1a:	2601      	movs	r6, #1
 8005a1c:	4634      	mov	r4, r6
 8005a1e:	e01e      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a20:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a22:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005a2a:	e7e3      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	f105 0008 	add.w	r0, r5, #8
 8005a32:	f7ff fe1d 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a36:	4604      	mov	r4, r0
        break;
 8005a38:	e7dc      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005a40:	f7ff fe8c 	bl	800575c <RCCEx_PLL3_Config>
 8005a44:	e7f7      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      status = ret;
 8005a46:	4626      	mov	r6, r4
 8005a48:	e7dd      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 8005a4a:	2b30      	cmp	r3, #48	@ 0x30
 8005a4c:	d1e5      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8005a4e:	bb1c      	cbnz	r4, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a50:	4a12      	ldr	r2, [pc, #72]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a52:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005a54:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005a56:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	04d9      	lsls	r1, r3, #19
 8005a62:	d52c      	bpl.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a64:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6a:	d074      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005a6c:	d818      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d064      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a76:	d067      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005a78:	2601      	movs	r6, #1
 8005a7a:	4634      	mov	r4, r6
 8005a7c:	e01f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7e:	4a07      	ldr	r2, [pc, #28]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a80:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005a88:	e7e1      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	f105 0008 	add.w	r0, r5, #8
 8005a90:	f7ff fdee 	bl	8005670 <RCCEx_PLL2_Config>
 8005a94:	4604      	mov	r4, r0
        break;
 8005a96:	e7da      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x206>
      status = ret;
 8005a98:	4626      	mov	r6, r4
 8005a9a:	e7e0      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x216>
 8005a9c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8005aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aa4:	d002      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aaa:	d1e5      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8005aac:	2c00      	cmp	r4, #0
 8005aae:	d158      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ab0:	4a9d      	ldr	r2, [pc, #628]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005ab2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8005ab4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	049a      	lsls	r2, r3, #18
 8005ac2:	d50b      	bpl.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aca:	d064      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005acc:	d84b      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d051      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad6:	d057      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8005ad8:	2601      	movs	r6, #1
 8005ada:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	045b      	lsls	r3, r3, #17
 8005ae0:	d50c      	bpl.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ae2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aea:	d075      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8005aec:	d85b      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d061      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af6:	d068      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005af8:	2601      	movs	r6, #1
 8005afa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	041f      	lsls	r7, r3, #16
 8005b00:	d511      	bpl.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8005b02:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b08:	d06e      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b0e:	d071      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d176      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if (ret == HAL_OK)
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d177      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b18:	4a83      	ldr	r2, [pc, #524]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b1a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8005b1c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005b1e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005b22:	430b      	orrs	r3, r1
 8005b24:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	01d8      	lsls	r0, r3, #7
 8005b2a:	d57d      	bpl.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->FmcClockSelection)
 8005b2c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	f200 80bf 	bhi.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8005b34:	e8df f003 	tbb	[pc, r3]
 8005b38:	6fb66a6f 	.word	0x6fb66a6f
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005b46:	e7b1      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f105 0008 	add.w	r0, r5, #8
 8005b4e:	f7ff fd8f 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b52:	4604      	mov	r4, r0
        break;
 8005b54:	e7aa      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b56:	2100      	movs	r1, #0
 8005b58:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005b5c:	f7ff fdfe 	bl	800575c <RCCEx_PLL3_Config>
 8005b60:	e7f7      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      status = ret;
 8005b62:	4626      	mov	r6, r4
 8005b64:	e7ab      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b6a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005b6e:	d002      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b74:	d1b0      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8005b76:	b9a4      	cbnz	r4, 8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b78:	4a6b      	ldr	r2, [pc, #428]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005b7a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8005b7c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005b7e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005b82:	430b      	orrs	r3, r1
 8005b84:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b86:	e7a9      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	f105 0008 	add.w	r0, r5, #8
 8005b8e:	f7ff fd6f 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b92:	4604      	mov	r4, r0
        break;
 8005b94:	e7ef      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x32e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b96:	2101      	movs	r1, #1
 8005b98:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005b9c:	f7ff fdde 	bl	800575c <RCCEx_PLL3_Config>
 8005ba0:	e7f7      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      status = ret;
 8005ba2:	4626      	mov	r6, r4
 8005ba4:	e79a      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ba6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005baa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005bae:	d002      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005bb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bb4:	d1a0      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8005bb6:	b9ac      	cbnz	r4, 8005be4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bb8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005bba:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 8005bbe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005bc0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc8:	e798      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bca:	2101      	movs	r1, #1
 8005bcc:	f105 0008 	add.w	r0, r5, #8
 8005bd0:	f7ff fd4e 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bd4:	4604      	mov	r4, r0
        break;
 8005bd6:	e7ee      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bd8:	2101      	movs	r1, #1
 8005bda:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005bde:	f7ff fdbd 	bl	800575c <RCCEx_PLL3_Config>
 8005be2:	e7f7      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      status = ret;
 8005be4:	4626      	mov	r6, r4
 8005be6:	e789      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4a4f      	ldr	r2, [pc, #316]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005bea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005bf2:	e78f      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	f105 0008 	add.w	r0, r5, #8
 8005bfa:	f7ff fd39 	bl	8005670 <RCCEx_PLL2_Config>
 8005bfe:	4604      	mov	r4, r0
        break;
 8005c00:	e788      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8005c02:	2601      	movs	r6, #1
 8005c04:	4634      	mov	r4, r6
 8005c06:	e78e      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      status = ret;
 8005c08:	4626      	mov	r6, r4
 8005c0a:	e78c      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4a46      	ldr	r2, [pc, #280]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005c0e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005c16:	2c00      	cmp	r4, #0
 8005c18:	d14e      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x470>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c1a:	4a43      	ldr	r2, [pc, #268]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005c1c:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8005c1e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005c20:	f023 0303 	bic.w	r3, r3, #3
 8005c24:	430b      	orrs	r3, r1
 8005c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	0259      	lsls	r1, r3, #9
 8005c2c:	d54e      	bpl.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x484>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2e:	4f3f      	ldr	r7, [pc, #252]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c36:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005c38:	f7fd f94a 	bl	8002ed0 <HAL_GetTick>
 8005c3c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	05da      	lsls	r2, r3, #23
 8005c42:	d53b      	bpl.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d175      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c48:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005c4a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8005c4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c50:	4042      	eors	r2, r0
 8005c52:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8005c56:	d00b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c5a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c5c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c60:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005c64:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005c68:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005c6c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005c6e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c70:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005c74:	d042      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c76:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8005c7a:	492b      	ldr	r1, [pc, #172]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005c7c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005c80:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005c84:	d14b      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
 8005c86:	6908      	ldr	r0, [r1, #16]
 8005c88:	4a29      	ldr	r2, [pc, #164]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8005c8a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8005c8e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005c92:	4302      	orrs	r2, r0
 8005c94:	610a      	str	r2, [r1, #16]
 8005c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9a:	4a23      	ldr	r2, [pc, #140]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005c9c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca2:	e013      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x484>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	f105 0008 	add.w	r0, r5, #8
 8005caa:	f7ff fce1 	bl	8005670 <RCCEx_PLL2_Config>
 8005cae:	4604      	mov	r4, r0
        break;
 8005cb0:	e7b1      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch (PeriphClkInit->FmcClockSelection)
 8005cb2:	2601      	movs	r6, #1
 8005cb4:	4634      	mov	r4, r6
 8005cb6:	e7b7      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      status = ret;
 8005cb8:	4626      	mov	r6, r4
 8005cba:	e7b5      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cbc:	f7fd f908 	bl	8002ed0 <HAL_GetTick>
 8005cc0:	eba0 0008 	sub.w	r0, r0, r8
 8005cc4:	2864      	cmp	r0, #100	@ 0x64
 8005cc6:	d9ba      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8005cc8:	2603      	movs	r6, #3
 8005cca:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	07d8      	lsls	r0, r3, #31
 8005cd0:	d509      	bpl.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cd2:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d045      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005cd8:	d82e      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d032      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d039      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8005ce2:	2601      	movs	r6, #1
 8005ce4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	0799      	lsls	r1, r3, #30
 8005cea:	d551      	bpl.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cec:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8005cee:	2b05      	cmp	r3, #5
 8005cf0:	d864      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x574>
 8005cf2:	e8df f003 	tbb	[pc, r3]
 8005cf6:	3f45      	.short	0x3f45
 8005cf8:	4545455d 	.word	0x4545455d
        tickstart = HAL_GetTick();
 8005cfc:	f7fd f8e8 	bl	8002ed0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d00:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        tickstart = HAL_GetTick();
 8005d04:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d06:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d0a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	d4b1      	bmi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d12:	f7fd f8dd 	bl	8002ed0 <HAL_GetTick>
 8005d16:	1bc0      	subs	r0, r0, r7
 8005d18:	4548      	cmp	r0, r9
 8005d1a:	d9f6      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005d1c:	e7d4      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d1e:	690a      	ldr	r2, [r1, #16]
 8005d20:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005d24:	e7b6      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
 8005d2c:	58024800 	.word	0x58024800
 8005d30:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8005d34:	4626      	mov	r6, r4
 8005d36:	e7c9      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x484>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d38:	f023 0208 	bic.w	r2, r3, #8
 8005d3c:	2a20      	cmp	r2, #32
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005d40:	2b18      	cmp	r3, #24
 8005d42:	d1ce      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    if (ret == HAL_OK)
 8005d44:	b9a4      	cbnz	r4, 8005d70 <HAL_RCCEx_PeriphCLKConfig+0x528>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d46:	4a20      	ldr	r2, [pc, #128]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005d48:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8005d4a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005d4c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d54:	e7c7      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d56:	2101      	movs	r1, #1
 8005d58:	f105 0008 	add.w	r0, r5, #8
 8005d5c:	f7ff fc88 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d60:	4604      	mov	r4, r0
        break;
 8005d62:	e7ef      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d64:	2101      	movs	r1, #1
 8005d66:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005d6a:	f7ff fcf7 	bl	800575c <RCCEx_PLL3_Config>
 8005d6e:	e7f7      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x518>
      status = ret;
 8005d70:	4626      	mov	r6, r4
 8005d72:	e7b8      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d74:	2101      	movs	r1, #1
 8005d76:	f105 0008 	add.w	r0, r5, #8
 8005d7a:	f7ff fc79 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005d80:	b9fc      	cbnz	r4, 8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d82:	4a11      	ldr	r2, [pc, #68]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8005d84:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8005d86:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005d88:	f023 0307 	bic.w	r3, r3, #7
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	075a      	lsls	r2, r3, #29
 8005d94:	d52b      	bpl.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d96:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	f200 816e 	bhi.w	800607c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8005da0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005da4:	0014001a 	.word	0x0014001a
 8005da8:	001a0166 	.word	0x001a0166
 8005dac:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db0:	2101      	movs	r1, #1
 8005db2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005db6:	f7ff fcd1 	bl	800575c <RCCEx_PLL3_Config>
 8005dba:	e7e0      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005dbc:	2601      	movs	r6, #1
 8005dbe:	4634      	mov	r4, r6
 8005dc0:	e7e6      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x548>
      status = ret;
 8005dc2:	4626      	mov	r6, r4
 8005dc4:	e7e4      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dcc:	2101      	movs	r1, #1
 8005dce:	f105 0008 	add.w	r0, r5, #8
 8005dd2:	f7ff fc4d 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005dd8:	2c00      	cmp	r4, #0
 8005dda:	f040 8152 	bne.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dde:	4aaa      	ldr	r2, [pc, #680]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005de0:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8005de4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	069b      	lsls	r3, r3, #26
 8005df2:	d510      	bpl.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005df4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dfc:	f000 8160 	beq.w	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8005e00:	f200 8144 	bhi.w	800608c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 814a 	beq.w	800609e <HAL_RCCEx_PeriphCLKConfig+0x856>
 8005e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e0e:	f000 8150 	beq.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8005e12:	2601      	movs	r6, #1
 8005e14:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	065f      	lsls	r7, r3, #25
 8005e1a:	d510      	bpl.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e1c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e24:	f000 816e 	beq.w	8006104 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005e28:	f200 8152 	bhi.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8158 	beq.w	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e36:	f000 815e 	beq.w	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8005e3a:	2601      	movs	r6, #1
 8005e3c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	0618      	lsls	r0, r3, #24
 8005e42:	d510      	bpl.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e44:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8005e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e4c:	f000 817c 	beq.w	8006148 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8005e50:	f200 8160 	bhi.w	8006114 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8166 	beq.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5e:	f000 816c 	beq.w	800613a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8005e62:	2601      	movs	r6, #1
 8005e64:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	0719      	lsls	r1, r3, #28
 8005e6a:	d514      	bpl.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e6c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e74:	d107      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e76:	2102      	movs	r1, #2
 8005e78:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005e7c:	f7ff fc6e 	bl	800575c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005e80:	2800      	cmp	r0, #0
 8005e82:	bf18      	it	ne
 8005e84:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e86:	4a80      	ldr	r2, [pc, #512]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005e88:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8005e8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005e8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005e92:	430b      	orrs	r3, r1
 8005e94:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	06da      	lsls	r2, r3, #27
 8005e9a:	d514      	bpl.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e9c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005eac:	f7ff fc56 	bl	800575c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	bf18      	it	ne
 8005eb4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005eb6:	4a74      	ldr	r2, [pc, #464]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005eb8:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8005ebc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	d51b      	bpl.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    switch (PeriphClkInit->AdcClockSelection)
 8005ecc:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8005ed0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005ed4:	f000 8140 	beq.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005ed8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005edc:	d007      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8005ede:	2900      	cmp	r1, #0
 8005ee0:	f040 8140 	bne.w	8006164 <HAL_RCCEx_PeriphCLKConfig+0x91c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee4:	f105 0008 	add.w	r0, r5, #8
 8005ee8:	f7ff fbc2 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005eec:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8005eee:	2c00      	cmp	r4, #0
 8005ef0:	f040 813b 	bne.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef4:	4a64      	ldr	r2, [pc, #400]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005ef6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8005efa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005efc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	035f      	lsls	r7, r3, #13
 8005f08:	d50f      	bpl.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch (PeriphClkInit->UsbClockSelection)
 8005f0a:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8005f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f12:	f000 813b 	beq.w	800618c <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005f16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f1a:	f000 812d 	beq.w	8006178 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8005f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f22:	f000 8124 	beq.w	800616e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005f26:	2601      	movs	r6, #1
 8005f28:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	03d8      	lsls	r0, r3, #15
 8005f2e:	d509      	bpl.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005f30:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8133 	beq.w	800619e <HAL_RCCEx_PeriphCLKConfig+0x956>
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3c:	f000 813d 	beq.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005f40:	2601      	movs	r6, #1
 8005f42:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	0099      	lsls	r1, r3, #2
 8005f48:	d507      	bpl.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x712>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8005f50:	f7ff fc04 	bl	800575c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8005f54:	2800      	cmp	r0, #0
 8005f56:	bf18      	it	ne
 8005f58:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f5a:	e9d5 3100 	ldrd	r3, r1, [r5]
 8005f5e:	039a      	lsls	r2, r3, #14
 8005f60:	f140 8143 	bpl.w	80061ea <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->RngClockSelection)
 8005f64:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8005f68:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005f6c:	f000 813f 	beq.w	80061ee <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8005f70:	f200 812c 	bhi.w	80061cc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f000 812f 	beq.w	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
 8005f7a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f7c:	02df      	lsls	r7, r3, #11
 8005f7e:	d506      	bpl.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x746>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f80:	4841      	ldr	r0, [pc, #260]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f82:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8005f84:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005f86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005f8a:	4332      	orrs	r2, r6
 8005f8c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f8e:	00de      	lsls	r6, r3, #3
 8005f90:	d507      	bpl.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f92:	483d      	ldr	r0, [pc, #244]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005f94:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8005f98:	6902      	ldr	r2, [r0, #16]
 8005f9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f9e:	4332      	orrs	r2, r6
 8005fa0:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fa2:	0298      	lsls	r0, r3, #10
 8005fa4:	d506      	bpl.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fa6:	4838      	ldr	r0, [pc, #224]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fa8:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 8005faa:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005fac:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005fb0:	4332      	orrs	r2, r6
 8005fb2:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fb4:	005a      	lsls	r2, r3, #1
 8005fb6:	d509      	bpl.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x784>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb8:	4a33      	ldr	r2, [pc, #204]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fba:	6910      	ldr	r0, [r2, #16]
 8005fbc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8005fc0:	6110      	str	r0, [r2, #16]
 8005fc2:	6910      	ldr	r0, [r2, #16]
 8005fc4:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8005fc8:	4330      	orrs	r0, r6
 8005fca:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da06      	bge.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fd0:	482d      	ldr	r0, [pc, #180]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fd2:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8005fd4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005fd6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005fda:	4332      	orrs	r2, r6
 8005fdc:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fde:	021f      	lsls	r7, r3, #8
 8005fe0:	d507      	bpl.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fe2:	4a29      	ldr	r2, [pc, #164]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005fe4:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8005fe8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005fea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ff2:	07ce      	lsls	r6, r1, #31
 8005ff4:	d506      	bpl.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f105 0008 	add.w	r0, r5, #8
 8005ffc:	f7ff fb38 	bl	8005670 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006000:	4607      	mov	r7, r0
 8006002:	b900      	cbnz	r0, 8006006 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch (PeriphClkInit->RngClockSelection)
 8006004:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006006:	686b      	ldr	r3, [r5, #4]
 8006008:	079c      	lsls	r4, r3, #30
 800600a:	d506      	bpl.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800600c:	2101      	movs	r1, #1
 800600e:	f105 0008 	add.w	r0, r5, #8
 8006012:	f7ff fb2d 	bl	8005670 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006016:	4606      	mov	r6, r0
 8006018:	b900      	cbnz	r0, 800601c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 800601a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800601c:	686b      	ldr	r3, [r5, #4]
 800601e:	0758      	lsls	r0, r3, #29
 8006020:	d506      	bpl.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006022:	2102      	movs	r1, #2
 8006024:	f105 0008 	add.w	r0, r5, #8
 8006028:	f7ff fb22 	bl	8005670 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800602c:	4604      	mov	r4, r0
 800602e:	b900      	cbnz	r0, 8006032 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch (PeriphClkInit->RngClockSelection)
 8006030:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006032:	686b      	ldr	r3, [r5, #4]
 8006034:	0719      	lsls	r1, r3, #28
 8006036:	d506      	bpl.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006038:	2100      	movs	r1, #0
 800603a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800603e:	f7ff fb8d 	bl	800575c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006042:	4606      	mov	r6, r0
 8006044:	b900      	cbnz	r0, 8006048 <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch (PeriphClkInit->RngClockSelection)
 8006046:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006048:	686b      	ldr	r3, [r5, #4]
 800604a:	06da      	lsls	r2, r3, #27
 800604c:	d506      	bpl.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x814>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800604e:	2101      	movs	r1, #1
 8006050:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006054:	f7ff fb82 	bl	800575c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006058:	4604      	mov	r4, r0
 800605a:	b900      	cbnz	r0, 800605e <HAL_RCCEx_PeriphCLKConfig+0x816>
    switch (PeriphClkInit->RngClockSelection)
 800605c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800605e:	686b      	ldr	r3, [r5, #4]
 8006060:	069b      	lsls	r3, r3, #26
 8006062:	f100 80ca 	bmi.w	80061fa <HAL_RCCEx_PeriphCLKConfig+0x9b2>
  if (status == HAL_OK)
 8006066:	1e20      	subs	r0, r4, #0
 8006068:	bf18      	it	ne
 800606a:	2001      	movne	r0, #1
}
 800606c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006070:	2101      	movs	r1, #1
 8006072:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006076:	f7ff fb71 	bl	800575c <RCCEx_PLL3_Config>
 800607a:	e6ac      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800607c:	2601      	movs	r6, #1
 800607e:	4634      	mov	r4, r6
 8006080:	e6b5      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      status = ret;
 8006082:	4626      	mov	r6, r4
 8006084:	e6b3      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006086:	bf00      	nop
 8006088:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800608c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006090:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006094:	d003      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x856>
 8006096:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800609a:	f47f aeba 	bne.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (ret == HAL_OK)
 800609e:	b9ac      	cbnz	r4, 80060cc <HAL_RCCEx_PeriphCLKConfig+0x884>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a0:	4a5b      	ldr	r2, [pc, #364]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060a2:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 80060a6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80060a8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b0:	e6b1      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b2:	2100      	movs	r1, #0
 80060b4:	f105 0008 	add.w	r0, r5, #8
 80060b8:	f7ff fada 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060bc:	4604      	mov	r4, r0
        break;
 80060be:	e7ee      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x856>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060c0:	2102      	movs	r1, #2
 80060c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80060c6:	f7ff fb49 	bl	800575c <RCCEx_PLL3_Config>
 80060ca:	e7f7      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 80060cc:	4626      	mov	r6, r4
 80060ce:	e6a2      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060d0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060d4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80060d8:	d003      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80060da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060de:	f47f aeac 	bne.w	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    if (ret == HAL_OK)
 80060e2:	b9ac      	cbnz	r4, 8006110 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80060e6:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 80060ea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80060ec:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80060f0:	430b      	orrs	r3, r1
 80060f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80060f4:	e6a3      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f6:	2100      	movs	r1, #0
 80060f8:	f105 0008 	add.w	r0, r5, #8
 80060fc:	f7ff fab8 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006100:	4604      	mov	r4, r0
        break;
 8006102:	e7ee      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006104:	2102      	movs	r1, #2
 8006106:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800610a:	f7ff fb27 	bl	800575c <RCCEx_PLL3_Config>
 800610e:	e7f7      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      status = ret;
 8006110:	4626      	mov	r6, r4
 8006112:	e694      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006114:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006118:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800611c:	d003      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800611e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006122:	f47f ae9e 	bne.w	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 8006126:	b9ac      	cbnz	r4, 8006154 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006128:	4a39      	ldr	r2, [pc, #228]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800612a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800612e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006130:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006134:	430b      	orrs	r3, r1
 8006136:	6593      	str	r3, [r2, #88]	@ 0x58
 8006138:	e695      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800613a:	2100      	movs	r1, #0
 800613c:	f105 0008 	add.w	r0, r5, #8
 8006140:	f7ff fa96 	bl	8005670 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006144:	4604      	mov	r4, r0
        break;
 8006146:	e7ee      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x8de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006148:	2102      	movs	r1, #2
 800614a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800614e:	f7ff fb05 	bl	800575c <RCCEx_PLL3_Config>
 8006152:	e7f7      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      status = ret;
 8006154:	4626      	mov	r6, r4
 8006156:	e686      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006158:	2102      	movs	r1, #2
 800615a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800615e:	f7ff fafd 	bl	800575c <RCCEx_PLL3_Config>
 8006162:	e6c3      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->AdcClockSelection)
 8006164:	2601      	movs	r6, #1
 8006166:	4634      	mov	r4, r6
 8006168:	e6cc      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      status = ret;
 800616a:	4626      	mov	r6, r4
 800616c:	e6ca      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616e:	4a28      	ldr	r2, [pc, #160]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8006170:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006178:	b97c      	cbnz	r4, 800619a <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800617a:	4a25      	ldr	r2, [pc, #148]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800617c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8006180:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006182:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006186:	430b      	orrs	r3, r1
 8006188:	6553      	str	r3, [r2, #84]	@ 0x54
 800618a:	e6ce      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800618c:	2101      	movs	r1, #1
 800618e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006192:	f7ff fae3 	bl	800575c <RCCEx_PLL3_Config>
 8006196:	4604      	mov	r4, r0
        break;
 8006198:	e7ee      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x930>
      status = ret;
 800619a:	4626      	mov	r6, r4
 800619c:	e6c5      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619e:	4a1c      	ldr	r2, [pc, #112]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80061a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80061a8:	b974      	cbnz	r4, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0x980>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061aa:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80061ac:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80061ae:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80061b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061b4:	430b      	orrs	r3, r1
 80061b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061b8:	e6c4      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061ba:	2102      	movs	r1, #2
 80061bc:	f105 0008 	add.w	r0, r5, #8
 80061c0:	f7ff fa56 	bl	8005670 <RCCEx_PLL2_Config>
 80061c4:	4604      	mov	r4, r0
        break;
 80061c6:	e7ef      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80061c8:	4626      	mov	r6, r4
 80061ca:	e6bb      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->RngClockSelection)
 80061cc:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 80061d0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80061d4:	f47f aed1 	bne.w	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x732>
    if (ret == HAL_OK)
 80061d8:	2c00      	cmp	r4, #0
 80061da:	f47f aecf 	bne.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061de:	4c0c      	ldr	r4, [pc, #48]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80061e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80061e6:	4302      	orrs	r2, r0
 80061e8:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 80061ea:	4634      	mov	r4, r6
 80061ec:	e6c6      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x734>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ee:	4f08      	ldr	r7, [pc, #32]	@ (8006210 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80061f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80061f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 80061f8:	e7ee      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061fa:	2102      	movs	r1, #2
 80061fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006200:	f7ff faac 	bl	800575c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006204:	2800      	cmp	r0, #0
 8006206:	f43f af2e 	beq.w	8006066 <HAL_RCCEx_PeriphCLKConfig+0x81e>
  return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
 800620c:	e72e      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x824>
 800620e:	bf00      	nop
 8006210:	58024400 	.word	0x58024400

08006214 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006214:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006216:	f7ff f9bb 	bl	8005590 <HAL_RCC_GetHCLKFreq>
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800621c:	4a05      	ldr	r2, [pc, #20]	@ (8006234 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006224:	5cd3      	ldrb	r3, [r2, r3]
 8006226:	f003 031f 	and.w	r3, r3, #31
}
 800622a:	40d8      	lsrs	r0, r3
 800622c:	bd08      	pop	{r3, pc}
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
 8006234:	08014510 	.word	0x08014510

08006238 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006238:	494f      	ldr	r1, [pc, #316]	@ (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800623a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800623c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800623e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006240:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 8006242:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006246:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800624a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800624c:	f000 8090 	beq.w	8006370 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006250:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006254:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006258:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800625c:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006264:	4353      	muls	r3, r2
    switch (pllsource)
 8006266:	2c01      	cmp	r4, #1
 8006268:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800626c:	ee06 3a90 	vmov	s13, r3
 8006270:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006274:	d06e      	beq.n	8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8006276:	2c02      	cmp	r4, #2
 8006278:	d05e      	beq.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800627a:	2c00      	cmp	r4, #0
 800627c:	d16a      	bne.n	8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	069b      	lsls	r3, r3, #26
 8006282:	d547      	bpl.n	8006314 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006284:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006286:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006288:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800628c:	4a3b      	ldr	r2, [pc, #236]	@ (800637c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006292:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006294:	ee07 2a90 	vmov	s15, r2
 8006298:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800629c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80062a0:	ee07 3a10 	vmov	s14, r3
 80062a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80062ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062b0:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062b4:	4a30      	ldr	r2, [pc, #192]	@ (8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80062b6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80062b8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80062bc:	ee07 3a10 	vmov	s14, r3
 80062c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062cc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062d0:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062d4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80062d6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80062da:	ee07 3a10 	vmov	s14, r3
 80062de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062ee:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062f2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80062f4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80062f8:	ee06 3a90 	vmov	s13, r3
 80062fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006300:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006308:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800630c:	ee17 3a90 	vmov	r3, s15
 8006310:	6083      	str	r3, [r0, #8]
}
 8006312:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006314:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8006316:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800632e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8006332:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8006336:	e7bd      	b.n	80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006338:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800633a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006352:	e7ec      	b.n	800632e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006354:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8006356:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800635a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800636e:	e7de      	b.n	800632e <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006370:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006374:	e7cc      	b.n	8006310 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	03d09000 	.word	0x03d09000
 8006380:	4c742400 	.word	0x4c742400
 8006384:	4bbebc20 	.word	0x4bbebc20
 8006388:	4a742400 	.word	0x4a742400

0800638c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800638c:	494f      	ldr	r1, [pc, #316]	@ (80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800638e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006390:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006392:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006394:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 8006396:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800639a:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800639e:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 80063a0:	f000 8090 	beq.w	80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063a4:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80063a8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063ac:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063b0:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80063b8:	4353      	muls	r3, r2
    switch (pllsource)
 80063ba:	2c01      	cmp	r4, #1
 80063bc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063c0:	ee06 3a90 	vmov	s13, r3
 80063c4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80063c8:	d06e      	beq.n	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 80063ca:	2c02      	cmp	r4, #2
 80063cc:	d05e      	beq.n	800648c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d16a      	bne.n	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d2:	680b      	ldr	r3, [r1, #0]
 80063d4:	069b      	lsls	r3, r3, #26
 80063d6:	d547      	bpl.n	8006468 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063d8:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063dc:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80063e0:	4a3b      	ldr	r2, [pc, #236]	@ (80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e6:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e8:	ee07 2a90 	vmov	s15, r2
 80063ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80063f0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80063f4:	ee07 3a10 	vmov	s14, r3
 80063f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006400:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006404:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006408:	4a30      	ldr	r2, [pc, #192]	@ (80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800640a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800640c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006410:	ee07 3a10 	vmov	s14, r3
 8006414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006418:	ee37 7a06 	vadd.f32	s14, s14, s12
 800641c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006420:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006424:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006428:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800642a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800642e:	ee07 3a10 	vmov	s14, r3
 8006432:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006436:	ee37 7a06 	vadd.f32	s14, s14, s12
 800643a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800643e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006442:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006446:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006448:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800644c:	ee06 3a90 	vmov	s13, r3
 8006450:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006454:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006458:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800645c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006460:	ee17 3a90 	vmov	r3, s15
 8006464:	6083      	str	r3, [r0, #8]
}
 8006466:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006468:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800646a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006482:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8006486:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800648a:	e7bd      	b.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800648c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800648e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006496:	ee07 3a90 	vmov	s15, r3
 800649a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064a6:	e7ec      	b.n	8006482 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064aa:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064c2:	e7de      	b.n	8006482 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064c4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064c8:	e7cc      	b.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80064ca:	bf00      	nop
 80064cc:	58024400 	.word	0x58024400
 80064d0:	03d09000 	.word	0x03d09000
 80064d4:	4c742400 	.word	0x4c742400
 80064d8:	4bbebc20 	.word	0x4bbebc20
 80064dc:	4a742400 	.word	0x4a742400

080064e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064e0:	494f      	ldr	r1, [pc, #316]	@ (8006620 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 80064e2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064e4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80064e6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80064e8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll1m != 0U)
 80064ea:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80064ee:	f3c6 1305 	ubfx	r3, r6, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064f2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 80064f4:	f000 8090 	beq.w	8006618 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f8:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80064fc:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006500:	f005 0201 	and.w	r2, r5, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006504:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800650c:	4353      	muls	r3, r2
    switch (pllsource)
 800650e:	2c01      	cmp	r4, #1
 8006510:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006514:	ee06 3a90 	vmov	s13, r3
 8006518:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800651c:	d04e      	beq.n	80065bc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800651e:	2c02      	cmp	r4, #2
 8006520:	d05e      	beq.n	80065e0 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8006522:	2c00      	cmp	r4, #0
 8006524:	d16a      	bne.n	80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006526:	680b      	ldr	r3, [r1, #0]
 8006528:	069b      	lsls	r3, r3, #26
 800652a:	d567      	bpl.n	80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800652c:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800652e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006530:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8006534:	4a3b      	ldr	r2, [pc, #236]	@ (8006624 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800653a:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653c:	ee07 2a90 	vmov	s15, r2
 8006540:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8006544:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8006548:	ee07 3a10 	vmov	s14, r3
 800654c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006550:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006554:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006558:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800655c:	4a30      	ldr	r2, [pc, #192]	@ (8006620 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800655e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006560:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006564:	ee07 3a10 	vmov	s14, r3
 8006568:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800656c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006570:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006574:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006578:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800657c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800657e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006582:	ee07 3a10 	vmov	s14, r3
 8006586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800658a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800658e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006592:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006596:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800659a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800659c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80065a0:	ee06 3a90 	vmov	s13, r3
 80065a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80065a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80065ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80065b0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80065b4:	ee17 3a90 	vmov	r3, s15
 80065b8:	6083      	str	r3, [r0, #8]
}
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065bc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80065be:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d2:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065d6:	eec5 6a87 	vdiv.f32	s13, s11, s14
 80065da:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80065de:	e7bd      	b.n	800655c <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80065e2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800662c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80065fa:	e7ec      	b.n	80065d6 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065fc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80065fe:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8006602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800660e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006612:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006616:	e7de      	b.n	80065d6 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006618:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800661c:	e7cc      	b.n	80065b8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	4a742400 	.word	0x4a742400
 800662c:	4bbebc20 	.word	0x4bbebc20
 8006630:	4c742400 	.word	0x4c742400

08006634 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8006634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006636:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800663a:	430b      	orrs	r3, r1
 800663c:	d115      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800663e:	4b9d      	ldr	r3, [pc, #628]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006642:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8006646:	2a04      	cmp	r2, #4
 8006648:	d82d      	bhi.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800664a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800664e:	001c      	.short	0x001c
 8006650:	000500e1 	.word	0x000500e1
 8006654:	00410151 	.word	0x00410151
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800665e:	f000 80df 	beq.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006662:	a801      	add	r0, sp, #4
 8006664:	f7ff fe92 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
 8006668:	e0d9      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800666a:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800666e:	430b      	orrs	r3, r1
 8006670:	d11b      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006672:	4b90      	ldr	r3, [pc, #576]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006676:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 800667a:	2a80      	cmp	r2, #128	@ 0x80
 800667c:	d0ec      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800667e:	d80c      	bhi.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    switch (srcclk)
 8006680:	2a00      	cmp	r2, #0
 8006682:	f040 80c5 	bne.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800668c:	f000 80c8 	beq.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006690:	a801      	add	r0, sp, #4
 8006692:	f7ff ff25 	bl	80064e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006696:	9802      	ldr	r0, [sp, #8]
 8006698:	e0c2      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
    switch (saiclocksource)
 800669a:	2ac0      	cmp	r2, #192	@ 0xc0
 800669c:	f000 8128 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80066a0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 80066a4:	d014      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = 0;
 80066a6:	2000      	movs	r0, #0
 80066a8:	e0ba      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066aa:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80066ae:	430b      	orrs	r3, r1
 80066b0:	d12e      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80066b2:	4b80      	ldr	r3, [pc, #512]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80066b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066b6:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 80066ba:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 80066be:	d0cb      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80066c0:	d9de      	bls.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80066c2:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 80066c6:	f000 8113 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80066ca:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80066ce:	e7e9      	b.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066d2:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066d4:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066d8:	0748      	lsls	r0, r1, #29
 80066da:	d506      	bpl.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80066dc:	b92a      	cbnz	r2, 80066ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066de:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80066e4:	4874      	ldr	r0, [pc, #464]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80066e6:	40d8      	lsrs	r0, r3
 80066e8:	e09a      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ea:	4b72      	ldr	r3, [pc, #456]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	05c9      	lsls	r1, r1, #23
 80066f0:	d503      	bpl.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80066f2:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80066f6:	f000 80fd 	beq.w	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006700:	f000 808e 	beq.w	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = 0;
 8006704:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8006708:	486c      	ldr	r0, [pc, #432]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800670a:	bf18      	it	ne
 800670c:	2000      	movne	r0, #0
 800670e:	e087      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006710:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8006714:	430b      	orrs	r3, r1
 8006716:	d11f      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006718:	4b66      	ldr	r3, [pc, #408]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800671a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800671c:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 8006720:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8006724:	d098      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006726:	d9ab      	bls.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8006728:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800672c:	f000 80e0 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8006730:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 8006734:	d1b7      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006736:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006738:	6819      	ldr	r1, [r3, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800673a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800673e:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006740:	0748      	lsls	r0, r1, #29
 8006742:	d501      	bpl.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006744:	2a00      	cmp	r2, #0
 8006746:	d0cb      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006748:	05d9      	lsls	r1, r3, #23
 800674a:	d503      	bpl.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800674c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8006750:	f000 80d0 	beq.w	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006754:	4b57      	ldr	r3, [pc, #348]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006756:	e7d0      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006758:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800675c:	430b      	orrs	r3, r1
 800675e:	d10f      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006760:	4b54      	ldr	r3, [pc, #336]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006764:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 8006768:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800676c:	f43f af74 	beq.w	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8006770:	d986      	bls.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8006772:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8006776:	f000 80bb 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 800677a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800677e:	e7d9      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006780:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8006784:	430b      	orrs	r3, r1
 8006786:	d132      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006788:	4a4a      	ldr	r2, [pc, #296]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800678a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800678c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8006790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006794:	f000 8081 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006798:	d80d      	bhi.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d016      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80067a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067a4:	d01b      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f47f af7d 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 80067ac:	b005      	add	sp, #20
 80067ae:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80067b2:	f7fe bf0f 	b.w	80055d4 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 80067b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067ba:	d074      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80067bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 80067c0:	f47f af71 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067c4:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 80067c6:	4b3d      	ldr	r3, [pc, #244]	@ (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067c8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80067cc:	e06f      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067ce:	6810      	ldr	r0, [r2, #0]
 80067d0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80067d4:	d024      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d6:	a801      	add	r0, sp, #4
 80067d8:	f7ff fd2e 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
 80067dc:	e75b      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067de:	6810      	ldr	r0, [r2, #0]
 80067e0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80067e4:	d01c      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e6:	a801      	add	r0, sp, #4
 80067e8:	f7ff fdd0 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067ec:	e753      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067ee:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80067f2:	430b      	orrs	r3, r1
 80067f4:	d120      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067f6:	4b2f      	ldr	r3, [pc, #188]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80067f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80067fa:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 80067fe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006802:	d010      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8006804:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8006808:	d095      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
 800680a:	2a00      	cmp	r2, #0
 800680c:	f47f af4b 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006818:	a801      	add	r0, sp, #4
 800681a:	f7ff fd0d 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800681e:	9801      	ldr	r0, [sp, #4]
}
 8006820:	b005      	add	sp, #20
 8006822:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800682c:	d0f8      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800682e:	a801      	add	r0, sp, #4
 8006830:	f7ff fdac 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006834:	9803      	ldr	r0, [sp, #12]
 8006836:	e7f3      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006838:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800683c:	430b      	orrs	r3, r1
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006840:	4b1c      	ldr	r3, [pc, #112]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006842:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8006844:	03d2      	lsls	r2, r2, #15
 8006846:	f57f af1e 	bpl.w	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006850:	d0e6      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006852:	a801      	add	r0, sp, #4
 8006854:	f7ff fcf0 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
 8006858:	e7ec      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800685a:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800685e:	430b      	orrs	r3, r1
 8006860:	d130      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006862:	4a14      	ldr	r2, [pc, #80]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006864:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006866:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800686a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800686e:	d014      	beq.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006870:	d80d      	bhi.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006876:	d0aa      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8006878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800687c:	d0af      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800687e:	2b00      	cmp	r3, #0
 8006880:	f47f af11 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
}
 8006884:	b005      	add	sp, #20
 8006886:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800688a:	f7ff bcc3 	b.w	8006214 <HAL_RCCEx_GetD3PCLK1Freq>
    switch (srcclk)
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006892:	d008      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006898:	e792      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800689a:	6810      	ldr	r0, [r2, #0]
 800689c:	f010 0004 	ands.w	r0, r0, #4
 80068a0:	d0be      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	e71c      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068a6:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80068aa:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 80068ae:	bf18      	it	ne
 80068b0:	4618      	movne	r0, r3
 80068b2:	e7b5      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 80068b4:	58024400 	.word	0x58024400
 80068b8:	03d09000 	.word	0x03d09000
 80068bc:	017d7840 	.word	0x017d7840
 80068c0:	003d0900 	.word	0x003d0900
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80068c4:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80068c8:	4308      	orrs	r0, r1
 80068ca:	f47f aeec 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80068d0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80068d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80068d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068da:	d007      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80068dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068e0:	f43f af75 	beq.w	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f aede 	bne.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80068ea:	e76b      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ec:	6810      	ldr	r0, [r2, #0]
 80068ee:	e6cb      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        frequency = EXTERNAL_CLOCK_VALUE;
 80068f0:	4802      	ldr	r0, [pc, #8]	@ (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80068f2:	e795      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          frequency = CSI_VALUE;
 80068f4:	4802      	ldr	r0, [pc, #8]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068f6:	e793      	b.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 80068f8:	58024400 	.word	0x58024400
 80068fc:	00bb8000 	.word	0x00bb8000
 8006900:	003d0900 	.word	0x003d0900

08006904 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8006904:	6803      	ldr	r3, [r0, #0]
 8006906:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	f042 0208 	orr.w	r2, r2, #8
 800690e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	f042 0210 	orr.w	r2, r2, #16
 8006916:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 8006926:	f022 0203 	bic.w	r2, r2, #3
 800692a:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006932:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006934:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8006938:	2a04      	cmp	r2, #4
 800693a:	d00b      	beq.n	8006954 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800693c:	068a      	lsls	r2, r1, #26
 800693e:	d509      	bpl.n	8006954 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006940:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006944:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006948:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	f042 0220 	orr.w	r2, r2, #32
 8006952:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006954:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8006958:	2a03      	cmp	r2, #3
 800695a:	d00b      	beq.n	8006974 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800695c:	064a      	lsls	r2, r1, #25
 800695e:	d509      	bpl.n	8006974 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006960:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006964:	f042 0204 	orr.w	r2, r2, #4
 8006968:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006972:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006974:	058a      	lsls	r2, r1, #22
 8006976:	d509      	bpl.n	800698c <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006978:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800698a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800698c:	05ca      	lsls	r2, r1, #23
 800698e:	d509      	bpl.n	80069a4 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006990:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006994:	f042 0208 	orr.w	r2, r2, #8
 8006998:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80069aa:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 80069ae:	4770      	bx	lr

080069b0 <HAL_SPI_Init>:
{
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80069b2:	4604      	mov	r4, r0
 80069b4:	b908      	cbnz	r0, 80069ba <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 80069b6:	2001      	movs	r0, #1
}
 80069b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80069ba:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069bc:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80069be:	494d      	ldr	r1, [pc, #308]	@ (8006af4 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c0:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80069c2:	428a      	cmp	r2, r1
 80069c4:	68c3      	ldr	r3, [r0, #12]
 80069c6:	d009      	beq.n	80069dc <HAL_SPI_Init+0x2c>
 80069c8:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80069cc:	428a      	cmp	r2, r1
 80069ce:	d005      	beq.n	80069dc <HAL_SPI_Init+0x2c>
 80069d0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80069d4:	428a      	cmp	r2, r1
 80069d6:	d001      	beq.n	80069dc <HAL_SPI_Init+0x2c>
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	d8ec      	bhi.n	80069b6 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069dc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80069de:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069e0:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80069e2:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80069e4:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80069e8:	4942      	ldr	r1, [pc, #264]	@ (8006af4 <HAL_SPI_Init+0x144>)
 80069ea:	428a      	cmp	r2, r1
 80069ec:	d073      	beq.n	8006ad6 <HAL_SPI_Init+0x126>
 80069ee:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 80069f2:	428a      	cmp	r2, r1
 80069f4:	d06f      	beq.n	8006ad6 <HAL_SPI_Init+0x126>
 80069f6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80069fa:	428a      	cmp	r2, r1
 80069fc:	d06b      	beq.n	8006ad6 <HAL_SPI_Init+0x126>
 80069fe:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006a00:	d8d9      	bhi.n	80069b6 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a02:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8006a06:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006a0a:	b923      	cbnz	r3, 8006a16 <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 8006a0c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006a0e:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8006a12:	f7fb fd67 	bl	80024e4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006a16:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a18:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006a1a:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a1c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 8006a20:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006a22:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006a2a:	6893      	ldr	r3, [r2, #8]
 8006a2c:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006a30:	69a3      	ldr	r3, [r4, #24]
 8006a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a36:	d104      	bne.n	8006a42 <HAL_SPI_Init+0x92>
 8006a38:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8006a3c:	d14d      	bne.n	8006ada <HAL_SPI_Init+0x12a>
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	d050      	beq.n	8006ae4 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006a42:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 8006a46:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006a48:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006a4a:	d050      	beq.n	8006aee <HAL_SPI_Init+0x13e>
 8006a4c:	2d06      	cmp	r5, #6
 8006a4e:	d94e      	bls.n	8006aee <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006a50:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 8006a54:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 8006a56:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006a5a:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a5c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a5e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a60:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a62:	433d      	orrs	r5, r7
 8006a64:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8006a66:	433d      	orrs	r5, r7
 8006a68:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 8006a6a:	433d      	orrs	r5, r7
 8006a6c:	ea45 050c 	orr.w	r5, r5, ip
 8006a70:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a72:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006a74:	432b      	orrs	r3, r5
 8006a76:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006a78:	432b      	orrs	r3, r5
 8006a7a:	6925      	ldr	r5, [r4, #16]
 8006a7c:	432b      	orrs	r3, r5
 8006a7e:	6965      	ldr	r5, [r4, #20]
 8006a80:	432b      	orrs	r3, r5
 8006a82:	6a25      	ldr	r5, [r4, #32]
 8006a84:	432b      	orrs	r3, r5
 8006a86:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8006a88:	432b      	orrs	r3, r5
 8006a8a:	68a5      	ldr	r5, [r4, #8]
 8006a8c:	432b      	orrs	r3, r5
 8006a8e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8006a90:	432b      	orrs	r3, r5
 8006a92:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8006a94:	432b      	orrs	r3, r5
 8006a96:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a98:	b959      	cbnz	r1, 8006ab2 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a9a:	6893      	ldr	r3, [r2, #8]
 8006a9c:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8006aa0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006aa4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006aa6:	6893      	ldr	r3, [r2, #8]
 8006aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006aac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ab0:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ab2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006aba:	b128      	cbz	r0, 8006ac8 <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006abc:	68d3      	ldr	r3, [r2, #12]
 8006abe:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8006ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ac8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006aca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006acc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ad0:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 8006ad4:	e770      	b.n	80069b8 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	e792      	b.n	8006a00 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ada:	2900      	cmp	r1, #0
 8006adc:	d1b1      	bne.n	8006a42 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ade:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 8006ae2:	d1ae      	bne.n	8006a42 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ae4:	6810      	ldr	r0, [r2, #0]
 8006ae6:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	e7a9      	b.n	8006a42 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006aee:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8006af2:	e7b2      	b.n	8006a5a <HAL_SPI_Init+0xaa>
 8006af4:	40013000 	.word	0x40013000

08006af8 <HAL_SPI_Transmit>:
{
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	4604      	mov	r4, r0
 8006afe:	461d      	mov	r5, r3
 8006b00:	4689      	mov	r9, r1
 8006b02:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b04:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8006b06:	f7fc f9e3 	bl	8002ed0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006b0a:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 8006b0e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	b2d8      	uxtb	r0, r3
 8006b14:	f040 8108 	bne.w	8006d28 <HAL_SPI_Transmit+0x230>
  if ((pData == NULL) || (Size == 0UL))
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	f000 80a3 	beq.w	8006c66 <HAL_SPI_Transmit+0x16e>
 8006b20:	f1b8 0f00 	cmp.w	r8, #0
 8006b24:	f000 809f 	beq.w	8006c66 <HAL_SPI_Transmit+0x16e>
  __HAL_LOCK(hspi);
 8006b28:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	f000 80fb 	beq.w	8006d28 <HAL_SPI_Transmit+0x230>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b32:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 8006b36:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b3a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3e:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b42:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b46:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006b4a:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 8006b52:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8006b54:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006b58:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b5c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006b60:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 8006b64:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b66:	d139      	bne.n	8006bdc <HAL_SPI_Transmit+0xe4>
    SPI_1LINE_TX(hspi);
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b6e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	f36f 020f 	bfc	r2, #0, #16
 8006b76:	ea42 0208 	orr.w	r2, r2, r8
 8006b7a:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b84:	6862      	ldr	r2, [r4, #4]
 8006b86:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8006b8a:	d103      	bne.n	8006b94 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b92:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b94:	68e3      	ldr	r3, [r4, #12]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d835      	bhi.n	8006c06 <HAL_SPI_Transmit+0x10e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b9a:	2b07      	cmp	r3, #7
 8006b9c:	d87a      	bhi.n	8006c94 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0UL)
 8006b9e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ba2:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d033      	beq.n	8006c12 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006baa:	694b      	ldr	r3, [r1, #20]
 8006bac:	0798      	lsls	r0, r3, #30
 8006bae:	f140 80a1 	bpl.w	8006cf4 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006bb2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006bb6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f240 8081 	bls.w	8006cc2 <HAL_SPI_Transmit+0x1ca>
 8006bc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d97d      	bls.n	8006cc2 <HAL_SPI_Transmit+0x1ca>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006bc6:	f852 3b04 	ldr.w	r3, [r2], #4
 8006bca:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 8006bcc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bd0:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006bd2:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8006bda:	e7e0      	b.n	8006b9e <HAL_SPI_Transmit+0xa6>
    SPI_2LINES_TX(hspi);
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006be2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006be6:	60da      	str	r2, [r3, #12]
 8006be8:	e7c2      	b.n	8006b70 <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006bea:	6953      	ldr	r3, [r2, #20]
 8006bec:	0798      	lsls	r0, r3, #30
 8006bee:	d523      	bpl.n	8006c38 <HAL_SPI_Transmit+0x140>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006bf0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006bf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006bf6:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006bf8:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006bfa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006c06:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c0a:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1eb      	bne.n	8006bea <HAL_SPI_Transmit+0xf2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	071b      	lsls	r3, r3, #28
 8006c18:	d576      	bpl.n	8006d08 <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff fe72 	bl	8006904 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 8006c26:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c28:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8006c2c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c30:	1ac0      	subs	r0, r0, r3
 8006c32:	bf18      	it	ne
 8006c34:	2001      	movne	r0, #1
 8006c36:	e016      	b.n	8006c66 <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c38:	f7fc f94a 	bl	8002ed0 <HAL_GetTick>
 8006c3c:	1b80      	subs	r0, r0, r6
 8006c3e:	42a8      	cmp	r0, r5
 8006c40:	d3e1      	bcc.n	8006c06 <HAL_SPI_Transmit+0x10e>
 8006c42:	1c69      	adds	r1, r5, #1
 8006c44:	d0df      	beq.n	8006c06 <HAL_SPI_Transmit+0x10e>
          SPI_CloseTransfer(hspi);
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff fe5c 	bl	8006904 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c4c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006c50:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c56:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006c60:	2300      	movs	r3, #0
 8006c62:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8006c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c6a:	694b      	ldr	r3, [r1, #20]
 8006c6c:	079a      	lsls	r2, r3, #30
 8006c6e:	d520      	bpl.n	8006cb2 <HAL_SPI_Transmit+0x1ba>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c70:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c74:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006c76:	b292      	uxth	r2, r2
 8006c78:	2a01      	cmp	r2, #1
 8006c7a:	d912      	bls.n	8006ca2 <HAL_SPI_Transmit+0x1aa>
 8006c7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006c7e:	b182      	cbz	r2, 8006ca2 <HAL_SPI_Transmit+0x1aa>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c84:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c86:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c88:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006c8c:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006c94:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c98:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e4      	bne.n	8006c6a <HAL_SPI_Transmit+0x172>
 8006ca0:	e7b7      	b.n	8006c12 <HAL_SPI_Transmit+0x11a>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ca2:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006ca6:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006caa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	e7ed      	b.n	8006c8e <HAL_SPI_Transmit+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb2:	f7fc f90d 	bl	8002ed0 <HAL_GetTick>
 8006cb6:	1b80      	subs	r0, r0, r6
 8006cb8:	42a8      	cmp	r0, r5
 8006cba:	d3eb      	bcc.n	8006c94 <HAL_SPI_Transmit+0x19c>
 8006cbc:	1c6b      	adds	r3, r5, #1
 8006cbe:	d0e9      	beq.n	8006c94 <HAL_SPI_Transmit+0x19c>
 8006cc0:	e7c1      	b.n	8006c46 <HAL_SPI_Transmit+0x14e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006cc2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d909      	bls.n	8006ce0 <HAL_SPI_Transmit+0x1e8>
 8006ccc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006cce:	b13b      	cbz	r3, 8006ce0 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cd0:	f832 3b02 	ldrh.w	r3, [r2], #2
 8006cd4:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cd6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cda:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cdc:	3b02      	subs	r3, #2
 8006cde:	e779      	b.n	8006bd4 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ce0:	7813      	ldrb	r3, [r2, #0]
 8006ce2:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ce6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006ce8:	3301      	adds	r3, #1
 8006cea:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006cec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	e76f      	b.n	8006bd4 <HAL_SPI_Transmit+0xdc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf4:	f7fc f8ec 	bl	8002ed0 <HAL_GetTick>
 8006cf8:	1b80      	subs	r0, r0, r6
 8006cfa:	42a8      	cmp	r0, r5
 8006cfc:	f4ff af4f 	bcc.w	8006b9e <HAL_SPI_Transmit+0xa6>
 8006d00:	1c69      	adds	r1, r5, #1
 8006d02:	f43f af4c 	beq.w	8006b9e <HAL_SPI_Transmit+0xa6>
 8006d06:	e79e      	b.n	8006c46 <HAL_SPI_Transmit+0x14e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d08:	f7fc f8e2 	bl	8002ed0 <HAL_GetTick>
 8006d0c:	1b80      	subs	r0, r0, r6
 8006d0e:	4285      	cmp	r5, r0
 8006d10:	f63f af7f 	bhi.w	8006c12 <HAL_SPI_Transmit+0x11a>
 8006d14:	1c6a      	adds	r2, r5, #1
 8006d16:	f43f af7c 	beq.w	8006c12 <HAL_SPI_Transmit+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006d1e:	f043 0320 	orr.w	r3, r3, #32
 8006d22:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8006d26:	e778      	b.n	8006c1a <HAL_SPI_Transmit+0x122>
    return HAL_BUSY;
 8006d28:	2002      	movs	r0, #2
 8006d2a:	e79c      	b.n	8006c66 <HAL_SPI_Transmit+0x16e>

08006d2c <HAL_SPI_Receive>:
{
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	461e      	mov	r6, r3
 8006d34:	468a      	mov	sl, r1
 8006d36:	4617      	mov	r7, r2
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006d38:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006d3a:	f8d0 9000 	ldr.w	r9, [r0]
  tickstart = HAL_GetTick();
 8006d3e:	f7fc f8c7 	bl	8002ed0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d42:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 8006d46:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	b2d8      	uxtb	r0, r3
 8006d4c:	f040 811c 	bne.w	8006f88 <HAL_SPI_Receive+0x25c>
  if ((pData == NULL) || (Size == 0UL))
 8006d50:	f1ba 0f00 	cmp.w	sl, #0
 8006d54:	d07d      	beq.n	8006e52 <HAL_SPI_Receive+0x126>
 8006d56:	2f00      	cmp	r7, #0
 8006d58:	d07b      	beq.n	8006e52 <HAL_SPI_Receive+0x126>
  __HAL_LOCK(hspi);
 8006d5a:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f000 8112 	beq.w	8006f88 <HAL_SPI_Receive+0x25c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d64:	2304      	movs	r3, #4
    SPI_1LINE_RX(hspi);
 8006d66:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 8006d68:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d6c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d70:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d72:	f8c4 a064 	str.w	sl, [r4, #100]	@ 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d76:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pTxBuffPtr  = NULL;
 8006d7a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hspi->RxXferCount = Size;
 8006d7c:	f8a4 706a 	strh.w	r7, [r4, #106]	@ 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006d80:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006d84:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferSize  = Size;
 8006d88:	f8a4 7068 	strh.w	r7, [r4, #104]	@ 0x68
  hspi->TxISR       = NULL;
 8006d8c:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006d96:	d132      	bne.n	8006dfe <HAL_SPI_Receive+0xd2>
    SPI_1LINE_RX(hspi);
 8006d98:	680b      	ldr	r3, [r1, #0]
 8006d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d9e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006da0:	684b      	ldr	r3, [r1, #4]
 8006da2:	f36f 030f 	bfc	r3, #0, #16
 8006da6:	433b      	orrs	r3, r7
 8006da8:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8006daa:	680b      	ldr	r3, [r1, #0]
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006db8:	d103      	bne.n	8006dc2 <HAL_SPI_Receive+0x96>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006dba:	680b      	ldr	r3, [r1, #0]
 8006dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dc0:	600b      	str	r3, [r1, #0]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006dc2:	096d      	lsrs	r5, r5, #5
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006dc4:	68e3      	ldr	r3, [r4, #12]
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006dc6:	3501      	adds	r5, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006dc8:	2b0f      	cmp	r3, #15
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006dca:	b2ad      	uxth	r5, r5
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006dcc:	d82e      	bhi.n	8006e2c <HAL_SPI_Receive+0x100>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dce:	2b07      	cmp	r3, #7
 8006dd0:	d878      	bhi.n	8006ec4 <HAL_SPI_Receive+0x198>
    while (hspi->RxXferCount > 0UL)
 8006dd2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d02c      	beq.n	8006e36 <HAL_SPI_Receive+0x10a>
      temp_sr_reg = hspi->Instance->SR;
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	6959      	ldr	r1, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	07d0      	lsls	r0, r2, #31
 8006de4:	f140 8092 	bpl.w	8006f0c <HAL_SPI_Receive+0x1e0>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006de8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006dec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dee:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006df0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006df2:	3301      	adds	r3, #1
 8006df4:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006df6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	e0ac      	b.n	8006f58 <HAL_SPI_Receive+0x22c>
    SPI_2LINES_RX(hspi);
 8006dfe:	68cb      	ldr	r3, [r1, #12]
 8006e00:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8006e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e08:	60cb      	str	r3, [r1, #12]
 8006e0a:	e7c9      	b.n	8006da0 <HAL_SPI_Receive+0x74>
      temp_sr_reg = hspi->Instance->SR;
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	6959      	ldr	r1, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	07d0      	lsls	r0, r2, #31
 8006e14:	d51f      	bpl.n	8006e56 <HAL_SPI_Receive+0x12a>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e1a:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e1e:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006e20:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 8006e2c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1ea      	bne.n	8006e0c <HAL_SPI_Receive+0xe0>
  SPI_CloseTransfer(hspi);
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7ff fd64 	bl	8006904 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 8006e42:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e44:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8006e48:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e4c:	1ac0      	subs	r0, r0, r3
 8006e4e:	bf18      	it	ne
 8006e50:	2001      	movne	r0, #1
}
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e56:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	42aa      	cmp	r2, r5
 8006e5e:	d201      	bcs.n	8006e64 <HAL_SPI_Receive+0x138>
 8006e60:	040a      	lsls	r2, r1, #16
 8006e62:	d4d8      	bmi.n	8006e16 <HAL_SPI_Receive+0xea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e64:	f7fc f834 	bl	8002ed0 <HAL_GetTick>
 8006e68:	eba0 0008 	sub.w	r0, r0, r8
 8006e6c:	42b0      	cmp	r0, r6
 8006e6e:	d3dd      	bcc.n	8006e2c <HAL_SPI_Receive+0x100>
 8006e70:	1c77      	adds	r7, r6, #1
 8006e72:	d0db      	beq.n	8006e2c <HAL_SPI_Receive+0x100>
          SPI_CloseTransfer(hspi);
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7ff fd45 	bl	8006904 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e7a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006e7e:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e84:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
 8006e94:	e7dd      	b.n	8006e52 <HAL_SPI_Receive+0x126>
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e96:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	d225      	bcs.n	8006eec <HAL_SPI_Receive+0x1c0>
 8006ea0:	0411      	lsls	r1, r2, #16
 8006ea2:	d523      	bpl.n	8006eec <HAL_SPI_Receive+0x1c0>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ea4:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eac:	3304      	adds	r3, #4
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006eae:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006eb2:	f823 2c02 	strh.w	r2, [r3, #-2]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb6:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006eb8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006ebc:	3b02      	subs	r3, #2
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 8006ec4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0b3      	beq.n	8006e36 <HAL_SPI_Receive+0x10a>
      temp_sr_reg = hspi->Instance->SR;
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	695a      	ldr	r2, [r3, #20]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	07d8      	lsls	r0, r3, #31
 8006ed6:	d5de      	bpl.n	8006e96 <HAL_SPI_Receive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ed8:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 8006edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ede:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ee2:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ee4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	e7e8      	b.n	8006ebe <HAL_SPI_Receive+0x192>
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006eec:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_SPI_Receive+0x1ce>
 8006ef6:	0493      	lsls	r3, r2, #18
 8006ef8:	d4ee      	bmi.n	8006ed8 <HAL_SPI_Receive+0x1ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efa:	f7fb ffe9 	bl	8002ed0 <HAL_GetTick>
 8006efe:	eba0 0008 	sub.w	r0, r0, r8
 8006f02:	42b0      	cmp	r0, r6
 8006f04:	d3de      	bcc.n	8006ec4 <HAL_SPI_Receive+0x198>
 8006f06:	1c77      	adds	r7, r6, #1
 8006f08:	d0dc      	beq.n	8006ec4 <HAL_SPI_Receive+0x198>
 8006f0a:	e7b3      	b.n	8006e74 <HAL_SPI_Receive+0x148>
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f0c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006f10:	b292      	uxth	r2, r2
 8006f12:	42aa      	cmp	r2, r5
 8006f14:	d224      	bcs.n	8006f60 <HAL_SPI_Receive+0x234>
 8006f16:	040a      	lsls	r2, r1, #16
 8006f18:	d522      	bpl.n	8006f60 <HAL_SPI_Receive+0x234>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f20:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f28:	6822      	ldr	r2, [r4, #0]
 8006f2a:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006f2e:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006f3c:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	6662      	str	r2, [r4, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8006f4a:	705a      	strb	r2, [r3, #1]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f4e:	3301      	adds	r3, #1
 8006f50:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006f52:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006f56:	3b04      	subs	r3, #4
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8006f5e:	e738      	b.n	8006dd2 <HAL_SPI_Receive+0xa6>
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006f60:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8006f64:	b292      	uxth	r2, r2
 8006f66:	2a03      	cmp	r2, #3
 8006f68:	d803      	bhi.n	8006f72 <HAL_SPI_Receive+0x246>
 8006f6a:	f411 4fc0 	tst.w	r1, #24576	@ 0x6000
 8006f6e:	f47f af3b 	bne.w	8006de8 <HAL_SPI_Receive+0xbc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f72:	f7fb ffad 	bl	8002ed0 <HAL_GetTick>
 8006f76:	eba0 0008 	sub.w	r0, r0, r8
 8006f7a:	42b0      	cmp	r0, r6
 8006f7c:	f4ff af29 	bcc.w	8006dd2 <HAL_SPI_Receive+0xa6>
 8006f80:	1c73      	adds	r3, r6, #1
 8006f82:	f43f af26 	beq.w	8006dd2 <HAL_SPI_Receive+0xa6>
 8006f86:	e775      	b.n	8006e74 <HAL_SPI_Receive+0x148>
    return HAL_BUSY;
 8006f88:	2002      	movs	r0, #2
 8006f8a:	e762      	b.n	8006e52 <HAL_SPI_Receive+0x126>

08006f8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f90:	f023 0302 	bic.w	r3, r3, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f94:	f022 0201 	bic.w	r2, r2, #1
{
 8006f98:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006f9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006f9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8006fa0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006fa6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006faa:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fac:	688d      	ldr	r5, [r1, #8]
 8006fae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb0:	4d12      	ldr	r5, [pc, #72]	@ (8006ffc <TIM_OC1_SetConfig+0x70>)
 8006fb2:	42a8      	cmp	r0, r5
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_OC1_SetConfig+0x4a>
 8006fb6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fba:	42a8      	cmp	r0, r5
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_OC1_SetConfig+0x4a>
 8006fbe:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8006fc2:	42a8      	cmp	r0, r5
 8006fc4:	d007      	beq.n	8006fd6 <TIM_OC1_SetConfig+0x4a>
 8006fc6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fca:	42a8      	cmp	r0, r5
 8006fcc:	d003      	beq.n	8006fd6 <TIM_OC1_SetConfig+0x4a>
 8006fce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fd2:	42a8      	cmp	r0, r5
 8006fd4:	d10b      	bne.n	8006fee <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006fdc:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fde:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fe2:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fea:	4334      	orrs	r4, r6
 8006fec:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ff2:	684a      	ldr	r2, [r1, #4]
 8006ff4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff6:	6203      	str	r3, [r0, #32]
}
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40010000 	.word	0x40010000

08007000 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007000:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007002:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 800700c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800700e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007010:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007012:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 8007014:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007016:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800701a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800701e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007020:	688d      	ldr	r5, [r1, #8]
 8007022:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007026:	4d14      	ldr	r5, [pc, #80]	@ (8007078 <TIM_OC3_SetConfig+0x78>)
 8007028:	42a8      	cmp	r0, r5
 800702a:	d00f      	beq.n	800704c <TIM_OC3_SetConfig+0x4c>
 800702c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007030:	42a8      	cmp	r0, r5
 8007032:	d00b      	beq.n	800704c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007034:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8007038:	42a8      	cmp	r0, r5
 800703a:	d10f      	bne.n	800705c <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800703c:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007040:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8007044:	4334      	orrs	r4, r6
 8007046:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 800704a:	e00e      	b.n	800706a <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800704c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007050:	68cd      	ldr	r5, [r1, #12]
 8007052:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007056:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705a:	e7ef      	b.n	800703c <TIM_OC3_SetConfig+0x3c>
 800705c:	4d07      	ldr	r5, [pc, #28]	@ (800707c <TIM_OC3_SetConfig+0x7c>)
 800705e:	42a8      	cmp	r0, r5
 8007060:	d0ec      	beq.n	800703c <TIM_OC3_SetConfig+0x3c>
 8007062:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007066:	42a8      	cmp	r0, r5
 8007068:	d0e8      	beq.n	800703c <TIM_OC3_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800706e:	684a      	ldr	r2, [r1, #4]
 8007070:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007072:	6203      	str	r3, [r0, #32]
}
 8007074:	bd70      	pop	{r4, r5, r6, pc}
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40014400 	.word	0x40014400

08007080 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007080:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007082:	6a02      	ldr	r2, [r0, #32]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007084:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 800708c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007090:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007092:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007094:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007096:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800709a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800709e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070a2:	688d      	ldr	r5, [r1, #8]
 80070a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a8:	4d0e      	ldr	r5, [pc, #56]	@ (80070e4 <TIM_OC4_SetConfig+0x64>)
 80070aa:	42a8      	cmp	r0, r5
 80070ac:	d00f      	beq.n	80070ce <TIM_OC4_SetConfig+0x4e>
 80070ae:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070b2:	42a8      	cmp	r0, r5
 80070b4:	d00b      	beq.n	80070ce <TIM_OC4_SetConfig+0x4e>
 80070b6:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 80070ba:	42a8      	cmp	r0, r5
 80070bc:	d007      	beq.n	80070ce <TIM_OC4_SetConfig+0x4e>
 80070be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070c2:	42a8      	cmp	r0, r5
 80070c4:	d003      	beq.n	80070ce <TIM_OC4_SetConfig+0x4e>
 80070c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070ca:	42a8      	cmp	r0, r5
 80070cc:	d104      	bne.n	80070d8 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ce:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070d2:	694d      	ldr	r5, [r1, #20]
 80070d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070dc:	684a      	ldr	r2, [r1, #4]
 80070de:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e0:	6203      	str	r3, [r0, #32]
}
 80070e2:	bd30      	pop	{r4, r5, pc}
 80070e4:	40010000 	.word	0x40010000

080070e8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ea:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
{
 80070f4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070f6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80070f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80070fa:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007102:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8007106:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007108:	688d      	ldr	r5, [r1, #8]
 800710a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710e:	4d0f      	ldr	r5, [pc, #60]	@ (800714c <TIM_OC5_SetConfig+0x64>)
 8007110:	42a8      	cmp	r0, r5
 8007112:	d00f      	beq.n	8007134 <TIM_OC5_SetConfig+0x4c>
 8007114:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007118:	42a8      	cmp	r0, r5
 800711a:	d00b      	beq.n	8007134 <TIM_OC5_SetConfig+0x4c>
 800711c:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8007120:	42a8      	cmp	r0, r5
 8007122:	d007      	beq.n	8007134 <TIM_OC5_SetConfig+0x4c>
 8007124:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007128:	42a8      	cmp	r0, r5
 800712a:	d003      	beq.n	8007134 <TIM_OC5_SetConfig+0x4c>
 800712c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007130:	42a8      	cmp	r0, r5
 8007132:	d104      	bne.n	800713e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007134:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007138:	694d      	ldr	r5, [r1, #20]
 800713a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007140:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007142:	684a      	ldr	r2, [r1, #4]
 8007144:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	6203      	str	r3, [r0, #32]
}
 8007148:	bd30      	pop	{r4, r5, pc}
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000

08007150 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007150:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007152:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007154:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007158:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
{
 800715c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800715e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007160:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8007162:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007166:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800716a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800716e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007172:	688d      	ldr	r5, [r1, #8]
 8007174:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	4d0e      	ldr	r5, [pc, #56]	@ (80071b4 <TIM_OC6_SetConfig+0x64>)
 800717a:	42a8      	cmp	r0, r5
 800717c:	d00f      	beq.n	800719e <TIM_OC6_SetConfig+0x4e>
 800717e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007182:	42a8      	cmp	r0, r5
 8007184:	d00b      	beq.n	800719e <TIM_OC6_SetConfig+0x4e>
 8007186:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 800718a:	42a8      	cmp	r0, r5
 800718c:	d007      	beq.n	800719e <TIM_OC6_SetConfig+0x4e>
 800718e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007192:	42a8      	cmp	r0, r5
 8007194:	d003      	beq.n	800719e <TIM_OC6_SetConfig+0x4e>
 8007196:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800719a:	42a8      	cmp	r0, r5
 800719c:	d104      	bne.n	80071a8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800719e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071a2:	694d      	ldr	r5, [r1, #20]
 80071a4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071aa:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071ac:	684a      	ldr	r2, [r1, #4]
 80071ae:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b0:	6203      	str	r3, [r0, #32]
}
 80071b2:	bd30      	pop	{r4, r5, pc}
 80071b4:	40010000 	.word	0x40010000

080071b8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80071b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d12f      	bne.n	8007220 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c2:	4a18      	ldr	r2, [pc, #96]	@ (8007224 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	6803      	ldr	r3, [r0, #0]
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01a      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d2:	d017      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071d4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00f      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00b      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071ec:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071f4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <HAL_TIM_Base_Start+0x4c>
 80071fc:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007200:	4293      	cmp	r3, r2
 8007202:	d107      	bne.n	8007214 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007204:	6899      	ldr	r1, [r3, #8]
 8007206:	4a08      	ldr	r2, [pc, #32]	@ (8007228 <HAL_TIM_Base_Start+0x70>)
 8007208:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	2a06      	cmp	r2, #6
 800720c:	d006      	beq.n	800721c <HAL_TIM_Base_Start+0x64>
 800720e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007212:	d003      	beq.n	800721c <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800721c:	2000      	movs	r0, #0
 800721e:	4770      	bx	lr
    return HAL_ERROR;
 8007220:	2001      	movs	r0, #1
}
 8007222:	4770      	bx	lr
 8007224:	40010000 	.word	0x40010000
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800722c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007230:	2b01      	cmp	r3, #1
 8007232:	d133      	bne.n	800729c <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	2302      	movs	r3, #2
 8007236:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800723a:	6803      	ldr	r3, [r0, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	4a16      	ldr	r2, [pc, #88]	@ (80072a0 <HAL_TIM_Base_Start_IT+0x74>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01a      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724e:	d017      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007250:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007258:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800725c:	4293      	cmp	r3, r2
 800725e:	d00f      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007260:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007264:	4293      	cmp	r3, r2
 8007266:	d00b      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007268:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800726c:	4293      	cmp	r3, r2
 800726e:	d007      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007270:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <HAL_TIM_Base_Start_IT+0x54>
 8007278:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800727c:	4293      	cmp	r3, r2
 800727e:	d107      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007280:	6899      	ldr	r1, [r3, #8]
 8007282:	4a08      	ldr	r2, [pc, #32]	@ (80072a4 <HAL_TIM_Base_Start_IT+0x78>)
 8007284:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	2a06      	cmp	r2, #6
 8007288:	d006      	beq.n	8007298 <HAL_TIM_Base_Start_IT+0x6c>
 800728a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800728e:	d003      	beq.n	8007298 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007298:	2000      	movs	r0, #0
 800729a:	4770      	bx	lr
    return HAL_ERROR;
 800729c:	2001      	movs	r0, #1
}
 800729e:	4770      	bx	lr
 80072a0:	40010000 	.word	0x40010000
 80072a4:	00010007 	.word	0x00010007

080072a8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072a8:	6803      	ldr	r3, [r0, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80072b2:	f241 1211 	movw	r2, #4369	@ 0x1111
 80072b6:	6a19      	ldr	r1, [r3, #32]
 80072b8:	4211      	tst	r1, r2
 80072ba:	d108      	bne.n	80072ce <HAL_TIM_Base_Stop_IT+0x26>
 80072bc:	6a19      	ldr	r1, [r3, #32]
 80072be:	f240 4244 	movw	r2, #1092	@ 0x444
 80072c2:	4211      	tst	r1, r2
 80072c4:	d103      	bne.n	80072ce <HAL_TIM_Base_Stop_IT+0x26>
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 80072d4:	2000      	movs	r0, #0
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 80072d8:	4770      	bx	lr

080072da <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80072da:	4770      	bx	lr

080072dc <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80072dc:	4770      	bx	lr

080072de <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80072de:	4770      	bx	lr

080072e0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80072e2:	6803      	ldr	r3, [r0, #0]
{
 80072e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80072e6:	68dd      	ldr	r5, [r3, #12]
{
 80072e8:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80072ea:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072ec:	07b2      	lsls	r2, r6, #30
 80072ee:	d50d      	bpl.n	800730c <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072f0:	07a9      	lsls	r1, r5, #30
 80072f2:	d50b      	bpl.n	800730c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072f4:	f06f 0202 	mvn.w	r2, #2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	2201      	movs	r2, #1
 80072fc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	079a      	lsls	r2, r3, #30
 8007302:	d075      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007304:	f7ff ffea 	bl	80072dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007308:	2300      	movs	r3, #0
 800730a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800730c:	0773      	lsls	r3, r6, #29
 800730e:	d510      	bpl.n	8007332 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007310:	0768      	lsls	r0, r5, #29
 8007312:	d50e      	bpl.n	8007332 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731e:	2202      	movs	r2, #2
 8007320:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007328:	d068      	beq.n	80073fc <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800732a:	f7ff ffd7 	bl	80072dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	2300      	movs	r3, #0
 8007330:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007332:	0731      	lsls	r1, r6, #28
 8007334:	d50f      	bpl.n	8007356 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007336:	072a      	lsls	r2, r5, #28
 8007338:	d50d      	bpl.n	8007356 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007340:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007344:	2204      	movs	r2, #4
 8007346:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d05c      	beq.n	8007408 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	f7ff ffc5 	bl	80072dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	2300      	movs	r3, #0
 8007354:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007356:	06f1      	lsls	r1, r6, #27
 8007358:	d510      	bpl.n	800737c <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800735a:	06ea      	lsls	r2, r5, #27
 800735c:	d50e      	bpl.n	800737c <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8007364:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007368:	2208      	movs	r2, #8
 800736a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007372:	d04f      	beq.n	8007414 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8007374:	f7ff ffb2 	bl	80072dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007378:	2300      	movs	r3, #0
 800737a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800737c:	07f3      	lsls	r3, r6, #31
 800737e:	d508      	bpl.n	8007392 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007380:	07e8      	lsls	r0, r5, #31
 8007382:	d506      	bpl.n	8007392 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800738a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800738c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800738e:	f7fb f85f 	bl	8002450 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007392:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8007396:	d008      	beq.n	80073aa <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007398:	0629      	lsls	r1, r5, #24
 800739a:	d506      	bpl.n	80073aa <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80073a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80073a6:	f000 fbd2 	bl	8007b4e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073aa:	05f2      	lsls	r2, r6, #23
 80073ac:	d508      	bpl.n	80073c0 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ae:	062b      	lsls	r3, r5, #24
 80073b0:	d506      	bpl.n	80073c0 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80073b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80073bc:	f000 fbc8 	bl	8007b50 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073c0:	0670      	lsls	r0, r6, #25
 80073c2:	d508      	bpl.n	80073d6 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073c4:	0669      	lsls	r1, r5, #25
 80073c6:	d506      	bpl.n	80073d6 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80073ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80073d2:	f7ff ff85 	bl	80072e0 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073d6:	06b2      	lsls	r2, r6, #26
 80073d8:	d522      	bpl.n	8007420 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073da:	06ab      	lsls	r3, r5, #26
 80073dc:	d520      	bpl.n	8007420 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80073e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073e6:	611a      	str	r2, [r3, #16]
}
 80073e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80073ec:	f000 bbae 	b.w	8007b4c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f0:	f7ff ff73 	bl	80072da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff ff72 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
 80073fa:	e785      	b.n	8007308 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fc:	f7ff ff6d 	bl	80072da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	4620      	mov	r0, r4
 8007402:	f7ff ff6c 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
 8007406:	e792      	b.n	800732e <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007408:	f7ff ff67 	bl	80072da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	4620      	mov	r0, r4
 800740e:	f7ff ff66 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
 8007412:	e79e      	b.n	8007352 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007414:	f7ff ff61 	bl	80072da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	4620      	mov	r0, r4
 800741a:	f7ff ff60 	bl	80072de <HAL_TIM_PWM_PulseFinishedCallback>
 800741e:	e7ab      	b.n	8007378 <HAL_TIM_IRQHandler+0x96>
}
 8007420:	bd70      	pop	{r4, r5, r6, pc}
	...

08007424 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007424:	4a27      	ldr	r2, [pc, #156]	@ (80074c4 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 8007426:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007428:	4290      	cmp	r0, r2
 800742a:	d012      	beq.n	8007452 <TIM_Base_SetConfig+0x2e>
 800742c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007430:	d00f      	beq.n	8007452 <TIM_Base_SetConfig+0x2e>
 8007432:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007436:	4290      	cmp	r0, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0x2e>
 800743a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800743e:	4290      	cmp	r0, r2
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0x2e>
 8007442:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007446:	4290      	cmp	r0, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0x2e>
 800744a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800744e:	4290      	cmp	r0, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0x40>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007456:	684a      	ldr	r2, [r1, #4]
 8007458:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800745a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745e:	68ca      	ldr	r2, [r1, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	e00a      	b.n	800747a <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007464:	4a18      	ldr	r2, [pc, #96]	@ (80074c8 <TIM_Base_SetConfig+0xa4>)
 8007466:	4290      	cmp	r0, r2
 8007468:	d0f7      	beq.n	800745a <TIM_Base_SetConfig+0x36>
 800746a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800746e:	4290      	cmp	r0, r2
 8007470:	d0f3      	beq.n	800745a <TIM_Base_SetConfig+0x36>
 8007472:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007476:	4290      	cmp	r0, r2
 8007478:	d0ef      	beq.n	800745a <TIM_Base_SetConfig+0x36>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800747a:	694a      	ldr	r2, [r1, #20]
 800747c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007480:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007482:	688a      	ldr	r2, [r1, #8]
 8007484:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007486:	680a      	ldr	r2, [r1, #0]
 8007488:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800748a:	4a0e      	ldr	r2, [pc, #56]	@ (80074c4 <TIM_Base_SetConfig+0xa0>)
 800748c:	4290      	cmp	r0, r2
 800748e:	d00f      	beq.n	80074b0 <TIM_Base_SetConfig+0x8c>
 8007490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007494:	4290      	cmp	r0, r2
 8007496:	d00b      	beq.n	80074b0 <TIM_Base_SetConfig+0x8c>
 8007498:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800749c:	4290      	cmp	r0, r2
 800749e:	d007      	beq.n	80074b0 <TIM_Base_SetConfig+0x8c>
 80074a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074a4:	4290      	cmp	r0, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_Base_SetConfig+0x8c>
 80074a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ac:	4290      	cmp	r0, r2
 80074ae:	d101      	bne.n	80074b4 <TIM_Base_SetConfig+0x90>
    TIMx->RCR = Structure->RepetitionCounter;
 80074b0:	690a      	ldr	r2, [r1, #16]
 80074b2:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074b4:	6802      	ldr	r2, [r0, #0]
 80074b6:	f042 0204 	orr.w	r2, r2, #4
 80074ba:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80074bc:	2201      	movs	r2, #1
 80074be:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 80074c0:	6003      	str	r3, [r0, #0]
}
 80074c2:	4770      	bx	lr
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40014000 	.word	0x40014000

080074cc <HAL_TIM_Base_Init>:
{
 80074cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80074ce:	4604      	mov	r4, r0
 80074d0:	b350      	cbz	r0, 8007528 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80074d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80074d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80074da:	b91b      	cbnz	r3, 80074e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80074dc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80074e0:	f7fb fa70 	bl	80029c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80074ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ee:	f7ff ff99 	bl	8007424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f2:	2301      	movs	r3, #1
  return HAL_OK;
 80074f4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80074fe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007502:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007506:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800750a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800750e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007512:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007516:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800751a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800751e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007522:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8007526:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007528:	2001      	movs	r0, #1
 800752a:	e7fc      	b.n	8007526 <HAL_TIM_Base_Init+0x5a>

0800752c <HAL_TIM_OC_Init>:
{
 800752c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800752e:	4604      	mov	r4, r0
 8007530:	b350      	cbz	r0, 8007588 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007532:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007536:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800753a:	b91b      	cbnz	r3, 8007544 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800753c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8007540:	f7ff feca 	bl	80072d8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007546:	6820      	ldr	r0, [r4, #0]
 8007548:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800754a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800754e:	f7ff ff69 	bl	8007424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007552:	2301      	movs	r3, #1
  return HAL_OK;
 8007554:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007556:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800755e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007562:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007566:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800756a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007576:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800757a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800757e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007582:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8007586:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007588:	2001      	movs	r0, #1
 800758a:	e7fc      	b.n	8007586 <HAL_TIM_OC_Init+0x5a>

0800758c <HAL_TIM_PWM_Init>:
{
 800758c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800758e:	4604      	mov	r4, r0
 8007590:	b350      	cbz	r0, 80075e8 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007596:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800759a:	b91b      	cbnz	r3, 80075a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800759c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80075a0:	f7fb f9f8 	bl	8002994 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80075aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ae:	f7ff ff39 	bl	8007424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b2:	2301      	movs	r3, #1
  return HAL_OK;
 80075b4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80075be:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80075c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80075c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80075ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80075d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80075da:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80075de:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80075e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80075e8:	2001      	movs	r0, #1
 80075ea:	e7fc      	b.n	80075e6 <HAL_TIM_PWM_Init+0x5a>

080075ec <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80075ec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ee:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 80075f0:	f023 0320 	bic.w	r3, r3, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f4:	f022 0210 	bic.w	r2, r2, #16
{
 80075f8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80075fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80075fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007600:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007602:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007606:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800760a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800760e:	688d      	ldr	r5, [r1, #8]
 8007610:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007614:	4d13      	ldr	r5, [pc, #76]	@ (8007664 <TIM_OC2_SetConfig+0x78>)
 8007616:	42a8      	cmp	r0, r5
 8007618:	d00f      	beq.n	800763a <TIM_OC2_SetConfig+0x4e>
 800761a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800761e:	42a8      	cmp	r0, r5
 8007620:	d00b      	beq.n	800763a <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007622:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8007626:	42a8      	cmp	r0, r5
 8007628:	d10f      	bne.n	800764a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800762a:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800762e:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8007632:	4334      	orrs	r4, r6
 8007634:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
 8007638:	e00e      	b.n	8007658 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800763e:	68cd      	ldr	r5, [r1, #12]
 8007640:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	e7ef      	b.n	800762a <TIM_OC2_SetConfig+0x3e>
 800764a:	4d07      	ldr	r5, [pc, #28]	@ (8007668 <TIM_OC2_SetConfig+0x7c>)
 800764c:	42a8      	cmp	r0, r5
 800764e:	d0ec      	beq.n	800762a <TIM_OC2_SetConfig+0x3e>
 8007650:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007654:	42a8      	cmp	r0, r5
 8007656:	d0e8      	beq.n	800762a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8007658:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800765a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800765c:	684a      	ldr	r2, [r1, #4]
 800765e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007660:	6203      	str	r3, [r0, #32]
}
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	40010000 	.word	0x40010000
 8007668:	40014400 	.word	0x40014400

0800766c <HAL_TIM_OC_ConfigChannel>:
{
 800766c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800766e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007672:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007674:	2b01      	cmp	r3, #1
 8007676:	d029      	beq.n	80076cc <HAL_TIM_OC_ConfigChannel+0x60>
  switch (Channel)
 8007678:	2a0c      	cmp	r2, #12
 800767a:	d01f      	beq.n	80076bc <HAL_TIM_OC_ConfigChannel+0x50>
 800767c:	d809      	bhi.n	8007692 <HAL_TIM_OC_ConfigChannel+0x26>
 800767e:	2a04      	cmp	r2, #4
 8007680:	d014      	beq.n	80076ac <HAL_TIM_OC_ConfigChannel+0x40>
 8007682:	2a08      	cmp	r2, #8
 8007684:	d016      	beq.n	80076b4 <HAL_TIM_OC_ConfigChannel+0x48>
 8007686:	b162      	cbz	r2, 80076a2 <HAL_TIM_OC_ConfigChannel+0x36>
 8007688:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800768a:	2300      	movs	r3, #0
 800768c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007690:	bd10      	pop	{r4, pc}
  switch (Channel)
 8007692:	2a10      	cmp	r2, #16
 8007694:	d016      	beq.n	80076c4 <HAL_TIM_OC_ConfigChannel+0x58>
 8007696:	2a14      	cmp	r2, #20
 8007698:	d1f6      	bne.n	8007688 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	f7ff fd58 	bl	8007150 <TIM_OC6_SetConfig>
      break;
 80076a0:	e002      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f7ff fc72 	bl	8006f8c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80076a8:	2000      	movs	r0, #0
 80076aa:	e7ee      	b.n	800768a <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f7ff ff9d 	bl	80075ec <TIM_OC2_SetConfig>
      break;
 80076b2:	e7f9      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076b4:	6800      	ldr	r0, [r0, #0]
 80076b6:	f7ff fca3 	bl	8007000 <TIM_OC3_SetConfig>
      break;
 80076ba:	e7f5      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f7ff fcdf 	bl	8007080 <TIM_OC4_SetConfig>
      break;
 80076c2:	e7f1      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076c4:	6800      	ldr	r0, [r0, #0]
 80076c6:	f7ff fd0f 	bl	80070e8 <TIM_OC5_SetConfig>
      break;
 80076ca:	e7ed      	b.n	80076a8 <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim);
 80076cc:	2002      	movs	r0, #2
 80076ce:	e7df      	b.n	8007690 <HAL_TIM_OC_ConfigChannel+0x24>

080076d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80076d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80076d2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80076d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d073      	beq.n	80077c4 <HAL_TIM_PWM_ConfigChannel+0xf4>
 80076dc:	2001      	movs	r0, #1
  switch (Channel)
 80076de:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80076e0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 80076e4:	d04e      	beq.n	8007784 <HAL_TIM_PWM_ConfigChannel+0xb4>
 80076e6:	d808      	bhi.n	80076fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 80076e8:	2a04      	cmp	r2, #4
 80076ea:	d02b      	beq.n	8007744 <HAL_TIM_PWM_ConfigChannel+0x74>
 80076ec:	2a08      	cmp	r2, #8
 80076ee:	d039      	beq.n	8007764 <HAL_TIM_PWM_ConfigChannel+0x94>
 80076f0:	b1ba      	cbz	r2, 8007722 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 80076f2:	2300      	movs	r3, #0
 80076f4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80076fa:	2a10      	cmp	r2, #16
 80076fc:	d052      	beq.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0xd4>
 80076fe:	2a14      	cmp	r2, #20
 8007700:	d1f7      	bne.n	80076f2 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	f7ff fd24 	bl	8007150 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007708:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800770a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800770c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007710:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007712:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007718:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800771a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800771c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007720:	e04e      	b.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	f7ff fc32 	bl	8006f8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007728:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800772a:	6983      	ldr	r3, [r0, #24]
 800772c:	f043 0308 	orr.w	r3, r3, #8
 8007730:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007732:	6983      	ldr	r3, [r0, #24]
 8007734:	f023 0304 	bic.w	r3, r3, #4
 8007738:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800773a:	6983      	ldr	r3, [r0, #24]
 800773c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800773e:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007740:	2000      	movs	r0, #0
 8007742:	e7d6      	b.n	80076f2 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	f7ff ff51 	bl	80075ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800774a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800774c:	6983      	ldr	r3, [r0, #24]
 800774e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007752:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007754:	6983      	ldr	r3, [r0, #24]
 8007756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800775a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800775c:	6983      	ldr	r3, [r0, #24]
 800775e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007762:	e7ec      	b.n	800773e <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	f7ff fc4b 	bl	8007000 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800776a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800776c:	69c3      	ldr	r3, [r0, #28]
 800776e:	f043 0308 	orr.w	r3, r3, #8
 8007772:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007774:	69c3      	ldr	r3, [r0, #28]
 8007776:	f023 0304 	bic.w	r3, r3, #4
 800777a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777c:	69c3      	ldr	r3, [r0, #28]
 800777e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007780:	61c3      	str	r3, [r0, #28]
      break;
 8007782:	e7dd      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	f7ff fc7b 	bl	8007080 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800778a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800778c:	69c3      	ldr	r3, [r0, #28]
 800778e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007792:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007794:	69c3      	ldr	r3, [r0, #28]
 8007796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800779a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800779c:	69c3      	ldr	r3, [r0, #28]
 800779e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80077a2:	e7ed      	b.n	8007780 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077a4:	6820      	ldr	r0, [r4, #0]
 80077a6:	f7ff fc9f 	bl	80070e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077aa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80077ae:	f043 0308 	orr.w	r3, r3, #8
 80077b2:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80077b6:	f023 0304 	bic.w	r3, r3, #4
 80077ba:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077bc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80077be:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077c0:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 80077c2:	e7bd      	b.n	8007740 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 80077c4:	2002      	movs	r0, #2
 80077c6:	e797      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x28>

080077c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ca:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80077cc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d2:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077d8:	6082      	str	r2, [r0, #8]
}
 80077da:	bd10      	pop	{r4, pc}

080077dc <HAL_TIM_ConfigClockSource>:
{
 80077dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80077de:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80077e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	f04f 0302 	mov.w	r3, #2
 80077ea:	f000 80aa 	beq.w	8007942 <HAL_TIM_ConfigClockSource+0x166>
 80077ee:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f4:	4b54      	ldr	r3, [pc, #336]	@ (8007948 <HAL_TIM_ConfigClockSource+0x16c>)
  __HAL_LOCK(htim);
 80077f6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077fe:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007800:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007802:	680b      	ldr	r3, [r1, #0]
 8007804:	2b70      	cmp	r3, #112	@ 0x70
 8007806:	d056      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0xda>
 8007808:	d83c      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0xa8>
 800780a:	2b50      	cmp	r3, #80	@ 0x50
 800780c:	d067      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x102>
 800780e:	d81d      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x70>
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d07d      	beq.n	8007910 <HAL_TIM_ConfigClockSource+0x134>
 8007814:	d806      	bhi.n	8007824 <HAL_TIM_ConfigClockSource+0x48>
 8007816:	2b20      	cmp	r3, #32
 8007818:	d00e      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x5c>
 800781a:	d80b      	bhi.n	8007834 <HAL_TIM_ConfigClockSource+0x58>
 800781c:	f033 0210 	bics.w	r2, r3, #16
 8007820:	d00a      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x5c>
      status = HAL_ERROR;
 8007822:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8007824:	2301      	movs	r3, #1
 8007826:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800782a:	2300      	movs	r3, #0
 800782c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007830:	4610      	mov	r0, r2
 8007832:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007834:	2b30      	cmp	r3, #48	@ 0x30
 8007836:	d1f4      	bne.n	8007822 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8007838:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800783a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800783e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007842:	431a      	orrs	r2, r3
 8007844:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8007848:	6082      	str	r2, [r0, #8]
}
 800784a:	e03d      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 800784c:	2b60      	cmp	r3, #96	@ 0x60
 800784e:	d1e9      	bne.n	8007824 <HAL_TIM_ConfigClockSource+0x48>
  tmpccer = TIMx->CCER;
 8007850:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007852:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8007854:	684d      	ldr	r5, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007856:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785a:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 800785e:	68c9      	ldr	r1, [r1, #12]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007860:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007864:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007866:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007868:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800786c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007870:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007872:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007874:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007876:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800787a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007882:	e020      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8007884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007888:	d020      	beq.n	80078cc <HAL_TIM_ConfigClockSource+0xf0>
 800788a:	d804      	bhi.n	8007896 <HAL_TIM_ConfigClockSource+0xba>
 800788c:	f5b3 5280 	subs.w	r2, r3, #4096	@ 0x1000
 8007890:	bf18      	it	ne
 8007892:	2201      	movne	r2, #1
 8007894:	e7c6      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x48>
 8007896:	492d      	ldr	r1, [pc, #180]	@ (800794c <HAL_TIM_ConfigClockSource+0x170>)
 8007898:	428b      	cmp	r3, r1
 800789a:	d0cd      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x5c>
 800789c:	d805      	bhi.n	80078aa <HAL_TIM_ConfigClockSource+0xce>
 800789e:	f023 0110 	bic.w	r1, r3, #16
 80078a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80078a6:	d1bd      	bne.n	8007824 <HAL_TIM_ConfigClockSource+0x48>
 80078a8:	e7c6      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x5c>
 80078aa:	4929      	ldr	r1, [pc, #164]	@ (8007950 <HAL_TIM_ConfigClockSource+0x174>)
 80078ac:	428b      	cmp	r3, r1
 80078ae:	d0c3      	beq.n	8007838 <HAL_TIM_ConfigClockSource+0x5c>
 80078b0:	3110      	adds	r1, #16
 80078b2:	428b      	cmp	r3, r1
 80078b4:	e7f7      	b.n	80078a6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 80078b6:	68cb      	ldr	r3, [r1, #12]
 80078b8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80078bc:	f7ff ff84 	bl	80077c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078c0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80078c6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078c8:	2200      	movs	r2, #0
 80078ca:	e7ab      	b.n	8007824 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 80078cc:	68cb      	ldr	r3, [r1, #12]
 80078ce:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80078d2:	f7ff ff79 	bl	80077c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078d6:	6883      	ldr	r3, [r0, #8]
 80078d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078dc:	e7f3      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 80078de:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80078e0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80078e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078e6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ea:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 80078ee:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80078fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80078fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007900:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007902:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800790e:	e7da      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 8007910:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007912:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007914:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007916:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007918:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791c:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8007920:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007922:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007924:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800792a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800792e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007930:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007932:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007934:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800793c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007940:	e7c1      	b.n	80078c6 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 8007942:	461a      	mov	r2, r3
 8007944:	e774      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x54>
 8007946:	bf00      	nop
 8007948:	ffce0088 	.word	0xffce0088
 800794c:	00100020 	.word	0x00100020
 8007950:	00100030 	.word	0x00100030

08007954 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007954:	b510      	push	{r4, lr}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007956:	f001 010f 	and.w	r1, r1, #15
 800795a:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800795c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800795e:	408c      	lsls	r4, r1

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007960:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8007962:	ea23 0304 	bic.w	r3, r3, r4
 8007966:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007968:	6a03      	ldr	r3, [r0, #32]
 800796a:	431a      	orrs	r2, r3
 800796c:	6202      	str	r2, [r0, #32]
}
 800796e:	bd10      	pop	{r4, pc}

08007970 <HAL_TIMEx_OCN_Start>:
{
 8007970:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007972:	b929      	cbnz	r1, 8007980 <HAL_TIMEx_OCN_Start+0x10>
 8007974:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8007978:	2b01      	cmp	r3, #1
 800797a:	d01d      	beq.n	80079b8 <HAL_TIMEx_OCN_Start+0x48>
    return HAL_ERROR;
 800797c:	2001      	movs	r0, #1
 800797e:	e051      	b.n	8007a24 <HAL_TIMEx_OCN_Start+0xb4>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007980:	2904      	cmp	r1, #4
 8007982:	d107      	bne.n	8007994 <HAL_TIMEx_OCN_Start+0x24>
 8007984:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 8007988:	2b01      	cmp	r3, #1
 800798a:	d1f7      	bne.n	800797c <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800798c:	2302      	movs	r3, #2
 800798e:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 8007992:	e014      	b.n	80079be <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007994:	2908      	cmp	r1, #8
 8007996:	d107      	bne.n	80079a8 <HAL_TIMEx_OCN_Start+0x38>
 8007998:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800799c:	2b01      	cmp	r3, #1
 800799e:	d1ed      	bne.n	800797c <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a0:	2302      	movs	r3, #2
 80079a2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 80079a6:	e00a      	b.n	80079be <HAL_TIMEx_OCN_Start+0x4e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079a8:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d1e5      	bne.n	800797c <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b0:	2302      	movs	r3, #2
 80079b2:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80079b6:	e002      	b.n	80079be <HAL_TIMEx_OCN_Start+0x4e>
 80079b8:	2302      	movs	r3, #2
 80079ba:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	2204      	movs	r2, #4
 80079c2:	f7ff ffc7 	bl	8007954 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80079c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079cc:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <HAL_TIMEx_OCN_Start+0xb8>)
 80079d0:	4298      	cmp	r0, r3
 80079d2:	d01a      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079d4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80079d8:	d017      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079da:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 80079de:	4298      	cmp	r0, r3
 80079e0:	d013      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079e6:	4298      	cmp	r0, r3
 80079e8:	d00f      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ee:	4298      	cmp	r0, r3
 80079f0:	d00b      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079f2:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 80079f6:	4298      	cmp	r0, r3
 80079f8:	d007      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 80079fa:	f5a3 436c 	sub.w	r3, r3, #60416	@ 0xec00
 80079fe:	4298      	cmp	r0, r3
 8007a00:	d003      	beq.n	8007a0a <HAL_TIMEx_OCN_Start+0x9a>
 8007a02:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8007a06:	4298      	cmp	r0, r3
 8007a08:	d107      	bne.n	8007a1a <HAL_TIMEx_OCN_Start+0xaa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a0a:	6882      	ldr	r2, [r0, #8]
 8007a0c:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <HAL_TIMEx_OCN_Start+0xbc>)
 8007a0e:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a10:	2b06      	cmp	r3, #6
 8007a12:	d006      	beq.n	8007a22 <HAL_TIMEx_OCN_Start+0xb2>
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d003      	beq.n	8007a22 <HAL_TIMEx_OCN_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 8007a1a:	6803      	ldr	r3, [r0, #0]
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	6003      	str	r3, [r0, #0]
  return HAL_OK;
 8007a22:	2000      	movs	r0, #0
}
 8007a24:	bd08      	pop	{r3, pc}
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	00010007 	.word	0x00010007

08007a30 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8007a30:	f7ff bf9e 	b.w	8007970 <HAL_TIMEx_OCN_Start>

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8007a34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007a36:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d03b      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x86>
  tmpcr2 = htim->Instance->CR2;
 8007a42:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a44:	4d1d      	ldr	r5, [pc, #116]	@ (8007abc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007a46:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a4a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007a4c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007a4e:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a50:	d002      	beq.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8007a52:	4e1b      	ldr	r6, [pc, #108]	@ (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8007a54:	42b3      	cmp	r3, r6
 8007a56:	d103      	bne.n	8007a60 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a58:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a5c:	684e      	ldr	r6, [r1, #4]
 8007a5e:	4332      	orrs	r2, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a60:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a66:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a68:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8007a6c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6e:	d019      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a74:	d016      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a76:	4a13      	ldr	r2, [pc, #76]	@ (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d013      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00f      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00b      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a8c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d007      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a94:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d003      	beq.n	8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007a9c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d104      	bne.n	8007aae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aaa:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 8007aac:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007aae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007ab0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007ab6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400
 8007ac4:	40000400 	.word	0x40000400

08007ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8007ac8:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8007aca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8007ace:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d037      	beq.n	8007b44 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ad4:	68cb      	ldr	r3, [r1, #12]
 8007ad6:	6888      	ldr	r0, [r1, #8]
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007adc:	4c1a      	ldr	r4, [pc, #104]	@ (8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ade:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ae0:	6848      	ldr	r0, [r1, #4]
 8007ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ae6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ae8:	6808      	ldr	r0, [r1, #0]
 8007aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007aee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007af0:	6908      	ldr	r0, [r1, #16]
 8007af2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007af6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007af8:	6948      	ldr	r0, [r1, #20]
 8007afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007afe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b00:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8007b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b08:	6988      	ldr	r0, [r1, #24]
 8007b0a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8007b0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b12:	6810      	ldr	r0, [r2, #0]
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d003      	beq.n	8007b20 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 8007b18:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d10c      	bne.n	8007b3a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b20:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8007b22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b26:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b2a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b2c:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b32:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b34:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b38:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8007b3a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8007b42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8007b44:	2002      	movs	r0, #2
 8007b46:	e7fc      	b.n	8007b42 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8007b48:	40010000 	.word	0x40010000

08007b4c <HAL_TIMEx_CommutCallback>:
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007b4c:	4770      	bx	lr

08007b4e <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIMEx_Break2Callback>:
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007b50:	4770      	bx	lr
	...

08007b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b56:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	e852 3f00 	ldrex	r3, [r2]
 8007b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007b64:	6802      	ldr	r2, [r0, #0]
 8007b66:	2900      	cmp	r1, #0
 8007b68:	d1f5      	bne.n	8007b56 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b6a:	4c0f      	ldr	r4, [pc, #60]	@ (8007ba8 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	f102 0308 	add.w	r3, r2, #8
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	f102 0c08 	add.w	ip, r2, #8
 8007b7a:	e84c 3100 	strex	r1, r3, [ip]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d1f4      	bne.n	8007b6c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b82:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d107      	bne.n	8007b98 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	e842 3100 	strex	r1, r3, [r2]
 8007b94:	2900      	cmp	r1, #0
 8007b96:	d1f7      	bne.n	8007b88 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ba2:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	effffffe 	.word	0xeffffffe

08007bac <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007bac:	4770      	bx	lr

08007bae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bb0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bb8:	f7f8 ffc2 	bl	8000b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bbc:	bd08      	pop	{r3, pc}

08007bbe <HAL_UARTEx_RxEventCallback>:
}
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bc0:	6803      	ldr	r3, [r0, #0]
{
 8007bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bc6:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 8007bc8:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bcc:	681a      	ldr	r2, [r3, #0]
{
 8007bce:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8007bd0:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bd2:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8007bd4:	d110      	bne.n	8007bf8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bd6:	068e      	lsls	r6, r1, #26
 8007bd8:	f140 8097 	bpl.w	8007d0a <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bdc:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007be0:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 8007be4:	433e      	orrs	r6, r7
 8007be6:	f000 8090 	beq.w	8007d0a <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8007bea:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8085 	beq.w	8007cfc <HAL_UART_IRQHandler+0x13c>
}
 8007bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf6:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bf8:	4ea6      	ldr	r6, [pc, #664]	@ (8007e94 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bfa:	48a7      	ldr	r0, [pc, #668]	@ (8007e98 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bfc:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bfe:	4010      	ands	r0, r2
 8007c00:	4330      	orrs	r0, r6
 8007c02:	f000 8082 	beq.w	8007d0a <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c06:	07cf      	lsls	r7, r1, #31
 8007c08:	d509      	bpl.n	8007c1e <HAL_UART_IRQHandler+0x5e>
 8007c0a:	05d0      	lsls	r0, r2, #23
 8007c0c:	d507      	bpl.n	8007c1e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c0e:	2001      	movs	r0, #1
 8007c10:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c12:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007c16:	f040 0001 	orr.w	r0, r0, #1
 8007c1a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c1e:	078f      	lsls	r7, r1, #30
 8007c20:	d509      	bpl.n	8007c36 <HAL_UART_IRQHandler+0x76>
 8007c22:	07e8      	lsls	r0, r5, #31
 8007c24:	d507      	bpl.n	8007c36 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c26:	2002      	movs	r0, #2
 8007c28:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007c2e:	f040 0004 	orr.w	r0, r0, #4
 8007c32:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c36:	074f      	lsls	r7, r1, #29
 8007c38:	d509      	bpl.n	8007c4e <HAL_UART_IRQHandler+0x8e>
 8007c3a:	07e8      	lsls	r0, r5, #31
 8007c3c:	d507      	bpl.n	8007c4e <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c3e:	2004      	movs	r0, #4
 8007c40:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c42:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007c46:	f040 0002 	orr.w	r0, r0, #2
 8007c4a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c4e:	070f      	lsls	r7, r1, #28
 8007c50:	d50b      	bpl.n	8007c6a <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c52:	f002 0020 	and.w	r0, r2, #32
 8007c56:	4330      	orrs	r0, r6
 8007c58:	d007      	beq.n	8007c6a <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c5a:	2008      	movs	r0, #8
 8007c5c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c5e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007c62:	f040 0008 	orr.w	r0, r0, #8
 8007c66:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c6a:	050e      	lsls	r6, r1, #20
 8007c6c:	d50a      	bpl.n	8007c84 <HAL_UART_IRQHandler+0xc4>
 8007c6e:	0150      	lsls	r0, r2, #5
 8007c70:	d508      	bpl.n	8007c84 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c72:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007c76:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c78:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c84:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d037      	beq.n	8007cfc <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c8c:	068b      	lsls	r3, r1, #26
 8007c8e:	d509      	bpl.n	8007ca4 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c90:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c94:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8007c98:	432a      	orrs	r2, r5
 8007c9a:	d003      	beq.n	8007ca4 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8007c9c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007c9e:	b10b      	cbz	r3, 8007ca4 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ca4:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007ca6:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8007ca8:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cac:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cae:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb6:	ea53 0502 	orrs.w	r5, r3, r2
 8007cba:	d021      	beq.n	8007d00 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8007cbc:	f7ff ff4a 	bl	8007b54 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	68b3      	ldr	r3, [r6, #8]
 8007cc2:	065f      	lsls	r7, r3, #25
 8007cc4:	d517      	bpl.n	8007cf6 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	f102 0308 	add.w	r3, r2, #8
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	3208      	adds	r2, #8
 8007cd6:	e842 3100 	strex	r1, r3, [r2]
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	d1f3      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 8007cde:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007ce2:	b140      	cbz	r0, 8007cf6 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8007e9c <HAL_UART_IRQHandler+0x2dc>)
 8007ce6:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce8:	f7fc f8de 	bl	8003ea8 <HAL_DMA_Abort_IT>
 8007cec:	b130      	cbz	r0, 8007cfc <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cee:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007cf2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007cf4:	e77d      	b.n	8007bf2 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f7f8 ff22 	bl	8000b40 <HAL_UART_ErrorCallback>
}
 8007cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8007d00:	f7f8 ff1e 	bl	8000b40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8007d08:	e7f8      	b.n	8007cfc <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d0a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007d0c:	2801      	cmp	r0, #1
 8007d0e:	f040 80b5 	bne.w	8007e7c <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d12:	06ce      	lsls	r6, r1, #27
 8007d14:	f140 80b2 	bpl.w	8007e7c <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d18:	06d0      	lsls	r0, r2, #27
 8007d1a:	f140 80af 	bpl.w	8007e7c <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d1e:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d20:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d24:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	0652      	lsls	r2, r2, #25
 8007d2a:	d577      	bpl.n	8007e1c <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2c:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8007d30:	495b      	ldr	r1, [pc, #364]	@ (8007ea0 <HAL_UART_IRQHandler+0x2e0>)
 8007d32:	682a      	ldr	r2, [r5, #0]
 8007d34:	428a      	cmp	r2, r1
 8007d36:	d01e      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d38:	3118      	adds	r1, #24
 8007d3a:	428a      	cmp	r2, r1
 8007d3c:	d01b      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d3e:	3118      	adds	r1, #24
 8007d40:	428a      	cmp	r2, r1
 8007d42:	d018      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d44:	3118      	adds	r1, #24
 8007d46:	428a      	cmp	r2, r1
 8007d48:	d015      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d4a:	3118      	adds	r1, #24
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	d012      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d50:	3118      	adds	r1, #24
 8007d52:	428a      	cmp	r2, r1
 8007d54:	d00f      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d56:	3118      	adds	r1, #24
 8007d58:	428a      	cmp	r2, r1
 8007d5a:	d00c      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d5c:	3118      	adds	r1, #24
 8007d5e:	428a      	cmp	r2, r1
 8007d60:	d009      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d62:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8007d66:	428a      	cmp	r2, r1
 8007d68:	d005      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d6a:	3118      	adds	r1, #24
 8007d6c:	428a      	cmp	r2, r1
 8007d6e:	d002      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d70:	3118      	adds	r1, #24
 8007d72:	428a      	cmp	r2, r1
 8007d74:	d0ff      	beq.n	8007d76 <HAL_UART_IRQHandler+0x1b6>
 8007d76:	6851      	ldr	r1, [r2, #4]
 8007d78:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	d043      	beq.n	8007e06 <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d7e:	4281      	cmp	r1, r0
 8007d80:	d241      	bcs.n	8007e06 <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d82:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8007d84:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d88:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8007d8c:	d02f      	beq.n	8007dee <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	e843 2100 	strex	r1, r2, [r3]
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d1f7      	bne.n	8007d8e <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	f103 0208 	add.w	r2, r3, #8
 8007da2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	f103 0008 	add.w	r0, r3, #8
 8007dae:	e840 2100 	strex	r1, r2, [r0]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d1f3      	bne.n	8007d9e <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	f103 0208 	add.w	r2, r3, #8
 8007dba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	f103 0008 	add.w	r0, r3, #8
 8007dc6:	e840 2100 	strex	r1, r2, [r0]
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d1f3      	bne.n	8007db6 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd4:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dda:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	e843 2100 	strex	r1, r2, [r3]
 8007de2:	2900      	cmp	r1, #0
 8007de4:	d1f7      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007de6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007dea:	f7fb ff49 	bl	8003c80 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dee:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007df0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007df6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007dfa:	1ac9      	subs	r1, r1, r3
 8007dfc:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7ff fedd 	bl	8007bbe <HAL_UARTEx_RxEventCallback>
 8007e04:	e77a      	b.n	8007cfc <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007e06:	4281      	cmp	r1, r0
 8007e08:	f47f af78 	bne.w	8007cfc <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007e0c:	69eb      	ldr	r3, [r5, #28]
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e12:	f47f af73 	bne.w	8007cfc <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e16:	2302      	movs	r3, #2
 8007e18:	6723      	str	r3, [r4, #112]	@ 0x70
 8007e1a:	e7f0      	b.n	8007dfe <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e1c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8007e20:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e24:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007e26:	b289      	uxth	r1, r1
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	f43f af67 	beq.w	8007cfc <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e2e:	1a80      	subs	r0, r0, r2
 8007e30:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8007e32:	2900      	cmp	r1, #0
 8007e34:	f43f af62 	beq.w	8007cfc <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e3c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	e843 2000 	strex	r0, r2, [r3]
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1f7      	bne.n	8007e38 <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e48:	4d16      	ldr	r5, [pc, #88]	@ (8007ea4 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	f103 0208 	add.w	r2, r3, #8
 8007e4e:	e852 2f00 	ldrex	r2, [r2]
 8007e52:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	f103 0608 	add.w	r6, r3, #8
 8007e58:	e846 2000 	strex	r0, r2, [r6]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d1f4      	bne.n	8007e4a <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 8007e60:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8007e62:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e64:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e68:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	e843 2000 	strex	r0, r2, [r3]
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d1f7      	bne.n	8007e6a <HAL_UART_IRQHandler+0x2aa>
 8007e7a:	e7cc      	b.n	8007e16 <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e7c:	02cf      	lsls	r7, r1, #11
 8007e7e:	d513      	bpl.n	8007ea8 <HAL_UART_IRQHandler+0x2e8>
 8007e80:	026e      	lsls	r6, r5, #9
 8007e82:	d511      	bpl.n	8007ea8 <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8007e88:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007e90:	f000 be18 	b.w	8008ac4 <HAL_UARTEx_WakeupCallback>
 8007e94:	10000001 	.word	0x10000001
 8007e98:	04000120 	.word	0x04000120
 8007e9c:	08007baf 	.word	0x08007baf
 8007ea0:	40020010 	.word	0x40020010
 8007ea4:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ea8:	0608      	lsls	r0, r1, #24
 8007eaa:	d50b      	bpl.n	8007ec4 <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007eac:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007eb0:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 8007eb4:	4328      	orrs	r0, r5
 8007eb6:	d005      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 8007eb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f43f af1e 	beq.w	8007cfc <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	e696      	b.n	8007bf2 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec4:	064f      	lsls	r7, r1, #25
 8007ec6:	d511      	bpl.n	8007eec <HAL_UART_IRQHandler+0x32c>
 8007ec8:	0656      	lsls	r6, r2, #25
 8007eca:	d50f      	bpl.n	8007eec <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	e843 2100 	strex	r1, r2, [r3]
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	d1f7      	bne.n	8007ecc <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007edc:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ede:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8007ee0:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 8007ee6:	f7ff fe61 	bl	8007bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eea:	e707      	b.n	8007cfc <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007eec:	020d      	lsls	r5, r1, #8
 8007eee:	d506      	bpl.n	8007efe <HAL_UART_IRQHandler+0x33e>
 8007ef0:	0050      	lsls	r0, r2, #1
 8007ef2:	d504      	bpl.n	8007efe <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ef4:	4620      	mov	r0, r4
}
 8007ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007efa:	f000 bde5 	b.w	8008ac8 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007efe:	01cb      	lsls	r3, r1, #7
 8007f00:	f57f aefc 	bpl.w	8007cfc <HAL_UART_IRQHandler+0x13c>
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f6bf aef9 	bge.w	8007cfc <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f0a:	4620      	mov	r0, r4
}
 8007f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f10:	f000 bdd9 	b.w	8008ac6 <HAL_UARTEx_RxFifoFullCallback>

08007f14 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f14:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8007f18:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1c:	2a22      	cmp	r2, #34	@ 0x22
{
 8007f1e:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f20:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f22:	d155      	bne.n	8007fd0 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f26:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007f28:	400b      	ands	r3, r1
 8007f2a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007f2c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007f2e:	3301      	adds	r3, #1
 8007f30:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007f32:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f3e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d142      	bne.n	8007fce <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	e852 3f00 	ldrex	r3, [r2]
 8007f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007f56:	6803      	ldr	r3, [r0, #0]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d1f5      	bne.n	8007f48 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	f103 0208 	add.w	r2, r3, #8
 8007f60:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f64:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	f103 0c08 	add.w	ip, r3, #8
 8007f6c:	e84c 2100 	strex	r1, r2, [ip]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d1f3      	bne.n	8007f5c <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f74:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f76:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 8007f78:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f7c:	4a17      	ldr	r2, [pc, #92]	@ (8007fdc <UART_RxISR_8BIT+0xc8>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f7e:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d105      	bne.n	8007f90 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f84:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8007f86:	2a01      	cmp	r2, #1
 8007f88:	d00e      	beq.n	8007fa8 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f8a:	f7f8 fd87 	bl	8000a9c <HAL_UART_RxCpltCallback>
 8007f8e:	e01e      	b.n	8007fce <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	0211      	lsls	r1, r2, #8
 8007f94:	d5f6      	bpl.n	8007f84 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f9a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	e843 2100 	strex	r1, r2, [r3]
 8007fa2:	2900      	cmp	r1, #0
 8007fa4:	d1f7      	bne.n	8007f96 <UART_RxISR_8BIT+0x82>
 8007fa6:	e7ed      	b.n	8007f84 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	e843 2100 	strex	r1, r2, [r3]
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d1f7      	bne.n	8007fac <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fbc:	69da      	ldr	r2, [r3, #28]
 8007fbe:	06d2      	lsls	r2, r2, #27
 8007fc0:	d501      	bpl.n	8007fc6 <UART_RxISR_8BIT+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fc2:	2210      	movs	r2, #16
 8007fc4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fc6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8007fca:	f7ff fdf8 	bl	8007bbe <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fce:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	f042 0208 	orr.w	r2, r2, #8
 8007fd6:	619a      	str	r2, [r3, #24]
}
 8007fd8:	e7f9      	b.n	8007fce <UART_RxISR_8BIT+0xba>
 8007fda:	bf00      	nop
 8007fdc:	58000c00 	.word	0x58000c00

08007fe0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fe0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8007fe4:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fe8:	2a22      	cmp	r2, #34	@ 0x22
{
 8007fea:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fec:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fee:	d152      	bne.n	8008096 <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ff2:	4011      	ands	r1, r2
 8007ff4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8007ff6:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 8007ffa:	6582      	str	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8007ffc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8008000:	3a01      	subs	r2, #1
 8008002:	b292      	uxth	r2, r2
 8008004:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008008:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 800800c:	b292      	uxth	r2, r2
 800800e:	2a00      	cmp	r2, #0
 8008010:	d140      	bne.n	8008094 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008016:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	e843 2100 	strex	r1, r2, [r3]
 800801e:	2900      	cmp	r1, #0
 8008020:	d1f7      	bne.n	8008012 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	f103 0208 	add.w	r2, r3, #8
 8008026:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	f103 0c08 	add.w	ip, r3, #8
 8008032:	e84c 2100 	strex	r1, r2, [ip]
 8008036:	2900      	cmp	r1, #0
 8008038:	d1f3      	bne.n	8008022 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800803a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800803c:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxState = HAL_UART_STATE_READY;
 800803e:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008042:	4a17      	ldr	r2, [pc, #92]	@ (80080a0 <UART_RxISR_16BIT+0xc0>)
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008044:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008046:	4293      	cmp	r3, r2
 8008048:	d105      	bne.n	8008056 <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800804c:	2a01      	cmp	r2, #1
 800804e:	d00e      	beq.n	800806e <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008050:	f7f8 fd24 	bl	8000a9c <HAL_UART_RxCpltCallback>
 8008054:	e01e      	b.n	8008094 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	0211      	lsls	r1, r2, #8
 800805a:	d5f6      	bpl.n	800804a <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008060:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	e843 2100 	strex	r1, r2, [r3]
 8008068:	2900      	cmp	r1, #0
 800806a:	d1f7      	bne.n	800805c <UART_RxISR_16BIT+0x7c>
 800806c:	e7ed      	b.n	800804a <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	2200      	movs	r2, #0
 8008070:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008076:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	e843 2100 	strex	r1, r2, [r3]
 800807e:	2900      	cmp	r1, #0
 8008080:	d1f7      	bne.n	8008072 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	06d2      	lsls	r2, r2, #27
 8008086:	d501      	bpl.n	800808c <UART_RxISR_16BIT+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008088:	2210      	movs	r2, #16
 800808a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008090:	f7ff fd95 	bl	8007bbe <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008094:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	f042 0208 	orr.w	r2, r2, #8
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	e7f9      	b.n	8008094 <UART_RxISR_16BIT+0xb4>
 80080a0:	58000c00 	.word	0x58000c00

080080a4 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080a4:	6803      	ldr	r3, [r0, #0]
{
 80080a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080aa:	69dd      	ldr	r5, [r3, #28]
{
 80080ac:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080ae:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080b2:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 80080b8:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080bc:	2a22      	cmp	r2, #34	@ 0x22
 80080be:	f040 80b5 	bne.w	800822c <UART_RxISR_8BIT_FIFOEN+0x188>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080c2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 808b 	beq.w	80081e2 <UART_RxISR_8BIT_FIFOEN+0x13e>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080d0:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080d4:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080d8:	06ab      	lsls	r3, r5, #26
 80080da:	f140 8082 	bpl.w	80081e2 <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080de:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080e0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080e4:	403b      	ands	r3, r7
 80080e6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80080e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080ea:	3301      	adds	r3, #1
 80080ec:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80080ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080fe:	0768      	lsls	r0, r5, #29
 8008100:	d02a      	beq.n	8008158 <UART_RxISR_8BIT_FIFOEN+0xb4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008102:	07e9      	lsls	r1, r5, #31
 8008104:	d50a      	bpl.n	800811c <UART_RxISR_8BIT_FIFOEN+0x78>
 8008106:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800810a:	d007      	beq.n	800811c <UART_RxISR_8BIT_FIFOEN+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810c:	2201      	movs	r2, #1
 800810e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008110:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008114:	f042 0201 	orr.w	r2, r2, #1
 8008118:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811c:	07aa      	lsls	r2, r5, #30
 800811e:	d508      	bpl.n	8008132 <UART_RxISR_8BIT_FIFOEN+0x8e>
 8008120:	b13e      	cbz	r6, 8008132 <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008122:	2202      	movs	r2, #2
 8008124:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008126:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800812a:	f042 0204 	orr.w	r2, r2, #4
 800812e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008132:	0768      	lsls	r0, r5, #29
 8008134:	d508      	bpl.n	8008148 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8008136:	b13e      	cbz	r6, 8008148 <UART_RxISR_8BIT_FIFOEN+0xa4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008138:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800813c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008140:	f043 0302 	orr.w	r3, r3, #2
 8008144:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008148:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800814c:	b123      	cbz	r3, 8008158 <UART_RxISR_8BIT_FIFOEN+0xb4>
          HAL_UART_ErrorCallback(huart);
 800814e:	4620      	mov	r0, r4
 8008150:	f7f8 fcf6 	bl	8000b40 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008158:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1ba      	bne.n	80080d8 <UART_RxISR_8BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008162:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	e852 3f00 	ldrex	r3, [r2]
 8008168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	2900      	cmp	r1, #0
 8008174:	d1f5      	bne.n	8008162 <UART_RxISR_8BIT_FIFOEN+0xbe>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008176:	4830      	ldr	r0, [pc, #192]	@ (8008238 <UART_RxISR_8BIT_FIFOEN+0x194>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	f103 0208 	add.w	r2, r3, #8
 800817c:	e852 2f00 	ldrex	r2, [r2]
 8008180:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	f103 0508 	add.w	r5, r3, #8
 8008186:	e845 2100 	strex	r1, r2, [r5]
 800818a:	2900      	cmp	r1, #0
 800818c:	d1f4      	bne.n	8008178 <UART_RxISR_8BIT_FIFOEN+0xd4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800818e:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008190:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008192:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008196:	4a29      	ldr	r2, [pc, #164]	@ (800823c <UART_RxISR_8BIT_FIFOEN+0x198>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008198:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800819a:	4293      	cmp	r3, r2
 800819c:	d00a      	beq.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	0211      	lsls	r1, r2, #8
 80081a2:	d507      	bpl.n	80081b4 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	e843 2100 	strex	r1, r2, [r3]
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d1f7      	bne.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0x100>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	d134      	bne.n	8008224 <UART_RxISR_8BIT_FIFOEN+0x180>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	2200      	movs	r2, #0
 80081bc:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	e843 2100 	strex	r1, r2, [r3]
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d1f7      	bne.n	80081be <UART_RxISR_8BIT_FIFOEN+0x11a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	06d2      	lsls	r2, r2, #27
 80081d2:	d501      	bpl.n	80081d8 <UART_RxISR_8BIT_FIFOEN+0x134>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081d4:	2210      	movs	r2, #16
 80081d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80081dc:	4620      	mov	r0, r4
 80081de:	f7ff fcee 	bl	8007bbe <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081e2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80081e6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081e8:	b1d3      	cbz	r3, 8008220 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80081ea:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d916      	bls.n	8008220 <UART_RxISR_8BIT_FIFOEN+0x17c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	f102 0308 	add.w	r3, r2, #8
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	3208      	adds	r2, #8
 8008202:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008206:	6822      	ldr	r2, [r4, #0]
 8008208:	2900      	cmp	r1, #0
 800820a:	d1f2      	bne.n	80081f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800820c:	4b0c      	ldr	r3, [pc, #48]	@ (8008240 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800820e:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008214:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	e842 3100 	strex	r1, r3, [r2]
 800821c:	2900      	cmp	r1, #0
 800821e:	d1f7      	bne.n	8008210 <UART_RxISR_8BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 8008224:	4620      	mov	r0, r4
 8008226:	f7f8 fc39 	bl	8000a9c <HAL_UART_RxCpltCallback>
 800822a:	e7da      	b.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x13e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	f042 0208 	orr.w	r2, r2, #8
 8008232:	619a      	str	r2, [r3, #24]
}
 8008234:	e7f4      	b.n	8008220 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8008236:	bf00      	nop
 8008238:	effffffe 	.word	0xeffffffe
 800823c:	58000c00 	.word	0x58000c00
 8008240:	08007f15 	.word	0x08007f15

08008244 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008244:	6803      	ldr	r3, [r0, #0]
{
 8008246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800824a:	69dd      	ldr	r5, [r3, #28]
{
 800824c:	4604      	mov	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800824e:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008252:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008254:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8008258:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800825c:	2a22      	cmp	r2, #34	@ 0x22
 800825e:	f040 80b2 	bne.w	80083c6 <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008262:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 8088 	beq.w	800837c <UART_RxISR_16BIT_FIFOEN+0x138>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008270:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008274:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008278:	06ab      	lsls	r3, r5, #26
 800827a:	d57f      	bpl.n	800837c <UART_RxISR_16BIT_FIFOEN+0x138>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800827c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800827e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008280:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008282:	4039      	ands	r1, r7
 8008284:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8008288:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800828a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 800828e:	3a01      	subs	r2, #1
 8008290:	b292      	uxth	r2, r2
 8008292:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008296:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008298:	0768      	lsls	r0, r5, #29
 800829a:	d02a      	beq.n	80082f2 <UART_RxISR_16BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800829c:	07e9      	lsls	r1, r5, #31
 800829e:	d50a      	bpl.n	80082b6 <UART_RxISR_16BIT_FIFOEN+0x72>
 80082a0:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80082a4:	d007      	beq.n	80082b6 <UART_RxISR_16BIT_FIFOEN+0x72>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082a6:	2201      	movs	r2, #1
 80082a8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b6:	07aa      	lsls	r2, r5, #30
 80082b8:	d508      	bpl.n	80082cc <UART_RxISR_16BIT_FIFOEN+0x88>
 80082ba:	b13e      	cbz	r6, 80082cc <UART_RxISR_16BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082bc:	2202      	movs	r2, #2
 80082be:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80082c4:	f042 0204 	orr.w	r2, r2, #4
 80082c8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082cc:	0768      	lsls	r0, r5, #29
 80082ce:	d508      	bpl.n	80082e2 <UART_RxISR_16BIT_FIFOEN+0x9e>
 80082d0:	b13e      	cbz	r6, 80082e2 <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082d2:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80082e6:	b123      	cbz	r3, 80082f2 <UART_RxISR_16BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7f8 fc29 	bl	8000b40 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ee:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80082f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1bd      	bne.n	8008278 <UART_RxISR_16BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	e852 3f00 	ldrex	r3, [r2]
 8008302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	2900      	cmp	r1, #0
 800830e:	d1f5      	bne.n	80082fc <UART_RxISR_16BIT_FIFOEN+0xb8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008310:	482f      	ldr	r0, [pc, #188]	@ (80083d0 <UART_RxISR_16BIT_FIFOEN+0x18c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	f103 0208 	add.w	r2, r3, #8
 8008316:	e852 2f00 	ldrex	r2, [r2]
 800831a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	f103 0508 	add.w	r5, r3, #8
 8008320:	e845 2100 	strex	r1, r2, [r5]
 8008324:	2900      	cmp	r1, #0
 8008326:	d1f4      	bne.n	8008312 <UART_RxISR_16BIT_FIFOEN+0xce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008328:	2220      	movs	r2, #32

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800832a:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800832c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008330:	4a28      	ldr	r2, [pc, #160]	@ (80083d4 <UART_RxISR_16BIT_FIFOEN+0x190>)
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008332:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008334:	4293      	cmp	r3, r2
 8008336:	d00a      	beq.n	800834e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	0211      	lsls	r1, r2, #8
 800833c:	d507      	bpl.n	800834e <UART_RxISR_16BIT_FIFOEN+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008342:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	e843 2100 	strex	r1, r2, [r3]
 800834a:	2900      	cmp	r1, #0
 800834c:	d1f7      	bne.n	800833e <UART_RxISR_16BIT_FIFOEN+0xfa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008350:	2a01      	cmp	r2, #1
 8008352:	d134      	bne.n	80083be <UART_RxISR_16BIT_FIFOEN+0x17a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008354:	2200      	movs	r2, #0
 8008356:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	e843 2100 	strex	r1, r2, [r3]
 8008364:	2900      	cmp	r1, #0
 8008366:	d1f7      	bne.n	8008358 <UART_RxISR_16BIT_FIFOEN+0x114>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008368:	69da      	ldr	r2, [r3, #28]
 800836a:	06d2      	lsls	r2, r2, #27
 800836c:	d501      	bpl.n	8008372 <UART_RxISR_16BIT_FIFOEN+0x12e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800836e:	2210      	movs	r2, #16
 8008370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008372:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fc21 	bl	8007bbe <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800837c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008380:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008382:	b1d3      	cbz	r3, 80083ba <UART_RxISR_16BIT_FIFOEN+0x176>
 8008384:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008388:	429a      	cmp	r2, r3
 800838a:	d916      	bls.n	80083ba <UART_RxISR_16BIT_FIFOEN+0x176>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800838c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	f102 0308 	add.w	r3, r2, #8
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	3208      	adds	r2, #8
 800839c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80083a0:	6822      	ldr	r2, [r4, #0]
 80083a2:	2900      	cmp	r1, #0
 80083a4:	d1f2      	bne.n	800838c <UART_RxISR_16BIT_FIFOEN+0x148>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083a6:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <UART_RxISR_16BIT_FIFOEN+0x194>)
 80083a8:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083ae:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	e842 3100 	strex	r1, r3, [r2]
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d1f7      	bne.n	80083aa <UART_RxISR_16BIT_FIFOEN+0x166>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 80083be:	4620      	mov	r0, r4
 80083c0:	f7f8 fb6c 	bl	8000a9c <HAL_UART_RxCpltCallback>
 80083c4:	e7da      	b.n	800837c <UART_RxISR_16BIT_FIFOEN+0x138>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	f042 0208 	orr.w	r2, r2, #8
 80083cc:	619a      	str	r2, [r3, #24]
}
 80083ce:	e7f4      	b.n	80083ba <UART_RxISR_16BIT_FIFOEN+0x176>
 80083d0:	effffffe 	.word	0xeffffffe
 80083d4:	58000c00 	.word	0x58000c00
 80083d8:	08007fe1 	.word	0x08007fe1

080083dc <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083dc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083de:	69c3      	ldr	r3, [r0, #28]
 80083e0:	6881      	ldr	r1, [r0, #8]
{
 80083e2:	b530      	push	{r4, r5, lr}
 80083e4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083e6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083e8:	6815      	ldr	r5, [r2, #0]
{
 80083ea:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083ec:	4301      	orrs	r1, r0
 80083ee:	6960      	ldr	r0, [r4, #20]
 80083f0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f2:	48a5      	ldr	r0, [pc, #660]	@ (8008688 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f6:	4028      	ands	r0, r5
 80083f8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083fc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083fe:	6851      	ldr	r1, [r2, #4]
 8008400:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8008404:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008406:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008408:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800840a:	49a0      	ldr	r1, [pc, #640]	@ (800868c <UART_SetConfig+0x2b0>)
 800840c:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 800840e:	bf1c      	itt	ne
 8008410:	6a21      	ldrne	r1, [r4, #32]
 8008412:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008414:	6891      	ldr	r1, [r2, #8]
 8008416:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800841a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800841e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008420:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008422:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008424:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008426:	f021 010f 	bic.w	r1, r1, #15
 800842a:	4301      	orrs	r1, r0
 800842c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800842e:	4998      	ldr	r1, [pc, #608]	@ (8008690 <UART_SetConfig+0x2b4>)
 8008430:	428a      	cmp	r2, r1
 8008432:	d112      	bne.n	800845a <UART_SetConfig+0x7e>
 8008434:	4a97      	ldr	r2, [pc, #604]	@ (8008694 <UART_SetConfig+0x2b8>)
 8008436:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008438:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800843c:	2a18      	cmp	r2, #24
 800843e:	f000 8101 	beq.w	8008644 <UART_SetConfig+0x268>
 8008442:	d83b      	bhi.n	80084bc <UART_SetConfig+0xe0>
 8008444:	2a08      	cmp	r2, #8
 8008446:	f000 80f5 	beq.w	8008634 <UART_SetConfig+0x258>
 800844a:	2a10      	cmp	r2, #16
 800844c:	f000 813a 	beq.w	80086c4 <UART_SetConfig+0x2e8>
 8008450:	2a00      	cmp	r2, #0
 8008452:	f000 80e9 	beq.w	8008628 <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 8008456:	2001      	movs	r0, #1
 8008458:	e06a      	b.n	8008530 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800845a:	498f      	ldr	r1, [pc, #572]	@ (8008698 <UART_SetConfig+0x2bc>)
 800845c:	428a      	cmp	r2, r1
 800845e:	d10d      	bne.n	800847c <UART_SetConfig+0xa0>
 8008460:	4a8c      	ldr	r2, [pc, #560]	@ (8008694 <UART_SetConfig+0x2b8>)
 8008462:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008464:	f002 0207 	and.w	r2, r2, #7
 8008468:	2a05      	cmp	r2, #5
 800846a:	d8f4      	bhi.n	8008456 <UART_SetConfig+0x7a>
 800846c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008470:	00e2007e 	.word	0x00e2007e
 8008474:	00ea012a 	.word	0x00ea012a
 8008478:	002b0107 	.word	0x002b0107
 800847c:	4987      	ldr	r1, [pc, #540]	@ (800869c <UART_SetConfig+0x2c0>)
 800847e:	428a      	cmp	r2, r1
 8008480:	d0ee      	beq.n	8008460 <UART_SetConfig+0x84>
 8008482:	4987      	ldr	r1, [pc, #540]	@ (80086a0 <UART_SetConfig+0x2c4>)
 8008484:	428a      	cmp	r2, r1
 8008486:	d0eb      	beq.n	8008460 <UART_SetConfig+0x84>
 8008488:	4986      	ldr	r1, [pc, #536]	@ (80086a4 <UART_SetConfig+0x2c8>)
 800848a:	428a      	cmp	r2, r1
 800848c:	d0e8      	beq.n	8008460 <UART_SetConfig+0x84>
 800848e:	4986      	ldr	r1, [pc, #536]	@ (80086a8 <UART_SetConfig+0x2cc>)
 8008490:	428a      	cmp	r2, r1
 8008492:	d0cf      	beq.n	8008434 <UART_SetConfig+0x58>
 8008494:	4985      	ldr	r1, [pc, #532]	@ (80086ac <UART_SetConfig+0x2d0>)
 8008496:	428a      	cmp	r2, r1
 8008498:	d0e2      	beq.n	8008460 <UART_SetConfig+0x84>
 800849a:	4985      	ldr	r1, [pc, #532]	@ (80086b0 <UART_SetConfig+0x2d4>)
 800849c:	428a      	cmp	r2, r1
 800849e:	d0df      	beq.n	8008460 <UART_SetConfig+0x84>
 80084a0:	4b7a      	ldr	r3, [pc, #488]	@ (800868c <UART_SetConfig+0x2b0>)
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d1d7      	bne.n	8008456 <UART_SetConfig+0x7a>
 80084a6:	4a7b      	ldr	r2, [pc, #492]	@ (8008694 <UART_SetConfig+0x2b8>)
 80084a8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d8d1      	bhi.n	8008456 <UART_SetConfig+0x7a>
 80084b2:	e8df f003 	tbb	[pc, r3]
 80084b6:	4538      	.short	0x4538
 80084b8:	0f594f4a 	.word	0x0f594f4a
 80084bc:	2a20      	cmp	r2, #32
 80084be:	f000 80de 	beq.w	800867e <UART_SetConfig+0x2a2>
 80084c2:	2a28      	cmp	r2, #40	@ 0x28
 80084c4:	d1c7      	bne.n	8008456 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ca:	f000 808a 	beq.w	80085e2 <UART_SetConfig+0x206>
 80084ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80084d2:	e0c4      	b.n	800865e <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 80084d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084d8:	4b76      	ldr	r3, [pc, #472]	@ (80086b4 <UART_SetConfig+0x2d8>)
 80084da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084dc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084e2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084e6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ea:	4299      	cmp	r1, r3
 80084ec:	d8b3      	bhi.n	8008456 <UART_SetConfig+0x7a>
 80084ee:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80084f2:	d8b0      	bhi.n	8008456 <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	2300      	movs	r3, #0
 80084f6:	4619      	mov	r1, r3
 80084f8:	f7f7 ff4a 	bl	8000390 <__aeabi_uldivmod>
 80084fc:	462a      	mov	r2, r5
 80084fe:	0209      	lsls	r1, r1, #8
 8008500:	086b      	lsrs	r3, r5, #1
 8008502:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008506:	0200      	lsls	r0, r0, #8
 8008508:	18c0      	adds	r0, r0, r3
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	f141 0100 	adc.w	r1, r1, #0
 8008512:	f7f7 ff3d 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008516:	4b68      	ldr	r3, [pc, #416]	@ (80086b8 <UART_SetConfig+0x2dc>)
 8008518:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800851c:	429a      	cmp	r2, r3
 800851e:	d89a      	bhi.n	8008456 <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	60d8      	str	r0, [r3, #12]
 8008524:	e003      	b.n	800852e <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008526:	f7fd fe75 	bl	8006214 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800852a:	2800      	cmp	r0, #0
 800852c:	d1d4      	bne.n	80084d8 <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 800852e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8008530:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8008534:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8008536:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008538:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800853c:	b007      	add	sp, #28
 800853e:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008540:	4668      	mov	r0, sp
 8008542:	f7fd fe79 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008546:	9801      	ldr	r0, [sp, #4]
        break;
 8008548:	e7ef      	b.n	800852a <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854a:	a803      	add	r0, sp, #12
 800854c:	f7fd ff1e 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008550:	9804      	ldr	r0, [sp, #16]
        break;
 8008552:	e7ea      	b.n	800852a <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008554:	6813      	ldr	r3, [r2, #0]
 8008556:	4859      	ldr	r0, [pc, #356]	@ (80086bc <UART_SetConfig+0x2e0>)
 8008558:	f013 0f20 	tst.w	r3, #32
 800855c:	d0bc      	beq.n	80084d8 <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008564:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8008566:	e7b7      	b.n	80084d8 <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 8008568:	4855      	ldr	r0, [pc, #340]	@ (80086c0 <UART_SetConfig+0x2e4>)
 800856a:	e7b5      	b.n	80084d8 <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008570:	d155      	bne.n	800861e <UART_SetConfig+0x242>
 8008572:	2300      	movs	r3, #0
    switch (clocksource)
 8008574:	2b08      	cmp	r3, #8
 8008576:	f63f af6e 	bhi.w	8008456 <UART_SetConfig+0x7a>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <UART_SetConfig+0x1a4>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085b9 	.word	0x080085b9
 8008588:	08008457 	.word	0x08008457
 800858c:	08008457 	.word	0x08008457
 8008590:	080085bf 	.word	0x080085bf
 8008594:	08008457 	.word	0x08008457
 8008598:	08008457 	.word	0x08008457
 800859c:	08008457 	.word	0x08008457
 80085a0:	080085c9 	.word	0x080085c9
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a4:	2304      	movs	r3, #4
 80085a6:	e7e5      	b.n	8008574 <UART_SetConfig+0x198>
 80085a8:	2308      	movs	r3, #8
 80085aa:	e7e3      	b.n	8008574 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ac:	f7fd f812 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b0:	4603      	mov	r3, r0
    if (pclk != 0U)
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0bb      	beq.n	800852e <UART_SetConfig+0x152>
 80085b6:	e014      	b.n	80085e2 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b8:	f7fd f81e 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 80085bc:	e7f8      	b.n	80085b0 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085be:	4668      	mov	r0, sp
 80085c0:	f7fd fe3a 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085c4:	9b01      	ldr	r3, [sp, #4]
        break;
 80085c6:	e7f4      	b.n	80085b2 <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c8:	a803      	add	r0, sp, #12
 80085ca:	f7fd fedf 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085ce:	9b04      	ldr	r3, [sp, #16]
        break;
 80085d0:	e7ef      	b.n	80085b2 <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d2:	f013 0f20 	tst.w	r3, #32
 80085d6:	4b39      	ldr	r3, [pc, #228]	@ (80086bc <UART_SetConfig+0x2e0>)
 80085d8:	d003      	beq.n	80085e2 <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80085e0:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80085e4:	4a33      	ldr	r2, [pc, #204]	@ (80086b4 <UART_SetConfig+0x2d8>)
 80085e6:	6861      	ldr	r1, [r4, #4]
 80085e8:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80085ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f0:	084a      	lsrs	r2, r1, #1
 80085f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085fa:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085fe:	f1a3 0110 	sub.w	r1, r3, #16
 8008602:	4291      	cmp	r1, r2
 8008604:	f63f af27 	bhi.w	8008456 <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008608:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800860c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008610:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008612:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8008614:	4313      	orrs	r3, r2
 8008616:	60cb      	str	r3, [r1, #12]
 8008618:	e789      	b.n	800852e <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800861a:	4b29      	ldr	r3, [pc, #164]	@ (80086c0 <UART_SetConfig+0x2e4>)
 800861c:	e7e1      	b.n	80085e2 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 800861e:	f7fc ffd9 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008622:	2800      	cmp	r0, #0
 8008624:	d083      	beq.n	800852e <UART_SetConfig+0x152>
 8008626:	e01a      	b.n	800865e <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800862c:	d0c4      	beq.n	80085b8 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800862e:	f7fc ffe3 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8008632:	e7f6      	b.n	8008622 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008638:	d0b4      	beq.n	80085a4 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	4668      	mov	r0, sp
 800863c:	f7fd fdfc 	bl	8006238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008640:	9801      	ldr	r0, [sp, #4]
        break;
 8008642:	e7ee      	b.n	8008622 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008648:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864a:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800864c:	d0c1      	beq.n	80085d2 <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800864e:	f013 0f20 	tst.w	r3, #32
 8008652:	481a      	ldr	r0, [pc, #104]	@ (80086bc <UART_SetConfig+0x2e0>)
 8008654:	d003      	beq.n	800865e <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008656:	6813      	ldr	r3, [r2, #0]
 8008658:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800865c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800865e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008660:	4a14      	ldr	r2, [pc, #80]	@ (80086b4 <UART_SetConfig+0x2d8>)
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008668:	fbb0 f0f2 	udiv	r0, r0, r2
 800866c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008670:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008674:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8008678:	f1a0 0210 	sub.w	r2, r0, #16
 800867c:	e74e      	b.n	800851c <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800867e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008682:	d0ca      	beq.n	800861a <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 8008684:	480e      	ldr	r0, [pc, #56]	@ (80086c0 <UART_SetConfig+0x2e4>)
 8008686:	e7ea      	b.n	800865e <UART_SetConfig+0x282>
 8008688:	cfff69f3 	.word	0xcfff69f3
 800868c:	58000c00 	.word	0x58000c00
 8008690:	40011000 	.word	0x40011000
 8008694:	58024400 	.word	0x58024400
 8008698:	40004400 	.word	0x40004400
 800869c:	40004800 	.word	0x40004800
 80086a0:	40004c00 	.word	0x40004c00
 80086a4:	40005000 	.word	0x40005000
 80086a8:	40011400 	.word	0x40011400
 80086ac:	40007800 	.word	0x40007800
 80086b0:	40007c00 	.word	0x40007c00
 80086b4:	08014528 	.word	0x08014528
 80086b8:	000ffcff 	.word	0x000ffcff
 80086bc:	03d09000 	.word	0x03d09000
 80086c0:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086c8:	f43f af6e 	beq.w	80085a8 <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086cc:	a803      	add	r0, sp, #12
 80086ce:	f7fd fe5d 	bl	800638c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086d2:	9804      	ldr	r0, [sp, #16]
        break;
 80086d4:	e7a5      	b.n	8008622 <UART_SetConfig+0x246>
 80086d6:	bf00      	nop

080086d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80086da:	071a      	lsls	r2, r3, #28
{
 80086dc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086de:	d506      	bpl.n	80086ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086e0:	6801      	ldr	r1, [r0, #0]
 80086e2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80086e4:	684a      	ldr	r2, [r1, #4]
 80086e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086ea:	4322      	orrs	r2, r4
 80086ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ee:	07dc      	lsls	r4, r3, #31
 80086f0:	d506      	bpl.n	8008700 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086f2:	6801      	ldr	r1, [r0, #0]
 80086f4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80086f6:	684a      	ldr	r2, [r1, #4]
 80086f8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80086fc:	4322      	orrs	r2, r4
 80086fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008700:	0799      	lsls	r1, r3, #30
 8008702:	d506      	bpl.n	8008712 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008704:	6801      	ldr	r1, [r0, #0]
 8008706:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008708:	684a      	ldr	r2, [r1, #4]
 800870a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800870e:	4322      	orrs	r2, r4
 8008710:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008712:	075a      	lsls	r2, r3, #29
 8008714:	d506      	bpl.n	8008724 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008716:	6801      	ldr	r1, [r0, #0]
 8008718:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800871a:	684a      	ldr	r2, [r1, #4]
 800871c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008720:	4322      	orrs	r2, r4
 8008722:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008724:	06dc      	lsls	r4, r3, #27
 8008726:	d506      	bpl.n	8008736 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008728:	6801      	ldr	r1, [r0, #0]
 800872a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800872c:	688a      	ldr	r2, [r1, #8]
 800872e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008732:	4322      	orrs	r2, r4
 8008734:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008736:	0699      	lsls	r1, r3, #26
 8008738:	d506      	bpl.n	8008748 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800873a:	6801      	ldr	r1, [r0, #0]
 800873c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800873e:	688a      	ldr	r2, [r1, #8]
 8008740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008744:	4322      	orrs	r2, r4
 8008746:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008748:	065a      	lsls	r2, r3, #25
 800874a:	d510      	bpl.n	800876e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800874c:	6801      	ldr	r1, [r0, #0]
 800874e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008750:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008752:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008756:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800875a:	ea42 0204 	orr.w	r2, r2, r4
 800875e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008760:	d105      	bne.n	800876e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008762:	684a      	ldr	r2, [r1, #4]
 8008764:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008766:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800876a:	4322      	orrs	r2, r4
 800876c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	d506      	bpl.n	8008780 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008772:	6802      	ldr	r2, [r0, #0]
 8008774:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008776:	6853      	ldr	r3, [r2, #4]
 8008778:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800877c:	430b      	orrs	r3, r1
 800877e:	6053      	str	r3, [r2, #4]
}
 8008780:	bd10      	pop	{r4, pc}

08008782 <UART_WaitOnFlagUntilTimeout>:
{
 8008782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008786:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800878a:	4604      	mov	r4, r0
 800878c:	460d      	mov	r5, r1
 800878e:	4617      	mov	r7, r2
 8008790:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	69d3      	ldr	r3, [r2, #28]
 8008796:	ea35 0303 	bics.w	r3, r5, r3
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	42bb      	cmp	r3, r7
 80087a2:	d001      	beq.n	80087a8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80087a4:	2000      	movs	r0, #0
 80087a6:	e022      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80087a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80087ac:	d0f2      	beq.n	8008794 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ae:	f7fa fb8f 	bl	8002ed0 <HAL_GetTick>
 80087b2:	eba0 0008 	sub.w	r0, r0, r8
 80087b6:	4548      	cmp	r0, r9
 80087b8:	d829      	bhi.n	800880e <UART_WaitOnFlagUntilTimeout+0x8c>
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	d026      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087c0:	6821      	ldr	r1, [r4, #0]
 80087c2:	680b      	ldr	r3, [r1, #0]
 80087c4:	075a      	lsls	r2, r3, #29
 80087c6:	d5e4      	bpl.n	8008792 <UART_WaitOnFlagUntilTimeout+0x10>
 80087c8:	2d80      	cmp	r5, #128	@ 0x80
 80087ca:	d0e2      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x10>
 80087cc:	2d40      	cmp	r5, #64	@ 0x40
 80087ce:	d0e0      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087d0:	69ce      	ldr	r6, [r1, #28]
 80087d2:	f016 0608 	ands.w	r6, r6, #8
 80087d6:	d00c      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087d8:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80087da:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087dc:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80087de:	f7ff f9b9 	bl	8007b54 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80087e2:	2300      	movs	r3, #0
          return HAL_ERROR;
 80087e4:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087e6:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80087ea:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087f2:	69cb      	ldr	r3, [r1, #28]
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	d5cc      	bpl.n	8008792 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 80087fc:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087fe:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8008800:	f7ff f9a8 	bl	8007b54 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008804:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8008806:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800880a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800880e:	2003      	movs	r0, #3
 8008810:	e7ed      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0x6c>

08008812 <UART_CheckIdleState>:
{
 8008812:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008814:	2600      	movs	r6, #0
{
 8008816:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008818:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800881c:	f7fa fb58 	bl	8002ed0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008820:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008822:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	071a      	lsls	r2, r3, #28
 8008828:	d51c      	bpl.n	8008864 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800882a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800882e:	4632      	mov	r2, r6
 8008830:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4603      	mov	r3, r0
 8008838:	4620      	mov	r0, r4
 800883a:	f7ff ffa2 	bl	8008782 <UART_WaitOnFlagUntilTimeout>
 800883e:	b188      	cbz	r0, 8008864 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008840:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	e852 3f00 	ldrex	r3, [r2]
 8008846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	e842 3100 	strex	r1, r3, [r2]
 800884e:	2900      	cmp	r1, #0
 8008850:	d1f6      	bne.n	8008840 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8008852:	2320      	movs	r3, #32
 8008854:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8008858:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800885a:	2300      	movs	r3, #0
 800885c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008860:	b002      	add	sp, #8
 8008862:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	075b      	lsls	r3, r3, #29
 800886a:	d524      	bpl.n	80088b6 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800886c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008870:	2200      	movs	r2, #0
 8008872:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008876:	4620      	mov	r0, r4
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	462b      	mov	r3, r5
 800887c:	f7ff ff81 	bl	8008782 <UART_WaitOnFlagUntilTimeout>
 8008880:	b1c8      	cbz	r0, 80088b6 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008882:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	e852 3f00 	ldrex	r3, [r2]
 8008888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	2900      	cmp	r1, #0
 8008894:	d1f5      	bne.n	8008882 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	f102 0308 	add.w	r3, r2, #8
 800889a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	f102 0008 	add.w	r0, r2, #8
 80088a6:	e840 3100 	strex	r1, r3, [r0]
 80088aa:	2900      	cmp	r1, #0
 80088ac:	d1f3      	bne.n	8008896 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80088ae:	2320      	movs	r3, #32
 80088b0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80088b4:	e7d0      	b.n	8008858 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80088b6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088be:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c4:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80088c6:	e7c8      	b.n	800885a <UART_CheckIdleState+0x48>

080088c8 <HAL_UART_Init>:
{
 80088c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80088ca:	4604      	mov	r4, r0
 80088cc:	b350      	cbz	r0, 8008924 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80088ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80088d2:	b91b      	cbnz	r3, 80088dc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80088d4:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80088d8:	f7fa fa42 	bl	8002d60 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80088dc:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80088de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80088e0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80088e4:	6813      	ldr	r3, [r2, #0]
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088ee:	b113      	cbz	r3, 80088f6 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff fef1 	bl	80086d8 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff fd70 	bl	80083dc <UART_SetConfig>
 80088fc:	2801      	cmp	r0, #1
 80088fe:	d011      	beq.n	8008924 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008900:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008902:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800890a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008912:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
}
 800891a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800891e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008920:	f7ff bf77 	b.w	8008812 <UART_CheckIdleState>
}
 8008924:	2001      	movs	r0, #1
 8008926:	bd10      	pop	{r4, pc}

08008928 <UART_Start_Receive_IT>:
{
 8008928:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800892a:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxISR       = NULL;
 800892c:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800892e:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8008930:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 8008934:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8008938:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800893c:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 800893e:	d131      	bne.n	80089a4 <UART_Start_Receive_IT+0x7c>
 8008940:	6903      	ldr	r3, [r0, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008948:	bf18      	it	ne
 800894a:	23ff      	movne	r3, #255	@ 0xff
 800894c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008950:	2300      	movs	r3, #0
 8008952:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008956:	2322      	movs	r3, #34	@ 0x22
 8008958:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	f101 0308 	add.w	r3, r1, #8
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	3108      	adds	r1, #8
 800896c:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 8008970:	6803      	ldr	r3, [r0, #0]
 8008972:	2c00      	cmp	r4, #0
 8008974:	d1f2      	bne.n	800895c <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008976:	6e45      	ldr	r5, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008978:	6884      	ldr	r4, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800897a:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897e:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008980:	d135      	bne.n	80089ee <UART_Start_Receive_IT+0xc6>
 8008982:	f8b0 5068 	ldrh.w	r5, [r0, #104]	@ 0x68
 8008986:	4295      	cmp	r5, r2
 8008988:	d831      	bhi.n	80089ee <UART_Start_Receive_IT+0xc6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800898a:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800898e:	d129      	bne.n	80089e4 <UART_Start_Receive_IT+0xbc>
 8008990:	b1c1      	cbz	r1, 80089c4 <UART_Start_Receive_IT+0x9c>
 8008992:	4a26      	ldr	r2, [pc, #152]	@ (8008a2c <UART_Start_Receive_IT+0x104>)
 8008994:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800899a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 80089a2:	e021      	b.n	80089e8 <UART_Start_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 80089a4:	b929      	cbnz	r1, 80089b2 <UART_Start_Receive_IT+0x8a>
 80089a6:	6903      	ldr	r3, [r0, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bf0c      	ite	eq
 80089ac:	23ff      	moveq	r3, #255	@ 0xff
 80089ae:	237f      	movne	r3, #127	@ 0x7f
 80089b0:	e7cc      	b.n	800894c <UART_Start_Receive_IT+0x24>
 80089b2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80089b6:	d1c9      	bne.n	800894c <UART_Start_Receive_IT+0x24>
 80089b8:	6903      	ldr	r3, [r0, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bf0c      	ite	eq
 80089be:	237f      	moveq	r3, #127	@ 0x7f
 80089c0:	233f      	movne	r3, #63	@ 0x3f
 80089c2:	e7c3      	b.n	800894c <UART_Start_Receive_IT+0x24>
 80089c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a30 <UART_Start_Receive_IT+0x108>)
 80089c6:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	f103 0208 	add.w	r2, r3, #8
 80089cc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	f103 0008 	add.w	r0, r3, #8
 80089d8:	e840 2100 	strex	r1, r2, [r0]
 80089dc:	2900      	cmp	r1, #0
 80089de:	d1f3      	bne.n	80089c8 <UART_Start_Receive_IT+0xa0>
}
 80089e0:	2000      	movs	r0, #0
 80089e2:	bd30      	pop	{r4, r5, pc}
 80089e4:	4a11      	ldr	r2, [pc, #68]	@ (8008a2c <UART_Start_Receive_IT+0x104>)
 80089e6:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089e8:	2900      	cmp	r1, #0
 80089ea:	d1d4      	bne.n	8008996 <UART_Start_Receive_IT+0x6e>
 80089ec:	e7ec      	b.n	80089c8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ee:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80089f2:	d116      	bne.n	8008a22 <UART_Start_Receive_IT+0xfa>
 80089f4:	b151      	cbz	r1, 8008a0c <UART_Start_Receive_IT+0xe4>
 80089f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008a34 <UART_Start_Receive_IT+0x10c>)
 80089f8:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089fe:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	e843 2100 	strex	r1, r2, [r3]
 8008a06:	2900      	cmp	r1, #0
 8008a08:	d1f7      	bne.n	80089fa <UART_Start_Receive_IT+0xd2>
 8008a0a:	e7e9      	b.n	80089e0 <UART_Start_Receive_IT+0xb8>
 8008a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a38 <UART_Start_Receive_IT+0x110>)
 8008a0e:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a14:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	e843 2100 	strex	r1, r2, [r3]
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d1f7      	bne.n	8008a10 <UART_Start_Receive_IT+0xe8>
 8008a20:	e7de      	b.n	80089e0 <UART_Start_Receive_IT+0xb8>
 8008a22:	4a04      	ldr	r2, [pc, #16]	@ (8008a34 <UART_Start_Receive_IT+0x10c>)
 8008a24:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a26:	2900      	cmp	r1, #0
 8008a28:	d0f2      	beq.n	8008a10 <UART_Start_Receive_IT+0xe8>
 8008a2a:	e7e6      	b.n	80089fa <UART_Start_Receive_IT+0xd2>
 8008a2c:	080080a5 	.word	0x080080a5
 8008a30:	08008245 	.word	0x08008245
 8008a34:	08007f15 	.word	0x08007f15
 8008a38:	08007fe1 	.word	0x08007fe1

08008a3c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a3c:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008a40:	2b20      	cmp	r3, #32
{
 8008a42:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a44:	d115      	bne.n	8008a72 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 8008a46:	b1b9      	cbz	r1, 8008a78 <HAL_UART_Receive_IT+0x3c>
 8008a48:	b1b2      	cbz	r2, 8008a78 <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4a:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a4c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a50:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <HAL_UART_Receive_IT+0x40>)
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d00a      	beq.n	8008a6c <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	d507      	bpl.n	8008a6c <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	e844 3500 	strex	r5, r3, [r4]
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d1f7      	bne.n	8008a5c <HAL_UART_Receive_IT+0x20>
}
 8008a6c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a6e:	f7ff bf5b 	b.w	8008928 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8008a72:	2002      	movs	r0, #2
}
 8008a74:	bc30      	pop	{r4, r5}
 8008a76:	4770      	bx	lr
      return HAL_ERROR;
 8008a78:	2001      	movs	r0, #1
 8008a7a:	e7fb      	b.n	8008a74 <HAL_UART_Receive_IT+0x38>
 8008a7c:	58000c00 	.word	0x58000c00

08008a80 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a80:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8008a82:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a84:	b92b      	cbnz	r3, 8008a92 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a8c:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a90:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a92:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a94:	4d09      	ldr	r5, [pc, #36]	@ (8008abc <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a96:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a98:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a9a:	4c09      	ldr	r4, [pc, #36]	@ (8008ac0 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a9c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aa0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa2:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008aa4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008aac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ab0:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ab2:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8008aba:	e7e7      	b.n	8008a8c <UARTEx_SetNbDataToProcess+0xc>
 8008abc:	08014548 	.word	0x08014548
 8008ac0:	08014540 	.word	0x08014540

08008ac4 <HAL_UARTEx_WakeupCallback>:
}
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8008ac8:	4770      	bx	lr

08008aca <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008aca:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d014      	beq.n	8008afc <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008ad4:	2324      	movs	r3, #36	@ 0x24
 8008ad6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ada:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008adc:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ade:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8008ae2:	f023 0301 	bic.w	r3, r3, #1
 8008ae6:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aec:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008aee:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8008af0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8008af4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 8008af8:	4618      	mov	r0, r3
 8008afa:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008afc:	2002      	movs	r0, #2
}
 8008afe:	4770      	bx	lr

08008b00 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008b00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8008b02:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8008b06:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d017      	beq.n	8008b3c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b0e:	2324      	movs	r3, #36	@ 0x24
 8008b10:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8008b16:	682b      	ldr	r3, [r5, #0]
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b1e:	68ab      	ldr	r3, [r5, #8]
 8008b20:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8008b24:	4319      	orrs	r1, r3
 8008b26:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008b28:	f7ff ffaa 	bl	8008a80 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008b2c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008b30:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008b34:	2000      	movs	r0, #0
 8008b36:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8008b3c:	2002      	movs	r0, #2
 8008b3e:	e7fc      	b.n	8008b3a <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08008b40 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008b40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8008b42:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 8008b46:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d017      	beq.n	8008b7c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b4c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b4e:	2324      	movs	r3, #36	@ 0x24
 8008b50:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b54:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b5e:	68ab      	ldr	r3, [r5, #8]
 8008b60:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008b64:	4319      	orrs	r1, r3
 8008b66:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008b68:	f7ff ff8a 	bl	8008a80 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008b6c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b6e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008b70:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008b74:	2000      	movs	r0, #0
 8008b76:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8008b7c:	2002      	movs	r0, #2
 8008b7e:	e7fc      	b.n	8008b7a <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08008b80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b80:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b86:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b88:	f001 f892 	bl	8009cb0 <xTaskGetSchedulerState>
 8008b8c:	2801      	cmp	r0, #1
 8008b8e:	d003      	beq.n	8008b98 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008b94:	f001 bb8e 	b.w	800a2b4 <xPortSysTickHandler>
}
 8008b98:	bd08      	pop	{r3, pc}
	...

08008b9c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b9c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ba0:	b92b      	cbnz	r3, 8008bae <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ba2:	4b06      	ldr	r3, [pc, #24]	@ (8008bbc <osKernelInitialize+0x20>)
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	b928      	cbnz	r0, 8008bb4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008bac:	4770      	bx	lr
    stat = osErrorISR;
 8008bae:	f06f 0005 	mvn.w	r0, #5
 8008bb2:	4770      	bx	lr
    } else {
      stat = osError;
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	240013e0 	.word	0x240013e0

08008bc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bc6:	b95c      	cbnz	r4, 8008be0 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008bc8:	4b08      	ldr	r3, [pc, #32]	@ (8008bec <osKernelStart+0x2c>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2a01      	cmp	r2, #1
 8008bce:	d10a      	bne.n	8008be6 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bd0:	4a07      	ldr	r2, [pc, #28]	@ (8008bf0 <osKernelStart+0x30>)
 8008bd2:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bd8:	f000 fdd6 	bl	8009788 <vTaskStartScheduler>
      stat = osOK;
 8008bdc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008bde:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008be0:	f06f 0005 	mvn.w	r0, #5
 8008be4:	e7fb      	b.n	8008bde <osKernelStart+0x1e>
      stat = osError;
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008bea:	e7f8      	b.n	8008bde <osKernelStart+0x1e>
 8008bec:	240013e0 	.word	0x240013e0
 8008bf0:	e000ed00 	.word	0xe000ed00

08008bf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008bfa:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bfc:	460b      	mov	r3, r1
  hTask = NULL;
 8008bfe:	9205      	str	r2, [sp, #20]
 8008c00:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008c04:	b9fa      	cbnz	r2, 8008c46 <osThreadNew+0x52>
 8008c06:	b1f0      	cbz	r0, 8008c46 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008c08:	b354      	cbz	r4, 8008c60 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008c0a:	69a5      	ldr	r5, [r4, #24]
 8008c0c:	b125      	cbz	r5, 8008c18 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c0e:	1e69      	subs	r1, r5, #1
 8008c10:	2937      	cmp	r1, #55	@ 0x37
 8008c12:	d902      	bls.n	8008c1a <osThreadNew+0x26>
        return (NULL);
 8008c14:	2000      	movs	r0, #0
 8008c16:	e017      	b.n	8008c48 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8008c18:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	07d2      	lsls	r2, r2, #31
 8008c1e:	d4f9      	bmi.n	8008c14 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8008c20:	6966      	ldr	r6, [r4, #20]
 8008c22:	b19e      	cbz	r6, 8008c4c <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c24:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8008c26:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c28:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 8008c2c:	b187      	cbz	r7, 8008c50 <osThreadNew+0x5c>
 8008c2e:	f1bc 0fa7 	cmp.w	ip, #167	@ 0xa7
 8008c32:	d908      	bls.n	8008c46 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c34:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c36:	b134      	cbz	r4, 8008c46 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c38:	b12e      	cbz	r6, 8008c46 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008c3a:	9500      	str	r5, [sp, #0]
 8008c3c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008c40:	f000 fd3c 	bl	80096bc <xTaskCreateStatic>
 8008c44:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c46:	9805      	ldr	r0, [sp, #20]
}
 8008c48:	b007      	add	sp, #28
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008c4c:	2280      	movs	r2, #128	@ 0x80
 8008c4e:	e7ea      	b.n	8008c26 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c50:	f1bc 0f00 	cmp.w	ip, #0
 8008c54:	d1f7      	bne.n	8008c46 <osThreadNew+0x52>
 8008c56:	6924      	ldr	r4, [r4, #16]
 8008c58:	2c00      	cmp	r4, #0
 8008c5a:	d1f4      	bne.n	8008c46 <osThreadNew+0x52>
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	e001      	b.n	8008c64 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8008c60:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8008c62:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c64:	a905      	add	r1, sp, #20
 8008c66:	b292      	uxth	r2, r2
 8008c68:	e9cd 5100 	strd	r5, r1, [sp]
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f000 fd5d 	bl	800972c <xTaskCreate>
 8008c72:	2801      	cmp	r0, #1
            hTask = NULL;
 8008c74:	bf1c      	itt	ne
 8008c76:	2300      	movne	r3, #0
 8008c78:	9305      	strne	r3, [sp, #20]
 8008c7a:	e7e4      	b.n	8008c46 <osThreadNew+0x52>

08008c7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008c7c:	b508      	push	{r3, lr}
 8008c7e:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c82:	b922      	cbnz	r2, 8008c8e <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008c84:	b108      	cbz	r0, 8008c8a <osDelay+0xe>
      vTaskDelay(ticks);
 8008c86:	f000 fee7 	bl	8009a58 <vTaskDelay>
    stat = osOK;
 8008c8a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8008c8c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8008c8e:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8008c92:	e7fb      	b.n	8008c8c <osDelay+0x10>

08008c94 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c94:	4b03      	ldr	r3, [pc, #12]	@ (8008ca4 <vApplicationGetIdleTaskMemory+0x10>)
 8008c96:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c98:	4b03      	ldr	r3, [pc, #12]	@ (8008ca8 <vApplicationGetIdleTaskMemory+0x14>)
 8008c9a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c9c:	2380      	movs	r3, #128	@ 0x80
 8008c9e:	6013      	str	r3, [r2, #0]
}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	24001338 	.word	0x24001338
 8008ca8:	24001138 	.word	0x24001138

08008cac <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008cac:	4b03      	ldr	r3, [pc, #12]	@ (8008cbc <vApplicationGetTimerTaskMemory+0x10>)
 8008cae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008cb0:	4b03      	ldr	r3, [pc, #12]	@ (8008cc0 <vApplicationGetTimerTaskMemory+0x14>)
 8008cb2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008cb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cb8:	6013      	str	r3, [r2, #0]
}
 8008cba:	4770      	bx	lr
 8008cbc:	24001090 	.word	0x24001090
 8008cc0:	24000c90 	.word	0x24000c90

08008cc4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cc4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cc8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ccc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cce:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cd8:	4770      	bx	lr

08008cda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cde:	4770      	bx	lr

08008ce0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ce0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008ce4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ce8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008cec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008cee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	6003      	str	r3, [r0, #0]
}
 8008cf4:	4770      	bx	lr

08008cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cf6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cf8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cfa:	1c63      	adds	r3, r4, #1
 8008cfc:	d10a      	bne.n	8008d14 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cfe:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d04:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d06:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d08:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008d0a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008d0c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6003      	str	r3, [r0, #0]
}
 8008d12:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d14:	f100 0208 	add.w	r2, r0, #8
 8008d18:	4613      	mov	r3, r2
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	6815      	ldr	r5, [r2, #0]
 8008d1e:	42a5      	cmp	r5, r4
 8008d20:	d9fa      	bls.n	8008d18 <vListInsert+0x22>
 8008d22:	e7ed      	b.n	8008d00 <vListInsert+0xa>

08008d24 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d24:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d26:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008d2a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d2e:	6859      	ldr	r1, [r3, #4]
 8008d30:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d32:	bf08      	it	eq
 8008d34:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d36:	2200      	movs	r2, #0
 8008d38:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	3a01      	subs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d40:	6818      	ldr	r0, [r3, #0]
}
 8008d42:	4770      	bx	lr

08008d44 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d44:	b510      	push	{r4, lr}
 8008d46:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d48:	f001 fa4c 	bl	800a1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d4c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008d4e:	f001 fa69 	bl	800a224 <vPortExitCritical>

	return xReturn;
}
 8008d52:	fab4 f084 	clz	r0, r4
 8008d56:	0940      	lsrs	r0, r0, #5
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <prvCopyDataToQueue>:
{
 8008d5a:	b570      	push	{r4, r5, r6, lr}
 8008d5c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d5e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8008d60:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d62:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d64:	b942      	cbnz	r2, 8008d78 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d66:	6806      	ldr	r6, [r0, #0]
 8008d68:	b99e      	cbnz	r6, 8008d92 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d6a:	6880      	ldr	r0, [r0, #8]
 8008d6c:	f000 ffb0 	bl	8009cd0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d70:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d72:	3501      	adds	r5, #1
 8008d74:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008d78:	b96e      	cbnz	r6, 8008d96 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d7a:	6840      	ldr	r0, [r0, #4]
 8008d7c:	f002 fb99 	bl	800b4b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d80:	6863      	ldr	r3, [r4, #4]
 8008d82:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008d84:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d86:	68a2      	ldr	r2, [r4, #8]
 8008d88:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d8a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d8c:	bf24      	itt	cs
 8008d8e:	6823      	ldrcs	r3, [r4, #0]
 8008d90:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008d92:	2000      	movs	r0, #0
 8008d94:	e7ed      	b.n	8008d72 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d96:	68c0      	ldr	r0, [r0, #12]
 8008d98:	f002 fb8b 	bl	800b4b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d9c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008d9e:	68e3      	ldr	r3, [r4, #12]
 8008da0:	4251      	negs	r1, r2
 8008da2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008da4:	6822      	ldr	r2, [r4, #0]
 8008da6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008da8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008daa:	bf3e      	ittt	cc
 8008dac:	68a3      	ldrcc	r3, [r4, #8]
 8008dae:	185b      	addcc	r3, r3, r1
 8008db0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008db2:	2e02      	cmp	r6, #2
 8008db4:	d1ed      	bne.n	8008d92 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008db6:	b10d      	cbz	r5, 8008dbc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008db8:	3d01      	subs	r5, #1
 8008dba:	e7ea      	b.n	8008d92 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e7d8      	b.n	8008d72 <prvCopyDataToQueue+0x18>

08008dc0 <prvCopyDataFromQueue>:
{
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8008dc6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dc8:	b162      	cbz	r2, 8008de4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dca:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dcc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dce:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dd0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dd2:	60dc      	str	r4, [r3, #12]
}
 8008dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008dd8:	bf24      	itt	cs
 8008dda:	6819      	ldrcs	r1, [r3, #0]
 8008ddc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dde:	68d9      	ldr	r1, [r3, #12]
 8008de0:	f002 bb67 	b.w	800b4b2 <memcpy>
}
 8008de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <prvUnlockQueue>:
{
 8008dea:	b570      	push	{r4, r5, r6, lr}
 8008dec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008dee:	f001 f9f9 	bl	800a1e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008df2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008df6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008dfa:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dfc:	2d00      	cmp	r5, #0
 8008dfe:	dd01      	ble.n	8008e04 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008e02:	b9b3      	cbnz	r3, 8008e32 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8008e04:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e06:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008e0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8008e0e:	f001 fa09 	bl	800a224 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008e12:	f001 f9e7 	bl	800a1e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008e16:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8008e1a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e1c:	2d00      	cmp	r5, #0
 8008e1e:	dd01      	ble.n	8008e24 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	b97b      	cbnz	r3, 8008e44 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8008e24:	23ff      	movs	r3, #255	@ 0xff
 8008e26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8008e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008e2e:	f001 b9f9 	b.w	800a224 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e32:	4630      	mov	r0, r6
 8008e34:	f000 feac 	bl	8009b90 <xTaskRemoveFromEventList>
 8008e38:	b108      	cbz	r0, 8008e3e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8008e3a:	f000 ff33 	bl	8009ca4 <vTaskMissedYield>
			--cTxLock;
 8008e3e:	3d01      	subs	r5, #1
 8008e40:	b26d      	sxtb	r5, r5
 8008e42:	e7db      	b.n	8008dfc <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 fea3 	bl	8009b90 <xTaskRemoveFromEventList>
 8008e4a:	b108      	cbz	r0, 8008e50 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8008e4c:	f000 ff2a 	bl	8009ca4 <vTaskMissedYield>
				--cRxLock;
 8008e50:	3d01      	subs	r5, #1
 8008e52:	b26d      	sxtb	r5, r5
 8008e54:	e7e2      	b.n	8008e1c <prvUnlockQueue+0x32>

08008e56 <xQueueGenericReset>:
{
 8008e56:	b538      	push	{r3, r4, r5, lr}
 8008e58:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	b940      	cbnz	r0, 8008e70 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	e7fe      	b.n	8008e6e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8008e70:	f001 f9b8 	bl	800a1e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e7a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e7c:	434b      	muls	r3, r1
 8008e7e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e80:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e82:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e84:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e86:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8008e88:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e8c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8008e8e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e92:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8008e96:	b9a5      	cbnz	r5, 8008ec2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	b173      	cbz	r3, 8008eba <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9c:	f104 0010 	add.w	r0, r4, #16
 8008ea0:	f000 fe76 	bl	8009b90 <xTaskRemoveFromEventList>
 8008ea4:	b148      	cbz	r0, 8008eba <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008ea6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008eba:	f001 f9b3 	bl	800a224 <vPortExitCritical>
}
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ec2:	f104 0010 	add.w	r0, r4, #16
 8008ec6:	f7ff fefd 	bl	8008cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008eca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ece:	f7ff fef9 	bl	8008cc4 <vListInitialise>
 8008ed2:	e7f2      	b.n	8008eba <xQueueGenericReset+0x64>

08008ed4 <xQueueGenericCreateStatic>:
	{
 8008ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eda:	b940      	cbnz	r0, 8008eee <xQueueGenericCreateStatic+0x1a>
 8008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	e7fe      	b.n	8008eec <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008eee:	b943      	cbnz	r3, 8008f02 <xQueueGenericCreateStatic+0x2e>
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	e7fe      	b.n	8008f00 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f02:	b14a      	cbz	r2, 8008f18 <xQueueGenericCreateStatic+0x44>
 8008f04:	b991      	cbnz	r1, 8008f2c <xQueueGenericCreateStatic+0x58>
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	e7fe      	b.n	8008f16 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f18:	b141      	cbz	r1, 8008f2c <xQueueGenericCreateStatic+0x58>
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	e7fe      	b.n	8008f2a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f2c:	2350      	movs	r3, #80	@ 0x50
 8008f2e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	2b50      	cmp	r3, #80	@ 0x50
 8008f34:	d008      	beq.n	8008f48 <xQueueGenericCreateStatic+0x74>
 8008f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	e7fe      	b.n	8008f46 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f48:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	bf08      	it	eq
 8008f4e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f50:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f52:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f56:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008f58:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f7ff ff7a 	bl	8008e56 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008f62:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 8008f66:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008f68:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}

08008f70 <xQueueGenericSend>:
{
 8008f70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008f74:	460f      	mov	r7, r1
 8008f76:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008f78:	4604      	mov	r4, r0
{
 8008f7a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008f7c:	b940      	cbnz	r0, 8008f90 <xQueueGenericSend+0x20>
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	e7fe      	b.n	8008f8e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f90:	b951      	cbnz	r1, 8008fa8 <xQueueGenericSend+0x38>
 8008f92:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008f94:	b143      	cbz	r3, 8008fa8 <xQueueGenericSend+0x38>
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa8:	2e02      	cmp	r6, #2
 8008faa:	d10b      	bne.n	8008fc4 <xQueueGenericSend+0x54>
 8008fac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d008      	beq.n	8008fc4 <xQueueGenericSend+0x54>
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc4:	f000 fe74 	bl	8009cb0 <xTaskGetSchedulerState>
 8008fc8:	4605      	mov	r5, r0
 8008fca:	b320      	cbz	r0, 8009016 <xQueueGenericSend+0xa6>
 8008fcc:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008fce:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008fd2:	f001 f907 	bl	800a1e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008fd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d227      	bcs.n	800902e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fde:	4632      	mov	r2, r6
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7ff feb9 	bl	8008d5a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fea:	b11b      	cbz	r3, 8008ff4 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ff0:	f000 fdce 	bl	8009b90 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008ff4:	b148      	cbz	r0, 800900a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8008ff6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ffe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800900a:	f001 f90b 	bl	800a224 <vPortExitCritical>
				return pdPASS;
 800900e:	2001      	movs	r0, #1
}
 8009010:	b004      	add	sp, #16
 8009012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0d8      	beq.n	8008fce <xQueueGenericSend+0x5e>
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	e7fe      	b.n	800902c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800902e:	2e02      	cmp	r6, #2
 8009030:	d0d5      	beq.n	8008fde <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	b91b      	cbnz	r3, 800903e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8009036:	f001 f8f5 	bl	800a224 <vPortExitCritical>
					return errQUEUE_FULL;
 800903a:	2000      	movs	r0, #0
 800903c:	e7e8      	b.n	8009010 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800903e:	b915      	cbnz	r5, 8009046 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009040:	a802      	add	r0, sp, #8
 8009042:	f000 fde7 	bl	8009c14 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009046:	f001 f8ed 	bl	800a224 <vPortExitCritical>
		vTaskSuspendAll();
 800904a:	f000 fbed 	bl	8009828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800904e:	f001 f8c9 	bl	800a1e4 <vPortEnterCritical>
 8009052:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009056:	2bff      	cmp	r3, #255	@ 0xff
 8009058:	d101      	bne.n	800905e <xQueueGenericSend+0xee>
 800905a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800905e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009062:	2bff      	cmp	r3, #255	@ 0xff
 8009064:	d101      	bne.n	800906a <xQueueGenericSend+0xfa>
 8009066:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800906a:	f001 f8db 	bl	800a224 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800906e:	a901      	add	r1, sp, #4
 8009070:	a802      	add	r0, sp, #8
 8009072:	f000 fddb 	bl	8009c2c <xTaskCheckForTimeOut>
 8009076:	bb38      	cbnz	r0, 80090c8 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009078:	f001 f8b4 	bl	800a1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800907c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800907e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009080:	429a      	cmp	r2, r3
 8009082:	d10e      	bne.n	80090a2 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009084:	f001 f8ce 	bl	800a224 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009088:	9901      	ldr	r1, [sp, #4]
 800908a:	f104 0010 	add.w	r0, r4, #16
 800908e:	f000 fd47 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009092:	4620      	mov	r0, r4
 8009094:	f7ff fea9 	bl	8008dea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009098:	f000 fc6a 	bl	8009970 <xTaskResumeAll>
 800909c:	b148      	cbz	r0, 80090b2 <xQueueGenericSend+0x142>
 800909e:	2501      	movs	r5, #1
 80090a0:	e797      	b.n	8008fd2 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80090a2:	f001 f8bf 	bl	800a224 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff fe9f 	bl	8008dea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ac:	f000 fc60 	bl	8009970 <xTaskResumeAll>
 80090b0:	e7f5      	b.n	800909e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80090b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	e7ea      	b.n	800909e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80090c8:	4620      	mov	r0, r4
 80090ca:	f7ff fe8e 	bl	8008dea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ce:	f000 fc4f 	bl	8009970 <xTaskResumeAll>
			return errQUEUE_FULL;
 80090d2:	e7b2      	b.n	800903a <xQueueGenericSend+0xca>

080090d4 <xQueueGenericSendFromISR>:
{
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	4689      	mov	r9, r1
 80090da:	4617      	mov	r7, r2
 80090dc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80090de:	4604      	mov	r4, r0
 80090e0:	b940      	cbnz	r0, 80090f4 <xQueueGenericSendFromISR+0x20>
 80090e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	e7fe      	b.n	80090f2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f4:	b951      	cbnz	r1, 800910c <xQueueGenericSendFromISR+0x38>
 80090f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80090f8:	b143      	cbz	r3, 800910c <xQueueGenericSendFromISR+0x38>
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	e7fe      	b.n	800910a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800910c:	2e02      	cmp	r6, #2
 800910e:	d10b      	bne.n	8009128 <xQueueGenericSendFromISR+0x54>
 8009110:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009112:	2b01      	cmp	r3, #1
 8009114:	d008      	beq.n	8009128 <xQueueGenericSendFromISR+0x54>
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	e7fe      	b.n	8009126 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009128:	f001 f96e 	bl	800a408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800912c:	f3ef 8811 	mrs	r8, BASEPRI
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009140:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009142:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009144:	429a      	cmp	r2, r3
 8009146:	d301      	bcc.n	800914c <xQueueGenericSendFromISR+0x78>
 8009148:	2e02      	cmp	r6, #2
 800914a:	d11e      	bne.n	800918a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800914c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009150:	4632      	mov	r2, r6
 8009152:	4649      	mov	r1, r9
 8009154:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009156:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009158:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800915a:	f7ff fdfe 	bl	8008d5a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800915e:	1c6b      	adds	r3, r5, #1
 8009160:	d10e      	bne.n	8009180 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009162:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009164:	b13b      	cbz	r3, 8009176 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009166:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800916a:	f000 fd11 	bl	8009b90 <xTaskRemoveFromEventList>
 800916e:	b110      	cbz	r0, 8009176 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8009170:	b10f      	cbz	r7, 8009176 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8009176:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009178:	f388 8811 	msr	BASEPRI, r8
}
 800917c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009180:	3501      	adds	r5, #1
 8009182:	b26d      	sxtb	r5, r5
 8009184:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8009188:	e7f5      	b.n	8009176 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800918a:	2000      	movs	r0, #0
 800918c:	e7f4      	b.n	8009178 <xQueueGenericSendFromISR+0xa4>

0800918e <xQueueGiveFromISR>:
{
 800918e:	b570      	push	{r4, r5, r6, lr}
 8009190:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009192:	4604      	mov	r4, r0
 8009194:	b940      	cbnz	r0, 80091a8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	e7fe      	b.n	80091a6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80091a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80091aa:	b143      	cbz	r3, 80091be <xQueueGiveFromISR+0x30>
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	e7fe      	b.n	80091bc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	b953      	cbnz	r3, 80091d8 <xQueueGiveFromISR+0x4a>
 80091c2:	6883      	ldr	r3, [r0, #8]
 80091c4:	b143      	cbz	r3, 80091d8 <xQueueGiveFromISR+0x4a>
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	e7fe      	b.n	80091d6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091d8:	f001 f916 	bl	800a408 <vPortValidateInterruptPriority>
	__asm volatile
 80091dc:	f3ef 8611 	mrs	r6, BASEPRI
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091f0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80091f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d919      	bls.n	800922c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 80091f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091fc:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80091fe:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8009200:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009202:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8009204:	d10d      	bne.n	8009222 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009206:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009208:	b13b      	cbz	r3, 800921a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800920e:	f000 fcbf 	bl	8009b90 <xTaskRemoveFromEventList>
 8009212:	b110      	cbz	r0, 800921a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009214:	b10d      	cbz	r5, 800921a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800921a:	2001      	movs	r0, #1
	__asm volatile
 800921c:	f386 8811 	msr	BASEPRI, r6
}
 8009220:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009222:	3301      	adds	r3, #1
 8009224:	b25b      	sxtb	r3, r3
 8009226:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800922a:	e7f6      	b.n	800921a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800922c:	2000      	movs	r0, #0
 800922e:	e7f5      	b.n	800921c <xQueueGiveFromISR+0x8e>

08009230 <xQueueReceive>:
{
 8009230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009234:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8009236:	4604      	mov	r4, r0
{
 8009238:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800923a:	b940      	cbnz	r0, 800924e <xQueueReceive+0x1e>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	e7fe      	b.n	800924c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800924e:	b951      	cbnz	r1, 8009266 <xQueueReceive+0x36>
 8009250:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009252:	b143      	cbz	r3, 8009266 <xQueueReceive+0x36>
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	e7fe      	b.n	8009264 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009266:	f000 fd23 	bl	8009cb0 <xTaskGetSchedulerState>
 800926a:	4605      	mov	r5, r0
 800926c:	b318      	cbz	r0, 80092b6 <xQueueReceive+0x86>
 800926e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009270:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8009274:	f000 ffb6 	bl	800a1e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009278:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800927a:	b347      	cbz	r7, 80092ce <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800927c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800927e:	4631      	mov	r1, r6
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fd9d 	bl	8008dc0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009286:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	b173      	cbz	r3, 80092aa <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800928c:	f104 0010 	add.w	r0, r4, #16
 8009290:	f000 fc7e 	bl	8009b90 <xTaskRemoveFromEventList>
 8009294:	b148      	cbz	r0, 80092aa <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8009296:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800929a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800929e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80092aa:	f000 ffbb 	bl	800a224 <vPortExitCritical>
				return pdPASS;
 80092ae:	2001      	movs	r0, #1
}
 80092b0:	b004      	add	sp, #16
 80092b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0d9      	beq.n	8009270 <xQueueReceive+0x40>
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	e7fe      	b.n	80092cc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	b91b      	cbnz	r3, 80092da <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80092d2:	f000 ffa7 	bl	800a224 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80092d6:	2000      	movs	r0, #0
 80092d8:	e7ea      	b.n	80092b0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80092da:	b915      	cbnz	r5, 80092e2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092dc:	a802      	add	r0, sp, #8
 80092de:	f000 fc99 	bl	8009c14 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80092e2:	f000 ff9f 	bl	800a224 <vPortExitCritical>
		vTaskSuspendAll();
 80092e6:	f000 fa9f 	bl	8009828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092ea:	f000 ff7b 	bl	800a1e4 <vPortEnterCritical>
 80092ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80092f2:	2bff      	cmp	r3, #255	@ 0xff
 80092f4:	d101      	bne.n	80092fa <xQueueReceive+0xca>
 80092f6:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80092fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80092fe:	2bff      	cmp	r3, #255	@ 0xff
 8009300:	d101      	bne.n	8009306 <xQueueReceive+0xd6>
 8009302:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8009306:	f000 ff8d 	bl	800a224 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800930a:	a901      	add	r1, sp, #4
 800930c:	a802      	add	r0, sp, #8
 800930e:	f000 fc8d 	bl	8009c2c <xTaskCheckForTimeOut>
 8009312:	bb00      	cbnz	r0, 8009356 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009314:	4620      	mov	r0, r4
 8009316:	f7ff fd15 	bl	8008d44 <prvIsQueueEmpty>
 800931a:	b1b0      	cbz	r0, 800934a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800931c:	9901      	ldr	r1, [sp, #4]
 800931e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009322:	f000 fbfd 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009326:	4620      	mov	r0, r4
 8009328:	f7ff fd5f 	bl	8008dea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800932c:	f000 fb20 	bl	8009970 <xTaskResumeAll>
 8009330:	b948      	cbnz	r0, 8009346 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8009332:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800933a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	2501      	movs	r5, #1
 8009348:	e794      	b.n	8009274 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800934a:	4620      	mov	r0, r4
 800934c:	f7ff fd4d 	bl	8008dea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009350:	f000 fb0e 	bl	8009970 <xTaskResumeAll>
 8009354:	e7f7      	b.n	8009346 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff fd47 	bl	8008dea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935c:	f000 fb08 	bl	8009970 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff fcef 	bl	8008d44 <prvIsQueueEmpty>
 8009366:	2800      	cmp	r0, #0
 8009368:	d0ed      	beq.n	8009346 <xQueueReceive+0x116>
 800936a:	e7b4      	b.n	80092d6 <xQueueReceive+0xa6>

0800936c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800936c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800936e:	4a07      	ldr	r2, [pc, #28]	@ (800938c <vQueueAddToRegistry+0x20>)
	{
 8009370:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009372:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8009376:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800937a:	b91d      	cbnz	r5, 8009384 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800937c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009380:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009382:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009384:	3301      	adds	r3, #1
 8009386:	2b08      	cmp	r3, #8
 8009388:	d1f3      	bne.n	8009372 <vQueueAddToRegistry+0x6>
 800938a:	e7fa      	b.n	8009382 <vQueueAddToRegistry+0x16>
 800938c:	240013e4 	.word	0x240013e4

08009390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4604      	mov	r4, r0
 8009394:	460d      	mov	r5, r1
 8009396:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009398:	f000 ff24 	bl	800a1e4 <vPortEnterCritical>
 800939c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80093a0:	2bff      	cmp	r3, #255	@ 0xff
 80093a2:	d102      	bne.n	80093aa <vQueueWaitForMessageRestricted+0x1a>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80093aa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80093ae:	2bff      	cmp	r3, #255	@ 0xff
 80093b0:	d102      	bne.n	80093b8 <vQueueWaitForMessageRestricted+0x28>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80093b8:	f000 ff34 	bl	800a224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80093be:	b92b      	cbnz	r3, 80093cc <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093c0:	4632      	mov	r2, r6
 80093c2:	4629      	mov	r1, r5
 80093c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80093c8:	f000 fbc4 	bl	8009b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093cc:	4620      	mov	r0, r4
	}
 80093ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80093d2:	f7ff bd0a 	b.w	8008dea <prvUnlockQueue>
	...

080093d8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093de:	f000 ff01 	bl	800a1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093e2:	4b2f      	ldr	r3, [pc, #188]	@ (80094a0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80093e4:	4e2f      	ldr	r6, [pc, #188]	@ (80094a4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	4f2f      	ldr	r7, [pc, #188]	@ (80094a8 <prvAddNewTaskToReadyList+0xd0>)
 80093ea:	3201      	adds	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80093ee:	6835      	ldr	r5, [r6, #0]
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	d14a      	bne.n	800948a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093f4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d11f      	bne.n	800943c <prvAddNewTaskToReadyList+0x64>
 80093fc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093fe:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009400:	4640      	mov	r0, r8
 8009402:	f7ff fc5f 	bl	8008cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009406:	f108 0814 	add.w	r8, r8, #20
 800940a:	2d38      	cmp	r5, #56	@ 0x38
 800940c:	d1f7      	bne.n	80093fe <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800940e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80094d0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8009412:	4d26      	ldr	r5, [pc, #152]	@ (80094ac <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8009414:	4640      	mov	r0, r8
 8009416:	f7ff fc55 	bl	8008cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800941a:	4628      	mov	r0, r5
 800941c:	f7ff fc52 	bl	8008cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009420:	4823      	ldr	r0, [pc, #140]	@ (80094b0 <prvAddNewTaskToReadyList+0xd8>)
 8009422:	f7ff fc4f 	bl	8008cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009426:	4823      	ldr	r0, [pc, #140]	@ (80094b4 <prvAddNewTaskToReadyList+0xdc>)
 8009428:	f7ff fc4c 	bl	8008cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800942c:	4822      	ldr	r0, [pc, #136]	@ (80094b8 <prvAddNewTaskToReadyList+0xe0>)
 800942e:	f7ff fc49 	bl	8008cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009432:	4b22      	ldr	r3, [pc, #136]	@ (80094bc <prvAddNewTaskToReadyList+0xe4>)
 8009434:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009438:	4b21      	ldr	r3, [pc, #132]	@ (80094c0 <prvAddNewTaskToReadyList+0xe8>)
 800943a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800943c:	4a21      	ldr	r2, [pc, #132]	@ (80094c4 <prvAddNewTaskToReadyList+0xec>)
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009444:	4a20      	ldr	r2, [pc, #128]	@ (80094c8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009446:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009448:	6811      	ldr	r1, [r2, #0]
 800944a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800944c:	428b      	cmp	r3, r1
 800944e:	d900      	bls.n	8009452 <prvAddNewTaskToReadyList+0x7a>
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	2014      	movs	r0, #20
 8009454:	1d21      	adds	r1, r4, #4
 8009456:	fb00 7003 	mla	r0, r0, r3, r7
 800945a:	f7ff fc41 	bl	8008ce0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800945e:	f000 fee1 	bl	800a224 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009462:	4b1a      	ldr	r3, [pc, #104]	@ (80094cc <prvAddNewTaskToReadyList+0xf4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	b173      	cbz	r3, 8009486 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009468:	6833      	ldr	r3, [r6, #0]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800946e:	429a      	cmp	r2, r3
 8009470:	d209      	bcs.n	8009486 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009472:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800947a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	f3bf 8f6f 	isb	sy
}
 8009486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800948a:	4b10      	ldr	r3, [pc, #64]	@ (80094cc <prvAddNewTaskToReadyList+0xf4>)
 800948c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800948e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8009490:	2a00      	cmp	r2, #0
 8009492:	d1d3      	bne.n	800943c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009494:	6832      	ldr	r2, [r6, #0]
 8009496:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009498:	429a      	cmp	r2, r3
 800949a:	d8cf      	bhi.n	800943c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800949c:	6034      	str	r4, [r6, #0]
 800949e:	e7cd      	b.n	800943c <prvAddNewTaskToReadyList+0x64>
 80094a0:	24001448 	.word	0x24001448
 80094a4:	2400191c 	.word	0x2400191c
 80094a8:	240014bc 	.word	0x240014bc
 80094ac:	24001494 	.word	0x24001494
 80094b0:	24001478 	.word	0x24001478
 80094b4:	24001464 	.word	0x24001464
 80094b8:	2400144c 	.word	0x2400144c
 80094bc:	24001490 	.word	0x24001490
 80094c0:	2400148c 	.word	0x2400148c
 80094c4:	2400142c 	.word	0x2400142c
 80094c8:	24001440 	.word	0x24001440
 80094cc:	2400143c 	.word	0x2400143c
 80094d0:	240014a8 	.word	0x240014a8

080094d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094d6:	4b15      	ldr	r3, [pc, #84]	@ (800952c <prvAddCurrentTaskToDelayedList+0x58>)
{
 80094d8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094da:	4d15      	ldr	r5, [pc, #84]	@ (8009530 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80094dc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80094de:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e0:	6828      	ldr	r0, [r5, #0]
 80094e2:	3004      	adds	r0, #4
 80094e4:	f7ff fc1e 	bl	8008d24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094e8:	1c73      	adds	r3, r6, #1
 80094ea:	d107      	bne.n	80094fc <prvAddCurrentTaskToDelayedList+0x28>
 80094ec:	b137      	cbz	r7, 80094fc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ee:	6829      	ldr	r1, [r5, #0]
 80094f0:	4810      	ldr	r0, [pc, #64]	@ (8009534 <prvAddCurrentTaskToDelayedList+0x60>)
 80094f2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f8:	f7ff bbf2 	b.w	8008ce0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094fc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009502:	d307      	bcc.n	8009514 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009504:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <prvAddCurrentTaskToDelayedList+0x64>)
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	6829      	ldr	r1, [r5, #0]
}
 800950a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800950e:	3104      	adds	r1, #4
 8009510:	f7ff bbf1 	b.w	8008cf6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009514:	4b09      	ldr	r3, [pc, #36]	@ (800953c <prvAddCurrentTaskToDelayedList+0x68>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	3104      	adds	r1, #4
 800951c:	f7ff fbeb 	bl	8008cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009520:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	42a2      	cmp	r2, r4
 8009526:	d900      	bls.n	800952a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8009528:	601c      	str	r4, [r3, #0]
}
 800952a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952c:	24001444 	.word	0x24001444
 8009530:	2400191c 	.word	0x2400191c
 8009534:	2400144c 	.word	0x2400144c
 8009538:	2400148c 	.word	0x2400148c
 800953c:	24001490 	.word	0x24001490
 8009540:	24001428 	.word	0x24001428

08009544 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009544:	4a06      	ldr	r2, [pc, #24]	@ (8009560 <prvResetNextTaskUnblockTime+0x1c>)
 8009546:	6813      	ldr	r3, [r2, #0]
 8009548:	6819      	ldr	r1, [r3, #0]
 800954a:	4b06      	ldr	r3, [pc, #24]	@ (8009564 <prvResetNextTaskUnblockTime+0x20>)
 800954c:	b919      	cbnz	r1, 8009556 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800954e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800955a:	68d2      	ldr	r2, [r2, #12]
 800955c:	6852      	ldr	r2, [r2, #4]
 800955e:	e7f8      	b.n	8009552 <prvResetNextTaskUnblockTime+0xe>
 8009560:	24001490 	.word	0x24001490
 8009564:	24001428 	.word	0x24001428

08009568 <prvDeleteTCB>:
	{
 8009568:	b510      	push	{r4, lr}
 800956a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800956c:	3054      	adds	r0, #84	@ 0x54
 800956e:	f001 fedf 	bl	800b330 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009572:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8009576:	b93b      	cbnz	r3, 8009588 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8009578:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800957a:	f001 f831 	bl	800a5e0 <vPortFree>
				vPortFree( pxTCB );
 800957e:	4620      	mov	r0, r4
	}
 8009580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009584:	f001 b82c 	b.w	800a5e0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009588:	2b01      	cmp	r3, #1
 800958a:	d0f8      	beq.n	800957e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800958c:	2b02      	cmp	r3, #2
 800958e:	d008      	beq.n	80095a2 <prvDeleteTCB+0x3a>
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	e7fe      	b.n	80095a0 <prvDeleteTCB+0x38>
	}
 80095a2:	bd10      	pop	{r4, pc}

080095a4 <prvIdleTask>:
{
 80095a4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095a6:	4c13      	ldr	r4, [pc, #76]	@ (80095f4 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	4f13      	ldr	r7, [pc, #76]	@ (80095f8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80095aa:	4d14      	ldr	r5, [pc, #80]	@ (80095fc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	b973      	cbnz	r3, 80095ce <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095b0:	4b13      	ldr	r3, [pc, #76]	@ (8009600 <prvIdleTask+0x5c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d9f8      	bls.n	80095aa <prvIdleTask+0x6>
				taskYIELD();
 80095b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80095bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	e7ed      	b.n	80095aa <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80095ce:	f000 fe09 	bl	800a1e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d6:	1d30      	adds	r0, r6, #4
 80095d8:	f7ff fba4 	bl	8008d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095dc:	682b      	ldr	r3, [r5, #0]
 80095de:	3b01      	subs	r3, #1
 80095e0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80095e8:	f000 fe1c 	bl	800a224 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff ffbb 	bl	8009568 <prvDeleteTCB>
 80095f2:	e7db      	b.n	80095ac <prvIdleTask+0x8>
 80095f4:	24001460 	.word	0x24001460
 80095f8:	24001464 	.word	0x24001464
 80095fc:	24001448 	.word	0x24001448
 8009600:	240014bc 	.word	0x240014bc

08009604 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009608:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800960a:	4607      	mov	r7, r0
 800960c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800960e:	21a5      	movs	r1, #165	@ 0xa5
 8009610:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009612:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009614:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009616:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800961a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800961c:	f001 fe6c 	bl	800b2f8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009620:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009622:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009624:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8009628:	2d00      	cmp	r5, #0
 800962a:	d041      	beq.n	80096b0 <prvInitialiseNewTask.constprop.0+0xac>
 800962c:	1e6b      	subs	r3, r5, #1
 800962e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8009632:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009634:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009638:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800963c:	b109      	cbz	r1, 8009642 <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800963e:	42ab      	cmp	r3, r5
 8009640:	d1f8      	bne.n	8009634 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009642:	2300      	movs	r3, #0
 8009644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009648:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800964a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800964e:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009650:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009652:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009656:	bf28      	it	cs
 8009658:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800965a:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800965c:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800965e:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009662:	f7ff fb3a 	bl	8008cda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009666:	f104 0018 	add.w	r0, r4, #24
 800966a:	f7ff fb36 	bl	8008cda <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800966e:	224c      	movs	r2, #76	@ 0x4c
 8009670:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8009672:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009676:	f104 0054 	add.w	r0, r4, #84	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800967a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800967c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800967e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009680:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009684:	f001 fe38 	bl	800b2f8 <memset>
 8009688:	4b0b      	ldr	r3, [pc, #44]	@ (80096b8 <prvInitialiseNewTask.constprop.0+0xb4>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800968a:	4639      	mov	r1, r7
 800968c:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800968e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009692:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009694:	33d0      	adds	r3, #208	@ 0xd0
 8009696:	65e2      	str	r2, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009698:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800969a:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800969c:	f000 fd7e 	bl	800a19c <pxPortInitialiseStack>
 80096a0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80096a2:	f1b9 0f00 	cmp.w	r9, #0
 80096a6:	d001      	beq.n	80096ac <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096a8:	f8c9 4000 	str.w	r4, [r9]
}
 80096ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096b0:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80096b4:	e7c8      	b.n	8009648 <prvInitialiseNewTask.constprop.0+0x44>
 80096b6:	bf00      	nop
 80096b8:	24005674 	.word	0x24005674

080096bc <xTaskCreateStatic>:
	{
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80096c4:	b945      	cbnz	r5, 80096d8 <xTaskCreateStatic+0x1c>
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	e7fe      	b.n	80096d6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80096d8:	b944      	cbnz	r4, 80096ec <xTaskCreateStatic+0x30>
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	e7fe      	b.n	80096ea <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80096ec:	26a8      	movs	r6, #168	@ 0xa8
 80096ee:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096f0:	9e05      	ldr	r6, [sp, #20]
 80096f2:	2ea8      	cmp	r6, #168	@ 0xa8
 80096f4:	d008      	beq.n	8009708 <xTaskCreateStatic+0x4c>
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	e7fe      	b.n	8009706 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009708:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800970a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800970c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800970e:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009712:	ad04      	add	r5, sp, #16
 8009714:	9402      	str	r4, [sp, #8]
 8009716:	9501      	str	r5, [sp, #4]
 8009718:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800971a:	9500      	str	r5, [sp, #0]
 800971c:	f7ff ff72 	bl	8009604 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009720:	4620      	mov	r0, r4
 8009722:	f7ff fe59 	bl	80093d8 <prvAddNewTaskToReadyList>
	}
 8009726:	9804      	ldr	r0, [sp, #16]
 8009728:	b006      	add	sp, #24
 800972a:	bd70      	pop	{r4, r5, r6, pc}

0800972c <xTaskCreate>:
	{
 800972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009730:	4607      	mov	r7, r0
 8009732:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009734:	0090      	lsls	r0, r2, #2
	{
 8009736:	4688      	mov	r8, r1
 8009738:	4616      	mov	r6, r2
 800973a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800973c:	f000 feb8 	bl	800a4b0 <pvPortMalloc>
			if( pxStack != NULL )
 8009740:	4605      	mov	r5, r0
 8009742:	b920      	cbnz	r0, 800974e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009744:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009748:	b005      	add	sp, #20
 800974a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800974e:	20a8      	movs	r0, #168	@ 0xa8
 8009750:	f000 feae 	bl	800a4b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009754:	4604      	mov	r4, r0
 8009756:	b198      	cbz	r0, 8009780 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009758:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800975a:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800975c:	4632      	mov	r2, r6
 800975e:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009760:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009766:	9002      	str	r0, [sp, #8]
 8009768:	4638      	mov	r0, r7
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	464b      	mov	r3, r9
 8009772:	f7ff ff47 	bl	8009604 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff fe2e 	bl	80093d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800977c:	2001      	movs	r0, #1
 800977e:	e7e3      	b.n	8009748 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8009780:	4628      	mov	r0, r5
 8009782:	f000 ff2d 	bl	800a5e0 <vPortFree>
		if( pxNewTCB != NULL )
 8009786:	e7dd      	b.n	8009744 <xTaskCreate+0x18>

08009788 <vTaskStartScheduler>:
{
 8009788:	b510      	push	{r4, lr}
 800978a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800978c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800978e:	aa07      	add	r2, sp, #28
 8009790:	a906      	add	r1, sp, #24
 8009792:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009794:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009798:	f7ff fa7c 	bl	8008c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	9a07      	ldr	r2, [sp, #28]
 80097a0:	9302      	str	r3, [sp, #8]
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	4919      	ldr	r1, [pc, #100]	@ (800980c <vTaskStartScheduler+0x84>)
 80097a6:	481a      	ldr	r0, [pc, #104]	@ (8009810 <vTaskStartScheduler+0x88>)
 80097a8:	e9cd 4300 	strd	r4, r3, [sp]
 80097ac:	4623      	mov	r3, r4
 80097ae:	f7ff ff85 	bl	80096bc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80097b2:	b340      	cbz	r0, 8009806 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 80097b4:	f000 fb20 	bl	8009df8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80097b8:	2801      	cmp	r0, #1
 80097ba:	d119      	bne.n	80097f0 <vTaskStartScheduler+0x68>
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097cc:	4b11      	ldr	r3, [pc, #68]	@ (8009814 <vTaskStartScheduler+0x8c>)
 80097ce:	4a12      	ldr	r2, [pc, #72]	@ (8009818 <vTaskStartScheduler+0x90>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3354      	adds	r3, #84	@ 0x54
 80097d4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295
 80097da:	4b10      	ldr	r3, [pc, #64]	@ (800981c <vTaskStartScheduler+0x94>)
 80097dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097de:	4b10      	ldr	r3, [pc, #64]	@ (8009820 <vTaskStartScheduler+0x98>)
 80097e0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <vTaskStartScheduler+0x9c>)
 80097e4:	601c      	str	r4, [r3, #0]
}
 80097e6:	b008      	add	sp, #32
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80097ec:	f000 bd8a 	b.w	800a304 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097f0:	3001      	adds	r0, #1
 80097f2:	d108      	bne.n	8009806 <vTaskStartScheduler+0x7e>
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	e7fe      	b.n	8009804 <vTaskStartScheduler+0x7c>
}
 8009806:	b008      	add	sp, #32
 8009808:	bd10      	pop	{r4, pc}
 800980a:	bf00      	nop
 800980c:	0800d49b 	.word	0x0800d49b
 8009810:	080095a5 	.word	0x080095a5
 8009814:	2400191c 	.word	0x2400191c
 8009818:	24000090 	.word	0x24000090
 800981c:	24001428 	.word	0x24001428
 8009820:	2400143c 	.word	0x2400143c
 8009824:	24001444 	.word	0x24001444

08009828 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009828:	4a02      	ldr	r2, [pc, #8]	@ (8009834 <vTaskSuspendAll+0xc>)
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	6013      	str	r3, [r2, #0]
}
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	24001424 	.word	0x24001424

08009838 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009838:	4b01      	ldr	r3, [pc, #4]	@ (8009840 <xTaskGetTickCount+0x8>)
 800983a:	6818      	ldr	r0, [r3, #0]
}
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	24001444 	.word	0x24001444

08009844 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009844:	4b3f      	ldr	r3, [pc, #252]	@ (8009944 <xTaskIncrementTick+0x100>)
 8009846:	681b      	ldr	r3, [r3, #0]
{
 8009848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800984c:	2b00      	cmp	r3, #0
 800984e:	d172      	bne.n	8009936 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009850:	4b3d      	ldr	r3, [pc, #244]	@ (8009948 <xTaskIncrementTick+0x104>)
 8009852:	681c      	ldr	r4, [r3, #0]
 8009854:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009856:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009858:	b9bc      	cbnz	r4, 800988a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800985a:	4b3c      	ldr	r3, [pc, #240]	@ (800994c <xTaskIncrementTick+0x108>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	6812      	ldr	r2, [r2, #0]
 8009860:	b142      	cbz	r2, 8009874 <xTaskIncrementTick+0x30>
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	e7fe      	b.n	8009872 <xTaskIncrementTick+0x2e>
 8009874:	4a36      	ldr	r2, [pc, #216]	@ (8009950 <xTaskIncrementTick+0x10c>)
 8009876:	6819      	ldr	r1, [r3, #0]
 8009878:	6810      	ldr	r0, [r2, #0]
 800987a:	6018      	str	r0, [r3, #0]
 800987c:	6011      	str	r1, [r2, #0]
 800987e:	4a35      	ldr	r2, [pc, #212]	@ (8009954 <xTaskIncrementTick+0x110>)
 8009880:	6813      	ldr	r3, [r2, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	f7ff fe5d 	bl	8009544 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800988a:	4d33      	ldr	r5, [pc, #204]	@ (8009958 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800988c:	f04f 0b00 	mov.w	fp, #0
 8009890:	4e32      	ldr	r6, [pc, #200]	@ (800995c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	4f32      	ldr	r7, [pc, #200]	@ (8009960 <xTaskIncrementTick+0x11c>)
 8009896:	429c      	cmp	r4, r3
 8009898:	d212      	bcs.n	80098c0 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	2114      	movs	r1, #20
 800989e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80098a0:	434a      	muls	r2, r1
 80098a2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80098a4:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80098a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009964 <xTaskIncrementTick+0x120>)
 80098a8:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80098aa:	bf28      	it	cs
 80098ac:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	bf18      	it	ne
 80098b4:	f04f 0b01 	movne.w	fp, #1
}
 80098b8:	4658      	mov	r0, fp
 80098ba:	b003      	add	sp, #12
 80098bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c0:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800994c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80098c4:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800996c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c8:	f8d9 2000 	ldr.w	r2, [r9]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	b91a      	cbnz	r2, 80098d8 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d0:	f04f 32ff 	mov.w	r2, #4294967295
 80098d4:	602a      	str	r2, [r5, #0]
					break;
 80098d6:	e7e0      	b.n	800989a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d8:	f8d9 2000 	ldr.w	r2, [r9]
 80098dc:	68d2      	ldr	r2, [r2, #12]
 80098de:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80098e6:	428c      	cmp	r4, r1
 80098e8:	d201      	bcs.n	80098ee <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80098ea:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098ec:	e7d5      	b.n	800989a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098ee:	f108 0304 	add.w	r3, r8, #4
 80098f2:	4618      	mov	r0, r3
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	f7ff fa15 	bl	8008d24 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098fa:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80098fe:	b119      	cbz	r1, 8009908 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009900:	f108 0018 	add.w	r0, r8, #24
 8009904:	f7ff fa0e 	bl	8008d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009908:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800990c:	f8da 1000 	ldr.w	r1, [sl]
 8009910:	4288      	cmp	r0, r1
 8009912:	d901      	bls.n	8009918 <xTaskIncrementTick+0xd4>
 8009914:	f8ca 0000 	str.w	r0, [sl]
 8009918:	2314      	movs	r3, #20
 800991a:	9901      	ldr	r1, [sp, #4]
 800991c:	fb03 6000 	mla	r0, r3, r0, r6
 8009920:	f7ff f9de 	bl	8008ce0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009924:	6838      	ldr	r0, [r7, #0]
 8009926:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800992a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800992c:	4291      	cmp	r1, r2
 800992e:	bf28      	it	cs
 8009930:	f04f 0b01 	movcs.w	fp, #1
 8009934:	e7c8      	b.n	80098c8 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8009936:	4a0c      	ldr	r2, [pc, #48]	@ (8009968 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009938:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800993c:	6813      	ldr	r3, [r2, #0]
 800993e:	3301      	adds	r3, #1
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e7b9      	b.n	80098b8 <xTaskIncrementTick+0x74>
 8009944:	24001424 	.word	0x24001424
 8009948:	24001444 	.word	0x24001444
 800994c:	24001490 	.word	0x24001490
 8009950:	2400148c 	.word	0x2400148c
 8009954:	24001430 	.word	0x24001430
 8009958:	24001428 	.word	0x24001428
 800995c:	240014bc 	.word	0x240014bc
 8009960:	2400191c 	.word	0x2400191c
 8009964:	24001434 	.word	0x24001434
 8009968:	24001438 	.word	0x24001438
 800996c:	24001440 	.word	0x24001440

08009970 <xTaskResumeAll>:
{
 8009970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009974:	4c30      	ldr	r4, [pc, #192]	@ (8009a38 <xTaskResumeAll+0xc8>)
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	b943      	cbnz	r3, 800998c <xTaskResumeAll+0x1c>
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	e7fe      	b.n	800998a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800998c:	f000 fc2a 	bl	800a1e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	3b01      	subs	r3, #1
 8009994:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009996:	6824      	ldr	r4, [r4, #0]
 8009998:	b12c      	cbz	r4, 80099a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800999a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800999c:	f000 fc42 	bl	800a224 <vPortExitCritical>
}
 80099a0:	4620      	mov	r0, r4
 80099a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099a6:	4b25      	ldr	r3, [pc, #148]	@ (8009a3c <xTaskResumeAll+0xcc>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0f5      	beq.n	800999a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ae:	4d24      	ldr	r5, [pc, #144]	@ (8009a40 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80099b0:	4e24      	ldr	r6, [pc, #144]	@ (8009a44 <xTaskResumeAll+0xd4>)
 80099b2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8009a54 <xTaskResumeAll+0xe4>
 80099b6:	e01d      	b.n	80099f4 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b8:	68eb      	ldr	r3, [r5, #12]
 80099ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099bc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099be:	f104 0018 	add.w	r0, r4, #24
 80099c2:	f7ff f9af 	bl	8008d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c6:	4638      	mov	r0, r7
 80099c8:	f7ff f9ac 	bl	8008d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80099ce:	6832      	ldr	r2, [r6, #0]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d900      	bls.n	80099d6 <xTaskResumeAll+0x66>
 80099d4:	6033      	str	r3, [r6, #0]
 80099d6:	2014      	movs	r0, #20
 80099d8:	4639      	mov	r1, r7
 80099da:	fb00 8003 	mla	r0, r0, r3, r8
 80099de:	f7ff f97f 	bl	8008ce0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e2:	4b19      	ldr	r3, [pc, #100]	@ (8009a48 <xTaskResumeAll+0xd8>)
 80099e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80099ee:	4b17      	ldr	r3, [pc, #92]	@ (8009a4c <xTaskResumeAll+0xdc>)
 80099f0:	2201      	movs	r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1de      	bne.n	80099b8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80099fa:	b10c      	cbz	r4, 8009a00 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80099fc:	f7ff fda2 	bl	8009544 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a00:	4d13      	ldr	r5, [pc, #76]	@ (8009a50 <xTaskResumeAll+0xe0>)
 8009a02:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009a04:	b144      	cbz	r4, 8009a18 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8009a06:	4e11      	ldr	r6, [pc, #68]	@ (8009a4c <xTaskResumeAll+0xdc>)
 8009a08:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009a0a:	f7ff ff1b 	bl	8009844 <xTaskIncrementTick>
 8009a0e:	b100      	cbz	r0, 8009a12 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009a10:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a12:	3c01      	subs	r4, #1
 8009a14:	d1f9      	bne.n	8009a0a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8009a16:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009a18:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <xTaskResumeAll+0xdc>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0bc      	beq.n	800999a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009a20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009a34:	2401      	movs	r4, #1
 8009a36:	e7b1      	b.n	800999c <xTaskResumeAll+0x2c>
 8009a38:	24001424 	.word	0x24001424
 8009a3c:	24001448 	.word	0x24001448
 8009a40:	24001478 	.word	0x24001478
 8009a44:	24001440 	.word	0x24001440
 8009a48:	2400191c 	.word	0x2400191c
 8009a4c:	24001434 	.word	0x24001434
 8009a50:	24001438 	.word	0x24001438
 8009a54:	240014bc 	.word	0x240014bc

08009a58 <vTaskDelay>:
	{
 8009a58:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a5a:	b950      	cbnz	r0, 8009a72 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009a5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
	}
 8009a70:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <vTaskDelay+0x44>)
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	b141      	cbz	r1, 8009a8a <vTaskDelay+0x32>
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	e7fe      	b.n	8009a88 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009a8a:	f7ff fecd 	bl	8009828 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a8e:	f7ff fd21 	bl	80094d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009a92:	f7ff ff6d 	bl	8009970 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d0e0      	beq.n	8009a5c <vTaskDelay+0x4>
 8009a9a:	e7e9      	b.n	8009a70 <vTaskDelay+0x18>
 8009a9c:	24001424 	.word	0x24001424

08009aa0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aa0:	4b19      	ldr	r3, [pc, #100]	@ (8009b08 <vTaskSwitchContext+0x68>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	4b19      	ldr	r3, [pc, #100]	@ (8009b0c <vTaskSwitchContext+0x6c>)
{
 8009aa6:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aa8:	b112      	cbz	r2, 8009ab0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab0:	4d17      	ldr	r5, [pc, #92]	@ (8009b10 <vTaskSwitchContext+0x70>)
 8009ab2:	2614      	movs	r6, #20
		xYieldPending = pdFALSE;
 8009ab4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab6:	4917      	ldr	r1, [pc, #92]	@ (8009b14 <vTaskSwitchContext+0x74>)
 8009ab8:	682a      	ldr	r2, [r5, #0]
 8009aba:	fb06 f302 	mul.w	r3, r6, r2
 8009abe:	58cc      	ldr	r4, [r1, r3]
 8009ac0:	18c8      	adds	r0, r1, r3
 8009ac2:	b1ac      	cbz	r4, 8009af0 <vTaskSwitchContext+0x50>
 8009ac4:	6844      	ldr	r4, [r0, #4]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	6864      	ldr	r4, [r4, #4]
 8009aca:	440b      	add	r3, r1
 8009acc:	429c      	cmp	r4, r3
 8009ace:	6044      	str	r4, [r0, #4]
 8009ad0:	bf04      	itt	eq
 8009ad2:	6863      	ldreq	r3, [r4, #4]
 8009ad4:	6043      	streq	r3, [r0, #4]
 8009ad6:	2314      	movs	r3, #20
 8009ad8:	fb03 1102 	mla	r1, r3, r2, r1
 8009adc:	684b      	ldr	r3, [r1, #4]
 8009ade:	68d9      	ldr	r1, [r3, #12]
 8009ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8009b18 <vTaskSwitchContext+0x78>)
 8009ae2:	6019      	str	r1, [r3, #0]
 8009ae4:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8009b1c <vTaskSwitchContext+0x7c>)
 8009aea:	3354      	adds	r3, #84	@ 0x54
 8009aec:	6013      	str	r3, [r2, #0]
}
 8009aee:	e7de      	b.n	8009aae <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af0:	b942      	cbnz	r2, 8009b04 <vTaskSwitchContext+0x64>
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	e7fe      	b.n	8009b02 <vTaskSwitchContext+0x62>
 8009b04:	3a01      	subs	r2, #1
 8009b06:	e7d8      	b.n	8009aba <vTaskSwitchContext+0x1a>
 8009b08:	24001424 	.word	0x24001424
 8009b0c:	24001434 	.word	0x24001434
 8009b10:	24001440 	.word	0x24001440
 8009b14:	240014bc 	.word	0x240014bc
 8009b18:	2400191c 	.word	0x2400191c
 8009b1c:	24000090 	.word	0x24000090

08009b20 <vTaskPlaceOnEventList>:
{
 8009b20:	b510      	push	{r4, lr}
 8009b22:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009b24:	b940      	cbnz	r0, 8009b38 <vTaskPlaceOnEventList+0x18>
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	e7fe      	b.n	8009b36 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <vTaskPlaceOnEventList+0x30>)
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	3118      	adds	r1, #24
 8009b3e:	f7ff f8da 	bl	8008cf6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b42:	4620      	mov	r0, r4
 8009b44:	2101      	movs	r1, #1
}
 8009b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b4a:	f7ff bcc3 	b.w	80094d4 <prvAddCurrentTaskToDelayedList>
 8009b4e:	bf00      	nop
 8009b50:	2400191c 	.word	0x2400191c

08009b54 <vTaskPlaceOnEventListRestricted>:
	{
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	460d      	mov	r5, r1
 8009b58:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009b5a:	b940      	cbnz	r0, 8009b6e <vTaskPlaceOnEventListRestricted+0x1a>
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	e7fe      	b.n	8009b6c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b6e:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <vTaskPlaceOnEventListRestricted+0x38>)
 8009b70:	6819      	ldr	r1, [r3, #0]
 8009b72:	3118      	adds	r1, #24
 8009b74:	f7ff f8b4 	bl	8008ce0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009b78:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	bf0c      	ite	eq
 8009b7e:	4628      	moveq	r0, r5
 8009b80:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b88:	f7ff bca4 	b.w	80094d4 <prvAddCurrentTaskToDelayedList>
 8009b8c:	2400191c 	.word	0x2400191c

08009b90 <xTaskRemoveFromEventList>:
{
 8009b90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b92:	68c3      	ldr	r3, [r0, #12]
 8009b94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009b96:	b944      	cbnz	r4, 8009baa <xTaskRemoveFromEventList+0x1a>
 8009b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009baa:	f104 0518 	add.w	r5, r4, #24
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f7ff f8b8 	bl	8008d24 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb4:	4b11      	ldr	r3, [pc, #68]	@ (8009bfc <xTaskRemoveFromEventList+0x6c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	b9d3      	cbnz	r3, 8009bf0 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bba:	1d25      	adds	r5, r4, #4
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7ff f8b1 	bl	8008d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8009c00 <xTaskRemoveFromEventList+0x70>)
 8009bc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009bc6:	6811      	ldr	r1, [r2, #0]
 8009bc8:	428b      	cmp	r3, r1
 8009bca:	d900      	bls.n	8009bce <xTaskRemoveFromEventList+0x3e>
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	2014      	movs	r0, #20
 8009bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8009c04 <xTaskRemoveFromEventList+0x74>)
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bd8:	f7ff f882 	bl	8008ce0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <xTaskRemoveFromEventList+0x78>)
 8009bde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d906      	bls.n	8009bf6 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8009be8:	2001      	movs	r0, #1
 8009bea:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <xTaskRemoveFromEventList+0x7c>)
 8009bec:	6018      	str	r0, [r3, #0]
}
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4807      	ldr	r0, [pc, #28]	@ (8009c10 <xTaskRemoveFromEventList+0x80>)
 8009bf4:	e7f0      	b.n	8009bd8 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 8009bf6:	2000      	movs	r0, #0
	return xReturn;
 8009bf8:	e7f9      	b.n	8009bee <xTaskRemoveFromEventList+0x5e>
 8009bfa:	bf00      	nop
 8009bfc:	24001424 	.word	0x24001424
 8009c00:	24001440 	.word	0x24001440
 8009c04:	240014bc 	.word	0x240014bc
 8009c08:	2400191c 	.word	0x2400191c
 8009c0c:	24001434 	.word	0x24001434
 8009c10:	24001478 	.word	0x24001478

08009c14 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c14:	4b03      	ldr	r3, [pc, #12]	@ (8009c24 <vTaskInternalSetTimeOutState+0x10>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c1a:	4b03      	ldr	r3, [pc, #12]	@ (8009c28 <vTaskInternalSetTimeOutState+0x14>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6043      	str	r3, [r0, #4]
}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	24001430 	.word	0x24001430
 8009c28:	24001444 	.word	0x24001444

08009c2c <xTaskCheckForTimeOut>:
{
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009c30:	4605      	mov	r5, r0
 8009c32:	b940      	cbnz	r0, 8009c46 <xTaskCheckForTimeOut+0x1a>
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	e7fe      	b.n	8009c44 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009c46:	b941      	cbnz	r1, 8009c5a <xTaskCheckForTimeOut+0x2e>
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	e7fe      	b.n	8009c58 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009c5a:	f000 fac3 	bl	800a1e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c9c <xTaskCheckForTimeOut+0x70>)
 8009c60:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	d010      	beq.n	8009c8a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c68:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <xTaskCheckForTimeOut+0x74>)
 8009c6a:	682e      	ldr	r6, [r5, #0]
 8009c6c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c6e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c70:	4286      	cmp	r6, r0
 8009c72:	d001      	beq.n	8009c78 <xTaskCheckForTimeOut+0x4c>
 8009c74:	428a      	cmp	r2, r1
 8009c76:	d90f      	bls.n	8009c98 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c78:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c7a:	4283      	cmp	r3, r0
 8009c7c:	d90a      	bls.n	8009c94 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009c7e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c80:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009c82:	4413      	add	r3, r2
 8009c84:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c86:	f7ff ffc5 	bl	8009c14 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009c8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009c8c:	f000 faca 	bl	800a224 <vPortExitCritical>
}
 8009c90:	4620      	mov	r0, r4
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009c98:	2401      	movs	r4, #1
 8009c9a:	e7f7      	b.n	8009c8c <xTaskCheckForTimeOut+0x60>
 8009c9c:	24001444 	.word	0x24001444
 8009ca0:	24001430 	.word	0x24001430

08009ca4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009ca4:	4b01      	ldr	r3, [pc, #4]	@ (8009cac <vTaskMissedYield+0x8>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
}
 8009caa:	4770      	bx	lr
 8009cac:	24001434 	.word	0x24001434

08009cb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <xTaskGetSchedulerState+0x18>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	b133      	cbz	r3, 8009cc4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cb6:	4b05      	ldr	r3, [pc, #20]	@ (8009ccc <xTaskGetSchedulerState+0x1c>)
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	fab0 f080 	clz	r0, r0
 8009cbe:	0940      	lsrs	r0, r0, #5
 8009cc0:	0040      	lsls	r0, r0, #1
 8009cc2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cc4:	2001      	movs	r0, #1
	}
 8009cc6:	4770      	bx	lr
 8009cc8:	2400143c 	.word	0x2400143c
 8009ccc:	24001424 	.word	0x24001424

08009cd0 <xTaskPriorityDisinherit>:
	{
 8009cd0:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009cd2:	b908      	cbnz	r0, 8009cd8 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009cd4:	2000      	movs	r0, #0
	}
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d48 <xTaskPriorityDisinherit+0x78>)
 8009cda:	681c      	ldr	r4, [r3, #0]
 8009cdc:	4284      	cmp	r4, r0
 8009cde:	d008      	beq.n	8009cf2 <xTaskPriorityDisinherit+0x22>
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cf2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009cf4:	b943      	cbnz	r3, 8009d08 <xTaskPriorityDisinherit+0x38>
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	e7fe      	b.n	8009d06 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009d0a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d0c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009d0e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d10:	4291      	cmp	r1, r2
 8009d12:	d0df      	beq.n	8009cd4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1dd      	bne.n	8009cd4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d18:	1d25      	adds	r5, r4, #4
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f7ff f802 	bl	8008d24 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d20:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d26:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d28:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d2a:	4a08      	ldr	r2, [pc, #32]	@ (8009d4c <xTaskPriorityDisinherit+0x7c>)
 8009d2c:	6811      	ldr	r1, [r2, #0]
 8009d2e:	428b      	cmp	r3, r1
 8009d30:	d900      	bls.n	8009d34 <xTaskPriorityDisinherit+0x64>
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	4a06      	ldr	r2, [pc, #24]	@ (8009d50 <xTaskPriorityDisinherit+0x80>)
 8009d36:	2014      	movs	r0, #20
 8009d38:	4629      	mov	r1, r5
 8009d3a:	fb00 2003 	mla	r0, r0, r3, r2
 8009d3e:	f7fe ffcf 	bl	8008ce0 <vListInsertEnd>
					xReturn = pdTRUE;
 8009d42:	2001      	movs	r0, #1
		return xReturn;
 8009d44:	e7c7      	b.n	8009cd6 <xTaskPriorityDisinherit+0x6>
 8009d46:	bf00      	nop
 8009d48:	2400191c 	.word	0x2400191c
 8009d4c:	24001440 	.word	0x24001440
 8009d50:	240014bc 	.word	0x240014bc

08009d54 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8009d54:	4291      	cmp	r1, r2
{
 8009d56:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d58:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d5a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009d5c:	d80a      	bhi.n	8009d74 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	6983      	ldr	r3, [r0, #24]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d20d      	bcs.n	8009d82 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d66:	1d01      	adds	r1, r0, #4
 8009d68:	4b07      	ldr	r3, [pc, #28]	@ (8009d88 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	f7fe ffc3 	bl	8008cf6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009d70:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009d72:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d201      	bcs.n	8009d7c <prvInsertTimerInActiveList+0x28>
 8009d78:	4299      	cmp	r1, r3
 8009d7a:	d202      	bcs.n	8009d82 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d7c:	1d01      	adds	r1, r0, #4
 8009d7e:	4b03      	ldr	r3, [pc, #12]	@ (8009d8c <prvInsertTimerInActiveList+0x38>)
 8009d80:	e7f3      	b.n	8009d6a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009d82:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009d84:	e7f5      	b.n	8009d72 <prvInsertTimerInActiveList+0x1e>
 8009d86:	bf00      	nop
 8009d88:	24001a1c 	.word	0x24001a1c
 8009d8c:	24001a20 	.word	0x24001a20

08009d90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009d92:	4c11      	ldr	r4, [pc, #68]	@ (8009dd8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009d94:	f000 fa26 	bl	800a1e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009d98:	6825      	ldr	r5, [r4, #0]
 8009d9a:	b9bd      	cbnz	r5, 8009dcc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d9c:	4f0f      	ldr	r7, [pc, #60]	@ (8009ddc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009d9e:	4e10      	ldr	r6, [pc, #64]	@ (8009de0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7fe ff8f 	bl	8008cc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7fe ff8c 	bl	8008cc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dac:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dae:	4a0e      	ldr	r2, [pc, #56]	@ (8009de8 <prvCheckForValidListAndQueue+0x58>)
 8009db0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009db2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009db4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009db6:	4b0d      	ldr	r3, [pc, #52]	@ (8009dec <prvCheckForValidListAndQueue+0x5c>)
 8009db8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dba:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <prvCheckForValidListAndQueue+0x60>)
 8009dbc:	9500      	str	r5, [sp, #0]
 8009dbe:	f7ff f889 	bl	8008ed4 <xQueueGenericCreateStatic>
 8009dc2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009dc4:	b110      	cbz	r0, 8009dcc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dc6:	490b      	ldr	r1, [pc, #44]	@ (8009df4 <prvCheckForValidListAndQueue+0x64>)
 8009dc8:	f7ff fad0 	bl	800936c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009dd2:	f000 ba27 	b.w	800a224 <vPortExitCritical>
 8009dd6:	bf00      	nop
 8009dd8:	24001a18 	.word	0x24001a18
 8009ddc:	24001a38 	.word	0x24001a38
 8009de0:	24001a24 	.word	0x24001a24
 8009de4:	24001a20 	.word	0x24001a20
 8009de8:	24001970 	.word	0x24001970
 8009dec:	24001a1c 	.word	0x24001a1c
 8009df0:	24001920 	.word	0x24001920
 8009df4:	0800d4a0 	.word	0x0800d4a0

08009df8 <xTimerCreateTimerTask>:
{
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009dfc:	f7ff ffc8 	bl	8009d90 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009e00:	4b12      	ldr	r3, [pc, #72]	@ (8009e4c <xTimerCreateTimerTask+0x54>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	b1b3      	cbz	r3, 8009e34 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e06:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e08:	aa07      	add	r2, sp, #28
 8009e0a:	a906      	add	r1, sp, #24
 8009e0c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e0e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e12:	f7fe ff4b 	bl	8008cac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	9a07      	ldr	r2, [sp, #28]
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	9b06      	ldr	r3, [sp, #24]
 8009e1e:	490c      	ldr	r1, [pc, #48]	@ (8009e50 <xTimerCreateTimerTask+0x58>)
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	2302      	movs	r3, #2
 8009e24:	480b      	ldr	r0, [pc, #44]	@ (8009e54 <xTimerCreateTimerTask+0x5c>)
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4623      	mov	r3, r4
 8009e2a:	f7ff fc47 	bl	80096bc <xTaskCreateStatic>
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e58 <xTimerCreateTimerTask+0x60>)
 8009e30:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009e32:	b940      	cbnz	r0, 8009e46 <xTimerCreateTimerTask+0x4e>
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009e44:	e7fe      	b.n	8009e44 <xTimerCreateTimerTask+0x4c>
}
 8009e46:	2001      	movs	r0, #1
 8009e48:	b008      	add	sp, #32
 8009e4a:	bd10      	pop	{r4, pc}
 8009e4c:	24001a18 	.word	0x24001a18
 8009e50:	0800d4a5 	.word	0x0800d4a5
 8009e54:	08009f55 	.word	0x08009f55
 8009e58:	24001a14 	.word	0x24001a14

08009e5c <xTimerGenericCommand>:
{
 8009e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009e5e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009e60:	4604      	mov	r4, r0
{
 8009e62:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009e64:	b940      	cbnz	r0, 8009e78 <xTimerGenericCommand+0x1c>
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	e7fe      	b.n	8009e76 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009e78:	4d0c      	ldr	r5, [pc, #48]	@ (8009eac <xTimerGenericCommand+0x50>)
 8009e7a:	6828      	ldr	r0, [r5, #0]
 8009e7c:	b178      	cbz	r0, 8009e9e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e7e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e80:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e82:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e86:	dc0c      	bgt.n	8009ea2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e88:	f7ff ff12 	bl	8009cb0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e8c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e8e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e90:	4669      	mov	r1, sp
 8009e92:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e94:	bf0c      	ite	eq
 8009e96:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e98:	461a      	movne	r2, r3
 8009e9a:	f7ff f869 	bl	8008f70 <xQueueGenericSend>
}
 8009e9e:	b004      	add	sp, #16
 8009ea0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4669      	mov	r1, sp
 8009ea6:	f7ff f915 	bl	80090d4 <xQueueGenericSendFromISR>
 8009eaa:	e7f8      	b.n	8009e9e <xTimerGenericCommand+0x42>
 8009eac:	24001a18 	.word	0x24001a18

08009eb0 <prvSampleTimeNow>:
{
 8009eb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009eb4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8009f50 <prvSampleTimeNow+0xa0>
{
 8009eb8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009eba:	f7ff fcbd 	bl	8009838 <xTaskGetTickCount>
 8009ebe:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec4:	4283      	cmp	r3, r0
 8009ec6:	d909      	bls.n	8009edc <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ec8:	4f1f      	ldr	r7, [pc, #124]	@ (8009f48 <prvSampleTimeNow+0x98>)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	b96a      	cbnz	r2, 8009eec <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8009f4c <prvSampleTimeNow+0x9c>)
 8009ed2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009ed8:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009eda:	e000      	b.n	8009ede <prvSampleTimeNow+0x2e>
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009ee0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009ee2:	f8c8 5000 	str.w	r5, [r8]
}
 8009ee6:	b002      	add	sp, #8
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eec:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eee:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ef0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ef4:	f104 0a04 	add.w	sl, r4, #4
 8009ef8:	4650      	mov	r0, sl
 8009efa:	f7fe ff13 	bl	8008d24 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efe:	6a23      	ldr	r3, [r4, #32]
 8009f00:	4620      	mov	r0, r4
 8009f02:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009f08:	075b      	lsls	r3, r3, #29
 8009f0a:	d5de      	bpl.n	8009eca <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f0c:	69a3      	ldr	r3, [r4, #24]
 8009f0e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8009f10:	4599      	cmp	r9, r3
 8009f12:	d206      	bcs.n	8009f22 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f14:	4651      	mov	r1, sl
 8009f16:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f18:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f1a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f1c:	f7fe feeb 	bl	8008cf6 <vListInsert>
 8009f20:	e7d3      	b.n	8009eca <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f22:	2300      	movs	r3, #0
 8009f24:	464a      	mov	r2, r9
 8009f26:	4620      	mov	r0, r4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	f7ff ff96 	bl	8009e5c <xTimerGenericCommand>
				configASSERT( xResult );
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d1ca      	bne.n	8009eca <prvSampleTimeNow+0x1a>
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	e7fe      	b.n	8009f44 <prvSampleTimeNow+0x94>
 8009f46:	bf00      	nop
 8009f48:	24001a20 	.word	0x24001a20
 8009f4c:	24001a1c 	.word	0x24001a1c
 8009f50:	24001a10 	.word	0x24001a10

08009f54 <prvTimerTask>:
{
 8009f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f58:	4d6e      	ldr	r5, [pc, #440]	@ (800a114 <prvTimerTask+0x1c0>)
{
 8009f5a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f5c:	4e6e      	ldr	r6, [pc, #440]	@ (800a118 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	f8d3 8000 	ldr.w	r8, [r3]
 8009f64:	f1b8 0f00 	cmp.w	r8, #0
 8009f68:	d035      	beq.n	8009fd6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f6a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f6c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f6e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009f72:	f7ff fc59 	bl	8009828 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f76:	a804      	add	r0, sp, #16
 8009f78:	f7ff ff9a 	bl	8009eb0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009f7c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f7e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d169      	bne.n	800a058 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d14c      	bne.n	800a022 <prvTimerTask+0xce>
 8009f88:	4540      	cmp	r0, r8
 8009f8a:	d350      	bcc.n	800a02e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8009f8c:	f7ff fcf0 	bl	8009970 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f96:	1d38      	adds	r0, r7, #4
 8009f98:	f7fe fec4 	bl	8008d24 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fa0:	0758      	lsls	r0, r3, #29
 8009fa2:	d51a      	bpl.n	8009fda <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fa4:	69b9      	ldr	r1, [r7, #24]
 8009fa6:	4643      	mov	r3, r8
 8009fa8:	464a      	mov	r2, r9
 8009faa:	4638      	mov	r0, r7
 8009fac:	4441      	add	r1, r8
 8009fae:	f7ff fed1 	bl	8009d54 <prvInsertTimerInActiveList>
 8009fb2:	b1b0      	cbz	r0, 8009fe2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4638      	mov	r0, r7
 8009fbc:	9400      	str	r4, [sp, #0]
 8009fbe:	f7ff ff4d 	bl	8009e5c <xTimerGenericCommand>
			configASSERT( xResult );
 8009fc2:	b970      	cbnz	r0, 8009fe2 <prvTimerTask+0x8e>
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	e7fe      	b.n	8009fd4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fd6:	2401      	movs	r4, #1
 8009fd8:	e7cb      	b.n	8009f72 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fda:	f023 0301 	bic.w	r3, r3, #1
 8009fde:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fe8:	2200      	movs	r2, #0
 8009fea:	a904      	add	r1, sp, #16
 8009fec:	6830      	ldr	r0, [r6, #0]
 8009fee:	f7ff f91f 	bl	8009230 <xQueueReceive>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0b3      	beq.n	8009f5e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ff6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ff8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	db2f      	blt.n	800a05e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ffe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a000:	6963      	ldr	r3, [r4, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d132      	bne.n	800a06c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a006:	a803      	add	r0, sp, #12
 800a008:	f7ff ff52 	bl	8009eb0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a00c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a00e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800a010:	2b09      	cmp	r3, #9
 800a012:	d8e9      	bhi.n	8009fe8 <prvTimerTask+0x94>
 800a014:	e8df f003 	tbb	[pc, r3]
 800a018:	572e2e2e 	.word	0x572e2e2e
 800a01c:	2e2e765e 	.word	0x2e2e765e
 800a020:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a022:	4b3e      	ldr	r3, [pc, #248]	@ (800a11c <prvTimerTask+0x1c8>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681c      	ldr	r4, [r3, #0]
 800a028:	fab4 f484 	clz	r4, r4
 800a02c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a02e:	4622      	mov	r2, r4
 800a030:	eba8 0109 	sub.w	r1, r8, r9
 800a034:	6830      	ldr	r0, [r6, #0]
 800a036:	f7ff f9ab 	bl	8009390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a03a:	f7ff fc99 	bl	8009970 <xTaskResumeAll>
 800a03e:	2800      	cmp	r0, #0
 800a040:	d1d2      	bne.n	8009fe8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800a042:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a04a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	e7c7      	b.n	8009fe8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800a058:	f7ff fc8a 	bl	8009970 <xTaskResumeAll>
}
 800a05c:	e7c4      	b.n	8009fe8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a05e:	9b05      	ldr	r3, [sp, #20]
 800a060:	9907      	ldr	r1, [sp, #28]
 800a062:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dbbe      	blt.n	8009fe8 <prvTimerTask+0x94>
 800a06a:	e7c8      	b.n	8009ffe <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a06c:	1d20      	adds	r0, r4, #4
 800a06e:	f7fe fe59 	bl	8008d24 <uxListRemove>
 800a072:	e7c8      	b.n	800a006 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a074:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a078:	4620      	mov	r0, r4
 800a07a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a07c:	f043 0301 	orr.w	r3, r3, #1
 800a080:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	4419      	add	r1, r3
 800a088:	f7ff fe64 	bl	8009d54 <prvInsertTimerInActiveList>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d0ab      	beq.n	8009fe8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a090:	6a23      	ldr	r3, [r4, #32]
 800a092:	4620      	mov	r0, r4
 800a094:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a096:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a09a:	0759      	lsls	r1, r3, #29
 800a09c:	d5a4      	bpl.n	8009fe8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a09e:	69a2      	ldr	r2, [r4, #24]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9905      	ldr	r1, [sp, #20]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f7ff fed6 	bl	8009e5c <xTimerGenericCommand>
							configASSERT( xResult );
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d199      	bne.n	8009fe8 <prvTimerTask+0x94>
 800a0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	e7fe      	b.n	800a0c4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800a0d2:	e789      	b.n	8009fe8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0d4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0e0:	9905      	ldr	r1, [sp, #20]
 800a0e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0e4:	b941      	cbnz	r1, 800a0f8 <prvTimerTask+0x1a4>
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	e7fe      	b.n	800a0f6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	4401      	add	r1, r0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f7ff fe29 	bl	8009d54 <prvInsertTimerInActiveList>
					break;
 800a102:	e771      	b.n	8009fe8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a104:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a108:	079a      	lsls	r2, r3, #30
 800a10a:	d4de      	bmi.n	800a0ca <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 fa67 	bl	800a5e0 <vPortFree>
 800a112:	e769      	b.n	8009fe8 <prvTimerTask+0x94>
 800a114:	24001a20 	.word	0x24001a20
 800a118:	24001a18 	.word	0x24001a18
 800a11c:	24001a1c 	.word	0x24001a1c

0800a120 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a120:	4808      	ldr	r0, [pc, #32]	@ (800a144 <prvPortStartFirstTask+0x24>)
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	6800      	ldr	r0, [r0, #0]
 800a126:	f380 8808 	msr	MSP, r0
 800a12a:	f04f 0000 	mov.w	r0, #0
 800a12e:	f380 8814 	msr	CONTROL, r0
 800a132:	b662      	cpsie	i
 800a134:	b661      	cpsie	f
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	df00      	svc	0
 800a140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a142:	0000      	.short	0x0000
 800a144:	e000ed08 	.word	0xe000ed08

0800a148 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a148:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a158 <vPortEnableVFP+0x10>
 800a14c:	6801      	ldr	r1, [r0, #0]
 800a14e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a152:	6001      	str	r1, [r0, #0]
 800a154:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a156:	0000      	.short	0x0000
 800a158:	e000ed88 	.word	0xe000ed88

0800a15c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a15c:	2300      	movs	r3, #0
{
 800a15e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a160:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a162:	4b0d      	ldr	r3, [pc, #52]	@ (800a198 <prvTaskExitError+0x3c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3301      	adds	r3, #1
 800a168:	d008      	beq.n	800a17c <prvTaskExitError+0x20>
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	e7fe      	b.n	800a17a <prvTaskExitError+0x1e>
 800a17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0fc      	beq.n	800a18c <prvTaskExitError+0x30>
}
 800a192:	b002      	add	sp, #8
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	24000080 	.word	0x24000080

0800a19c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a19c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1a0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1a4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a1a8:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1aa:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1ac:	4b03      	ldr	r3, [pc, #12]	@ (800a1bc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1ae:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1b0:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1b2:	f06f 0302 	mvn.w	r3, #2
 800a1b6:	6203      	str	r3, [r0, #32]
}
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	0800a15d 	.word	0x0800a15d

0800a1c0 <SVC_Handler>:
	__asm volatile (
 800a1c0:	4b07      	ldr	r3, [pc, #28]	@ (800a1e0 <pxCurrentTCBConst2>)
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	6808      	ldr	r0, [r1, #0]
 800a1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	f380 8809 	msr	PSP, r0
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8811 	msr	BASEPRI, r0
 800a1da:	4770      	bx	lr
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst2>:
 800a1e0:	2400191c 	.word	0x2400191c

0800a1e4 <vPortEnterCritical>:
 800a1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a1f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a220 <vPortEnterCritical+0x3c>)
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a1fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a1fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a1fe:	d10e      	bne.n	800a21e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a200:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a204:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	b143      	cbz	r3, 800a21e <vPortEnterCritical+0x3a>
 800a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	e7fe      	b.n	800a21c <vPortEnterCritical+0x38>
}
 800a21e:	4770      	bx	lr
 800a220:	24000080 	.word	0x24000080

0800a224 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a224:	4a08      	ldr	r2, [pc, #32]	@ (800a248 <vPortExitCritical+0x24>)
 800a226:	6813      	ldr	r3, [r2, #0]
 800a228:	b943      	cbnz	r3, 800a23c <vPortExitCritical+0x18>
 800a22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	e7fe      	b.n	800a23a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a23c:	3b01      	subs	r3, #1
 800a23e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a240:	b90b      	cbnz	r3, 800a246 <vPortExitCritical+0x22>
	__asm volatile
 800a242:	f383 8811 	msr	BASEPRI, r3
}
 800a246:	4770      	bx	lr
 800a248:	24000080 	.word	0x24000080
 800a24c:	00000000 	.word	0x00000000

0800a250 <PendSV_Handler>:
	__asm volatile
 800a250:	f3ef 8009 	mrs	r0, PSP
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <pxCurrentTCBConst>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	f01e 0f10 	tst.w	lr, #16
 800a260:	bf08      	it	eq
 800a262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26a:	6010      	str	r0, [r2, #0]
 800a26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a274:	f380 8811 	msr	BASEPRI, r0
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f7ff fc0e 	bl	8009aa0 <vTaskSwitchContext>
 800a284:	f04f 0000 	mov.w	r0, #0
 800a288:	f380 8811 	msr	BASEPRI, r0
 800a28c:	bc09      	pop	{r0, r3}
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	6808      	ldr	r0, [r1, #0]
 800a292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a296:	f01e 0f10 	tst.w	lr, #16
 800a29a:	bf08      	it	eq
 800a29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2a0:	f380 8809 	msr	PSP, r0
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	f3af 8000 	nop.w

0800a2b0 <pxCurrentTCBConst>:
 800a2b0:	2400191c 	.word	0x2400191c

0800a2b4 <xPortSysTickHandler>:
{
 800a2b4:	b508      	push	{r3, lr}
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a2c6:	f7ff fabd 	bl	8009844 <xTaskIncrementTick>
 800a2ca:	b128      	cbz	r0, 800a2d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bd08      	pop	{r3, pc}

0800a2e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a2e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2ea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ee:	4b04      	ldr	r3, [pc, #16]	@ (800a300 <vPortSetupTimerInterrupt+0x20>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2fa:	2307      	movs	r3, #7
 800a2fc:	6113      	str	r3, [r2, #16]
}
 800a2fe:	4770      	bx	lr
 800a300:	24000074 	.word	0x24000074

0800a304 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a304:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a30a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800a30e:	4a38      	ldr	r2, [pc, #224]	@ (800a3f0 <xPortStartScheduler+0xec>)
 800a310:	4291      	cmp	r1, r2
 800a312:	d108      	bne.n	800a326 <xPortStartScheduler+0x22>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	e7fe      	b.n	800a324 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a326:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a32a:	4b32      	ldr	r3, [pc, #200]	@ (800a3f4 <xPortStartScheduler+0xf0>)
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d108      	bne.n	800a342 <xPortStartScheduler+0x3e>
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	e7fe      	b.n	800a340 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a342:	4b2d      	ldr	r3, [pc, #180]	@ (800a3f8 <xPortStartScheduler+0xf4>)
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a34a:	22ff      	movs	r2, #255	@ 0xff
 800a34c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a34e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a350:	4a2a      	ldr	r2, [pc, #168]	@ (800a3fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a358:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a35c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a360:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a362:	2307      	movs	r3, #7
 800a364:	4a26      	ldr	r2, [pc, #152]	@ (800a400 <xPortStartScheduler+0xfc>)
 800a366:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a368:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800a36c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a36e:	0609      	lsls	r1, r1, #24
 800a370:	d40a      	bmi.n	800a388 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a372:	2b03      	cmp	r3, #3
 800a374:	d011      	beq.n	800a39a <xPortStartScheduler+0x96>
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	e7fe      	b.n	800a386 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800a388:	3b01      	subs	r3, #1
 800a38a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a38c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f88d 3003 	strb.w	r3, [sp, #3]
 800a398:	e7e6      	b.n	800a368 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a39a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a39e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800a3a2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3a4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3a6:	9b01      	ldr	r3, [sp, #4]
 800a3a8:	4a13      	ldr	r2, [pc, #76]	@ (800a3f8 <xPortStartScheduler+0xf4>)
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ae:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3b6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3ba:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3c2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800a3c6:	f7ff ff8b 	bl	800a2e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a404 <xPortStartScheduler+0x100>)
 800a3cc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a3ce:	f7ff febb 	bl	800a148 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3d2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800a3d6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3da:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800a3de:	f7ff fe9f 	bl	800a120 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a3e2:	f7ff fb5d 	bl	8009aa0 <vTaskSwitchContext>
}
 800a3e6:	4628      	mov	r0, r5
	prvTaskExitError();
 800a3e8:	f7ff feb8 	bl	800a15c <prvTaskExitError>
}
 800a3ec:	b003      	add	sp, #12
 800a3ee:	bd30      	pop	{r4, r5, pc}
 800a3f0:	410fc271 	.word	0x410fc271
 800a3f4:	410fc270 	.word	0x410fc270
 800a3f8:	e000e400 	.word	0xe000e400
 800a3fc:	24001a50 	.word	0x24001a50
 800a400:	24001a4c 	.word	0x24001a4c
 800a404:	24000080 	.word	0x24000080

0800a408 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a408:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a40c:	2b0f      	cmp	r3, #15
 800a40e:	d90e      	bls.n	800a42e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a410:	4a11      	ldr	r2, [pc, #68]	@ (800a458 <vPortValidateInterruptPriority+0x50>)
 800a412:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a414:	4a11      	ldr	r2, [pc, #68]	@ (800a45c <vPortValidateInterruptPriority+0x54>)
 800a416:	7812      	ldrb	r2, [r2, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d908      	bls.n	800a42e <vPortValidateInterruptPriority+0x26>
 800a41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	e7fe      	b.n	800a42c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a42e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a432:	4a0b      	ldr	r2, [pc, #44]	@ (800a460 <vPortValidateInterruptPriority+0x58>)
 800a434:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a43e:	4293      	cmp	r3, r2
 800a440:	d908      	bls.n	800a454 <vPortValidateInterruptPriority+0x4c>
 800a442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	e7fe      	b.n	800a452 <vPortValidateInterruptPriority+0x4a>
	}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	e000e3f0 	.word	0xe000e3f0
 800a45c:	24001a50 	.word	0x24001a50
 800a460:	24001a4c 	.word	0x24001a4c

0800a464 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a464:	4b10      	ldr	r3, [pc, #64]	@ (800a4a8 <prvInsertBlockIntoFreeList+0x44>)
{
 800a466:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a468:	461a      	mov	r2, r3
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d3fb      	bcc.n	800a468 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a470:	6854      	ldr	r4, [r2, #4]
 800a472:	1911      	adds	r1, r2, r4
 800a474:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a476:	bf01      	itttt	eq
 800a478:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800a47a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a47c:	1909      	addeq	r1, r1, r4
 800a47e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a480:	6844      	ldr	r4, [r0, #4]
 800a482:	1901      	adds	r1, r0, r4
 800a484:	428b      	cmp	r3, r1
 800a486:	d10c      	bne.n	800a4a2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a488:	4908      	ldr	r1, [pc, #32]	@ (800a4ac <prvInsertBlockIntoFreeList+0x48>)
 800a48a:	6809      	ldr	r1, [r1, #0]
 800a48c:	428b      	cmp	r3, r1
 800a48e:	d003      	beq.n	800a498 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a490:	6859      	ldr	r1, [r3, #4]
 800a492:	4421      	add	r1, r4
 800a494:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a496:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a498:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a49a:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a49c:	bf18      	it	ne
 800a49e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	e7f8      	b.n	800a498 <prvInsertBlockIntoFreeList+0x34>
 800a4a6:	bf00      	nop
 800a4a8:	24001a6c 	.word	0x24001a6c
 800a4ac:	24001a68 	.word	0x24001a68

0800a4b0 <pvPortMalloc>:
{
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a4b6:	f7ff f9b7 	bl	8009828 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a4ba:	4942      	ldr	r1, [pc, #264]	@ (800a5c4 <pvPortMalloc+0x114>)
 800a4bc:	4d42      	ldr	r5, [pc, #264]	@ (800a5c8 <pvPortMalloc+0x118>)
 800a4be:	680b      	ldr	r3, [r1, #0]
 800a4c0:	bb0b      	cbnz	r3, 800a506 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a4c2:	4a42      	ldr	r2, [pc, #264]	@ (800a5cc <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4c4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4c6:	4e42      	ldr	r6, [pc, #264]	@ (800a5d0 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4c8:	bf1b      	ittet	ne
 800a4ca:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4cc:	f502 5270 	addne.w	r2, r2, #15360	@ 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4d0:	f44f 5370 	moveq.w	r3, #15360	@ 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d4:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4d8:	bf1c      	itt	ne
 800a4da:	1a13      	subne	r3, r2, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4dc:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 800a4de:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4e0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4e2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4e4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800a4e6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a4ec:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4f0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a4f2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4f4:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4f8:	4b36      	ldr	r3, [pc, #216]	@ (800a5d4 <pvPortMalloc+0x124>)
 800a4fa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4fc:	4b36      	ldr	r3, [pc, #216]	@ (800a5d8 <pvPortMalloc+0x128>)
 800a4fe:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a504:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a506:	682e      	ldr	r6, [r5, #0]
 800a508:	4226      	tst	r6, r4
 800a50a:	d155      	bne.n	800a5b8 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800a50c:	2c00      	cmp	r4, #0
 800a50e:	d046      	beq.n	800a59e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800a510:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a514:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a516:	bf1c      	itt	ne
 800a518:	f023 0307 	bicne.w	r3, r3, #7
 800a51c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d04a      	beq.n	800a5b8 <pvPortMalloc+0x108>
 800a522:	4f2d      	ldr	r7, [pc, #180]	@ (800a5d8 <pvPortMalloc+0x128>)
 800a524:	683c      	ldr	r4, [r7, #0]
 800a526:	429c      	cmp	r4, r3
 800a528:	d346      	bcc.n	800a5b8 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800a52a:	4a29      	ldr	r2, [pc, #164]	@ (800a5d0 <pvPortMalloc+0x120>)
 800a52c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52e:	6868      	ldr	r0, [r5, #4]
 800a530:	4298      	cmp	r0, r3
 800a532:	d204      	bcs.n	800a53e <pvPortMalloc+0x8e>
 800a534:	f8d5 c000 	ldr.w	ip, [r5]
 800a538:	f1bc 0f00 	cmp.w	ip, #0
 800a53c:	d115      	bne.n	800a56a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a53e:	6809      	ldr	r1, [r1, #0]
 800a540:	42a9      	cmp	r1, r5
 800a542:	d039      	beq.n	800a5b8 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a544:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a546:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a54a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a54c:	1ac2      	subs	r2, r0, r3
 800a54e:	2a10      	cmp	r2, #16
 800a550:	d912      	bls.n	800a578 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a552:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a554:	0741      	lsls	r1, r0, #29
 800a556:	d00b      	beq.n	800a570 <pvPortMalloc+0xc0>
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	e7fe      	b.n	800a568 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 800a56a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a56c:	4665      	mov	r5, ip
 800a56e:	e7de      	b.n	800a52e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a570:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a572:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a574:	f7ff ff76 	bl	800a464 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a578:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a57a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a57c:	4915      	ldr	r1, [pc, #84]	@ (800a5d4 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a57e:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a580:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a582:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800a584:	4a15      	ldr	r2, [pc, #84]	@ (800a5dc <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a586:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800a588:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800a58a:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a58c:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800a58e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a592:	bf38      	it	cc
 800a594:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a596:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a59a:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800a59c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800a59e:	f7ff f9e7 	bl	8009970 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a2:	0763      	lsls	r3, r4, #29
 800a5a4:	d00a      	beq.n	800a5bc <pvPortMalloc+0x10c>
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	e7fe      	b.n	800a5b6 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800a5b8:	2400      	movs	r4, #0
 800a5ba:	e7f0      	b.n	800a59e <pvPortMalloc+0xee>
}
 800a5bc:	4620      	mov	r0, r4
 800a5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c2:	bf00      	nop
 800a5c4:	24001a68 	.word	0x24001a68
 800a5c8:	24001a54 	.word	0x24001a54
 800a5cc:	24001a74 	.word	0x24001a74
 800a5d0:	24001a6c 	.word	0x24001a6c
 800a5d4:	24001a60 	.word	0x24001a60
 800a5d8:	24001a64 	.word	0x24001a64
 800a5dc:	24001a5c 	.word	0x24001a5c

0800a5e0 <vPortFree>:
{
 800a5e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	b390      	cbz	r0, 800a64c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a650 <vPortFree+0x70>)
 800a5e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a5ec:	6812      	ldr	r2, [r2, #0]
 800a5ee:	4213      	tst	r3, r2
 800a5f0:	d108      	bne.n	800a604 <vPortFree+0x24>
 800a5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	e7fe      	b.n	800a602 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a604:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a608:	b141      	cbz	r1, 800a61c <vPortFree+0x3c>
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	e7fe      	b.n	800a61a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a61c:	ea23 0302 	bic.w	r3, r3, r2
 800a620:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a624:	f7ff f900 	bl	8009828 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a628:	4a0a      	ldr	r2, [pc, #40]	@ (800a654 <vPortFree+0x74>)
 800a62a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a62e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a632:	6811      	ldr	r1, [r2, #0]
 800a634:	440b      	add	r3, r1
 800a636:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a638:	f7ff ff14 	bl	800a464 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a63c:	4a06      	ldr	r2, [pc, #24]	@ (800a658 <vPortFree+0x78>)
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	3301      	adds	r3, #1
}
 800a642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800a646:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a648:	f7ff b992 	b.w	8009970 <xTaskResumeAll>
}
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	bf00      	nop
 800a650:	24001a54 	.word	0x24001a54
 800a654:	24001a64 	.word	0x24001a64
 800a658:	24001a58 	.word	0x24001a58

0800a65c <__cvt>:
 800a65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65e:	ed2d 8b02 	vpush	{d8}
 800a662:	eeb0 8b40 	vmov.f64	d8, d0
 800a666:	b085      	sub	sp, #20
 800a668:	4617      	mov	r7, r2
 800a66a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a66c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a66e:	ee18 2a90 	vmov	r2, s17
 800a672:	f025 0520 	bic.w	r5, r5, #32
 800a676:	2a00      	cmp	r2, #0
 800a678:	bfb6      	itet	lt
 800a67a:	222d      	movlt	r2, #45	@ 0x2d
 800a67c:	2200      	movge	r2, #0
 800a67e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a682:	2d46      	cmp	r5, #70	@ 0x46
 800a684:	460c      	mov	r4, r1
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	d004      	beq.n	800a694 <__cvt+0x38>
 800a68a:	2d45      	cmp	r5, #69	@ 0x45
 800a68c:	d100      	bne.n	800a690 <__cvt+0x34>
 800a68e:	3401      	adds	r4, #1
 800a690:	2102      	movs	r1, #2
 800a692:	e000      	b.n	800a696 <__cvt+0x3a>
 800a694:	2103      	movs	r1, #3
 800a696:	ab03      	add	r3, sp, #12
 800a698:	9301      	str	r3, [sp, #4]
 800a69a:	ab02      	add	r3, sp, #8
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4633      	mov	r3, r6
 800a6a2:	eeb0 0b48 	vmov.f64	d0, d8
 800a6a6:	f000 ff9b 	bl	800b5e0 <_dtoa_r>
 800a6aa:	2d47      	cmp	r5, #71	@ 0x47
 800a6ac:	d114      	bne.n	800a6d8 <__cvt+0x7c>
 800a6ae:	07fb      	lsls	r3, r7, #31
 800a6b0:	d50a      	bpl.n	800a6c8 <__cvt+0x6c>
 800a6b2:	1902      	adds	r2, r0, r4
 800a6b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	bf08      	it	eq
 800a6be:	9203      	streq	r2, [sp, #12]
 800a6c0:	2130      	movs	r1, #48	@ 0x30
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d319      	bcc.n	800a6fc <__cvt+0xa0>
 800a6c8:	9b03      	ldr	r3, [sp, #12]
 800a6ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6cc:	1a1b      	subs	r3, r3, r0
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	b005      	add	sp, #20
 800a6d2:	ecbd 8b02 	vpop	{d8}
 800a6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d8:	2d46      	cmp	r5, #70	@ 0x46
 800a6da:	eb00 0204 	add.w	r2, r0, r4
 800a6de:	d1e9      	bne.n	800a6b4 <__cvt+0x58>
 800a6e0:	7803      	ldrb	r3, [r0, #0]
 800a6e2:	2b30      	cmp	r3, #48	@ 0x30
 800a6e4:	d107      	bne.n	800a6f6 <__cvt+0x9a>
 800a6e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ee:	bf1c      	itt	ne
 800a6f0:	f1c4 0401 	rsbne	r4, r4, #1
 800a6f4:	6034      	strne	r4, [r6, #0]
 800a6f6:	6833      	ldr	r3, [r6, #0]
 800a6f8:	441a      	add	r2, r3
 800a6fa:	e7db      	b.n	800a6b4 <__cvt+0x58>
 800a6fc:	1c5c      	adds	r4, r3, #1
 800a6fe:	9403      	str	r4, [sp, #12]
 800a700:	7019      	strb	r1, [r3, #0]
 800a702:	e7de      	b.n	800a6c2 <__cvt+0x66>

0800a704 <__exponent>:
 800a704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a706:	2900      	cmp	r1, #0
 800a708:	bfba      	itte	lt
 800a70a:	4249      	neglt	r1, r1
 800a70c:	232d      	movlt	r3, #45	@ 0x2d
 800a70e:	232b      	movge	r3, #43	@ 0x2b
 800a710:	2909      	cmp	r1, #9
 800a712:	7002      	strb	r2, [r0, #0]
 800a714:	7043      	strb	r3, [r0, #1]
 800a716:	dd29      	ble.n	800a76c <__exponent+0x68>
 800a718:	f10d 0307 	add.w	r3, sp, #7
 800a71c:	461d      	mov	r5, r3
 800a71e:	270a      	movs	r7, #10
 800a720:	461a      	mov	r2, r3
 800a722:	fbb1 f6f7 	udiv	r6, r1, r7
 800a726:	fb07 1416 	mls	r4, r7, r6, r1
 800a72a:	3430      	adds	r4, #48	@ 0x30
 800a72c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a730:	460c      	mov	r4, r1
 800a732:	2c63      	cmp	r4, #99	@ 0x63
 800a734:	f103 33ff 	add.w	r3, r3, #4294967295
 800a738:	4631      	mov	r1, r6
 800a73a:	dcf1      	bgt.n	800a720 <__exponent+0x1c>
 800a73c:	3130      	adds	r1, #48	@ 0x30
 800a73e:	1e94      	subs	r4, r2, #2
 800a740:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a744:	1c41      	adds	r1, r0, #1
 800a746:	4623      	mov	r3, r4
 800a748:	42ab      	cmp	r3, r5
 800a74a:	d30a      	bcc.n	800a762 <__exponent+0x5e>
 800a74c:	f10d 0309 	add.w	r3, sp, #9
 800a750:	1a9b      	subs	r3, r3, r2
 800a752:	42ac      	cmp	r4, r5
 800a754:	bf88      	it	hi
 800a756:	2300      	movhi	r3, #0
 800a758:	3302      	adds	r3, #2
 800a75a:	4403      	add	r3, r0
 800a75c:	1a18      	subs	r0, r3, r0
 800a75e:	b003      	add	sp, #12
 800a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a762:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a766:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a76a:	e7ed      	b.n	800a748 <__exponent+0x44>
 800a76c:	2330      	movs	r3, #48	@ 0x30
 800a76e:	3130      	adds	r1, #48	@ 0x30
 800a770:	7083      	strb	r3, [r0, #2]
 800a772:	70c1      	strb	r1, [r0, #3]
 800a774:	1d03      	adds	r3, r0, #4
 800a776:	e7f1      	b.n	800a75c <__exponent+0x58>

0800a778 <_printf_float>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	b08d      	sub	sp, #52	@ 0x34
 800a77e:	460c      	mov	r4, r1
 800a780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a784:	4616      	mov	r6, r2
 800a786:	461f      	mov	r7, r3
 800a788:	4605      	mov	r5, r0
 800a78a:	f000 fdbd 	bl	800b308 <_localeconv_r>
 800a78e:	f8d0 b000 	ldr.w	fp, [r0]
 800a792:	4658      	mov	r0, fp
 800a794:	f7f5 fdf4 	bl	8000380 <strlen>
 800a798:	2300      	movs	r3, #0
 800a79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79c:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	9005      	str	r0, [sp, #20]
 800a7a8:	3307      	adds	r3, #7
 800a7aa:	f023 0307 	bic.w	r3, r3, #7
 800a7ae:	f103 0108 	add.w	r1, r3, #8
 800a7b2:	f8c8 1000 	str.w	r1, [r8]
 800a7b6:	ed93 0b00 	vldr	d0, [r3]
 800a7ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aa18 <_printf_float+0x2a0>
 800a7be:	eeb0 7bc0 	vabs.f64	d7, d0
 800a7c2:	eeb4 7b46 	vcmp.f64	d7, d6
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a7ce:	dd24      	ble.n	800a81a <_printf_float+0xa2>
 800a7d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d8:	d502      	bpl.n	800a7e0 <_printf_float+0x68>
 800a7da:	232d      	movs	r3, #45	@ 0x2d
 800a7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7e0:	498f      	ldr	r1, [pc, #572]	@ (800aa20 <_printf_float+0x2a8>)
 800a7e2:	4b90      	ldr	r3, [pc, #576]	@ (800aa24 <_printf_float+0x2ac>)
 800a7e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a7e8:	bf8c      	ite	hi
 800a7ea:	4688      	movhi	r8, r1
 800a7ec:	4698      	movls	r8, r3
 800a7ee:	f022 0204 	bic.w	r2, r2, #4
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	f04f 0a00 	mov.w	sl, #0
 800a7fc:	9700      	str	r7, [sp, #0]
 800a7fe:	4633      	mov	r3, r6
 800a800:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a802:	4621      	mov	r1, r4
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f9d1 	bl	800abac <_printf_common>
 800a80a:	3001      	adds	r0, #1
 800a80c:	f040 8089 	bne.w	800a922 <_printf_float+0x1aa>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	b00d      	add	sp, #52	@ 0x34
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a822:	d709      	bvc.n	800a838 <_printf_float+0xc0>
 800a824:	ee10 3a90 	vmov	r3, s1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bfbc      	itt	lt
 800a82c:	232d      	movlt	r3, #45	@ 0x2d
 800a82e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a832:	497d      	ldr	r1, [pc, #500]	@ (800aa28 <_printf_float+0x2b0>)
 800a834:	4b7d      	ldr	r3, [pc, #500]	@ (800aa2c <_printf_float+0x2b4>)
 800a836:	e7d5      	b.n	800a7e4 <_printf_float+0x6c>
 800a838:	6863      	ldr	r3, [r4, #4]
 800a83a:	1c59      	adds	r1, r3, #1
 800a83c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a840:	d139      	bne.n	800a8b6 <_printf_float+0x13e>
 800a842:	2306      	movs	r3, #6
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a84a:	2300      	movs	r3, #0
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	ab0a      	add	r3, sp, #40	@ 0x28
 800a852:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a856:	ab09      	add	r3, sp, #36	@ 0x24
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	6861      	ldr	r1, [r4, #4]
 800a85c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a860:	4628      	mov	r0, r5
 800a862:	f7ff fefb 	bl	800a65c <__cvt>
 800a866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a86a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a86c:	4680      	mov	r8, r0
 800a86e:	d129      	bne.n	800a8c4 <_printf_float+0x14c>
 800a870:	1cc8      	adds	r0, r1, #3
 800a872:	db02      	blt.n	800a87a <_printf_float+0x102>
 800a874:	6863      	ldr	r3, [r4, #4]
 800a876:	4299      	cmp	r1, r3
 800a878:	dd41      	ble.n	800a8fe <_printf_float+0x186>
 800a87a:	f1a9 0902 	sub.w	r9, r9, #2
 800a87e:	fa5f f989 	uxtb.w	r9, r9
 800a882:	3901      	subs	r1, #1
 800a884:	464a      	mov	r2, r9
 800a886:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a88a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a88c:	f7ff ff3a 	bl	800a704 <__exponent>
 800a890:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a892:	1813      	adds	r3, r2, r0
 800a894:	2a01      	cmp	r2, #1
 800a896:	4682      	mov	sl, r0
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	dc02      	bgt.n	800a8a2 <_printf_float+0x12a>
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d501      	bpl.n	800a8a6 <_printf_float+0x12e>
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0a6      	beq.n	800a7fc <_printf_float+0x84>
 800a8ae:	232d      	movs	r3, #45	@ 0x2d
 800a8b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8b4:	e7a2      	b.n	800a7fc <_printf_float+0x84>
 800a8b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8ba:	d1c4      	bne.n	800a846 <_printf_float+0xce>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1c2      	bne.n	800a846 <_printf_float+0xce>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7bf      	b.n	800a844 <_printf_float+0xcc>
 800a8c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a8c8:	d9db      	bls.n	800a882 <_printf_float+0x10a>
 800a8ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a8ce:	d118      	bne.n	800a902 <_printf_float+0x18a>
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	dd0b      	ble.n	800a8ee <_printf_float+0x176>
 800a8d6:	6121      	str	r1, [r4, #16]
 800a8d8:	b913      	cbnz	r3, 800a8e0 <_printf_float+0x168>
 800a8da:	6822      	ldr	r2, [r4, #0]
 800a8dc:	07d0      	lsls	r0, r2, #31
 800a8de:	d502      	bpl.n	800a8e6 <_printf_float+0x16e>
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	440b      	add	r3, r1
 800a8e4:	6123      	str	r3, [r4, #16]
 800a8e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8e8:	f04f 0a00 	mov.w	sl, #0
 800a8ec:	e7db      	b.n	800a8a6 <_printf_float+0x12e>
 800a8ee:	b913      	cbnz	r3, 800a8f6 <_printf_float+0x17e>
 800a8f0:	6822      	ldr	r2, [r4, #0]
 800a8f2:	07d2      	lsls	r2, r2, #31
 800a8f4:	d501      	bpl.n	800a8fa <_printf_float+0x182>
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	e7f4      	b.n	800a8e4 <_printf_float+0x16c>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7f2      	b.n	800a8e4 <_printf_float+0x16c>
 800a8fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a904:	4299      	cmp	r1, r3
 800a906:	db05      	blt.n	800a914 <_printf_float+0x19c>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	6121      	str	r1, [r4, #16]
 800a90c:	07d8      	lsls	r0, r3, #31
 800a90e:	d5ea      	bpl.n	800a8e6 <_printf_float+0x16e>
 800a910:	1c4b      	adds	r3, r1, #1
 800a912:	e7e7      	b.n	800a8e4 <_printf_float+0x16c>
 800a914:	2900      	cmp	r1, #0
 800a916:	bfd4      	ite	le
 800a918:	f1c1 0202 	rsble	r2, r1, #2
 800a91c:	2201      	movgt	r2, #1
 800a91e:	4413      	add	r3, r2
 800a920:	e7e0      	b.n	800a8e4 <_printf_float+0x16c>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	055a      	lsls	r2, r3, #21
 800a926:	d407      	bmi.n	800a938 <_printf_float+0x1c0>
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	4642      	mov	r2, r8
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	d12a      	bne.n	800a98c <_printf_float+0x214>
 800a936:	e76b      	b.n	800a810 <_printf_float+0x98>
 800a938:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a93c:	f240 80e0 	bls.w	800ab00 <_printf_float+0x388>
 800a940:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d133      	bne.n	800a9b6 <_printf_float+0x23e>
 800a94e:	4a38      	ldr	r2, [pc, #224]	@ (800aa30 <_printf_float+0x2b8>)
 800a950:	2301      	movs	r3, #1
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f af59 	beq.w	800a810 <_printf_float+0x98>
 800a95e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a962:	4543      	cmp	r3, r8
 800a964:	db02      	blt.n	800a96c <_printf_float+0x1f4>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	07d8      	lsls	r0, r3, #31
 800a96a:	d50f      	bpl.n	800a98c <_printf_float+0x214>
 800a96c:	9b05      	ldr	r3, [sp, #20]
 800a96e:	465a      	mov	r2, fp
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af4a 	beq.w	800a810 <_printf_float+0x98>
 800a97c:	f04f 0900 	mov.w	r9, #0
 800a980:	f108 38ff 	add.w	r8, r8, #4294967295
 800a984:	f104 0a1a 	add.w	sl, r4, #26
 800a988:	45c8      	cmp	r8, r9
 800a98a:	dc09      	bgt.n	800a9a0 <_printf_float+0x228>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	079b      	lsls	r3, r3, #30
 800a990:	f100 8107 	bmi.w	800aba2 <_printf_float+0x42a>
 800a994:	68e0      	ldr	r0, [r4, #12]
 800a996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a998:	4298      	cmp	r0, r3
 800a99a:	bfb8      	it	lt
 800a99c:	4618      	movlt	r0, r3
 800a99e:	e739      	b.n	800a814 <_printf_float+0x9c>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4652      	mov	r2, sl
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b8      	blx	r7
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	f43f af30 	beq.w	800a810 <_printf_float+0x98>
 800a9b0:	f109 0901 	add.w	r9, r9, #1
 800a9b4:	e7e8      	b.n	800a988 <_printf_float+0x210>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dc3b      	bgt.n	800aa34 <_printf_float+0x2bc>
 800a9bc:	4a1c      	ldr	r2, [pc, #112]	@ (800aa30 <_printf_float+0x2b8>)
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f af22 	beq.w	800a810 <_printf_float+0x98>
 800a9cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9d0:	ea59 0303 	orrs.w	r3, r9, r3
 800a9d4:	d102      	bne.n	800a9dc <_printf_float+0x264>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	07d9      	lsls	r1, r3, #31
 800a9da:	d5d7      	bpl.n	800a98c <_printf_float+0x214>
 800a9dc:	9b05      	ldr	r3, [sp, #20]
 800a9de:	465a      	mov	r2, fp
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47b8      	blx	r7
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	f43f af12 	beq.w	800a810 <_printf_float+0x98>
 800a9ec:	f04f 0a00 	mov.w	sl, #0
 800a9f0:	f104 0b1a 	add.w	fp, r4, #26
 800a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f6:	425b      	negs	r3, r3
 800a9f8:	4553      	cmp	r3, sl
 800a9fa:	dc01      	bgt.n	800aa00 <_printf_float+0x288>
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	e794      	b.n	800a92a <_printf_float+0x1b2>
 800aa00:	2301      	movs	r3, #1
 800aa02:	465a      	mov	r2, fp
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f43f af00 	beq.w	800a810 <_printf_float+0x98>
 800aa10:	f10a 0a01 	add.w	sl, sl, #1
 800aa14:	e7ee      	b.n	800a9f4 <_printf_float+0x27c>
 800aa16:	bf00      	nop
 800aa18:	ffffffff 	.word	0xffffffff
 800aa1c:	7fefffff 	.word	0x7fefffff
 800aa20:	0800d4b1 	.word	0x0800d4b1
 800aa24:	0800d4ad 	.word	0x0800d4ad
 800aa28:	0800d4b9 	.word	0x0800d4b9
 800aa2c:	0800d4b5 	.word	0x0800d4b5
 800aa30:	0800d4bd 	.word	0x0800d4bd
 800aa34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa3a:	4553      	cmp	r3, sl
 800aa3c:	bfa8      	it	ge
 800aa3e:	4653      	movge	r3, sl
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	4699      	mov	r9, r3
 800aa44:	dc37      	bgt.n	800aab6 <_printf_float+0x33e>
 800aa46:	2300      	movs	r3, #0
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa4e:	f104 021a 	add.w	r2, r4, #26
 800aa52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa54:	9907      	ldr	r1, [sp, #28]
 800aa56:	9306      	str	r3, [sp, #24]
 800aa58:	eba3 0309 	sub.w	r3, r3, r9
 800aa5c:	428b      	cmp	r3, r1
 800aa5e:	dc31      	bgt.n	800aac4 <_printf_float+0x34c>
 800aa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa62:	459a      	cmp	sl, r3
 800aa64:	dc3b      	bgt.n	800aade <_printf_float+0x366>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	d438      	bmi.n	800aade <_printf_float+0x366>
 800aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6e:	ebaa 0903 	sub.w	r9, sl, r3
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	ebaa 0303 	sub.w	r3, sl, r3
 800aa78:	4599      	cmp	r9, r3
 800aa7a:	bfa8      	it	ge
 800aa7c:	4699      	movge	r9, r3
 800aa7e:	f1b9 0f00 	cmp.w	r9, #0
 800aa82:	dc34      	bgt.n	800aaee <_printf_float+0x376>
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa8c:	f104 0b1a 	add.w	fp, r4, #26
 800aa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa92:	ebaa 0303 	sub.w	r3, sl, r3
 800aa96:	eba3 0309 	sub.w	r3, r3, r9
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	f77f af76 	ble.w	800a98c <_printf_float+0x214>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	465a      	mov	r2, fp
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f aeb0 	beq.w	800a810 <_printf_float+0x98>
 800aab0:	f108 0801 	add.w	r8, r8, #1
 800aab4:	e7ec      	b.n	800aa90 <_printf_float+0x318>
 800aab6:	4642      	mov	r2, r8
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	d1c1      	bne.n	800aa46 <_printf_float+0x2ce>
 800aac2:	e6a5      	b.n	800a810 <_printf_float+0x98>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	9206      	str	r2, [sp, #24]
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	f43f ae9e 	beq.w	800a810 <_printf_float+0x98>
 800aad4:	9b07      	ldr	r3, [sp, #28]
 800aad6:	9a06      	ldr	r2, [sp, #24]
 800aad8:	3301      	adds	r3, #1
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	e7b9      	b.n	800aa52 <_printf_float+0x2da>
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	465a      	mov	r2, fp
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	d1bf      	bne.n	800aa6c <_printf_float+0x2f4>
 800aaec:	e690      	b.n	800a810 <_printf_float+0x98>
 800aaee:	9a06      	ldr	r2, [sp, #24]
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	4442      	add	r2, r8
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	47b8      	blx	r7
 800aafa:	3001      	adds	r0, #1
 800aafc:	d1c2      	bne.n	800aa84 <_printf_float+0x30c>
 800aafe:	e687      	b.n	800a810 <_printf_float+0x98>
 800ab00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ab04:	f1b9 0f01 	cmp.w	r9, #1
 800ab08:	dc01      	bgt.n	800ab0e <_printf_float+0x396>
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d536      	bpl.n	800ab7c <_printf_float+0x404>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4642      	mov	r2, r8
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae79 	beq.w	800a810 <_printf_float+0x98>
 800ab1e:	9b05      	ldr	r3, [sp, #20]
 800ab20:	465a      	mov	r2, fp
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f43f ae71 	beq.w	800a810 <_printf_float+0x98>
 800ab2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab3e:	d018      	beq.n	800ab72 <_printf_float+0x3fa>
 800ab40:	464b      	mov	r3, r9
 800ab42:	f108 0201 	add.w	r2, r8, #1
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d10c      	bne.n	800ab6a <_printf_float+0x3f2>
 800ab50:	e65e      	b.n	800a810 <_printf_float+0x98>
 800ab52:	2301      	movs	r3, #1
 800ab54:	465a      	mov	r2, fp
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f ae57 	beq.w	800a810 <_printf_float+0x98>
 800ab62:	f108 0801 	add.w	r8, r8, #1
 800ab66:	45c8      	cmp	r8, r9
 800ab68:	dbf3      	blt.n	800ab52 <_printf_float+0x3da>
 800ab6a:	4653      	mov	r3, sl
 800ab6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab70:	e6dc      	b.n	800a92c <_printf_float+0x1b4>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	f104 0b1a 	add.w	fp, r4, #26
 800ab7a:	e7f4      	b.n	800ab66 <_printf_float+0x3ee>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4642      	mov	r2, r8
 800ab80:	e7e1      	b.n	800ab46 <_printf_float+0x3ce>
 800ab82:	2301      	movs	r3, #1
 800ab84:	464a      	mov	r2, r9
 800ab86:	4631      	mov	r1, r6
 800ab88:	4628      	mov	r0, r5
 800ab8a:	47b8      	blx	r7
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f43f ae3f 	beq.w	800a810 <_printf_float+0x98>
 800ab92:	f108 0801 	add.w	r8, r8, #1
 800ab96:	68e3      	ldr	r3, [r4, #12]
 800ab98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab9a:	1a5b      	subs	r3, r3, r1
 800ab9c:	4543      	cmp	r3, r8
 800ab9e:	dcf0      	bgt.n	800ab82 <_printf_float+0x40a>
 800aba0:	e6f8      	b.n	800a994 <_printf_float+0x21c>
 800aba2:	f04f 0800 	mov.w	r8, #0
 800aba6:	f104 0919 	add.w	r9, r4, #25
 800abaa:	e7f4      	b.n	800ab96 <_printf_float+0x41e>

0800abac <_printf_common>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	4616      	mov	r6, r2
 800abb2:	4698      	mov	r8, r3
 800abb4:	688a      	ldr	r2, [r1, #8]
 800abb6:	690b      	ldr	r3, [r1, #16]
 800abb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bfb8      	it	lt
 800abc0:	4613      	movlt	r3, r2
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abc8:	4607      	mov	r7, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b10a      	cbz	r2, 800abd2 <_printf_common+0x26>
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0699      	lsls	r1, r3, #26
 800abd6:	bf42      	ittt	mi
 800abd8:	6833      	ldrmi	r3, [r6, #0]
 800abda:	3302      	addmi	r3, #2
 800abdc:	6033      	strmi	r3, [r6, #0]
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	f015 0506 	ands.w	r5, r5, #6
 800abe4:	d106      	bne.n	800abf4 <_printf_common+0x48>
 800abe6:	f104 0a19 	add.w	sl, r4, #25
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6832      	ldr	r2, [r6, #0]
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc26      	bgt.n	800ac42 <_printf_common+0x96>
 800abf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	3b00      	subs	r3, #0
 800abfc:	bf18      	it	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d42b      	bmi.n	800ac5c <_printf_common+0xb0>
 800ac04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d01e      	beq.n	800ac50 <_printf_common+0xa4>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	f003 0306 	and.w	r3, r3, #6
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	bf02      	ittt	eq
 800ac1e:	68e5      	ldreq	r5, [r4, #12]
 800ac20:	6833      	ldreq	r3, [r6, #0]
 800ac22:	1aed      	subeq	r5, r5, r3
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	bf0c      	ite	eq
 800ac28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac2c:	2500      	movne	r5, #0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	bfc4      	itt	gt
 800ac32:	1a9b      	subgt	r3, r3, r2
 800ac34:	18ed      	addgt	r5, r5, r3
 800ac36:	2600      	movs	r6, #0
 800ac38:	341a      	adds	r4, #26
 800ac3a:	42b5      	cmp	r5, r6
 800ac3c:	d11a      	bne.n	800ac74 <_printf_common+0xc8>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e008      	b.n	800ac54 <_printf_common+0xa8>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4641      	mov	r1, r8
 800ac48:	4638      	mov	r0, r7
 800ac4a:	47c8      	blx	r9
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d103      	bne.n	800ac58 <_printf_common+0xac>
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	3501      	adds	r5, #1
 800ac5a:	e7c6      	b.n	800abea <_printf_common+0x3e>
 800ac5c:	18e1      	adds	r1, r4, r3
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	2030      	movs	r0, #48	@ 0x30
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac66:	4422      	add	r2, r4
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7c7      	b.n	800ac04 <_printf_common+0x58>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4622      	mov	r2, r4
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c8      	blx	r9
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d0e6      	beq.n	800ac50 <_printf_common+0xa4>
 800ac82:	3601      	adds	r6, #1
 800ac84:	e7d9      	b.n	800ac3a <_printf_common+0x8e>
	...

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	7e0f      	ldrb	r7, [r1, #24]
 800ac8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac90:	2f78      	cmp	r7, #120	@ 0x78
 800ac92:	4691      	mov	r9, r2
 800ac94:	4680      	mov	r8, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	@ 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d1 	beq.w	800ae4c <_printf_i+0x1c4>
 800acaa:	2f58      	cmp	r7, #88	@ 0x58
 800acac:	f000 80b8 	beq.w	800ae20 <_printf_i+0x198>
 800acb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a101      	add	r1, pc, #4	@ (adr r1, 800acc8 <_printf_i+0x40>)
 800acc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae33 	.word	0x0800ae33
 800acf8:	0800ad5f 	.word	0x0800ad5f
 800acfc:	0800aded 	.word	0x0800aded
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae55 	.word	0x0800ae55
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad5f 	.word	0x0800ad5f
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800adf5 	.word	0x0800adf5
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6032      	str	r2, [r6, #0]
 800ad28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e09c      	b.n	800ae6e <_printf_i+0x1e6>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	6031      	str	r1, [r6, #0]
 800ad3c:	0606      	lsls	r6, r0, #24
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0xbc>
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	e003      	b.n	800ad4c <_printf_i+0xc4>
 800ad44:	0645      	lsls	r5, r0, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0xb8>
 800ad48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	da03      	bge.n	800ad58 <_printf_i+0xd0>
 800ad50:	232d      	movs	r3, #45	@ 0x2d
 800ad52:	426d      	negs	r5, r5
 800ad54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad58:	4858      	ldr	r0, [pc, #352]	@ (800aebc <_printf_i+0x234>)
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	e011      	b.n	800ad82 <_printf_i+0xfa>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	0608      	lsls	r0, r1, #24
 800ad64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0xe8>
 800ad6a:	0649      	lsls	r1, r1, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad72:	4852      	ldr	r0, [pc, #328]	@ (800aebc <_printf_i+0x234>)
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	bf14      	ite	ne
 800ad78:	230a      	movne	r3, #10
 800ad7a:	2308      	moveq	r3, #8
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad82:	6866      	ldr	r6, [r4, #4]
 800ad84:	60a6      	str	r6, [r4, #8]
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	db05      	blt.n	800ad96 <_printf_i+0x10e>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	432e      	orrs	r6, r5
 800ad8e:	f021 0104 	bic.w	r1, r1, #4
 800ad92:	6021      	str	r1, [r4, #0]
 800ad94:	d04b      	beq.n	800ae2e <_printf_i+0x1a6>
 800ad96:	4616      	mov	r6, r2
 800ad98:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad9c:	fb03 5711 	mls	r7, r3, r1, r5
 800ada0:	5dc7      	ldrb	r7, [r0, r7]
 800ada2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ada6:	462f      	mov	r7, r5
 800ada8:	42bb      	cmp	r3, r7
 800adaa:	460d      	mov	r5, r1
 800adac:	d9f4      	bls.n	800ad98 <_printf_i+0x110>
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d10b      	bne.n	800adca <_printf_i+0x142>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	07df      	lsls	r7, r3, #31
 800adb6:	d508      	bpl.n	800adca <_printf_i+0x142>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	6861      	ldr	r1, [r4, #4]
 800adbc:	4299      	cmp	r1, r3
 800adbe:	bfde      	ittt	le
 800adc0:	2330      	movle	r3, #48	@ 0x30
 800adc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adca:	1b92      	subs	r2, r2, r6
 800adcc:	6122      	str	r2, [r4, #16]
 800adce:	f8cd a000 	str.w	sl, [sp]
 800add2:	464b      	mov	r3, r9
 800add4:	aa03      	add	r2, sp, #12
 800add6:	4621      	mov	r1, r4
 800add8:	4640      	mov	r0, r8
 800adda:	f7ff fee7 	bl	800abac <_printf_common>
 800adde:	3001      	adds	r0, #1
 800ade0:	d14a      	bne.n	800ae78 <_printf_i+0x1f0>
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	b004      	add	sp, #16
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	f043 0320 	orr.w	r3, r3, #32
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	4832      	ldr	r0, [pc, #200]	@ (800aec0 <_printf_i+0x238>)
 800adf6:	2778      	movs	r7, #120	@ 0x78
 800adf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6831      	ldr	r1, [r6, #0]
 800ae00:	061f      	lsls	r7, r3, #24
 800ae02:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae06:	d402      	bmi.n	800ae0e <_printf_i+0x186>
 800ae08:	065f      	lsls	r7, r3, #25
 800ae0a:	bf48      	it	mi
 800ae0c:	b2ad      	uxthmi	r5, r5
 800ae0e:	6031      	str	r1, [r6, #0]
 800ae10:	07d9      	lsls	r1, r3, #31
 800ae12:	bf44      	itt	mi
 800ae14:	f043 0320 	orrmi.w	r3, r3, #32
 800ae18:	6023      	strmi	r3, [r4, #0]
 800ae1a:	b11d      	cbz	r5, 800ae24 <_printf_i+0x19c>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	e7ad      	b.n	800ad7c <_printf_i+0xf4>
 800ae20:	4826      	ldr	r0, [pc, #152]	@ (800aebc <_printf_i+0x234>)
 800ae22:	e7e9      	b.n	800adf8 <_printf_i+0x170>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	f023 0320 	bic.w	r3, r3, #32
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	e7f6      	b.n	800ae1c <_printf_i+0x194>
 800ae2e:	4616      	mov	r6, r2
 800ae30:	e7bd      	b.n	800adae <_printf_i+0x126>
 800ae32:	6833      	ldr	r3, [r6, #0]
 800ae34:	6825      	ldr	r5, [r4, #0]
 800ae36:	6961      	ldr	r1, [r4, #20]
 800ae38:	1d18      	adds	r0, r3, #4
 800ae3a:	6030      	str	r0, [r6, #0]
 800ae3c:	062e      	lsls	r6, r5, #24
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	d501      	bpl.n	800ae46 <_printf_i+0x1be>
 800ae42:	6019      	str	r1, [r3, #0]
 800ae44:	e002      	b.n	800ae4c <_printf_i+0x1c4>
 800ae46:	0668      	lsls	r0, r5, #25
 800ae48:	d5fb      	bpl.n	800ae42 <_printf_i+0x1ba>
 800ae4a:	8019      	strh	r1, [r3, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	4616      	mov	r6, r2
 800ae52:	e7bc      	b.n	800adce <_printf_i+0x146>
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	6032      	str	r2, [r6, #0]
 800ae5a:	681e      	ldr	r6, [r3, #0]
 800ae5c:	6862      	ldr	r2, [r4, #4]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7f5 fa3d 	bl	80002e0 <memchr>
 800ae66:	b108      	cbz	r0, 800ae6c <_printf_i+0x1e4>
 800ae68:	1b80      	subs	r0, r0, r6
 800ae6a:	6060      	str	r0, [r4, #4]
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	2300      	movs	r3, #0
 800ae72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae76:	e7aa      	b.n	800adce <_printf_i+0x146>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	4640      	mov	r0, r8
 800ae80:	47d0      	blx	sl
 800ae82:	3001      	adds	r0, #1
 800ae84:	d0ad      	beq.n	800ade2 <_printf_i+0x15a>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	079b      	lsls	r3, r3, #30
 800ae8a:	d413      	bmi.n	800aeb4 <_printf_i+0x22c>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e7a6      	b.n	800ade6 <_printf_i+0x15e>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	4640      	mov	r0, r8
 800aea0:	47d0      	blx	sl
 800aea2:	3001      	adds	r0, #1
 800aea4:	d09d      	beq.n	800ade2 <_printf_i+0x15a>
 800aea6:	3501      	adds	r5, #1
 800aea8:	68e3      	ldr	r3, [r4, #12]
 800aeaa:	9903      	ldr	r1, [sp, #12]
 800aeac:	1a5b      	subs	r3, r3, r1
 800aeae:	42ab      	cmp	r3, r5
 800aeb0:	dcf2      	bgt.n	800ae98 <_printf_i+0x210>
 800aeb2:	e7eb      	b.n	800ae8c <_printf_i+0x204>
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	f104 0619 	add.w	r6, r4, #25
 800aeba:	e7f5      	b.n	800aea8 <_printf_i+0x220>
 800aebc:	0800d4bf 	.word	0x0800d4bf
 800aec0:	0800d4d0 	.word	0x0800d4d0

0800aec4 <std>:
 800aec4:	2300      	movs	r3, #0
 800aec6:	b510      	push	{r4, lr}
 800aec8:	4604      	mov	r4, r0
 800aeca:	e9c0 3300 	strd	r3, r3, [r0]
 800aece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aed2:	6083      	str	r3, [r0, #8]
 800aed4:	8181      	strh	r1, [r0, #12]
 800aed6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aed8:	81c2      	strh	r2, [r0, #14]
 800aeda:	6183      	str	r3, [r0, #24]
 800aedc:	4619      	mov	r1, r3
 800aede:	2208      	movs	r2, #8
 800aee0:	305c      	adds	r0, #92	@ 0x5c
 800aee2:	f000 fa09 	bl	800b2f8 <memset>
 800aee6:	4b0d      	ldr	r3, [pc, #52]	@ (800af1c <std+0x58>)
 800aee8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeea:	4b0d      	ldr	r3, [pc, #52]	@ (800af20 <std+0x5c>)
 800aeec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeee:	4b0d      	ldr	r3, [pc, #52]	@ (800af24 <std+0x60>)
 800aef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aef2:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <std+0x64>)
 800aef4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aef6:	4b0d      	ldr	r3, [pc, #52]	@ (800af2c <std+0x68>)
 800aef8:	6224      	str	r4, [r4, #32]
 800aefa:	429c      	cmp	r4, r3
 800aefc:	d006      	beq.n	800af0c <std+0x48>
 800aefe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af02:	4294      	cmp	r4, r2
 800af04:	d002      	beq.n	800af0c <std+0x48>
 800af06:	33d0      	adds	r3, #208	@ 0xd0
 800af08:	429c      	cmp	r4, r3
 800af0a:	d105      	bne.n	800af18 <std+0x54>
 800af0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af14:	f000 baca 	b.w	800b4ac <__retarget_lock_init_recursive>
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	bf00      	nop
 800af1c:	0800b149 	.word	0x0800b149
 800af20:	0800b16b 	.word	0x0800b16b
 800af24:	0800b1a3 	.word	0x0800b1a3
 800af28:	0800b1c7 	.word	0x0800b1c7
 800af2c:	24005674 	.word	0x24005674

0800af30 <stdio_exit_handler>:
 800af30:	4a02      	ldr	r2, [pc, #8]	@ (800af3c <stdio_exit_handler+0xc>)
 800af32:	4903      	ldr	r1, [pc, #12]	@ (800af40 <stdio_exit_handler+0x10>)
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <stdio_exit_handler+0x14>)
 800af36:	f000 b869 	b.w	800b00c <_fwalk_sglue>
 800af3a:	bf00      	nop
 800af3c:	24000084 	.word	0x24000084
 800af40:	0800cd49 	.word	0x0800cd49
 800af44:	24000094 	.word	0x24000094

0800af48 <cleanup_stdio>:
 800af48:	6841      	ldr	r1, [r0, #4]
 800af4a:	4b0c      	ldr	r3, [pc, #48]	@ (800af7c <cleanup_stdio+0x34>)
 800af4c:	4299      	cmp	r1, r3
 800af4e:	b510      	push	{r4, lr}
 800af50:	4604      	mov	r4, r0
 800af52:	d001      	beq.n	800af58 <cleanup_stdio+0x10>
 800af54:	f001 fef8 	bl	800cd48 <_fflush_r>
 800af58:	68a1      	ldr	r1, [r4, #8]
 800af5a:	4b09      	ldr	r3, [pc, #36]	@ (800af80 <cleanup_stdio+0x38>)
 800af5c:	4299      	cmp	r1, r3
 800af5e:	d002      	beq.n	800af66 <cleanup_stdio+0x1e>
 800af60:	4620      	mov	r0, r4
 800af62:	f001 fef1 	bl	800cd48 <_fflush_r>
 800af66:	68e1      	ldr	r1, [r4, #12]
 800af68:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <cleanup_stdio+0x3c>)
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d004      	beq.n	800af78 <cleanup_stdio+0x30>
 800af6e:	4620      	mov	r0, r4
 800af70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af74:	f001 bee8 	b.w	800cd48 <_fflush_r>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	bf00      	nop
 800af7c:	24005674 	.word	0x24005674
 800af80:	240056dc 	.word	0x240056dc
 800af84:	24005744 	.word	0x24005744

0800af88 <global_stdio_init.part.0>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	4b0b      	ldr	r3, [pc, #44]	@ (800afb8 <global_stdio_init.part.0+0x30>)
 800af8c:	4c0b      	ldr	r4, [pc, #44]	@ (800afbc <global_stdio_init.part.0+0x34>)
 800af8e:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <global_stdio_init.part.0+0x38>)
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	2200      	movs	r2, #0
 800af96:	2104      	movs	r1, #4
 800af98:	f7ff ff94 	bl	800aec4 <std>
 800af9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afa0:	2201      	movs	r2, #1
 800afa2:	2109      	movs	r1, #9
 800afa4:	f7ff ff8e 	bl	800aec4 <std>
 800afa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afac:	2202      	movs	r2, #2
 800afae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb2:	2112      	movs	r1, #18
 800afb4:	f7ff bf86 	b.w	800aec4 <std>
 800afb8:	240057ac 	.word	0x240057ac
 800afbc:	24005674 	.word	0x24005674
 800afc0:	0800af31 	.word	0x0800af31

0800afc4 <__sfp_lock_acquire>:
 800afc4:	4801      	ldr	r0, [pc, #4]	@ (800afcc <__sfp_lock_acquire+0x8>)
 800afc6:	f000 ba72 	b.w	800b4ae <__retarget_lock_acquire_recursive>
 800afca:	bf00      	nop
 800afcc:	240057b5 	.word	0x240057b5

0800afd0 <__sfp_lock_release>:
 800afd0:	4801      	ldr	r0, [pc, #4]	@ (800afd8 <__sfp_lock_release+0x8>)
 800afd2:	f000 ba6d 	b.w	800b4b0 <__retarget_lock_release_recursive>
 800afd6:	bf00      	nop
 800afd8:	240057b5 	.word	0x240057b5

0800afdc <__sinit>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	4604      	mov	r4, r0
 800afe0:	f7ff fff0 	bl	800afc4 <__sfp_lock_acquire>
 800afe4:	6a23      	ldr	r3, [r4, #32]
 800afe6:	b11b      	cbz	r3, 800aff0 <__sinit+0x14>
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f7ff bff0 	b.w	800afd0 <__sfp_lock_release>
 800aff0:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <__sinit+0x28>)
 800aff2:	6223      	str	r3, [r4, #32]
 800aff4:	4b04      	ldr	r3, [pc, #16]	@ (800b008 <__sinit+0x2c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1f5      	bne.n	800afe8 <__sinit+0xc>
 800affc:	f7ff ffc4 	bl	800af88 <global_stdio_init.part.0>
 800b000:	e7f2      	b.n	800afe8 <__sinit+0xc>
 800b002:	bf00      	nop
 800b004:	0800af49 	.word	0x0800af49
 800b008:	240057ac 	.word	0x240057ac

0800b00c <_fwalk_sglue>:
 800b00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b010:	4607      	mov	r7, r0
 800b012:	4688      	mov	r8, r1
 800b014:	4614      	mov	r4, r2
 800b016:	2600      	movs	r6, #0
 800b018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b01c:	f1b9 0901 	subs.w	r9, r9, #1
 800b020:	d505      	bpl.n	800b02e <_fwalk_sglue+0x22>
 800b022:	6824      	ldr	r4, [r4, #0]
 800b024:	2c00      	cmp	r4, #0
 800b026:	d1f7      	bne.n	800b018 <_fwalk_sglue+0xc>
 800b028:	4630      	mov	r0, r6
 800b02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d907      	bls.n	800b044 <_fwalk_sglue+0x38>
 800b034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b038:	3301      	adds	r3, #1
 800b03a:	d003      	beq.n	800b044 <_fwalk_sglue+0x38>
 800b03c:	4629      	mov	r1, r5
 800b03e:	4638      	mov	r0, r7
 800b040:	47c0      	blx	r8
 800b042:	4306      	orrs	r6, r0
 800b044:	3568      	adds	r5, #104	@ 0x68
 800b046:	e7e9      	b.n	800b01c <_fwalk_sglue+0x10>

0800b048 <_puts_r>:
 800b048:	6a03      	ldr	r3, [r0, #32]
 800b04a:	b570      	push	{r4, r5, r6, lr}
 800b04c:	6884      	ldr	r4, [r0, #8]
 800b04e:	4605      	mov	r5, r0
 800b050:	460e      	mov	r6, r1
 800b052:	b90b      	cbnz	r3, 800b058 <_puts_r+0x10>
 800b054:	f7ff ffc2 	bl	800afdc <__sinit>
 800b058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b05a:	07db      	lsls	r3, r3, #31
 800b05c:	d405      	bmi.n	800b06a <_puts_r+0x22>
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	0598      	lsls	r0, r3, #22
 800b062:	d402      	bmi.n	800b06a <_puts_r+0x22>
 800b064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b066:	f000 fa22 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	0719      	lsls	r1, r3, #28
 800b06e:	d502      	bpl.n	800b076 <_puts_r+0x2e>
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d135      	bne.n	800b0e2 <_puts_r+0x9a>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 f8e7 	bl	800b24c <__swsetup_r>
 800b07e:	b380      	cbz	r0, 800b0e2 <_puts_r+0x9a>
 800b080:	f04f 35ff 	mov.w	r5, #4294967295
 800b084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b086:	07da      	lsls	r2, r3, #31
 800b088:	d405      	bmi.n	800b096 <_puts_r+0x4e>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	059b      	lsls	r3, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_puts_r+0x4e>
 800b090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b092:	f000 fa0d 	bl	800b4b0 <__retarget_lock_release_recursive>
 800b096:	4628      	mov	r0, r5
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da04      	bge.n	800b0a8 <_puts_r+0x60>
 800b09e:	69a2      	ldr	r2, [r4, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	dc17      	bgt.n	800b0d4 <_puts_r+0x8c>
 800b0a4:	290a      	cmp	r1, #10
 800b0a6:	d015      	beq.n	800b0d4 <_puts_r+0x8c>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	7019      	strb	r1, [r3, #0]
 800b0b0:	68a3      	ldr	r3, [r4, #8]
 800b0b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	60a3      	str	r3, [r4, #8]
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	d1ed      	bne.n	800b09a <_puts_r+0x52>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da11      	bge.n	800b0e6 <_puts_r+0x9e>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	210a      	movs	r1, #10
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f881 	bl	800b1ce <__swbuf_r>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d0d7      	beq.n	800b080 <_puts_r+0x38>
 800b0d0:	250a      	movs	r5, #10
 800b0d2:	e7d7      	b.n	800b084 <_puts_r+0x3c>
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f000 f879 	bl	800b1ce <__swbuf_r>
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d1e7      	bne.n	800b0b0 <_puts_r+0x68>
 800b0e0:	e7ce      	b.n	800b080 <_puts_r+0x38>
 800b0e2:	3e01      	subs	r6, #1
 800b0e4:	e7e4      	b.n	800b0b0 <_puts_r+0x68>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	220a      	movs	r2, #10
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e7ee      	b.n	800b0d0 <_puts_r+0x88>
	...

0800b0f4 <puts>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	@ (800b100 <puts+0xc>)
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	f7ff bfa5 	b.w	800b048 <_puts_r>
 800b0fe:	bf00      	nop
 800b100:	24000090 	.word	0x24000090

0800b104 <siprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b510      	push	{r4, lr}
 800b108:	b09d      	sub	sp, #116	@ 0x74
 800b10a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b10c:	9002      	str	r0, [sp, #8]
 800b10e:	9006      	str	r0, [sp, #24]
 800b110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b114:	480a      	ldr	r0, [pc, #40]	@ (800b140 <siprintf+0x3c>)
 800b116:	9107      	str	r1, [sp, #28]
 800b118:	9104      	str	r1, [sp, #16]
 800b11a:	490a      	ldr	r1, [pc, #40]	@ (800b144 <siprintf+0x40>)
 800b11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b120:	9105      	str	r1, [sp, #20]
 800b122:	2400      	movs	r4, #0
 800b124:	a902      	add	r1, sp, #8
 800b126:	6800      	ldr	r0, [r0, #0]
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b12c:	f001 fc8c 	bl	800ca48 <_svfiprintf_r>
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	701c      	strb	r4, [r3, #0]
 800b134:	b01d      	add	sp, #116	@ 0x74
 800b136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b13a:	b003      	add	sp, #12
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	24000090 	.word	0x24000090
 800b144:	ffff0208 	.word	0xffff0208

0800b148 <__sread>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	460c      	mov	r4, r1
 800b14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b150:	f000 f95e 	bl	800b410 <_read_r>
 800b154:	2800      	cmp	r0, #0
 800b156:	bfab      	itete	ge
 800b158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b15a:	89a3      	ldrhlt	r3, [r4, #12]
 800b15c:	181b      	addge	r3, r3, r0
 800b15e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b162:	bfac      	ite	ge
 800b164:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b166:	81a3      	strhlt	r3, [r4, #12]
 800b168:	bd10      	pop	{r4, pc}

0800b16a <__swrite>:
 800b16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16e:	461f      	mov	r7, r3
 800b170:	898b      	ldrh	r3, [r1, #12]
 800b172:	05db      	lsls	r3, r3, #23
 800b174:	4605      	mov	r5, r0
 800b176:	460c      	mov	r4, r1
 800b178:	4616      	mov	r6, r2
 800b17a:	d505      	bpl.n	800b188 <__swrite+0x1e>
 800b17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b180:	2302      	movs	r3, #2
 800b182:	2200      	movs	r2, #0
 800b184:	f000 f932 	bl	800b3ec <_lseek_r>
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	4632      	mov	r2, r6
 800b196:	463b      	mov	r3, r7
 800b198:	4628      	mov	r0, r5
 800b19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b19e:	f000 b949 	b.w	800b434 <_write_r>

0800b1a2 <__sseek>:
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1aa:	f000 f91f 	bl	800b3ec <_lseek_r>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	bf15      	itete	ne
 800b1b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1be:	81a3      	strheq	r3, [r4, #12]
 800b1c0:	bf18      	it	ne
 800b1c2:	81a3      	strhne	r3, [r4, #12]
 800b1c4:	bd10      	pop	{r4, pc}

0800b1c6 <__sclose>:
 800b1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ca:	f000 b8a1 	b.w	800b310 <_close_r>

0800b1ce <__swbuf_r>:
 800b1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d0:	460e      	mov	r6, r1
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	b118      	cbz	r0, 800b1e0 <__swbuf_r+0x12>
 800b1d8:	6a03      	ldr	r3, [r0, #32]
 800b1da:	b90b      	cbnz	r3, 800b1e0 <__swbuf_r+0x12>
 800b1dc:	f7ff fefe 	bl	800afdc <__sinit>
 800b1e0:	69a3      	ldr	r3, [r4, #24]
 800b1e2:	60a3      	str	r3, [r4, #8]
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	071a      	lsls	r2, r3, #28
 800b1e8:	d501      	bpl.n	800b1ee <__swbuf_r+0x20>
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	b943      	cbnz	r3, 800b200 <__swbuf_r+0x32>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f82b 	bl	800b24c <__swsetup_r>
 800b1f6:	b118      	cbz	r0, 800b200 <__swbuf_r+0x32>
 800b1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	6922      	ldr	r2, [r4, #16]
 800b204:	1a98      	subs	r0, r3, r2
 800b206:	6963      	ldr	r3, [r4, #20]
 800b208:	b2f6      	uxtb	r6, r6
 800b20a:	4283      	cmp	r3, r0
 800b20c:	4637      	mov	r7, r6
 800b20e:	dc05      	bgt.n	800b21c <__swbuf_r+0x4e>
 800b210:	4621      	mov	r1, r4
 800b212:	4628      	mov	r0, r5
 800b214:	f001 fd98 	bl	800cd48 <_fflush_r>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d1ed      	bne.n	800b1f8 <__swbuf_r+0x2a>
 800b21c:	68a3      	ldr	r3, [r4, #8]
 800b21e:	3b01      	subs	r3, #1
 800b220:	60a3      	str	r3, [r4, #8]
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	6022      	str	r2, [r4, #0]
 800b228:	701e      	strb	r6, [r3, #0]
 800b22a:	6962      	ldr	r2, [r4, #20]
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	429a      	cmp	r2, r3
 800b230:	d004      	beq.n	800b23c <__swbuf_r+0x6e>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	07db      	lsls	r3, r3, #31
 800b236:	d5e1      	bpl.n	800b1fc <__swbuf_r+0x2e>
 800b238:	2e0a      	cmp	r6, #10
 800b23a:	d1df      	bne.n	800b1fc <__swbuf_r+0x2e>
 800b23c:	4621      	mov	r1, r4
 800b23e:	4628      	mov	r0, r5
 800b240:	f001 fd82 	bl	800cd48 <_fflush_r>
 800b244:	2800      	cmp	r0, #0
 800b246:	d0d9      	beq.n	800b1fc <__swbuf_r+0x2e>
 800b248:	e7d6      	b.n	800b1f8 <__swbuf_r+0x2a>
	...

0800b24c <__swsetup_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4b29      	ldr	r3, [pc, #164]	@ (800b2f4 <__swsetup_r+0xa8>)
 800b250:	4605      	mov	r5, r0
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	460c      	mov	r4, r1
 800b256:	b118      	cbz	r0, 800b260 <__swsetup_r+0x14>
 800b258:	6a03      	ldr	r3, [r0, #32]
 800b25a:	b90b      	cbnz	r3, 800b260 <__swsetup_r+0x14>
 800b25c:	f7ff febe 	bl	800afdc <__sinit>
 800b260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b264:	0719      	lsls	r1, r3, #28
 800b266:	d422      	bmi.n	800b2ae <__swsetup_r+0x62>
 800b268:	06da      	lsls	r2, r3, #27
 800b26a:	d407      	bmi.n	800b27c <__swsetup_r+0x30>
 800b26c:	2209      	movs	r2, #9
 800b26e:	602a      	str	r2, [r5, #0]
 800b270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	f04f 30ff 	mov.w	r0, #4294967295
 800b27a:	e033      	b.n	800b2e4 <__swsetup_r+0x98>
 800b27c:	0758      	lsls	r0, r3, #29
 800b27e:	d512      	bpl.n	800b2a6 <__swsetup_r+0x5a>
 800b280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b282:	b141      	cbz	r1, 800b296 <__swsetup_r+0x4a>
 800b284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b288:	4299      	cmp	r1, r3
 800b28a:	d002      	beq.n	800b292 <__swsetup_r+0x46>
 800b28c:	4628      	mov	r0, r5
 800b28e:	f000 ff05 	bl	800c09c <_free_r>
 800b292:	2300      	movs	r3, #0
 800b294:	6363      	str	r3, [r4, #52]	@ 0x34
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b29c:	81a3      	strh	r3, [r4, #12]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	6063      	str	r3, [r4, #4]
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	f043 0308 	orr.w	r3, r3, #8
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	6923      	ldr	r3, [r4, #16]
 800b2b0:	b94b      	cbnz	r3, 800b2c6 <__swsetup_r+0x7a>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2bc:	d003      	beq.n	800b2c6 <__swsetup_r+0x7a>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f001 fd8f 	bl	800cde4 <__smakebuf_r>
 800b2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ca:	f013 0201 	ands.w	r2, r3, #1
 800b2ce:	d00a      	beq.n	800b2e6 <__swsetup_r+0x9a>
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	60a2      	str	r2, [r4, #8]
 800b2d4:	6962      	ldr	r2, [r4, #20]
 800b2d6:	4252      	negs	r2, r2
 800b2d8:	61a2      	str	r2, [r4, #24]
 800b2da:	6922      	ldr	r2, [r4, #16]
 800b2dc:	b942      	cbnz	r2, 800b2f0 <__swsetup_r+0xa4>
 800b2de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2e2:	d1c5      	bne.n	800b270 <__swsetup_r+0x24>
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	0799      	lsls	r1, r3, #30
 800b2e8:	bf58      	it	pl
 800b2ea:	6962      	ldrpl	r2, [r4, #20]
 800b2ec:	60a2      	str	r2, [r4, #8]
 800b2ee:	e7f4      	b.n	800b2da <__swsetup_r+0x8e>
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e7f7      	b.n	800b2e4 <__swsetup_r+0x98>
 800b2f4:	24000090 	.word	0x24000090

0800b2f8 <memset>:
 800b2f8:	4402      	add	r2, r0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d100      	bne.n	800b302 <memset+0xa>
 800b300:	4770      	bx	lr
 800b302:	f803 1b01 	strb.w	r1, [r3], #1
 800b306:	e7f9      	b.n	800b2fc <memset+0x4>

0800b308 <_localeconv_r>:
 800b308:	4800      	ldr	r0, [pc, #0]	@ (800b30c <_localeconv_r+0x4>)
 800b30a:	4770      	bx	lr
 800b30c:	240001d0 	.word	0x240001d0

0800b310 <_close_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d06      	ldr	r5, [pc, #24]	@ (800b32c <_close_r+0x1c>)
 800b314:	2300      	movs	r3, #0
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	f7f7 f9fa 	bl	8002714 <_close>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_close_r+0x1a>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_close_r+0x1a>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	240057b0 	.word	0x240057b0

0800b330 <_reclaim_reent>:
 800b330:	4b2d      	ldr	r3, [pc, #180]	@ (800b3e8 <_reclaim_reent+0xb8>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4283      	cmp	r3, r0
 800b336:	b570      	push	{r4, r5, r6, lr}
 800b338:	4604      	mov	r4, r0
 800b33a:	d053      	beq.n	800b3e4 <_reclaim_reent+0xb4>
 800b33c:	69c3      	ldr	r3, [r0, #28]
 800b33e:	b31b      	cbz	r3, 800b388 <_reclaim_reent+0x58>
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	b163      	cbz	r3, 800b35e <_reclaim_reent+0x2e>
 800b344:	2500      	movs	r5, #0
 800b346:	69e3      	ldr	r3, [r4, #28]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	5959      	ldr	r1, [r3, r5]
 800b34c:	b9b1      	cbnz	r1, 800b37c <_reclaim_reent+0x4c>
 800b34e:	3504      	adds	r5, #4
 800b350:	2d80      	cmp	r5, #128	@ 0x80
 800b352:	d1f8      	bne.n	800b346 <_reclaim_reent+0x16>
 800b354:	69e3      	ldr	r3, [r4, #28]
 800b356:	4620      	mov	r0, r4
 800b358:	68d9      	ldr	r1, [r3, #12]
 800b35a:	f000 fe9f 	bl	800c09c <_free_r>
 800b35e:	69e3      	ldr	r3, [r4, #28]
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	b111      	cbz	r1, 800b36a <_reclaim_reent+0x3a>
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fe99 	bl	800c09c <_free_r>
 800b36a:	69e3      	ldr	r3, [r4, #28]
 800b36c:	689d      	ldr	r5, [r3, #8]
 800b36e:	b15d      	cbz	r5, 800b388 <_reclaim_reent+0x58>
 800b370:	4629      	mov	r1, r5
 800b372:	4620      	mov	r0, r4
 800b374:	682d      	ldr	r5, [r5, #0]
 800b376:	f000 fe91 	bl	800c09c <_free_r>
 800b37a:	e7f8      	b.n	800b36e <_reclaim_reent+0x3e>
 800b37c:	680e      	ldr	r6, [r1, #0]
 800b37e:	4620      	mov	r0, r4
 800b380:	f000 fe8c 	bl	800c09c <_free_r>
 800b384:	4631      	mov	r1, r6
 800b386:	e7e1      	b.n	800b34c <_reclaim_reent+0x1c>
 800b388:	6961      	ldr	r1, [r4, #20]
 800b38a:	b111      	cbz	r1, 800b392 <_reclaim_reent+0x62>
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 fe85 	bl	800c09c <_free_r>
 800b392:	69e1      	ldr	r1, [r4, #28]
 800b394:	b111      	cbz	r1, 800b39c <_reclaim_reent+0x6c>
 800b396:	4620      	mov	r0, r4
 800b398:	f000 fe80 	bl	800c09c <_free_r>
 800b39c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b39e:	b111      	cbz	r1, 800b3a6 <_reclaim_reent+0x76>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fe7b 	bl	800c09c <_free_r>
 800b3a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3a8:	b111      	cbz	r1, 800b3b0 <_reclaim_reent+0x80>
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 fe76 	bl	800c09c <_free_r>
 800b3b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b3b2:	b111      	cbz	r1, 800b3ba <_reclaim_reent+0x8a>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 fe71 	bl	800c09c <_free_r>
 800b3ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b3bc:	b111      	cbz	r1, 800b3c4 <_reclaim_reent+0x94>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fe6c 	bl	800c09c <_free_r>
 800b3c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b3c6:	b111      	cbz	r1, 800b3ce <_reclaim_reent+0x9e>
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 fe67 	bl	800c09c <_free_r>
 800b3ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b3d0:	b111      	cbz	r1, 800b3d8 <_reclaim_reent+0xa8>
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fe62 	bl	800c09c <_free_r>
 800b3d8:	6a23      	ldr	r3, [r4, #32]
 800b3da:	b11b      	cbz	r3, 800b3e4 <_reclaim_reent+0xb4>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3e2:	4718      	bx	r3
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
 800b3e6:	bf00      	nop
 800b3e8:	24000090 	.word	0x24000090

0800b3ec <_lseek_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d07      	ldr	r5, [pc, #28]	@ (800b40c <_lseek_r+0x20>)
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	4608      	mov	r0, r1
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	602a      	str	r2, [r5, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f7f7 f994 	bl	8002728 <_lseek>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	d102      	bne.n	800b40a <_lseek_r+0x1e>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	b103      	cbz	r3, 800b40a <_lseek_r+0x1e>
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	240057b0 	.word	0x240057b0

0800b410 <_read_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d07      	ldr	r5, [pc, #28]	@ (800b430 <_read_r+0x20>)
 800b414:	4604      	mov	r4, r0
 800b416:	4608      	mov	r0, r1
 800b418:	4611      	mov	r1, r2
 800b41a:	2200      	movs	r2, #0
 800b41c:	602a      	str	r2, [r5, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f7f7 f95c 	bl	80026dc <_read>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_read_r+0x1e>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_read_r+0x1e>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	240057b0 	.word	0x240057b0

0800b434 <_write_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	@ (800b454 <_write_r+0x20>)
 800b438:	4604      	mov	r4, r0
 800b43a:	4608      	mov	r0, r1
 800b43c:	4611      	mov	r1, r2
 800b43e:	2200      	movs	r2, #0
 800b440:	602a      	str	r2, [r5, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	f7f7 f958 	bl	80026f8 <_write>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_write_r+0x1e>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_write_r+0x1e>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	240057b0 	.word	0x240057b0

0800b458 <__errno>:
 800b458:	4b01      	ldr	r3, [pc, #4]	@ (800b460 <__errno+0x8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	24000090 	.word	0x24000090

0800b464 <__libc_init_array>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	4d0d      	ldr	r5, [pc, #52]	@ (800b49c <__libc_init_array+0x38>)
 800b468:	4c0d      	ldr	r4, [pc, #52]	@ (800b4a0 <__libc_init_array+0x3c>)
 800b46a:	1b64      	subs	r4, r4, r5
 800b46c:	10a4      	asrs	r4, r4, #2
 800b46e:	2600      	movs	r6, #0
 800b470:	42a6      	cmp	r6, r4
 800b472:	d109      	bne.n	800b488 <__libc_init_array+0x24>
 800b474:	4d0b      	ldr	r5, [pc, #44]	@ (800b4a4 <__libc_init_array+0x40>)
 800b476:	4c0c      	ldr	r4, [pc, #48]	@ (800b4a8 <__libc_init_array+0x44>)
 800b478:	f001 ff62 	bl	800d340 <_init>
 800b47c:	1b64      	subs	r4, r4, r5
 800b47e:	10a4      	asrs	r4, r4, #2
 800b480:	2600      	movs	r6, #0
 800b482:	42a6      	cmp	r6, r4
 800b484:	d105      	bne.n	800b492 <__libc_init_array+0x2e>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48c:	4798      	blx	r3
 800b48e:	3601      	adds	r6, #1
 800b490:	e7ee      	b.n	800b470 <__libc_init_array+0xc>
 800b492:	f855 3b04 	ldr.w	r3, [r5], #4
 800b496:	4798      	blx	r3
 800b498:	3601      	adds	r6, #1
 800b49a:	e7f2      	b.n	800b482 <__libc_init_array+0x1e>
 800b49c:	0801475c 	.word	0x0801475c
 800b4a0:	0801475c 	.word	0x0801475c
 800b4a4:	0801475c 	.word	0x0801475c
 800b4a8:	08014760 	.word	0x08014760

0800b4ac <__retarget_lock_init_recursive>:
 800b4ac:	4770      	bx	lr

0800b4ae <__retarget_lock_acquire_recursive>:
 800b4ae:	4770      	bx	lr

0800b4b0 <__retarget_lock_release_recursive>:
 800b4b0:	4770      	bx	lr

0800b4b2 <memcpy>:
 800b4b2:	440a      	add	r2, r1
 800b4b4:	4291      	cmp	r1, r2
 800b4b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4ba:	d100      	bne.n	800b4be <memcpy+0xc>
 800b4bc:	4770      	bx	lr
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c8:	4291      	cmp	r1, r2
 800b4ca:	d1f9      	bne.n	800b4c0 <memcpy+0xe>
 800b4cc:	bd10      	pop	{r4, pc}

0800b4ce <quorem>:
 800b4ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d2:	6903      	ldr	r3, [r0, #16]
 800b4d4:	690c      	ldr	r4, [r1, #16]
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	4607      	mov	r7, r0
 800b4da:	db7e      	blt.n	800b5da <quorem+0x10c>
 800b4dc:	3c01      	subs	r4, #1
 800b4de:	f101 0814 	add.w	r8, r1, #20
 800b4e2:	00a3      	lsls	r3, r4, #2
 800b4e4:	f100 0514 	add.w	r5, r0, #20
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b500:	fbb2 f6f3 	udiv	r6, r2, r3
 800b504:	d32e      	bcc.n	800b564 <quorem+0x96>
 800b506:	f04f 0a00 	mov.w	sl, #0
 800b50a:	46c4      	mov	ip, r8
 800b50c:	46ae      	mov	lr, r5
 800b50e:	46d3      	mov	fp, sl
 800b510:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b514:	b298      	uxth	r0, r3
 800b516:	fb06 a000 	mla	r0, r6, r0, sl
 800b51a:	0c02      	lsrs	r2, r0, #16
 800b51c:	0c1b      	lsrs	r3, r3, #16
 800b51e:	fb06 2303 	mla	r3, r6, r3, r2
 800b522:	f8de 2000 	ldr.w	r2, [lr]
 800b526:	b280      	uxth	r0, r0
 800b528:	b292      	uxth	r2, r2
 800b52a:	1a12      	subs	r2, r2, r0
 800b52c:	445a      	add	r2, fp
 800b52e:	f8de 0000 	ldr.w	r0, [lr]
 800b532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b536:	b29b      	uxth	r3, r3
 800b538:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b53c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b540:	b292      	uxth	r2, r2
 800b542:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b546:	45e1      	cmp	r9, ip
 800b548:	f84e 2b04 	str.w	r2, [lr], #4
 800b54c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b550:	d2de      	bcs.n	800b510 <quorem+0x42>
 800b552:	9b00      	ldr	r3, [sp, #0]
 800b554:	58eb      	ldr	r3, [r5, r3]
 800b556:	b92b      	cbnz	r3, 800b564 <quorem+0x96>
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	3b04      	subs	r3, #4
 800b55c:	429d      	cmp	r5, r3
 800b55e:	461a      	mov	r2, r3
 800b560:	d32f      	bcc.n	800b5c2 <quorem+0xf4>
 800b562:	613c      	str	r4, [r7, #16]
 800b564:	4638      	mov	r0, r7
 800b566:	f001 f90b 	bl	800c780 <__mcmp>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	db25      	blt.n	800b5ba <quorem+0xec>
 800b56e:	4629      	mov	r1, r5
 800b570:	2000      	movs	r0, #0
 800b572:	f858 2b04 	ldr.w	r2, [r8], #4
 800b576:	f8d1 c000 	ldr.w	ip, [r1]
 800b57a:	fa1f fe82 	uxth.w	lr, r2
 800b57e:	fa1f f38c 	uxth.w	r3, ip
 800b582:	eba3 030e 	sub.w	r3, r3, lr
 800b586:	4403      	add	r3, r0
 800b588:	0c12      	lsrs	r2, r2, #16
 800b58a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b58e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b592:	b29b      	uxth	r3, r3
 800b594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b598:	45c1      	cmp	r9, r8
 800b59a:	f841 3b04 	str.w	r3, [r1], #4
 800b59e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b5a2:	d2e6      	bcs.n	800b572 <quorem+0xa4>
 800b5a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ac:	b922      	cbnz	r2, 800b5b8 <quorem+0xea>
 800b5ae:	3b04      	subs	r3, #4
 800b5b0:	429d      	cmp	r5, r3
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	d30b      	bcc.n	800b5ce <quorem+0x100>
 800b5b6:	613c      	str	r4, [r7, #16]
 800b5b8:	3601      	adds	r6, #1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	b003      	add	sp, #12
 800b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	3b04      	subs	r3, #4
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d1cb      	bne.n	800b562 <quorem+0x94>
 800b5ca:	3c01      	subs	r4, #1
 800b5cc:	e7c6      	b.n	800b55c <quorem+0x8e>
 800b5ce:	6812      	ldr	r2, [r2, #0]
 800b5d0:	3b04      	subs	r3, #4
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	d1ef      	bne.n	800b5b6 <quorem+0xe8>
 800b5d6:	3c01      	subs	r4, #1
 800b5d8:	e7ea      	b.n	800b5b0 <quorem+0xe2>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e7ee      	b.n	800b5bc <quorem+0xee>
	...

0800b5e0 <_dtoa_r>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ed2d 8b02 	vpush	{d8}
 800b5e8:	69c7      	ldr	r7, [r0, #28]
 800b5ea:	b091      	sub	sp, #68	@ 0x44
 800b5ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b5f0:	ec55 4b10 	vmov	r4, r5, d0
 800b5f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b5f6:	9107      	str	r1, [sp, #28]
 800b5f8:	4681      	mov	r9, r0
 800b5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800b5fe:	b97f      	cbnz	r7, 800b620 <_dtoa_r+0x40>
 800b600:	2010      	movs	r0, #16
 800b602:	f000 fd95 	bl	800c130 <malloc>
 800b606:	4602      	mov	r2, r0
 800b608:	f8c9 001c 	str.w	r0, [r9, #28]
 800b60c:	b920      	cbnz	r0, 800b618 <_dtoa_r+0x38>
 800b60e:	4ba0      	ldr	r3, [pc, #640]	@ (800b890 <_dtoa_r+0x2b0>)
 800b610:	21ef      	movs	r1, #239	@ 0xef
 800b612:	48a0      	ldr	r0, [pc, #640]	@ (800b894 <_dtoa_r+0x2b4>)
 800b614:	f001 fc6e 	bl	800cef4 <__assert_func>
 800b618:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b61c:	6007      	str	r7, [r0, #0]
 800b61e:	60c7      	str	r7, [r0, #12]
 800b620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b624:	6819      	ldr	r1, [r3, #0]
 800b626:	b159      	cbz	r1, 800b640 <_dtoa_r+0x60>
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	604a      	str	r2, [r1, #4]
 800b62c:	2301      	movs	r3, #1
 800b62e:	4093      	lsls	r3, r2
 800b630:	608b      	str	r3, [r1, #8]
 800b632:	4648      	mov	r0, r9
 800b634:	f000 fe72 	bl	800c31c <_Bfree>
 800b638:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	1e2b      	subs	r3, r5, #0
 800b642:	bfbb      	ittet	lt
 800b644:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b648:	9303      	strlt	r3, [sp, #12]
 800b64a:	2300      	movge	r3, #0
 800b64c:	2201      	movlt	r2, #1
 800b64e:	bfac      	ite	ge
 800b650:	6033      	strge	r3, [r6, #0]
 800b652:	6032      	strlt	r2, [r6, #0]
 800b654:	4b90      	ldr	r3, [pc, #576]	@ (800b898 <_dtoa_r+0x2b8>)
 800b656:	9e03      	ldr	r6, [sp, #12]
 800b658:	43b3      	bics	r3, r6
 800b65a:	d110      	bne.n	800b67e <_dtoa_r+0x9e>
 800b65c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b65e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b668:	4323      	orrs	r3, r4
 800b66a:	f000 84e6 	beq.w	800c03a <_dtoa_r+0xa5a>
 800b66e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b670:	4f8a      	ldr	r7, [pc, #552]	@ (800b89c <_dtoa_r+0x2bc>)
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 84e8 	beq.w	800c048 <_dtoa_r+0xa68>
 800b678:	1cfb      	adds	r3, r7, #3
 800b67a:	f000 bce3 	b.w	800c044 <_dtoa_r+0xa64>
 800b67e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b682:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68a:	d10a      	bne.n	800b6a2 <_dtoa_r+0xc2>
 800b68c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b68e:	2301      	movs	r3, #1
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b694:	b113      	cbz	r3, 800b69c <_dtoa_r+0xbc>
 800b696:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b698:	4b81      	ldr	r3, [pc, #516]	@ (800b8a0 <_dtoa_r+0x2c0>)
 800b69a:	6013      	str	r3, [r2, #0]
 800b69c:	4f81      	ldr	r7, [pc, #516]	@ (800b8a4 <_dtoa_r+0x2c4>)
 800b69e:	f000 bcd3 	b.w	800c048 <_dtoa_r+0xa68>
 800b6a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b6a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800b6a6:	4648      	mov	r0, r9
 800b6a8:	eeb0 0b48 	vmov.f64	d0, d8
 800b6ac:	f001 f918 	bl	800c8e0 <__d2b>
 800b6b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6b6:	9001      	str	r0, [sp, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d045      	beq.n	800b748 <_dtoa_r+0x168>
 800b6bc:	eeb0 7b48 	vmov.f64	d7, d8
 800b6c0:	ee18 1a90 	vmov	r1, s17
 800b6c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b6c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b6cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b6d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	ee07 1a90 	vmov	s15, r1
 800b6da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b6de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b878 <_dtoa_r+0x298>
 800b6e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b6e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b880 <_dtoa_r+0x2a0>
 800b6ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b6ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b888 <_dtoa_r+0x2a8>
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b6fa:	eeb0 7b46 	vmov.f64	d7, d6
 800b6fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b702:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b706:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70e:	ee16 8a90 	vmov	r8, s13
 800b712:	d508      	bpl.n	800b726 <_dtoa_r+0x146>
 800b714:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b718:	eeb4 6b47 	vcmp.f64	d6, d7
 800b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b720:	bf18      	it	ne
 800b722:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b726:	f1b8 0f16 	cmp.w	r8, #22
 800b72a:	d82b      	bhi.n	800b784 <_dtoa_r+0x1a4>
 800b72c:	495e      	ldr	r1, [pc, #376]	@ (800b8a8 <_dtoa_r+0x2c8>)
 800b72e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b732:	ed91 7b00 	vldr	d7, [r1]
 800b736:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73e:	d501      	bpl.n	800b744 <_dtoa_r+0x164>
 800b740:	f108 38ff 	add.w	r8, r8, #4294967295
 800b744:	2100      	movs	r1, #0
 800b746:	e01e      	b.n	800b786 <_dtoa_r+0x1a6>
 800b748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74a:	4413      	add	r3, r2
 800b74c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b750:	2920      	cmp	r1, #32
 800b752:	bfc1      	itttt	gt
 800b754:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b758:	408e      	lslgt	r6, r1
 800b75a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b75e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b762:	bfd6      	itet	le
 800b764:	f1c1 0120 	rsble	r1, r1, #32
 800b768:	4331      	orrgt	r1, r6
 800b76a:	fa04 f101 	lslle.w	r1, r4, r1
 800b76e:	ee07 1a90 	vmov	s15, r1
 800b772:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b776:	3b01      	subs	r3, #1
 800b778:	ee17 1a90 	vmov	r1, s15
 800b77c:	2501      	movs	r5, #1
 800b77e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b782:	e7a8      	b.n	800b6d6 <_dtoa_r+0xf6>
 800b784:	2101      	movs	r1, #1
 800b786:	1ad2      	subs	r2, r2, r3
 800b788:	1e53      	subs	r3, r2, #1
 800b78a:	9306      	str	r3, [sp, #24]
 800b78c:	bf45      	ittet	mi
 800b78e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b792:	9304      	strmi	r3, [sp, #16]
 800b794:	2300      	movpl	r3, #0
 800b796:	2300      	movmi	r3, #0
 800b798:	bf4c      	ite	mi
 800b79a:	9306      	strmi	r3, [sp, #24]
 800b79c:	9304      	strpl	r3, [sp, #16]
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	910c      	str	r1, [sp, #48]	@ 0x30
 800b7a4:	db18      	blt.n	800b7d8 <_dtoa_r+0x1f8>
 800b7a6:	9b06      	ldr	r3, [sp, #24]
 800b7a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b7ac:	4443      	add	r3, r8
 800b7ae:	9306      	str	r3, [sp, #24]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	9a07      	ldr	r2, [sp, #28]
 800b7b4:	2a09      	cmp	r2, #9
 800b7b6:	d845      	bhi.n	800b844 <_dtoa_r+0x264>
 800b7b8:	2a05      	cmp	r2, #5
 800b7ba:	bfc4      	itt	gt
 800b7bc:	3a04      	subgt	r2, #4
 800b7be:	9207      	strgt	r2, [sp, #28]
 800b7c0:	9a07      	ldr	r2, [sp, #28]
 800b7c2:	f1a2 0202 	sub.w	r2, r2, #2
 800b7c6:	bfcc      	ite	gt
 800b7c8:	2400      	movgt	r4, #0
 800b7ca:	2401      	movle	r4, #1
 800b7cc:	2a03      	cmp	r2, #3
 800b7ce:	d844      	bhi.n	800b85a <_dtoa_r+0x27a>
 800b7d0:	e8df f002 	tbb	[pc, r2]
 800b7d4:	0b173634 	.word	0x0b173634
 800b7d8:	9b04      	ldr	r3, [sp, #16]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	eba3 0308 	sub.w	r3, r3, r8
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b7e4:	f1c8 0300 	rsb	r3, r8, #0
 800b7e8:	e7e3      	b.n	800b7b2 <_dtoa_r+0x1d2>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	9208      	str	r2, [sp, #32]
 800b7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7f0:	eb08 0b02 	add.w	fp, r8, r2
 800b7f4:	f10b 0a01 	add.w	sl, fp, #1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	2a01      	cmp	r2, #1
 800b7fc:	bfb8      	it	lt
 800b7fe:	2201      	movlt	r2, #1
 800b800:	e006      	b.n	800b810 <_dtoa_r+0x230>
 800b802:	2201      	movs	r2, #1
 800b804:	9208      	str	r2, [sp, #32]
 800b806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b808:	2a00      	cmp	r2, #0
 800b80a:	dd29      	ble.n	800b860 <_dtoa_r+0x280>
 800b80c:	4693      	mov	fp, r2
 800b80e:	4692      	mov	sl, r2
 800b810:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b814:	2100      	movs	r1, #0
 800b816:	2004      	movs	r0, #4
 800b818:	f100 0614 	add.w	r6, r0, #20
 800b81c:	4296      	cmp	r6, r2
 800b81e:	d926      	bls.n	800b86e <_dtoa_r+0x28e>
 800b820:	6079      	str	r1, [r7, #4]
 800b822:	4648      	mov	r0, r9
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	f000 fd39 	bl	800c29c <_Balloc>
 800b82a:	9b05      	ldr	r3, [sp, #20]
 800b82c:	4607      	mov	r7, r0
 800b82e:	2800      	cmp	r0, #0
 800b830:	d13e      	bne.n	800b8b0 <_dtoa_r+0x2d0>
 800b832:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ac <_dtoa_r+0x2cc>)
 800b834:	4602      	mov	r2, r0
 800b836:	f240 11af 	movw	r1, #431	@ 0x1af
 800b83a:	e6ea      	b.n	800b612 <_dtoa_r+0x32>
 800b83c:	2200      	movs	r2, #0
 800b83e:	e7e1      	b.n	800b804 <_dtoa_r+0x224>
 800b840:	2200      	movs	r2, #0
 800b842:	e7d3      	b.n	800b7ec <_dtoa_r+0x20c>
 800b844:	2401      	movs	r4, #1
 800b846:	2200      	movs	r2, #0
 800b848:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b84c:	f04f 3bff 	mov.w	fp, #4294967295
 800b850:	2100      	movs	r1, #0
 800b852:	46da      	mov	sl, fp
 800b854:	2212      	movs	r2, #18
 800b856:	9109      	str	r1, [sp, #36]	@ 0x24
 800b858:	e7da      	b.n	800b810 <_dtoa_r+0x230>
 800b85a:	2201      	movs	r2, #1
 800b85c:	9208      	str	r2, [sp, #32]
 800b85e:	e7f5      	b.n	800b84c <_dtoa_r+0x26c>
 800b860:	f04f 0b01 	mov.w	fp, #1
 800b864:	46da      	mov	sl, fp
 800b866:	465a      	mov	r2, fp
 800b868:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b86c:	e7d0      	b.n	800b810 <_dtoa_r+0x230>
 800b86e:	3101      	adds	r1, #1
 800b870:	0040      	lsls	r0, r0, #1
 800b872:	e7d1      	b.n	800b818 <_dtoa_r+0x238>
 800b874:	f3af 8000 	nop.w
 800b878:	636f4361 	.word	0x636f4361
 800b87c:	3fd287a7 	.word	0x3fd287a7
 800b880:	8b60c8b3 	.word	0x8b60c8b3
 800b884:	3fc68a28 	.word	0x3fc68a28
 800b888:	509f79fb 	.word	0x509f79fb
 800b88c:	3fd34413 	.word	0x3fd34413
 800b890:	0800d4ee 	.word	0x0800d4ee
 800b894:	0800d505 	.word	0x0800d505
 800b898:	7ff00000 	.word	0x7ff00000
 800b89c:	0800d4ea 	.word	0x0800d4ea
 800b8a0:	0800d4be 	.word	0x0800d4be
 800b8a4:	0800d4bd 	.word	0x0800d4bd
 800b8a8:	08014588 	.word	0x08014588
 800b8ac:	0800d55d 	.word	0x0800d55d
 800b8b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b8b4:	f1ba 0f0e 	cmp.w	sl, #14
 800b8b8:	6010      	str	r0, [r2, #0]
 800b8ba:	d86e      	bhi.n	800b99a <_dtoa_r+0x3ba>
 800b8bc:	2c00      	cmp	r4, #0
 800b8be:	d06c      	beq.n	800b99a <_dtoa_r+0x3ba>
 800b8c0:	f1b8 0f00 	cmp.w	r8, #0
 800b8c4:	f340 80b4 	ble.w	800ba30 <_dtoa_r+0x450>
 800b8c8:	4ac8      	ldr	r2, [pc, #800]	@ (800bbec <_dtoa_r+0x60c>)
 800b8ca:	f008 010f 	and.w	r1, r8, #15
 800b8ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b8d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b8d6:	ed92 7b00 	vldr	d7, [r2]
 800b8da:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b8de:	f000 809b 	beq.w	800ba18 <_dtoa_r+0x438>
 800b8e2:	4ac3      	ldr	r2, [pc, #780]	@ (800bbf0 <_dtoa_r+0x610>)
 800b8e4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b8e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b8ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b8f0:	f001 010f 	and.w	r1, r1, #15
 800b8f4:	2203      	movs	r2, #3
 800b8f6:	48be      	ldr	r0, [pc, #760]	@ (800bbf0 <_dtoa_r+0x610>)
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	f040 808f 	bne.w	800ba1c <_dtoa_r+0x43c>
 800b8fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b902:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b906:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b90a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b90c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b910:	2900      	cmp	r1, #0
 800b912:	f000 80b3 	beq.w	800ba7c <_dtoa_r+0x49c>
 800b916:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b91a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	f140 80ab 	bpl.w	800ba7c <_dtoa_r+0x49c>
 800b926:	f1ba 0f00 	cmp.w	sl, #0
 800b92a:	f000 80a7 	beq.w	800ba7c <_dtoa_r+0x49c>
 800b92e:	f1bb 0f00 	cmp.w	fp, #0
 800b932:	dd30      	ble.n	800b996 <_dtoa_r+0x3b6>
 800b934:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b93c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b940:	f108 31ff 	add.w	r1, r8, #4294967295
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	3201      	adds	r2, #1
 800b948:	465c      	mov	r4, fp
 800b94a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b94e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b952:	ee07 2a90 	vmov	s15, r2
 800b956:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b95a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b95e:	ee15 2a90 	vmov	r2, s11
 800b962:	ec51 0b15 	vmov	r0, r1, d5
 800b966:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b96a:	2c00      	cmp	r4, #0
 800b96c:	f040 808a 	bne.w	800ba84 <_dtoa_r+0x4a4>
 800b970:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b974:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b978:	ec41 0b17 	vmov	d7, r0, r1
 800b97c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b984:	f300 826a 	bgt.w	800be5c <_dtoa_r+0x87c>
 800b988:	eeb1 7b47 	vneg.f64	d7, d7
 800b98c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	d423      	bmi.n	800b9de <_dtoa_r+0x3fe>
 800b996:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b99a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b99c:	2a00      	cmp	r2, #0
 800b99e:	f2c0 8129 	blt.w	800bbf4 <_dtoa_r+0x614>
 800b9a2:	f1b8 0f0e 	cmp.w	r8, #14
 800b9a6:	f300 8125 	bgt.w	800bbf4 <_dtoa_r+0x614>
 800b9aa:	4b90      	ldr	r3, [pc, #576]	@ (800bbec <_dtoa_r+0x60c>)
 800b9ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b9b0:	ed93 6b00 	vldr	d6, [r3]
 800b9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f280 80c8 	bge.w	800bb4c <_dtoa_r+0x56c>
 800b9bc:	f1ba 0f00 	cmp.w	sl, #0
 800b9c0:	f300 80c4 	bgt.w	800bb4c <_dtoa_r+0x56c>
 800b9c4:	d10b      	bne.n	800b9de <_dtoa_r+0x3fe>
 800b9c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b9ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b9ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	f2c0 823c 	blt.w	800be56 <_dtoa_r+0x876>
 800b9de:	2400      	movs	r4, #0
 800b9e0:	4625      	mov	r5, r4
 800b9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e4:	43db      	mvns	r3, r3
 800b9e6:	9305      	str	r3, [sp, #20]
 800b9e8:	463e      	mov	r6, r7
 800b9ea:	f04f 0800 	mov.w	r8, #0
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4648      	mov	r0, r9
 800b9f2:	f000 fc93 	bl	800c31c <_Bfree>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	f000 80a2 	beq.w	800bb40 <_dtoa_r+0x560>
 800b9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ba00:	d005      	beq.n	800ba0e <_dtoa_r+0x42e>
 800ba02:	45a8      	cmp	r8, r5
 800ba04:	d003      	beq.n	800ba0e <_dtoa_r+0x42e>
 800ba06:	4641      	mov	r1, r8
 800ba08:	4648      	mov	r0, r9
 800ba0a:	f000 fc87 	bl	800c31c <_Bfree>
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4648      	mov	r0, r9
 800ba12:	f000 fc83 	bl	800c31c <_Bfree>
 800ba16:	e093      	b.n	800bb40 <_dtoa_r+0x560>
 800ba18:	2202      	movs	r2, #2
 800ba1a:	e76c      	b.n	800b8f6 <_dtoa_r+0x316>
 800ba1c:	07cc      	lsls	r4, r1, #31
 800ba1e:	d504      	bpl.n	800ba2a <_dtoa_r+0x44a>
 800ba20:	ed90 6b00 	vldr	d6, [r0]
 800ba24:	3201      	adds	r2, #1
 800ba26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba2a:	1049      	asrs	r1, r1, #1
 800ba2c:	3008      	adds	r0, #8
 800ba2e:	e763      	b.n	800b8f8 <_dtoa_r+0x318>
 800ba30:	d022      	beq.n	800ba78 <_dtoa_r+0x498>
 800ba32:	f1c8 0100 	rsb	r1, r8, #0
 800ba36:	4a6d      	ldr	r2, [pc, #436]	@ (800bbec <_dtoa_r+0x60c>)
 800ba38:	f001 000f 	and.w	r0, r1, #15
 800ba3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ba40:	ed92 7b00 	vldr	d7, [r2]
 800ba44:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ba48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba4c:	4868      	ldr	r0, [pc, #416]	@ (800bbf0 <_dtoa_r+0x610>)
 800ba4e:	1109      	asrs	r1, r1, #4
 800ba50:	2400      	movs	r4, #0
 800ba52:	2202      	movs	r2, #2
 800ba54:	b929      	cbnz	r1, 800ba62 <_dtoa_r+0x482>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	f43f af57 	beq.w	800b90a <_dtoa_r+0x32a>
 800ba5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba60:	e753      	b.n	800b90a <_dtoa_r+0x32a>
 800ba62:	07ce      	lsls	r6, r1, #31
 800ba64:	d505      	bpl.n	800ba72 <_dtoa_r+0x492>
 800ba66:	ed90 6b00 	vldr	d6, [r0]
 800ba6a:	3201      	adds	r2, #1
 800ba6c:	2401      	movs	r4, #1
 800ba6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba72:	1049      	asrs	r1, r1, #1
 800ba74:	3008      	adds	r0, #8
 800ba76:	e7ed      	b.n	800ba54 <_dtoa_r+0x474>
 800ba78:	2202      	movs	r2, #2
 800ba7a:	e746      	b.n	800b90a <_dtoa_r+0x32a>
 800ba7c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba80:	4654      	mov	r4, sl
 800ba82:	e762      	b.n	800b94a <_dtoa_r+0x36a>
 800ba84:	4a59      	ldr	r2, [pc, #356]	@ (800bbec <_dtoa_r+0x60c>)
 800ba86:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ba8a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ba8e:	9a08      	ldr	r2, [sp, #32]
 800ba90:	ec41 0b17 	vmov	d7, r0, r1
 800ba94:	443c      	add	r4, r7
 800ba96:	b34a      	cbz	r2, 800baec <_dtoa_r+0x50c>
 800ba98:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ba9c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800baa0:	463e      	mov	r6, r7
 800baa2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800baa6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800baaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800baae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bab2:	ee14 2a90 	vmov	r2, s9
 800bab6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800baba:	3230      	adds	r2, #48	@ 0x30
 800babc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bac0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	f806 2b01 	strb.w	r2, [r6], #1
 800bacc:	d438      	bmi.n	800bb40 <_dtoa_r+0x560>
 800bace:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bad2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	d46e      	bmi.n	800bbba <_dtoa_r+0x5da>
 800badc:	42a6      	cmp	r6, r4
 800bade:	f43f af5a 	beq.w	800b996 <_dtoa_r+0x3b6>
 800bae2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bae6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800baea:	e7e0      	b.n	800baae <_dtoa_r+0x4ce>
 800baec:	4621      	mov	r1, r4
 800baee:	463e      	mov	r6, r7
 800baf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800baf4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800baf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bafc:	ee14 2a90 	vmov	r2, s9
 800bb00:	3230      	adds	r2, #48	@ 0x30
 800bb02:	f806 2b01 	strb.w	r2, [r6], #1
 800bb06:	42a6      	cmp	r6, r4
 800bb08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bb0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bb10:	d119      	bne.n	800bb46 <_dtoa_r+0x566>
 800bb12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bb16:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bb1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb22:	dc4a      	bgt.n	800bbba <_dtoa_r+0x5da>
 800bb24:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bb28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb30:	f57f af31 	bpl.w	800b996 <_dtoa_r+0x3b6>
 800bb34:	460e      	mov	r6, r1
 800bb36:	3901      	subs	r1, #1
 800bb38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb3c:	2b30      	cmp	r3, #48	@ 0x30
 800bb3e:	d0f9      	beq.n	800bb34 <_dtoa_r+0x554>
 800bb40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bb44:	e027      	b.n	800bb96 <_dtoa_r+0x5b6>
 800bb46:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bb4a:	e7d5      	b.n	800baf8 <_dtoa_r+0x518>
 800bb4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bb54:	463e      	mov	r6, r7
 800bb56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bb5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bb5e:	ee15 3a10 	vmov	r3, s10
 800bb62:	3330      	adds	r3, #48	@ 0x30
 800bb64:	f806 3b01 	strb.w	r3, [r6], #1
 800bb68:	1bf3      	subs	r3, r6, r7
 800bb6a:	459a      	cmp	sl, r3
 800bb6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bb70:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bb74:	d132      	bne.n	800bbdc <_dtoa_r+0x5fc>
 800bb76:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bb7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb82:	dc18      	bgt.n	800bbb6 <_dtoa_r+0x5d6>
 800bb84:	eeb4 7b46 	vcmp.f64	d7, d6
 800bb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8c:	d103      	bne.n	800bb96 <_dtoa_r+0x5b6>
 800bb8e:	ee15 3a10 	vmov	r3, s10
 800bb92:	07db      	lsls	r3, r3, #31
 800bb94:	d40f      	bmi.n	800bbb6 <_dtoa_r+0x5d6>
 800bb96:	9901      	ldr	r1, [sp, #4]
 800bb98:	4648      	mov	r0, r9
 800bb9a:	f000 fbbf 	bl	800c31c <_Bfree>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bba2:	7033      	strb	r3, [r6, #0]
 800bba4:	f108 0301 	add.w	r3, r8, #1
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 824b 	beq.w	800c048 <_dtoa_r+0xa68>
 800bbb2:	601e      	str	r6, [r3, #0]
 800bbb4:	e248      	b.n	800c048 <_dtoa_r+0xa68>
 800bbb6:	f8cd 8014 	str.w	r8, [sp, #20]
 800bbba:	4633      	mov	r3, r6
 800bbbc:	461e      	mov	r6, r3
 800bbbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbc2:	2a39      	cmp	r2, #57	@ 0x39
 800bbc4:	d106      	bne.n	800bbd4 <_dtoa_r+0x5f4>
 800bbc6:	429f      	cmp	r7, r3
 800bbc8:	d1f8      	bne.n	800bbbc <_dtoa_r+0x5dc>
 800bbca:	9a05      	ldr	r2, [sp, #20]
 800bbcc:	3201      	adds	r2, #1
 800bbce:	9205      	str	r2, [sp, #20]
 800bbd0:	2230      	movs	r2, #48	@ 0x30
 800bbd2:	703a      	strb	r2, [r7, #0]
 800bbd4:	781a      	ldrb	r2, [r3, #0]
 800bbd6:	3201      	adds	r2, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	e7b1      	b.n	800bb40 <_dtoa_r+0x560>
 800bbdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bbe0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	d1b5      	bne.n	800bb56 <_dtoa_r+0x576>
 800bbea:	e7d4      	b.n	800bb96 <_dtoa_r+0x5b6>
 800bbec:	08014588 	.word	0x08014588
 800bbf0:	08014560 	.word	0x08014560
 800bbf4:	9908      	ldr	r1, [sp, #32]
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	f000 80e9 	beq.w	800bdce <_dtoa_r+0x7ee>
 800bbfc:	9907      	ldr	r1, [sp, #28]
 800bbfe:	2901      	cmp	r1, #1
 800bc00:	f300 80cb 	bgt.w	800bd9a <_dtoa_r+0x7ba>
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	f000 80c4 	beq.w	800bd92 <_dtoa_r+0x7b2>
 800bc0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bc0e:	9e04      	ldr	r6, [sp, #16]
 800bc10:	461c      	mov	r4, r3
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	9b04      	ldr	r3, [sp, #16]
 800bc16:	4413      	add	r3, r2
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	9b06      	ldr	r3, [sp, #24]
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4413      	add	r3, r2
 800bc20:	4648      	mov	r0, r9
 800bc22:	9306      	str	r3, [sp, #24]
 800bc24:	f000 fc2e 	bl	800c484 <__i2b>
 800bc28:	9b05      	ldr	r3, [sp, #20]
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b166      	cbz	r6, 800bc48 <_dtoa_r+0x668>
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	dd09      	ble.n	800bc48 <_dtoa_r+0x668>
 800bc34:	42b2      	cmp	r2, r6
 800bc36:	9904      	ldr	r1, [sp, #16]
 800bc38:	bfa8      	it	ge
 800bc3a:	4632      	movge	r2, r6
 800bc3c:	1a89      	subs	r1, r1, r2
 800bc3e:	9104      	str	r1, [sp, #16]
 800bc40:	9906      	ldr	r1, [sp, #24]
 800bc42:	1ab6      	subs	r6, r6, r2
 800bc44:	1a8a      	subs	r2, r1, r2
 800bc46:	9206      	str	r2, [sp, #24]
 800bc48:	b30b      	cbz	r3, 800bc8e <_dtoa_r+0x6ae>
 800bc4a:	9a08      	ldr	r2, [sp, #32]
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	f000 80c5 	beq.w	800bddc <_dtoa_r+0x7fc>
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	f000 80bf 	beq.w	800bdd6 <_dtoa_r+0x7f6>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	4648      	mov	r0, r9
 800bc5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc60:	f000 fcc8 	bl	800c5f4 <__pow5mult>
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	4601      	mov	r1, r0
 800bc68:	4605      	mov	r5, r0
 800bc6a:	4648      	mov	r0, r9
 800bc6c:	f000 fc20 	bl	800c4b0 <__multiply>
 800bc70:	9901      	ldr	r1, [sp, #4]
 800bc72:	9005      	str	r0, [sp, #20]
 800bc74:	4648      	mov	r0, r9
 800bc76:	f000 fb51 	bl	800c31c <_Bfree>
 800bc7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc7c:	1b1b      	subs	r3, r3, r4
 800bc7e:	f000 80b0 	beq.w	800bde2 <_dtoa_r+0x802>
 800bc82:	9905      	ldr	r1, [sp, #20]
 800bc84:	461a      	mov	r2, r3
 800bc86:	4648      	mov	r0, r9
 800bc88:	f000 fcb4 	bl	800c5f4 <__pow5mult>
 800bc8c:	9001      	str	r0, [sp, #4]
 800bc8e:	2101      	movs	r1, #1
 800bc90:	4648      	mov	r0, r9
 800bc92:	f000 fbf7 	bl	800c484 <__i2b>
 800bc96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc98:	4604      	mov	r4, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 81da 	beq.w	800c054 <_dtoa_r+0xa74>
 800bca0:	461a      	mov	r2, r3
 800bca2:	4601      	mov	r1, r0
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 fca5 	bl	800c5f4 <__pow5mult>
 800bcaa:	9b07      	ldr	r3, [sp, #28]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	4604      	mov	r4, r0
 800bcb0:	f300 80a0 	bgt.w	800bdf4 <_dtoa_r+0x814>
 800bcb4:	9b02      	ldr	r3, [sp, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f040 8096 	bne.w	800bde8 <_dtoa_r+0x808>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	f040 8092 	bne.w	800bdec <_dtoa_r+0x80c>
 800bcc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bccc:	0d12      	lsrs	r2, r2, #20
 800bcce:	0512      	lsls	r2, r2, #20
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	f000 808d 	beq.w	800bdf0 <_dtoa_r+0x810>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	9b06      	ldr	r3, [sp, #24]
 800bcde:	3301      	adds	r3, #1
 800bce0:	9306      	str	r3, [sp, #24]
 800bce2:	2301      	movs	r3, #1
 800bce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 81b9 	beq.w	800c060 <_dtoa_r+0xa80>
 800bcee:	6922      	ldr	r2, [r4, #16]
 800bcf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bcf4:	6910      	ldr	r0, [r2, #16]
 800bcf6:	f000 fb79 	bl	800c3ec <__hi0bits>
 800bcfa:	f1c0 0020 	rsb	r0, r0, #32
 800bcfe:	9b06      	ldr	r3, [sp, #24]
 800bd00:	4418      	add	r0, r3
 800bd02:	f010 001f 	ands.w	r0, r0, #31
 800bd06:	f000 8081 	beq.w	800be0c <_dtoa_r+0x82c>
 800bd0a:	f1c0 0220 	rsb	r2, r0, #32
 800bd0e:	2a04      	cmp	r2, #4
 800bd10:	dd73      	ble.n	800bdfa <_dtoa_r+0x81a>
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	f1c0 001c 	rsb	r0, r0, #28
 800bd18:	4403      	add	r3, r0
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	4406      	add	r6, r0
 800bd20:	4403      	add	r3, r0
 800bd22:	9306      	str	r3, [sp, #24]
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	dd05      	ble.n	800bd36 <_dtoa_r+0x756>
 800bd2a:	9901      	ldr	r1, [sp, #4]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4648      	mov	r0, r9
 800bd30:	f000 fcba 	bl	800c6a8 <__lshift>
 800bd34:	9001      	str	r0, [sp, #4]
 800bd36:	9b06      	ldr	r3, [sp, #24]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	dd05      	ble.n	800bd48 <_dtoa_r+0x768>
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	461a      	mov	r2, r3
 800bd40:	4648      	mov	r0, r9
 800bd42:	f000 fcb1 	bl	800c6a8 <__lshift>
 800bd46:	4604      	mov	r4, r0
 800bd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d060      	beq.n	800be10 <_dtoa_r+0x830>
 800bd4e:	9801      	ldr	r0, [sp, #4]
 800bd50:	4621      	mov	r1, r4
 800bd52:	f000 fd15 	bl	800c780 <__mcmp>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	da5a      	bge.n	800be10 <_dtoa_r+0x830>
 800bd5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	9901      	ldr	r1, [sp, #4]
 800bd62:	2300      	movs	r3, #0
 800bd64:	220a      	movs	r2, #10
 800bd66:	4648      	mov	r0, r9
 800bd68:	f000 fafa 	bl	800c360 <__multadd>
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	9001      	str	r0, [sp, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8177 	beq.w	800c064 <_dtoa_r+0xa84>
 800bd76:	4629      	mov	r1, r5
 800bd78:	2300      	movs	r3, #0
 800bd7a:	220a      	movs	r2, #10
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f000 faef 	bl	800c360 <__multadd>
 800bd82:	f1bb 0f00 	cmp.w	fp, #0
 800bd86:	4605      	mov	r5, r0
 800bd88:	dc6e      	bgt.n	800be68 <_dtoa_r+0x888>
 800bd8a:	9b07      	ldr	r3, [sp, #28]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	dc48      	bgt.n	800be22 <_dtoa_r+0x842>
 800bd90:	e06a      	b.n	800be68 <_dtoa_r+0x888>
 800bd92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bd98:	e739      	b.n	800bc0e <_dtoa_r+0x62e>
 800bd9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db07      	blt.n	800bdb2 <_dtoa_r+0x7d2>
 800bda2:	f1ba 0f00 	cmp.w	sl, #0
 800bda6:	eba3 0404 	sub.w	r4, r3, r4
 800bdaa:	db0b      	blt.n	800bdc4 <_dtoa_r+0x7e4>
 800bdac:	9e04      	ldr	r6, [sp, #16]
 800bdae:	4652      	mov	r2, sl
 800bdb0:	e72f      	b.n	800bc12 <_dtoa_r+0x632>
 800bdb2:	1ae2      	subs	r2, r4, r3
 800bdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb6:	9e04      	ldr	r6, [sp, #16]
 800bdb8:	4413      	add	r3, r2
 800bdba:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	4623      	mov	r3, r4
 800bdc0:	2400      	movs	r4, #0
 800bdc2:	e726      	b.n	800bc12 <_dtoa_r+0x632>
 800bdc4:	9a04      	ldr	r2, [sp, #16]
 800bdc6:	eba2 060a 	sub.w	r6, r2, sl
 800bdca:	2200      	movs	r2, #0
 800bdcc:	e721      	b.n	800bc12 <_dtoa_r+0x632>
 800bdce:	9e04      	ldr	r6, [sp, #16]
 800bdd0:	9d08      	ldr	r5, [sp, #32]
 800bdd2:	461c      	mov	r4, r3
 800bdd4:	e72a      	b.n	800bc2c <_dtoa_r+0x64c>
 800bdd6:	9a01      	ldr	r2, [sp, #4]
 800bdd8:	9205      	str	r2, [sp, #20]
 800bdda:	e752      	b.n	800bc82 <_dtoa_r+0x6a2>
 800bddc:	9901      	ldr	r1, [sp, #4]
 800bdde:	461a      	mov	r2, r3
 800bde0:	e751      	b.n	800bc86 <_dtoa_r+0x6a6>
 800bde2:	9b05      	ldr	r3, [sp, #20]
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	e752      	b.n	800bc8e <_dtoa_r+0x6ae>
 800bde8:	2300      	movs	r3, #0
 800bdea:	e77b      	b.n	800bce4 <_dtoa_r+0x704>
 800bdec:	9b02      	ldr	r3, [sp, #8]
 800bdee:	e779      	b.n	800bce4 <_dtoa_r+0x704>
 800bdf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bdf2:	e778      	b.n	800bce6 <_dtoa_r+0x706>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdf8:	e779      	b.n	800bcee <_dtoa_r+0x70e>
 800bdfa:	d093      	beq.n	800bd24 <_dtoa_r+0x744>
 800bdfc:	9b04      	ldr	r3, [sp, #16]
 800bdfe:	321c      	adds	r2, #28
 800be00:	4413      	add	r3, r2
 800be02:	9304      	str	r3, [sp, #16]
 800be04:	9b06      	ldr	r3, [sp, #24]
 800be06:	4416      	add	r6, r2
 800be08:	4413      	add	r3, r2
 800be0a:	e78a      	b.n	800bd22 <_dtoa_r+0x742>
 800be0c:	4602      	mov	r2, r0
 800be0e:	e7f5      	b.n	800bdfc <_dtoa_r+0x81c>
 800be10:	f1ba 0f00 	cmp.w	sl, #0
 800be14:	f8cd 8014 	str.w	r8, [sp, #20]
 800be18:	46d3      	mov	fp, sl
 800be1a:	dc21      	bgt.n	800be60 <_dtoa_r+0x880>
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	dd1e      	ble.n	800be60 <_dtoa_r+0x880>
 800be22:	f1bb 0f00 	cmp.w	fp, #0
 800be26:	f47f addc 	bne.w	800b9e2 <_dtoa_r+0x402>
 800be2a:	4621      	mov	r1, r4
 800be2c:	465b      	mov	r3, fp
 800be2e:	2205      	movs	r2, #5
 800be30:	4648      	mov	r0, r9
 800be32:	f000 fa95 	bl	800c360 <__multadd>
 800be36:	4601      	mov	r1, r0
 800be38:	4604      	mov	r4, r0
 800be3a:	9801      	ldr	r0, [sp, #4]
 800be3c:	f000 fca0 	bl	800c780 <__mcmp>
 800be40:	2800      	cmp	r0, #0
 800be42:	f77f adce 	ble.w	800b9e2 <_dtoa_r+0x402>
 800be46:	463e      	mov	r6, r7
 800be48:	2331      	movs	r3, #49	@ 0x31
 800be4a:	f806 3b01 	strb.w	r3, [r6], #1
 800be4e:	9b05      	ldr	r3, [sp, #20]
 800be50:	3301      	adds	r3, #1
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	e5c9      	b.n	800b9ea <_dtoa_r+0x40a>
 800be56:	f8cd 8014 	str.w	r8, [sp, #20]
 800be5a:	4654      	mov	r4, sl
 800be5c:	4625      	mov	r5, r4
 800be5e:	e7f2      	b.n	800be46 <_dtoa_r+0x866>
 800be60:	9b08      	ldr	r3, [sp, #32]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 8102 	beq.w	800c06c <_dtoa_r+0xa8c>
 800be68:	2e00      	cmp	r6, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x898>
 800be6c:	4629      	mov	r1, r5
 800be6e:	4632      	mov	r2, r6
 800be70:	4648      	mov	r0, r9
 800be72:	f000 fc19 	bl	800c6a8 <__lshift>
 800be76:	4605      	mov	r5, r0
 800be78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d058      	beq.n	800bf30 <_dtoa_r+0x950>
 800be7e:	6869      	ldr	r1, [r5, #4]
 800be80:	4648      	mov	r0, r9
 800be82:	f000 fa0b 	bl	800c29c <_Balloc>
 800be86:	4606      	mov	r6, r0
 800be88:	b928      	cbnz	r0, 800be96 <_dtoa_r+0x8b6>
 800be8a:	4b82      	ldr	r3, [pc, #520]	@ (800c094 <_dtoa_r+0xab4>)
 800be8c:	4602      	mov	r2, r0
 800be8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be92:	f7ff bbbe 	b.w	800b612 <_dtoa_r+0x32>
 800be96:	692a      	ldr	r2, [r5, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	f105 010c 	add.w	r1, r5, #12
 800bea0:	300c      	adds	r0, #12
 800bea2:	f7ff fb06 	bl	800b4b2 <memcpy>
 800bea6:	2201      	movs	r2, #1
 800bea8:	4631      	mov	r1, r6
 800beaa:	4648      	mov	r0, r9
 800beac:	f000 fbfc 	bl	800c6a8 <__lshift>
 800beb0:	1c7b      	adds	r3, r7, #1
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	eb07 030b 	add.w	r3, r7, fp
 800beb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	46a8      	mov	r8, r5
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	4605      	mov	r5, r0
 800bec6:	9b04      	ldr	r3, [sp, #16]
 800bec8:	9801      	ldr	r0, [sp, #4]
 800beca:	4621      	mov	r1, r4
 800becc:	f103 3bff 	add.w	fp, r3, #4294967295
 800bed0:	f7ff fafd 	bl	800b4ce <quorem>
 800bed4:	4641      	mov	r1, r8
 800bed6:	9002      	str	r0, [sp, #8]
 800bed8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bedc:	9801      	ldr	r0, [sp, #4]
 800bede:	f000 fc4f 	bl	800c780 <__mcmp>
 800bee2:	462a      	mov	r2, r5
 800bee4:	9006      	str	r0, [sp, #24]
 800bee6:	4621      	mov	r1, r4
 800bee8:	4648      	mov	r0, r9
 800beea:	f000 fc65 	bl	800c7b8 <__mdiff>
 800beee:	68c2      	ldr	r2, [r0, #12]
 800bef0:	4606      	mov	r6, r0
 800bef2:	b9fa      	cbnz	r2, 800bf34 <_dtoa_r+0x954>
 800bef4:	4601      	mov	r1, r0
 800bef6:	9801      	ldr	r0, [sp, #4]
 800bef8:	f000 fc42 	bl	800c780 <__mcmp>
 800befc:	4602      	mov	r2, r0
 800befe:	4631      	mov	r1, r6
 800bf00:	4648      	mov	r0, r9
 800bf02:	920a      	str	r2, [sp, #40]	@ 0x28
 800bf04:	f000 fa0a 	bl	800c31c <_Bfree>
 800bf08:	9b07      	ldr	r3, [sp, #28]
 800bf0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf0c:	9e04      	ldr	r6, [sp, #16]
 800bf0e:	ea42 0103 	orr.w	r1, r2, r3
 800bf12:	9b08      	ldr	r3, [sp, #32]
 800bf14:	4319      	orrs	r1, r3
 800bf16:	d10f      	bne.n	800bf38 <_dtoa_r+0x958>
 800bf18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bf1c:	d028      	beq.n	800bf70 <_dtoa_r+0x990>
 800bf1e:	9b06      	ldr	r3, [sp, #24]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dd02      	ble.n	800bf2a <_dtoa_r+0x94a>
 800bf24:	9b02      	ldr	r3, [sp, #8]
 800bf26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bf2a:	f88b a000 	strb.w	sl, [fp]
 800bf2e:	e55e      	b.n	800b9ee <_dtoa_r+0x40e>
 800bf30:	4628      	mov	r0, r5
 800bf32:	e7bd      	b.n	800beb0 <_dtoa_r+0x8d0>
 800bf34:	2201      	movs	r2, #1
 800bf36:	e7e2      	b.n	800befe <_dtoa_r+0x91e>
 800bf38:	9b06      	ldr	r3, [sp, #24]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	db04      	blt.n	800bf48 <_dtoa_r+0x968>
 800bf3e:	9907      	ldr	r1, [sp, #28]
 800bf40:	430b      	orrs	r3, r1
 800bf42:	9908      	ldr	r1, [sp, #32]
 800bf44:	430b      	orrs	r3, r1
 800bf46:	d120      	bne.n	800bf8a <_dtoa_r+0x9aa>
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	ddee      	ble.n	800bf2a <_dtoa_r+0x94a>
 800bf4c:	9901      	ldr	r1, [sp, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	4648      	mov	r0, r9
 800bf52:	f000 fba9 	bl	800c6a8 <__lshift>
 800bf56:	4621      	mov	r1, r4
 800bf58:	9001      	str	r0, [sp, #4]
 800bf5a:	f000 fc11 	bl	800c780 <__mcmp>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	dc03      	bgt.n	800bf6a <_dtoa_r+0x98a>
 800bf62:	d1e2      	bne.n	800bf2a <_dtoa_r+0x94a>
 800bf64:	f01a 0f01 	tst.w	sl, #1
 800bf68:	d0df      	beq.n	800bf2a <_dtoa_r+0x94a>
 800bf6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bf6e:	d1d9      	bne.n	800bf24 <_dtoa_r+0x944>
 800bf70:	2339      	movs	r3, #57	@ 0x39
 800bf72:	f88b 3000 	strb.w	r3, [fp]
 800bf76:	4633      	mov	r3, r6
 800bf78:	461e      	mov	r6, r3
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf80:	2a39      	cmp	r2, #57	@ 0x39
 800bf82:	d052      	beq.n	800c02a <_dtoa_r+0xa4a>
 800bf84:	3201      	adds	r2, #1
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	e531      	b.n	800b9ee <_dtoa_r+0x40e>
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	dd07      	ble.n	800bf9e <_dtoa_r+0x9be>
 800bf8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bf92:	d0ed      	beq.n	800bf70 <_dtoa_r+0x990>
 800bf94:	f10a 0301 	add.w	r3, sl, #1
 800bf98:	f88b 3000 	strb.w	r3, [fp]
 800bf9c:	e527      	b.n	800b9ee <_dtoa_r+0x40e>
 800bf9e:	9b04      	ldr	r3, [sp, #16]
 800bfa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfa2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d029      	beq.n	800bffe <_dtoa_r+0xa1e>
 800bfaa:	9901      	ldr	r1, [sp, #4]
 800bfac:	2300      	movs	r3, #0
 800bfae:	220a      	movs	r2, #10
 800bfb0:	4648      	mov	r0, r9
 800bfb2:	f000 f9d5 	bl	800c360 <__multadd>
 800bfb6:	45a8      	cmp	r8, r5
 800bfb8:	9001      	str	r0, [sp, #4]
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	f04f 020a 	mov.w	r2, #10
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	d107      	bne.n	800bfd8 <_dtoa_r+0x9f8>
 800bfc8:	f000 f9ca 	bl	800c360 <__multadd>
 800bfcc:	4680      	mov	r8, r0
 800bfce:	4605      	mov	r5, r0
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	9304      	str	r3, [sp, #16]
 800bfd6:	e776      	b.n	800bec6 <_dtoa_r+0x8e6>
 800bfd8:	f000 f9c2 	bl	800c360 <__multadd>
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4680      	mov	r8, r0
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	220a      	movs	r2, #10
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f000 f9bb 	bl	800c360 <__multadd>
 800bfea:	4605      	mov	r5, r0
 800bfec:	e7f0      	b.n	800bfd0 <_dtoa_r+0x9f0>
 800bfee:	f1bb 0f00 	cmp.w	fp, #0
 800bff2:	bfcc      	ite	gt
 800bff4:	465e      	movgt	r6, fp
 800bff6:	2601      	movle	r6, #1
 800bff8:	443e      	add	r6, r7
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	9901      	ldr	r1, [sp, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	4648      	mov	r0, r9
 800c004:	f000 fb50 	bl	800c6a8 <__lshift>
 800c008:	4621      	mov	r1, r4
 800c00a:	9001      	str	r0, [sp, #4]
 800c00c:	f000 fbb8 	bl	800c780 <__mcmp>
 800c010:	2800      	cmp	r0, #0
 800c012:	dcb0      	bgt.n	800bf76 <_dtoa_r+0x996>
 800c014:	d102      	bne.n	800c01c <_dtoa_r+0xa3c>
 800c016:	f01a 0f01 	tst.w	sl, #1
 800c01a:	d1ac      	bne.n	800bf76 <_dtoa_r+0x996>
 800c01c:	4633      	mov	r3, r6
 800c01e:	461e      	mov	r6, r3
 800c020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c024:	2a30      	cmp	r2, #48	@ 0x30
 800c026:	d0fa      	beq.n	800c01e <_dtoa_r+0xa3e>
 800c028:	e4e1      	b.n	800b9ee <_dtoa_r+0x40e>
 800c02a:	429f      	cmp	r7, r3
 800c02c:	d1a4      	bne.n	800bf78 <_dtoa_r+0x998>
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	3301      	adds	r3, #1
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	2331      	movs	r3, #49	@ 0x31
 800c036:	703b      	strb	r3, [r7, #0]
 800c038:	e4d9      	b.n	800b9ee <_dtoa_r+0x40e>
 800c03a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c03c:	4f16      	ldr	r7, [pc, #88]	@ (800c098 <_dtoa_r+0xab8>)
 800c03e:	b11b      	cbz	r3, 800c048 <_dtoa_r+0xa68>
 800c040:	f107 0308 	add.w	r3, r7, #8
 800c044:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	4638      	mov	r0, r7
 800c04a:	b011      	add	sp, #68	@ 0x44
 800c04c:	ecbd 8b02 	vpop	{d8}
 800c050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	2b01      	cmp	r3, #1
 800c058:	f77f ae2c 	ble.w	800bcb4 <_dtoa_r+0x6d4>
 800c05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c060:	2001      	movs	r0, #1
 800c062:	e64c      	b.n	800bcfe <_dtoa_r+0x71e>
 800c064:	f1bb 0f00 	cmp.w	fp, #0
 800c068:	f77f aed8 	ble.w	800be1c <_dtoa_r+0x83c>
 800c06c:	463e      	mov	r6, r7
 800c06e:	9801      	ldr	r0, [sp, #4]
 800c070:	4621      	mov	r1, r4
 800c072:	f7ff fa2c 	bl	800b4ce <quorem>
 800c076:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c07a:	f806 ab01 	strb.w	sl, [r6], #1
 800c07e:	1bf2      	subs	r2, r6, r7
 800c080:	4593      	cmp	fp, r2
 800c082:	ddb4      	ble.n	800bfee <_dtoa_r+0xa0e>
 800c084:	9901      	ldr	r1, [sp, #4]
 800c086:	2300      	movs	r3, #0
 800c088:	220a      	movs	r2, #10
 800c08a:	4648      	mov	r0, r9
 800c08c:	f000 f968 	bl	800c360 <__multadd>
 800c090:	9001      	str	r0, [sp, #4]
 800c092:	e7ec      	b.n	800c06e <_dtoa_r+0xa8e>
 800c094:	0800d55d 	.word	0x0800d55d
 800c098:	0800d4e1 	.word	0x0800d4e1

0800c09c <_free_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d041      	beq.n	800c128 <_free_r+0x8c>
 800c0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a8:	1f0c      	subs	r4, r1, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfb8      	it	lt
 800c0ae:	18e4      	addlt	r4, r4, r3
 800c0b0:	f000 f8e8 	bl	800c284 <__malloc_lock>
 800c0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c12c <_free_r+0x90>)
 800c0b6:	6813      	ldr	r3, [r2, #0]
 800c0b8:	b933      	cbnz	r3, 800c0c8 <_free_r+0x2c>
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	6014      	str	r4, [r2, #0]
 800c0be:	4628      	mov	r0, r5
 800c0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c4:	f000 b8e4 	b.w	800c290 <__malloc_unlock>
 800c0c8:	42a3      	cmp	r3, r4
 800c0ca:	d908      	bls.n	800c0de <_free_r+0x42>
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	1821      	adds	r1, r4, r0
 800c0d0:	428b      	cmp	r3, r1
 800c0d2:	bf01      	itttt	eq
 800c0d4:	6819      	ldreq	r1, [r3, #0]
 800c0d6:	685b      	ldreq	r3, [r3, #4]
 800c0d8:	1809      	addeq	r1, r1, r0
 800c0da:	6021      	streq	r1, [r4, #0]
 800c0dc:	e7ed      	b.n	800c0ba <_free_r+0x1e>
 800c0de:	461a      	mov	r2, r3
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	b10b      	cbz	r3, 800c0e8 <_free_r+0x4c>
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	d9fa      	bls.n	800c0de <_free_r+0x42>
 800c0e8:	6811      	ldr	r1, [r2, #0]
 800c0ea:	1850      	adds	r0, r2, r1
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d10b      	bne.n	800c108 <_free_r+0x6c>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	4401      	add	r1, r0
 800c0f4:	1850      	adds	r0, r2, r1
 800c0f6:	4283      	cmp	r3, r0
 800c0f8:	6011      	str	r1, [r2, #0]
 800c0fa:	d1e0      	bne.n	800c0be <_free_r+0x22>
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	6053      	str	r3, [r2, #4]
 800c102:	4408      	add	r0, r1
 800c104:	6010      	str	r0, [r2, #0]
 800c106:	e7da      	b.n	800c0be <_free_r+0x22>
 800c108:	d902      	bls.n	800c110 <_free_r+0x74>
 800c10a:	230c      	movs	r3, #12
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	e7d6      	b.n	800c0be <_free_r+0x22>
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	1821      	adds	r1, r4, r0
 800c114:	428b      	cmp	r3, r1
 800c116:	bf04      	itt	eq
 800c118:	6819      	ldreq	r1, [r3, #0]
 800c11a:	685b      	ldreq	r3, [r3, #4]
 800c11c:	6063      	str	r3, [r4, #4]
 800c11e:	bf04      	itt	eq
 800c120:	1809      	addeq	r1, r1, r0
 800c122:	6021      	streq	r1, [r4, #0]
 800c124:	6054      	str	r4, [r2, #4]
 800c126:	e7ca      	b.n	800c0be <_free_r+0x22>
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop
 800c12c:	240057bc 	.word	0x240057bc

0800c130 <malloc>:
 800c130:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <malloc+0xc>)
 800c132:	4601      	mov	r1, r0
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	f000 b825 	b.w	800c184 <_malloc_r>
 800c13a:	bf00      	nop
 800c13c:	24000090 	.word	0x24000090

0800c140 <sbrk_aligned>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	4e0f      	ldr	r6, [pc, #60]	@ (800c180 <sbrk_aligned+0x40>)
 800c144:	460c      	mov	r4, r1
 800c146:	6831      	ldr	r1, [r6, #0]
 800c148:	4605      	mov	r5, r0
 800c14a:	b911      	cbnz	r1, 800c152 <sbrk_aligned+0x12>
 800c14c:	f000 fec2 	bl	800ced4 <_sbrk_r>
 800c150:	6030      	str	r0, [r6, #0]
 800c152:	4621      	mov	r1, r4
 800c154:	4628      	mov	r0, r5
 800c156:	f000 febd 	bl	800ced4 <_sbrk_r>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d103      	bne.n	800c166 <sbrk_aligned+0x26>
 800c15e:	f04f 34ff 	mov.w	r4, #4294967295
 800c162:	4620      	mov	r0, r4
 800c164:	bd70      	pop	{r4, r5, r6, pc}
 800c166:	1cc4      	adds	r4, r0, #3
 800c168:	f024 0403 	bic.w	r4, r4, #3
 800c16c:	42a0      	cmp	r0, r4
 800c16e:	d0f8      	beq.n	800c162 <sbrk_aligned+0x22>
 800c170:	1a21      	subs	r1, r4, r0
 800c172:	4628      	mov	r0, r5
 800c174:	f000 feae 	bl	800ced4 <_sbrk_r>
 800c178:	3001      	adds	r0, #1
 800c17a:	d1f2      	bne.n	800c162 <sbrk_aligned+0x22>
 800c17c:	e7ef      	b.n	800c15e <sbrk_aligned+0x1e>
 800c17e:	bf00      	nop
 800c180:	240057b8 	.word	0x240057b8

0800c184 <_malloc_r>:
 800c184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c188:	1ccd      	adds	r5, r1, #3
 800c18a:	f025 0503 	bic.w	r5, r5, #3
 800c18e:	3508      	adds	r5, #8
 800c190:	2d0c      	cmp	r5, #12
 800c192:	bf38      	it	cc
 800c194:	250c      	movcc	r5, #12
 800c196:	2d00      	cmp	r5, #0
 800c198:	4606      	mov	r6, r0
 800c19a:	db01      	blt.n	800c1a0 <_malloc_r+0x1c>
 800c19c:	42a9      	cmp	r1, r5
 800c19e:	d904      	bls.n	800c1aa <_malloc_r+0x26>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	6033      	str	r3, [r6, #0]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c280 <_malloc_r+0xfc>
 800c1ae:	f000 f869 	bl	800c284 <__malloc_lock>
 800c1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	bb44      	cbnz	r4, 800c20c <_malloc_r+0x88>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ffbf 	bl	800c140 <sbrk_aligned>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	d158      	bne.n	800c27a <_malloc_r+0xf6>
 800c1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800c1cc:	4627      	mov	r7, r4
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	d143      	bne.n	800c25a <_malloc_r+0xd6>
 800c1d2:	2c00      	cmp	r4, #0
 800c1d4:	d04b      	beq.n	800c26e <_malloc_r+0xea>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	4639      	mov	r1, r7
 800c1da:	4630      	mov	r0, r6
 800c1dc:	eb04 0903 	add.w	r9, r4, r3
 800c1e0:	f000 fe78 	bl	800ced4 <_sbrk_r>
 800c1e4:	4581      	cmp	r9, r0
 800c1e6:	d142      	bne.n	800c26e <_malloc_r+0xea>
 800c1e8:	6821      	ldr	r1, [r4, #0]
 800c1ea:	1a6d      	subs	r5, r5, r1
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7ff ffa6 	bl	800c140 <sbrk_aligned>
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d03a      	beq.n	800c26e <_malloc_r+0xea>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	442b      	add	r3, r5
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	bb62      	cbnz	r2, 800c260 <_malloc_r+0xdc>
 800c206:	f8c8 7000 	str.w	r7, [r8]
 800c20a:	e00f      	b.n	800c22c <_malloc_r+0xa8>
 800c20c:	6822      	ldr	r2, [r4, #0]
 800c20e:	1b52      	subs	r2, r2, r5
 800c210:	d420      	bmi.n	800c254 <_malloc_r+0xd0>
 800c212:	2a0b      	cmp	r2, #11
 800c214:	d917      	bls.n	800c246 <_malloc_r+0xc2>
 800c216:	1961      	adds	r1, r4, r5
 800c218:	42a3      	cmp	r3, r4
 800c21a:	6025      	str	r5, [r4, #0]
 800c21c:	bf18      	it	ne
 800c21e:	6059      	strne	r1, [r3, #4]
 800c220:	6863      	ldr	r3, [r4, #4]
 800c222:	bf08      	it	eq
 800c224:	f8c8 1000 	streq.w	r1, [r8]
 800c228:	5162      	str	r2, [r4, r5]
 800c22a:	604b      	str	r3, [r1, #4]
 800c22c:	4630      	mov	r0, r6
 800c22e:	f000 f82f 	bl	800c290 <__malloc_unlock>
 800c232:	f104 000b 	add.w	r0, r4, #11
 800c236:	1d23      	adds	r3, r4, #4
 800c238:	f020 0007 	bic.w	r0, r0, #7
 800c23c:	1ac2      	subs	r2, r0, r3
 800c23e:	bf1c      	itt	ne
 800c240:	1a1b      	subne	r3, r3, r0
 800c242:	50a3      	strne	r3, [r4, r2]
 800c244:	e7af      	b.n	800c1a6 <_malloc_r+0x22>
 800c246:	6862      	ldr	r2, [r4, #4]
 800c248:	42a3      	cmp	r3, r4
 800c24a:	bf0c      	ite	eq
 800c24c:	f8c8 2000 	streq.w	r2, [r8]
 800c250:	605a      	strne	r2, [r3, #4]
 800c252:	e7eb      	b.n	800c22c <_malloc_r+0xa8>
 800c254:	4623      	mov	r3, r4
 800c256:	6864      	ldr	r4, [r4, #4]
 800c258:	e7ae      	b.n	800c1b8 <_malloc_r+0x34>
 800c25a:	463c      	mov	r4, r7
 800c25c:	687f      	ldr	r7, [r7, #4]
 800c25e:	e7b6      	b.n	800c1ce <_malloc_r+0x4a>
 800c260:	461a      	mov	r2, r3
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	42a3      	cmp	r3, r4
 800c266:	d1fb      	bne.n	800c260 <_malloc_r+0xdc>
 800c268:	2300      	movs	r3, #0
 800c26a:	6053      	str	r3, [r2, #4]
 800c26c:	e7de      	b.n	800c22c <_malloc_r+0xa8>
 800c26e:	230c      	movs	r3, #12
 800c270:	6033      	str	r3, [r6, #0]
 800c272:	4630      	mov	r0, r6
 800c274:	f000 f80c 	bl	800c290 <__malloc_unlock>
 800c278:	e794      	b.n	800c1a4 <_malloc_r+0x20>
 800c27a:	6005      	str	r5, [r0, #0]
 800c27c:	e7d6      	b.n	800c22c <_malloc_r+0xa8>
 800c27e:	bf00      	nop
 800c280:	240057bc 	.word	0x240057bc

0800c284 <__malloc_lock>:
 800c284:	4801      	ldr	r0, [pc, #4]	@ (800c28c <__malloc_lock+0x8>)
 800c286:	f7ff b912 	b.w	800b4ae <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	240057b4 	.word	0x240057b4

0800c290 <__malloc_unlock>:
 800c290:	4801      	ldr	r0, [pc, #4]	@ (800c298 <__malloc_unlock+0x8>)
 800c292:	f7ff b90d 	b.w	800b4b0 <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	240057b4 	.word	0x240057b4

0800c29c <_Balloc>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	69c6      	ldr	r6, [r0, #28]
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	b976      	cbnz	r6, 800c2c4 <_Balloc+0x28>
 800c2a6:	2010      	movs	r0, #16
 800c2a8:	f7ff ff42 	bl	800c130 <malloc>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	61e0      	str	r0, [r4, #28]
 800c2b0:	b920      	cbnz	r0, 800c2bc <_Balloc+0x20>
 800c2b2:	4b18      	ldr	r3, [pc, #96]	@ (800c314 <_Balloc+0x78>)
 800c2b4:	4818      	ldr	r0, [pc, #96]	@ (800c318 <_Balloc+0x7c>)
 800c2b6:	216b      	movs	r1, #107	@ 0x6b
 800c2b8:	f000 fe1c 	bl	800cef4 <__assert_func>
 800c2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2c0:	6006      	str	r6, [r0, #0]
 800c2c2:	60c6      	str	r6, [r0, #12]
 800c2c4:	69e6      	ldr	r6, [r4, #28]
 800c2c6:	68f3      	ldr	r3, [r6, #12]
 800c2c8:	b183      	cbz	r3, 800c2ec <_Balloc+0x50>
 800c2ca:	69e3      	ldr	r3, [r4, #28]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2d2:	b9b8      	cbnz	r0, 800c304 <_Balloc+0x68>
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2da:	1d72      	adds	r2, r6, #5
 800c2dc:	0092      	lsls	r2, r2, #2
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 fe26 	bl	800cf30 <_calloc_r>
 800c2e4:	b160      	cbz	r0, 800c300 <_Balloc+0x64>
 800c2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ea:	e00e      	b.n	800c30a <_Balloc+0x6e>
 800c2ec:	2221      	movs	r2, #33	@ 0x21
 800c2ee:	2104      	movs	r1, #4
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f000 fe1d 	bl	800cf30 <_calloc_r>
 800c2f6:	69e3      	ldr	r3, [r4, #28]
 800c2f8:	60f0      	str	r0, [r6, #12]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e4      	bne.n	800c2ca <_Balloc+0x2e>
 800c300:	2000      	movs	r0, #0
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	6802      	ldr	r2, [r0, #0]
 800c306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c30a:	2300      	movs	r3, #0
 800c30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c310:	e7f7      	b.n	800c302 <_Balloc+0x66>
 800c312:	bf00      	nop
 800c314:	0800d4ee 	.word	0x0800d4ee
 800c318:	0800d56e 	.word	0x0800d56e

0800c31c <_Bfree>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	69c6      	ldr	r6, [r0, #28]
 800c320:	4605      	mov	r5, r0
 800c322:	460c      	mov	r4, r1
 800c324:	b976      	cbnz	r6, 800c344 <_Bfree+0x28>
 800c326:	2010      	movs	r0, #16
 800c328:	f7ff ff02 	bl	800c130 <malloc>
 800c32c:	4602      	mov	r2, r0
 800c32e:	61e8      	str	r0, [r5, #28]
 800c330:	b920      	cbnz	r0, 800c33c <_Bfree+0x20>
 800c332:	4b09      	ldr	r3, [pc, #36]	@ (800c358 <_Bfree+0x3c>)
 800c334:	4809      	ldr	r0, [pc, #36]	@ (800c35c <_Bfree+0x40>)
 800c336:	218f      	movs	r1, #143	@ 0x8f
 800c338:	f000 fddc 	bl	800cef4 <__assert_func>
 800c33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c340:	6006      	str	r6, [r0, #0]
 800c342:	60c6      	str	r6, [r0, #12]
 800c344:	b13c      	cbz	r4, 800c356 <_Bfree+0x3a>
 800c346:	69eb      	ldr	r3, [r5, #28]
 800c348:	6862      	ldr	r2, [r4, #4]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c350:	6021      	str	r1, [r4, #0]
 800c352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	0800d4ee 	.word	0x0800d4ee
 800c35c:	0800d56e 	.word	0x0800d56e

0800c360 <__multadd>:
 800c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	690d      	ldr	r5, [r1, #16]
 800c366:	4607      	mov	r7, r0
 800c368:	460c      	mov	r4, r1
 800c36a:	461e      	mov	r6, r3
 800c36c:	f101 0c14 	add.w	ip, r1, #20
 800c370:	2000      	movs	r0, #0
 800c372:	f8dc 3000 	ldr.w	r3, [ip]
 800c376:	b299      	uxth	r1, r3
 800c378:	fb02 6101 	mla	r1, r2, r1, r6
 800c37c:	0c1e      	lsrs	r6, r3, #16
 800c37e:	0c0b      	lsrs	r3, r1, #16
 800c380:	fb02 3306 	mla	r3, r2, r6, r3
 800c384:	b289      	uxth	r1, r1
 800c386:	3001      	adds	r0, #1
 800c388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c38c:	4285      	cmp	r5, r0
 800c38e:	f84c 1b04 	str.w	r1, [ip], #4
 800c392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c396:	dcec      	bgt.n	800c372 <__multadd+0x12>
 800c398:	b30e      	cbz	r6, 800c3de <__multadd+0x7e>
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	42ab      	cmp	r3, r5
 800c39e:	dc19      	bgt.n	800c3d4 <__multadd+0x74>
 800c3a0:	6861      	ldr	r1, [r4, #4]
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	3101      	adds	r1, #1
 800c3a6:	f7ff ff79 	bl	800c29c <_Balloc>
 800c3aa:	4680      	mov	r8, r0
 800c3ac:	b928      	cbnz	r0, 800c3ba <__multadd+0x5a>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e4 <__multadd+0x84>)
 800c3b2:	480d      	ldr	r0, [pc, #52]	@ (800c3e8 <__multadd+0x88>)
 800c3b4:	21ba      	movs	r1, #186	@ 0xba
 800c3b6:	f000 fd9d 	bl	800cef4 <__assert_func>
 800c3ba:	6922      	ldr	r2, [r4, #16]
 800c3bc:	3202      	adds	r2, #2
 800c3be:	f104 010c 	add.w	r1, r4, #12
 800c3c2:	0092      	lsls	r2, r2, #2
 800c3c4:	300c      	adds	r0, #12
 800c3c6:	f7ff f874 	bl	800b4b2 <memcpy>
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f7ff ffa5 	bl	800c31c <_Bfree>
 800c3d2:	4644      	mov	r4, r8
 800c3d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3d8:	3501      	adds	r5, #1
 800c3da:	615e      	str	r6, [r3, #20]
 800c3dc:	6125      	str	r5, [r4, #16]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e4:	0800d55d 	.word	0x0800d55d
 800c3e8:	0800d56e 	.word	0x0800d56e

0800c3ec <__hi0bits>:
 800c3ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	bf36      	itet	cc
 800c3f4:	0403      	lslcc	r3, r0, #16
 800c3f6:	2000      	movcs	r0, #0
 800c3f8:	2010      	movcc	r0, #16
 800c3fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3fe:	bf3c      	itt	cc
 800c400:	021b      	lslcc	r3, r3, #8
 800c402:	3008      	addcc	r0, #8
 800c404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c408:	bf3c      	itt	cc
 800c40a:	011b      	lslcc	r3, r3, #4
 800c40c:	3004      	addcc	r0, #4
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c412:	bf3c      	itt	cc
 800c414:	009b      	lslcc	r3, r3, #2
 800c416:	3002      	addcc	r0, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	db05      	blt.n	800c428 <__hi0bits+0x3c>
 800c41c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c420:	f100 0001 	add.w	r0, r0, #1
 800c424:	bf08      	it	eq
 800c426:	2020      	moveq	r0, #32
 800c428:	4770      	bx	lr

0800c42a <__lo0bits>:
 800c42a:	6803      	ldr	r3, [r0, #0]
 800c42c:	4602      	mov	r2, r0
 800c42e:	f013 0007 	ands.w	r0, r3, #7
 800c432:	d00b      	beq.n	800c44c <__lo0bits+0x22>
 800c434:	07d9      	lsls	r1, r3, #31
 800c436:	d421      	bmi.n	800c47c <__lo0bits+0x52>
 800c438:	0798      	lsls	r0, r3, #30
 800c43a:	bf49      	itett	mi
 800c43c:	085b      	lsrmi	r3, r3, #1
 800c43e:	089b      	lsrpl	r3, r3, #2
 800c440:	2001      	movmi	r0, #1
 800c442:	6013      	strmi	r3, [r2, #0]
 800c444:	bf5c      	itt	pl
 800c446:	6013      	strpl	r3, [r2, #0]
 800c448:	2002      	movpl	r0, #2
 800c44a:	4770      	bx	lr
 800c44c:	b299      	uxth	r1, r3
 800c44e:	b909      	cbnz	r1, 800c454 <__lo0bits+0x2a>
 800c450:	0c1b      	lsrs	r3, r3, #16
 800c452:	2010      	movs	r0, #16
 800c454:	b2d9      	uxtb	r1, r3
 800c456:	b909      	cbnz	r1, 800c45c <__lo0bits+0x32>
 800c458:	3008      	adds	r0, #8
 800c45a:	0a1b      	lsrs	r3, r3, #8
 800c45c:	0719      	lsls	r1, r3, #28
 800c45e:	bf04      	itt	eq
 800c460:	091b      	lsreq	r3, r3, #4
 800c462:	3004      	addeq	r0, #4
 800c464:	0799      	lsls	r1, r3, #30
 800c466:	bf04      	itt	eq
 800c468:	089b      	lsreq	r3, r3, #2
 800c46a:	3002      	addeq	r0, #2
 800c46c:	07d9      	lsls	r1, r3, #31
 800c46e:	d403      	bmi.n	800c478 <__lo0bits+0x4e>
 800c470:	085b      	lsrs	r3, r3, #1
 800c472:	f100 0001 	add.w	r0, r0, #1
 800c476:	d003      	beq.n	800c480 <__lo0bits+0x56>
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	4770      	bx	lr
 800c47c:	2000      	movs	r0, #0
 800c47e:	4770      	bx	lr
 800c480:	2020      	movs	r0, #32
 800c482:	4770      	bx	lr

0800c484 <__i2b>:
 800c484:	b510      	push	{r4, lr}
 800c486:	460c      	mov	r4, r1
 800c488:	2101      	movs	r1, #1
 800c48a:	f7ff ff07 	bl	800c29c <_Balloc>
 800c48e:	4602      	mov	r2, r0
 800c490:	b928      	cbnz	r0, 800c49e <__i2b+0x1a>
 800c492:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <__i2b+0x24>)
 800c494:	4805      	ldr	r0, [pc, #20]	@ (800c4ac <__i2b+0x28>)
 800c496:	f240 1145 	movw	r1, #325	@ 0x145
 800c49a:	f000 fd2b 	bl	800cef4 <__assert_func>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	6144      	str	r4, [r0, #20]
 800c4a2:	6103      	str	r3, [r0, #16]
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800d55d 	.word	0x0800d55d
 800c4ac:	0800d56e 	.word	0x0800d56e

0800c4b0 <__multiply>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	4617      	mov	r7, r2
 800c4b6:	690a      	ldr	r2, [r1, #16]
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	bfa8      	it	ge
 800c4be:	463b      	movge	r3, r7
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	bfa4      	itt	ge
 800c4c4:	460f      	movge	r7, r1
 800c4c6:	4699      	movge	r9, r3
 800c4c8:	693d      	ldr	r5, [r7, #16]
 800c4ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	eb05 060a 	add.w	r6, r5, sl
 800c4d6:	42b3      	cmp	r3, r6
 800c4d8:	b085      	sub	sp, #20
 800c4da:	bfb8      	it	lt
 800c4dc:	3101      	addlt	r1, #1
 800c4de:	f7ff fedd 	bl	800c29c <_Balloc>
 800c4e2:	b930      	cbnz	r0, 800c4f2 <__multiply+0x42>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	4b41      	ldr	r3, [pc, #260]	@ (800c5ec <__multiply+0x13c>)
 800c4e8:	4841      	ldr	r0, [pc, #260]	@ (800c5f0 <__multiply+0x140>)
 800c4ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4ee:	f000 fd01 	bl	800cef4 <__assert_func>
 800c4f2:	f100 0414 	add.w	r4, r0, #20
 800c4f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c4fa:	4623      	mov	r3, r4
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4573      	cmp	r3, lr
 800c500:	d320      	bcc.n	800c544 <__multiply+0x94>
 800c502:	f107 0814 	add.w	r8, r7, #20
 800c506:	f109 0114 	add.w	r1, r9, #20
 800c50a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c50e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c512:	9302      	str	r3, [sp, #8]
 800c514:	1beb      	subs	r3, r5, r7
 800c516:	3b15      	subs	r3, #21
 800c518:	f023 0303 	bic.w	r3, r3, #3
 800c51c:	3304      	adds	r3, #4
 800c51e:	3715      	adds	r7, #21
 800c520:	42bd      	cmp	r5, r7
 800c522:	bf38      	it	cc
 800c524:	2304      	movcc	r3, #4
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	9b02      	ldr	r3, [sp, #8]
 800c52a:	9103      	str	r1, [sp, #12]
 800c52c:	428b      	cmp	r3, r1
 800c52e:	d80c      	bhi.n	800c54a <__multiply+0x9a>
 800c530:	2e00      	cmp	r6, #0
 800c532:	dd03      	ble.n	800c53c <__multiply+0x8c>
 800c534:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d055      	beq.n	800c5e8 <__multiply+0x138>
 800c53c:	6106      	str	r6, [r0, #16]
 800c53e:	b005      	add	sp, #20
 800c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c544:	f843 2b04 	str.w	r2, [r3], #4
 800c548:	e7d9      	b.n	800c4fe <__multiply+0x4e>
 800c54a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c54e:	f1ba 0f00 	cmp.w	sl, #0
 800c552:	d01f      	beq.n	800c594 <__multiply+0xe4>
 800c554:	46c4      	mov	ip, r8
 800c556:	46a1      	mov	r9, r4
 800c558:	2700      	movs	r7, #0
 800c55a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c55e:	f8d9 3000 	ldr.w	r3, [r9]
 800c562:	fa1f fb82 	uxth.w	fp, r2
 800c566:	b29b      	uxth	r3, r3
 800c568:	fb0a 330b 	mla	r3, sl, fp, r3
 800c56c:	443b      	add	r3, r7
 800c56e:	f8d9 7000 	ldr.w	r7, [r9]
 800c572:	0c12      	lsrs	r2, r2, #16
 800c574:	0c3f      	lsrs	r7, r7, #16
 800c576:	fb0a 7202 	mla	r2, sl, r2, r7
 800c57a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c57e:	b29b      	uxth	r3, r3
 800c580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c584:	4565      	cmp	r5, ip
 800c586:	f849 3b04 	str.w	r3, [r9], #4
 800c58a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c58e:	d8e4      	bhi.n	800c55a <__multiply+0xaa>
 800c590:	9b01      	ldr	r3, [sp, #4]
 800c592:	50e7      	str	r7, [r4, r3]
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c59a:	3104      	adds	r1, #4
 800c59c:	f1b9 0f00 	cmp.w	r9, #0
 800c5a0:	d020      	beq.n	800c5e4 <__multiply+0x134>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4647      	mov	r7, r8
 800c5a6:	46a4      	mov	ip, r4
 800c5a8:	f04f 0a00 	mov.w	sl, #0
 800c5ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800c5b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c5b4:	fb09 220b 	mla	r2, r9, fp, r2
 800c5b8:	4452      	add	r2, sl
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c0:	f84c 3b04 	str.w	r3, [ip], #4
 800c5c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800c5c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800c5d0:	fb09 330a 	mla	r3, r9, sl, r3
 800c5d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c5d8:	42bd      	cmp	r5, r7
 800c5da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5de:	d8e5      	bhi.n	800c5ac <__multiply+0xfc>
 800c5e0:	9a01      	ldr	r2, [sp, #4]
 800c5e2:	50a3      	str	r3, [r4, r2]
 800c5e4:	3404      	adds	r4, #4
 800c5e6:	e79f      	b.n	800c528 <__multiply+0x78>
 800c5e8:	3e01      	subs	r6, #1
 800c5ea:	e7a1      	b.n	800c530 <__multiply+0x80>
 800c5ec:	0800d55d 	.word	0x0800d55d
 800c5f0:	0800d56e 	.word	0x0800d56e

0800c5f4 <__pow5mult>:
 800c5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f8:	4615      	mov	r5, r2
 800c5fa:	f012 0203 	ands.w	r2, r2, #3
 800c5fe:	4607      	mov	r7, r0
 800c600:	460e      	mov	r6, r1
 800c602:	d007      	beq.n	800c614 <__pow5mult+0x20>
 800c604:	4c25      	ldr	r4, [pc, #148]	@ (800c69c <__pow5mult+0xa8>)
 800c606:	3a01      	subs	r2, #1
 800c608:	2300      	movs	r3, #0
 800c60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c60e:	f7ff fea7 	bl	800c360 <__multadd>
 800c612:	4606      	mov	r6, r0
 800c614:	10ad      	asrs	r5, r5, #2
 800c616:	d03d      	beq.n	800c694 <__pow5mult+0xa0>
 800c618:	69fc      	ldr	r4, [r7, #28]
 800c61a:	b97c      	cbnz	r4, 800c63c <__pow5mult+0x48>
 800c61c:	2010      	movs	r0, #16
 800c61e:	f7ff fd87 	bl	800c130 <malloc>
 800c622:	4602      	mov	r2, r0
 800c624:	61f8      	str	r0, [r7, #28]
 800c626:	b928      	cbnz	r0, 800c634 <__pow5mult+0x40>
 800c628:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a0 <__pow5mult+0xac>)
 800c62a:	481e      	ldr	r0, [pc, #120]	@ (800c6a4 <__pow5mult+0xb0>)
 800c62c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c630:	f000 fc60 	bl	800cef4 <__assert_func>
 800c634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c638:	6004      	str	r4, [r0, #0]
 800c63a:	60c4      	str	r4, [r0, #12]
 800c63c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c644:	b94c      	cbnz	r4, 800c65a <__pow5mult+0x66>
 800c646:	f240 2171 	movw	r1, #625	@ 0x271
 800c64a:	4638      	mov	r0, r7
 800c64c:	f7ff ff1a 	bl	800c484 <__i2b>
 800c650:	2300      	movs	r3, #0
 800c652:	f8c8 0008 	str.w	r0, [r8, #8]
 800c656:	4604      	mov	r4, r0
 800c658:	6003      	str	r3, [r0, #0]
 800c65a:	f04f 0900 	mov.w	r9, #0
 800c65e:	07eb      	lsls	r3, r5, #31
 800c660:	d50a      	bpl.n	800c678 <__pow5mult+0x84>
 800c662:	4631      	mov	r1, r6
 800c664:	4622      	mov	r2, r4
 800c666:	4638      	mov	r0, r7
 800c668:	f7ff ff22 	bl	800c4b0 <__multiply>
 800c66c:	4631      	mov	r1, r6
 800c66e:	4680      	mov	r8, r0
 800c670:	4638      	mov	r0, r7
 800c672:	f7ff fe53 	bl	800c31c <_Bfree>
 800c676:	4646      	mov	r6, r8
 800c678:	106d      	asrs	r5, r5, #1
 800c67a:	d00b      	beq.n	800c694 <__pow5mult+0xa0>
 800c67c:	6820      	ldr	r0, [r4, #0]
 800c67e:	b938      	cbnz	r0, 800c690 <__pow5mult+0x9c>
 800c680:	4622      	mov	r2, r4
 800c682:	4621      	mov	r1, r4
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff ff13 	bl	800c4b0 <__multiply>
 800c68a:	6020      	str	r0, [r4, #0]
 800c68c:	f8c0 9000 	str.w	r9, [r0]
 800c690:	4604      	mov	r4, r0
 800c692:	e7e4      	b.n	800c65e <__pow5mult+0x6a>
 800c694:	4630      	mov	r0, r6
 800c696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69a:	bf00      	nop
 800c69c:	08014550 	.word	0x08014550
 800c6a0:	0800d4ee 	.word	0x0800d4ee
 800c6a4:	0800d56e 	.word	0x0800d56e

0800c6a8 <__lshift>:
 800c6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	6849      	ldr	r1, [r1, #4]
 800c6b0:	6923      	ldr	r3, [r4, #16]
 800c6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	4691      	mov	r9, r2
 800c6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6c0:	f108 0601 	add.w	r6, r8, #1
 800c6c4:	42b3      	cmp	r3, r6
 800c6c6:	db0b      	blt.n	800c6e0 <__lshift+0x38>
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7ff fde7 	bl	800c29c <_Balloc>
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	b948      	cbnz	r0, 800c6e6 <__lshift+0x3e>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	4b28      	ldr	r3, [pc, #160]	@ (800c778 <__lshift+0xd0>)
 800c6d6:	4829      	ldr	r0, [pc, #164]	@ (800c77c <__lshift+0xd4>)
 800c6d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6dc:	f000 fc0a 	bl	800cef4 <__assert_func>
 800c6e0:	3101      	adds	r1, #1
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	e7ee      	b.n	800c6c4 <__lshift+0x1c>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f100 0114 	add.w	r1, r0, #20
 800c6ec:	f100 0210 	add.w	r2, r0, #16
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	4553      	cmp	r3, sl
 800c6f4:	db33      	blt.n	800c75e <__lshift+0xb6>
 800c6f6:	6920      	ldr	r0, [r4, #16]
 800c6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6fc:	f104 0314 	add.w	r3, r4, #20
 800c700:	f019 091f 	ands.w	r9, r9, #31
 800c704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c70c:	d02b      	beq.n	800c766 <__lshift+0xbe>
 800c70e:	f1c9 0e20 	rsb	lr, r9, #32
 800c712:	468a      	mov	sl, r1
 800c714:	2200      	movs	r2, #0
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	fa00 f009 	lsl.w	r0, r0, r9
 800c71c:	4310      	orrs	r0, r2
 800c71e:	f84a 0b04 	str.w	r0, [sl], #4
 800c722:	f853 2b04 	ldr.w	r2, [r3], #4
 800c726:	459c      	cmp	ip, r3
 800c728:	fa22 f20e 	lsr.w	r2, r2, lr
 800c72c:	d8f3      	bhi.n	800c716 <__lshift+0x6e>
 800c72e:	ebac 0304 	sub.w	r3, ip, r4
 800c732:	3b15      	subs	r3, #21
 800c734:	f023 0303 	bic.w	r3, r3, #3
 800c738:	3304      	adds	r3, #4
 800c73a:	f104 0015 	add.w	r0, r4, #21
 800c73e:	4560      	cmp	r0, ip
 800c740:	bf88      	it	hi
 800c742:	2304      	movhi	r3, #4
 800c744:	50ca      	str	r2, [r1, r3]
 800c746:	b10a      	cbz	r2, 800c74c <__lshift+0xa4>
 800c748:	f108 0602 	add.w	r6, r8, #2
 800c74c:	3e01      	subs	r6, #1
 800c74e:	4638      	mov	r0, r7
 800c750:	612e      	str	r6, [r5, #16]
 800c752:	4621      	mov	r1, r4
 800c754:	f7ff fde2 	bl	800c31c <_Bfree>
 800c758:	4628      	mov	r0, r5
 800c75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c762:	3301      	adds	r3, #1
 800c764:	e7c5      	b.n	800c6f2 <__lshift+0x4a>
 800c766:	3904      	subs	r1, #4
 800c768:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c770:	459c      	cmp	ip, r3
 800c772:	d8f9      	bhi.n	800c768 <__lshift+0xc0>
 800c774:	e7ea      	b.n	800c74c <__lshift+0xa4>
 800c776:	bf00      	nop
 800c778:	0800d55d 	.word	0x0800d55d
 800c77c:	0800d56e 	.word	0x0800d56e

0800c780 <__mcmp>:
 800c780:	690a      	ldr	r2, [r1, #16]
 800c782:	4603      	mov	r3, r0
 800c784:	6900      	ldr	r0, [r0, #16]
 800c786:	1a80      	subs	r0, r0, r2
 800c788:	b530      	push	{r4, r5, lr}
 800c78a:	d10e      	bne.n	800c7aa <__mcmp+0x2a>
 800c78c:	3314      	adds	r3, #20
 800c78e:	3114      	adds	r1, #20
 800c790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c79c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7a0:	4295      	cmp	r5, r2
 800c7a2:	d003      	beq.n	800c7ac <__mcmp+0x2c>
 800c7a4:	d205      	bcs.n	800c7b2 <__mcmp+0x32>
 800c7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7aa:	bd30      	pop	{r4, r5, pc}
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	d3f3      	bcc.n	800c798 <__mcmp+0x18>
 800c7b0:	e7fb      	b.n	800c7aa <__mcmp+0x2a>
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	e7f9      	b.n	800c7aa <__mcmp+0x2a>
	...

0800c7b8 <__mdiff>:
 800c7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	4689      	mov	r9, r1
 800c7be:	4606      	mov	r6, r0
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4648      	mov	r0, r9
 800c7c4:	4614      	mov	r4, r2
 800c7c6:	f7ff ffdb 	bl	800c780 <__mcmp>
 800c7ca:	1e05      	subs	r5, r0, #0
 800c7cc:	d112      	bne.n	800c7f4 <__mdiff+0x3c>
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7ff fd63 	bl	800c29c <_Balloc>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	b928      	cbnz	r0, 800c7e6 <__mdiff+0x2e>
 800c7da:	4b3f      	ldr	r3, [pc, #252]	@ (800c8d8 <__mdiff+0x120>)
 800c7dc:	f240 2137 	movw	r1, #567	@ 0x237
 800c7e0:	483e      	ldr	r0, [pc, #248]	@ (800c8dc <__mdiff+0x124>)
 800c7e2:	f000 fb87 	bl	800cef4 <__assert_func>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	b003      	add	sp, #12
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	bfbc      	itt	lt
 800c7f6:	464b      	movlt	r3, r9
 800c7f8:	46a1      	movlt	r9, r4
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c800:	bfba      	itte	lt
 800c802:	461c      	movlt	r4, r3
 800c804:	2501      	movlt	r5, #1
 800c806:	2500      	movge	r5, #0
 800c808:	f7ff fd48 	bl	800c29c <_Balloc>
 800c80c:	4602      	mov	r2, r0
 800c80e:	b918      	cbnz	r0, 800c818 <__mdiff+0x60>
 800c810:	4b31      	ldr	r3, [pc, #196]	@ (800c8d8 <__mdiff+0x120>)
 800c812:	f240 2145 	movw	r1, #581	@ 0x245
 800c816:	e7e3      	b.n	800c7e0 <__mdiff+0x28>
 800c818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c81c:	6926      	ldr	r6, [r4, #16]
 800c81e:	60c5      	str	r5, [r0, #12]
 800c820:	f109 0310 	add.w	r3, r9, #16
 800c824:	f109 0514 	add.w	r5, r9, #20
 800c828:	f104 0e14 	add.w	lr, r4, #20
 800c82c:	f100 0b14 	add.w	fp, r0, #20
 800c830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	46d9      	mov	r9, fp
 800c83c:	f04f 0c00 	mov.w	ip, #0
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	fa1f f38a 	uxth.w	r3, sl
 800c850:	4619      	mov	r1, r3
 800c852:	b283      	uxth	r3, r0
 800c854:	1acb      	subs	r3, r1, r3
 800c856:	0c00      	lsrs	r0, r0, #16
 800c858:	4463      	add	r3, ip
 800c85a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c85e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c862:	b29b      	uxth	r3, r3
 800c864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c868:	4576      	cmp	r6, lr
 800c86a:	f849 3b04 	str.w	r3, [r9], #4
 800c86e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c872:	d8e5      	bhi.n	800c840 <__mdiff+0x88>
 800c874:	1b33      	subs	r3, r6, r4
 800c876:	3b15      	subs	r3, #21
 800c878:	f023 0303 	bic.w	r3, r3, #3
 800c87c:	3415      	adds	r4, #21
 800c87e:	3304      	adds	r3, #4
 800c880:	42a6      	cmp	r6, r4
 800c882:	bf38      	it	cc
 800c884:	2304      	movcc	r3, #4
 800c886:	441d      	add	r5, r3
 800c888:	445b      	add	r3, fp
 800c88a:	461e      	mov	r6, r3
 800c88c:	462c      	mov	r4, r5
 800c88e:	4544      	cmp	r4, r8
 800c890:	d30e      	bcc.n	800c8b0 <__mdiff+0xf8>
 800c892:	f108 0103 	add.w	r1, r8, #3
 800c896:	1b49      	subs	r1, r1, r5
 800c898:	f021 0103 	bic.w	r1, r1, #3
 800c89c:	3d03      	subs	r5, #3
 800c89e:	45a8      	cmp	r8, r5
 800c8a0:	bf38      	it	cc
 800c8a2:	2100      	movcc	r1, #0
 800c8a4:	440b      	add	r3, r1
 800c8a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8aa:	b191      	cbz	r1, 800c8d2 <__mdiff+0x11a>
 800c8ac:	6117      	str	r7, [r2, #16]
 800c8ae:	e79d      	b.n	800c7ec <__mdiff+0x34>
 800c8b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8b4:	46e6      	mov	lr, ip
 800c8b6:	0c08      	lsrs	r0, r1, #16
 800c8b8:	fa1c fc81 	uxtah	ip, ip, r1
 800c8bc:	4471      	add	r1, lr
 800c8be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8c2:	b289      	uxth	r1, r1
 800c8c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8c8:	f846 1b04 	str.w	r1, [r6], #4
 800c8cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8d0:	e7dd      	b.n	800c88e <__mdiff+0xd6>
 800c8d2:	3f01      	subs	r7, #1
 800c8d4:	e7e7      	b.n	800c8a6 <__mdiff+0xee>
 800c8d6:	bf00      	nop
 800c8d8:	0800d55d 	.word	0x0800d55d
 800c8dc:	0800d56e 	.word	0x0800d56e

0800c8e0 <__d2b>:
 800c8e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8e4:	460f      	mov	r7, r1
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	ec59 8b10 	vmov	r8, r9, d0
 800c8ec:	4616      	mov	r6, r2
 800c8ee:	f7ff fcd5 	bl	800c29c <_Balloc>
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	b930      	cbnz	r0, 800c904 <__d2b+0x24>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b23      	ldr	r3, [pc, #140]	@ (800c988 <__d2b+0xa8>)
 800c8fa:	4824      	ldr	r0, [pc, #144]	@ (800c98c <__d2b+0xac>)
 800c8fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c900:	f000 faf8 	bl	800cef4 <__assert_func>
 800c904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c90c:	b10d      	cbz	r5, 800c912 <__d2b+0x32>
 800c90e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	f1b8 0300 	subs.w	r3, r8, #0
 800c918:	d023      	beq.n	800c962 <__d2b+0x82>
 800c91a:	4668      	mov	r0, sp
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	f7ff fd84 	bl	800c42a <__lo0bits>
 800c922:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c926:	b1d0      	cbz	r0, 800c95e <__d2b+0x7e>
 800c928:	f1c0 0320 	rsb	r3, r0, #32
 800c92c:	fa02 f303 	lsl.w	r3, r2, r3
 800c930:	430b      	orrs	r3, r1
 800c932:	40c2      	lsrs	r2, r0
 800c934:	6163      	str	r3, [r4, #20]
 800c936:	9201      	str	r2, [sp, #4]
 800c938:	9b01      	ldr	r3, [sp, #4]
 800c93a:	61a3      	str	r3, [r4, #24]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bf0c      	ite	eq
 800c940:	2201      	moveq	r2, #1
 800c942:	2202      	movne	r2, #2
 800c944:	6122      	str	r2, [r4, #16]
 800c946:	b1a5      	cbz	r5, 800c972 <__d2b+0x92>
 800c948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c94c:	4405      	add	r5, r0
 800c94e:	603d      	str	r5, [r7, #0]
 800c950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c954:	6030      	str	r0, [r6, #0]
 800c956:	4620      	mov	r0, r4
 800c958:	b003      	add	sp, #12
 800c95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c95e:	6161      	str	r1, [r4, #20]
 800c960:	e7ea      	b.n	800c938 <__d2b+0x58>
 800c962:	a801      	add	r0, sp, #4
 800c964:	f7ff fd61 	bl	800c42a <__lo0bits>
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	6163      	str	r3, [r4, #20]
 800c96c:	3020      	adds	r0, #32
 800c96e:	2201      	movs	r2, #1
 800c970:	e7e8      	b.n	800c944 <__d2b+0x64>
 800c972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c97a:	6038      	str	r0, [r7, #0]
 800c97c:	6918      	ldr	r0, [r3, #16]
 800c97e:	f7ff fd35 	bl	800c3ec <__hi0bits>
 800c982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c986:	e7e5      	b.n	800c954 <__d2b+0x74>
 800c988:	0800d55d 	.word	0x0800d55d
 800c98c:	0800d56e 	.word	0x0800d56e

0800c990 <__ssputs_r>:
 800c990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c994:	688e      	ldr	r6, [r1, #8]
 800c996:	461f      	mov	r7, r3
 800c998:	42be      	cmp	r6, r7
 800c99a:	680b      	ldr	r3, [r1, #0]
 800c99c:	4682      	mov	sl, r0
 800c99e:	460c      	mov	r4, r1
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	d82d      	bhi.n	800ca00 <__ssputs_r+0x70>
 800c9a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c9ac:	d026      	beq.n	800c9fc <__ssputs_r+0x6c>
 800c9ae:	6965      	ldr	r5, [r4, #20]
 800c9b0:	6909      	ldr	r1, [r1, #16]
 800c9b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9b6:	eba3 0901 	sub.w	r9, r3, r1
 800c9ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9be:	1c7b      	adds	r3, r7, #1
 800c9c0:	444b      	add	r3, r9
 800c9c2:	106d      	asrs	r5, r5, #1
 800c9c4:	429d      	cmp	r5, r3
 800c9c6:	bf38      	it	cc
 800c9c8:	461d      	movcc	r5, r3
 800c9ca:	0553      	lsls	r3, r2, #21
 800c9cc:	d527      	bpl.n	800ca1e <__ssputs_r+0x8e>
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	f7ff fbd8 	bl	800c184 <_malloc_r>
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	b360      	cbz	r0, 800ca32 <__ssputs_r+0xa2>
 800c9d8:	6921      	ldr	r1, [r4, #16]
 800c9da:	464a      	mov	r2, r9
 800c9dc:	f7fe fd69 	bl	800b4b2 <memcpy>
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	6126      	str	r6, [r4, #16]
 800c9ee:	6165      	str	r5, [r4, #20]
 800c9f0:	444e      	add	r6, r9
 800c9f2:	eba5 0509 	sub.w	r5, r5, r9
 800c9f6:	6026      	str	r6, [r4, #0]
 800c9f8:	60a5      	str	r5, [r4, #8]
 800c9fa:	463e      	mov	r6, r7
 800c9fc:	42be      	cmp	r6, r7
 800c9fe:	d900      	bls.n	800ca02 <__ssputs_r+0x72>
 800ca00:	463e      	mov	r6, r7
 800ca02:	6820      	ldr	r0, [r4, #0]
 800ca04:	4632      	mov	r2, r6
 800ca06:	4641      	mov	r1, r8
 800ca08:	f000 fa28 	bl	800ce5c <memmove>
 800ca0c:	68a3      	ldr	r3, [r4, #8]
 800ca0e:	1b9b      	subs	r3, r3, r6
 800ca10:	60a3      	str	r3, [r4, #8]
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	4433      	add	r3, r6
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1e:	462a      	mov	r2, r5
 800ca20:	f000 faac 	bl	800cf7c <_realloc_r>
 800ca24:	4606      	mov	r6, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d1e0      	bne.n	800c9ec <__ssputs_r+0x5c>
 800ca2a:	6921      	ldr	r1, [r4, #16]
 800ca2c:	4650      	mov	r0, sl
 800ca2e:	f7ff fb35 	bl	800c09c <_free_r>
 800ca32:	230c      	movs	r3, #12
 800ca34:	f8ca 3000 	str.w	r3, [sl]
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	e7e9      	b.n	800ca1a <__ssputs_r+0x8a>
	...

0800ca48 <_svfiprintf_r>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	4698      	mov	r8, r3
 800ca4e:	898b      	ldrh	r3, [r1, #12]
 800ca50:	061b      	lsls	r3, r3, #24
 800ca52:	b09d      	sub	sp, #116	@ 0x74
 800ca54:	4607      	mov	r7, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	4614      	mov	r4, r2
 800ca5a:	d510      	bpl.n	800ca7e <_svfiprintf_r+0x36>
 800ca5c:	690b      	ldr	r3, [r1, #16]
 800ca5e:	b973      	cbnz	r3, 800ca7e <_svfiprintf_r+0x36>
 800ca60:	2140      	movs	r1, #64	@ 0x40
 800ca62:	f7ff fb8f 	bl	800c184 <_malloc_r>
 800ca66:	6028      	str	r0, [r5, #0]
 800ca68:	6128      	str	r0, [r5, #16]
 800ca6a:	b930      	cbnz	r0, 800ca7a <_svfiprintf_r+0x32>
 800ca6c:	230c      	movs	r3, #12
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	f04f 30ff 	mov.w	r0, #4294967295
 800ca74:	b01d      	add	sp, #116	@ 0x74
 800ca76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7a:	2340      	movs	r3, #64	@ 0x40
 800ca7c:	616b      	str	r3, [r5, #20]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca82:	2320      	movs	r3, #32
 800ca84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca8c:	2330      	movs	r3, #48	@ 0x30
 800ca8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc2c <_svfiprintf_r+0x1e4>
 800ca92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca96:	f04f 0901 	mov.w	r9, #1
 800ca9a:	4623      	mov	r3, r4
 800ca9c:	469a      	mov	sl, r3
 800ca9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa2:	b10a      	cbz	r2, 800caa8 <_svfiprintf_r+0x60>
 800caa4:	2a25      	cmp	r2, #37	@ 0x25
 800caa6:	d1f9      	bne.n	800ca9c <_svfiprintf_r+0x54>
 800caa8:	ebba 0b04 	subs.w	fp, sl, r4
 800caac:	d00b      	beq.n	800cac6 <_svfiprintf_r+0x7e>
 800caae:	465b      	mov	r3, fp
 800cab0:	4622      	mov	r2, r4
 800cab2:	4629      	mov	r1, r5
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7ff ff6b 	bl	800c990 <__ssputs_r>
 800caba:	3001      	adds	r0, #1
 800cabc:	f000 80a7 	beq.w	800cc0e <_svfiprintf_r+0x1c6>
 800cac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cac2:	445a      	add	r2, fp
 800cac4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cac6:	f89a 3000 	ldrb.w	r3, [sl]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 809f 	beq.w	800cc0e <_svfiprintf_r+0x1c6>
 800cad0:	2300      	movs	r3, #0
 800cad2:	f04f 32ff 	mov.w	r2, #4294967295
 800cad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cada:	f10a 0a01 	add.w	sl, sl, #1
 800cade:	9304      	str	r3, [sp, #16]
 800cae0:	9307      	str	r3, [sp, #28]
 800cae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cae6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cae8:	4654      	mov	r4, sl
 800caea:	2205      	movs	r2, #5
 800caec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf0:	484e      	ldr	r0, [pc, #312]	@ (800cc2c <_svfiprintf_r+0x1e4>)
 800caf2:	f7f3 fbf5 	bl	80002e0 <memchr>
 800caf6:	9a04      	ldr	r2, [sp, #16]
 800caf8:	b9d8      	cbnz	r0, 800cb32 <_svfiprintf_r+0xea>
 800cafa:	06d0      	lsls	r0, r2, #27
 800cafc:	bf44      	itt	mi
 800cafe:	2320      	movmi	r3, #32
 800cb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb04:	0711      	lsls	r1, r2, #28
 800cb06:	bf44      	itt	mi
 800cb08:	232b      	movmi	r3, #43	@ 0x2b
 800cb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb12:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb14:	d015      	beq.n	800cb42 <_svfiprintf_r+0xfa>
 800cb16:	9a07      	ldr	r2, [sp, #28]
 800cb18:	4654      	mov	r4, sl
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f04f 0c0a 	mov.w	ip, #10
 800cb20:	4621      	mov	r1, r4
 800cb22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb26:	3b30      	subs	r3, #48	@ 0x30
 800cb28:	2b09      	cmp	r3, #9
 800cb2a:	d94b      	bls.n	800cbc4 <_svfiprintf_r+0x17c>
 800cb2c:	b1b0      	cbz	r0, 800cb5c <_svfiprintf_r+0x114>
 800cb2e:	9207      	str	r2, [sp, #28]
 800cb30:	e014      	b.n	800cb5c <_svfiprintf_r+0x114>
 800cb32:	eba0 0308 	sub.w	r3, r0, r8
 800cb36:	fa09 f303 	lsl.w	r3, r9, r3
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	9304      	str	r3, [sp, #16]
 800cb3e:	46a2      	mov	sl, r4
 800cb40:	e7d2      	b.n	800cae8 <_svfiprintf_r+0xa0>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	1d19      	adds	r1, r3, #4
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	9103      	str	r1, [sp, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	bfbb      	ittet	lt
 800cb4e:	425b      	neglt	r3, r3
 800cb50:	f042 0202 	orrlt.w	r2, r2, #2
 800cb54:	9307      	strge	r3, [sp, #28]
 800cb56:	9307      	strlt	r3, [sp, #28]
 800cb58:	bfb8      	it	lt
 800cb5a:	9204      	strlt	r2, [sp, #16]
 800cb5c:	7823      	ldrb	r3, [r4, #0]
 800cb5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb60:	d10a      	bne.n	800cb78 <_svfiprintf_r+0x130>
 800cb62:	7863      	ldrb	r3, [r4, #1]
 800cb64:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb66:	d132      	bne.n	800cbce <_svfiprintf_r+0x186>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	1d1a      	adds	r2, r3, #4
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	9203      	str	r2, [sp, #12]
 800cb70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb74:	3402      	adds	r4, #2
 800cb76:	9305      	str	r3, [sp, #20]
 800cb78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc3c <_svfiprintf_r+0x1f4>
 800cb7c:	7821      	ldrb	r1, [r4, #0]
 800cb7e:	2203      	movs	r2, #3
 800cb80:	4650      	mov	r0, sl
 800cb82:	f7f3 fbad 	bl	80002e0 <memchr>
 800cb86:	b138      	cbz	r0, 800cb98 <_svfiprintf_r+0x150>
 800cb88:	9b04      	ldr	r3, [sp, #16]
 800cb8a:	eba0 000a 	sub.w	r0, r0, sl
 800cb8e:	2240      	movs	r2, #64	@ 0x40
 800cb90:	4082      	lsls	r2, r0
 800cb92:	4313      	orrs	r3, r2
 800cb94:	3401      	adds	r4, #1
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9c:	4824      	ldr	r0, [pc, #144]	@ (800cc30 <_svfiprintf_r+0x1e8>)
 800cb9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cba2:	2206      	movs	r2, #6
 800cba4:	f7f3 fb9c 	bl	80002e0 <memchr>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d036      	beq.n	800cc1a <_svfiprintf_r+0x1d2>
 800cbac:	4b21      	ldr	r3, [pc, #132]	@ (800cc34 <_svfiprintf_r+0x1ec>)
 800cbae:	bb1b      	cbnz	r3, 800cbf8 <_svfiprintf_r+0x1b0>
 800cbb0:	9b03      	ldr	r3, [sp, #12]
 800cbb2:	3307      	adds	r3, #7
 800cbb4:	f023 0307 	bic.w	r3, r3, #7
 800cbb8:	3308      	adds	r3, #8
 800cbba:	9303      	str	r3, [sp, #12]
 800cbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbbe:	4433      	add	r3, r6
 800cbc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc2:	e76a      	b.n	800ca9a <_svfiprintf_r+0x52>
 800cbc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc8:	460c      	mov	r4, r1
 800cbca:	2001      	movs	r0, #1
 800cbcc:	e7a8      	b.n	800cb20 <_svfiprintf_r+0xd8>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	3401      	adds	r4, #1
 800cbd2:	9305      	str	r3, [sp, #20]
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	f04f 0c0a 	mov.w	ip, #10
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe0:	3a30      	subs	r2, #48	@ 0x30
 800cbe2:	2a09      	cmp	r2, #9
 800cbe4:	d903      	bls.n	800cbee <_svfiprintf_r+0x1a6>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0c6      	beq.n	800cb78 <_svfiprintf_r+0x130>
 800cbea:	9105      	str	r1, [sp, #20]
 800cbec:	e7c4      	b.n	800cb78 <_svfiprintf_r+0x130>
 800cbee:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e7f0      	b.n	800cbda <_svfiprintf_r+0x192>
 800cbf8:	ab03      	add	r3, sp, #12
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cc38 <_svfiprintf_r+0x1f0>)
 800cc00:	a904      	add	r1, sp, #16
 800cc02:	4638      	mov	r0, r7
 800cc04:	f7fd fdb8 	bl	800a778 <_printf_float>
 800cc08:	1c42      	adds	r2, r0, #1
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	d1d6      	bne.n	800cbbc <_svfiprintf_r+0x174>
 800cc0e:	89ab      	ldrh	r3, [r5, #12]
 800cc10:	065b      	lsls	r3, r3, #25
 800cc12:	f53f af2d 	bmi.w	800ca70 <_svfiprintf_r+0x28>
 800cc16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc18:	e72c      	b.n	800ca74 <_svfiprintf_r+0x2c>
 800cc1a:	ab03      	add	r3, sp, #12
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	462a      	mov	r2, r5
 800cc20:	4b05      	ldr	r3, [pc, #20]	@ (800cc38 <_svfiprintf_r+0x1f0>)
 800cc22:	a904      	add	r1, sp, #16
 800cc24:	4638      	mov	r0, r7
 800cc26:	f7fe f82f 	bl	800ac88 <_printf_i>
 800cc2a:	e7ed      	b.n	800cc08 <_svfiprintf_r+0x1c0>
 800cc2c:	0800d5c7 	.word	0x0800d5c7
 800cc30:	0800d5d1 	.word	0x0800d5d1
 800cc34:	0800a779 	.word	0x0800a779
 800cc38:	0800c991 	.word	0x0800c991
 800cc3c:	0800d5cd 	.word	0x0800d5cd

0800cc40 <__sflush_r>:
 800cc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc48:	0716      	lsls	r6, r2, #28
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	460c      	mov	r4, r1
 800cc4e:	d454      	bmi.n	800ccfa <__sflush_r+0xba>
 800cc50:	684b      	ldr	r3, [r1, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	dc02      	bgt.n	800cc5c <__sflush_r+0x1c>
 800cc56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dd48      	ble.n	800ccee <__sflush_r+0xae>
 800cc5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc5e:	2e00      	cmp	r6, #0
 800cc60:	d045      	beq.n	800ccee <__sflush_r+0xae>
 800cc62:	2300      	movs	r3, #0
 800cc64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc68:	682f      	ldr	r7, [r5, #0]
 800cc6a:	6a21      	ldr	r1, [r4, #32]
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	d030      	beq.n	800ccd2 <__sflush_r+0x92>
 800cc70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	0759      	lsls	r1, r3, #29
 800cc76:	d505      	bpl.n	800cc84 <__sflush_r+0x44>
 800cc78:	6863      	ldr	r3, [r4, #4]
 800cc7a:	1ad2      	subs	r2, r2, r3
 800cc7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc7e:	b10b      	cbz	r3, 800cc84 <__sflush_r+0x44>
 800cc80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc82:	1ad2      	subs	r2, r2, r3
 800cc84:	2300      	movs	r3, #0
 800cc86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc88:	6a21      	ldr	r1, [r4, #32]
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	47b0      	blx	r6
 800cc8e:	1c43      	adds	r3, r0, #1
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	d106      	bne.n	800cca2 <__sflush_r+0x62>
 800cc94:	6829      	ldr	r1, [r5, #0]
 800cc96:	291d      	cmp	r1, #29
 800cc98:	d82b      	bhi.n	800ccf2 <__sflush_r+0xb2>
 800cc9a:	4a2a      	ldr	r2, [pc, #168]	@ (800cd44 <__sflush_r+0x104>)
 800cc9c:	40ca      	lsrs	r2, r1
 800cc9e:	07d6      	lsls	r6, r2, #31
 800cca0:	d527      	bpl.n	800ccf2 <__sflush_r+0xb2>
 800cca2:	2200      	movs	r2, #0
 800cca4:	6062      	str	r2, [r4, #4]
 800cca6:	04d9      	lsls	r1, r3, #19
 800cca8:	6922      	ldr	r2, [r4, #16]
 800ccaa:	6022      	str	r2, [r4, #0]
 800ccac:	d504      	bpl.n	800ccb8 <__sflush_r+0x78>
 800ccae:	1c42      	adds	r2, r0, #1
 800ccb0:	d101      	bne.n	800ccb6 <__sflush_r+0x76>
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	b903      	cbnz	r3, 800ccb8 <__sflush_r+0x78>
 800ccb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ccb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccba:	602f      	str	r7, [r5, #0]
 800ccbc:	b1b9      	cbz	r1, 800ccee <__sflush_r+0xae>
 800ccbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccc2:	4299      	cmp	r1, r3
 800ccc4:	d002      	beq.n	800cccc <__sflush_r+0x8c>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f7ff f9e8 	bl	800c09c <_free_r>
 800cccc:	2300      	movs	r3, #0
 800ccce:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccd0:	e00d      	b.n	800ccee <__sflush_r+0xae>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	47b0      	blx	r6
 800ccd8:	4602      	mov	r2, r0
 800ccda:	1c50      	adds	r0, r2, #1
 800ccdc:	d1c9      	bne.n	800cc72 <__sflush_r+0x32>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d0c6      	beq.n	800cc72 <__sflush_r+0x32>
 800cce4:	2b1d      	cmp	r3, #29
 800cce6:	d001      	beq.n	800ccec <__sflush_r+0xac>
 800cce8:	2b16      	cmp	r3, #22
 800ccea:	d11e      	bne.n	800cd2a <__sflush_r+0xea>
 800ccec:	602f      	str	r7, [r5, #0]
 800ccee:	2000      	movs	r0, #0
 800ccf0:	e022      	b.n	800cd38 <__sflush_r+0xf8>
 800ccf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	e01b      	b.n	800cd32 <__sflush_r+0xf2>
 800ccfa:	690f      	ldr	r7, [r1, #16]
 800ccfc:	2f00      	cmp	r7, #0
 800ccfe:	d0f6      	beq.n	800ccee <__sflush_r+0xae>
 800cd00:	0793      	lsls	r3, r2, #30
 800cd02:	680e      	ldr	r6, [r1, #0]
 800cd04:	bf08      	it	eq
 800cd06:	694b      	ldreq	r3, [r1, #20]
 800cd08:	600f      	str	r7, [r1, #0]
 800cd0a:	bf18      	it	ne
 800cd0c:	2300      	movne	r3, #0
 800cd0e:	eba6 0807 	sub.w	r8, r6, r7
 800cd12:	608b      	str	r3, [r1, #8]
 800cd14:	f1b8 0f00 	cmp.w	r8, #0
 800cd18:	dde9      	ble.n	800ccee <__sflush_r+0xae>
 800cd1a:	6a21      	ldr	r1, [r4, #32]
 800cd1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd1e:	4643      	mov	r3, r8
 800cd20:	463a      	mov	r2, r7
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b0      	blx	r6
 800cd26:	2800      	cmp	r0, #0
 800cd28:	dc08      	bgt.n	800cd3c <__sflush_r+0xfc>
 800cd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	f04f 30ff 	mov.w	r0, #4294967295
 800cd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3c:	4407      	add	r7, r0
 800cd3e:	eba8 0800 	sub.w	r8, r8, r0
 800cd42:	e7e7      	b.n	800cd14 <__sflush_r+0xd4>
 800cd44:	20400001 	.word	0x20400001

0800cd48 <_fflush_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	690b      	ldr	r3, [r1, #16]
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	460c      	mov	r4, r1
 800cd50:	b913      	cbnz	r3, 800cd58 <_fflush_r+0x10>
 800cd52:	2500      	movs	r5, #0
 800cd54:	4628      	mov	r0, r5
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	b118      	cbz	r0, 800cd62 <_fflush_r+0x1a>
 800cd5a:	6a03      	ldr	r3, [r0, #32]
 800cd5c:	b90b      	cbnz	r3, 800cd62 <_fflush_r+0x1a>
 800cd5e:	f7fe f93d 	bl	800afdc <__sinit>
 800cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0f3      	beq.n	800cd52 <_fflush_r+0xa>
 800cd6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd6c:	07d0      	lsls	r0, r2, #31
 800cd6e:	d404      	bmi.n	800cd7a <_fflush_r+0x32>
 800cd70:	0599      	lsls	r1, r3, #22
 800cd72:	d402      	bmi.n	800cd7a <_fflush_r+0x32>
 800cd74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd76:	f7fe fb9a 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7ff ff5f 	bl	800cc40 <__sflush_r>
 800cd82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd84:	07da      	lsls	r2, r3, #31
 800cd86:	4605      	mov	r5, r0
 800cd88:	d4e4      	bmi.n	800cd54 <_fflush_r+0xc>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	059b      	lsls	r3, r3, #22
 800cd8e:	d4e1      	bmi.n	800cd54 <_fflush_r+0xc>
 800cd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd92:	f7fe fb8d 	bl	800b4b0 <__retarget_lock_release_recursive>
 800cd96:	e7dd      	b.n	800cd54 <_fflush_r+0xc>

0800cd98 <__swhatbuf_r>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda0:	2900      	cmp	r1, #0
 800cda2:	b096      	sub	sp, #88	@ 0x58
 800cda4:	4615      	mov	r5, r2
 800cda6:	461e      	mov	r6, r3
 800cda8:	da0d      	bge.n	800cdc6 <__swhatbuf_r+0x2e>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdb0:	f04f 0100 	mov.w	r1, #0
 800cdb4:	bf14      	ite	ne
 800cdb6:	2340      	movne	r3, #64	@ 0x40
 800cdb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	6031      	str	r1, [r6, #0]
 800cdc0:	602b      	str	r3, [r5, #0]
 800cdc2:	b016      	add	sp, #88	@ 0x58
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	466a      	mov	r2, sp
 800cdc8:	f000 f862 	bl	800ce90 <_fstat_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	dbec      	blt.n	800cdaa <__swhatbuf_r+0x12>
 800cdd0:	9901      	ldr	r1, [sp, #4]
 800cdd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdda:	4259      	negs	r1, r3
 800cddc:	4159      	adcs	r1, r3
 800cdde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cde2:	e7eb      	b.n	800cdbc <__swhatbuf_r+0x24>

0800cde4 <__smakebuf_r>:
 800cde4:	898b      	ldrh	r3, [r1, #12]
 800cde6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cde8:	079d      	lsls	r5, r3, #30
 800cdea:	4606      	mov	r6, r0
 800cdec:	460c      	mov	r4, r1
 800cdee:	d507      	bpl.n	800ce00 <__smakebuf_r+0x1c>
 800cdf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	6163      	str	r3, [r4, #20]
 800cdfc:	b003      	add	sp, #12
 800cdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce00:	ab01      	add	r3, sp, #4
 800ce02:	466a      	mov	r2, sp
 800ce04:	f7ff ffc8 	bl	800cd98 <__swhatbuf_r>
 800ce08:	9f00      	ldr	r7, [sp, #0]
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	4639      	mov	r1, r7
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7ff f9b8 	bl	800c184 <_malloc_r>
 800ce14:	b948      	cbnz	r0, 800ce2a <__smakebuf_r+0x46>
 800ce16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1a:	059a      	lsls	r2, r3, #22
 800ce1c:	d4ee      	bmi.n	800cdfc <__smakebuf_r+0x18>
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	f043 0302 	orr.w	r3, r3, #2
 800ce26:	81a3      	strh	r3, [r4, #12]
 800ce28:	e7e2      	b.n	800cdf0 <__smakebuf_r+0xc>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	6020      	str	r0, [r4, #0]
 800ce2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	9b01      	ldr	r3, [sp, #4]
 800ce36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce3a:	b15b      	cbz	r3, 800ce54 <__smakebuf_r+0x70>
 800ce3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce40:	4630      	mov	r0, r6
 800ce42:	f000 f837 	bl	800ceb4 <_isatty_r>
 800ce46:	b128      	cbz	r0, 800ce54 <__smakebuf_r+0x70>
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	f043 0301 	orr.w	r3, r3, #1
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	431d      	orrs	r5, r3
 800ce58:	81a5      	strh	r5, [r4, #12]
 800ce5a:	e7cf      	b.n	800cdfc <__smakebuf_r+0x18>

0800ce5c <memmove>:
 800ce5c:	4288      	cmp	r0, r1
 800ce5e:	b510      	push	{r4, lr}
 800ce60:	eb01 0402 	add.w	r4, r1, r2
 800ce64:	d902      	bls.n	800ce6c <memmove+0x10>
 800ce66:	4284      	cmp	r4, r0
 800ce68:	4623      	mov	r3, r4
 800ce6a:	d807      	bhi.n	800ce7c <memmove+0x20>
 800ce6c:	1e43      	subs	r3, r0, #1
 800ce6e:	42a1      	cmp	r1, r4
 800ce70:	d008      	beq.n	800ce84 <memmove+0x28>
 800ce72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce7a:	e7f8      	b.n	800ce6e <memmove+0x12>
 800ce7c:	4402      	add	r2, r0
 800ce7e:	4601      	mov	r1, r0
 800ce80:	428a      	cmp	r2, r1
 800ce82:	d100      	bne.n	800ce86 <memmove+0x2a>
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce8e:	e7f7      	b.n	800ce80 <memmove+0x24>

0800ce90 <_fstat_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d07      	ldr	r5, [pc, #28]	@ (800ceb0 <_fstat_r+0x20>)
 800ce94:	2300      	movs	r3, #0
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	602b      	str	r3, [r5, #0]
 800ce9e:	f7f5 fc3c 	bl	800271a <_fstat>
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	d102      	bne.n	800ceac <_fstat_r+0x1c>
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	b103      	cbz	r3, 800ceac <_fstat_r+0x1c>
 800ceaa:	6023      	str	r3, [r4, #0]
 800ceac:	bd38      	pop	{r3, r4, r5, pc}
 800ceae:	bf00      	nop
 800ceb0:	240057b0 	.word	0x240057b0

0800ceb4 <_isatty_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d06      	ldr	r5, [pc, #24]	@ (800ced0 <_isatty_r+0x1c>)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	4608      	mov	r0, r1
 800cebe:	602b      	str	r3, [r5, #0]
 800cec0:	f7f5 fc30 	bl	8002724 <_isatty>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_isatty_r+0x1a>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b103      	cbz	r3, 800cece <_isatty_r+0x1a>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	240057b0 	.word	0x240057b0

0800ced4 <_sbrk_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d06      	ldr	r5, [pc, #24]	@ (800cef0 <_sbrk_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7f5 fc24 	bl	800272c <_sbrk>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_sbrk_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_sbrk_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	240057b0 	.word	0x240057b0

0800cef4 <__assert_func>:
 800cef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef6:	4614      	mov	r4, r2
 800cef8:	461a      	mov	r2, r3
 800cefa:	4b09      	ldr	r3, [pc, #36]	@ (800cf20 <__assert_func+0x2c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4605      	mov	r5, r0
 800cf00:	68d8      	ldr	r0, [r3, #12]
 800cf02:	b14c      	cbz	r4, 800cf18 <__assert_func+0x24>
 800cf04:	4b07      	ldr	r3, [pc, #28]	@ (800cf24 <__assert_func+0x30>)
 800cf06:	9100      	str	r1, [sp, #0]
 800cf08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf0c:	4906      	ldr	r1, [pc, #24]	@ (800cf28 <__assert_func+0x34>)
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f000 f870 	bl	800cff4 <fiprintf>
 800cf14:	f000 f880 	bl	800d018 <abort>
 800cf18:	4b04      	ldr	r3, [pc, #16]	@ (800cf2c <__assert_func+0x38>)
 800cf1a:	461c      	mov	r4, r3
 800cf1c:	e7f3      	b.n	800cf06 <__assert_func+0x12>
 800cf1e:	bf00      	nop
 800cf20:	24000090 	.word	0x24000090
 800cf24:	0800d5e0 	.word	0x0800d5e0
 800cf28:	0800d5ed 	.word	0x0800d5ed
 800cf2c:	0800d61b 	.word	0x0800d61b

0800cf30 <_calloc_r>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	fba1 5402 	umull	r5, r4, r1, r2
 800cf36:	b934      	cbnz	r4, 800cf46 <_calloc_r+0x16>
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7ff f923 	bl	800c184 <_malloc_r>
 800cf3e:	4606      	mov	r6, r0
 800cf40:	b928      	cbnz	r0, 800cf4e <_calloc_r+0x1e>
 800cf42:	4630      	mov	r0, r6
 800cf44:	bd70      	pop	{r4, r5, r6, pc}
 800cf46:	220c      	movs	r2, #12
 800cf48:	6002      	str	r2, [r0, #0]
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	e7f9      	b.n	800cf42 <_calloc_r+0x12>
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4621      	mov	r1, r4
 800cf52:	f7fe f9d1 	bl	800b2f8 <memset>
 800cf56:	e7f4      	b.n	800cf42 <_calloc_r+0x12>

0800cf58 <__ascii_mbtowc>:
 800cf58:	b082      	sub	sp, #8
 800cf5a:	b901      	cbnz	r1, 800cf5e <__ascii_mbtowc+0x6>
 800cf5c:	a901      	add	r1, sp, #4
 800cf5e:	b142      	cbz	r2, 800cf72 <__ascii_mbtowc+0x1a>
 800cf60:	b14b      	cbz	r3, 800cf76 <__ascii_mbtowc+0x1e>
 800cf62:	7813      	ldrb	r3, [r2, #0]
 800cf64:	600b      	str	r3, [r1, #0]
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	1e10      	subs	r0, r2, #0
 800cf6a:	bf18      	it	ne
 800cf6c:	2001      	movne	r0, #1
 800cf6e:	b002      	add	sp, #8
 800cf70:	4770      	bx	lr
 800cf72:	4610      	mov	r0, r2
 800cf74:	e7fb      	b.n	800cf6e <__ascii_mbtowc+0x16>
 800cf76:	f06f 0001 	mvn.w	r0, #1
 800cf7a:	e7f8      	b.n	800cf6e <__ascii_mbtowc+0x16>

0800cf7c <_realloc_r>:
 800cf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf80:	4607      	mov	r7, r0
 800cf82:	4614      	mov	r4, r2
 800cf84:	460d      	mov	r5, r1
 800cf86:	b921      	cbnz	r1, 800cf92 <_realloc_r+0x16>
 800cf88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	f7ff b8f9 	b.w	800c184 <_malloc_r>
 800cf92:	b92a      	cbnz	r2, 800cfa0 <_realloc_r+0x24>
 800cf94:	f7ff f882 	bl	800c09c <_free_r>
 800cf98:	4625      	mov	r5, r4
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa0:	f000 f841 	bl	800d026 <_malloc_usable_size_r>
 800cfa4:	4284      	cmp	r4, r0
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	d802      	bhi.n	800cfb0 <_realloc_r+0x34>
 800cfaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfae:	d8f4      	bhi.n	800cf9a <_realloc_r+0x1e>
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f7ff f8e6 	bl	800c184 <_malloc_r>
 800cfb8:	4680      	mov	r8, r0
 800cfba:	b908      	cbnz	r0, 800cfc0 <_realloc_r+0x44>
 800cfbc:	4645      	mov	r5, r8
 800cfbe:	e7ec      	b.n	800cf9a <_realloc_r+0x1e>
 800cfc0:	42b4      	cmp	r4, r6
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	bf28      	it	cs
 800cfc8:	4632      	movcs	r2, r6
 800cfca:	f7fe fa72 	bl	800b4b2 <memcpy>
 800cfce:	4629      	mov	r1, r5
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7ff f863 	bl	800c09c <_free_r>
 800cfd6:	e7f1      	b.n	800cfbc <_realloc_r+0x40>

0800cfd8 <__ascii_wctomb>:
 800cfd8:	4603      	mov	r3, r0
 800cfda:	4608      	mov	r0, r1
 800cfdc:	b141      	cbz	r1, 800cff0 <__ascii_wctomb+0x18>
 800cfde:	2aff      	cmp	r2, #255	@ 0xff
 800cfe0:	d904      	bls.n	800cfec <__ascii_wctomb+0x14>
 800cfe2:	228a      	movs	r2, #138	@ 0x8a
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfea:	4770      	bx	lr
 800cfec:	700a      	strb	r2, [r1, #0]
 800cfee:	2001      	movs	r0, #1
 800cff0:	4770      	bx	lr
	...

0800cff4 <fiprintf>:
 800cff4:	b40e      	push	{r1, r2, r3}
 800cff6:	b503      	push	{r0, r1, lr}
 800cff8:	4601      	mov	r1, r0
 800cffa:	ab03      	add	r3, sp, #12
 800cffc:	4805      	ldr	r0, [pc, #20]	@ (800d014 <fiprintf+0x20>)
 800cffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d002:	6800      	ldr	r0, [r0, #0]
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	f000 f83f 	bl	800d088 <_vfiprintf_r>
 800d00a:	b002      	add	sp, #8
 800d00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d010:	b003      	add	sp, #12
 800d012:	4770      	bx	lr
 800d014:	24000090 	.word	0x24000090

0800d018 <abort>:
 800d018:	b508      	push	{r3, lr}
 800d01a:	2006      	movs	r0, #6
 800d01c:	f000 f974 	bl	800d308 <raise>
 800d020:	2001      	movs	r0, #1
 800d022:	f7f5 fb55 	bl	80026d0 <_exit>

0800d026 <_malloc_usable_size_r>:
 800d026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d02a:	1f18      	subs	r0, r3, #4
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfbc      	itt	lt
 800d030:	580b      	ldrlt	r3, [r1, r0]
 800d032:	18c0      	addlt	r0, r0, r3
 800d034:	4770      	bx	lr

0800d036 <__sfputc_r>:
 800d036:	6893      	ldr	r3, [r2, #8]
 800d038:	3b01      	subs	r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	b410      	push	{r4}
 800d03e:	6093      	str	r3, [r2, #8]
 800d040:	da08      	bge.n	800d054 <__sfputc_r+0x1e>
 800d042:	6994      	ldr	r4, [r2, #24]
 800d044:	42a3      	cmp	r3, r4
 800d046:	db01      	blt.n	800d04c <__sfputc_r+0x16>
 800d048:	290a      	cmp	r1, #10
 800d04a:	d103      	bne.n	800d054 <__sfputc_r+0x1e>
 800d04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d050:	f7fe b8bd 	b.w	800b1ce <__swbuf_r>
 800d054:	6813      	ldr	r3, [r2, #0]
 800d056:	1c58      	adds	r0, r3, #1
 800d058:	6010      	str	r0, [r2, #0]
 800d05a:	7019      	strb	r1, [r3, #0]
 800d05c:	4608      	mov	r0, r1
 800d05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <__sfputs_r>:
 800d064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d066:	4606      	mov	r6, r0
 800d068:	460f      	mov	r7, r1
 800d06a:	4614      	mov	r4, r2
 800d06c:	18d5      	adds	r5, r2, r3
 800d06e:	42ac      	cmp	r4, r5
 800d070:	d101      	bne.n	800d076 <__sfputs_r+0x12>
 800d072:	2000      	movs	r0, #0
 800d074:	e007      	b.n	800d086 <__sfputs_r+0x22>
 800d076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07a:	463a      	mov	r2, r7
 800d07c:	4630      	mov	r0, r6
 800d07e:	f7ff ffda 	bl	800d036 <__sfputc_r>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d1f3      	bne.n	800d06e <__sfputs_r+0xa>
 800d086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d088 <_vfiprintf_r>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	460d      	mov	r5, r1
 800d08e:	b09d      	sub	sp, #116	@ 0x74
 800d090:	4614      	mov	r4, r2
 800d092:	4698      	mov	r8, r3
 800d094:	4606      	mov	r6, r0
 800d096:	b118      	cbz	r0, 800d0a0 <_vfiprintf_r+0x18>
 800d098:	6a03      	ldr	r3, [r0, #32]
 800d09a:	b90b      	cbnz	r3, 800d0a0 <_vfiprintf_r+0x18>
 800d09c:	f7fd ff9e 	bl	800afdc <__sinit>
 800d0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0a2:	07d9      	lsls	r1, r3, #31
 800d0a4:	d405      	bmi.n	800d0b2 <_vfiprintf_r+0x2a>
 800d0a6:	89ab      	ldrh	r3, [r5, #12]
 800d0a8:	059a      	lsls	r2, r3, #22
 800d0aa:	d402      	bmi.n	800d0b2 <_vfiprintf_r+0x2a>
 800d0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ae:	f7fe f9fe 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800d0b2:	89ab      	ldrh	r3, [r5, #12]
 800d0b4:	071b      	lsls	r3, r3, #28
 800d0b6:	d501      	bpl.n	800d0bc <_vfiprintf_r+0x34>
 800d0b8:	692b      	ldr	r3, [r5, #16]
 800d0ba:	b99b      	cbnz	r3, 800d0e4 <_vfiprintf_r+0x5c>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7fe f8c4 	bl	800b24c <__swsetup_r>
 800d0c4:	b170      	cbz	r0, 800d0e4 <_vfiprintf_r+0x5c>
 800d0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0c8:	07dc      	lsls	r4, r3, #31
 800d0ca:	d504      	bpl.n	800d0d6 <_vfiprintf_r+0x4e>
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d0:	b01d      	add	sp, #116	@ 0x74
 800d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d6:	89ab      	ldrh	r3, [r5, #12]
 800d0d8:	0598      	lsls	r0, r3, #22
 800d0da:	d4f7      	bmi.n	800d0cc <_vfiprintf_r+0x44>
 800d0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0de:	f7fe f9e7 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d0e2:	e7f3      	b.n	800d0cc <_vfiprintf_r+0x44>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0e8:	2320      	movs	r3, #32
 800d0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f2:	2330      	movs	r3, #48	@ 0x30
 800d0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2a4 <_vfiprintf_r+0x21c>
 800d0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0fc:	f04f 0901 	mov.w	r9, #1
 800d100:	4623      	mov	r3, r4
 800d102:	469a      	mov	sl, r3
 800d104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d108:	b10a      	cbz	r2, 800d10e <_vfiprintf_r+0x86>
 800d10a:	2a25      	cmp	r2, #37	@ 0x25
 800d10c:	d1f9      	bne.n	800d102 <_vfiprintf_r+0x7a>
 800d10e:	ebba 0b04 	subs.w	fp, sl, r4
 800d112:	d00b      	beq.n	800d12c <_vfiprintf_r+0xa4>
 800d114:	465b      	mov	r3, fp
 800d116:	4622      	mov	r2, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7ff ffa2 	bl	800d064 <__sfputs_r>
 800d120:	3001      	adds	r0, #1
 800d122:	f000 80a7 	beq.w	800d274 <_vfiprintf_r+0x1ec>
 800d126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d128:	445a      	add	r2, fp
 800d12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d12c:	f89a 3000 	ldrb.w	r3, [sl]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 809f 	beq.w	800d274 <_vfiprintf_r+0x1ec>
 800d136:	2300      	movs	r3, #0
 800d138:	f04f 32ff 	mov.w	r2, #4294967295
 800d13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d140:	f10a 0a01 	add.w	sl, sl, #1
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	9307      	str	r3, [sp, #28]
 800d148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d14e:	4654      	mov	r4, sl
 800d150:	2205      	movs	r2, #5
 800d152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d156:	4853      	ldr	r0, [pc, #332]	@ (800d2a4 <_vfiprintf_r+0x21c>)
 800d158:	f7f3 f8c2 	bl	80002e0 <memchr>
 800d15c:	9a04      	ldr	r2, [sp, #16]
 800d15e:	b9d8      	cbnz	r0, 800d198 <_vfiprintf_r+0x110>
 800d160:	06d1      	lsls	r1, r2, #27
 800d162:	bf44      	itt	mi
 800d164:	2320      	movmi	r3, #32
 800d166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d16a:	0713      	lsls	r3, r2, #28
 800d16c:	bf44      	itt	mi
 800d16e:	232b      	movmi	r3, #43	@ 0x2b
 800d170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d174:	f89a 3000 	ldrb.w	r3, [sl]
 800d178:	2b2a      	cmp	r3, #42	@ 0x2a
 800d17a:	d015      	beq.n	800d1a8 <_vfiprintf_r+0x120>
 800d17c:	9a07      	ldr	r2, [sp, #28]
 800d17e:	4654      	mov	r4, sl
 800d180:	2000      	movs	r0, #0
 800d182:	f04f 0c0a 	mov.w	ip, #10
 800d186:	4621      	mov	r1, r4
 800d188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d18c:	3b30      	subs	r3, #48	@ 0x30
 800d18e:	2b09      	cmp	r3, #9
 800d190:	d94b      	bls.n	800d22a <_vfiprintf_r+0x1a2>
 800d192:	b1b0      	cbz	r0, 800d1c2 <_vfiprintf_r+0x13a>
 800d194:	9207      	str	r2, [sp, #28]
 800d196:	e014      	b.n	800d1c2 <_vfiprintf_r+0x13a>
 800d198:	eba0 0308 	sub.w	r3, r0, r8
 800d19c:	fa09 f303 	lsl.w	r3, r9, r3
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	9304      	str	r3, [sp, #16]
 800d1a4:	46a2      	mov	sl, r4
 800d1a6:	e7d2      	b.n	800d14e <_vfiprintf_r+0xc6>
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	1d19      	adds	r1, r3, #4
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	9103      	str	r1, [sp, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bfbb      	ittet	lt
 800d1b4:	425b      	neglt	r3, r3
 800d1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ba:	9307      	strge	r3, [sp, #28]
 800d1bc:	9307      	strlt	r3, [sp, #28]
 800d1be:	bfb8      	it	lt
 800d1c0:	9204      	strlt	r2, [sp, #16]
 800d1c2:	7823      	ldrb	r3, [r4, #0]
 800d1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1c6:	d10a      	bne.n	800d1de <_vfiprintf_r+0x156>
 800d1c8:	7863      	ldrb	r3, [r4, #1]
 800d1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1cc:	d132      	bne.n	800d234 <_vfiprintf_r+0x1ac>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	1d1a      	adds	r2, r3, #4
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	9203      	str	r2, [sp, #12]
 800d1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1da:	3402      	adds	r4, #2
 800d1dc:	9305      	str	r3, [sp, #20]
 800d1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2b4 <_vfiprintf_r+0x22c>
 800d1e2:	7821      	ldrb	r1, [r4, #0]
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	4650      	mov	r0, sl
 800d1e8:	f7f3 f87a 	bl	80002e0 <memchr>
 800d1ec:	b138      	cbz	r0, 800d1fe <_vfiprintf_r+0x176>
 800d1ee:	9b04      	ldr	r3, [sp, #16]
 800d1f0:	eba0 000a 	sub.w	r0, r0, sl
 800d1f4:	2240      	movs	r2, #64	@ 0x40
 800d1f6:	4082      	lsls	r2, r0
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	3401      	adds	r4, #1
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d202:	4829      	ldr	r0, [pc, #164]	@ (800d2a8 <_vfiprintf_r+0x220>)
 800d204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d208:	2206      	movs	r2, #6
 800d20a:	f7f3 f869 	bl	80002e0 <memchr>
 800d20e:	2800      	cmp	r0, #0
 800d210:	d03f      	beq.n	800d292 <_vfiprintf_r+0x20a>
 800d212:	4b26      	ldr	r3, [pc, #152]	@ (800d2ac <_vfiprintf_r+0x224>)
 800d214:	bb1b      	cbnz	r3, 800d25e <_vfiprintf_r+0x1d6>
 800d216:	9b03      	ldr	r3, [sp, #12]
 800d218:	3307      	adds	r3, #7
 800d21a:	f023 0307 	bic.w	r3, r3, #7
 800d21e:	3308      	adds	r3, #8
 800d220:	9303      	str	r3, [sp, #12]
 800d222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d224:	443b      	add	r3, r7
 800d226:	9309      	str	r3, [sp, #36]	@ 0x24
 800d228:	e76a      	b.n	800d100 <_vfiprintf_r+0x78>
 800d22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d22e:	460c      	mov	r4, r1
 800d230:	2001      	movs	r0, #1
 800d232:	e7a8      	b.n	800d186 <_vfiprintf_r+0xfe>
 800d234:	2300      	movs	r3, #0
 800d236:	3401      	adds	r4, #1
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	4619      	mov	r1, r3
 800d23c:	f04f 0c0a 	mov.w	ip, #10
 800d240:	4620      	mov	r0, r4
 800d242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d246:	3a30      	subs	r2, #48	@ 0x30
 800d248:	2a09      	cmp	r2, #9
 800d24a:	d903      	bls.n	800d254 <_vfiprintf_r+0x1cc>
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0c6      	beq.n	800d1de <_vfiprintf_r+0x156>
 800d250:	9105      	str	r1, [sp, #20]
 800d252:	e7c4      	b.n	800d1de <_vfiprintf_r+0x156>
 800d254:	fb0c 2101 	mla	r1, ip, r1, r2
 800d258:	4604      	mov	r4, r0
 800d25a:	2301      	movs	r3, #1
 800d25c:	e7f0      	b.n	800d240 <_vfiprintf_r+0x1b8>
 800d25e:	ab03      	add	r3, sp, #12
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	462a      	mov	r2, r5
 800d264:	4b12      	ldr	r3, [pc, #72]	@ (800d2b0 <_vfiprintf_r+0x228>)
 800d266:	a904      	add	r1, sp, #16
 800d268:	4630      	mov	r0, r6
 800d26a:	f7fd fa85 	bl	800a778 <_printf_float>
 800d26e:	4607      	mov	r7, r0
 800d270:	1c78      	adds	r0, r7, #1
 800d272:	d1d6      	bne.n	800d222 <_vfiprintf_r+0x19a>
 800d274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d276:	07d9      	lsls	r1, r3, #31
 800d278:	d405      	bmi.n	800d286 <_vfiprintf_r+0x1fe>
 800d27a:	89ab      	ldrh	r3, [r5, #12]
 800d27c:	059a      	lsls	r2, r3, #22
 800d27e:	d402      	bmi.n	800d286 <_vfiprintf_r+0x1fe>
 800d280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d282:	f7fe f915 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d286:	89ab      	ldrh	r3, [r5, #12]
 800d288:	065b      	lsls	r3, r3, #25
 800d28a:	f53f af1f 	bmi.w	800d0cc <_vfiprintf_r+0x44>
 800d28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d290:	e71e      	b.n	800d0d0 <_vfiprintf_r+0x48>
 800d292:	ab03      	add	r3, sp, #12
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	462a      	mov	r2, r5
 800d298:	4b05      	ldr	r3, [pc, #20]	@ (800d2b0 <_vfiprintf_r+0x228>)
 800d29a:	a904      	add	r1, sp, #16
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7fd fcf3 	bl	800ac88 <_printf_i>
 800d2a2:	e7e4      	b.n	800d26e <_vfiprintf_r+0x1e6>
 800d2a4:	0800d5c7 	.word	0x0800d5c7
 800d2a8:	0800d5d1 	.word	0x0800d5d1
 800d2ac:	0800a779 	.word	0x0800a779
 800d2b0:	0800d065 	.word	0x0800d065
 800d2b4:	0800d5cd 	.word	0x0800d5cd

0800d2b8 <_raise_r>:
 800d2b8:	291f      	cmp	r1, #31
 800d2ba:	b538      	push	{r3, r4, r5, lr}
 800d2bc:	4605      	mov	r5, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	d904      	bls.n	800d2cc <_raise_r+0x14>
 800d2c2:	2316      	movs	r3, #22
 800d2c4:	6003      	str	r3, [r0, #0]
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d2ce:	b112      	cbz	r2, 800d2d6 <_raise_r+0x1e>
 800d2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2d4:	b94b      	cbnz	r3, 800d2ea <_raise_r+0x32>
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	f000 f830 	bl	800d33c <_getpid_r>
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4601      	mov	r1, r0
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2e6:	f000 b817 	b.w	800d318 <_kill_r>
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d00a      	beq.n	800d304 <_raise_r+0x4c>
 800d2ee:	1c59      	adds	r1, r3, #1
 800d2f0:	d103      	bne.n	800d2fa <_raise_r+0x42>
 800d2f2:	2316      	movs	r3, #22
 800d2f4:	6003      	str	r3, [r0, #0]
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	e7e7      	b.n	800d2ca <_raise_r+0x12>
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d300:	4620      	mov	r0, r4
 800d302:	4798      	blx	r3
 800d304:	2000      	movs	r0, #0
 800d306:	e7e0      	b.n	800d2ca <_raise_r+0x12>

0800d308 <raise>:
 800d308:	4b02      	ldr	r3, [pc, #8]	@ (800d314 <raise+0xc>)
 800d30a:	4601      	mov	r1, r0
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	f7ff bfd3 	b.w	800d2b8 <_raise_r>
 800d312:	bf00      	nop
 800d314:	24000090 	.word	0x24000090

0800d318 <_kill_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4d07      	ldr	r5, [pc, #28]	@ (800d338 <_kill_r+0x20>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4604      	mov	r4, r0
 800d320:	4608      	mov	r0, r1
 800d322:	4611      	mov	r1, r2
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	f7f5 f9cb 	bl	80026c0 <_kill>
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	d102      	bne.n	800d334 <_kill_r+0x1c>
 800d32e:	682b      	ldr	r3, [r5, #0]
 800d330:	b103      	cbz	r3, 800d334 <_kill_r+0x1c>
 800d332:	6023      	str	r3, [r4, #0]
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop
 800d338:	240057b0 	.word	0x240057b0

0800d33c <_getpid_r>:
 800d33c:	f7f5 b9be 	b.w	80026bc <_getpid>

0800d340 <_init>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	bf00      	nop
 800d344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d346:	bc08      	pop	{r3}
 800d348:	469e      	mov	lr, r3
 800d34a:	4770      	bx	lr

0800d34c <_fini>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	bf00      	nop
 800d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d352:	bc08      	pop	{r3}
 800d354:	469e      	mov	lr, r3
 800d356:	4770      	bx	lr
